
TEST_BLE_OT_CONC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000115a8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001378  080116e8  080116e8  000216e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012a60  08012a60  00022a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012a68  08012a68  00022a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012a6c  08012a6c  00022a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000004  08012a70  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000094  08012b00  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000051  20000130  08012b99  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000184  08012bea  00030184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a0  20000198  08012bfb  00030198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006b64  20000238  08012c9b  00030238  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20006d9c  08012c9b  00036d9c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00040000  2**2
                  ALLOC
 16 MB_MEM2       0000086f  200301e0  200301e0  00040000  2**2
                  ALLOC
 17 .debug_info   000522ac  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00009778  00000000  00000000  00082514  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003630  00000000  00000000  0008bc90  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00003200  00000000  00000000  0008f2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  00033fd6  00000000  00000000  000924c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   00036bda  00000000  00000000  000c6496  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    0010f5b0  00000000  00000000  000fd070  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  0020c620  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000e768  00000000  00000000  0020c69c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000238 	.word	0x20000238
 800015c:	00000000 	.word	0x00000000
 8000160:	080116d0 	.word	0x080116d0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000023c 	.word	0x2000023c
 800017c:	080116d0 	.word	0x080116d0

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800038e:	f1a4 0401 	sub.w	r4, r4, #1
 8000392:	d1e9      	bne.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__aeabi_d2f>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009f4:	bf24      	itt	cs
 80009f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009fe:	d90d      	bls.n	8000a1c <__aeabi_d2f+0x30>
 8000a00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a14:	bf08      	it	eq
 8000a16:	f020 0001 	biceq.w	r0, r0, #1
 8000a1a:	4770      	bx	lr
 8000a1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a20:	d121      	bne.n	8000a66 <__aeabi_d2f+0x7a>
 8000a22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a26:	bfbc      	itt	lt
 8000a28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	4770      	bxlt	lr
 8000a2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a36:	f1c2 0218 	rsb	r2, r2, #24
 8000a3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a42:	fa20 f002 	lsr.w	r0, r0, r2
 8000a46:	bf18      	it	ne
 8000a48:	f040 0001 	orrne.w	r0, r0, #1
 8000a4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a58:	ea40 000c 	orr.w	r0, r0, ip
 8000a5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a64:	e7cc      	b.n	8000a00 <__aeabi_d2f+0x14>
 8000a66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a6a:	d107      	bne.n	8000a7c <__aeabi_d2f+0x90>
 8000a6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a70:	bf1e      	ittt	ne
 8000a72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a7a:	4770      	bxne	lr
 8000a7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b972 	b.w	8000d88 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4688      	mov	r8, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14b      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4615      	mov	r5, r2
 8000ace:	d967      	bls.n	8000ba0 <__udivmoddi4+0xe4>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0720 	rsb	r7, r2, #32
 8000ada:	fa01 f302 	lsl.w	r3, r1, r2
 8000ade:	fa20 f707 	lsr.w	r7, r0, r7
 8000ae2:	4095      	lsls	r5, r2
 8000ae4:	ea47 0803 	orr.w	r8, r7, r3
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aee:	0c23      	lsrs	r3, r4, #16
 8000af0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000af4:	fa1f fc85 	uxth.w	ip, r5
 8000af8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000afc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b00:	fb07 f10c 	mul.w	r1, r7, ip
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d909      	bls.n	8000b1c <__udivmoddi4+0x60>
 8000b08:	18eb      	adds	r3, r5, r3
 8000b0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b0e:	f080 811b 	bcs.w	8000d48 <__udivmoddi4+0x28c>
 8000b12:	4299      	cmp	r1, r3
 8000b14:	f240 8118 	bls.w	8000d48 <__udivmoddi4+0x28c>
 8000b18:	3f02      	subs	r7, #2
 8000b1a:	442b      	add	r3, r5
 8000b1c:	1a5b      	subs	r3, r3, r1
 8000b1e:	b2a4      	uxth	r4, r4
 8000b20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b30:	45a4      	cmp	ip, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x8c>
 8000b34:	192c      	adds	r4, r5, r4
 8000b36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3a:	f080 8107 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	f240 8104 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b44:	3802      	subs	r0, #2
 8000b46:	442c      	add	r4, r5
 8000b48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4c:	eba4 040c 	sub.w	r4, r4, ip
 8000b50:	2700      	movs	r7, #0
 8000b52:	b11e      	cbz	r6, 8000b5c <__udivmoddi4+0xa0>
 8000b54:	40d4      	lsrs	r4, r2
 8000b56:	2300      	movs	r3, #0
 8000b58:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d909      	bls.n	8000b7a <__udivmoddi4+0xbe>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80eb 	beq.w	8000d42 <__udivmoddi4+0x286>
 8000b6c:	2700      	movs	r7, #0
 8000b6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b72:	4638      	mov	r0, r7
 8000b74:	4639      	mov	r1, r7
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	fab3 f783 	clz	r7, r3
 8000b7e:	2f00      	cmp	r7, #0
 8000b80:	d147      	bne.n	8000c12 <__udivmoddi4+0x156>
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xd0>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 80fa 	bhi.w	8000d80 <__udivmoddi4+0x2c4>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4698      	mov	r8, r3
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d0e0      	beq.n	8000b5c <__udivmoddi4+0xa0>
 8000b9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b9e:	e7dd      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ba0:	b902      	cbnz	r2, 8000ba4 <__udivmoddi4+0xe8>
 8000ba2:	deff      	udf	#255	; 0xff
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	f040 808f 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bae:	1b49      	subs	r1, r1, r5
 8000bb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bb4:	fa1f f885 	uxth.w	r8, r5
 8000bb8:	2701      	movs	r7, #1
 8000bba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bbe:	0c23      	lsrs	r3, r4, #16
 8000bc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bd0:	18eb      	adds	r3, r5, r3
 8000bd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4299      	cmp	r1, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2bc>
 8000bde:	4684      	mov	ip, r0
 8000be0:	1a59      	subs	r1, r3, r1
 8000be2:	b2a3      	uxth	r3, r4
 8000be4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bf0:	fb08 f800 	mul.w	r8, r8, r0
 8000bf4:	45a0      	cmp	r8, r4
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x14c>
 8000bf8:	192c      	adds	r4, r5, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x14a>
 8000c00:	45a0      	cmp	r8, r4
 8000c02:	f200 80b6 	bhi.w	8000d72 <__udivmoddi4+0x2b6>
 8000c06:	4618      	mov	r0, r3
 8000c08:	eba4 0408 	sub.w	r4, r4, r8
 8000c0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c10:	e79f      	b.n	8000b52 <__udivmoddi4+0x96>
 8000c12:	f1c7 0c20 	rsb	ip, r7, #32
 8000c16:	40bb      	lsls	r3, r7
 8000c18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c20:	fa01 f407 	lsl.w	r4, r1, r7
 8000c24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c30:	4325      	orrs	r5, r4
 8000c32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c36:	0c2c      	lsrs	r4, r5, #16
 8000c38:	fb08 3319 	mls	r3, r8, r9, r3
 8000c3c:	fa1f fa8e 	uxth.w	sl, lr
 8000c40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c44:	fb09 f40a 	mul.w	r4, r9, sl
 8000c48:	429c      	cmp	r4, r3
 8000c4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1e 0303 	adds.w	r3, lr, r3
 8000c58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c5c:	f080 8087 	bcs.w	8000d6e <__udivmoddi4+0x2b2>
 8000c60:	429c      	cmp	r4, r3
 8000c62:	f240 8084 	bls.w	8000d6e <__udivmoddi4+0x2b2>
 8000c66:	f1a9 0902 	sub.w	r9, r9, #2
 8000c6a:	4473      	add	r3, lr
 8000c6c:	1b1b      	subs	r3, r3, r4
 8000c6e:	b2ad      	uxth	r5, r5
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c80:	45a2      	cmp	sl, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1e 0404 	adds.w	r4, lr, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	d26b      	bcs.n	8000d66 <__udivmoddi4+0x2aa>
 8000c8e:	45a2      	cmp	sl, r4
 8000c90:	d969      	bls.n	8000d66 <__udivmoddi4+0x2aa>
 8000c92:	3802      	subs	r0, #2
 8000c94:	4474      	add	r4, lr
 8000c96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9e:	eba4 040a 	sub.w	r4, r4, sl
 8000ca2:	454c      	cmp	r4, r9
 8000ca4:	46c2      	mov	sl, r8
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	d354      	bcc.n	8000d54 <__udivmoddi4+0x298>
 8000caa:	d051      	beq.n	8000d50 <__udivmoddi4+0x294>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d069      	beq.n	8000d84 <__udivmoddi4+0x2c8>
 8000cb0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cb4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cb8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cbc:	40fd      	lsrs	r5, r7
 8000cbe:	40fc      	lsrs	r4, r7
 8000cc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e747      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cd4:	4095      	lsls	r5, r2
 8000cd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cda:	fa21 f303 	lsr.w	r3, r1, r3
 8000cde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce2:	4338      	orrs	r0, r7
 8000ce4:	0c01      	lsrs	r1, r0, #16
 8000ce6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cea:	fa1f f885 	uxth.w	r8, r5
 8000cee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb07 f308 	mul.w	r3, r7, r8
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x256>
 8000d02:	1869      	adds	r1, r5, r1
 8000d04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d08:	d22f      	bcs.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d92d      	bls.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0e:	3f02      	subs	r7, #2
 8000d10:	4429      	add	r1, r5
 8000d12:	1acb      	subs	r3, r1, r3
 8000d14:	b281      	uxth	r1, r0
 8000d16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d22:	fb00 f308 	mul.w	r3, r0, r8
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d907      	bls.n	8000d3a <__udivmoddi4+0x27e>
 8000d2a:	1869      	adds	r1, r5, r1
 8000d2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d30:	d217      	bcs.n	8000d62 <__udivmoddi4+0x2a6>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d915      	bls.n	8000d62 <__udivmoddi4+0x2a6>
 8000d36:	3802      	subs	r0, #2
 8000d38:	4429      	add	r1, r5
 8000d3a:	1ac9      	subs	r1, r1, r3
 8000d3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d40:	e73b      	b.n	8000bba <__udivmoddi4+0xfe>
 8000d42:	4637      	mov	r7, r6
 8000d44:	4630      	mov	r0, r6
 8000d46:	e709      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000d48:	4607      	mov	r7, r0
 8000d4a:	e6e7      	b.n	8000b1c <__udivmoddi4+0x60>
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	e6fb      	b.n	8000b48 <__udivmoddi4+0x8c>
 8000d50:	4541      	cmp	r1, r8
 8000d52:	d2ab      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d58:	eb69 020e 	sbc.w	r2, r9, lr
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	4613      	mov	r3, r2
 8000d60:	e7a4      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d62:	4660      	mov	r0, ip
 8000d64:	e7e9      	b.n	8000d3a <__udivmoddi4+0x27e>
 8000d66:	4618      	mov	r0, r3
 8000d68:	e795      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6a:	4667      	mov	r7, ip
 8000d6c:	e7d1      	b.n	8000d12 <__udivmoddi4+0x256>
 8000d6e:	4681      	mov	r9, r0
 8000d70:	e77c      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d72:	3802      	subs	r0, #2
 8000d74:	442c      	add	r4, r5
 8000d76:	e747      	b.n	8000c08 <__udivmoddi4+0x14c>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	442b      	add	r3, r5
 8000d7e:	e72f      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d80:	4638      	mov	r0, r7
 8000d82:	e708      	b.n	8000b96 <__udivmoddi4+0xda>
 8000d84:	4637      	mov	r7, r6
 8000d86:	e6e9      	b.n	8000b5c <__udivmoddi4+0xa0>

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d94:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d9a:	f023 0207 	bic.w	r2, r3, #7
 8000d9e:	4905      	ldr	r1, [pc, #20]	; (8000db4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	58000400 	.word	0x58000400

08000db8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <LL_EXTI_EnableIT_32_63+0x24>)
 8000dc2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000dc6:	4905      	ldr	r1, [pc, #20]	; (8000ddc <LL_EXTI_EnableIT_32_63+0x24>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	58000800 	.word	0x58000800

08000de0 <LL_C2_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8000dea:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8000dee:	4905      	ldr	r1, [pc, #20]	; (8000e04 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	58000800 	.word	0x58000800

08000e08 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	608b      	str	r3, [r1, #8]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000e34:	f000 f838 	bl	8000ea8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000e38:	490c      	ldr	r1, [pc, #48]	; (8000e6c <APPE_Init+0x3c>)
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 fe30 	bl	8001aa0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  /* initialize debugger module if supported and debug trace if activated */
  Init_Debug();
 8000e40:	f000 f822 	bl	8000e88 <Init_Debug>

  //TODO: remove displayConcurrentMode() call since just used for debugging
  /* Display Dynamic concurrent mode (BLE and Thread)  */
  displayConcurrentMode();
 8000e44:	f000 f814 	bl	8000e70 <displayConcurrentMode>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000e48:	2101      	movs	r1, #1
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f00f f954 	bl	80100f8 <UTIL_LPM_SetOffMode>

  BSP_LED_Init(LED_BLUE);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f001 fa2f 	bl	80022b4 <BSP_LED_Init>
   BSP_LED_Init(LED_GREEN);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f001 fa2c 	bl	80022b4 <BSP_LED_Init>
   BSP_LED_Init(LED_RED);
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	f001 fa29 	bl	80022b4 <BSP_LED_Init>

//   BSP_LED_On(LED_GREEN);

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000e62:	f000 f82f 	bl	8000ec4 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000e66:	bf00      	nop
}
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20006aa0 	.word	0x20006aa0

08000e70 <displayConcurrentMode>:
/* USER CODE BEGIN FD */
//TODO: remove function
static void displayConcurrentMode()
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
    APP_DBG("Dynamic Concurrent Mode BLE/OpenThread starting...");
 8000e74:	4a03      	ldr	r2, [pc, #12]	; (8000e84 <displayConcurrentMode+0x14>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f001 fcbd 	bl	80027f8 <logApplication>
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	08011700 	.word	0x08011700

08000e88 <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug( void )
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000e8c:	f002 f84e 	bl	8002f2c <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000e90:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000e94:	f7ff ff90 	bl	8000db8 <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000e98:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000e9c:	f7ff ffa0 	bl	8000de0 <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000ea0:	f008 fbfa 	bl	8009698 <DbgTraceInit>
#endif

  return;
 8000ea4:	bf00      	nop
}
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000eac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000eb0:	f7ff ffaa 	bl	8000e08 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000eb4:	f00f f90e 	bl	80100d4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000eb8:	2004      	movs	r0, #4
 8000eba:	f7ff ff67 	bl	8000d8c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000ebe:	bf00      	nop
}
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000eca:	f008 f941 	bl	8009150 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f009 fb76 	bl	800a5c0 <osMutexNew>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <appe_Tl_Init+0x70>)
 8000ed8:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f009 fcb6 	bl	800a850 <osSemaphoreNew>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <appe_Tl_Init+0x74>)
 8000ee8:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8000eea:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <appe_Tl_Init+0x78>)
 8000eec:	2100      	movs	r1, #0
 8000eee:	4814      	ldr	r0, [pc, #80]	; (8000f40 <appe_Tl_Init+0x7c>)
 8000ef0:	f009 f99c 	bl	800a22c <osThreadNew>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <appe_Tl_Init+0x80>)
 8000ef8:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <appe_Tl_Init+0x84>)
 8000efc:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <appe_Tl_Init+0x88>)
 8000f00:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000f02:	463b      	mov	r3, r7
 8000f04:	4619      	mov	r1, r3
 8000f06:	4812      	ldr	r0, [pc, #72]	; (8000f50 <appe_Tl_Init+0x8c>)
 8000f08:	f007 ffe8 	bl	8008edc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <appe_Tl_Init+0x90>)
 8000f0e:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <appe_Tl_Init+0x94>)
 8000f12:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <appe_Tl_Init+0x98>)
 8000f16:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000f18:	f240 533c 	movw	r3, #1340	; 0x53c
 8000f1c:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	4618      	mov	r0, r3
 8000f24:	f008 fa88 	bl	8009438 <TL_MM_Init>

  TL_Enable();
 8000f28:	f008 f90c 	bl	8009144 <TL_Enable>

  return;
 8000f2c:	bf00      	nop
}
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20006a80 	.word	0x20006a80
 8000f38:	20006a88 	.word	0x20006a88
 8000f3c:	08012770 	.word	0x08012770
 8000f40:	0800107d 	.word	0x0800107d
 8000f44:	20006a84 	.word	0x20006a84
 8000f48:	2003071c 	.word	0x2003071c
 8000f4c:	08000f61 	.word	0x08000f61
 8000f50:	08000fa1 	.word	0x08000fa1
 8000f54:	20030934 	.word	0x20030934
 8000f58:	20030828 	.word	0x20030828
 8000f5c:	200301e0 	.word	0x200301e0

08000f60 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <APPE_SysStatusNot+0x16>
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d008      	beq.n	8000f86 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8000f74:	e00d      	b.n	8000f92 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <APPE_SysStatusNot+0x3c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f009 fbb8 	bl	800a6f4 <osMutexAcquire>
      break;
 8000f84:	e005      	b.n	8000f92 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <APPE_SysStatusNot+0x3c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f009 fc10 	bl	800a7b0 <osMutexRelease>
      break;
 8000f90:	bf00      	nop
  }
  return;
 8000f92:	bf00      	nop
}
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20006a80 	.word	0x20006a80

08000fa0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	330b      	adds	r3, #11
 8000fae:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8000fba:	d004      	beq.n	8000fc6 <APPE_SysUserEvtRx+0x26>
 8000fbc:	f249 2201 	movw	r2, #37377	; 0x9201
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d003      	beq.n	8000fcc <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8000fc4:	e008      	b.n	8000fd8 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8000fc6:	f000 f833 	bl	8001030 <APPE_SysEvtReadyProcessing>
         break;
 8000fca:	e005      	b.n	8000fd8 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	789b      	ldrb	r3, [r3, #2]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f805 	bl	8000fe0 <APPE_SysEvtError>
         break;
 8000fd6:	bf00      	nop
  }
  return;
 8000fd8:	bf00      	nop
}
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b7d      	cmp	r3, #125	; 0x7d
 8000fee:	d002      	beq.n	8000ff6 <APPE_SysEvtError+0x16>
 8000ff0:	2b7e      	cmp	r3, #126	; 0x7e
 8000ff2:	d006      	beq.n	8001002 <APPE_SysEvtError+0x22>
 8000ff4:	e00b      	b.n	800100e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <APPE_SysEvtError+0x44>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f001 fbfc 	bl	80027f8 <logApplication>
       break;
 8001000:	e00c      	b.n	800101c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001002:	4a09      	ldr	r2, [pc, #36]	; (8001028 <APPE_SysEvtError+0x48>)
 8001004:	2101      	movs	r1, #1
 8001006:	2000      	movs	r0, #0
 8001008:	f001 fbf6 	bl	80027f8 <logApplication>
       break;
 800100c:	e006      	b.n	800101c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	4a06      	ldr	r2, [pc, #24]	; (800102c <APPE_SysEvtError+0x4c>)
 8001012:	2101      	movs	r1, #1
 8001014:	2000      	movs	r0, #0
 8001016:	f001 fbef 	bl	80027f8 <logApplication>
       break;
 800101a:	bf00      	nop
  }
  return;
 800101c:	bf00      	nop
}
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	08011734 	.word	0x08011734
 8001028:	08011758 	.word	0x08011758
 800102c:	08011778 	.word	0x08011778

08001030 <APPE_SysEvtReadyProcessing>:
//  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
//  return;
//}

static void APPE_SysEvtReadyProcessing( void )
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001034:	f008 fa74 	bl	8009520 <TL_TRACES_Init>
   * APP_THREAD_Init_Dyn_1() : Thread Stack Init until it's ready to be configured (default channel, PID, etc...)
   * APP_BLE_Init_Dyn_2()    : Start ADV
   * APP_THREAD_Init_Dyn_2() : Thread Stack configuration (default channel, PID, etc...) to be able to start scanning
   *                           or joining a Thread Network
   */
  APP_DBG("1- Initialisation of BLE Stack...");
 8001038:	4a0c      	ldr	r2, [pc, #48]	; (800106c <APPE_SysEvtReadyProcessing+0x3c>)
 800103a:	2101      	movs	r1, #1
 800103c:	2000      	movs	r0, #0
 800103e:	f001 fbdb 	bl	80027f8 <logApplication>
  APP_BLE_Init_Dyn_1();
 8001042:	f00d f8a7 	bl	800e194 <APP_BLE_Init_Dyn_1>
  APP_DBG("2- Initialisation of OpenThread Stack. FW info :");
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <APPE_SysEvtReadyProcessing+0x40>)
 8001048:	2101      	movs	r1, #1
 800104a:	2000      	movs	r0, #0
 800104c:	f001 fbd4 	bl	80027f8 <logApplication>
//  APP_THREAD_Init_Dyn_1();

  APP_DBG("3- Start BLE ADV...");
 8001050:	4a08      	ldr	r2, [pc, #32]	; (8001074 <APPE_SysEvtReadyProcessing+0x44>)
 8001052:	2101      	movs	r1, #1
 8001054:	2000      	movs	r0, #0
 8001056:	f001 fbcf 	bl	80027f8 <logApplication>
  APP_BLE_Init_Dyn_2();
 800105a:	f00d f90d 	bl	800e278 <APP_BLE_Init_Dyn_2>
  APP_DBG("4- Configure OpenThread (Channel, PANID, IPv6 stack, ...) and Start it...");
 800105e:	4a06      	ldr	r2, [pc, #24]	; (8001078 <APPE_SysEvtReadyProcessing+0x48>)
 8001060:	2101      	movs	r1, #1
 8001062:	2000      	movs	r0, #0
 8001064:	f001 fbc8 	bl	80027f8 <logApplication>
  /* Thread stack is initialized, low power mode can be enabled */
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
  UTIL_LPM_SetStopMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
#endif

  return;
 8001068:	bf00      	nop
}
 800106a:	bd80      	pop	{r7, pc}
 800106c:	08011798 	.word	0x08011798
 8001070:	080117bc 	.word	0x080117bc
 8001074:	080117f0 	.word	0x080117f0
 8001078:	08011804 	.word	0x08011804

0800107c <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8001084:	f04f 32ff 	mov.w	r2, #4294967295
 8001088:	2100      	movs	r1, #0
 800108a:	2001      	movs	r0, #1
 800108c:	f009 f9d6 	bl	800a43c <osThreadFlagsWait>
     shci_user_evt_proc();
 8001090:	f007 ff40 	bl	8008f14 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8001094:	e7f6      	b.n	8001084 <ShciUserEvtProcess+0x8>
	...

08001098 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <shci_notify_asynch_evt+0x1c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2101      	movs	r1, #1
 80010a6:	4618      	mov	r0, r3
 80010a8:	f009 f966 	bl	800a378 <osThreadFlagsSet>
  return;
 80010ac:	bf00      	nop
}
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20006a84 	.word	0x20006a84

080010b8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <shci_cmd_resp_release+0x1c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f009 fcc7 	bl	800aa58 <osSemaphoreRelease>
  return;
 80010ca:	bf00      	nop
}
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20006a88 	.word	0x20006a88

080010d8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <shci_cmd_resp_wait+0x20>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f04f 31ff 	mov.w	r1, #4294967295
 80010e8:	4618      	mov	r0, r3
 80010ea:	f009 fc4f 	bl	800a98c <osSemaphoreAcquire>
  return;
 80010ee:	bf00      	nop
}
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20006a88 	.word	0x20006a88

080010fc <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
#if(CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	330b      	adds	r3, #11
 8001108:	1c99      	adds	r1, r3, #2
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7a9b      	ldrb	r3, [r3, #10]
 800110e:	3b02      	subs	r3, #2
 8001110:	461a      	mov	r2, r3
 8001112:	2001      	movs	r0, #1
 8001114:	f008 fae6 	bl	80096e4 <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f008 f9c9 	bl	80094b0 <TL_MM_EvtDone>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
#ifdef CFG_DEBUG_TRACE_UART
  MX_LPUART1_UART_Init();
 800112a:	f001 fd17 	bl	8002b5c <MX_LPUART1_UART_Init>
  return;
 800112e:	bf00      	nop
#endif
}
 8001130:	bd80      	pop	{r7, pc}

08001132 <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	60f8      	str	r0, [r7, #12]
 800113a:	460b      	mov	r3, r1
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001140:	897a      	ldrh	r2, [r7, #10]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68f9      	ldr	r1, [r7, #12]
 8001146:	2002      	movs	r0, #2
 8001148:	f000 ff5e 	bl	8002008 <HW_UART_Transmit_DMA>

  return;
 800114c:	bf00      	nop
}
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001158:	4a05      	ldr	r2, [pc, #20]	; (8001170 <MX_FREERTOS_Init+0x1c>)
 800115a:	2100      	movs	r1, #0
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_FREERTOS_Init+0x20>)
 800115e:	f009 f865 	bl	800a22c <osThreadNew>
 8001162:	4602      	mov	r2, r0
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <MX_FREERTOS_Init+0x24>)
 8001166:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  APPE_Init();
 8001168:	f7ff fe62 	bl	8000e30 <APPE_Init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	08012794 	.word	0x08012794
 8001174:	0800117d 	.word	0x0800117d
 8001178:	20006a8c 	.word	0x20006a8c

0800117c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001184:	2001      	movs	r0, #1
 8001186:	f009 f9ed 	bl	800a564 <osDelay>
 800118a:	e7fb      	b.n	8001184 <StartDefaultTask+0x8>

0800118c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001198:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800119a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4013      	ands	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011b0:	68fb      	ldr	r3, [r7, #12]
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011c2:	2004      	movs	r0, #4
 80011c4:	f7ff ffe2 	bl	800118c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011c8:	2001      	movs	r0, #1
 80011ca:	f7ff ffdf 	bl	800118c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ce:	2002      	movs	r0, #2
 80011d0:	f7ff ffdc 	bl	800118c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2105      	movs	r1, #5
 80011d8:	200e      	movs	r0, #14
 80011da:	f001 ffc3 	bl	8003164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80011de:	200e      	movs	r0, #14
 80011e0:	f001 ffda 	bl	8003198 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2105      	movs	r1, #5
 80011e8:	203a      	movs	r0, #58	; 0x3a
 80011ea:	f001 ffbb 	bl	8003164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80011ee:	203a      	movs	r0, #58	; 0x3a
 80011f0:	f001 ffd2 	bl	8003198 <HAL_NVIC_EnableIRQ>

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001218:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800121a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4313      	orrs	r3, r2
 8001222:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001228:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4013      	ands	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001230:	68fb      	ldr	r3, [r7, #12]
}
 8001232:	bf00      	nop
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2004      	movs	r0, #4
 8001244:	f7ff ffe2 	bl	800120c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	2001      	movs	r0, #1
 800124a:	f7ff ffdf 	bl	800120c <LL_AHB2_GRP1_EnableClock>

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <LL_EXTI_EnableIT_0_31>:
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <LL_EXTI_EnableIT_0_31+0x24>)
 800125e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001262:	4905      	ldr	r1, [pc, #20]	; (8001278 <LL_EXTI_EnableIT_0_31+0x24>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4313      	orrs	r3, r2
 8001268:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	58000800 	.word	0x58000800

0800127c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4904      	ldr	r1, [pc, #16]	; (800129c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4313      	orrs	r3, r2
 800128e:	600b      	str	r3, [r1, #0]

}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	58000800 	.word	0x58000800

080012a0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <ReadRtcSsrValue+0x3c>)
 80012a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <ReadRtcSsrValue+0x3c>)
 80012b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80012b6:	e005      	b.n	80012c4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <ReadRtcSsrValue+0x3c>)
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d1f5      	bne.n	80012b8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80012cc:	683b      	ldr	r3, [r7, #0]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40002800 	.word	0x40002800

080012e0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	460a      	mov	r2, r1
 80012ea:	71fb      	strb	r3, [r7, #7]
 80012ec:	4613      	mov	r3, r2
 80012ee:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80012f0:	79ba      	ldrb	r2, [r7, #6]
 80012f2:	491d      	ldr	r1, [pc, #116]	; (8001368 <LinkTimerAfter+0x88>)
 80012f4:	4613      	mov	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4413      	add	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	440b      	add	r3, r1
 80012fe:	3315      	adds	r3, #21
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	2b06      	cmp	r3, #6
 8001308:	d009      	beq.n	800131e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800130a:	7bfa      	ldrb	r2, [r7, #15]
 800130c:	4916      	ldr	r1, [pc, #88]	; (8001368 <LinkTimerAfter+0x88>)
 800130e:	4613      	mov	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	440b      	add	r3, r1
 8001318:	3314      	adds	r3, #20
 800131a:	79fa      	ldrb	r2, [r7, #7]
 800131c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800131e:	79fa      	ldrb	r2, [r7, #7]
 8001320:	4911      	ldr	r1, [pc, #68]	; (8001368 <LinkTimerAfter+0x88>)
 8001322:	4613      	mov	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	440b      	add	r3, r1
 800132c:	3315      	adds	r3, #21
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001332:	79fa      	ldrb	r2, [r7, #7]
 8001334:	490c      	ldr	r1, [pc, #48]	; (8001368 <LinkTimerAfter+0x88>)
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	440b      	add	r3, r1
 8001340:	3314      	adds	r3, #20
 8001342:	79ba      	ldrb	r2, [r7, #6]
 8001344:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001346:	79ba      	ldrb	r2, [r7, #6]
 8001348:	4907      	ldr	r1, [pc, #28]	; (8001368 <LinkTimerAfter+0x88>)
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	440b      	add	r3, r1
 8001354:	3315      	adds	r3, #21
 8001356:	79fa      	ldrb	r2, [r7, #7]
 8001358:	701a      	strb	r2, [r3, #0]

  return;
 800135a:	bf00      	nop
}
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000094 	.word	0x20000094

0800136c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	460a      	mov	r2, r1
 8001376:	71fb      	strb	r3, [r7, #7]
 8001378:	4613      	mov	r3, r2
 800137a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800137c:	4b29      	ldr	r3, [pc, #164]	; (8001424 <LinkTimerBefore+0xb8>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	79ba      	ldrb	r2, [r7, #6]
 8001384:	429a      	cmp	r2, r3
 8001386:	d032      	beq.n	80013ee <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001388:	79ba      	ldrb	r2, [r7, #6]
 800138a:	4927      	ldr	r1, [pc, #156]	; (8001428 <LinkTimerBefore+0xbc>)
 800138c:	4613      	mov	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	440b      	add	r3, r1
 8001396:	3314      	adds	r3, #20
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 800139c:	7bfa      	ldrb	r2, [r7, #15]
 800139e:	4922      	ldr	r1, [pc, #136]	; (8001428 <LinkTimerBefore+0xbc>)
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4413      	add	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	440b      	add	r3, r1
 80013aa:	3315      	adds	r3, #21
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80013b0:	79fa      	ldrb	r2, [r7, #7]
 80013b2:	491d      	ldr	r1, [pc, #116]	; (8001428 <LinkTimerBefore+0xbc>)
 80013b4:	4613      	mov	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	440b      	add	r3, r1
 80013be:	3315      	adds	r3, #21
 80013c0:	79ba      	ldrb	r2, [r7, #6]
 80013c2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80013c4:	79fa      	ldrb	r2, [r7, #7]
 80013c6:	4918      	ldr	r1, [pc, #96]	; (8001428 <LinkTimerBefore+0xbc>)
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	440b      	add	r3, r1
 80013d2:	3314      	adds	r3, #20
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80013d8:	79ba      	ldrb	r2, [r7, #6]
 80013da:	4913      	ldr	r1, [pc, #76]	; (8001428 <LinkTimerBefore+0xbc>)
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	3314      	adds	r3, #20
 80013e8:	79fa      	ldrb	r2, [r7, #7]
 80013ea:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80013ec:	e014      	b.n	8001418 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80013ee:	79fa      	ldrb	r2, [r7, #7]
 80013f0:	490d      	ldr	r1, [pc, #52]	; (8001428 <LinkTimerBefore+0xbc>)
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	440b      	add	r3, r1
 80013fc:	3315      	adds	r3, #21
 80013fe:	79ba      	ldrb	r2, [r7, #6]
 8001400:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001402:	79ba      	ldrb	r2, [r7, #6]
 8001404:	4908      	ldr	r1, [pc, #32]	; (8001428 <LinkTimerBefore+0xbc>)
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	440b      	add	r3, r1
 8001410:	3314      	adds	r3, #20
 8001412:	79fa      	ldrb	r2, [r7, #7]
 8001414:	701a      	strb	r2, [r3, #0]
  return;
 8001416:	bf00      	nop
}
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000124 	.word	0x20000124
 8001428:	20000094 	.word	0x20000094

0800142c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001436:	4b4e      	ldr	r3, [pc, #312]	; (8001570 <linkTimer+0x144>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b06      	cmp	r3, #6
 800143e:	d118      	bne.n	8001472 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001440:	4b4b      	ldr	r3, [pc, #300]	; (8001570 <linkTimer+0x144>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b4b      	ldr	r3, [pc, #300]	; (8001574 <linkTimer+0x148>)
 8001448:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800144a:	4a49      	ldr	r2, [pc, #292]	; (8001570 <linkTimer+0x144>)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001450:	79fa      	ldrb	r2, [r7, #7]
 8001452:	4949      	ldr	r1, [pc, #292]	; (8001578 <linkTimer+0x14c>)
 8001454:	4613      	mov	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4413      	add	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	440b      	add	r3, r1
 800145e:	3315      	adds	r3, #21
 8001460:	2206      	movs	r2, #6
 8001462:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001464:	4b45      	ldr	r3, [pc, #276]	; (800157c <linkTimer+0x150>)
 8001466:	f04f 32ff 	mov.w	r2, #4294967295
 800146a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	81fb      	strh	r3, [r7, #14]
 8001470:	e078      	b.n	8001564 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001472:	f000 f909 	bl	8001688 <ReturnTimeElapsed>
 8001476:	4603      	mov	r3, r0
 8001478:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800147a:	79fa      	ldrb	r2, [r7, #7]
 800147c:	493e      	ldr	r1, [pc, #248]	; (8001578 <linkTimer+0x14c>)
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	440b      	add	r3, r1
 8001488:	3308      	adds	r3, #8
 800148a:	6819      	ldr	r1, [r3, #0]
 800148c:	89fb      	ldrh	r3, [r7, #14]
 800148e:	79fa      	ldrb	r2, [r7, #7]
 8001490:	4419      	add	r1, r3
 8001492:	4839      	ldr	r0, [pc, #228]	; (8001578 <linkTimer+0x14c>)
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4403      	add	r3, r0
 800149e:	3308      	adds	r3, #8
 80014a0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80014a2:	79fa      	ldrb	r2, [r7, #7]
 80014a4:	4934      	ldr	r1, [pc, #208]	; (8001578 <linkTimer+0x14c>)
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	440b      	add	r3, r1
 80014b0:	3308      	adds	r3, #8
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80014b6:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <linkTimer+0x144>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	4619      	mov	r1, r3
 80014be:	4a2e      	ldr	r2, [pc, #184]	; (8001578 <linkTimer+0x14c>)
 80014c0:	460b      	mov	r3, r1
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	440b      	add	r3, r1
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4413      	add	r3, r2
 80014ca:	3308      	adds	r3, #8
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d337      	bcc.n	8001544 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <linkTimer+0x144>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80014da:	7b7a      	ldrb	r2, [r7, #13]
 80014dc:	4926      	ldr	r1, [pc, #152]	; (8001578 <linkTimer+0x14c>)
 80014de:	4613      	mov	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4413      	add	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	440b      	add	r3, r1
 80014e8:	3315      	adds	r3, #21
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80014ee:	e013      	b.n	8001518 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80014f0:	7b7a      	ldrb	r2, [r7, #13]
 80014f2:	4921      	ldr	r1, [pc, #132]	; (8001578 <linkTimer+0x14c>)
 80014f4:	4613      	mov	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	440b      	add	r3, r1
 80014fe:	3315      	adds	r3, #21
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001504:	7b7a      	ldrb	r2, [r7, #13]
 8001506:	491c      	ldr	r1, [pc, #112]	; (8001578 <linkTimer+0x14c>)
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	3315      	adds	r3, #21
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001518:	7b3b      	ldrb	r3, [r7, #12]
 800151a:	2b06      	cmp	r3, #6
 800151c:	d00b      	beq.n	8001536 <linkTimer+0x10a>
 800151e:	7b3a      	ldrb	r2, [r7, #12]
 8001520:	4915      	ldr	r1, [pc, #84]	; (8001578 <linkTimer+0x14c>)
 8001522:	4613      	mov	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4413      	add	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	440b      	add	r3, r1
 800152c:	3308      	adds	r3, #8
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	429a      	cmp	r2, r3
 8001534:	d2dc      	bcs.n	80014f0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001536:	7b7a      	ldrb	r2, [r7, #13]
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fecf 	bl	80012e0 <LinkTimerAfter>
 8001542:	e00f      	b.n	8001564 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <linkTimer+0x144>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ff0c 	bl	800136c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <linkTimer+0x144>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <linkTimer+0x148>)
 800155c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800155e:	4a04      	ldr	r2, [pc, #16]	; (8001570 <linkTimer+0x144>)
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001564:	89fb      	ldrh	r3, [r7, #14]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000124 	.word	0x20000124
 8001574:	20000125 	.word	0x20000125
 8001578:	20000094 	.word	0x20000094
 800157c:	20000128 	.word	0x20000128

08001580 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	460a      	mov	r2, r1
 800158a:	71fb      	strb	r3, [r7, #7]
 800158c:	4613      	mov	r3, r2
 800158e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001590:	4b39      	ldr	r3, [pc, #228]	; (8001678 <UnlinkTimer+0xf8>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	79fa      	ldrb	r2, [r7, #7]
 8001598:	429a      	cmp	r2, r3
 800159a:	d111      	bne.n	80015c0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800159c:	4b36      	ldr	r3, [pc, #216]	; (8001678 <UnlinkTimer+0xf8>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4b36      	ldr	r3, [pc, #216]	; (800167c <UnlinkTimer+0xfc>)
 80015a4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80015a6:	79fa      	ldrb	r2, [r7, #7]
 80015a8:	4935      	ldr	r1, [pc, #212]	; (8001680 <UnlinkTimer+0x100>)
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	440b      	add	r3, r1
 80015b4:	3315      	adds	r3, #21
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <UnlinkTimer+0xf8>)
 80015bc:	701a      	strb	r2, [r3, #0]
 80015be:	e03e      	b.n	800163e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80015c0:	79fa      	ldrb	r2, [r7, #7]
 80015c2:	492f      	ldr	r1, [pc, #188]	; (8001680 <UnlinkTimer+0x100>)
 80015c4:	4613      	mov	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4413      	add	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	440b      	add	r3, r1
 80015ce:	3314      	adds	r3, #20
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80015d4:	79fa      	ldrb	r2, [r7, #7]
 80015d6:	492a      	ldr	r1, [pc, #168]	; (8001680 <UnlinkTimer+0x100>)
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	440b      	add	r3, r1
 80015e2:	3315      	adds	r3, #21
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80015e8:	79f9      	ldrb	r1, [r7, #7]
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	4824      	ldr	r0, [pc, #144]	; (8001680 <UnlinkTimer+0x100>)
 80015ee:	460b      	mov	r3, r1
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	440b      	add	r3, r1
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4403      	add	r3, r0
 80015f8:	3315      	adds	r3, #21
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	b2d8      	uxtb	r0, r3
 80015fe:	4920      	ldr	r1, [pc, #128]	; (8001680 <UnlinkTimer+0x100>)
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	440b      	add	r3, r1
 800160a:	3315      	adds	r3, #21
 800160c:	4602      	mov	r2, r0
 800160e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001610:	7bbb      	ldrb	r3, [r7, #14]
 8001612:	2b06      	cmp	r3, #6
 8001614:	d013      	beq.n	800163e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001616:	79f9      	ldrb	r1, [r7, #7]
 8001618:	7bba      	ldrb	r2, [r7, #14]
 800161a:	4819      	ldr	r0, [pc, #100]	; (8001680 <UnlinkTimer+0x100>)
 800161c:	460b      	mov	r3, r1
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	440b      	add	r3, r1
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4403      	add	r3, r0
 8001626:	3314      	adds	r3, #20
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	b2d8      	uxtb	r0, r3
 800162c:	4914      	ldr	r1, [pc, #80]	; (8001680 <UnlinkTimer+0x100>)
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	440b      	add	r3, r1
 8001638:	3314      	adds	r3, #20
 800163a:	4602      	mov	r2, r0
 800163c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800163e:	79fa      	ldrb	r2, [r7, #7]
 8001640:	490f      	ldr	r1, [pc, #60]	; (8001680 <UnlinkTimer+0x100>)
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	440b      	add	r3, r1
 800164c:	330c      	adds	r3, #12
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <UnlinkTimer+0xf8>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b06      	cmp	r3, #6
 800165a:	d107      	bne.n	800166c <UnlinkTimer+0xec>
 800165c:	79bb      	ldrb	r3, [r7, #6]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d104      	bne.n	800166c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <UnlinkTimer+0x104>)
 8001664:	f04f 32ff 	mov.w	r2, #4294967295
 8001668:	601a      	str	r2, [r3, #0]
  }

  return;
 800166a:	bf00      	nop
 800166c:	bf00      	nop
}
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	20000124 	.word	0x20000124
 800167c:	20000125 	.word	0x20000125
 8001680:	20000094 	.word	0x20000094
 8001684:	20000128 	.word	0x20000128

08001688 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <ReturnTimeElapsed+0x70>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001696:	d026      	beq.n	80016e6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001698:	f7ff fe02 	bl	80012a0 <ReadRtcSsrValue>
 800169c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <ReturnTimeElapsed+0x70>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d805      	bhi.n	80016b4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <ReturnTimeElapsed+0x70>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	e00a      	b.n	80016ca <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <ReturnTimeElapsed+0x74>)
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80016c0:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <ReturnTimeElapsed+0x70>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <ReturnTimeElapsed+0x78>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	fb02 f303 	mul.w	r3, r2, r3
 80016d6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <ReturnTimeElapsed+0x7c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	40d3      	lsrs	r3, r2
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	e001      	b.n	80016ea <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	b29b      	uxth	r3, r3
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000128 	.word	0x20000128
 80016fc:	2000025a 	.word	0x2000025a
 8001700:	20000259 	.word	0x20000259
 8001704:	20000258 	.word	0x20000258

08001708 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d108      	bne.n	800172a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001718:	f7ff fdc2 	bl	80012a0 <ReadRtcSsrValue>
 800171c:	4602      	mov	r2, r0
 800171e:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <RestartWakeupCounter+0xa8>)
 8001720:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001722:	2003      	movs	r0, #3
 8001724:	f001 fd54 	bl	80031d0 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001728:	e03e      	b.n	80017a8 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d803      	bhi.n	8001738 <RestartWakeupCounter+0x30>
 8001730:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <RestartWakeupCounter+0xac>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d002      	beq.n	800173e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	3b01      	subs	r3, #1
 800173c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800173e:	bf00      	nop
 8001740:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <RestartWakeupCounter+0xb0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f7      	beq.n	8001740 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001750:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <RestartWakeupCounter+0xb0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <RestartWakeupCounter+0xb0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001764:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <RestartWakeupCounter+0xb4>)
 8001768:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800176c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800176e:	2003      	movs	r0, #3
 8001770:	f001 fd3c 	bl	80031ec <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <RestartWakeupCounter+0xb8>)
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	0c1b      	lsrs	r3, r3, #16
 800177a:	041b      	lsls	r3, r3, #16
 800177c:	88fa      	ldrh	r2, [r7, #6]
 800177e:	4910      	ldr	r1, [pc, #64]	; (80017c0 <RestartWakeupCounter+0xb8>)
 8001780:	4313      	orrs	r3, r2
 8001782:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001784:	f7ff fd8c 	bl	80012a0 <ReadRtcSsrValue>
 8001788:	4602      	mov	r2, r0
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <RestartWakeupCounter+0xa8>)
 800178c:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <RestartWakeupCounter+0xb0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <RestartWakeupCounter+0xb0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017a0:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80017a2:	f3af 8000 	nop.w
  return ;
 80017a6:	bf00      	nop
}
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000128 	.word	0x20000128
 80017b4:	20000258 	.word	0x20000258
 80017b8:	20000254 	.word	0x20000254
 80017bc:	58000800 	.word	0x58000800
 80017c0:	40002800 	.word	0x40002800

080017c4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <RescheduleTimerList+0x124>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d6:	d108      	bne.n	80017ea <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80017d8:	bf00      	nop
 80017da:	4b44      	ldr	r3, [pc, #272]	; (80018ec <RescheduleTimerList+0x128>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f7      	bne.n	80017da <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80017ea:	4b40      	ldr	r3, [pc, #256]	; (80018ec <RescheduleTimerList+0x128>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	4b3e      	ldr	r3, [pc, #248]	; (80018ec <RescheduleTimerList+0x128>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017fc:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80017fe:	4b3c      	ldr	r3, [pc, #240]	; (80018f0 <RescheduleTimerList+0x12c>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	493b      	ldr	r1, [pc, #236]	; (80018f4 <RescheduleTimerList+0x130>)
 8001808:	4613      	mov	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	3308      	adds	r3, #8
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001818:	f7ff ff36 	bl	8001688 <ReturnTimeElapsed>
 800181c:	4603      	mov	r3, r0
 800181e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	429a      	cmp	r2, r3
 8001826:	d205      	bcs.n	8001834 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800182c:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <RescheduleTimerList+0x134>)
 800182e:	2201      	movs	r2, #1
 8001830:	701a      	strb	r2, [r3, #0]
 8001832:	e04d      	b.n	80018d0 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	4a31      	ldr	r2, [pc, #196]	; (80018fc <RescheduleTimerList+0x138>)
 8001838:	8812      	ldrh	r2, [r2, #0]
 800183a:	b292      	uxth	r2, r2
 800183c:	4413      	add	r3, r2
 800183e:	461a      	mov	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4293      	cmp	r3, r2
 8001844:	d906      	bls.n	8001854 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001846:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <RescheduleTimerList+0x138>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800184c:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <RescheduleTimerList+0x134>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	e03d      	b.n	80018d0 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	b29a      	uxth	r2, r3
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800185e:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <RescheduleTimerList+0x134>)
 8001860:	2201      	movs	r2, #1
 8001862:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001864:	e034      	b.n	80018d0 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	4922      	ldr	r1, [pc, #136]	; (80018f4 <RescheduleTimerList+0x130>)
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	3308      	adds	r3, #8
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	429a      	cmp	r2, r3
 800187c:	d20a      	bcs.n	8001894 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800187e:	7bfa      	ldrb	r2, [r7, #15]
 8001880:	491c      	ldr	r1, [pc, #112]	; (80018f4 <RescheduleTimerList+0x130>)
 8001882:	4613      	mov	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	440b      	add	r3, r1
 800188c:	3308      	adds	r3, #8
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e013      	b.n	80018bc <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001894:	7bfa      	ldrb	r2, [r7, #15]
 8001896:	4917      	ldr	r1, [pc, #92]	; (80018f4 <RescheduleTimerList+0x130>)
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	440b      	add	r3, r1
 80018a2:	3308      	adds	r3, #8
 80018a4:	6819      	ldr	r1, [r3, #0]
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	1ac9      	subs	r1, r1, r3
 80018ac:	4811      	ldr	r0, [pc, #68]	; (80018f4 <RescheduleTimerList+0x130>)
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4403      	add	r3, r0
 80018b8:	3308      	adds	r3, #8
 80018ba:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	490d      	ldr	r1, [pc, #52]	; (80018f4 <RescheduleTimerList+0x130>)
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	3315      	adds	r3, #21
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d1c7      	bne.n	8001866 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80018d6:	89bb      	ldrh	r3, [r7, #12]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff15 	bl	8001708 <RestartWakeupCounter>

  return ;
 80018de:	bf00      	nop
}
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40002800 	.word	0x40002800
 80018ec:	20000254 	.word	0x20000254
 80018f0:	20000124 	.word	0x20000124
 80018f4:	20000094 	.word	0x20000094
 80018f8:	2000012c 	.word	0x2000012c
 80018fc:	2000025c 	.word	0x2000025c

08001900 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001906:	f3ef 8310 	mrs	r3, PRIMASK
 800190a:	617b      	str	r3, [r7, #20]
  return(result);
 800190c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001910:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001912:	4b5e      	ldr	r3, [pc, #376]	; (8001a8c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	22ca      	movs	r2, #202	; 0xca
 800191a:	625a      	str	r2, [r3, #36]	; 0x24
 800191c:	4b5b      	ldr	r3, [pc, #364]	; (8001a8c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2253      	movs	r2, #83	; 0x53
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001926:	4b59      	ldr	r3, [pc, #356]	; (8001a8c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	4b57      	ldr	r3, [pc, #348]	; (8001a8c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001938:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800193a:	4b55      	ldr	r3, [pc, #340]	; (8001a90 <HW_TS_RTC_Wakeup_Handler+0x190>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001942:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001946:	4953      	ldr	r1, [pc, #332]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	440b      	add	r3, r1
 8001952:	330c      	adds	r3, #12
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d170      	bne.n	8001a3e <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800195c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001960:	494c      	ldr	r1, [pc, #304]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	440b      	add	r3, r1
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001970:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001974:	4947      	ldr	r1, [pc, #284]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001976:	4613      	mov	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	440b      	add	r3, r1
 8001980:	3310      	adds	r3, #16
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001986:	4b44      	ldr	r3, [pc, #272]	; (8001a98 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d04e      	beq.n	8001a2e <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001990:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001994:	493f      	ldr	r1, [pc, #252]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001996:	4613      	mov	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	440b      	add	r3, r1
 80019a0:	330d      	adds	r3, #13
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d125      	bne.n	80019f6 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80019aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019ae:	2101      	movs	r1, #1
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fde5 	bl	8001580 <UnlinkTimer>
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80019c0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019c4:	4933      	ldr	r1, [pc, #204]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	440b      	add	r3, r1
 80019d0:	3304      	adds	r3, #4
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fa46 	bl	8001e6c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80019e0:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	22ca      	movs	r2, #202	; 0xca
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24
 80019ea:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2253      	movs	r2, #83	; 0x53
 80019f2:	625a      	str	r2, [r3, #36]	; 0x24
 80019f4:	e013      	b.n	8001a1e <HW_TS_RTC_Wakeup_Handler+0x11e>
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001a00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 f9a7 	bl	8001d58 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	22ca      	movs	r2, #202	; 0xca
 8001a12:	625a      	str	r2, [r3, #36]	; 0x24
 8001a14:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2253      	movs	r2, #83	; 0x53
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001a1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	4619      	mov	r1, r3
 8001a26:	69b8      	ldr	r0, [r7, #24]
 8001a28:	f000 faa6 	bl	8001f78 <HW_TS_RTC_Int_AppNot>
 8001a2c:	e024      	b.n	8001a78 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8001a2e:	f7ff fec9 	bl	80017c4 <RescheduleTimerList>
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	f383 8810 	msr	PRIMASK, r3
 8001a3c:	e01c      	b.n	8001a78 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001a3e:	bf00      	nop
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f7      	beq.n	8001a40 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a50:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001a64:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001a68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	22ff      	movs	r2, #255	; 0xff
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001a82:	bf00      	nop
}
 8001a84:	3728      	adds	r7, #40	; 0x28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000254 	.word	0x20000254
 8001a90:	20000124 	.word	0x20000124
 8001a94:	20000094 	.word	0x20000094
 8001a98:	2000012c 	.word	0x2000012c
 8001a9c:	58000800 	.word	0x58000800

08001aa0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	6039      	str	r1, [r7, #0]
 8001aaa:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001aac:	4a64      	ldr	r2, [pc, #400]	; (8001c40 <HW_TS_Init+0x1a0>)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001ab2:	4b63      	ldr	r3, [pc, #396]	; (8001c40 <HW_TS_Init+0x1a0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	22ca      	movs	r2, #202	; 0xca
 8001aba:	625a      	str	r2, [r3, #36]	; 0x24
 8001abc:	4b60      	ldr	r3, [pc, #384]	; (8001c40 <HW_TS_Init+0x1a0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2253      	movs	r2, #83	; 0x53
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001ac6:	4b5f      	ldr	r3, [pc, #380]	; (8001c44 <HW_TS_Init+0x1a4>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	4a5e      	ldr	r2, [pc, #376]	; (8001c44 <HW_TS_Init+0x1a4>)
 8001acc:	f043 0320 	orr.w	r3, r3, #32
 8001ad0:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001ad2:	4b5c      	ldr	r3, [pc, #368]	; (8001c44 <HW_TS_Init+0x1a4>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	f1c3 0304 	rsb	r3, r3, #4
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	4b58      	ldr	r3, [pc, #352]	; (8001c48 <HW_TS_Init+0x1a8>)
 8001ae6:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001ae8:	4b56      	ldr	r3, [pc, #344]	; (8001c44 <HW_TS_Init+0x1a4>)
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001af0:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001af4:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	fa92 f2a2 	rbit	r2, r2
 8001afc:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	2a00      	cmp	r2, #0
 8001b06:	d101      	bne.n	8001b0c <HW_TS_Init+0x6c>
  {
    return 32U;
 8001b08:	2220      	movs	r2, #32
 8001b0a:	e003      	b.n	8001b14 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	fab2 f282 	clz	r2, r2
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	40d3      	lsrs	r3, r2
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	3301      	adds	r3, #1
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	4b4b      	ldr	r3, [pc, #300]	; (8001c4c <HW_TS_Init+0x1ac>)
 8001b1e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001b20:	4b48      	ldr	r3, [pc, #288]	; (8001c44 <HW_TS_Init+0x1a4>)
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	4b47      	ldr	r3, [pc, #284]	; (8001c50 <HW_TS_Init+0x1b0>)
 8001b32:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001b34:	4b46      	ldr	r3, [pc, #280]	; (8001c50 <HW_TS_Init+0x1b0>)
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	4a44      	ldr	r2, [pc, #272]	; (8001c4c <HW_TS_Init+0x1ac>)
 8001b3c:	7812      	ldrb	r2, [r2, #0]
 8001b3e:	fb02 f303 	mul.w	r3, r2, r3
 8001b42:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b46:	4a40      	ldr	r2, [pc, #256]	; (8001c48 <HW_TS_Init+0x1a8>)
 8001b48:	7812      	ldrb	r2, [r2, #0]
 8001b4a:	40d3      	lsrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d904      	bls.n	8001b62 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001b58:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <HW_TS_Init+0x1b4>)
 8001b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b5e:	801a      	strh	r2, [r3, #0]
 8001b60:	e003      	b.n	8001b6a <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	4b3b      	ldr	r3, [pc, #236]	; (8001c54 <HW_TS_Init+0x1b4>)
 8001b68:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001b6a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b6e:	f7ff fb85 	bl	800127c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001b72:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b76:	f7ff fb6d 	bl	8001254 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d143      	bne.n	8001c08 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b80:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <HW_TS_Init+0x1b8>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b86:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <HW_TS_Init+0x1bc>)
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	77fb      	strb	r3, [r7, #31]
 8001b92:	e00c      	b.n	8001bae <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001b94:	7ffa      	ldrb	r2, [r7, #31]
 8001b96:	4932      	ldr	r1, [pc, #200]	; (8001c60 <HW_TS_Init+0x1c0>)
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	330c      	adds	r3, #12
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001ba8:	7ffb      	ldrb	r3, [r7, #31]
 8001baa:	3301      	adds	r3, #1
 8001bac:	77fb      	strb	r3, [r7, #31]
 8001bae:	7ffb      	ldrb	r3, [r7, #31]
 8001bb0:	2b05      	cmp	r3, #5
 8001bb2:	d9ef      	bls.n	8001b94 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001bb4:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <HW_TS_Init+0x1c4>)
 8001bb6:	2206      	movs	r2, #6
 8001bb8:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001bba:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <HW_TS_Init+0x1a0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <HW_TS_Init+0x1a0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bcc:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <HW_TS_Init+0x1a0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HW_TS_Init+0x1a0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001be2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001be4:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HW_TS_Init+0x1c8>)
 8001be6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bea:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001bec:	2003      	movs	r0, #3
 8001bee:	f001 fafd 	bl	80031ec <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001bf2:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <HW_TS_Init+0x1a0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HW_TS_Init+0x1a0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	e00a      	b.n	8001c1e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HW_TS_Init+0x1a0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f001 fad9 	bl	80031d0 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HW_TS_Init+0x1a0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	22ff      	movs	r2, #255	; 0xff
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2106      	movs	r1, #6
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f001 fa99 	bl	8003164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001c32:	2003      	movs	r0, #3
 8001c34:	f001 fab0 	bl	8003198 <HAL_NVIC_EnableIRQ>

  return;
 8001c38:	bf00      	nop
}
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000254 	.word	0x20000254
 8001c44:	40002800 	.word	0x40002800
 8001c48:	20000258 	.word	0x20000258
 8001c4c:	20000259 	.word	0x20000259
 8001c50:	2000025a 	.word	0x2000025a
 8001c54:	2000025c 	.word	0x2000025c
 8001c58:	2000012c 	.word	0x2000012c
 8001c5c:	20000128 	.word	0x20000128
 8001c60:	20000094 	.word	0x20000094
 8001c64:	20000124 	.word	0x20000124
 8001c68:	58000800 	.word	0x58000800

08001c6c <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b08b      	sub	sp, #44	; 0x2c
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c82:	f3ef 8310 	mrs	r3, PRIMASK
 8001c86:	61fb      	str	r3, [r7, #28]
  return(result);
 8001c88:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001c8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c8c:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001c8e:	e004      	b.n	8001c9a <HW_TS_Create+0x2e>
  {
    loop++;
 8001c90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c94:	3301      	adds	r3, #1
 8001c96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001c9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c9e:	2b05      	cmp	r3, #5
 8001ca0:	d80c      	bhi.n	8001cbc <HW_TS_Create+0x50>
 8001ca2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001ca6:	492b      	ldr	r1, [pc, #172]	; (8001d54 <HW_TS_Create+0xe8>)
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	440b      	add	r3, r1
 8001cb2:	330c      	adds	r3, #12
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1e9      	bne.n	8001c90 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001cbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cc0:	2b06      	cmp	r3, #6
 8001cc2:	d037      	beq.n	8001d34 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001cc4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001cc8:	4922      	ldr	r1, [pc, #136]	; (8001d54 <HW_TS_Create+0xe8>)
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	330c      	adds	r3, #12
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	701a      	strb	r2, [r3, #0]
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001ce4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001ce8:	491a      	ldr	r1, [pc, #104]	; (8001d54 <HW_TS_Create+0xe8>)
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3310      	adds	r3, #16
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001cfa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001cfe:	4915      	ldr	r1, [pc, #84]	; (8001d54 <HW_TS_Create+0xe8>)
 8001d00:	4613      	mov	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4413      	add	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	440b      	add	r3, r1
 8001d0a:	330d      	adds	r3, #13
 8001d0c:	79fa      	ldrb	r2, [r7, #7]
 8001d0e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001d10:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001d14:	490f      	ldr	r1, [pc, #60]	; (8001d54 <HW_TS_Create+0xe8>)
 8001d16:	4613      	mov	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	440b      	add	r3, r1
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001d2a:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d32:	e007      	b.n	8001d44 <HW_TS_Create+0xd8>
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	372c      	adds	r7, #44	; 0x2c
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	20000094 	.word	0x20000094

08001d58 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d62:	f3ef 8310 	mrs	r3, PRIMASK
 8001d66:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d68:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001d6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d6c:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001d6e:	2003      	movs	r0, #3
 8001d70:	f001 fa20 	bl	80031b4 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001d74:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <HW_TS_Stop+0xfc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	22ca      	movs	r2, #202	; 0xca
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
 8001d7e:	4b35      	ldr	r3, [pc, #212]	; (8001e54 <HW_TS_Stop+0xfc>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2253      	movs	r2, #83	; 0x53
 8001d86:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001d88:	79fa      	ldrb	r2, [r7, #7]
 8001d8a:	4933      	ldr	r1, [pc, #204]	; (8001e58 <HW_TS_Stop+0x100>)
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	330c      	adds	r3, #12
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d148      	bne.n	8001e32 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2100      	movs	r1, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fbeb 	bl	8001580 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001daa:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <HW_TS_Stop+0x104>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001db0:	7cfb      	ldrb	r3, [r7, #19]
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d135      	bne.n	8001e22 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001db6:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <HW_TS_Stop+0x108>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc2:	d108      	bne.n	8001dd6 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001dc4:	bf00      	nop
 8001dc6:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <HW_TS_Stop+0xfc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f7      	bne.n	8001dc6 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001dd6:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <HW_TS_Stop+0xfc>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HW_TS_Stop+0xfc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001de8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001dea:	bf00      	nop
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HW_TS_Stop+0xfc>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f7      	beq.n	8001dec <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001dfc:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <HW_TS_Stop+0xfc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <HW_TS_Stop+0xfc>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001e10:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HW_TS_Stop+0x10c>)
 8001e14:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e18:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001e1a:	2003      	movs	r0, #3
 8001e1c:	f001 f9e6 	bl	80031ec <HAL_NVIC_ClearPendingIRQ>
 8001e20:	e007      	b.n	8001e32 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001e22:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <HW_TS_Stop+0x110>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	7cfa      	ldrb	r2, [r7, #19]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d001      	beq.n	8001e32 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8001e2e:	f7ff fcc9 	bl	80017c4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <HW_TS_Stop+0xfc>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	22ff      	movs	r2, #255	; 0xff
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001e3c:	2003      	movs	r0, #3
 8001e3e:	f001 f9ab 	bl	8003198 <HAL_NVIC_EnableIRQ>
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001e4c:	bf00      	nop
}
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000254 	.word	0x20000254
 8001e58:	20000094 	.word	0x20000094
 8001e5c:	20000124 	.word	0x20000124
 8001e60:	40002800 	.word	0x40002800
 8001e64:	58000800 	.word	0x58000800
 8001e68:	20000125 	.word	0x20000125

08001e6c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001e78:	79fa      	ldrb	r2, [r7, #7]
 8001e7a:	493b      	ldr	r1, [pc, #236]	; (8001f68 <HW_TS_Start+0xfc>)
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	440b      	add	r3, r1
 8001e86:	330c      	adds	r3, #12
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d103      	bne.n	8001e98 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff60 	bl	8001d58 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e98:	f3ef 8310 	mrs	r3, PRIMASK
 8001e9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ea0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea2:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001ea4:	2003      	movs	r0, #3
 8001ea6:	f001 f985 	bl	80031b4 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001eaa:	4b30      	ldr	r3, [pc, #192]	; (8001f6c <HW_TS_Start+0x100>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	22ca      	movs	r2, #202	; 0xca
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24
 8001eb4:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <HW_TS_Start+0x100>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2253      	movs	r2, #83	; 0x53
 8001ebc:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001ebe:	79fa      	ldrb	r2, [r7, #7]
 8001ec0:	4929      	ldr	r1, [pc, #164]	; (8001f68 <HW_TS_Start+0xfc>)
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	440b      	add	r3, r1
 8001ecc:	330c      	adds	r3, #12
 8001ece:	2202      	movs	r2, #2
 8001ed0:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001ed2:	79fa      	ldrb	r2, [r7, #7]
 8001ed4:	4924      	ldr	r1, [pc, #144]	; (8001f68 <HW_TS_Start+0xfc>)
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	440b      	add	r3, r1
 8001ee0:	3308      	adds	r3, #8
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001ee6:	79fa      	ldrb	r2, [r7, #7]
 8001ee8:	491f      	ldr	r1, [pc, #124]	; (8001f68 <HW_TS_Start+0xfc>)
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fa95 	bl	800142c <linkTimer>
 8001f02:	4603      	mov	r3, r0
 8001f04:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001f06:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <HW_TS_Start+0x104>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HW_TS_Start+0x108>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	7c7a      	ldrb	r2, [r7, #17]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d002      	beq.n	8001f1e <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8001f18:	f7ff fc54 	bl	80017c4 <RescheduleTimerList>
 8001f1c:	e013      	b.n	8001f46 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001f1e:	79fa      	ldrb	r2, [r7, #7]
 8001f20:	4911      	ldr	r1, [pc, #68]	; (8001f68 <HW_TS_Start+0xfc>)
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	440b      	add	r3, r1
 8001f2c:	3308      	adds	r3, #8
 8001f2e:	6819      	ldr	r1, [r3, #0]
 8001f30:	8a7b      	ldrh	r3, [r7, #18]
 8001f32:	79fa      	ldrb	r2, [r7, #7]
 8001f34:	1ac9      	subs	r1, r1, r3
 8001f36:	480c      	ldr	r0, [pc, #48]	; (8001f68 <HW_TS_Start+0xfc>)
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4403      	add	r3, r0
 8001f42:	3308      	adds	r3, #8
 8001f44:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HW_TS_Start+0x100>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	22ff      	movs	r2, #255	; 0xff
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001f50:	2003      	movs	r0, #3
 8001f52:	f001 f921 	bl	8003198 <HAL_NVIC_EnableIRQ>
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001f60:	bf00      	nop
}
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000094 	.word	0x20000094
 8001f6c:	20000254 	.word	0x20000254
 8001f70:	20000124 	.word	0x20000124
 8001f74:	20000125 	.word	0x20000125

08001f78 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	460b      	mov	r3, r1
 8001f82:	607a      	str	r2, [r7, #4]
 8001f84:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4798      	blx	r3

  return;
 8001f8a:	bf00      	nop
}
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <HW_UART_Transmit_IT>:

    return;
}

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	73fb      	strb	r3, [r7, #15]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <HW_UART_Transmit_IT+0x1e>
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d00d      	beq.n	8001fcc <HW_UART_Transmit_IT+0x38>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8001fb0:	e019      	b.n	8001fe6 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(huart1, USART1);
 8001fb2:	4a0f      	ldr	r2, [pc, #60]	; (8001ff0 <HW_UART_Transmit_IT+0x5c>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <HW_UART_Transmit_IT+0x60>)
 8001fba:	4a0f      	ldr	r2, [pc, #60]	; (8001ff8 <HW_UART_Transmit_IT+0x64>)
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	89bb      	ldrh	r3, [r7, #12]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	68b9      	ldr	r1, [r7, #8]
 8001fc4:	480b      	ldr	r0, [pc, #44]	; (8001ff4 <HW_UART_Transmit_IT+0x60>)
 8001fc6:	f003 ff99 	bl	8005efc <HAL_UART_Transmit_IT>
            break;
 8001fca:	e00c      	b.n	8001fe6 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(hlpuart1, LPUART1);
 8001fcc:	4a0b      	ldr	r2, [pc, #44]	; (8001ffc <HW_UART_Transmit_IT+0x68>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HW_UART_Transmit_IT+0x6c>)
 8001fd4:	4a0b      	ldr	r2, [pc, #44]	; (8002004 <HW_UART_Transmit_IT+0x70>)
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	89bb      	ldrh	r3, [r7, #12]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	4808      	ldr	r0, [pc, #32]	; (8002000 <HW_UART_Transmit_IT+0x6c>)
 8001fe0:	f003 ff8c 	bl	8005efc <HAL_UART_Transmit_IT>
            break;
 8001fe4:	bf00      	nop
    }

    return;
 8001fe6:	bf00      	nop
}
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20006a9c 	.word	0x20006a9c
 8001ff4:	20006bfc 	.word	0x20006bfc
 8001ff8:	40013800 	.word	0x40013800
 8001ffc:	20006a90 	.word	0x20006a90
 8002000:	20006b10 	.word	0x20006b10
 8002004:	40008000 	.word	0x40008000

08002008 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	4603      	mov	r3, r0
 8002014:	73fb      	strb	r3, [r7, #15]
 8002016:	4613      	mov	r3, r2
 8002018:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800201e:	2300      	movs	r3, #0
 8002020:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <HW_UART_Transmit_DMA+0x26>
 8002028:	2b02      	cmp	r3, #2
 800202a:	d00f      	beq.n	800204c <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800202c:	e01d      	b.n	800206a <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 800202e:	4a1f      	ldr	r2, [pc, #124]	; (80020ac <HW_UART_Transmit_DMA+0xa4>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8002034:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <HW_UART_Transmit_DMA+0xa8>)
 8002036:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <HW_UART_Transmit_DMA+0xac>)
 8002038:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800203a:	89bb      	ldrh	r3, [r7, #12]
 800203c:	461a      	mov	r2, r3
 800203e:	68b9      	ldr	r1, [r7, #8]
 8002040:	481b      	ldr	r0, [pc, #108]	; (80020b0 <HW_UART_Transmit_DMA+0xa8>)
 8002042:	f003 ffdf 	bl	8006004 <HAL_UART_Transmit_DMA>
 8002046:	4603      	mov	r3, r0
 8002048:	75fb      	strb	r3, [r7, #23]
            break;
 800204a:	e00e      	b.n	800206a <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 800204c:	4a1a      	ldr	r2, [pc, #104]	; (80020b8 <HW_UART_Transmit_DMA+0xb0>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 8002052:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <HW_UART_Transmit_DMA+0xb4>)
 8002054:	4a1a      	ldr	r2, [pc, #104]	; (80020c0 <HW_UART_Transmit_DMA+0xb8>)
 8002056:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8002058:	89bb      	ldrh	r3, [r7, #12]
 800205a:	461a      	mov	r2, r3
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	4817      	ldr	r0, [pc, #92]	; (80020bc <HW_UART_Transmit_DMA+0xb4>)
 8002060:	f003 ffd0 	bl	8006004 <HAL_UART_Transmit_DMA>
 8002064:	4603      	mov	r3, r0
 8002066:	75fb      	strb	r3, [r7, #23]
            break;
 8002068:	bf00      	nop
    }

    switch (hal_status)
 800206a:	7dfb      	ldrb	r3, [r7, #23]
 800206c:	2b03      	cmp	r3, #3
 800206e:	d817      	bhi.n	80020a0 <HW_UART_Transmit_DMA+0x98>
 8002070:	a201      	add	r2, pc, #4	; (adr r2, 8002078 <HW_UART_Transmit_DMA+0x70>)
 8002072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002076:	bf00      	nop
 8002078:	08002089 	.word	0x08002089
 800207c:	0800208f 	.word	0x0800208f
 8002080:	08002095 	.word	0x08002095
 8002084:	0800209b 	.word	0x0800209b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002088:	2300      	movs	r3, #0
 800208a:	75bb      	strb	r3, [r7, #22]
            break;
 800208c:	e009      	b.n	80020a2 <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800208e:	2301      	movs	r3, #1
 8002090:	75bb      	strb	r3, [r7, #22]
            break;
 8002092:	e006      	b.n	80020a2 <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002094:	2302      	movs	r3, #2
 8002096:	75bb      	strb	r3, [r7, #22]
            break;
 8002098:	e003      	b.n	80020a2 <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800209a:	2303      	movs	r3, #3
 800209c:	75bb      	strb	r3, [r7, #22]
            break;
 800209e:	e000      	b.n	80020a2 <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 80020a0:	bf00      	nop
    }

    return hw_status;
 80020a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20006a9c 	.word	0x20006a9c
 80020b0:	20006bfc 	.word	0x20006bfc
 80020b4:	40013800 	.word	0x40013800
 80020b8:	20006a90 	.word	0x20006a90
 80020bc:	20006b10 	.word	0x20006b10
 80020c0:	40008000 	.word	0x40008000

080020c4 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0e      	ldr	r2, [pc, #56]	; (800210c <HAL_UART_TxCpltCallback+0x48>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00b      	beq.n	80020ee <HAL_UART_TxCpltCallback+0x2a>
 80020d6:	4a0e      	ldr	r2, [pc, #56]	; (8002110 <HAL_UART_TxCpltCallback+0x4c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d000      	beq.n	80020de <HAL_UART_TxCpltCallback+0x1a>
            }
            break;
#endif

        default:
            break;
 80020dc:	e012      	b.n	8002104 <HAL_UART_TxCpltCallback+0x40>
            if(HW_huart1TxCb)
 80020de:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <HAL_UART_TxCpltCallback+0x50>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00b      	beq.n	80020fe <HAL_UART_TxCpltCallback+0x3a>
                HW_huart1TxCb();
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_UART_TxCpltCallback+0x50>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4798      	blx	r3
            break;
 80020ec:	e007      	b.n	80020fe <HAL_UART_TxCpltCallback+0x3a>
            if(HW_hlpuart1TxCb)
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <HAL_UART_TxCpltCallback+0x54>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_UART_TxCpltCallback+0x3e>
                HW_hlpuart1TxCb();
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_UART_TxCpltCallback+0x54>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4798      	blx	r3
            break;
 80020fc:	e001      	b.n	8002102 <HAL_UART_TxCpltCallback+0x3e>
            break;
 80020fe:	bf00      	nop
 8002100:	e000      	b.n	8002104 <HAL_UART_TxCpltCallback+0x40>
            break;
 8002102:	bf00      	nop
    }

    return;
 8002104:	bf00      	nop
}
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40008000 	.word	0x40008000
 8002110:	40013800 	.word	0x40013800
 8002114:	20006a9c 	.word	0x20006a9c
 8002118:	20006a90 	.word	0x20006a90

0800211c <LL_RCC_LSE_SetDriveCapability>:
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212c:	f023 0218 	bic.w	r2, r3, #24
 8002130:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_AHB2_GRP1_EnableClock>:
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002154:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002156:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4313      	orrs	r3, r2
 800215e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002164:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4013      	ands	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800216c:	68fb      	ldr	r3, [r7, #12]
}
 800216e:	bf00      	nop
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800217e:	f000 fe89 	bl	8002e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002182:	f000 f817 	bl	80021b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002186:	f7ff f85a 	bl	800123e <MX_GPIO_Init>
  MX_DMA_Init();
 800218a:	f7ff f818 	bl	80011be <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800218e:	f000 fce5 	bl	8002b5c <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8002192:	f000 f945 	bl	8002420 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8002196:	f000 fd2d 	bl	8002bf4 <MX_USART1_UART_Init>
  MX_RF_Init();
 800219a:	f000 f90f 	bl	80023bc <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800219e:	f007 ffdb 	bl	800a158 <osKernelInitialize>
  MX_FREERTOS_Init();
 80021a2:	f7fe ffd7 	bl	8001154 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80021a6:	f008 f80b 	bl	800a1c0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80021aa:	f04f 30ff 	mov.w	r0, #4294967295
 80021ae:	f00d ffd1 	bl	8010154 <UTIL_SEQ_Run>
 80021b2:	e7fa      	b.n	80021aa <main+0x30>

080021b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b0ae      	sub	sp, #184	; 0xb8
 80021b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021be:	2248      	movs	r2, #72	; 0x48
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f00e f92b 	bl	801041e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
 80021d8:	615a      	str	r2, [r3, #20]
 80021da:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	2250      	movs	r2, #80	; 0x50
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f00e f91b 	bl	801041e <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80021e8:	f001 fc8e 	bl	8003b08 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80021ec:	2000      	movs	r0, #0
 80021ee:	f7ff ff95 	bl	800211c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f2:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <SystemClock_Config+0xfc>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021fa:	4a2d      	ldr	r2, [pc, #180]	; (80022b0 <SystemClock_Config+0xfc>)
 80021fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <SystemClock_Config+0xfc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800220e:	2307      	movs	r3, #7
 8002210:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002216:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002218:	2301      	movs	r3, #1
 800221a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800221c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002220:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002222:	2340      	movs	r3, #64	; 0x40
 8002224:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002228:	2300      	movs	r3, #0
 800222a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800222e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002232:	4618      	mov	r0, r3
 8002234:	f002 f808 	bl	8004248 <HAL_RCC_OscConfig>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800223e:	f000 f8b9 	bl	80023b4 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002242:	236f      	movs	r3, #111	; 0x6f
 8002244:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002246:	2302      	movs	r3, #2
 8002248:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800224a:	2300      	movs	r3, #0
 800224c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800224e:	2300      	movs	r3, #0
 8002250:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002252:	2300      	movs	r3, #0
 8002254:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002256:	2300      	movs	r3, #0
 8002258:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800225a:	2300      	movs	r3, #0
 800225c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800225e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002262:	2101      	movs	r1, #1
 8002264:	4618      	mov	r0, r3
 8002266:	f002 fb7b 	bl	8004960 <HAL_RCC_ClockConfig>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002270:	f000 f8a0 	bl	80023b4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002274:	f643 0303 	movw	r3, #14339	; 0x3803
 8002278:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002286:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002288:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800228c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800228e:	2300      	movs	r3, #0
 8002290:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002292:	2310      	movs	r3, #16
 8002294:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	4618      	mov	r0, r3
 800229a:	f002 ffd2 	bl	8005242 <HAL_RCCEx_PeriphCLKConfig>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80022a4:	f000 f886 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80022a8:	bf00      	nop
 80022aa:	37b8      	adds	r7, #184	; 0xb8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	58000400 	.word	0x58000400

080022b4 <BSP_LED_Init>:

/* USER CODE BEGIN 4 */
void BSP_LED_Init(Led_TypeDef Led)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80022be:	f107 030c 	add.w	r3, r7, #12
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
 80022cc:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80022ce:	2002      	movs	r0, #2
 80022d0:	f7ff ff3a 	bl	8002148 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	4a12      	ldr	r2, [pc, #72]	; (8002320 <BSP_LED_Init+0x6c>)
 80022d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022dc:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022de:	2301      	movs	r3, #1
 80022e0:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022e6:	2302      	movs	r3, #2
 80022e8:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <BSP_LED_Init+0x70>)
 80022ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f2:	f107 020c 	add.w	r2, r7, #12
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f001 fa59 	bl	80037b0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	4a08      	ldr	r2, [pc, #32]	; (8002324 <BSP_LED_Init+0x70>)
 8002302:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	4a05      	ldr	r2, [pc, #20]	; (8002320 <BSP_LED_Init+0x6c>)
 800230a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800230e:	2200      	movs	r2, #0
 8002310:	4619      	mov	r1, r3
 8002312:	f001 fbbd 	bl	8003a90 <HAL_GPIO_WritePin>
}
 8002316:	bf00      	nop
 8002318:	3720      	adds	r7, #32
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	080127b8 	.word	0x080127b8
 8002324:	20000004 	.word	0x20000004

08002328 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	4a07      	ldr	r2, [pc, #28]	; (8002354 <BSP_LED_On+0x2c>)
 8002336:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	4a06      	ldr	r2, [pc, #24]	; (8002358 <BSP_LED_On+0x30>)
 800233e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002342:	2201      	movs	r2, #1
 8002344:	4619      	mov	r1, r3
 8002346:	f001 fba3 	bl	8003a90 <HAL_GPIO_WritePin>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000004 	.word	0x20000004
 8002358:	080127b8 	.word	0x080127b8

0800235c <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	4a07      	ldr	r2, [pc, #28]	; (8002388 <BSP_LED_Off+0x2c>)
 800236a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	4a06      	ldr	r2, [pc, #24]	; (800238c <BSP_LED_Off+0x30>)
 8002372:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002376:	2200      	movs	r2, #0
 8002378:	4619      	mov	r1, r3
 800237a:	f001 fb89 	bl	8003a90 <HAL_GPIO_WritePin>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000004 	.word	0x20000004
 800238c:	080127b8 	.word	0x080127b8

08002390 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023a2:	f000 fd97 	bl	8002ed4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40014800 	.word	0x40014800

080023b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80023b8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023ba:	e7fe      	b.n	80023ba <Error_Handler+0x6>

080023bc <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0

}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80023ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80023f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4313      	orrs	r3, r2
 8002402:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002408:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4013      	ands	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002410:	68fb      	ldr	r3, [r7, #12]
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <MX_RTC_Init+0x4c>)
 8002426:	4a12      	ldr	r2, [pc, #72]	; (8002470 <MX_RTC_Init+0x50>)
 8002428:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <MX_RTC_Init+0x4c>)
 800242c:	2200      	movs	r2, #0
 800242e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002430:	4b0e      	ldr	r3, [pc, #56]	; (800246c <MX_RTC_Init+0x4c>)
 8002432:	220f      	movs	r2, #15
 8002434:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002436:	4b0d      	ldr	r3, [pc, #52]	; (800246c <MX_RTC_Init+0x4c>)
 8002438:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800243c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <MX_RTC_Init+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <MX_RTC_Init+0x4c>)
 8002446:	2200      	movs	r2, #0
 8002448:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <MX_RTC_Init+0x4c>)
 800244c:	2200      	movs	r2, #0
 800244e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <MX_RTC_Init+0x4c>)
 8002452:	2200      	movs	r2, #0
 8002454:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002456:	4805      	ldr	r0, [pc, #20]	; (800246c <MX_RTC_Init+0x4c>)
 8002458:	f003 f979 	bl	800574e <HAL_RTC_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002462:	f7ff ffa7 	bl	80023b4 <Error_Handler>
  }

}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20006aa0 	.word	0x20006aa0
 8002470:	40002800 	.word	0x40002800

08002474 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a06      	ldr	r2, [pc, #24]	; (800249c <HAL_RTC_MspInit+0x28>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d105      	bne.n	8002492 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002486:	f7ff ffa0 	bl	80023ca <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800248a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800248e:	f7ff ffad 	bl	80023ec <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40002800 	.word	0x40002800

080024a0 <LL_AHB3_GRP1_EnableClock>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80024a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80024b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4013      	ands	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024c4:	68fb      	ldr	r3, [r7, #12]
}
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80024d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80024da:	f7ff ffe1 	bl	80024a0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	210f      	movs	r1, #15
 80024e2:	f06f 0001 	mvn.w	r0, #1
 80024e6:	f000 fe3d 	bl	8003164 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2105      	movs	r1, #5
 80024ee:	202e      	movs	r0, #46	; 0x2e
 80024f0:	f000 fe38 	bl	8003164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80024f4:	202e      	movs	r0, #46	; 0x2e
 80024f6:	f000 fe4f 	bl	8003198 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 80024fa:	2200      	movs	r2, #0
 80024fc:	210f      	movs	r1, #15
 80024fe:	202c      	movs	r0, #44	; 0x2c
 8002500:	f000 fe30 	bl	8003164 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8002504:	2200      	movs	r2, #0
 8002506:	210f      	movs	r1, #15
 8002508:	202d      	movs	r0, #45	; 0x2d
 800250a:	f000 fe2b 	bl	8003164 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}

08002512 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002512:	b480      	push	{r7}
 8002514:	b085      	sub	sp, #20
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002520:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4313      	orrs	r3, r2
 8002528:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800252a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4013      	ands	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002536:	68fb      	ldr	r3, [r7, #12]
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08c      	sub	sp, #48	; 0x30
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8002554:	2200      	movs	r2, #0
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	201a      	movs	r0, #26
 800255a:	f000 fe03 	bl	8003164 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800255e:	201a      	movs	r0, #26
 8002560:	f000 fe1a 	bl	8003198 <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002564:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002568:	f7ff ffd3 	bl	8002512 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800256c:	f107 0208 	add.w	r2, r7, #8
 8002570:	f107 030c 	add.w	r3, r7, #12
 8002574:	4611      	mov	r1, r2
 8002576:	4618      	mov	r0, r3
 8002578:	f002 fbdc 	bl	8004d34 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800257c:	f002 fbc4 	bl	8004d08 <HAL_RCC_GetPCLK2Freq>
 8002580:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002584:	4a12      	ldr	r2, [pc, #72]	; (80025d0 <HAL_InitTick+0x8c>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0c9b      	lsrs	r3, r3, #18
 800258c:	3b01      	subs	r3, #1
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002590:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <HAL_InitTick+0x90>)
 8002592:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <HAL_InitTick+0x94>)
 8002594:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8002596:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <HAL_InitTick+0x90>)
 8002598:	f240 32e7 	movw	r2, #999	; 0x3e7
 800259c:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800259e:	4a0d      	ldr	r2, [pc, #52]	; (80025d4 <HAL_InitTick+0x90>)
 80025a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a2:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <HAL_InitTick+0x90>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_InitTick+0x90>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80025b0:	4808      	ldr	r0, [pc, #32]	; (80025d4 <HAL_InitTick+0x90>)
 80025b2:	f003 f9ba 	bl	800592a <HAL_TIM_Base_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d104      	bne.n	80025c6 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80025bc:	4805      	ldr	r0, [pc, #20]	; (80025d4 <HAL_InitTick+0x90>)
 80025be:	f003 fa15 	bl	80059ec <HAL_TIM_Base_Start_IT>
 80025c2:	4603      	mov	r3, r0
 80025c4:	e000      	b.n	80025c8 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3730      	adds	r7, #48	; 0x30
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	431bde83 	.word	0x431bde83
 80025d4:	20006ac4 	.word	0x20006ac4
 80025d8:	40014800 	.word	0x40014800

080025dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <NMI_Handler+0x4>

080025e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e6:	e7fe      	b.n	80025e6 <HardFault_Handler+0x4>

080025e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <MemManage_Handler+0x4>

080025ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025f2:	e7fe      	b.n	80025f2 <BusFault_Handler+0x4>

080025f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <UsageFault_Handler+0x4>

080025fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <DMA1_Channel4_IRQHandler+0x10>)
 800260e:	f000 ff7d 	bl	800350c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20006c88 	.word	0x20006c88

0800261c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002620:	4802      	ldr	r0, [pc, #8]	; (800262c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002622:	f003 fa31 	bl	8005a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20006ac4 	.word	0x20006ac4

08002630 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002634:	4802      	ldr	r0, [pc, #8]	; (8002640 <USART1_IRQHandler+0x10>)
 8002636:	f003 fd65 	bl	8006104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20006bfc 	.word	0x20006bfc

08002644 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002648:	4802      	ldr	r0, [pc, #8]	; (8002654 <LPUART1_IRQHandler+0x10>)
 800264a:	f003 fd5b 	bl	8006104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20006b10 	.word	0x20006b10

08002658 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800265c:	f001 fa30 	bl	8003ac0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}

08002664 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <DMA2_Channel4_IRQHandler+0x10>)
 800266a:	f000 ff4f 	bl	800350c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20006b9c 	.word	0x20006b9c

08002678 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 800267c:	f7ff f940 	bl	8001900 <HW_TS_RTC_Wakeup_Handler>
}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}

08002684 <IPCC_C1_TX_IRQHandler>:
void IPCC_C1_TX_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8002688:	f00d fbc4 	bl	800fe14 <HW_IPCC_Tx_Handler>
  return;
 800268c:	bf00      	nop
}
 800268e:	bd80      	pop	{r7, pc}

08002690 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8002694:	f00d fb64 	bl	800fd60 <HW_IPCC_Rx_Handler>
  return;
 8002698:	bf00      	nop
}
 800269a:	bd80      	pop	{r7, pc}

0800269c <logRegion>:
 *
 * @returns  String with a log level color value.
 */
static inline uint16_t logRegion(char *aLogString, uint16_t aMaxSize,
        appliLogRegion_t aLogRegion)
{
 800269c:	b5b0      	push	{r4, r5, r7, lr}
 800269e:	b08a      	sub	sp, #40	; 0x28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	807b      	strh	r3, [r7, #2]
 80026a8:	4613      	mov	r3, r2
 80026aa:	707b      	strb	r3, [r7, #1]
  char logRegionString[30U];

  switch (aLogRegion)
 80026ac:	787b      	ldrb	r3, [r7, #1]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d83e      	bhi.n	8002732 <logRegion+0x96>
 80026b4:	a201      	add	r2, pc, #4	; (adr r2, 80026bc <logRegion+0x20>)
 80026b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ba:	bf00      	nop
 80026bc:	080026d1 	.word	0x080026d1
 80026c0:	080026e5 	.word	0x080026e5
 80026c4:	080026f9 	.word	0x080026f9
 80026c8:	0800270b 	.word	0x0800270b
 80026cc:	0800271f 	.word	0x0800271f
  {
    case APPLI_LOG_REGION_GENERAL:
      strcpy(logRegionString, "[M4 APPLICATION]");
 80026d0:	f107 0308 	add.w	r3, r7, #8
 80026d4:	4a22      	ldr	r2, [pc, #136]	; (8002760 <logRegion+0xc4>)
 80026d6:	461c      	mov	r4, r3
 80026d8:	4615      	mov	r5, r2
 80026da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026de:	682b      	ldr	r3, [r5, #0]
 80026e0:	7023      	strb	r3, [r4, #0]
      break;
 80026e2:	e02f      	b.n	8002744 <logRegion+0xa8>
    case APPLI_LOG_REGION_OPENTHREAD_API:
      strcpy(logRegionString, "[M4 OPENTHREAD API]");
 80026e4:	f107 0308 	add.w	r3, r7, #8
 80026e8:	4a1e      	ldr	r2, [pc, #120]	; (8002764 <logRegion+0xc8>)
 80026ea:	461c      	mov	r4, r3
 80026ec:	4615      	mov	r5, r2
 80026ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f2:	682b      	ldr	r3, [r5, #0]
 80026f4:	6023      	str	r3, [r4, #0]
      break;
 80026f6:	e025      	b.n	8002744 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_LINK:
      strcpy(logRegionString, "[M4 LINK API]");
 80026f8:	f107 0308 	add.w	r3, r7, #8
 80026fc:	4a1a      	ldr	r2, [pc, #104]	; (8002768 <logRegion+0xcc>)
 80026fe:	461c      	mov	r4, r3
 8002700:	4613      	mov	r3, r2
 8002702:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002704:	c407      	stmia	r4!, {r0, r1, r2}
 8002706:	8023      	strh	r3, [r4, #0]
      break;
 8002708:	e01c      	b.n	8002744 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_INSTANCE:
      strcpy(logRegionString, "[M4 INSTANCE API]");
 800270a:	f107 0308 	add.w	r3, r7, #8
 800270e:	4a17      	ldr	r2, [pc, #92]	; (800276c <logRegion+0xd0>)
 8002710:	461c      	mov	r4, r3
 8002712:	4615      	mov	r5, r2
 8002714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002718:	682b      	ldr	r3, [r5, #0]
 800271a:	8023      	strh	r3, [r4, #0]
      break;
 800271c:	e012      	b.n	8002744 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_MESSAGE:
      strcpy(logRegionString, "[M4 MESSAGE API]");
 800271e:	f107 0308 	add.w	r3, r7, #8
 8002722:	4a13      	ldr	r2, [pc, #76]	; (8002770 <logRegion+0xd4>)
 8002724:	461c      	mov	r4, r3
 8002726:	4615      	mov	r5, r2
 8002728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800272a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800272c:	682b      	ldr	r3, [r5, #0]
 800272e:	7023      	strb	r3, [r4, #0]
      break;
 8002730:	e008      	b.n	8002744 <logRegion+0xa8>
    default:
      strcpy(logRegionString, "[M4]");
 8002732:	f107 0308 	add.w	r3, r7, #8
 8002736:	4a0f      	ldr	r2, [pc, #60]	; (8002774 <logRegion+0xd8>)
 8002738:	e892 0003 	ldmia.w	r2, {r0, r1}
 800273c:	6018      	str	r0, [r3, #0]
 800273e:	3304      	adds	r3, #4
 8002740:	7019      	strb	r1, [r3, #0]
      break;
 8002742:	bf00      	nop
  }

  return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 8002744:	8879      	ldrh	r1, [r7, #2]
 8002746:	f107 0308 	add.w	r3, r7, #8
 800274a:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <logRegion+0xdc>)
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f00d feeb 	bl	8010528 <sniprintf>
 8002752:	4603      	mov	r3, r0
 8002754:	b29b      	uxth	r3, r3
}
 8002756:	4618      	mov	r0, r3
 8002758:	3728      	adds	r7, #40	; 0x28
 800275a:	46bd      	mov	sp, r7
 800275c:	bdb0      	pop	{r4, r5, r7, pc}
 800275e:	bf00      	nop
 8002760:	0801185c 	.word	0x0801185c
 8002764:	08011870 	.word	0x08011870
 8002768:	08011884 	.word	0x08011884
 800276c:	08011894 	.word	0x08011894
 8002770:	080118a8 	.word	0x080118a8
 8002774:	080118bc 	.word	0x080118bc
 8002778:	080118c4 	.word	0x080118c4

0800277c <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d005      	beq.n	8002798 <levelToString+0x1c>
 800278c:	2b03      	cmp	r3, #3
 800278e:	d005      	beq.n	800279c <levelToString+0x20>
 8002790:	2b01      	cmp	r3, #1
 8002792:	d105      	bne.n	80027a0 <levelToString+0x24>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <levelToString+0x34>)
 8002796:	e004      	b.n	80027a2 <levelToString+0x26>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <levelToString+0x38>)
 800279a:	e002      	b.n	80027a2 <levelToString+0x26>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <levelToString+0x3c>)
 800279e:	e000      	b.n	80027a2 <levelToString+0x26>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <levelToString+0x40>)
  }
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	080118c8 	.word	0x080118c8
 80027b4:	080118d0 	.word	0x080118d0
 80027b8:	080118d8 	.word	0x080118d8
 80027bc:	080118e0 	.word	0x080118e0

080027c0 <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
 80027cc:	4613      	mov	r3, r2
 80027ce:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 80027d0:	887c      	ldrh	r4, [r7, #2]
 80027d2:	787b      	ldrb	r3, [r7, #1]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ffd1 	bl	800277c <levelToString>
 80027da:	4603      	mov	r3, r0
 80027dc:	4a05      	ldr	r2, [pc, #20]	; (80027f4 <logLevel+0x34>)
 80027de:	4621      	mov	r1, r4
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f00d fea1 	bl	8010528 <sniprintf>
 80027e6:	4603      	mov	r3, r0
 80027e8:	b29b      	uxth	r3, r3
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd90      	pop	{r4, r7, pc}
 80027f2:	bf00      	nop
 80027f4:	080118e8 	.word	0x080118e8

080027f8 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 80027f8:	b40c      	push	{r2, r3}
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b0c4      	sub	sp, #272	; 0x110
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4602      	mov	r2, r0
 8002802:	1dfb      	adds	r3, r7, #7
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	1dbb      	adds	r3, r7, #6
 8002808:	460a      	mov	r2, r1
 800280a:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8002812:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002816:	f107 020c 	add.w	r2, r7, #12
 800281a:	18d0      	adds	r0, r2, r3
 800281c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002820:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002824:	b299      	uxth	r1, r3
 8002826:	1dfb      	adds	r3, r7, #7
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	f7ff ffc8 	bl	80027c0 <logLevel>
 8002830:	4603      	mov	r3, r0
 8002832:	461a      	mov	r2, r3
 8002834:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002838:	4413      	add	r3, r2
 800283a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 800283e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002842:	f107 020c 	add.w	r2, r7, #12
 8002846:	18d0      	adds	r0, r2, r3
 8002848:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800284c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002850:	b299      	uxth	r1, r3
 8002852:	1dbb      	adds	r3, r7, #6
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	f7ff ff20 	bl	800269c <logRegion>
 800285c:	4603      	mov	r3, r0
 800285e:	461a      	mov	r2, r3
 8002860:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002864:	4413      	add	r3, r2
 8002866:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogRegion);
#endif

  /* Parse user string */
  va_list paramList;
  va_start(paramList, aFormat);
 800286a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800286e:	f107 0308 	add.w	r3, r7, #8
 8002872:	601a      	str	r2, [r3, #0]
  length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8002874:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002878:	f107 020c 	add.w	r2, r7, #12
 800287c:	18d0      	adds	r0, r2, r3
 800287e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002882:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8002886:	f107 0308 	add.w	r3, r7, #8
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002890:	f00d feaa 	bl	80105e8 <vsniprintf>
 8002894:	4603      	mov	r3, r0
 8002896:	b29a      	uxth	r2, r3
 8002898:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800289c:	4413      	add	r3, r2
 800289e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aFormat, paramList);
  logString[length++] = '\r';
 80028a2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 80028ac:	461a      	mov	r2, r3
 80028ae:	f107 030c 	add.w	r3, r7, #12
 80028b2:	210d      	movs	r1, #13
 80028b4:	5499      	strb	r1, [r3, r2]
  logString[length++] = '\n';
 80028b6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 80028c0:	461a      	mov	r2, r3
 80028c2:	f107 030c 	add.w	r3, r7, #12
 80028c6:	210a      	movs	r1, #10
 80028c8:	5499      	strb	r1, [r3, r2]
  logString[length++] = 0;
 80028ca:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 80028d4:	461a      	mov	r2, r3
 80028d6:	f107 030c 	add.w	r3, r7, #12
 80028da:	2100      	movs	r1, #0
 80028dc:	5499      	strb	r1, [r3, r2]
  va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 80028de:	1dfb      	adds	r3, r7, #7
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d805      	bhi.n	80028f2 <logApplication+0xfa>
  {
    printf("%s", logString);
 80028e6:	f107 030c 	add.w	r3, r7, #12
 80028ea:	4619      	mov	r1, r3
 80028ec:	4805      	ldr	r0, [pc, #20]	; (8002904 <logApplication+0x10c>)
 80028ee:	f00d fd9f 	bl	8010430 <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 80028f2:	bf00      	nop
 80028f4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80028f8:	46bd      	mov	sp, r7
 80028fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028fe:	b002      	add	sp, #8
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	080118e8 	.word	0x080118e8

08002908 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	e00a      	b.n	8002930 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800291a:	f3af 8000 	nop.w
 800291e:	4601      	mov	r1, r0
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	60ba      	str	r2, [r7, #8]
 8002926:	b2ca      	uxtb	r2, r1
 8002928:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	3301      	adds	r3, #1
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	dbf0      	blt.n	800291a <_read+0x12>
	}

return len;
 8002938:	687b      	ldr	r3, [r7, #4]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
	return -1;
 800294a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800296a:	605a      	str	r2, [r3, #4]
	return 0;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <_isatty>:

int _isatty(int file)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
	return 1;
 8002982:	2301      	movs	r3, #1
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
	return 0;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029b4:	4a14      	ldr	r2, [pc, #80]	; (8002a08 <_sbrk+0x5c>)
 80029b6:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <_sbrk+0x60>)
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029c0:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <_sbrk+0x64>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <_sbrk+0x64>)
 80029ca:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <_sbrk+0x68>)
 80029cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <_sbrk+0x64>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d207      	bcs.n	80029ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029dc:	f00d fcea 	bl	80103b4 <__errno>
 80029e0:	4602      	mov	r2, r0
 80029e2:	230c      	movs	r3, #12
 80029e4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ea:	e009      	b.n	8002a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <_sbrk+0x64>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029f2:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <_sbrk+0x64>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4413      	add	r3, r2
 80029fa:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <_sbrk+0x64>)
 80029fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029fe:	68fb      	ldr	r3, [r7, #12]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20030000 	.word	0x20030000
 8002a0c:	00000400 	.word	0x00000400
 8002a10:	20000260 	.word	0x20000260
 8002a14:	20006da0 	.word	0x20006da0

08002a18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002a1c:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <SystemInit+0xa0>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002a22:	4b25      	ldr	r3, [pc, #148]	; (8002ab8 <SystemInit+0xa0>)
 8002a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a28:	4a23      	ldr	r2, [pc, #140]	; (8002ab8 <SystemInit+0xa0>)
 8002a2a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a46:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002a4a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a56:	4b19      	ldr	r3, [pc, #100]	; (8002abc <SystemInit+0xa4>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a68:	f023 0305 	bic.w	r3, r3, #5
 8002a6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a88:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <SystemInit+0xa8>)
 8002a8a:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a90:	4a0b      	ldr	r2, [pc, #44]	; (8002ac0 <SystemInit+0xa8>)
 8002a92:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	619a      	str	r2, [r3, #24]
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	e000ed00 	.word	0xe000ed00
 8002abc:	faf6fefb 	.word	0xfaf6fefb
 8002ac0:	22041000 	.word	0x22041000

08002ac4 <LL_AHB2_GRP1_EnableClock>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <LL_APB1_GRP2_EnableClock>:
{
 8002af6:	b480      	push	{r7}
 8002af8:	b085      	sub	sp, #20
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4013      	ands	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_APB2_GRP1_EnableClock>:
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
}
 8002b4e:	bf00      	nop
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8002b60:	4b22      	ldr	r3, [pc, #136]	; (8002bec <MX_LPUART1_UART_Init+0x90>)
 8002b62:	4a23      	ldr	r2, [pc, #140]	; (8002bf0 <MX_LPUART1_UART_Init+0x94>)
 8002b64:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002b66:	4b21      	ldr	r3, [pc, #132]	; (8002bec <MX_LPUART1_UART_Init+0x90>)
 8002b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b6c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b6e:	4b1f      	ldr	r3, [pc, #124]	; (8002bec <MX_LPUART1_UART_Init+0x90>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002b74:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <MX_LPUART1_UART_Init+0x90>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002b7a:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <MX_LPUART1_UART_Init+0x90>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002b80:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <MX_LPUART1_UART_Init+0x90>)
 8002b82:	220c      	movs	r2, #12
 8002b84:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b86:	4b19      	ldr	r3, [pc, #100]	; (8002bec <MX_LPUART1_UART_Init+0x90>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b8c:	4b17      	ldr	r3, [pc, #92]	; (8002bec <MX_LPUART1_UART_Init+0x90>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b92:	4b16      	ldr	r3, [pc, #88]	; (8002bec <MX_LPUART1_UART_Init+0x90>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b98:	4b14      	ldr	r3, [pc, #80]	; (8002bec <MX_LPUART1_UART_Init+0x90>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002b9e:	4b13      	ldr	r3, [pc, #76]	; (8002bec <MX_LPUART1_UART_Init+0x90>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002ba4:	4811      	ldr	r0, [pc, #68]	; (8002bec <MX_LPUART1_UART_Init+0x90>)
 8002ba6:	f003 f959 	bl	8005e5c <HAL_UART_Init>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002bb0:	f7ff fc00 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	480d      	ldr	r0, [pc, #52]	; (8002bec <MX_LPUART1_UART_Init+0x90>)
 8002bb8:	f004 fa08 	bl	8006fcc <HAL_UARTEx_SetTxFifoThreshold>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002bc2:	f7ff fbf7 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4808      	ldr	r0, [pc, #32]	; (8002bec <MX_LPUART1_UART_Init+0x90>)
 8002bca:	f004 fa3d 	bl	8007048 <HAL_UARTEx_SetRxFifoThreshold>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002bd4:	f7ff fbee 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002bd8:	4804      	ldr	r0, [pc, #16]	; (8002bec <MX_LPUART1_UART_Init+0x90>)
 8002bda:	f004 f9be 	bl	8006f5a <HAL_UARTEx_DisableFifoMode>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002be4:	f7ff fbe6 	bl	80023b4 <Error_Handler>
  }

}
 8002be8:	bf00      	nop
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20006b10 	.word	0x20006b10
 8002bf0:	40008000 	.word	0x40008000

08002bf4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002bf8:	4b23      	ldr	r3, [pc, #140]	; (8002c88 <MX_USART1_UART_Init+0x94>)
 8002bfa:	4a24      	ldr	r2, [pc, #144]	; (8002c8c <MX_USART1_UART_Init+0x98>)
 8002bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bfe:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <MX_USART1_UART_Init+0x94>)
 8002c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <MX_USART1_UART_Init+0x94>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c0c:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <MX_USART1_UART_Init+0x94>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c12:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <MX_USART1_UART_Init+0x94>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c18:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <MX_USART1_UART_Init+0x94>)
 8002c1a:	220c      	movs	r2, #12
 8002c1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c1e:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <MX_USART1_UART_Init+0x94>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002c24:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <MX_USART1_UART_Init+0x94>)
 8002c26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c2a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c2c:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <MX_USART1_UART_Init+0x94>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c32:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <MX_USART1_UART_Init+0x94>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c38:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <MX_USART1_UART_Init+0x94>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c3e:	4812      	ldr	r0, [pc, #72]	; (8002c88 <MX_USART1_UART_Init+0x94>)
 8002c40:	f003 f90c 	bl	8005e5c <HAL_UART_Init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002c4a:	f7ff fbb3 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c4e:	2100      	movs	r1, #0
 8002c50:	480d      	ldr	r0, [pc, #52]	; (8002c88 <MX_USART1_UART_Init+0x94>)
 8002c52:	f004 f9bb 	bl	8006fcc <HAL_UARTEx_SetTxFifoThreshold>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002c5c:	f7ff fbaa 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c60:	2100      	movs	r1, #0
 8002c62:	4809      	ldr	r0, [pc, #36]	; (8002c88 <MX_USART1_UART_Init+0x94>)
 8002c64:	f004 f9f0 	bl	8007048 <HAL_UARTEx_SetRxFifoThreshold>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002c6e:	f7ff fba1 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002c72:	4805      	ldr	r0, [pc, #20]	; (8002c88 <MX_USART1_UART_Init+0x94>)
 8002c74:	f004 f971 	bl	8006f5a <HAL_UARTEx_DisableFifoMode>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002c7e:	f7ff fb99 	bl	80023b4 <Error_Handler>
  }

}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20006bfc 	.word	0x20006bfc
 8002c8c:	40013800 	.word	0x40013800

08002c90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c98:	f107 030c 	add.w	r3, r7, #12
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a4f      	ldr	r2, [pc, #316]	; (8002dec <HAL_UART_MspInit+0x15c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d148      	bne.n	8002d44 <HAL_UART_MspInit+0xb4>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f7ff ff1f 	bl	8002af6 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb8:	2001      	movs	r0, #1
 8002cba:	f7ff ff03 	bl	8002ac4 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002cbe:	230c      	movs	r3, #12
 8002cc0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002cce:	2308      	movs	r3, #8
 8002cd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd2:	f107 030c 	add.w	r3, r7, #12
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cdc:	f000 fd68 	bl	80037b0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8002ce0:	4b43      	ldr	r3, [pc, #268]	; (8002df0 <HAL_UART_MspInit+0x160>)
 8002ce2:	4a44      	ldr	r2, [pc, #272]	; (8002df4 <HAL_UART_MspInit+0x164>)
 8002ce4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002ce6:	4b42      	ldr	r3, [pc, #264]	; (8002df0 <HAL_UART_MspInit+0x160>)
 8002ce8:	2211      	movs	r2, #17
 8002cea:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cec:	4b40      	ldr	r3, [pc, #256]	; (8002df0 <HAL_UART_MspInit+0x160>)
 8002cee:	2210      	movs	r2, #16
 8002cf0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cf2:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <HAL_UART_MspInit+0x160>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cf8:	4b3d      	ldr	r3, [pc, #244]	; (8002df0 <HAL_UART_MspInit+0x160>)
 8002cfa:	2280      	movs	r2, #128	; 0x80
 8002cfc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cfe:	4b3c      	ldr	r3, [pc, #240]	; (8002df0 <HAL_UART_MspInit+0x160>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d04:	4b3a      	ldr	r3, [pc, #232]	; (8002df0 <HAL_UART_MspInit+0x160>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002d0a:	4b39      	ldr	r3, [pc, #228]	; (8002df0 <HAL_UART_MspInit+0x160>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d10:	4b37      	ldr	r3, [pc, #220]	; (8002df0 <HAL_UART_MspInit+0x160>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002d16:	4836      	ldr	r0, [pc, #216]	; (8002df0 <HAL_UART_MspInit+0x160>)
 8002d18:	f000 fa76 	bl	8003208 <HAL_DMA_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 8002d22:	f7ff fb47 	bl	80023b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a31      	ldr	r2, [pc, #196]	; (8002df0 <HAL_UART_MspInit+0x160>)
 8002d2a:	675a      	str	r2, [r3, #116]	; 0x74
 8002d2c:	4a30      	ldr	r2, [pc, #192]	; (8002df0 <HAL_UART_MspInit+0x160>)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8002d32:	2200      	movs	r2, #0
 8002d34:	2105      	movs	r1, #5
 8002d36:	2025      	movs	r0, #37	; 0x25
 8002d38:	f000 fa14 	bl	8003164 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002d3c:	2025      	movs	r0, #37	; 0x25
 8002d3e:	f000 fa2b 	bl	8003198 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002d42:	e04e      	b.n	8002de2 <HAL_UART_MspInit+0x152>
  else if(uartHandle->Instance==USART1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a2b      	ldr	r2, [pc, #172]	; (8002df8 <HAL_UART_MspInit+0x168>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d149      	bne.n	8002de2 <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d4e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d52:	f7ff fee9 	bl	8002b28 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d56:	2001      	movs	r0, #1
 8002d58:	f7ff feb4 	bl	8002ac4 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d5c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d62:	2302      	movs	r3, #2
 8002d64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d6e:	2307      	movs	r3, #7
 8002d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d72:	f107 030c 	add.w	r3, r7, #12
 8002d76:	4619      	mov	r1, r3
 8002d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d7c:	f000 fd18 	bl	80037b0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002d80:	4b1e      	ldr	r3, [pc, #120]	; (8002dfc <HAL_UART_MspInit+0x16c>)
 8002d82:	4a1f      	ldr	r2, [pc, #124]	; (8002e00 <HAL_UART_MspInit+0x170>)
 8002d84:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002d86:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <HAL_UART_MspInit+0x16c>)
 8002d88:	220f      	movs	r2, #15
 8002d8a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d8c:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <HAL_UART_MspInit+0x16c>)
 8002d8e:	2210      	movs	r2, #16
 8002d90:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d92:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <HAL_UART_MspInit+0x16c>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d98:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <HAL_UART_MspInit+0x16c>)
 8002d9a:	2280      	movs	r2, #128	; 0x80
 8002d9c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d9e:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <HAL_UART_MspInit+0x16c>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002da4:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <HAL_UART_MspInit+0x16c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002daa:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <HAL_UART_MspInit+0x16c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_UART_MspInit+0x16c>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002db6:	4811      	ldr	r0, [pc, #68]	; (8002dfc <HAL_UART_MspInit+0x16c>)
 8002db8:	f000 fa26 	bl	8003208 <HAL_DMA_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_UART_MspInit+0x136>
      Error_Handler();
 8002dc2:	f7ff faf7 	bl	80023b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a0c      	ldr	r2, [pc, #48]	; (8002dfc <HAL_UART_MspInit+0x16c>)
 8002dca:	675a      	str	r2, [r3, #116]	; 0x74
 8002dcc:	4a0b      	ldr	r2, [pc, #44]	; (8002dfc <HAL_UART_MspInit+0x16c>)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2105      	movs	r1, #5
 8002dd6:	2024      	movs	r0, #36	; 0x24
 8002dd8:	f000 f9c4 	bl	8003164 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ddc:	2024      	movs	r0, #36	; 0x24
 8002dde:	f000 f9db 	bl	8003198 <HAL_NVIC_EnableIRQ>
}
 8002de2:	bf00      	nop
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40008000 	.word	0x40008000
 8002df0:	20006c88 	.word	0x20006c88
 8002df4:	40020044 	.word	0x40020044
 8002df8:	40013800 	.word	0x40013800
 8002dfc:	20006b9c 	.word	0x20006b9c
 8002e00:	40020444 	.word	0x40020444

08002e04 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002e04:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e06:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e08:	3304      	adds	r3, #4

08002e0a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e0a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e0c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002e0e:	d3f9      	bcc.n	8002e04 <CopyDataInit>
  bx lr
 8002e10:	4770      	bx	lr

08002e12 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002e12:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002e14:	3004      	adds	r0, #4

08002e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002e16:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002e18:	d3fb      	bcc.n	8002e12 <FillZerobss>
  bx lr
 8002e1a:	4770      	bx	lr

08002e1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e1c:	480c      	ldr	r0, [pc, #48]	; (8002e50 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002e1e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002e20:	f7ff fdfa 	bl	8002a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002e24:	480b      	ldr	r0, [pc, #44]	; (8002e54 <LoopForever+0x8>)
 8002e26:	490c      	ldr	r1, [pc, #48]	; (8002e58 <LoopForever+0xc>)
 8002e28:	4a0c      	ldr	r2, [pc, #48]	; (8002e5c <LoopForever+0x10>)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f7ff ffed 	bl	8002e0a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002e30:	480b      	ldr	r0, [pc, #44]	; (8002e60 <LoopForever+0x14>)
 8002e32:	490c      	ldr	r1, [pc, #48]	; (8002e64 <LoopForever+0x18>)
 8002e34:	2300      	movs	r3, #0
 8002e36:	f7ff ffee 	bl	8002e16 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002e3a:	480b      	ldr	r0, [pc, #44]	; (8002e68 <LoopForever+0x1c>)
 8002e3c:	490b      	ldr	r1, [pc, #44]	; (8002e6c <LoopForever+0x20>)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f7ff ffe9 	bl	8002e16 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e44:	f00d fabc 	bl	80103c0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002e48:	f7ff f997 	bl	800217a <main>

08002e4c <LoopForever>:

LoopForever:
  b LoopForever
 8002e4c:	e7fe      	b.n	8002e4c <LoopForever>
 8002e4e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002e50:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002e54:	20000004 	.word	0x20000004
 8002e58:	20000094 	.word	0x20000094
 8002e5c:	08012a70 	.word	0x08012a70
  INIT_BSS _sbss, _ebss
 8002e60:	20000238 	.word	0x20000238
 8002e64:	20006d9c 	.word	0x20006d9c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002e68:	200301e0 	.word	0x200301e0
 8002e6c:	20030a4f 	.word	0x20030a4f

08002e70 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e70:	e7fe      	b.n	8002e70 <ADC1_IRQHandler>
	...

08002e74 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6053      	str	r3, [r2, #4]
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e0042000 	.word	0xe0042000

08002e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <HAL_Init+0x3c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a0b      	ldr	r2, [pc, #44]	; (8002ed0 <HAL_Init+0x3c>)
 8002ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eaa:	2003      	movs	r0, #3
 8002eac:	f000 f94f 	bl	800314e <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f7ff fb47 	bl	8002544 <HAL_InitTick>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	71fb      	strb	r3, [r7, #7]
 8002ec0:	e001      	b.n	8002ec6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ec2:	f7ff fb06 	bl	80024d2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	58004000 	.word	0x58004000

08002ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_IncTick+0x20>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_IncTick+0x24>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <HAL_IncTick+0x24>)
 8002ee6:	6013      	str	r3, [r2, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20000018 	.word	0x20000018
 8002ef8:	20006ce8 	.word	0x20006ce8

08002efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return uwTick;
 8002f00:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <HAL_GetTick+0x14>)
 8002f02:	681b      	ldr	r3, [r3, #0]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	20006ce8 	.word	0x20006ce8

08002f14 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <HAL_GetTickPrio+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20000014 	.word	0x20000014

08002f2c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002f30:	f7ff ffa0 	bl	8002e74 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002f34:	bf00      	nop
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <__NVIC_SetPriorityGrouping+0x44>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f54:	4013      	ands	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f6a:	4a04      	ldr	r2, [pc, #16]	; (8002f7c <__NVIC_SetPriorityGrouping+0x44>)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	60d3      	str	r3, [r2, #12]
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <__NVIC_GetPriorityGrouping+0x18>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	f003 0307 	and.w	r3, r3, #7
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	db0b      	blt.n	8002fc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	f003 021f 	and.w	r2, r3, #31
 8002fb4:	4907      	ldr	r1, [pc, #28]	; (8002fd4 <__NVIC_EnableIRQ+0x38>)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	e000e100 	.word	0xe000e100

08002fd8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	db10      	blt.n	800300c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4909      	ldr	r1, [pc, #36]	; (8003018 <__NVIC_DisableIRQ+0x40>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffe:	3320      	adds	r3, #32
 8003000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003004:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003008:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	e000e100 	.word	0xe000e100

0800301c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302a:	2b00      	cmp	r3, #0
 800302c:	db0c      	blt.n	8003048 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	f003 021f 	and.w	r2, r3, #31
 8003034:	4907      	ldr	r1, [pc, #28]	; (8003054 <__NVIC_SetPendingIRQ+0x38>)
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	2001      	movs	r0, #1
 800303e:	fa00 f202 	lsl.w	r2, r0, r2
 8003042:	3340      	adds	r3, #64	; 0x40
 8003044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000e100 	.word	0xe000e100

08003058 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	2b00      	cmp	r3, #0
 8003068:	db0c      	blt.n	8003084 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	f003 021f 	and.w	r2, r3, #31
 8003070:	4907      	ldr	r1, [pc, #28]	; (8003090 <__NVIC_ClearPendingIRQ+0x38>)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	2001      	movs	r0, #1
 800307a:	fa00 f202 	lsl.w	r2, r0, r2
 800307e:	3360      	adds	r3, #96	; 0x60
 8003080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	e000e100 	.word	0xe000e100

08003094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	6039      	str	r1, [r7, #0]
 800309e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	db0a      	blt.n	80030be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	490c      	ldr	r1, [pc, #48]	; (80030e0 <__NVIC_SetPriority+0x4c>)
 80030ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b2:	0112      	lsls	r2, r2, #4
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	440b      	add	r3, r1
 80030b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030bc:	e00a      	b.n	80030d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	4908      	ldr	r1, [pc, #32]	; (80030e4 <__NVIC_SetPriority+0x50>)
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	3b04      	subs	r3, #4
 80030cc:	0112      	lsls	r2, r2, #4
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	440b      	add	r3, r1
 80030d2:	761a      	strb	r2, [r3, #24]
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000e100 	.word	0xe000e100
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b089      	sub	sp, #36	; 0x24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f1c3 0307 	rsb	r3, r3, #7
 8003102:	2b04      	cmp	r3, #4
 8003104:	bf28      	it	cs
 8003106:	2304      	movcs	r3, #4
 8003108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3304      	adds	r3, #4
 800310e:	2b06      	cmp	r3, #6
 8003110:	d902      	bls.n	8003118 <NVIC_EncodePriority+0x30>
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3b03      	subs	r3, #3
 8003116:	e000      	b.n	800311a <NVIC_EncodePriority+0x32>
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800311c:	f04f 32ff 	mov.w	r2, #4294967295
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43da      	mvns	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	401a      	ands	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003130:	f04f 31ff 	mov.w	r1, #4294967295
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	43d9      	mvns	r1, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003140:	4313      	orrs	r3, r2
         );
}
 8003142:	4618      	mov	r0, r3
 8003144:	3724      	adds	r7, #36	; 0x24
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff feee 	bl	8002f38 <__NVIC_SetPriorityGrouping>
}
 800315c:	bf00      	nop
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003172:	f7ff ff05 	bl	8002f80 <__NVIC_GetPriorityGrouping>
 8003176:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	68b9      	ldr	r1, [r7, #8]
 800317c:	6978      	ldr	r0, [r7, #20]
 800317e:	f7ff ffb3 	bl	80030e8 <NVIC_EncodePriority>
 8003182:	4602      	mov	r2, r0
 8003184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff ff82 	bl	8003094 <__NVIC_SetPriority>
}
 8003190:	bf00      	nop
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff fef8 	bl	8002f9c <__NVIC_EnableIRQ>
}
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80031be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ff08 	bl	8002fd8 <__NVIC_DisableIRQ>
}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ff1c 	bl	800301c <__NVIC_SetPendingIRQ>
}
 80031e4:	bf00      	nop
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ff2c 	bl	8003058 <__NVIC_ClearPendingIRQ>
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e08e      	b.n	8003338 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	4b47      	ldr	r3, [pc, #284]	; (8003340 <HAL_DMA_Init+0x138>)
 8003222:	429a      	cmp	r2, r3
 8003224:	d80f      	bhi.n	8003246 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	4b45      	ldr	r3, [pc, #276]	; (8003344 <HAL_DMA_Init+0x13c>)
 800322e:	4413      	add	r3, r2
 8003230:	4a45      	ldr	r2, [pc, #276]	; (8003348 <HAL_DMA_Init+0x140>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	009a      	lsls	r2, r3, #2
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a42      	ldr	r2, [pc, #264]	; (800334c <HAL_DMA_Init+0x144>)
 8003242:	641a      	str	r2, [r3, #64]	; 0x40
 8003244:	e00e      	b.n	8003264 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	4b40      	ldr	r3, [pc, #256]	; (8003350 <HAL_DMA_Init+0x148>)
 800324e:	4413      	add	r3, r2
 8003250:	4a3d      	ldr	r2, [pc, #244]	; (8003348 <HAL_DMA_Init+0x140>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	091b      	lsrs	r3, r3, #4
 8003258:	009a      	lsls	r2, r3, #2
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a3c      	ldr	r2, [pc, #240]	; (8003354 <HAL_DMA_Init+0x14c>)
 8003262:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800327a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003288:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003294:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fa16 	bl	80036e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032c4:	d102      	bne.n	80032cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80032d8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032e2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d010      	beq.n	800330e <HAL_DMA_Init+0x106>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d80c      	bhi.n	800330e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fa35 	bl	8003764 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	e008      	b.n	8003320 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40020407 	.word	0x40020407
 8003344:	bffdfff8 	.word	0xbffdfff8
 8003348:	cccccccd 	.word	0xcccccccd
 800334c:	40020000 	.word	0x40020000
 8003350:	bffdfbf8 	.word	0xbffdfbf8
 8003354:	40020400 	.word	0x40020400

08003358 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_DMA_Start_IT+0x20>
 8003374:	2302      	movs	r3, #2
 8003376:	e066      	b.n	8003446 <HAL_DMA_Start_IT+0xee>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	d155      	bne.n	8003438 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 f95a 	bl	800366a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 020e 	orr.w	r2, r2, #14
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	e00f      	b.n	80033f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0204 	bic.w	r2, r2, #4
 80033de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 020a 	orr.w	r2, r2, #10
 80033ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800340c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003424:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0201 	orr.w	r2, r2, #1
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	e005      	b.n	8003444 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003440:	2302      	movs	r3, #2
 8003442:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003444:	7dfb      	ldrb	r3, [r7, #23]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d005      	beq.n	8003472 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2204      	movs	r2, #4
 800346a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
 8003470:	e047      	b.n	8003502 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 020e 	bic.w	r2, r2, #14
 8003480:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	f003 021c 	and.w	r2, r3, #28
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	2101      	movs	r1, #1
 80034b0:	fa01 f202 	lsl.w	r2, r1, r2
 80034b4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034be:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00c      	beq.n	80034e2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80034e0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	4798      	blx	r3
    }
  }
  return status;
 8003502:	7bfb      	ldrb	r3, [r7, #15]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003528:	f003 031c 	and.w	r3, r3, #28
 800352c:	2204      	movs	r2, #4
 800352e:	409a      	lsls	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d026      	beq.n	8003586 <HAL_DMA_IRQHandler+0x7a>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	d021      	beq.n	8003586 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b00      	cmp	r3, #0
 800354e:	d107      	bne.n	8003560 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0204 	bic.w	r2, r2, #4
 800355e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003564:	f003 021c 	and.w	r2, r3, #28
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	2104      	movs	r1, #4
 800356e:	fa01 f202 	lsl.w	r2, r1, r2
 8003572:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	2b00      	cmp	r3, #0
 800357a:	d071      	beq.n	8003660 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003584:	e06c      	b.n	8003660 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	f003 031c 	and.w	r3, r3, #28
 800358e:	2202      	movs	r2, #2
 8003590:	409a      	lsls	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4013      	ands	r3, r2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d02e      	beq.n	80035f8 <HAL_DMA_IRQHandler+0xec>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d029      	beq.n	80035f8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10b      	bne.n	80035ca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 020a 	bic.w	r2, r2, #10
 80035c0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	f003 021c 	and.w	r2, r3, #28
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	2102      	movs	r1, #2
 80035d8:	fa01 f202 	lsl.w	r2, r1, r2
 80035dc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d038      	beq.n	8003660 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80035f6:	e033      	b.n	8003660 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fc:	f003 031c 	and.w	r3, r3, #28
 8003600:	2208      	movs	r2, #8
 8003602:	409a      	lsls	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d02a      	beq.n	8003662 <HAL_DMA_IRQHandler+0x156>
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d025      	beq.n	8003662 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 020e 	bic.w	r2, r2, #14
 8003624:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	f003 021c 	and.w	r2, r3, #28
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	2101      	movs	r1, #1
 8003634:	fa01 f202 	lsl.w	r2, r1, r2
 8003638:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003654:	2b00      	cmp	r3, #0
 8003656:	d004      	beq.n	8003662 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003660:	bf00      	nop
 8003662:	bf00      	nop
}
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800366a:	b480      	push	{r7}
 800366c:	b085      	sub	sp, #20
 800366e:	af00      	add	r7, sp, #0
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003680:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003686:	2b00      	cmp	r3, #0
 8003688:	d004      	beq.n	8003694 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003692:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003698:	f003 021c 	and.w	r2, r3, #28
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	2101      	movs	r1, #1
 80036a2:	fa01 f202 	lsl.w	r2, r1, r2
 80036a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b10      	cmp	r3, #16
 80036b6:	d108      	bne.n	80036ca <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036c8:	e007      	b.n	80036da <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	60da      	str	r2, [r3, #12]
}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	4b17      	ldr	r3, [pc, #92]	; (8003754 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d80a      	bhi.n	8003712 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003700:	089b      	lsrs	r3, r3, #2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003708:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6493      	str	r3, [r2, #72]	; 0x48
 8003710:	e007      	b.n	8003722 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	089b      	lsrs	r3, r3, #2
 8003718:	009a      	lsls	r2, r3, #2
 800371a:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800371c:	4413      	add	r3, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	3b08      	subs	r3, #8
 800372a:	4a0c      	ldr	r2, [pc, #48]	; (800375c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800372c:	fba2 2303 	umull	r2, r3, r2, r3
 8003730:	091b      	lsrs	r3, r3, #4
 8003732:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003738:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	2201      	movs	r2, #1
 8003742:	409a      	lsls	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	40020407 	.word	0x40020407
 8003758:	4002081c 	.word	0x4002081c
 800375c:	cccccccd 	.word	0xcccccccd
 8003760:	40020880 	.word	0x40020880

08003764 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003774:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	461a      	mov	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a09      	ldr	r2, [pc, #36]	; (80037ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003788:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	3b01      	subs	r3, #1
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2201      	movs	r2, #1
 8003794:	409a      	lsls	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800379a:	bf00      	nop
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	1000823f 	.word	0x1000823f
 80037ac:	40020940 	.word	0x40020940

080037b0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037be:	e14c      	b.n	8003a5a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	2101      	movs	r1, #1
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	fa01 f303 	lsl.w	r3, r1, r3
 80037cc:	4013      	ands	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 813e 	beq.w	8003a54 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d00b      	beq.n	80037f8 <HAL_GPIO_Init+0x48>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d007      	beq.n	80037f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037ec:	2b11      	cmp	r3, #17
 80037ee:	d003      	beq.n	80037f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b12      	cmp	r3, #18
 80037f6:	d130      	bne.n	800385a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	2203      	movs	r2, #3
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4013      	ands	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800382e:	2201      	movs	r2, #1
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43db      	mvns	r3, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	f003 0201 	and.w	r2, r3, #1
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	2203      	movs	r2, #3
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4013      	ands	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0xea>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b12      	cmp	r3, #18
 8003898:	d123      	bne.n	80038e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	08da      	lsrs	r2, r3, #3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3208      	adds	r2, #8
 80038a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	220f      	movs	r2, #15
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43db      	mvns	r3, r3
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4013      	ands	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	08da      	lsrs	r2, r3, #3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3208      	adds	r2, #8
 80038dc:	6939      	ldr	r1, [r7, #16]
 80038de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	2203      	movs	r2, #3
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4013      	ands	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f003 0203 	and.w	r2, r3, #3
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 8098 	beq.w	8003a54 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003924:	4a54      	ldr	r2, [pc, #336]	; (8003a78 <HAL_GPIO_Init+0x2c8>)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	089b      	lsrs	r3, r3, #2
 800392a:	3302      	adds	r3, #2
 800392c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003930:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	220f      	movs	r2, #15
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4013      	ands	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800394e:	d019      	beq.n	8003984 <HAL_GPIO_Init+0x1d4>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a4a      	ldr	r2, [pc, #296]	; (8003a7c <HAL_GPIO_Init+0x2cc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <HAL_GPIO_Init+0x1d0>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a49      	ldr	r2, [pc, #292]	; (8003a80 <HAL_GPIO_Init+0x2d0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00d      	beq.n	800397c <HAL_GPIO_Init+0x1cc>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a48      	ldr	r2, [pc, #288]	; (8003a84 <HAL_GPIO_Init+0x2d4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d007      	beq.n	8003978 <HAL_GPIO_Init+0x1c8>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a47      	ldr	r2, [pc, #284]	; (8003a88 <HAL_GPIO_Init+0x2d8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d101      	bne.n	8003974 <HAL_GPIO_Init+0x1c4>
 8003970:	2304      	movs	r3, #4
 8003972:	e008      	b.n	8003986 <HAL_GPIO_Init+0x1d6>
 8003974:	2307      	movs	r3, #7
 8003976:	e006      	b.n	8003986 <HAL_GPIO_Init+0x1d6>
 8003978:	2303      	movs	r3, #3
 800397a:	e004      	b.n	8003986 <HAL_GPIO_Init+0x1d6>
 800397c:	2302      	movs	r3, #2
 800397e:	e002      	b.n	8003986 <HAL_GPIO_Init+0x1d6>
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <HAL_GPIO_Init+0x1d6>
 8003984:	2300      	movs	r3, #0
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	f002 0203 	and.w	r2, r2, #3
 800398c:	0092      	lsls	r2, r2, #2
 800398e:	4093      	lsls	r3, r2
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003996:	4938      	ldr	r1, [pc, #224]	; (8003a78 <HAL_GPIO_Init+0x2c8>)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	089b      	lsrs	r3, r3, #2
 800399c:	3302      	adds	r3, #2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80039a4:	4b39      	ldr	r3, [pc, #228]	; (8003a8c <HAL_GPIO_Init+0x2dc>)
 80039a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	43db      	mvns	r3, r3
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4013      	ands	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039ca:	4a30      	ldr	r2, [pc, #192]	; (8003a8c <HAL_GPIO_Init+0x2dc>)
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80039d2:	4b2e      	ldr	r3, [pc, #184]	; (8003a8c <HAL_GPIO_Init+0x2dc>)
 80039d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	43db      	mvns	r3, r3
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4013      	ands	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039f8:	4a24      	ldr	r2, [pc, #144]	; (8003a8c <HAL_GPIO_Init+0x2dc>)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a00:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <HAL_GPIO_Init+0x2dc>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a24:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <HAL_GPIO_Init+0x2dc>)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a2a:	4b18      	ldr	r3, [pc, #96]	; (8003a8c <HAL_GPIO_Init+0x2dc>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	43db      	mvns	r3, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a4e:	4a0f      	ldr	r2, [pc, #60]	; (8003a8c <HAL_GPIO_Init+0x2dc>)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	3301      	adds	r3, #1
 8003a58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f47f aeab 	bne.w	80037c0 <HAL_GPIO_Init+0x10>
  }
}
 8003a6a:	bf00      	nop
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40010000 	.word	0x40010000
 8003a7c:	48000400 	.word	0x48000400
 8003a80:	48000800 	.word	0x48000800
 8003a84:	48000c00 	.word	0x48000c00
 8003a88:	48001000 	.word	0x48001000
 8003a8c:	58000800 	.word	0x58000800

08003a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	807b      	strh	r3, [r7, #2]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aa0:	787b      	ldrb	r3, [r7, #1]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003aa6:	887a      	ldrh	r2, [r7, #2]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003aac:	e002      	b.n	8003ab4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003aae:	887a      	ldrh	r2, [r7, #2]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <HAL_HSEM_IRQHandler+0x30>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003acc:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <HAL_HSEM_IRQHandler+0x30>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	4906      	ldr	r1, [pc, #24]	; (8003af0 <HAL_HSEM_IRQHandler+0x30>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003ada:	4a05      	ldr	r2, [pc, #20]	; (8003af0 <HAL_HSEM_IRQHandler+0x30>)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f807 	bl	8003af4 <HAL_HSEM_FreeCallback>
}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	58001500 	.word	0x58001500

08003af4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b16:	6013      	str	r3, [r2, #0]
}
 8003b18:	bf00      	nop
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	58000400 	.word	0x58000400

08003b28 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b2c:	4b04      	ldr	r3, [pc, #16]	; (8003b40 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	58000400 	.word	0x58000400

08003b44 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b56:	d101      	bne.n	8003b5c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <LL_RCC_HSE_Enable>:
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7a:	6013      	str	r3, [r2, #0]
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <LL_RCC_HSE_Disable>:
{
 8003b86:	b480      	push	{r7}
 8003b88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b98:	6013      	str	r3, [r2, #0]
}
 8003b9a:	bf00      	nop
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <LL_RCC_HSE_IsReady>:
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bb6:	d101      	bne.n	8003bbc <LL_RCC_HSE_IsReady+0x18>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <LL_RCC_HSE_IsReady+0x1a>
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <LL_RCC_HSI_Enable>:
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bda:	6013      	str	r3, [r2, #0]
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <LL_RCC_HSI_Disable>:
{
 8003be6:	b480      	push	{r7}
 8003be8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf8:	6013      	str	r3, [r2, #0]
}
 8003bfa:	bf00      	nop
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <LL_RCC_HSI_IsReady>:
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c16:	d101      	bne.n	8003c1c <LL_RCC_HSI_IsReady+0x18>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <LL_RCC_HSI_IsReady+0x1a>
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	061b      	lsls	r3, r3, #24
 8003c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c42:	4313      	orrs	r3, r2
 8003c44:	604b      	str	r3, [r1, #4]
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <LL_RCC_HSI48_Enable>:
{
 8003c52:	b480      	push	{r7}
 8003c54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003c6a:	bf00      	nop
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <LL_RCC_HSI48_Disable>:
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003c8c:	bf00      	nop
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <LL_RCC_HSI48_IsReady>:
{
 8003c96:	b480      	push	{r7}
 8003c98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d101      	bne.n	8003cae <LL_RCC_HSI48_IsReady+0x18>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <LL_RCC_HSI48_IsReady+0x1a>
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <LL_RCC_LSE_Enable>:
{
 8003cba:	b480      	push	{r7}
 8003cbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003cd2:	bf00      	nop
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <LL_RCC_LSE_Disable>:
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cec:	f023 0301 	bic.w	r3, r3, #1
 8003cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <LL_RCC_LSE_EnableBypass>:
{
 8003cfe:	b480      	push	{r7}
 8003d00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d0e:	f043 0304 	orr.w	r3, r3, #4
 8003d12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d16:	bf00      	nop
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <LL_RCC_LSE_DisableBypass>:
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d30:	f023 0304 	bic.w	r3, r3, #4
 8003d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <LL_RCC_LSE_IsReady>:
{
 8003d42:	b480      	push	{r7}
 8003d44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d101      	bne.n	8003d5a <LL_RCC_LSE_IsReady+0x18>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <LL_RCC_LSE_IsReady+0x1a>
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <LL_RCC_LSI1_Enable>:
{
 8003d66:	b480      	push	{r7}
 8003d68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d7e:	bf00      	nop
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <LL_RCC_LSI1_Disable>:
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <LL_RCC_LSI1_IsReady>:
{
 8003daa:	b480      	push	{r7}
 8003dac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d101      	bne.n	8003dc2 <LL_RCC_LSI1_IsReady+0x18>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <LL_RCC_LSI1_IsReady+0x1a>
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <LL_RCC_LSI2_Enable>:
{
 8003dce:	b480      	push	{r7}
 8003dd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dde:	f043 0304 	orr.w	r3, r3, #4
 8003de2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003de6:	bf00      	nop
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <LL_RCC_LSI2_Disable>:
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e00:	f023 0304 	bic.w	r3, r3, #4
 8003e04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003e08:	bf00      	nop
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <LL_RCC_LSI2_IsReady>:
{
 8003e12:	b480      	push	{r7}
 8003e14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d101      	bne.n	8003e2a <LL_RCC_LSI2_IsReady+0x18>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <LL_RCC_LSI2_IsReady+0x1a>
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <LL_RCC_LSI2_SetTrimming>:
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e46:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	021b      	lsls	r3, r3, #8
 8003e4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <LL_RCC_MSI_Enable>:
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6013      	str	r3, [r2, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <LL_RCC_MSI_Disable>:
{
 8003e82:	b480      	push	{r7}
 8003e84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	6013      	str	r3, [r2, #0]
}
 8003e96:	bf00      	nop
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <LL_RCC_MSI_IsReady>:
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d101      	bne.n	8003eb6 <LL_RCC_MSI_IsReady+0x16>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <LL_RCC_MSI_IsReady+0x18>
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <LL_RCC_MSI_SetRange>:
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	600b      	str	r3, [r1, #0]
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <LL_RCC_MSI_GetRange>:
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003efa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2bb0      	cmp	r3, #176	; 0xb0
 8003f00:	d901      	bls.n	8003f06 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003f02:	23b0      	movs	r3, #176	; 0xb0
 8003f04:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003f06:	687b      	ldr	r3, [r7, #4]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	604b      	str	r3, [r1, #4]
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <LL_RCC_SetSysClkSource>:
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f023 0203 	bic.w	r2, r3, #3
 8003f50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <LL_RCC_GetSysClkSource>:
{
 8003f66:	b480      	push	{r7}
 8003f68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 030c 	and.w	r3, r3, #12
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <LL_RCC_SetAHBPrescaler>:
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	608b      	str	r3, [r1, #8]
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003fb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <LL_RCC_SetAHB4Prescaler>:
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fde:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003fe2:	f023 020f 	bic.w	r2, r3, #15
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <LL_RCC_SetAPB1Prescaler>:
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004012:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4313      	orrs	r3, r2
 800401a:	608b      	str	r3, [r1, #8]
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <LL_RCC_SetAPB2Prescaler>:
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800403a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4313      	orrs	r3, r2
 8004042:	608b      	str	r3, [r1, #8]
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <LL_RCC_GetAHBPrescaler>:
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800405e:	4618      	mov	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <LL_C2_RCC_GetAHBPrescaler>:
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800406c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004070:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004078:	4618      	mov	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <LL_RCC_GetAHB4Prescaler>:
{
 8004082:	b480      	push	{r7}
 8004084:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004094:	4618      	mov	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <LL_RCC_GetAPB1Prescaler>:
{
 800409e:	b480      	push	{r7}
 80040a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80040a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <LL_RCC_GetAPB2Prescaler>:
{
 80040b6:	b480      	push	{r7}
 80040b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80040ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80040ce:	b480      	push	{r7}
 80040d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80040d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040e0:	6013      	str	r3, [r2, #0]
}
 80040e2:	bf00      	nop
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80040f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040fe:	6013      	str	r3, [r2, #0]
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800410a:	b480      	push	{r7}
 800410c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800410e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004118:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800411c:	d101      	bne.n	8004122 <LL_RCC_PLL_IsReady+0x18>
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <LL_RCC_PLL_IsReady+0x1a>
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800412e:	b480      	push	{r7}
 8004130:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	0a1b      	lsrs	r3, r3, #8
 800413a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800413e:	4618      	mov	r0, r3
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800414c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004156:	4618      	mov	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800416e:	4618      	mov	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800417c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 0303 	and.w	r3, r3, #3
}
 8004186:	4618      	mov	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800419e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a2:	d101      	bne.n	80041a8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80041b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80041c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041c8:	d101      	bne.n	80041ce <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80041da:	b480      	push	{r7}
 80041dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80041de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80041e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ee:	d101      	bne.n	80041f4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004212:	d101      	bne.n	8004218 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004232:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004236:	d101      	bne.n	800423c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004248:	b590      	push	{r4, r7, lr}
 800424a:	b08d      	sub	sp, #52	; 0x34
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e37e      	b.n	8004958 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 8092 	beq.w	800438c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004268:	f7ff fe7d 	bl	8003f66 <LL_RCC_GetSysClkSource>
 800426c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800426e:	f7ff ff83 	bl	8004178 <LL_RCC_PLL_GetMainSource>
 8004272:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004276:	2b00      	cmp	r3, #0
 8004278:	d005      	beq.n	8004286 <HAL_RCC_OscConfig+0x3e>
 800427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427c:	2b0c      	cmp	r3, #12
 800427e:	d14c      	bne.n	800431a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004282:	2b01      	cmp	r3, #1
 8004284:	d149      	bne.n	800431a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004286:	f7ff fe0b 	bl	8003ea0 <LL_RCC_MSI_IsReady>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_RCC_OscConfig+0x54>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e35d      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80042a0:	f7ff fe23 	bl	8003eea <LL_RCC_MSI_GetRange>
 80042a4:	4603      	mov	r3, r0
 80042a6:	429c      	cmp	r4, r3
 80042a8:	d914      	bls.n	80042d4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fd72 	bl	8004d98 <RCC_SetFlashLatencyFromMSIRange>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e34c      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fdfd 	bl	8003ec2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff fe21 	bl	8003f14 <LL_RCC_MSI_SetCalibTrimming>
 80042d2:	e013      	b.n	80042fc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff fdf2 	bl	8003ec2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff fe16 	bl	8003f14 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fd53 	bl	8004d98 <RCC_SetFlashLatencyFromMSIRange>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e32d      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80042fc:	f000 fcda 	bl	8004cb4 <HAL_RCC_GetHCLKFreq>
 8004300:	4602      	mov	r2, r0
 8004302:	4bb3      	ldr	r3, [pc, #716]	; (80045d0 <HAL_RCC_OscConfig+0x388>)
 8004304:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004306:	4bb3      	ldr	r3, [pc, #716]	; (80045d4 <HAL_RCC_OscConfig+0x38c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f7fe f91a 	bl	8002544 <HAL_InitTick>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d039      	beq.n	800438a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e31e      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d01e      	beq.n	8004360 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004322:	f7ff fd9f 	bl	8003e64 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004326:	f7fe fde9 	bl	8002efc <HAL_GetTick>
 800432a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800432e:	f7fe fde5 	bl	8002efc <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e30b      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004340:	f7ff fdae 	bl	8003ea0 <LL_RCC_MSI_IsReady>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f1      	beq.n	800432e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fdb7 	bl	8003ec2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff fddb 	bl	8003f14 <LL_RCC_MSI_SetCalibTrimming>
 800435e:	e015      	b.n	800438c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004360:	f7ff fd8f 	bl	8003e82 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004364:	f7fe fdca 	bl	8002efc <HAL_GetTick>
 8004368:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800436c:	f7fe fdc6 	bl	8002efc <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e2ec      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800437e:	f7ff fd8f 	bl	8003ea0 <LL_RCC_MSI_IsReady>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1f1      	bne.n	800436c <HAL_RCC_OscConfig+0x124>
 8004388:	e000      	b.n	800438c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800438a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d04e      	beq.n	8004436 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004398:	f7ff fde5 	bl	8003f66 <LL_RCC_GetSysClkSource>
 800439c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800439e:	f7ff feeb 	bl	8004178 <LL_RCC_PLL_GetMainSource>
 80043a2:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d005      	beq.n	80043b6 <HAL_RCC_OscConfig+0x16e>
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	2b0c      	cmp	r3, #12
 80043ae:	d10d      	bne.n	80043cc <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d10a      	bne.n	80043cc <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b6:	f7ff fbf5 	bl	8003ba4 <LL_RCC_HSE_IsReady>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d039      	beq.n	8004434 <HAL_RCC_OscConfig+0x1ec>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d135      	bne.n	8004434 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e2c5      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d4:	d102      	bne.n	80043dc <HAL_RCC_OscConfig+0x194>
 80043d6:	f7ff fbc7 	bl	8003b68 <LL_RCC_HSE_Enable>
 80043da:	e001      	b.n	80043e0 <HAL_RCC_OscConfig+0x198>
 80043dc:	f7ff fbd3 	bl	8003b86 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d012      	beq.n	800440e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fe fd88 	bl	8002efc <HAL_GetTick>
 80043ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f0:	f7fe fd84 	bl	8002efc <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	; 0x64
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e2aa      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004402:	f7ff fbcf 	bl	8003ba4 <LL_RCC_HSE_IsReady>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0f1      	beq.n	80043f0 <HAL_RCC_OscConfig+0x1a8>
 800440c:	e013      	b.n	8004436 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440e:	f7fe fd75 	bl	8002efc <HAL_GetTick>
 8004412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004416:	f7fe fd71 	bl	8002efc <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b64      	cmp	r3, #100	; 0x64
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e297      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004428:	f7ff fbbc 	bl	8003ba4 <LL_RCC_HSE_IsReady>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f1      	bne.n	8004416 <HAL_RCC_OscConfig+0x1ce>
 8004432:	e000      	b.n	8004436 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d051      	beq.n	80044e6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004442:	f7ff fd90 	bl	8003f66 <LL_RCC_GetSysClkSource>
 8004446:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004448:	f7ff fe96 	bl	8004178 <LL_RCC_PLL_GetMainSource>
 800444c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	2b04      	cmp	r3, #4
 8004452:	d005      	beq.n	8004460 <HAL_RCC_OscConfig+0x218>
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	2b0c      	cmp	r3, #12
 8004458:	d113      	bne.n	8004482 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d110      	bne.n	8004482 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004460:	f7ff fbd0 	bl	8003c04 <LL_RCC_HSI_IsReady>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <HAL_RCC_OscConfig+0x22e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e270      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff fbd4 	bl	8003c28 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004480:	e031      	b.n	80044e6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d019      	beq.n	80044be <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800448a:	f7ff fb9d 	bl	8003bc8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448e:	f7fe fd35 	bl	8002efc <HAL_GetTick>
 8004492:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004496:	f7fe fd31 	bl	8002efc <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e257      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80044a8:	f7ff fbac 	bl	8003c04 <LL_RCC_HSI_IsReady>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f1      	beq.n	8004496 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff fbb6 	bl	8003c28 <LL_RCC_HSI_SetCalibTrimming>
 80044bc:	e013      	b.n	80044e6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044be:	f7ff fb92 	bl	8003be6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c2:	f7fe fd1b 	bl	8002efc <HAL_GetTick>
 80044c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ca:	f7fe fd17 	bl	8002efc <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e23d      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80044dc:	f7ff fb92 	bl	8003c04 <LL_RCC_HSI_IsReady>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f1      	bne.n	80044ca <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 80a3 	beq.w	8004646 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d076      	beq.n	80045f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0310 	and.w	r3, r3, #16
 8004510:	2b00      	cmp	r3, #0
 8004512:	d046      	beq.n	80045a2 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004514:	f7ff fc49 	bl	8003daa <LL_RCC_LSI1_IsReady>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d113      	bne.n	8004546 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800451e:	f7ff fc22 	bl	8003d66 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004522:	f7fe fceb 	bl	8002efc <HAL_GetTick>
 8004526:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800452a:	f7fe fce7 	bl	8002efc <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e20d      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800453c:	f7ff fc35 	bl	8003daa <LL_RCC_LSI1_IsReady>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f1      	beq.n	800452a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004546:	f7ff fc42 	bl	8003dce <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454a:	f7fe fcd7 	bl	8002efc <HAL_GetTick>
 800454e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004552:	f7fe fcd3 	bl	8002efc <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b03      	cmp	r3, #3
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e1f9      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004564:	f7ff fc55 	bl	8003e12 <LL_RCC_LSI2_IsReady>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f1      	beq.n	8004552 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff fc5f 	bl	8003e36 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004578:	f7ff fc06 	bl	8003d88 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7fe fcbe 	bl	8002efc <HAL_GetTick>
 8004580:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004584:	f7fe fcba 	bl	8002efc <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e1e0      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004596:	f7ff fc08 	bl	8003daa <LL_RCC_LSI1_IsReady>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1f1      	bne.n	8004584 <HAL_RCC_OscConfig+0x33c>
 80045a0:	e051      	b.n	8004646 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80045a2:	f7ff fbe0 	bl	8003d66 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a6:	f7fe fca9 	bl	8002efc <HAL_GetTick>
 80045aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80045ae:	f7fe fca5 	bl	8002efc <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e1cb      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80045c0:	f7ff fbf3 	bl	8003daa <LL_RCC_LSI1_IsReady>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f1      	beq.n	80045ae <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80045ca:	f7ff fc11 	bl	8003df0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80045ce:	e00c      	b.n	80045ea <HAL_RCC_OscConfig+0x3a2>
 80045d0:	20000010 	.word	0x20000010
 80045d4:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80045d8:	f7fe fc90 	bl	8002efc <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e1b6      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80045ea:	f7ff fc12 	bl	8003e12 <LL_RCC_LSI2_IsReady>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1f1      	bne.n	80045d8 <HAL_RCC_OscConfig+0x390>
 80045f4:	e027      	b.n	8004646 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80045f6:	f7ff fbfb 	bl	8003df0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fa:	f7fe fc7f 	bl	8002efc <HAL_GetTick>
 80045fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004602:	f7fe fc7b 	bl	8002efc <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b03      	cmp	r3, #3
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e1a1      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004614:	f7ff fbfd 	bl	8003e12 <LL_RCC_LSI2_IsReady>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f1      	bne.n	8004602 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800461e:	f7ff fbb3 	bl	8003d88 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004622:	f7fe fc6b 	bl	8002efc <HAL_GetTick>
 8004626:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800462a:	f7fe fc67 	bl	8002efc <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e18d      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800463c:	f7ff fbb5 	bl	8003daa <LL_RCC_LSI1_IsReady>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f1      	bne.n	800462a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	2b00      	cmp	r3, #0
 8004650:	d05b      	beq.n	800470a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004652:	4bb5      	ldr	r3, [pc, #724]	; (8004928 <HAL_RCC_OscConfig+0x6e0>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465a:	2b00      	cmp	r3, #0
 800465c:	d114      	bne.n	8004688 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800465e:	f7ff fa53 	bl	8003b08 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004662:	f7fe fc4b 	bl	8002efc <HAL_GetTick>
 8004666:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800466a:	f7fe fc47 	bl	8002efc <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e16d      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800467c:	4baa      	ldr	r3, [pc, #680]	; (8004928 <HAL_RCC_OscConfig+0x6e0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0f0      	beq.n	800466a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d102      	bne.n	8004696 <HAL_RCC_OscConfig+0x44e>
 8004690:	f7ff fb13 	bl	8003cba <LL_RCC_LSE_Enable>
 8004694:	e00c      	b.n	80046b0 <HAL_RCC_OscConfig+0x468>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b05      	cmp	r3, #5
 800469c:	d104      	bne.n	80046a8 <HAL_RCC_OscConfig+0x460>
 800469e:	f7ff fb2e 	bl	8003cfe <LL_RCC_LSE_EnableBypass>
 80046a2:	f7ff fb0a 	bl	8003cba <LL_RCC_LSE_Enable>
 80046a6:	e003      	b.n	80046b0 <HAL_RCC_OscConfig+0x468>
 80046a8:	f7ff fb18 	bl	8003cdc <LL_RCC_LSE_Disable>
 80046ac:	f7ff fb38 	bl	8003d20 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d014      	beq.n	80046e2 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b8:	f7fe fc20 	bl	8002efc <HAL_GetTick>
 80046bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80046be:	e00a      	b.n	80046d6 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c0:	f7fe fc1c 	bl	8002efc <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e140      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80046d6:	f7ff fb34 	bl	8003d42 <LL_RCC_LSE_IsReady>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0ef      	beq.n	80046c0 <HAL_RCC_OscConfig+0x478>
 80046e0:	e013      	b.n	800470a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e2:	f7fe fc0b 	bl	8002efc <HAL_GetTick>
 80046e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80046e8:	e00a      	b.n	8004700 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fe fc07 	bl	8002efc <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e12b      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004700:	f7ff fb1f 	bl	8003d42 <LL_RCC_LSE_IsReady>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1ef      	bne.n	80046ea <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d02c      	beq.n	8004770 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471a:	2b00      	cmp	r3, #0
 800471c:	d014      	beq.n	8004748 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800471e:	f7ff fa98 	bl	8003c52 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004722:	f7fe fbeb 	bl	8002efc <HAL_GetTick>
 8004726:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800472a:	f7fe fbe7 	bl	8002efc <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e10d      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800473c:	f7ff faab 	bl	8003c96 <LL_RCC_HSI48_IsReady>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0f1      	beq.n	800472a <HAL_RCC_OscConfig+0x4e2>
 8004746:	e013      	b.n	8004770 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004748:	f7ff fa94 	bl	8003c74 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474c:	f7fe fbd6 	bl	8002efc <HAL_GetTick>
 8004750:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004754:	f7fe fbd2 	bl	8002efc <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e0f8      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004766:	f7ff fa96 	bl	8003c96 <LL_RCC_HSI48_IsReady>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1f1      	bne.n	8004754 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80ee 	beq.w	8004956 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800477a:	f7ff fbf4 	bl	8003f66 <LL_RCC_GetSysClkSource>
 800477e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	2b02      	cmp	r3, #2
 800478e:	f040 80af 	bne.w	80048f0 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f003 0203 	and.w	r2, r3, #3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	429a      	cmp	r2, r3
 800479e:	d123      	bne.n	80047e8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d11c      	bne.n	80047e8 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	0a1b      	lsrs	r3, r3, #8
 80047b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d114      	bne.n	80047e8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d10d      	bne.n	80047e8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d106      	bne.n	80047e8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d05d      	beq.n	80048a4 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2b0c      	cmp	r3, #12
 80047ec:	d058      	beq.n	80048a0 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e0ab      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004800:	f7ff fc74 	bl	80040ec <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004804:	f7fe fb7a 	bl	8002efc <HAL_GetTick>
 8004808:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480c:	f7fe fb76 	bl	8002efc <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e09c      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800481e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1ef      	bne.n	800480c <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800482c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	4b3e      	ldr	r3, [pc, #248]	; (800492c <HAL_RCC_OscConfig+0x6e4>)
 8004834:	4013      	ands	r3, r2
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800483e:	4311      	orrs	r1, r2
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004844:	0212      	lsls	r2, r2, #8
 8004846:	4311      	orrs	r1, r2
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800484c:	4311      	orrs	r1, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004852:	4311      	orrs	r1, r2
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004858:	430a      	orrs	r2, r1
 800485a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800485e:	4313      	orrs	r3, r2
 8004860:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004862:	f7ff fc34 	bl	80040ce <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004874:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004876:	f7fe fb41 	bl	8002efc <HAL_GetTick>
 800487a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487e:	f7fe fb3d 	bl	8002efc <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e063      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0ef      	beq.n	800487e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800489e:	e05a      	b.n	8004956 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e059      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d151      	bne.n	8004956 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80048b2:	f7ff fc0c 	bl	80040ce <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048c6:	f7fe fb19 	bl	8002efc <HAL_GetTick>
 80048ca:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ce:	f7fe fb15 	bl	8002efc <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e03b      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0ef      	beq.n	80048ce <HAL_RCC_OscConfig+0x686>
 80048ee:	e032      	b.n	8004956 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	2b0c      	cmp	r3, #12
 80048f4:	d02d      	beq.n	8004952 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f6:	f7ff fbf9 	bl	80040ec <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80048fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004904:	f023 0303 	bic.w	r3, r3, #3
 8004908:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800490a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004914:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491e:	f7fe faed 	bl	8002efc <HAL_GetTick>
 8004922:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004924:	e00d      	b.n	8004942 <HAL_RCC_OscConfig+0x6fa>
 8004926:	bf00      	nop
 8004928:	58000400 	.word	0x58000400
 800492c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004930:	f7fe fae4 	bl	8002efc <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e00a      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1ef      	bne.n	8004930 <HAL_RCC_OscConfig+0x6e8>
 8004950:	e001      	b.n	8004956 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3734      	adds	r7, #52	; 0x34
 800495c:	46bd      	mov	sp, r7
 800495e:	bd90      	pop	{r4, r7, pc}

08004960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e12d      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004974:	4b98      	ldr	r3, [pc, #608]	; (8004bd8 <HAL_RCC_ClockConfig+0x278>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d91b      	bls.n	80049ba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004982:	4b95      	ldr	r3, [pc, #596]	; (8004bd8 <HAL_RCC_ClockConfig+0x278>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f023 0207 	bic.w	r2, r3, #7
 800498a:	4993      	ldr	r1, [pc, #588]	; (8004bd8 <HAL_RCC_ClockConfig+0x278>)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	4313      	orrs	r3, r2
 8004990:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004992:	f7fe fab3 	bl	8002efc <HAL_GetTick>
 8004996:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004998:	e008      	b.n	80049ac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800499a:	f7fe faaf 	bl	8002efc <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e111      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ac:	4b8a      	ldr	r3, [pc, #552]	; (8004bd8 <HAL_RCC_ClockConfig+0x278>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d1ef      	bne.n	800499a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d016      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff fad7 	bl	8003f7e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049d0:	f7fe fa94 	bl	8002efc <HAL_GetTick>
 80049d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049d8:	f7fe fa90 	bl	8002efc <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e0f2      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80049ea:	f7ff fbd1 	bl	8004190 <LL_RCC_IsActiveFlag_HPRE>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0f1      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0320 	and.w	r3, r3, #32
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d016      	beq.n	8004a2e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff face 	bl	8003fa6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a0a:	f7fe fa77 	bl	8002efc <HAL_GetTick>
 8004a0e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a12:	f7fe fa73 	bl	8002efc <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e0d5      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004a24:	f7ff fbc6 	bl	80041b4 <LL_RCC_IsActiveFlag_C2HPRE>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0f1      	beq.n	8004a12 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d016      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff fac7 	bl	8003fd2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a44:	f7fe fa5a 	bl	8002efc <HAL_GetTick>
 8004a48:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a4c:	f7fe fa56 	bl	8002efc <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e0b8      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004a5e:	f7ff fbbc 	bl	80041da <LL_RCC_IsActiveFlag_SHDHPRE>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f1      	beq.n	8004a4c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d016      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff fac1 	bl	8004000 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a7e:	f7fe fa3d 	bl	8002efc <HAL_GetTick>
 8004a82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004a84:	e008      	b.n	8004a98 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a86:	f7fe fa39 	bl	8002efc <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e09b      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004a98:	f7ff fbb2 	bl	8004200 <LL_RCC_IsActiveFlag_PPRE1>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0f1      	beq.n	8004a86 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d017      	beq.n	8004ade <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff fab7 	bl	8004028 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004aba:	f7fe fa1f 	bl	8002efc <HAL_GetTick>
 8004abe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ac2:	f7fe fa1b 	bl	8002efc <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e07d      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004ad4:	f7ff fba6 	bl	8004224 <LL_RCC_IsActiveFlag_PPRE2>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f1      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d043      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d106      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004af2:	f7ff f857 	bl	8003ba4 <LL_RCC_HSE_IsReady>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d11e      	bne.n	8004b3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e067      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d106      	bne.n	8004b16 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004b08:	f7ff faff 	bl	800410a <LL_RCC_PLL_IsReady>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d113      	bne.n	8004b3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e05c      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004b1e:	f7ff f9bf 	bl	8003ea0 <LL_RCC_MSI_IsReady>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d108      	bne.n	8004b3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e051      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004b2c:	f7ff f86a 	bl	8003c04 <LL_RCC_HSI_IsReady>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e04a      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff f9fd 	bl	8003f3e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b44:	f7fe f9da 	bl	8002efc <HAL_GetTick>
 8004b48:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4a:	e00a      	b.n	8004b62 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b4c:	f7fe f9d6 	bl	8002efc <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e036      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b62:	f7ff fa00 	bl	8003f66 <LL_RCC_GetSysClkSource>
 8004b66:	4602      	mov	r2, r0
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d1ec      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b72:	4b19      	ldr	r3, [pc, #100]	; (8004bd8 <HAL_RCC_ClockConfig+0x278>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d21b      	bcs.n	8004bb8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b80:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <HAL_RCC_ClockConfig+0x278>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f023 0207 	bic.w	r2, r3, #7
 8004b88:	4913      	ldr	r1, [pc, #76]	; (8004bd8 <HAL_RCC_ClockConfig+0x278>)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b90:	f7fe f9b4 	bl	8002efc <HAL_GetTick>
 8004b94:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004b98:	f7fe f9b0 	bl	8002efc <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e012      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004baa:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <HAL_RCC_ClockConfig+0x278>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d1ef      	bne.n	8004b98 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004bb8:	f000 f87c 	bl	8004cb4 <HAL_RCC_GetHCLKFreq>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	4b07      	ldr	r3, [pc, #28]	; (8004bdc <HAL_RCC_ClockConfig+0x27c>)
 8004bc0:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004bc2:	f7fe f9a7 	bl	8002f14 <HAL_GetTickPrio>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fd fcbb 	bl	8002544 <HAL_InitTick>
 8004bce:	4603      	mov	r3, r0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	58004000 	.word	0x58004000
 8004bdc:	20000010 	.word	0x20000010

08004be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be0:	b590      	push	{r4, r7, lr}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004be6:	f7ff f9be 	bl	8003f66 <LL_RCC_GetSysClkSource>
 8004bea:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004bf2:	f7ff f97a 	bl	8003eea <LL_RCC_MSI_GetRange>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	091b      	lsrs	r3, r3, #4
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	4a2a      	ldr	r2, [pc, #168]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	e04a      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d102      	bne.n	8004c14 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c0e:	4b27      	ldr	r3, [pc, #156]	; (8004cac <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	e044      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d10a      	bne.n	8004c30 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004c1a:	f7fe ff93 	bl	8003b44 <LL_RCC_HSE_IsEnabledDiv2>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d102      	bne.n	8004c2a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004c24:	4b21      	ldr	r3, [pc, #132]	; (8004cac <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	e039      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004c2a:	4b21      	ldr	r3, [pc, #132]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	e036      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004c30:	f7ff faa2 	bl	8004178 <LL_RCC_PLL_GetMainSource>
 8004c34:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d002      	beq.n	8004c42 <HAL_RCC_GetSysClockFreq+0x62>
 8004c3c:	2b03      	cmp	r3, #3
 8004c3e:	d003      	beq.n	8004c48 <HAL_RCC_GetSysClockFreq+0x68>
 8004c40:	e00d      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004c42:	4b1a      	ldr	r3, [pc, #104]	; (8004cac <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c44:	60bb      	str	r3, [r7, #8]
        break;
 8004c46:	e015      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004c48:	f7fe ff7c 	bl	8003b44 <LL_RCC_HSE_IsEnabledDiv2>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d102      	bne.n	8004c58 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004c52:	4b16      	ldr	r3, [pc, #88]	; (8004cac <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c54:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004c56:	e00d      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8004c58:	4b15      	ldr	r3, [pc, #84]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c5a:	60bb      	str	r3, [r7, #8]
        break;
 8004c5c:	e00a      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004c5e:	f7ff f944 	bl	8003eea <LL_RCC_MSI_GetRange>
 8004c62:	4603      	mov	r3, r0
 8004c64:	091b      	lsrs	r3, r3, #4
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	4a0f      	ldr	r2, [pc, #60]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c70:	60bb      	str	r3, [r7, #8]
        break;
 8004c72:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004c74:	f7ff fa5b 	bl	800412e <LL_RCC_PLL_GetN>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	fb03 f402 	mul.w	r4, r3, r2
 8004c80:	f7ff fa6e 	bl	8004160 <LL_RCC_PLL_GetDivider>
 8004c84:	4603      	mov	r3, r0
 8004c86:	091b      	lsrs	r3, r3, #4
 8004c88:	3301      	adds	r3, #1
 8004c8a:	fbb4 f4f3 	udiv	r4, r4, r3
 8004c8e:	f7ff fa5b 	bl	8004148 <LL_RCC_PLL_GetR>
 8004c92:	4603      	mov	r3, r0
 8004c94:	0f5b      	lsrs	r3, r3, #29
 8004c96:	3301      	adds	r3, #1
 8004c98:	fbb4 f3f3 	udiv	r3, r4, r3
 8004c9c:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd90      	pop	{r4, r7, pc}
 8004ca8:	08012820 	.word	0x08012820
 8004cac:	00f42400 	.word	0x00f42400
 8004cb0:	01e84800 	.word	0x01e84800

08004cb4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cb4:	b598      	push	{r3, r4, r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004cb8:	f7ff ff92 	bl	8004be0 <HAL_RCC_GetSysClockFreq>
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	f7ff f9c7 	bl	8004050 <LL_RCC_GetAHBPrescaler>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	091b      	lsrs	r3, r3, #4
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	4a03      	ldr	r2, [pc, #12]	; (8004cd8 <HAL_RCC_GetHCLKFreq+0x24>)
 8004ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	bd98      	pop	{r3, r4, r7, pc}
 8004cd8:	080127c0 	.word	0x080127c0

08004cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cdc:	b598      	push	{r3, r4, r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004ce0:	f7ff ffe8 	bl	8004cb4 <HAL_RCC_GetHCLKFreq>
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	f7ff f9da 	bl	800409e <LL_RCC_GetAPB1Prescaler>
 8004cea:	4603      	mov	r3, r0
 8004cec:	0a1b      	lsrs	r3, r3, #8
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	4a04      	ldr	r2, [pc, #16]	; (8004d04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cf8:	f003 031f 	and.w	r3, r3, #31
 8004cfc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	bd98      	pop	{r3, r4, r7, pc}
 8004d04:	08012800 	.word	0x08012800

08004d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d08:	b598      	push	{r3, r4, r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004d0c:	f7ff ffd2 	bl	8004cb4 <HAL_RCC_GetHCLKFreq>
 8004d10:	4604      	mov	r4, r0
 8004d12:	f7ff f9d0 	bl	80040b6 <LL_RCC_GetAPB2Prescaler>
 8004d16:	4603      	mov	r3, r0
 8004d18:	0adb      	lsrs	r3, r3, #11
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	4a04      	ldr	r2, [pc, #16]	; (8004d30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d24:	f003 031f 	and.w	r3, r3, #31
 8004d28:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	bd98      	pop	{r3, r4, r7, pc}
 8004d30:	08012800 	.word	0x08012800

08004d34 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	226f      	movs	r2, #111	; 0x6f
 8004d42:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8004d44:	f7ff f90f 	bl	8003f66 <LL_RCC_GetSysClkSource>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8004d4e:	f7ff f97f 	bl	8004050 <LL_RCC_GetAHBPrescaler>
 8004d52:	4602      	mov	r2, r0
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8004d58:	f7ff f9a1 	bl	800409e <LL_RCC_GetAPB1Prescaler>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8004d62:	f7ff f9a8 	bl	80040b6 <LL_RCC_GetAPB2Prescaler>
 8004d66:	4602      	mov	r2, r0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8004d6c:	f7ff f97c 	bl	8004068 <LL_C2_RCC_GetAHBPrescaler>
 8004d70:	4602      	mov	r2, r0
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8004d76:	f7ff f984 	bl	8004082 <LL_RCC_GetAHB4Prescaler>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004d80:	4b04      	ldr	r3, [pc, #16]	; (8004d94 <HAL_RCC_GetClockConfig+0x60>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0207 	and.w	r2, r3, #7
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	601a      	str	r2, [r3, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	58004000 	.word	0x58004000

08004d98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004d98:	b590      	push	{r4, r7, lr}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2bb0      	cmp	r3, #176	; 0xb0
 8004da4:	d903      	bls.n	8004dae <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004da6:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	e007      	b.n	8004dbe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	091b      	lsrs	r3, r3, #4
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	4a11      	ldr	r2, [pc, #68]	; (8004dfc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dbc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004dbe:	f7ff f960 	bl	8004082 <LL_RCC_GetAHB4Prescaler>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	091b      	lsrs	r3, r3, #4
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	4a0d      	ldr	r2, [pc, #52]	; (8004e00 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4a0a      	ldr	r2, [pc, #40]	; (8004e04 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8004de0:	0c9c      	lsrs	r4, r3, #18
 8004de2:	f7fe fea1 	bl	8003b28 <HAL_PWREx_GetVoltageRange>
 8004de6:	4603      	mov	r3, r0
 8004de8:	4619      	mov	r1, r3
 8004dea:	4620      	mov	r0, r4
 8004dec:	f000 f80c 	bl	8004e08 <RCC_SetFlashLatency>
 8004df0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd90      	pop	{r4, r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	08012820 	.word	0x08012820
 8004e00:	080127c0 	.word	0x080127c0
 8004e04:	431bde83 	.word	0x431bde83

08004e08 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004e08:	b590      	push	{r4, r7, lr}
 8004e0a:	b093      	sub	sp, #76	; 0x4c
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004e12:	4b39      	ldr	r3, [pc, #228]	; (8004ef8 <RCC_SetFlashLatency+0xf0>)
 8004e14:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004e18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004e1e:	4a37      	ldr	r2, [pc, #220]	; (8004efc <RCC_SetFlashLatency+0xf4>)
 8004e20:	f107 031c 	add.w	r3, r7, #28
 8004e24:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004e2a:	4b35      	ldr	r3, [pc, #212]	; (8004f00 <RCC_SetFlashLatency+0xf8>)
 8004e2c:	f107 040c 	add.w	r4, r7, #12
 8004e30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004e36:	2300      	movs	r3, #0
 8004e38:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e40:	d11c      	bne.n	8004e7c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004e42:	2300      	movs	r3, #0
 8004e44:	643b      	str	r3, [r7, #64]	; 0x40
 8004e46:	e015      	b.n	8004e74 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e50:	4413      	add	r3, r2
 8004e52:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d808      	bhi.n	8004e6e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e64:	4413      	add	r3, r2
 8004e66:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004e6a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004e6c:	e022      	b.n	8004eb4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e70:	3301      	adds	r3, #1
 8004e72:	643b      	str	r3, [r7, #64]	; 0x40
 8004e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d9e6      	bls.n	8004e48 <RCC_SetFlashLatency+0x40>
 8004e7a:	e01b      	b.n	8004eb4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e80:	e015      	b.n	8004eae <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d808      	bhi.n	8004ea8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004ea4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004ea6:	e005      	b.n	8004eb4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eaa:	3301      	adds	r3, #1
 8004eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d9e6      	bls.n	8004e82 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004eb4:	4b13      	ldr	r3, [pc, #76]	; (8004f04 <RCC_SetFlashLatency+0xfc>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f023 0207 	bic.w	r2, r3, #7
 8004ebc:	4911      	ldr	r1, [pc, #68]	; (8004f04 <RCC_SetFlashLatency+0xfc>)
 8004ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ec4:	f7fe f81a 	bl	8002efc <HAL_GetTick>
 8004ec8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004eca:	e008      	b.n	8004ede <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ecc:	f7fe f816 	bl	8002efc <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e007      	b.n	8004eee <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004ede:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <RCC_SetFlashLatency+0xfc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d1ef      	bne.n	8004ecc <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	374c      	adds	r7, #76	; 0x4c
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd90      	pop	{r4, r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	080118ec 	.word	0x080118ec
 8004efc:	080118fc 	.word	0x080118fc
 8004f00:	08011908 	.word	0x08011908
 8004f04:	58004000 	.word	0x58004000

08004f08 <LL_RCC_LSE_IsEnabled>:
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <LL_RCC_LSE_IsEnabled+0x18>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e000      	b.n	8004f22 <LL_RCC_LSE_IsEnabled+0x1a>
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <LL_RCC_LSE_IsReady>:
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d101      	bne.n	8004f44 <LL_RCC_LSE_IsReady+0x18>
 8004f40:	2301      	movs	r3, #1
 8004f42:	e000      	b.n	8004f46 <LL_RCC_LSE_IsReady+0x1a>
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <LL_RCC_SetRFWKPClockSource>:
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <LL_RCC_SetSMPSClockSource>:
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	f023 0203 	bic.w	r2, r3, #3
 8004f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <LL_RCC_SetSMPSPrescaler>:
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <LL_RCC_SetUSARTClockSource>:
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fdc:	f023 0203 	bic.w	r2, r3, #3
 8004fe0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <LL_RCC_SetLPUARTClockSource>:
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005008:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800500c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <LL_RCC_SetI2CClockSource>:
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800502c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005030:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	091b      	lsrs	r3, r3, #4
 8005038:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800503c:	43db      	mvns	r3, r3
 800503e:	401a      	ands	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005048:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800504c:	4313      	orrs	r3, r2
 800504e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <LL_RCC_SetLPTIMClockSource>:
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800506a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	0c1b      	lsrs	r3, r3, #16
 8005072:	041b      	lsls	r3, r3, #16
 8005074:	43db      	mvns	r3, r3
 8005076:	401a      	ands	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	041b      	lsls	r3, r3, #16
 800507c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <LL_RCC_SetSAIClockSource>:
{
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800509a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800509e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <LL_RCC_SetRNGClockSource>:
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80050c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ce:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80050d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4313      	orrs	r3, r2
 80050da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <LL_RCC_SetCLK48ClockSource>:
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80050f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <LL_RCC_SetUSBClockSource>:
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7ff ffe3 	bl	80050ea <LL_RCC_SetCLK48ClockSource>
}
 8005124:	bf00      	nop
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <LL_RCC_SetADCClockSource>:
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005140:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4313      	orrs	r3, r2
 8005148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <LL_RCC_SetRTCClockSource>:
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800516c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <LL_RCC_GetRTCClockSource>:
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005190:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005194:	4618      	mov	r0, r3
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <LL_RCC_ForceBackupDomainReset>:
{
 800519e:	b480      	push	{r7}
 80051a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80051a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80051b6:	bf00      	nop
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <LL_RCC_ReleaseBackupDomainReset>:
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80051c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80051d8:	bf00      	nop
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <LL_RCC_PLLSAI1_Enable>:
{
 80051e2:	b480      	push	{r7}
 80051e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80051e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051f4:	6013      	str	r3, [r2, #0]
}
 80051f6:	bf00      	nop
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <LL_RCC_PLLSAI1_Disable>:
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800520e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005212:	6013      	str	r3, [r2, #0]
}
 8005214:	bf00      	nop
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <LL_RCC_PLLSAI1_IsReady>:
{
 800521e:	b480      	push	{r7}
 8005220:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800522c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005230:	d101      	bne.n	8005236 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b088      	sub	sp, #32
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800524a:	2300      	movs	r3, #0
 800524c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800524e:	2300      	movs	r3, #0
 8005250:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525a:	2b00      	cmp	r3, #0
 800525c:	d033      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005266:	d00c      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800526c:	d802      	bhi.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800526e:	2b00      	cmp	r3, #0
 8005270:	d010      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005272:	e017      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005274:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005278:	d017      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x68>
 800527a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800527e:	d016      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8005280:	e010      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800528c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005290:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005292:	e00d      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3304      	adds	r3, #4
 8005298:	4618      	mov	r0, r3
 800529a:	f000 f947 	bl	800552c <RCCEx_PLLSAI1_ConfigNP>
 800529e:	4603      	mov	r3, r0
 80052a0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80052a2:	e005      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	77fb      	strb	r3, [r7, #31]
        break;
 80052a8:	e002      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80052aa:	bf00      	nop
 80052ac:	e000      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80052ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052b0:	7ffb      	ldrb	r3, [r7, #31]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d105      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff fee9 	bl	8005092 <LL_RCC_SetSAIClockSource>
 80052c0:	e001      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c2:	7ffb      	ldrb	r3, [r7, #31]
 80052c4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d046      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80052d2:	f7ff ff57 	bl	8005184 <LL_RCC_GetRTCClockSource>
 80052d6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d03c      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80052e2:	f7fe fc11 	bl	8003b08 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d105      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff ff31 	bl	8005158 <LL_RCC_SetRTCClockSource>
 80052f6:	e02e      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80052f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005300:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005302:	f7ff ff4c 	bl	800519e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005306:	f7ff ff5b 	bl	80051c0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005318:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005322:	f7ff fdf1 	bl	8004f08 <LL_RCC_LSE_IsEnabled>
 8005326:	4603      	mov	r3, r0
 8005328:	2b01      	cmp	r3, #1
 800532a:	d114      	bne.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800532c:	f7fd fde6 	bl	8002efc <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005332:	e00b      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005334:	f7fd fde2 	bl	8002efc <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005342:	4293      	cmp	r3, r2
 8005344:	d902      	bls.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	77fb      	strb	r3, [r7, #31]
              break;
 800534a:	e004      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800534c:	f7ff fdee 	bl	8004f2c <LL_RCC_LSE_IsReady>
 8005350:	4603      	mov	r3, r0
 8005352:	2b01      	cmp	r3, #1
 8005354:	d1ee      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005356:	7ffb      	ldrb	r3, [r7, #31]
 8005358:	77bb      	strb	r3, [r7, #30]
 800535a:	e001      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535c:	7ffb      	ldrb	r3, [r7, #31]
 800535e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d004      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff fe2b 	bl	8004fcc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d004      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff fe36 	bl	8004ff8 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	2b00      	cmp	r3, #0
 8005396:	d004      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff fe5e 	bl	800505e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d004      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff fe53 	bl	800505e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d004      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff fe2b 	bl	8005024 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d004      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	4618      	mov	r0, r3
 80053e0:	f7ff fe20 	bl	8005024 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d022      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff fe8e 	bl	8005116 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005402:	d107      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800540e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005412:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005418:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800541c:	d10b      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3304      	adds	r3, #4
 8005422:	4618      	mov	r0, r3
 8005424:	f000 f8dd 	bl	80055e2 <RCCEx_PLLSAI1_ConfigNQ>
 8005428:	4603      	mov	r3, r0
 800542a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800542c:	7ffb      	ldrb	r3, [r7, #31]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8005432:	7ffb      	ldrb	r3, [r7, #31]
 8005434:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800543e:	2b00      	cmp	r3, #0
 8005440:	d02b      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544a:	d008      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005454:	d003      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545a:	2b00      	cmp	r3, #0
 800545c:	d105      	bne.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x228>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fe2b 	bl	80050be <LL_RCC_SetRNGClockSource>
 8005468:	e00a      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	2000      	movs	r0, #0
 8005476:	f7ff fe22 	bl	80050be <LL_RCC_SetRNGClockSource>
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f7ff fe35 	bl	80050ea <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005484:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005488:	d107      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800548a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005494:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005498:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d022      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff fe3e 	bl	800512c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054b8:	d107      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80054ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054d2:	d10b      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3304      	adds	r3, #4
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 f8dd 	bl	8005698 <RCCEx_PLLSAI1_ConfigNR>
 80054de:	4603      	mov	r3, r0
 80054e0:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80054e2:	7ffb      	ldrb	r3, [r7, #31]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 80054e8:	7ffb      	ldrb	r3, [r7, #31]
 80054ea:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d004      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff fd27 	bl	8004f50 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d009      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff fd46 	bl	8004fa4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff fd2d 	bl	8004f7c <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8005522:	7fbb      	ldrb	r3, [r7, #30]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3720      	adds	r7, #32
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005534:	2300      	movs	r3, #0
 8005536:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005538:	f7ff fe62 	bl	8005200 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800553c:	f7fd fcde 	bl	8002efc <HAL_GetTick>
 8005540:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005542:	e009      	b.n	8005558 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005544:	f7fd fcda 	bl	8002efc <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d902      	bls.n	8005558 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	73fb      	strb	r3, [r7, #15]
      break;
 8005556:	e004      	b.n	8005562 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005558:	f7ff fe61 	bl	800521e <LL_RCC_PLLSAI1_IsReady>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f0      	bne.n	8005544 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d137      	bne.n	80055d8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	021b      	lsls	r3, r3, #8
 8005578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800557c:	4313      	orrs	r3, r2
 800557e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005592:	4313      	orrs	r3, r2
 8005594:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005596:	f7ff fe24 	bl	80051e2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800559a:	f7fd fcaf 	bl	8002efc <HAL_GetTick>
 800559e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80055a0:	e009      	b.n	80055b6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055a2:	f7fd fcab 	bl	8002efc <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d902      	bls.n	80055b6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	73fb      	strb	r3, [r7, #15]
        break;
 80055b4:	e004      	b.n	80055c0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80055b6:	f7ff fe32 	bl	800521e <LL_RCC_PLLSAI1_IsReady>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d1f0      	bne.n	80055a2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d108      	bne.n	80055d8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80055c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ca:	691a      	ldr	r2, [r3, #16]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055d4:	4313      	orrs	r3, r2
 80055d6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80055ee:	f7ff fe07 	bl	8005200 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055f2:	f7fd fc83 	bl	8002efc <HAL_GetTick>
 80055f6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80055f8:	e009      	b.n	800560e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055fa:	f7fd fc7f 	bl	8002efc <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d902      	bls.n	800560e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	73fb      	strb	r3, [r7, #15]
      break;
 800560c:	e004      	b.n	8005618 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800560e:	f7ff fe06 	bl	800521e <LL_RCC_PLLSAI1_IsReady>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1f0      	bne.n	80055fa <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d137      	bne.n	800568e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800561e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	021b      	lsls	r3, r3, #8
 800562e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005632:	4313      	orrs	r3, r2
 8005634:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005648:	4313      	orrs	r3, r2
 800564a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800564c:	f7ff fdc9 	bl	80051e2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005650:	f7fd fc54 	bl	8002efc <HAL_GetTick>
 8005654:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005656:	e009      	b.n	800566c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005658:	f7fd fc50 	bl	8002efc <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d902      	bls.n	800566c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	73fb      	strb	r3, [r7, #15]
        break;
 800566a:	e004      	b.n	8005676 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800566c:	f7ff fdd7 	bl	800521e <LL_RCC_PLLSAI1_IsReady>
 8005670:	4603      	mov	r3, r0
 8005672:	2b01      	cmp	r3, #1
 8005674:	d1f0      	bne.n	8005658 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005676:	7bfb      	ldrb	r3, [r7, #15]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d108      	bne.n	800568e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800567c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005680:	691a      	ldr	r2, [r3, #16]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800568a:	4313      	orrs	r3, r2
 800568c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800568e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80056a4:	f7ff fdac 	bl	8005200 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80056a8:	f7fd fc28 	bl	8002efc <HAL_GetTick>
 80056ac:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80056ae:	e009      	b.n	80056c4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056b0:	f7fd fc24 	bl	8002efc <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d902      	bls.n	80056c4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	73fb      	strb	r3, [r7, #15]
      break;
 80056c2:	e004      	b.n	80056ce <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80056c4:	f7ff fdab 	bl	800521e <LL_RCC_PLLSAI1_IsReady>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1f0      	bne.n	80056b0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d137      	bne.n	8005744 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80056d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	021b      	lsls	r3, r3, #8
 80056e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056e8:	4313      	orrs	r3, r2
 80056ea:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80056ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056fe:	4313      	orrs	r3, r2
 8005700:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005702:	f7ff fd6e 	bl	80051e2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005706:	f7fd fbf9 	bl	8002efc <HAL_GetTick>
 800570a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800570c:	e009      	b.n	8005722 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800570e:	f7fd fbf5 	bl	8002efc <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d902      	bls.n	8005722 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	73fb      	strb	r3, [r7, #15]
        break;
 8005720:	e004      	b.n	800572c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005722:	f7ff fd7c 	bl	800521e <LL_RCC_PLLSAI1_IsReady>
 8005726:	4603      	mov	r3, r0
 8005728:	2b01      	cmp	r3, #1
 800572a:	d1f0      	bne.n	800570e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d108      	bne.n	8005744 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005736:	691a      	ldr	r2, [r3, #16]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005740:	4313      	orrs	r3, r2
 8005742:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005744:	7bfb      	ldrb	r3, [r7, #15]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b082      	sub	sp, #8
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e090      	b.n	8005882 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d106      	bne.n	800577a <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7fc fe7d 	bl	8002474 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2202      	movs	r2, #2
 800577e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	22ca      	movs	r2, #202	; 0xca
 8005788:	625a      	str	r2, [r3, #36]	; 0x24
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2253      	movs	r2, #83	; 0x53
 8005790:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f89f 	bl	80058d6 <RTC_EnterInitMode>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d009      	beq.n	80057b2 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	22ff      	movs	r2, #255	; 0xff
 80057a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2204      	movs	r2, #4
 80057aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e067      	b.n	8005882 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6812      	ldr	r2, [r2, #0]
 80057bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80057c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6899      	ldr	r1, [r3, #8]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	431a      	orrs	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	431a      	orrs	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	68d2      	ldr	r2, [r2, #12]
 80057ec:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6919      	ldr	r1, [r3, #16]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	041a      	lsls	r2, r3, #16
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005810:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0203 	bic.w	r2, r2, #3
 8005820:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	69da      	ldr	r2, [r3, #28]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	431a      	orrs	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f003 0320 	and.w	r3, r3, #32
 8005844:	2b00      	cmp	r3, #0
 8005846:	d113      	bne.n	8005870 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f81e 	bl	800588a <HAL_RTC_WaitForSynchro>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00d      	beq.n	8005870 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	22ff      	movs	r2, #255	; 0xff
 800585a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2204      	movs	r2, #4
 8005860:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e008      	b.n	8005882 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	22ff      	movs	r2, #255	; 0xff
 8005876:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8005880:	2300      	movs	r3, #0
  }
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b084      	sub	sp, #16
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058a0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80058a2:	f7fd fb2b 	bl	8002efc <HAL_GetTick>
 80058a6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80058a8:	e009      	b.n	80058be <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80058aa:	f7fd fb27 	bl	8002efc <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058b8:	d901      	bls.n	80058be <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e007      	b.n	80058ce <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0320 	and.w	r3, r3, #32
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0ee      	beq.n	80058aa <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b084      	sub	sp, #16
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d119      	bne.n	8005920 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f04f 32ff 	mov.w	r2, #4294967295
 80058f4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80058f6:	f7fd fb01 	bl	8002efc <HAL_GetTick>
 80058fa:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80058fc:	e009      	b.n	8005912 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80058fe:	f7fd fafd 	bl	8002efc <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800590c:	d901      	bls.n	8005912 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e007      	b.n	8005922 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0ee      	beq.n	80058fe <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b082      	sub	sp, #8
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e049      	b.n	80059d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d106      	bne.n	8005956 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f841 	bl	80059d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2202      	movs	r2, #2
 800595a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3304      	adds	r3, #4
 8005966:	4619      	mov	r1, r3
 8005968:	4610      	mov	r0, r2
 800596a:	f000 f9d5 	bl	8005d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d001      	beq.n	8005a04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e036      	b.n	8005a72 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f042 0201 	orr.w	r2, r2, #1
 8005a1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a17      	ldr	r2, [pc, #92]	; (8005a80 <HAL_TIM_Base_Start_IT+0x94>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d004      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x44>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a2e:	d115      	bne.n	8005a5c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	4b13      	ldr	r3, [pc, #76]	; (8005a84 <HAL_TIM_Base_Start_IT+0x98>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b06      	cmp	r3, #6
 8005a40:	d015      	beq.n	8005a6e <HAL_TIM_Base_Start_IT+0x82>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a48:	d011      	beq.n	8005a6e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f042 0201 	orr.w	r2, r2, #1
 8005a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5a:	e008      	b.n	8005a6e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0201 	orr.w	r2, r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	e000      	b.n	8005a70 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	40012c00 	.word	0x40012c00
 8005a84:	00010007 	.word	0x00010007

08005a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d122      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d11b      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0202 	mvn.w	r2, #2
 8005ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f905 	bl	8005cda <HAL_TIM_IC_CaptureCallback>
 8005ad0:	e005      	b.n	8005ade <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f8f7 	bl	8005cc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f908 	bl	8005cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 0304 	and.w	r3, r3, #4
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	d122      	bne.n	8005b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d11b      	bne.n	8005b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f06f 0204 	mvn.w	r2, #4
 8005b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f8db 	bl	8005cda <HAL_TIM_IC_CaptureCallback>
 8005b24:	e005      	b.n	8005b32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f8cd 	bl	8005cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f8de 	bl	8005cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f003 0308 	and.w	r3, r3, #8
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d122      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0308 	and.w	r3, r3, #8
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d11b      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0208 	mvn.w	r2, #8
 8005b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2204      	movs	r2, #4
 8005b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f8b1 	bl	8005cda <HAL_TIM_IC_CaptureCallback>
 8005b78:	e005      	b.n	8005b86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f8a3 	bl	8005cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f8b4 	bl	8005cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f003 0310 	and.w	r3, r3, #16
 8005b96:	2b10      	cmp	r3, #16
 8005b98:	d122      	bne.n	8005be0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	2b10      	cmp	r3, #16
 8005ba6:	d11b      	bne.n	8005be0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f06f 0210 	mvn.w	r2, #16
 8005bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2208      	movs	r2, #8
 8005bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f887 	bl	8005cda <HAL_TIM_IC_CaptureCallback>
 8005bcc:	e005      	b.n	8005bda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f879 	bl	8005cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f88a 	bl	8005cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d10e      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d107      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f06f 0201 	mvn.w	r2, #1
 8005c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7fc fbc2 	bl	8002390 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c16:	2b80      	cmp	r3, #128	; 0x80
 8005c18:	d10e      	bne.n	8005c38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c24:	2b80      	cmp	r3, #128	; 0x80
 8005c26:	d107      	bne.n	8005c38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f8de 	bl	8005df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c46:	d10e      	bne.n	8005c66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c52:	2b80      	cmp	r3, #128	; 0x80
 8005c54:	d107      	bne.n	8005c66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f8d1 	bl	8005e08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c70:	2b40      	cmp	r3, #64	; 0x40
 8005c72:	d10e      	bne.n	8005c92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7e:	2b40      	cmp	r3, #64	; 0x40
 8005c80:	d107      	bne.n	8005c92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f838 	bl	8005d02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f003 0320 	and.w	r3, r3, #32
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	d10e      	bne.n	8005cbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f003 0320 	and.w	r3, r3, #32
 8005caa:	2b20      	cmp	r3, #32
 8005cac:	d107      	bne.n	8005cbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f06f 0220 	mvn.w	r2, #32
 8005cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f891 	bl	8005de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cbe:	bf00      	nop
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
	...

08005d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a2a      	ldr	r2, [pc, #168]	; (8005dd4 <TIM_Base_SetConfig+0xbc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_Base_SetConfig+0x20>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d36:	d108      	bne.n	8005d4a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a21      	ldr	r2, [pc, #132]	; (8005dd4 <TIM_Base_SetConfig+0xbc>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00b      	beq.n	8005d6a <TIM_Base_SetConfig+0x52>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d58:	d007      	beq.n	8005d6a <TIM_Base_SetConfig+0x52>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a1e      	ldr	r2, [pc, #120]	; (8005dd8 <TIM_Base_SetConfig+0xc0>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d003      	beq.n	8005d6a <TIM_Base_SetConfig+0x52>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a1d      	ldr	r2, [pc, #116]	; (8005ddc <TIM_Base_SetConfig+0xc4>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d108      	bne.n	8005d7c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a0c      	ldr	r2, [pc, #48]	; (8005dd4 <TIM_Base_SetConfig+0xbc>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d007      	beq.n	8005db8 <TIM_Base_SetConfig+0xa0>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a0b      	ldr	r2, [pc, #44]	; (8005dd8 <TIM_Base_SetConfig+0xc0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d003      	beq.n	8005db8 <TIM_Base_SetConfig+0xa0>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a0a      	ldr	r2, [pc, #40]	; (8005ddc <TIM_Base_SetConfig+0xc4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d103      	bne.n	8005dc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	691a      	ldr	r2, [r3, #16]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	615a      	str	r2, [r3, #20]
}
 8005dc6:	bf00      	nop
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40012c00 	.word	0x40012c00
 8005dd8:	40014400 	.word	0x40014400
 8005ddc:	40014800 	.word	0x40014800

08005de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <LL_RCC_GetUSARTClockSource>:
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4013      	ands	r3, r2
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <LL_RCC_GetLPUARTClockSource>:
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4013      	ands	r3, r2
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e042      	b.n	8005ef4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d106      	bne.n	8005e86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7fc ff05 	bl	8002c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2224      	movs	r2, #36	; 0x24
 8005e8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0201 	bic.w	r2, r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fac4 	bl	800642c <UART_SetConfig>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d101      	bne.n	8005eae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e022      	b.n	8005ef4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fcc6 	bl	8006848 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005eda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0201 	orr.w	r2, r2, #1
 8005eea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fd4d 	bl	800698c <UART_CheckIdleState>
 8005ef2:	4603      	mov	r3, r0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	4613      	mov	r3, r2
 8005f08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d168      	bne.n	8005fe6 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <HAL_UART_Transmit_IT+0x24>
 8005f1a:	88fb      	ldrh	r3, [r7, #6]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e061      	b.n	8005fe8 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <HAL_UART_Transmit_IT+0x36>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e05a      	b.n	8005fe8 <HAL_UART_Transmit_IT+0xec>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	88fa      	ldrh	r2, [r7, #6]
 8005f44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	88fa      	ldrh	r2, [r7, #6]
 8005f4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2221      	movs	r2, #33	; 0x21
 8005f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f6e:	d11c      	bne.n	8005faa <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f78:	d107      	bne.n	8005f8a <HAL_UART_Transmit_IT+0x8e>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d103      	bne.n	8005f8a <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4a1b      	ldr	r2, [pc, #108]	; (8005ff4 <HAL_UART_Transmit_IT+0xf8>)
 8005f86:	671a      	str	r2, [r3, #112]	; 0x70
 8005f88:	e002      	b.n	8005f90 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	4a1a      	ldr	r2, [pc, #104]	; (8005ff8 <HAL_UART_Transmit_IT+0xfc>)
 8005f8e:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689a      	ldr	r2, [r3, #8]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005fa6:	609a      	str	r2, [r3, #8]
 8005fa8:	e01b      	b.n	8005fe2 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb2:	d107      	bne.n	8005fc4 <HAL_UART_Transmit_IT+0xc8>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d103      	bne.n	8005fc4 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4a0f      	ldr	r2, [pc, #60]	; (8005ffc <HAL_UART_Transmit_IT+0x100>)
 8005fc0:	671a      	str	r2, [r3, #112]	; 0x70
 8005fc2:	e002      	b.n	8005fca <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4a0e      	ldr	r2, [pc, #56]	; (8006000 <HAL_UART_Transmit_IT+0x104>)
 8005fc8:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005fe0:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e000      	b.n	8005fe8 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8005fe6:	2302      	movs	r3, #2
  }
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	08006e47 	.word	0x08006e47
 8005ff8:	08006dad 	.word	0x08006dad
 8005ffc:	08006d2f 	.word	0x08006d2f
 8006000:	08006cbb 	.word	0x08006cbb

08006004 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	4613      	mov	r3, r2
 8006010:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006018:	2b20      	cmp	r3, #32
 800601a:	d168      	bne.n	80060ee <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <HAL_UART_Transmit_DMA+0x24>
 8006022:	88fb      	ldrh	r3, [r7, #6]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e061      	b.n	80060f0 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <HAL_UART_Transmit_DMA+0x36>
 8006036:	2302      	movs	r3, #2
 8006038:	e05a      	b.n	80060f0 <HAL_UART_Transmit_DMA+0xec>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	88fa      	ldrh	r2, [r7, #6]
 800604c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	88fa      	ldrh	r2, [r7, #6]
 8006054:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2221      	movs	r2, #33	; 0x21
 8006064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800606c:	2b00      	cmp	r3, #0
 800606e:	d02c      	beq.n	80060ca <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006074:	4a20      	ldr	r2, [pc, #128]	; (80060f8 <HAL_UART_Transmit_DMA+0xf4>)
 8006076:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800607c:	4a1f      	ldr	r2, [pc, #124]	; (80060fc <HAL_UART_Transmit_DMA+0xf8>)
 800607e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006084:	4a1e      	ldr	r2, [pc, #120]	; (8006100 <HAL_UART_Transmit_DMA+0xfc>)
 8006086:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800608c:	2200      	movs	r2, #0
 800608e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006098:	4619      	mov	r1, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3328      	adds	r3, #40	; 0x28
 80060a0:	461a      	mov	r2, r3
 80060a2:	88fb      	ldrh	r3, [r7, #6]
 80060a4:	f7fd f958 	bl	8003358 <HAL_DMA_Start_IT>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00d      	beq.n	80060ca <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2210      	movs	r2, #16
 80060b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2220      	movs	r2, #32
 80060c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e012      	b.n	80060f0 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2240      	movs	r2, #64	; 0x40
 80060d0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060e8:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	e000      	b.n	80060f0 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80060ee:	2302      	movs	r3, #2
  }
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	08006b9f 	.word	0x08006b9f
 80060fc:	08006bf3 	.word	0x08006bf3
 8006100:	08006c0f 	.word	0x08006c0f

08006104 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006124:	69fa      	ldr	r2, [r7, #28]
 8006126:	f640 030f 	movw	r3, #2063	; 0x80f
 800612a:	4013      	ands	r3, r2
 800612c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d118      	bne.n	8006166 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	f003 0320 	and.w	r3, r3, #32
 800613a:	2b00      	cmp	r3, #0
 800613c:	d013      	beq.n	8006166 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	f003 0320 	and.w	r3, r3, #32
 8006144:	2b00      	cmp	r3, #0
 8006146:	d104      	bne.n	8006152 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 8145 	beq.w	80063e6 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	4798      	blx	r3
      }
      return;
 8006164:	e13f      	b.n	80063e6 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 80e8 	beq.w	800633e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4ba1      	ldr	r3, [pc, #644]	; (80063f8 <HAL_UART_IRQHandler+0x2f4>)
 8006172:	4013      	ands	r3, r2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d105      	bne.n	8006184 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	4ba0      	ldr	r3, [pc, #640]	; (80063fc <HAL_UART_IRQHandler+0x2f8>)
 800617c:	4013      	ands	r3, r2
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 80dd 	beq.w	800633e <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d010      	beq.n	80061b0 <HAL_UART_IRQHandler+0xac>
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00b      	beq.n	80061b0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2201      	movs	r2, #1
 800619e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a6:	f043 0201 	orr.w	r2, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d010      	beq.n	80061dc <HAL_UART_IRQHandler+0xd8>
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00b      	beq.n	80061dc <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2202      	movs	r2, #2
 80061ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d2:	f043 0204 	orr.w	r2, r3, #4
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d010      	beq.n	8006208 <HAL_UART_IRQHandler+0x104>
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00b      	beq.n	8006208 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2204      	movs	r2, #4
 80061f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fe:	f043 0202 	orr.w	r2, r3, #2
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	f003 0308 	and.w	r3, r3, #8
 800620e:	2b00      	cmp	r3, #0
 8006210:	d015      	beq.n	800623e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	f003 0320 	and.w	r3, r3, #32
 8006218:	2b00      	cmp	r3, #0
 800621a:	d104      	bne.n	8006226 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	4b76      	ldr	r3, [pc, #472]	; (80063f8 <HAL_UART_IRQHandler+0x2f4>)
 8006220:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00b      	beq.n	800623e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2208      	movs	r2, #8
 800622c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006234:	f043 0208 	orr.w	r2, r3, #8
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006244:	2b00      	cmp	r3, #0
 8006246:	d011      	beq.n	800626c <HAL_UART_IRQHandler+0x168>
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00c      	beq.n	800626c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800625a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006262:	f043 0220 	orr.w	r2, r3, #32
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 80b9 	beq.w	80063ea <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	f003 0320 	and.w	r3, r3, #32
 800627e:	2b00      	cmp	r3, #0
 8006280:	d011      	beq.n	80062a6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	f003 0320 	and.w	r3, r3, #32
 8006288:	2b00      	cmp	r3, #0
 800628a:	d104      	bne.n	8006296 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d007      	beq.n	80062a6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ac:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b8:	2b40      	cmp	r3, #64	; 0x40
 80062ba:	d004      	beq.n	80062c6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d031      	beq.n	800632a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fc46 	bl	8006b58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d6:	2b40      	cmp	r3, #64	; 0x40
 80062d8:	d123      	bne.n	8006322 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062e8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d013      	beq.n	800631a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062f6:	4a42      	ldr	r2, [pc, #264]	; (8006400 <HAL_UART_IRQHandler+0x2fc>)
 80062f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fd f8a5 	bl	800344e <HAL_DMA_Abort_IT>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d017      	beq.n	800633a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8006314:	4610      	mov	r0, r2
 8006316:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006318:	e00f      	b.n	800633a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f87c 	bl	8006418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006320:	e00b      	b.n	800633a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f878 	bl	8006418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006328:	e007      	b.n	800633a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f874 	bl	8006418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8006338:	e057      	b.n	80063ea <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800633a:	bf00      	nop
    return;
 800633c:	e055      	b.n	80063ea <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00d      	beq.n	8006364 <HAL_UART_IRQHandler+0x260>
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d008      	beq.n	8006364 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800635a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fdde 	bl	8006f1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006362:	e045      	b.n	80063f0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636a:	2b00      	cmp	r3, #0
 800636c:	d012      	beq.n	8006394 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006374:	2b00      	cmp	r3, #0
 8006376:	d104      	bne.n	8006382 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d008      	beq.n	8006394 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006386:	2b00      	cmp	r3, #0
 8006388:	d031      	beq.n	80063ee <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	4798      	blx	r3
    }
    return;
 8006392:	e02c      	b.n	80063ee <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	d008      	beq.n	80063b0 <HAL_UART_IRQHandler+0x2ac>
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fd9e 	bl	8006eea <UART_EndTransmit_IT>
    return;
 80063ae:	e01f      	b.n	80063f0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d008      	beq.n	80063cc <HAL_UART_IRQHandler+0x2c8>
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d003      	beq.n	80063cc <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fdbe 	bl	8006f46 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063ca:	e011      	b.n	80063f0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00c      	beq.n	80063f0 <HAL_UART_IRQHandler+0x2ec>
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	da09      	bge.n	80063f0 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fda8 	bl	8006f32 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063e2:	bf00      	nop
 80063e4:	e004      	b.n	80063f0 <HAL_UART_IRQHandler+0x2ec>
      return;
 80063e6:	bf00      	nop
 80063e8:	e002      	b.n	80063f0 <HAL_UART_IRQHandler+0x2ec>
    return;
 80063ea:	bf00      	nop
 80063ec:	e000      	b.n	80063f0 <HAL_UART_IRQHandler+0x2ec>
    return;
 80063ee:	bf00      	nop
  }
}
 80063f0:	3720      	adds	r7, #32
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	10000001 	.word	0x10000001
 80063fc:	04000120 	.word	0x04000120
 8006400:	08006c8f 	.word	0x08006c8f

08006404 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800642c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006430:	b088      	sub	sp, #32
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	431a      	orrs	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	431a      	orrs	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	4313      	orrs	r3, r2
 8006450:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006456:	69fa      	ldr	r2, [r7, #28]
 8006458:	4313      	orrs	r3, r2
 800645a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	4ba4      	ldr	r3, [pc, #656]	; (80066f4 <UART_SetConfig+0x2c8>)
 8006464:	4013      	ands	r3, r2
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	6812      	ldr	r2, [r2, #0]
 800646a:	69f9      	ldr	r1, [r7, #28]
 800646c:	430b      	orrs	r3, r1
 800646e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a99      	ldr	r2, [pc, #612]	; (80066f8 <UART_SetConfig+0x2cc>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d004      	beq.n	80064a0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	69fa      	ldr	r2, [r7, #28]
 800649c:	4313      	orrs	r3, r2
 800649e:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80064aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6812      	ldr	r2, [r2, #0]
 80064b2:	69f9      	ldr	r1, [r7, #28]
 80064b4:	430b      	orrs	r3, r1
 80064b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064be:	f023 010f 	bic.w	r1, r3, #15
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a8a      	ldr	r2, [pc, #552]	; (80066fc <UART_SetConfig+0x2d0>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d121      	bne.n	800651c <UART_SetConfig+0xf0>
 80064d8:	2003      	movs	r0, #3
 80064da:	f7ff fc9f 	bl	8005e1c <LL_RCC_GetUSARTClockSource>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d817      	bhi.n	8006514 <UART_SetConfig+0xe8>
 80064e4:	a201      	add	r2, pc, #4	; (adr r2, 80064ec <UART_SetConfig+0xc0>)
 80064e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ea:	bf00      	nop
 80064ec:	080064fd 	.word	0x080064fd
 80064f0:	08006509 	.word	0x08006509
 80064f4:	08006503 	.word	0x08006503
 80064f8:	0800650f 	.word	0x0800650f
 80064fc:	2301      	movs	r3, #1
 80064fe:	76fb      	strb	r3, [r7, #27]
 8006500:	e038      	b.n	8006574 <UART_SetConfig+0x148>
 8006502:	2302      	movs	r3, #2
 8006504:	76fb      	strb	r3, [r7, #27]
 8006506:	e035      	b.n	8006574 <UART_SetConfig+0x148>
 8006508:	2304      	movs	r3, #4
 800650a:	76fb      	strb	r3, [r7, #27]
 800650c:	e032      	b.n	8006574 <UART_SetConfig+0x148>
 800650e:	2308      	movs	r3, #8
 8006510:	76fb      	strb	r3, [r7, #27]
 8006512:	e02f      	b.n	8006574 <UART_SetConfig+0x148>
 8006514:	2310      	movs	r3, #16
 8006516:	76fb      	strb	r3, [r7, #27]
 8006518:	bf00      	nop
 800651a:	e02b      	b.n	8006574 <UART_SetConfig+0x148>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a75      	ldr	r2, [pc, #468]	; (80066f8 <UART_SetConfig+0x2cc>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d124      	bne.n	8006570 <UART_SetConfig+0x144>
 8006526:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800652a:	f7ff fc87 	bl	8005e3c <LL_RCC_GetLPUARTClockSource>
 800652e:	4603      	mov	r3, r0
 8006530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006534:	d012      	beq.n	800655c <UART_SetConfig+0x130>
 8006536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800653a:	d802      	bhi.n	8006542 <UART_SetConfig+0x116>
 800653c:	2b00      	cmp	r3, #0
 800653e:	d007      	beq.n	8006550 <UART_SetConfig+0x124>
 8006540:	e012      	b.n	8006568 <UART_SetConfig+0x13c>
 8006542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006546:	d006      	beq.n	8006556 <UART_SetConfig+0x12a>
 8006548:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800654c:	d009      	beq.n	8006562 <UART_SetConfig+0x136>
 800654e:	e00b      	b.n	8006568 <UART_SetConfig+0x13c>
 8006550:	2300      	movs	r3, #0
 8006552:	76fb      	strb	r3, [r7, #27]
 8006554:	e00e      	b.n	8006574 <UART_SetConfig+0x148>
 8006556:	2302      	movs	r3, #2
 8006558:	76fb      	strb	r3, [r7, #27]
 800655a:	e00b      	b.n	8006574 <UART_SetConfig+0x148>
 800655c:	2304      	movs	r3, #4
 800655e:	76fb      	strb	r3, [r7, #27]
 8006560:	e008      	b.n	8006574 <UART_SetConfig+0x148>
 8006562:	2308      	movs	r3, #8
 8006564:	76fb      	strb	r3, [r7, #27]
 8006566:	e005      	b.n	8006574 <UART_SetConfig+0x148>
 8006568:	2310      	movs	r3, #16
 800656a:	76fb      	strb	r3, [r7, #27]
 800656c:	bf00      	nop
 800656e:	e001      	b.n	8006574 <UART_SetConfig+0x148>
 8006570:	2310      	movs	r3, #16
 8006572:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a5f      	ldr	r2, [pc, #380]	; (80066f8 <UART_SetConfig+0x2cc>)
 800657a:	4293      	cmp	r3, r2
 800657c:	f040 808e 	bne.w	800669c <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006580:	7efb      	ldrb	r3, [r7, #27]
 8006582:	2b08      	cmp	r3, #8
 8006584:	d823      	bhi.n	80065ce <UART_SetConfig+0x1a2>
 8006586:	a201      	add	r2, pc, #4	; (adr r2, 800658c <UART_SetConfig+0x160>)
 8006588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658c:	080065b1 	.word	0x080065b1
 8006590:	080065cf 	.word	0x080065cf
 8006594:	080065b9 	.word	0x080065b9
 8006598:	080065cf 	.word	0x080065cf
 800659c:	080065bf 	.word	0x080065bf
 80065a0:	080065cf 	.word	0x080065cf
 80065a4:	080065cf 	.word	0x080065cf
 80065a8:	080065cf 	.word	0x080065cf
 80065ac:	080065c7 	.word	0x080065c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065b0:	f7fe fb94 	bl	8004cdc <HAL_RCC_GetPCLK1Freq>
 80065b4:	6178      	str	r0, [r7, #20]
        break;
 80065b6:	e00f      	b.n	80065d8 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065b8:	4b51      	ldr	r3, [pc, #324]	; (8006700 <UART_SetConfig+0x2d4>)
 80065ba:	617b      	str	r3, [r7, #20]
        break;
 80065bc:	e00c      	b.n	80065d8 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065be:	f7fe fb0f 	bl	8004be0 <HAL_RCC_GetSysClockFreq>
 80065c2:	6178      	str	r0, [r7, #20]
        break;
 80065c4:	e008      	b.n	80065d8 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ca:	617b      	str	r3, [r7, #20]
        break;
 80065cc:	e004      	b.n	80065d8 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	76bb      	strb	r3, [r7, #26]
        break;
 80065d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 811c 	beq.w	8006818 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	4a47      	ldr	r2, [pc, #284]	; (8006704 <UART_SetConfig+0x2d8>)
 80065e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065ea:	461a      	mov	r2, r3
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80065f2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	4613      	mov	r3, r2
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	4413      	add	r3, r2
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	429a      	cmp	r2, r3
 8006602:	d305      	bcc.n	8006610 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	429a      	cmp	r2, r3
 800660e:	d902      	bls.n	8006616 <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	76bb      	strb	r3, [r7, #26]
 8006614:	e100      	b.n	8006818 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	4618      	mov	r0, r3
 800661a:	f04f 0100 	mov.w	r1, #0
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	4a38      	ldr	r2, [pc, #224]	; (8006704 <UART_SetConfig+0x2d8>)
 8006624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006628:	b29b      	uxth	r3, r3
 800662a:	f04f 0400 	mov.w	r4, #0
 800662e:	461a      	mov	r2, r3
 8006630:	4623      	mov	r3, r4
 8006632:	f7fa fa2b 	bl	8000a8c <__aeabi_uldivmod>
 8006636:	4603      	mov	r3, r0
 8006638:	460c      	mov	r4, r1
 800663a:	4619      	mov	r1, r3
 800663c:	4622      	mov	r2, r4
 800663e:	f04f 0300 	mov.w	r3, #0
 8006642:	f04f 0400 	mov.w	r4, #0
 8006646:	0214      	lsls	r4, r2, #8
 8006648:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800664c:	020b      	lsls	r3, r1, #8
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6852      	ldr	r2, [r2, #4]
 8006652:	0852      	lsrs	r2, r2, #1
 8006654:	4611      	mov	r1, r2
 8006656:	f04f 0200 	mov.w	r2, #0
 800665a:	eb13 0b01 	adds.w	fp, r3, r1
 800665e:	eb44 0c02 	adc.w	ip, r4, r2
 8006662:	4658      	mov	r0, fp
 8006664:	4661      	mov	r1, ip
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f04f 0400 	mov.w	r4, #0
 800666e:	461a      	mov	r2, r3
 8006670:	4623      	mov	r3, r4
 8006672:	f7fa fa0b 	bl	8000a8c <__aeabi_uldivmod>
 8006676:	4603      	mov	r3, r0
 8006678:	460c      	mov	r4, r1
 800667a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006682:	d308      	bcc.n	8006696 <UART_SetConfig+0x26a>
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800668a:	d204      	bcs.n	8006696 <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	60da      	str	r2, [r3, #12]
 8006694:	e0c0      	b.n	8006818 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	76bb      	strb	r3, [r7, #26]
 800669a:	e0bd      	b.n	8006818 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066a4:	d169      	bne.n	800677a <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80066a6:	7efb      	ldrb	r3, [r7, #27]
 80066a8:	3b01      	subs	r3, #1
 80066aa:	2b07      	cmp	r3, #7
 80066ac:	d82c      	bhi.n	8006708 <UART_SetConfig+0x2dc>
 80066ae:	a201      	add	r2, pc, #4	; (adr r2, 80066b4 <UART_SetConfig+0x288>)
 80066b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b4:	080066d5 	.word	0x080066d5
 80066b8:	080066dd 	.word	0x080066dd
 80066bc:	08006709 	.word	0x08006709
 80066c0:	080066e3 	.word	0x080066e3
 80066c4:	08006709 	.word	0x08006709
 80066c8:	08006709 	.word	0x08006709
 80066cc:	08006709 	.word	0x08006709
 80066d0:	080066eb 	.word	0x080066eb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066d4:	f7fe fb18 	bl	8004d08 <HAL_RCC_GetPCLK2Freq>
 80066d8:	6178      	str	r0, [r7, #20]
        break;
 80066da:	e01a      	b.n	8006712 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066dc:	4b08      	ldr	r3, [pc, #32]	; (8006700 <UART_SetConfig+0x2d4>)
 80066de:	617b      	str	r3, [r7, #20]
        break;
 80066e0:	e017      	b.n	8006712 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066e2:	f7fe fa7d 	bl	8004be0 <HAL_RCC_GetSysClockFreq>
 80066e6:	6178      	str	r0, [r7, #20]
        break;
 80066e8:	e013      	b.n	8006712 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ee:	617b      	str	r3, [r7, #20]
        break;
 80066f0:	e00f      	b.n	8006712 <UART_SetConfig+0x2e6>
 80066f2:	bf00      	nop
 80066f4:	cfff69f3 	.word	0xcfff69f3
 80066f8:	40008000 	.word	0x40008000
 80066fc:	40013800 	.word	0x40013800
 8006700:	00f42400 	.word	0x00f42400
 8006704:	08012860 	.word	0x08012860
      default:
        pclk = 0U;
 8006708:	2300      	movs	r3, #0
 800670a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	76bb      	strb	r3, [r7, #26]
        break;
 8006710:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d07f      	beq.n	8006818 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	4a48      	ldr	r2, [pc, #288]	; (8006840 <UART_SetConfig+0x414>)
 800671e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006722:	461a      	mov	r2, r3
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	fbb3 f3f2 	udiv	r3, r3, r2
 800672a:	005a      	lsls	r2, r3, #1
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	085b      	lsrs	r3, r3, #1
 8006732:	441a      	add	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	fbb2 f3f3 	udiv	r3, r2, r3
 800673c:	b29b      	uxth	r3, r3
 800673e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	2b0f      	cmp	r3, #15
 8006744:	d916      	bls.n	8006774 <UART_SetConfig+0x348>
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800674c:	d212      	bcs.n	8006774 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	b29b      	uxth	r3, r3
 8006752:	f023 030f 	bic.w	r3, r3, #15
 8006756:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	085b      	lsrs	r3, r3, #1
 800675c:	b29b      	uxth	r3, r3
 800675e:	f003 0307 	and.w	r3, r3, #7
 8006762:	b29a      	uxth	r2, r3
 8006764:	89fb      	ldrh	r3, [r7, #14]
 8006766:	4313      	orrs	r3, r2
 8006768:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	89fa      	ldrh	r2, [r7, #14]
 8006770:	60da      	str	r2, [r3, #12]
 8006772:	e051      	b.n	8006818 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	76bb      	strb	r3, [r7, #26]
 8006778:	e04e      	b.n	8006818 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800677a:	7efb      	ldrb	r3, [r7, #27]
 800677c:	3b01      	subs	r3, #1
 800677e:	2b07      	cmp	r3, #7
 8006780:	d821      	bhi.n	80067c6 <UART_SetConfig+0x39a>
 8006782:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <UART_SetConfig+0x35c>)
 8006784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006788:	080067a9 	.word	0x080067a9
 800678c:	080067b1 	.word	0x080067b1
 8006790:	080067c7 	.word	0x080067c7
 8006794:	080067b7 	.word	0x080067b7
 8006798:	080067c7 	.word	0x080067c7
 800679c:	080067c7 	.word	0x080067c7
 80067a0:	080067c7 	.word	0x080067c7
 80067a4:	080067bf 	.word	0x080067bf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067a8:	f7fe faae 	bl	8004d08 <HAL_RCC_GetPCLK2Freq>
 80067ac:	6178      	str	r0, [r7, #20]
        break;
 80067ae:	e00f      	b.n	80067d0 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067b0:	4b24      	ldr	r3, [pc, #144]	; (8006844 <UART_SetConfig+0x418>)
 80067b2:	617b      	str	r3, [r7, #20]
        break;
 80067b4:	e00c      	b.n	80067d0 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067b6:	f7fe fa13 	bl	8004be0 <HAL_RCC_GetSysClockFreq>
 80067ba:	6178      	str	r0, [r7, #20]
        break;
 80067bc:	e008      	b.n	80067d0 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067c2:	617b      	str	r3, [r7, #20]
        break;
 80067c4:	e004      	b.n	80067d0 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	76bb      	strb	r3, [r7, #26]
        break;
 80067ce:	bf00      	nop
    }

    if (pclk != 0U)
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d020      	beq.n	8006818 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	4a19      	ldr	r2, [pc, #100]	; (8006840 <UART_SetConfig+0x414>)
 80067dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067e0:	461a      	mov	r2, r3
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	085b      	lsrs	r3, r3, #1
 80067ee:	441a      	add	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	2b0f      	cmp	r3, #15
 8006800:	d908      	bls.n	8006814 <UART_SetConfig+0x3e8>
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006808:	d204      	bcs.n	8006814 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	60da      	str	r2, [r3, #12]
 8006812:	e001      	b.n	8006818 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006834:	7ebb      	ldrb	r3, [r7, #26]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3720      	adds	r7, #32
 800683a:	46bd      	mov	sp, r7
 800683c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006840:	08012860 	.word	0x08012860
 8006844:	00f42400 	.word	0x00f42400

08006848 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006898:	f003 0304 	and.w	r3, r3, #4
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00a      	beq.n	80068b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ba:	f003 0308 	and.w	r3, r3, #8
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00a      	beq.n	80068d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	430a      	orrs	r2, r1
 80068d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068dc:	f003 0310 	and.w	r3, r3, #16
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00a      	beq.n	80068fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fe:	f003 0320 	and.w	r3, r3, #32
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00a      	beq.n	800691c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006924:	2b00      	cmp	r3, #0
 8006926:	d01a      	beq.n	800695e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006946:	d10a      	bne.n	800695e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00a      	beq.n	8006980 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	430a      	orrs	r2, r1
 800697e:	605a      	str	r2, [r3, #4]
  }
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af02      	add	r7, sp, #8
 8006992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800699c:	f7fc faae 	bl	8002efc <HAL_GetTick>
 80069a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0308 	and.w	r3, r3, #8
 80069ac:	2b08      	cmp	r3, #8
 80069ae:	d10e      	bne.n	80069ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f82c 	bl	8006a1c <UART_WaitOnFlagUntilTimeout>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e022      	b.n	8006a14 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b04      	cmp	r3, #4
 80069da:	d10e      	bne.n	80069fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f816 	bl	8006a1c <UART_WaitOnFlagUntilTimeout>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e00c      	b.n	8006a14 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2220      	movs	r2, #32
 80069fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	603b      	str	r3, [r7, #0]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a2c:	e062      	b.n	8006af4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a34:	d05e      	beq.n	8006af4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a36:	f7fc fa61 	bl	8002efc <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	69ba      	ldr	r2, [r7, #24]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d302      	bcc.n	8006a4c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d11d      	bne.n	8006a88 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a5a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 0201 	bic.w	r2, r2, #1
 8006a6a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e045      	b.n	8006b14 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0304 	and.w	r3, r3, #4
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d02e      	beq.n	8006af4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aa4:	d126      	bne.n	8006af4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006aae:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006abe:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0201 	bic.w	r2, r2, #1
 8006ace:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2220      	movs	r2, #32
 8006adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e00f      	b.n	8006b14 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	69da      	ldr	r2, [r3, #28]
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	4013      	ands	r3, r2
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	bf0c      	ite	eq
 8006b04:	2301      	moveq	r3, #1
 8006b06:	2300      	movne	r3, #0
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	79fb      	ldrb	r3, [r7, #7]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d08d      	beq.n	8006a2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006b32:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006b42:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b6e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6812      	ldr	r2, [r2, #0]
 8006b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b7e:	f023 0301 	bic.w	r3, r3, #1
 8006b82:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006baa:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d114      	bne.n	8006be4 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bd0:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006be0:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006be2:	e002      	b.n	8006bea <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f7fb fa6d 	bl	80020c4 <HAL_UART_TxCpltCallback>
}
 8006bea:	bf00      	nop
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f7ff fbff 	bl	8006404 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c06:	bf00      	nop
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b086      	sub	sp, #24
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c22:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c36:	2b80      	cmp	r3, #128	; 0x80
 8006c38:	d109      	bne.n	8006c4e <UART_DMAError+0x40>
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	2b21      	cmp	r3, #33	; 0x21
 8006c3e:	d106      	bne.n	8006c4e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006c48:	6978      	ldr	r0, [r7, #20]
 8006c4a:	f7ff ff67 	bl	8006b1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c58:	2b40      	cmp	r3, #64	; 0x40
 8006c5a:	d109      	bne.n	8006c70 <UART_DMAError+0x62>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b22      	cmp	r3, #34	; 0x22
 8006c60:	d106      	bne.n	8006c70 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006c6a:	6978      	ldr	r0, [r7, #20]
 8006c6c:	f7ff ff74 	bl	8006b58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c76:	f043 0210 	orr.w	r2, r3, #16
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c80:	6978      	ldr	r0, [r7, #20]
 8006c82:	f7ff fbc9 	bl	8006418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c86:	bf00      	nop
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b084      	sub	sp, #16
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f7ff fbb3 	bl	8006418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cb2:	bf00      	nop
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cc8:	2b21      	cmp	r3, #33	; 0x21
 8006cca:	d12a      	bne.n	8006d22 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d110      	bne.n	8006cfa <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ce6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cf6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006cf8:	e013      	b.n	8006d22 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cfe:	781a      	ldrb	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0a:	1c5a      	adds	r2, r3, #1
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b085      	sub	sp, #20
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d3c:	2b21      	cmp	r3, #33	; 0x21
 8006d3e:	d12f      	bne.n	8006da0 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d110      	bne.n	8006d6e <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d5a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d6a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006d6c:	e018      	b.n	8006da0 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d72:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d82:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d88:	1c9a      	adds	r2, r3, #2
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	3b01      	subs	r3, #1
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006da0:	bf00      	nop
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dba:	2b21      	cmp	r3, #33	; 0x21
 8006dbc:	d13d      	bne.n	8006e3a <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006dc4:	81fb      	strh	r3, [r7, #14]
 8006dc6:	e035      	b.n	8006e34 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d111      	bne.n	8006df8 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689a      	ldr	r2, [r3, #8]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006de2:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006df2:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006df4:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8006df6:	e020      	b.n	8006e3a <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d013      	beq.n	8006e2e <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0a:	781a      	ldrb	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	3b01      	subs	r3, #1
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006e2e:	89fb      	ldrh	r3, [r7, #14]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	81fb      	strh	r3, [r7, #14]
 8006e34:	89fb      	ldrh	r3, [r7, #14]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1c6      	bne.n	8006dc8 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8006e3a:	bf00      	nop
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b085      	sub	sp, #20
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e54:	2b21      	cmp	r3, #33	; 0x21
 8006e56:	d142      	bne.n	8006ede <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006e5e:	81fb      	strh	r3, [r7, #14]
 8006e60:	e03a      	b.n	8006ed8 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d111      	bne.n	8006e92 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006e7c:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e8c:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006e8e:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8006e90:	e025      	b.n	8006ede <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d018      	beq.n	8006ed2 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea4:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eb4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eba:	1c9a      	adds	r2, r3, #2
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006ed2:	89fb      	ldrh	r3, [r7, #14]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	81fb      	strh	r3, [r7, #14]
 8006ed8:	89fb      	ldrh	r3, [r7, #14]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1c1      	bne.n	8006e62 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8006ede:	bf00      	nop
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b082      	sub	sp, #8
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f00:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2220      	movs	r2, #32
 8006f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7fb f8d7 	bl	80020c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f16:	bf00      	nop
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006f3a:	bf00      	nop
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006f4e:	bf00      	nop
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b085      	sub	sp, #20
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d101      	bne.n	8006f70 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	e027      	b.n	8006fc0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2224      	movs	r2, #36	; 0x24
 8006f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0201 	bic.w	r2, r2, #1
 8006f96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d101      	bne.n	8006fe4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e02d      	b.n	8007040 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2224      	movs	r2, #36	; 0x24
 8006ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0201 	bic.w	r2, r2, #1
 800700a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f84f 	bl	80070c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2220      	movs	r2, #32
 8007032:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007058:	2b01      	cmp	r3, #1
 800705a:	d101      	bne.n	8007060 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800705c:	2302      	movs	r3, #2
 800705e:	e02d      	b.n	80070bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2224      	movs	r2, #36	; 0x24
 800706c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0201 	bic.w	r2, r2, #1
 8007086:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f811 	bl	80070c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2220      	movs	r2, #32
 80070ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b089      	sub	sp, #36	; 0x24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80070cc:	4a2f      	ldr	r2, [pc, #188]	; (800718c <UARTEx_SetNbDataToProcess+0xc8>)
 80070ce:	f107 0314 	add.w	r3, r7, #20
 80070d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80070d6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80070da:	4a2d      	ldr	r2, [pc, #180]	; (8007190 <UARTEx_SetNbDataToProcess+0xcc>)
 80070dc:	f107 030c 	add.w	r3, r7, #12
 80070e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80070e4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d108      	bne.n	8007102 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007100:	e03d      	b.n	800717e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007102:	2308      	movs	r3, #8
 8007104:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007106:	2308      	movs	r3, #8
 8007108:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	0e5b      	lsrs	r3, r3, #25
 8007112:	b2db      	uxtb	r3, r3
 8007114:	f003 0307 	and.w	r3, r3, #7
 8007118:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	0f5b      	lsrs	r3, r3, #29
 8007122:	b2db      	uxtb	r3, r3
 8007124:	f003 0307 	and.w	r3, r3, #7
 8007128:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800712a:	7fbb      	ldrb	r3, [r7, #30]
 800712c:	7f3a      	ldrb	r2, [r7, #28]
 800712e:	f107 0120 	add.w	r1, r7, #32
 8007132:	440a      	add	r2, r1
 8007134:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007138:	fb02 f303 	mul.w	r3, r2, r3
 800713c:	7f3a      	ldrb	r2, [r7, #28]
 800713e:	f107 0120 	add.w	r1, r7, #32
 8007142:	440a      	add	r2, r1
 8007144:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007148:	fb93 f3f2 	sdiv	r3, r3, r2
 800714c:	b29a      	uxth	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007154:	7ffb      	ldrb	r3, [r7, #31]
 8007156:	7f7a      	ldrb	r2, [r7, #29]
 8007158:	f107 0120 	add.w	r1, r7, #32
 800715c:	440a      	add	r2, r1
 800715e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007162:	fb02 f303 	mul.w	r3, r2, r3
 8007166:	7f7a      	ldrb	r2, [r7, #29]
 8007168:	f107 0120 	add.w	r1, r7, #32
 800716c:	440a      	add	r2, r1
 800716e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007172:	fb93 f3f2 	sdiv	r3, r3, r2
 8007176:	b29a      	uxth	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800717e:	bf00      	nop
 8007180:	3724      	adds	r7, #36	; 0x24
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	08011918 	.word	0x08011918
 8007190:	08011920 	.word	0x08011920

08007194 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800719a:	2300      	movs	r3, #0
 800719c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800719e:	f107 0308 	add.w	r3, r7, #8
 80071a2:	2218      	movs	r2, #24
 80071a4:	2100      	movs	r1, #0
 80071a6:	4618      	mov	r0, r3
 80071a8:	f001 fa3f 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 80071ac:	233f      	movs	r3, #63	; 0x3f
 80071ae:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80071b0:	2381      	movs	r3, #129	; 0x81
 80071b2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80071b4:	1dfb      	adds	r3, r7, #7
 80071b6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80071b8:	2301      	movs	r3, #1
 80071ba:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80071bc:	f107 0308 	add.w	r3, r7, #8
 80071c0:	2100      	movs	r1, #0
 80071c2:	4618      	mov	r0, r3
 80071c4:	f001 fd5e 	bl	8008c84 <hci_send_req>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	da01      	bge.n	80071d2 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80071ce:	23ff      	movs	r3, #255	; 0xff
 80071d0:	e000      	b.n	80071d4 <aci_gap_set_non_discoverable+0x40>
  return status;
 80071d2:	79fb      	ldrb	r3, [r7, #7]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3720      	adds	r7, #32
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80071dc:	b5b0      	push	{r4, r5, r7, lr}
 80071de:	b0ce      	sub	sp, #312	; 0x138
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	4605      	mov	r5, r0
 80071e4:	460c      	mov	r4, r1
 80071e6:	4610      	mov	r0, r2
 80071e8:	4619      	mov	r1, r3
 80071ea:	1dfb      	adds	r3, r7, #7
 80071ec:	462a      	mov	r2, r5
 80071ee:	701a      	strb	r2, [r3, #0]
 80071f0:	1d3b      	adds	r3, r7, #4
 80071f2:	4622      	mov	r2, r4
 80071f4:	801a      	strh	r2, [r3, #0]
 80071f6:	1cbb      	adds	r3, r7, #2
 80071f8:	4602      	mov	r2, r0
 80071fa:	801a      	strh	r2, [r3, #0]
 80071fc:	1dbb      	adds	r3, r7, #6
 80071fe:	460a      	mov	r2, r1
 8007200:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8007202:	f107 0310 	add.w	r3, r7, #16
 8007206:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800720a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800720e:	3308      	adds	r3, #8
 8007210:	f107 0210 	add.w	r2, r7, #16
 8007214:	4413      	add	r3, r2
 8007216:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800721a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800721e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007222:	4413      	add	r3, r2
 8007224:	3309      	adds	r3, #9
 8007226:	f107 0210 	add.w	r2, r7, #16
 800722a:	4413      	add	r3, r2
 800722c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007230:	f107 030f 	add.w	r3, r7, #15
 8007234:	2200      	movs	r2, #0
 8007236:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800723e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007242:	1dfa      	adds	r2, r7, #7
 8007244:	7812      	ldrb	r2, [r2, #0]
 8007246:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007248:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800724c:	3301      	adds	r3, #1
 800724e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007252:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007256:	1d3a      	adds	r2, r7, #4
 8007258:	8812      	ldrh	r2, [r2, #0]
 800725a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800725e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007262:	3302      	adds	r3, #2
 8007264:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8007268:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800726c:	1cba      	adds	r2, r7, #2
 800726e:	8812      	ldrh	r2, [r2, #0]
 8007270:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007274:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007278:	3302      	adds	r3, #2
 800727a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800727e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007282:	1dba      	adds	r2, r7, #6
 8007284:	7812      	ldrb	r2, [r2, #0]
 8007286:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007288:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800728c:	3301      	adds	r3, #1
 800728e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007292:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007296:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800729a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800729c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072a0:	3301      	adds	r3, #1
 80072a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80072a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072aa:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80072ae:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80072b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072b4:	3301      	adds	r3, #1
 80072b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80072ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072be:	3308      	adds	r3, #8
 80072c0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80072c4:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80072c8:	4618      	mov	r0, r3
 80072ca:	f001 f99e 	bl	800860a <Osal_MemCpy>
    index_input += Local_Name_Length;
 80072ce:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80072d2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80072d6:	4413      	add	r3, r2
 80072d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80072dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80072e0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80072e4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80072e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072ea:	3301      	adds	r3, #1
 80072ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80072f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80072f4:	3301      	adds	r3, #1
 80072f6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80072fa:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80072fe:	4618      	mov	r0, r3
 8007300:	f001 f983 	bl	800860a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007304:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007308:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800730c:	4413      	add	r3, r2
 800730e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8007312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007316:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800731a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800731c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007320:	3302      	adds	r3, #2
 8007322:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8007326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800732a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800732e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007330:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007334:	3302      	adds	r3, #2
 8007336:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800733a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800733e:	2218      	movs	r2, #24
 8007340:	2100      	movs	r1, #0
 8007342:	4618      	mov	r0, r3
 8007344:	f001 f971 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007348:	233f      	movs	r3, #63	; 0x3f
 800734a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800734e:	2383      	movs	r3, #131	; 0x83
 8007350:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007354:	f107 0310 	add.w	r3, r7, #16
 8007358:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800735c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007360:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007364:	f107 030f 	add.w	r3, r7, #15
 8007368:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800736c:	2301      	movs	r3, #1
 800736e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007372:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007376:	2100      	movs	r1, #0
 8007378:	4618      	mov	r0, r3
 800737a:	f001 fc83 	bl	8008c84 <hci_send_req>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	da01      	bge.n	8007388 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8007384:	23ff      	movs	r3, #255	; 0xff
 8007386:	e002      	b.n	800738e <aci_gap_set_discoverable+0x1b2>
  return status;
 8007388:	f107 030f 	add.w	r3, r7, #15
 800738c:	781b      	ldrb	r3, [r3, #0]
}
 800738e:	4618      	mov	r0, r3
 8007390:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007394:	46bd      	mov	sp, r7
 8007396:	bdb0      	pop	{r4, r5, r7, pc}

08007398 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b0cc      	sub	sp, #304	; 0x130
 800739c:	af00      	add	r7, sp, #0
 800739e:	4602      	mov	r2, r0
 80073a0:	1dfb      	adds	r3, r7, #7
 80073a2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80073a4:	f107 0310 	add.w	r3, r7, #16
 80073a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80073ac:	f107 030f 	add.w	r3, r7, #15
 80073b0:	2200      	movs	r2, #0
 80073b2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80073ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073be:	1dfa      	adds	r2, r7, #7
 80073c0:	7812      	ldrb	r2, [r2, #0]
 80073c2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80073c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073c8:	3301      	adds	r3, #1
 80073ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80073ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073d2:	2218      	movs	r2, #24
 80073d4:	2100      	movs	r1, #0
 80073d6:	4618      	mov	r0, r3
 80073d8:	f001 f927 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 80073dc:	233f      	movs	r3, #63	; 0x3f
 80073de:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80073e2:	2385      	movs	r3, #133	; 0x85
 80073e4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80073e8:	f107 0310 	add.w	r3, r7, #16
 80073ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80073f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80073f8:	f107 030f 	add.w	r3, r7, #15
 80073fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007400:	2301      	movs	r3, #1
 8007402:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007406:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800740a:	2100      	movs	r1, #0
 800740c:	4618      	mov	r0, r3
 800740e:	f001 fc39 	bl	8008c84 <hci_send_req>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	da01      	bge.n	800741c <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8007418:	23ff      	movs	r3, #255	; 0xff
 800741a:	e002      	b.n	8007422 <aci_gap_set_io_capability+0x8a>
  return status;
 800741c:	f107 030f 	add.w	r3, r7, #15
 8007420:	781b      	ldrb	r3, [r3, #0]
}
 8007422:	4618      	mov	r0, r3
 8007424:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800742c:	b5b0      	push	{r4, r5, r7, lr}
 800742e:	b0cc      	sub	sp, #304	; 0x130
 8007430:	af00      	add	r7, sp, #0
 8007432:	4605      	mov	r5, r0
 8007434:	460c      	mov	r4, r1
 8007436:	4610      	mov	r0, r2
 8007438:	4619      	mov	r1, r3
 800743a:	1dfb      	adds	r3, r7, #7
 800743c:	462a      	mov	r2, r5
 800743e:	701a      	strb	r2, [r3, #0]
 8007440:	1dbb      	adds	r3, r7, #6
 8007442:	4622      	mov	r2, r4
 8007444:	701a      	strb	r2, [r3, #0]
 8007446:	1d7b      	adds	r3, r7, #5
 8007448:	4602      	mov	r2, r0
 800744a:	701a      	strb	r2, [r3, #0]
 800744c:	1d3b      	adds	r3, r7, #4
 800744e:	460a      	mov	r2, r1
 8007450:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007452:	f107 0310 	add.w	r3, r7, #16
 8007456:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800745a:	f107 030f 	add.w	r3, r7, #15
 800745e:	2200      	movs	r2, #0
 8007460:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007462:	2300      	movs	r3, #0
 8007464:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007468:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800746c:	1dfa      	adds	r2, r7, #7
 800746e:	7812      	ldrb	r2, [r2, #0]
 8007470:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007472:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007476:	3301      	adds	r3, #1
 8007478:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800747c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007480:	1dba      	adds	r2, r7, #6
 8007482:	7812      	ldrb	r2, [r2, #0]
 8007484:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007486:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800748a:	3301      	adds	r3, #1
 800748c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007494:	1d7a      	adds	r2, r7, #5
 8007496:	7812      	ldrb	r2, [r2, #0]
 8007498:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800749a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800749e:	3301      	adds	r3, #1
 80074a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80074a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a8:	1d3a      	adds	r2, r7, #4
 80074aa:	7812      	ldrb	r2, [r2, #0]
 80074ac:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80074ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074b2:	3301      	adds	r3, #1
 80074b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80074b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074bc:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80074c0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80074c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074c6:	3301      	adds	r3, #1
 80074c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80074cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d0:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80074d4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80074d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074da:	3301      	adds	r3, #1
 80074dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80074e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80074e8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80074ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074ee:	3301      	adds	r3, #1
 80074f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80074f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80074fc:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007500:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007504:	3304      	adds	r3, #4
 8007506:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800750a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800750e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007512:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007514:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007518:	3301      	adds	r3, #1
 800751a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800751e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007522:	2218      	movs	r2, #24
 8007524:	2100      	movs	r1, #0
 8007526:	4618      	mov	r0, r3
 8007528:	f001 f87f 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 800752c:	233f      	movs	r3, #63	; 0x3f
 800752e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007532:	2386      	movs	r3, #134	; 0x86
 8007534:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007538:	f107 0310 	add.w	r3, r7, #16
 800753c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007540:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007544:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007548:	f107 030f 	add.w	r3, r7, #15
 800754c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007550:	2301      	movs	r3, #1
 8007552:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007556:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800755a:	2100      	movs	r1, #0
 800755c:	4618      	mov	r0, r3
 800755e:	f001 fb91 	bl	8008c84 <hci_send_req>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	da01      	bge.n	800756c <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8007568:	23ff      	movs	r3, #255	; 0xff
 800756a:	e002      	b.n	8007572 <aci_gap_set_authentication_requirement+0x146>
  return status;
 800756c:	f107 030f 	add.w	r3, r7, #15
 8007570:	781b      	ldrb	r3, [r3, #0]
}
 8007572:	4618      	mov	r0, r3
 8007574:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007578:	46bd      	mov	sp, r7
 800757a:	bdb0      	pop	{r4, r5, r7, pc}

0800757c <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b0cc      	sub	sp, #304	; 0x130
 8007580:	af00      	add	r7, sp, #0
 8007582:	4602      	mov	r2, r0
 8007584:	463b      	mov	r3, r7
 8007586:	6019      	str	r1, [r3, #0]
 8007588:	1dbb      	adds	r3, r7, #6
 800758a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800758c:	f107 0310 	add.w	r3, r7, #16
 8007590:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007594:	f107 030f 	add.w	r3, r7, #15
 8007598:	2200      	movs	r2, #0
 800759a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800759c:	2300      	movs	r3, #0
 800759e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80075a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a6:	1dba      	adds	r2, r7, #6
 80075a8:	8812      	ldrh	r2, [r2, #0]
 80075aa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80075ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075b0:	3302      	adds	r3, #2
 80075b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 80075b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ba:	463a      	mov	r2, r7
 80075bc:	6812      	ldr	r2, [r2, #0]
 80075be:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80075c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075c6:	3304      	adds	r3, #4
 80075c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075d0:	2218      	movs	r2, #24
 80075d2:	2100      	movs	r1, #0
 80075d4:	4618      	mov	r0, r3
 80075d6:	f001 f828 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 80075da:	233f      	movs	r3, #63	; 0x3f
 80075dc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 80075e0:	2388      	movs	r3, #136	; 0x88
 80075e2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80075e6:	f107 0310 	add.w	r3, r7, #16
 80075ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80075ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80075f6:	f107 030f 	add.w	r3, r7, #15
 80075fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80075fe:	2301      	movs	r3, #1
 8007600:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007604:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007608:	2100      	movs	r1, #0
 800760a:	4618      	mov	r0, r3
 800760c:	f001 fb3a 	bl	8008c84 <hci_send_req>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	da01      	bge.n	800761a <aci_gap_pass_key_resp+0x9e>
    return BLE_STATUS_TIMEOUT;
 8007616:	23ff      	movs	r3, #255	; 0xff
 8007618:	e002      	b.n	8007620 <aci_gap_pass_key_resp+0xa4>
  return status;
 800761a:	f107 030f 	add.w	r3, r7, #15
 800761e:	781b      	ldrb	r3, [r3, #0]
}
 8007620:	4618      	mov	r0, r3
 8007622:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800762a:	b590      	push	{r4, r7, lr}
 800762c:	b0cd      	sub	sp, #308	; 0x134
 800762e:	af00      	add	r7, sp, #0
 8007630:	4604      	mov	r4, r0
 8007632:	4608      	mov	r0, r1
 8007634:	4611      	mov	r1, r2
 8007636:	463a      	mov	r2, r7
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	1dfb      	adds	r3, r7, #7
 800763c:	4622      	mov	r2, r4
 800763e:	701a      	strb	r2, [r3, #0]
 8007640:	1dbb      	adds	r3, r7, #6
 8007642:	4602      	mov	r2, r0
 8007644:	701a      	strb	r2, [r3, #0]
 8007646:	1d7b      	adds	r3, r7, #5
 8007648:	460a      	mov	r2, r1
 800764a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800764c:	f107 0310 	add.w	r3, r7, #16
 8007650:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007654:	f107 0308 	add.w	r3, r7, #8
 8007658:	2207      	movs	r2, #7
 800765a:	2100      	movs	r1, #0
 800765c:	4618      	mov	r0, r3
 800765e:	f000 ffe4 	bl	800862a <Osal_MemSet>
  int index_input = 0;
 8007662:	2300      	movs	r3, #0
 8007664:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800766c:	1dfa      	adds	r2, r7, #7
 800766e:	7812      	ldrb	r2, [r2, #0]
 8007670:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007672:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007676:	3301      	adds	r3, #1
 8007678:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800767c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007680:	1dba      	adds	r2, r7, #6
 8007682:	7812      	ldrb	r2, [r2, #0]
 8007684:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007686:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800768a:	3301      	adds	r3, #1
 800768c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007694:	1d7a      	adds	r2, r7, #5
 8007696:	7812      	ldrb	r2, [r2, #0]
 8007698:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800769a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800769e:	3301      	adds	r3, #1
 80076a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80076a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076a8:	2218      	movs	r2, #24
 80076aa:	2100      	movs	r1, #0
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 ffbc 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 80076b2:	233f      	movs	r3, #63	; 0x3f
 80076b4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80076b8:	238a      	movs	r3, #138	; 0x8a
 80076ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80076be:	f107 0310 	add.w	r3, r7, #16
 80076c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80076c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80076ce:	f107 0308 	add.w	r3, r7, #8
 80076d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80076d6:	2307      	movs	r3, #7
 80076d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80076dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076e0:	2100      	movs	r1, #0
 80076e2:	4618      	mov	r0, r3
 80076e4:	f001 face 	bl	8008c84 <hci_send_req>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	da01      	bge.n	80076f2 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 80076ee:	23ff      	movs	r3, #255	; 0xff
 80076f0:	e021      	b.n	8007736 <aci_gap_init+0x10c>
  if ( resp.Status )
 80076f2:	f107 0308 	add.w	r3, r7, #8
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <aci_gap_init+0xda>
    return resp.Status;
 80076fc:	f107 0308 	add.w	r3, r7, #8
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	e018      	b.n	8007736 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8007704:	f107 0308 	add.w	r3, r7, #8
 8007708:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800770c:	b29a      	uxth	r2, r3
 800770e:	463b      	mov	r3, r7
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007714:	f107 0308 	add.w	r3, r7, #8
 8007718:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800771c:	b29a      	uxth	r2, r3
 800771e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007722:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007724:	f107 0308 	add.w	r3, r7, #8
 8007728:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800772c:	b29a      	uxth	r2, r3
 800772e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007732:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800773c:	46bd      	mov	sp, r7
 800773e:	bd90      	pop	{r4, r7, pc}

08007740 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b0cc      	sub	sp, #304	; 0x130
 8007744:	af00      	add	r7, sp, #0
 8007746:	4602      	mov	r2, r0
 8007748:	463b      	mov	r3, r7
 800774a:	6019      	str	r1, [r3, #0]
 800774c:	1dfb      	adds	r3, r7, #7
 800774e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007750:	f107 0310 	add.w	r3, r7, #16
 8007754:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007758:	f107 030f 	add.w	r3, r7, #15
 800775c:	2200      	movs	r2, #0
 800775e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007760:	2300      	movs	r3, #0
 8007762:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8007766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800776a:	1dfa      	adds	r2, r7, #7
 800776c:	7812      	ldrb	r2, [r2, #0]
 800776e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007770:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007774:	3301      	adds	r3, #1
 8007776:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800777a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800777e:	1c58      	adds	r0, r3, #1
 8007780:	1dfb      	adds	r3, r7, #7
 8007782:	781a      	ldrb	r2, [r3, #0]
 8007784:	463b      	mov	r3, r7
 8007786:	6819      	ldr	r1, [r3, #0]
 8007788:	f000 ff3f 	bl	800860a <Osal_MemCpy>
  index_input += AdvDataLen;
 800778c:	1dfb      	adds	r3, r7, #7
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007794:	4413      	add	r3, r2
 8007796:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800779a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800779e:	2218      	movs	r2, #24
 80077a0:	2100      	movs	r1, #0
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 ff41 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 80077a8:	233f      	movs	r3, #63	; 0x3f
 80077aa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80077ae:	238e      	movs	r3, #142	; 0x8e
 80077b0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80077b4:	f107 0310 	add.w	r3, r7, #16
 80077b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80077bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80077c4:	f107 030f 	add.w	r3, r7, #15
 80077c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80077cc:	2301      	movs	r3, #1
 80077ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80077d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077d6:	2100      	movs	r1, #0
 80077d8:	4618      	mov	r0, r3
 80077da:	f001 fa53 	bl	8008c84 <hci_send_req>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	da01      	bge.n	80077e8 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 80077e4:	23ff      	movs	r3, #255	; 0xff
 80077e6:	e002      	b.n	80077ee <aci_gap_update_adv_data+0xae>
  return status;
 80077e8:	f107 030f 	add.w	r3, r7, #15
 80077ec:	781b      	ldrb	r3, [r3, #0]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b088      	sub	sp, #32
 80077fc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007802:	f107 0308 	add.w	r3, r7, #8
 8007806:	2218      	movs	r2, #24
 8007808:	2100      	movs	r1, #0
 800780a:	4618      	mov	r0, r3
 800780c:	f000 ff0d 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007810:	233f      	movs	r3, #63	; 0x3f
 8007812:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007814:	2392      	movs	r3, #146	; 0x92
 8007816:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007818:	1dfb      	adds	r3, r7, #7
 800781a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800781c:	2301      	movs	r3, #1
 800781e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007820:	f107 0308 	add.w	r3, r7, #8
 8007824:	2100      	movs	r1, #0
 8007826:	4618      	mov	r0, r3
 8007828:	f001 fa2c 	bl	8008c84 <hci_send_req>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	da01      	bge.n	8007836 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007832:	23ff      	movs	r3, #255	; 0xff
 8007834:	e000      	b.n	8007838 <aci_gap_configure_whitelist+0x40>
  return status;
 8007836:	79fb      	ldrb	r3, [r7, #7]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3720      	adds	r7, #32
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <aci_gap_clear_security_db>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_clear_security_db( void )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b088      	sub	sp, #32
 8007844:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007846:	2300      	movs	r3, #0
 8007848:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800784a:	f107 0308 	add.w	r3, r7, #8
 800784e:	2218      	movs	r2, #24
 8007850:	2100      	movs	r1, #0
 8007852:	4618      	mov	r0, r3
 8007854:	f000 fee9 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007858:	233f      	movs	r3, #63	; 0x3f
 800785a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x094;
 800785c:	2394      	movs	r3, #148	; 0x94
 800785e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007860:	1dfb      	adds	r3, r7, #7
 8007862:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007864:	2301      	movs	r3, #1
 8007866:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007868:	f107 0308 	add.w	r3, r7, #8
 800786c:	2100      	movs	r1, #0
 800786e:	4618      	mov	r0, r3
 8007870:	f001 fa08 	bl	8008c84 <hci_send_req>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	da01      	bge.n	800787e <aci_gap_clear_security_db+0x3e>
    return BLE_STATUS_TIMEOUT;
 800787a:	23ff      	movs	r3, #255	; 0xff
 800787c:	e000      	b.n	8007880 <aci_gap_clear_security_db+0x40>
  return status;
 800787e:	79fb      	ldrb	r3, [r7, #7]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3720      	adds	r7, #32
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <aci_gap_terminate_gap_proc>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_terminate_gap_proc( uint8_t Procedure_Code )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b0cc      	sub	sp, #304	; 0x130
 800788c:	af00      	add	r7, sp, #0
 800788e:	4602      	mov	r2, r0
 8007890:	1dfb      	adds	r3, r7, #7
 8007892:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 8007894:	f107 0310 	add.w	r3, r7, #16
 8007898:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800789c:	f107 030f 	add.w	r3, r7, #15
 80078a0:	2200      	movs	r2, #0
 80078a2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Procedure_Code = Procedure_Code;
 80078aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ae:	1dfa      	adds	r2, r7, #7
 80078b0:	7812      	ldrb	r2, [r2, #0]
 80078b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80078b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078b8:	3301      	adds	r3, #1
 80078ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80078be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078c2:	2218      	movs	r2, #24
 80078c4:	2100      	movs	r1, #0
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 feaf 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 80078cc:	233f      	movs	r3, #63	; 0x3f
 80078ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 80078d2:	239d      	movs	r3, #157	; 0x9d
 80078d4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80078d8:	f107 0310 	add.w	r3, r7, #16
 80078dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80078e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80078e8:	f107 030f 	add.w	r3, r7, #15
 80078ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80078f0:	2301      	movs	r3, #1
 80078f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80078f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078fa:	2100      	movs	r1, #0
 80078fc:	4618      	mov	r0, r3
 80078fe:	f001 f9c1 	bl	8008c84 <hci_send_req>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	da01      	bge.n	800790c <aci_gap_terminate_gap_proc+0x84>
    return BLE_STATUS_TIMEOUT;
 8007908:	23ff      	movs	r3, #255	; 0xff
 800790a:	e002      	b.n	8007912 <aci_gap_terminate_gap_proc+0x8a>
  return status;
 800790c:	f107 030f 	add.w	r3, r7, #15
 8007910:	781b      	ldrb	r3, [r3, #0]
}
 8007912:	4618      	mov	r0, r3
 8007914:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b0cc      	sub	sp, #304	; 0x130
 8007920:	af00      	add	r7, sp, #0
 8007922:	4602      	mov	r2, r0
 8007924:	1dbb      	adds	r3, r7, #6
 8007926:	801a      	strh	r2, [r3, #0]
 8007928:	1d7b      	adds	r3, r7, #5
 800792a:	460a      	mov	r2, r1
 800792c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800792e:	f107 0310 	add.w	r3, r7, #16
 8007932:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007936:	f107 030f 	add.w	r3, r7, #15
 800793a:	2200      	movs	r2, #0
 800793c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800793e:	2300      	movs	r3, #0
 8007940:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007944:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007948:	1dba      	adds	r2, r7, #6
 800794a:	8812      	ldrh	r2, [r2, #0]
 800794c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800794e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007952:	3302      	adds	r3, #2
 8007954:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8007958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800795c:	1d7a      	adds	r2, r7, #5
 800795e:	7812      	ldrb	r2, [r2, #0]
 8007960:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007962:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007966:	3301      	adds	r3, #1
 8007968:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800796c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007970:	2218      	movs	r2, #24
 8007972:	2100      	movs	r1, #0
 8007974:	4618      	mov	r0, r3
 8007976:	f000 fe58 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 800797a:	233f      	movs	r3, #63	; 0x3f
 800797c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8007980:	23a5      	movs	r3, #165	; 0xa5
 8007982:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007986:	f107 0310 	add.w	r3, r7, #16
 800798a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800798e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007992:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007996:	f107 030f 	add.w	r3, r7, #15
 800799a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800799e:	2301      	movs	r3, #1
 80079a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079a8:	2100      	movs	r1, #0
 80079aa:	4618      	mov	r0, r3
 80079ac:	f001 f96a 	bl	8008c84 <hci_send_req>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	da01      	bge.n	80079ba <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 80079b6:	23ff      	movs	r3, #255	; 0xff
 80079b8:	e002      	b.n	80079c0 <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 80079ba:	f107 030f 	add.w	r3, r7, #15
 80079be:	781b      	ldrb	r3, [r3, #0]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b088      	sub	sp, #32
 80079ce:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80079d0:	2300      	movs	r3, #0
 80079d2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80079d4:	f107 0308 	add.w	r3, r7, #8
 80079d8:	2218      	movs	r2, #24
 80079da:	2100      	movs	r1, #0
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 fe24 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 80079e2:	233f      	movs	r3, #63	; 0x3f
 80079e4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80079e6:	f240 1301 	movw	r3, #257	; 0x101
 80079ea:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80079ec:	1dfb      	adds	r3, r7, #7
 80079ee:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80079f0:	2301      	movs	r3, #1
 80079f2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079f4:	f107 0308 	add.w	r3, r7, #8
 80079f8:	2100      	movs	r1, #0
 80079fa:	4618      	mov	r0, r3
 80079fc:	f001 f942 	bl	8008c84 <hci_send_req>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	da01      	bge.n	8007a0a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8007a06:	23ff      	movs	r3, #255	; 0xff
 8007a08:	e000      	b.n	8007a0c <aci_gatt_init+0x42>
  return status;
 8007a0a:	79fb      	ldrb	r3, [r7, #7]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3720      	adds	r7, #32
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8007a14:	b590      	push	{r4, r7, lr}
 8007a16:	b0cf      	sub	sp, #316	; 0x13c
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	4638      	mov	r0, r7
 8007a1e:	6001      	str	r1, [r0, #0]
 8007a20:	4610      	mov	r0, r2
 8007a22:	4619      	mov	r1, r3
 8007a24:	1dfb      	adds	r3, r7, #7
 8007a26:	4622      	mov	r2, r4
 8007a28:	701a      	strb	r2, [r3, #0]
 8007a2a:	1dbb      	adds	r3, r7, #6
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	701a      	strb	r2, [r3, #0]
 8007a30:	1d7b      	adds	r3, r7, #5
 8007a32:	460a      	mov	r2, r1
 8007a34:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007a36:	f107 0310 	add.w	r3, r7, #16
 8007a3a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007a3e:	1dfb      	adds	r3, r7, #7
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d007      	beq.n	8007a56 <aci_gatt_add_service+0x42>
 8007a46:	1dfb      	adds	r3, r7, #7
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d101      	bne.n	8007a52 <aci_gatt_add_service+0x3e>
 8007a4e:	2311      	movs	r3, #17
 8007a50:	e002      	b.n	8007a58 <aci_gatt_add_service+0x44>
 8007a52:	2301      	movs	r3, #1
 8007a54:	e000      	b.n	8007a58 <aci_gatt_add_service+0x44>
 8007a56:	2303      	movs	r3, #3
 8007a58:	f107 0210 	add.w	r2, r7, #16
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007a62:	f107 030c 	add.w	r3, r7, #12
 8007a66:	2203      	movs	r2, #3
 8007a68:	2100      	movs	r1, #0
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fddd 	bl	800862a <Osal_MemSet>
  int index_input = 0;
 8007a70:	2300      	movs	r3, #0
 8007a72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8007a76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a7a:	1dfa      	adds	r2, r7, #7
 8007a7c:	7812      	ldrb	r2, [r2, #0]
 8007a7e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007a80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a84:	3301      	adds	r3, #1
 8007a86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007a8a:	1dfb      	adds	r3, r7, #7
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d002      	beq.n	8007a98 <aci_gatt_add_service+0x84>
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d004      	beq.n	8007aa0 <aci_gatt_add_service+0x8c>
 8007a96:	e007      	b.n	8007aa8 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8007a98:	2302      	movs	r3, #2
 8007a9a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007a9e:	e005      	b.n	8007aac <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8007aa0:	2310      	movs	r3, #16
 8007aa2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007aa6:	e001      	b.n	8007aac <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8007aa8:	2347      	movs	r3, #71	; 0x47
 8007aaa:	e05d      	b.n	8007b68 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007aac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007ab0:	1c58      	adds	r0, r3, #1
 8007ab2:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8007ab6:	463b      	mov	r3, r7
 8007ab8:	6819      	ldr	r1, [r3, #0]
 8007aba:	f000 fda6 	bl	800860a <Osal_MemCpy>
    index_input += size;
 8007abe:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8007ac2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8007acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ad0:	1dba      	adds	r2, r7, #6
 8007ad2:	7812      	ldrb	r2, [r2, #0]
 8007ad4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007ad6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ada:	3301      	adds	r3, #1
 8007adc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8007ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ae4:	1d7a      	adds	r2, r7, #5
 8007ae6:	7812      	ldrb	r2, [r2, #0]
 8007ae8:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8007aea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007aee:	3301      	adds	r3, #1
 8007af0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007af4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007af8:	2218      	movs	r2, #24
 8007afa:	2100      	movs	r1, #0
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 fd94 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b02:	233f      	movs	r3, #63	; 0x3f
 8007b04:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8007b08:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007b0c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007b10:	f107 0310 	add.w	r3, r7, #16
 8007b14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007b18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007b20:	f107 030c 	add.w	r3, r7, #12
 8007b24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007b28:	2303      	movs	r3, #3
 8007b2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b32:	2100      	movs	r1, #0
 8007b34:	4618      	mov	r0, r3
 8007b36:	f001 f8a5 	bl	8008c84 <hci_send_req>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	da01      	bge.n	8007b44 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8007b40:	23ff      	movs	r3, #255	; 0xff
 8007b42:	e011      	b.n	8007b68 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8007b44:	f107 030c 	add.w	r3, r7, #12
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <aci_gatt_add_service+0x142>
    return resp.Status;
 8007b4e:	f107 030c 	add.w	r3, r7, #12
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	e008      	b.n	8007b68 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8007b56:	f107 030c 	add.w	r3, r7, #12
 8007b5a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007b64:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd90      	pop	{r4, r7, pc}

08007b72 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8007b72:	b590      	push	{r4, r7, lr}
 8007b74:	b0d1      	sub	sp, #324	; 0x144
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	4604      	mov	r4, r0
 8007b7a:	4608      	mov	r0, r1
 8007b7c:	f107 0108 	add.w	r1, r7, #8
 8007b80:	600a      	str	r2, [r1, #0]
 8007b82:	4619      	mov	r1, r3
 8007b84:	f107 030e 	add.w	r3, r7, #14
 8007b88:	4622      	mov	r2, r4
 8007b8a:	801a      	strh	r2, [r3, #0]
 8007b8c:	f107 030d 	add.w	r3, r7, #13
 8007b90:	4602      	mov	r2, r0
 8007b92:	701a      	strb	r2, [r3, #0]
 8007b94:	1dbb      	adds	r3, r7, #6
 8007b96:	460a      	mov	r2, r1
 8007b98:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007b9a:	f107 0318 	add.w	r3, r7, #24
 8007b9e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8007ba2:	f107 030d 	add.w	r3, r7, #13
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d008      	beq.n	8007bbe <aci_gatt_add_char+0x4c>
 8007bac:	f107 030d 	add.w	r3, r7, #13
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d101      	bne.n	8007bba <aci_gatt_add_char+0x48>
 8007bb6:	2313      	movs	r3, #19
 8007bb8:	e002      	b.n	8007bc0 <aci_gatt_add_char+0x4e>
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e000      	b.n	8007bc0 <aci_gatt_add_char+0x4e>
 8007bbe:	2305      	movs	r3, #5
 8007bc0:	f107 0218 	add.w	r2, r7, #24
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007bca:	f107 0314 	add.w	r3, r7, #20
 8007bce:	2203      	movs	r2, #3
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 fd29 	bl	800862a <Osal_MemSet>
  int index_input = 0;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8007bde:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007be2:	f107 020e 	add.w	r2, r7, #14
 8007be6:	8812      	ldrh	r2, [r2, #0]
 8007be8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007bea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007bee:	3302      	adds	r3, #2
 8007bf0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007bf4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007bf8:	f107 020d 	add.w	r2, r7, #13
 8007bfc:	7812      	ldrb	r2, [r2, #0]
 8007bfe:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007c00:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007c04:	3301      	adds	r3, #1
 8007c06:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007c0a:	f107 030d 	add.w	r3, r7, #13
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d002      	beq.n	8007c1a <aci_gatt_add_char+0xa8>
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d004      	beq.n	8007c22 <aci_gatt_add_char+0xb0>
 8007c18:	e007      	b.n	8007c2a <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007c20:	e005      	b.n	8007c2e <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8007c22:	2310      	movs	r3, #16
 8007c24:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007c28:	e001      	b.n	8007c2e <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8007c2a:	2347      	movs	r3, #71	; 0x47
 8007c2c:	e086      	b.n	8007d3c <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007c2e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007c32:	1cd8      	adds	r0, r3, #3
 8007c34:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8007c38:	f107 0308 	add.w	r3, r7, #8
 8007c3c:	6819      	ldr	r1, [r3, #0]
 8007c3e:	f000 fce4 	bl	800860a <Osal_MemCpy>
    index_input += size;
 8007c42:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8007c46:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007c50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007c54:	1dba      	adds	r2, r7, #6
 8007c56:	8812      	ldrh	r2, [r2, #0]
 8007c58:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007c5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007c5e:	3302      	adds	r3, #2
 8007c60:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007c64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007c68:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007c6c:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007c6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007c72:	3301      	adds	r3, #1
 8007c74:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007c78:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007c7c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007c80:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007c82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007c86:	3301      	adds	r3, #1
 8007c88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007c8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007c90:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8007c94:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007c96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8007ca0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007ca4:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8007ca8:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007caa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007cae:	3301      	adds	r3, #1
 8007cb0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007cb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007cb8:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8007cbc:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007cbe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007cc8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007ccc:	2218      	movs	r2, #24
 8007cce:	2100      	movs	r1, #0
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f000 fcaa 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007cd6:	233f      	movs	r3, #63	; 0x3f
 8007cd8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007cdc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007ce0:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007ce4:	f107 0318 	add.w	r3, r7, #24
 8007ce8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007cec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007cf0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007cf4:	f107 0314 	add.w	r3, r7, #20
 8007cf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d02:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007d06:	2100      	movs	r1, #0
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 ffbb 	bl	8008c84 <hci_send_req>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	da01      	bge.n	8007d18 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8007d14:	23ff      	movs	r3, #255	; 0xff
 8007d16:	e011      	b.n	8007d3c <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8007d18:	f107 0314 	add.w	r3, r7, #20
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8007d22:	f107 0314 	add.w	r3, r7, #20
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	e008      	b.n	8007d3c <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8007d2a:	f107 0314 	add.w	r3, r7, #20
 8007d2e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007d38:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd90      	pop	{r4, r7, pc}

08007d46 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007d46:	b5b0      	push	{r4, r5, r7, lr}
 8007d48:	b0cc      	sub	sp, #304	; 0x130
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	460c      	mov	r4, r1
 8007d50:	4610      	mov	r0, r2
 8007d52:	4619      	mov	r1, r3
 8007d54:	1dbb      	adds	r3, r7, #6
 8007d56:	462a      	mov	r2, r5
 8007d58:	801a      	strh	r2, [r3, #0]
 8007d5a:	1d3b      	adds	r3, r7, #4
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	801a      	strh	r2, [r3, #0]
 8007d60:	1cfb      	adds	r3, r7, #3
 8007d62:	4602      	mov	r2, r0
 8007d64:	701a      	strb	r2, [r3, #0]
 8007d66:	1cbb      	adds	r3, r7, #2
 8007d68:	460a      	mov	r2, r1
 8007d6a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007d6c:	f107 0310 	add.w	r3, r7, #16
 8007d70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007d74:	f107 030f 	add.w	r3, r7, #15
 8007d78:	2200      	movs	r2, #0
 8007d7a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8007d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d86:	1dba      	adds	r2, r7, #6
 8007d88:	8812      	ldrh	r2, [r2, #0]
 8007d8a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007d8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d90:	3302      	adds	r3, #2
 8007d92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8007d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d9a:	1d3a      	adds	r2, r7, #4
 8007d9c:	8812      	ldrh	r2, [r2, #0]
 8007d9e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007da0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007da4:	3302      	adds	r3, #2
 8007da6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8007daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dae:	1cfa      	adds	r2, r7, #3
 8007db0:	7812      	ldrb	r2, [r2, #0]
 8007db2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007db4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007db8:	3301      	adds	r3, #1
 8007dba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dc2:	1cba      	adds	r2, r7, #2
 8007dc4:	7812      	ldrb	r2, [r2, #0]
 8007dc6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007dc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dcc:	3301      	adds	r3, #1
 8007dce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd6:	1d98      	adds	r0, r3, #6
 8007dd8:	1cbb      	adds	r3, r7, #2
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	461a      	mov	r2, r3
 8007dde:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007de2:	f000 fc12 	bl	800860a <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007de6:	1cbb      	adds	r3, r7, #2
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007dee:	4413      	add	r3, r2
 8007df0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007df4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007df8:	2218      	movs	r2, #24
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 fc14 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e02:	233f      	movs	r3, #63	; 0x3f
 8007e04:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8007e08:	f44f 7383 	mov.w	r3, #262	; 0x106
 8007e0c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007e10:	f107 0310 	add.w	r3, r7, #16
 8007e14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007e20:	f107 030f 	add.w	r3, r7, #15
 8007e24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e32:	2100      	movs	r1, #0
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 ff25 	bl	8008c84 <hci_send_req>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	da01      	bge.n	8007e44 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8007e40:	23ff      	movs	r3, #255	; 0xff
 8007e42:	e002      	b.n	8007e4a <aci_gatt_update_char_value+0x104>
  return status;
 8007e44:	f107 030f 	add.w	r3, r7, #15
 8007e48:	781b      	ldrb	r3, [r3, #0]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bdb0      	pop	{r4, r5, r7, pc}

08007e54 <aci_gatt_exchange_config>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_exchange_config( uint16_t Connection_Handle )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b0cc      	sub	sp, #304	; 0x130
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	1dbb      	adds	r3, r7, #6
 8007e5e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
 8007e60:	f107 0310 	add.w	r3, r7, #16
 8007e64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007e68:	f107 030f 	add.w	r3, r7, #15
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e70:	2300      	movs	r3, #0
 8007e72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e7a:	1dba      	adds	r2, r7, #6
 8007e7c:	8812      	ldrh	r2, [r2, #0]
 8007e7e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007e80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e84:	3302      	adds	r3, #2
 8007e86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e8e:	2218      	movs	r2, #24
 8007e90:	2100      	movs	r1, #0
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 fbc9 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e98:	233f      	movs	r3, #63	; 0x3f
 8007e9a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x10b;
 8007e9e:	f240 130b 	movw	r3, #267	; 0x10b
 8007ea2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8007ea6:	230f      	movs	r3, #15
 8007ea8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8007eac:	f107 0310 	add.w	r3, r7, #16
 8007eb0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007eb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007eb8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007ebc:	f107 030f 	add.w	r3, r7, #15
 8007ec0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007eca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ece:	2100      	movs	r1, #0
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 fed7 	bl	8008c84 <hci_send_req>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	da01      	bge.n	8007ee0 <aci_gatt_exchange_config+0x8c>
    return BLE_STATUS_TIMEOUT;
 8007edc:	23ff      	movs	r3, #255	; 0xff
 8007ede:	e002      	b.n	8007ee6 <aci_gatt_exchange_config+0x92>
  return status;
 8007ee0:	f107 030f 	add.w	r3, r7, #15
 8007ee4:	781b      	ldrb	r3, [r3, #0]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <aci_gatt_disc_all_primary_services>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_disc_all_primary_services( uint16_t Connection_Handle )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b0cc      	sub	sp, #304	; 0x130
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	1dbb      	adds	r3, r7, #6
 8007efa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 8007efc:	f107 0310 	add.w	r3, r7, #16
 8007f00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007f04:	f107 030f 	add.w	r3, r7, #15
 8007f08:	2200      	movs	r2, #0
 8007f0a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f16:	1dba      	adds	r2, r7, #6
 8007f18:	8812      	ldrh	r2, [r2, #0]
 8007f1a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007f1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f20:	3302      	adds	r3, #2
 8007f22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f2a:	2218      	movs	r2, #24
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 fb7b 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f34:	233f      	movs	r3, #63	; 0x3f
 8007f36:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 8007f3a:	f44f 7389 	mov.w	r3, #274	; 0x112
 8007f3e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8007f42:	230f      	movs	r3, #15
 8007f44:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8007f48:	f107 0310 	add.w	r3, r7, #16
 8007f4c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007f50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007f58:	f107 030f 	add.w	r3, r7, #15
 8007f5c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007f60:	2301      	movs	r3, #1
 8007f62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 fe89 	bl	8008c84 <hci_send_req>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	da01      	bge.n	8007f7c <aci_gatt_disc_all_primary_services+0x8c>
    return BLE_STATUS_TIMEOUT;
 8007f78:	23ff      	movs	r3, #255	; 0xff
 8007f7a:	e002      	b.n	8007f82 <aci_gatt_disc_all_primary_services+0x92>
  return status;
 8007f7c:	f107 030f 	add.w	r3, r7, #15
 8007f80:	781b      	ldrb	r3, [r3, #0]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service( uint16_t Connection_Handle,
                                              uint16_t Start_Handle,
                                              uint16_t End_Handle )
{
 8007f8c:	b590      	push	{r4, r7, lr}
 8007f8e:	b0cd      	sub	sp, #308	; 0x134
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	4604      	mov	r4, r0
 8007f94:	4608      	mov	r0, r1
 8007f96:	4611      	mov	r1, r2
 8007f98:	1dbb      	adds	r3, r7, #6
 8007f9a:	4622      	mov	r2, r4
 8007f9c:	801a      	strh	r2, [r3, #0]
 8007f9e:	1d3b      	adds	r3, r7, #4
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	801a      	strh	r2, [r3, #0]
 8007fa4:	1cbb      	adds	r3, r7, #2
 8007fa6:	460a      	mov	r2, r1
 8007fa8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 8007faa:	f107 0310 	add.w	r3, r7, #16
 8007fae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007fb2:	f107 030f 	add.w	r3, r7, #15
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007fc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc4:	1dba      	adds	r2, r7, #6
 8007fc6:	8812      	ldrh	r2, [r2, #0]
 8007fc8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007fca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fce:	3302      	adds	r3, #2
 8007fd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = Start_Handle;
 8007fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd8:	1d3a      	adds	r2, r7, #4
 8007fda:	8812      	ldrh	r2, [r2, #0]
 8007fdc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007fde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fe2:	3302      	adds	r3, #2
 8007fe4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 8007fe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fec:	1cba      	adds	r2, r7, #2
 8007fee:	8812      	ldrh	r2, [r2, #0]
 8007ff0:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8007ff2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ff6:	3302      	adds	r3, #2
 8007ff8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ffc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008000:	2218      	movs	r2, #24
 8008002:	2100      	movs	r1, #0
 8008004:	4618      	mov	r0, r3
 8008006:	f000 fb10 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 800800a:	233f      	movs	r3, #63	; 0x3f
 800800c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 8008010:	f240 1315 	movw	r3, #277	; 0x115
 8008014:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008018:	230f      	movs	r3, #15
 800801a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800801e:	f107 0310 	add.w	r3, r7, #16
 8008022:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008026:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800802a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800802e:	f107 030f 	add.w	r3, r7, #15
 8008032:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008036:	2301      	movs	r3, #1
 8008038:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800803c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008040:	2100      	movs	r1, #0
 8008042:	4618      	mov	r0, r3
 8008044:	f000 fe1e 	bl	8008c84 <hci_send_req>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	da01      	bge.n	8008052 <aci_gatt_disc_all_char_of_service+0xc6>
    return BLE_STATUS_TIMEOUT;
 800804e:	23ff      	movs	r3, #255	; 0xff
 8008050:	e002      	b.n	8008058 <aci_gatt_disc_all_char_of_service+0xcc>
  return status;
 8008052:	f107 030f 	add.w	r3, r7, #15
 8008056:	781b      	ldrb	r3, [r3, #0]
}
 8008058:	4618      	mov	r0, r3
 800805a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800805e:	46bd      	mov	sp, r7
 8008060:	bd90      	pop	{r4, r7, pc}

08008062 <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc( uint16_t Connection_Handle,
                                        uint16_t Char_Handle,
                                        uint16_t End_Handle )
{
 8008062:	b590      	push	{r4, r7, lr}
 8008064:	b0cd      	sub	sp, #308	; 0x134
 8008066:	af00      	add	r7, sp, #0
 8008068:	4604      	mov	r4, r0
 800806a:	4608      	mov	r0, r1
 800806c:	4611      	mov	r1, r2
 800806e:	1dbb      	adds	r3, r7, #6
 8008070:	4622      	mov	r2, r4
 8008072:	801a      	strh	r2, [r3, #0]
 8008074:	1d3b      	adds	r3, r7, #4
 8008076:	4602      	mov	r2, r0
 8008078:	801a      	strh	r2, [r3, #0]
 800807a:	1cbb      	adds	r3, r7, #2
 800807c:	460a      	mov	r2, r1
 800807e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 8008080:	f107 0310 	add.w	r3, r7, #16
 8008084:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008088:	f107 030f 	add.w	r3, r7, #15
 800808c:	2200      	movs	r2, #0
 800808e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008090:	2300      	movs	r3, #0
 8008092:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800809a:	1dba      	adds	r2, r7, #6
 800809c:	8812      	ldrh	r2, [r2, #0]
 800809e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80080a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080a4:	3302      	adds	r3, #2
 80080a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80080aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ae:	1d3a      	adds	r2, r7, #4
 80080b0:	8812      	ldrh	r2, [r2, #0]
 80080b2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80080b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080b8:	3302      	adds	r3, #2
 80080ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 80080be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c2:	1cba      	adds	r2, r7, #2
 80080c4:	8812      	ldrh	r2, [r2, #0]
 80080c6:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80080c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080cc:	3302      	adds	r3, #2
 80080ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80080d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080d6:	2218      	movs	r2, #24
 80080d8:	2100      	movs	r1, #0
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 faa5 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 80080e0:	233f      	movs	r3, #63	; 0x3f
 80080e2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 80080e6:	f240 1317 	movw	r3, #279	; 0x117
 80080ea:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80080ee:	230f      	movs	r3, #15
 80080f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80080f4:	f107 0310 	add.w	r3, r7, #16
 80080f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80080fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008100:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008104:	f107 030f 	add.w	r3, r7, #15
 8008108:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800810c:	2301      	movs	r3, #1
 800810e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008112:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008116:	2100      	movs	r1, #0
 8008118:	4618      	mov	r0, r3
 800811a:	f000 fdb3 	bl	8008c84 <hci_send_req>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	da01      	bge.n	8008128 <aci_gatt_disc_all_char_desc+0xc6>
    return BLE_STATUS_TIMEOUT;
 8008124:	23ff      	movs	r3, #255	; 0xff
 8008126:	e002      	b.n	800812e <aci_gatt_disc_all_char_desc+0xcc>
  return status;
 8008128:	f107 030f 	add.w	r3, r7, #15
 800812c:	781b      	ldrb	r3, [r3, #0]
}
 800812e:	4618      	mov	r0, r3
 8008130:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008134:	46bd      	mov	sp, r7
 8008136:	bd90      	pop	{r4, r7, pc}

08008138 <aci_gatt_write_resp>:
                                uint16_t Attr_Handle,
                                uint8_t Write_status,
                                uint8_t Error_Code,
                                uint8_t Attribute_Val_Length,
                                const uint8_t* Attribute_Val )
{
 8008138:	b5b0      	push	{r4, r5, r7, lr}
 800813a:	b0cc      	sub	sp, #304	; 0x130
 800813c:	af00      	add	r7, sp, #0
 800813e:	4605      	mov	r5, r0
 8008140:	460c      	mov	r4, r1
 8008142:	4610      	mov	r0, r2
 8008144:	4619      	mov	r1, r3
 8008146:	1dbb      	adds	r3, r7, #6
 8008148:	462a      	mov	r2, r5
 800814a:	801a      	strh	r2, [r3, #0]
 800814c:	1d3b      	adds	r3, r7, #4
 800814e:	4622      	mov	r2, r4
 8008150:	801a      	strh	r2, [r3, #0]
 8008152:	1cfb      	adds	r3, r7, #3
 8008154:	4602      	mov	r2, r0
 8008156:	701a      	strb	r2, [r3, #0]
 8008158:	1cbb      	adds	r3, r7, #2
 800815a:	460a      	mov	r2, r1
 800815c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_resp_cp0 *cp0 = (aci_gatt_write_resp_cp0*)(cmd_buffer);
 800815e:	f107 0310 	add.w	r3, r7, #16
 8008162:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008166:	f107 030f 	add.w	r3, r7, #15
 800816a:	2200      	movs	r2, #0
 800816c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008178:	1dba      	adds	r2, r7, #6
 800817a:	8812      	ldrh	r2, [r2, #0]
 800817c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800817e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008182:	3302      	adds	r3, #2
 8008184:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attr_Handle = Attr_Handle;
 8008188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800818c:	1d3a      	adds	r2, r7, #4
 800818e:	8812      	ldrh	r2, [r2, #0]
 8008190:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008192:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008196:	3302      	adds	r3, #2
 8008198:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Write_status = Write_status;
 800819c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081a0:	1cfa      	adds	r2, r7, #3
 80081a2:	7812      	ldrb	r2, [r2, #0]
 80081a4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80081a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081aa:	3301      	adds	r3, #1
 80081ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Error_Code = Error_Code;
 80081b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081b4:	1cba      	adds	r2, r7, #2
 80081b6:	7812      	ldrb	r2, [r2, #0]
 80081b8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80081ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081be:	3301      	adds	r3, #1
 80081c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 80081c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081c8:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80081cc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80081ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081d2:	3301      	adds	r3, #1
 80081d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 80081d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081dc:	3307      	adds	r3, #7
 80081de:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80081e2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 fa0f 	bl	800860a <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 80081ec:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 80081f0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80081f4:	4413      	add	r3, r2
 80081f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80081fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081fe:	2218      	movs	r2, #24
 8008200:	2100      	movs	r1, #0
 8008202:	4618      	mov	r0, r3
 8008204:	f000 fa11 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 8008208:	233f      	movs	r3, #63	; 0x3f
 800820a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x126;
 800820e:	f44f 7393 	mov.w	r3, #294	; 0x126
 8008212:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008216:	f107 0310 	add.w	r3, r7, #16
 800821a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800821e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008222:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008226:	f107 030f 	add.w	r3, r7, #15
 800822a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800822e:	2301      	movs	r3, #1
 8008230:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008234:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008238:	2100      	movs	r1, #0
 800823a:	4618      	mov	r0, r3
 800823c:	f000 fd22 	bl	8008c84 <hci_send_req>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	da01      	bge.n	800824a <aci_gatt_write_resp+0x112>
    return BLE_STATUS_TIMEOUT;
 8008246:	23ff      	movs	r3, #255	; 0xff
 8008248:	e002      	b.n	8008250 <aci_gatt_write_resp+0x118>
  return status;
 800824a:	f107 030f 	add.w	r3, r7, #15
 800824e:	781b      	ldrb	r3, [r3, #0]
}
 8008250:	4618      	mov	r0, r3
 8008252:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008256:	46bd      	mov	sp, r7
 8008258:	bdb0      	pop	{r4, r5, r7, pc}

0800825a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b0cc      	sub	sp, #304	; 0x130
 800825e:	af00      	add	r7, sp, #0
 8008260:	463b      	mov	r3, r7
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	1dfb      	adds	r3, r7, #7
 8008266:	4602      	mov	r2, r0
 8008268:	701a      	strb	r2, [r3, #0]
 800826a:	1dbb      	adds	r3, r7, #6
 800826c:	460a      	mov	r2, r1
 800826e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8008270:	f107 0310 	add.w	r3, r7, #16
 8008274:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008278:	f107 030f 	add.w	r3, r7, #15
 800827c:	2200      	movs	r2, #0
 800827e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008280:	2300      	movs	r3, #0
 8008282:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8008286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800828a:	1dfa      	adds	r2, r7, #7
 800828c:	7812      	ldrb	r2, [r2, #0]
 800828e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008290:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008294:	3301      	adds	r3, #1
 8008296:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800829a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800829e:	1dba      	adds	r2, r7, #6
 80082a0:	7812      	ldrb	r2, [r2, #0]
 80082a2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80082a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082a8:	3301      	adds	r3, #1
 80082aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80082ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082b2:	1c98      	adds	r0, r3, #2
 80082b4:	1dbb      	adds	r3, r7, #6
 80082b6:	781a      	ldrb	r2, [r3, #0]
 80082b8:	463b      	mov	r3, r7
 80082ba:	6819      	ldr	r1, [r3, #0]
 80082bc:	f000 f9a5 	bl	800860a <Osal_MemCpy>
  index_input += Length;
 80082c0:	1dbb      	adds	r3, r7, #6
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80082c8:	4413      	add	r3, r2
 80082ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80082ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80082d2:	2218      	movs	r2, #24
 80082d4:	2100      	movs	r1, #0
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 f9a7 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 80082dc:	233f      	movs	r3, #63	; 0x3f
 80082de:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80082e2:	230c      	movs	r3, #12
 80082e4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80082e8:	f107 0310 	add.w	r3, r7, #16
 80082ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80082f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80082f8:	f107 030f 	add.w	r3, r7, #15
 80082fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008300:	2301      	movs	r3, #1
 8008302:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008306:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800830a:	2100      	movs	r1, #0
 800830c:	4618      	mov	r0, r3
 800830e:	f000 fcb9 	bl	8008c84 <hci_send_req>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	da01      	bge.n	800831c <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8008318:	23ff      	movs	r3, #255	; 0xff
 800831a:	e002      	b.n	8008322 <aci_hal_write_config_data+0xc8>
  return status;
 800831c:	f107 030f 	add.w	r3, r7, #15
 8008320:	781b      	ldrb	r3, [r3, #0]
}
 8008322:	4618      	mov	r0, r3
 8008324:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b0cc      	sub	sp, #304	; 0x130
 8008330:	af00      	add	r7, sp, #0
 8008332:	4602      	mov	r2, r0
 8008334:	1dfb      	adds	r3, r7, #7
 8008336:	701a      	strb	r2, [r3, #0]
 8008338:	1dbb      	adds	r3, r7, #6
 800833a:	460a      	mov	r2, r1
 800833c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800833e:	f107 0310 	add.w	r3, r7, #16
 8008342:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008346:	f107 030f 	add.w	r3, r7, #15
 800834a:	2200      	movs	r2, #0
 800834c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800834e:	2300      	movs	r3, #0
 8008350:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8008354:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008358:	1dfa      	adds	r2, r7, #7
 800835a:	7812      	ldrb	r2, [r2, #0]
 800835c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800835e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008362:	3301      	adds	r3, #1
 8008364:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8008368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800836c:	1dba      	adds	r2, r7, #6
 800836e:	7812      	ldrb	r2, [r2, #0]
 8008370:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008372:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008376:	3301      	adds	r3, #1
 8008378:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800837c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008380:	2218      	movs	r2, #24
 8008382:	2100      	movs	r1, #0
 8008384:	4618      	mov	r0, r3
 8008386:	f000 f950 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 800838a:	233f      	movs	r3, #63	; 0x3f
 800838c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8008390:	230f      	movs	r3, #15
 8008392:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008396:	f107 0310 	add.w	r3, r7, #16
 800839a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800839e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80083a6:	f107 030f 	add.w	r3, r7, #15
 80083aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80083ae:	2301      	movs	r3, #1
 80083b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80083b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80083b8:	2100      	movs	r1, #0
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 fc62 	bl	8008c84 <hci_send_req>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	da01      	bge.n	80083ca <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 80083c6:	23ff      	movs	r3, #255	; 0xff
 80083c8:	e002      	b.n	80083d0 <aci_hal_set_tx_power_level+0xa4>
  return status;
 80083ca:	f107 030f 	add.w	r3, r7, #15
 80083ce:	781b      	ldrb	r3, [r3, #0]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b088      	sub	sp, #32
 80083de:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80083e0:	2300      	movs	r3, #0
 80083e2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80083e4:	f107 0308 	add.w	r3, r7, #8
 80083e8:	2218      	movs	r2, #24
 80083ea:	2100      	movs	r1, #0
 80083ec:	4618      	mov	r0, r3
 80083ee:	f000 f91c 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x03;
 80083f2:	2303      	movs	r3, #3
 80083f4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80083f6:	2303      	movs	r3, #3
 80083f8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80083fa:	1dfb      	adds	r3, r7, #7
 80083fc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80083fe:	2301      	movs	r3, #1
 8008400:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008402:	f107 0308 	add.w	r3, r7, #8
 8008406:	2100      	movs	r1, #0
 8008408:	4618      	mov	r0, r3
 800840a:	f000 fc3b 	bl	8008c84 <hci_send_req>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	da01      	bge.n	8008418 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008414:	23ff      	movs	r3, #255	; 0xff
 8008416:	e000      	b.n	800841a <hci_reset+0x40>
  return status;
 8008418:	79fb      	ldrb	r3, [r7, #7]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3720      	adds	r7, #32
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <hci_le_set_data_length>:
}

tBleStatus hci_le_set_data_length( uint16_t Connection_Handle,
                                   uint16_t TxOctets,
                                   uint16_t TxTime )
{
 8008422:	b590      	push	{r4, r7, lr}
 8008424:	b0cd      	sub	sp, #308	; 0x134
 8008426:	af00      	add	r7, sp, #0
 8008428:	4604      	mov	r4, r0
 800842a:	4608      	mov	r0, r1
 800842c:	4611      	mov	r1, r2
 800842e:	1dbb      	adds	r3, r7, #6
 8008430:	4622      	mov	r2, r4
 8008432:	801a      	strh	r2, [r3, #0]
 8008434:	1d3b      	adds	r3, r7, #4
 8008436:	4602      	mov	r2, r0
 8008438:	801a      	strh	r2, [r3, #0]
 800843a:	1cbb      	adds	r3, r7, #2
 800843c:	460a      	mov	r2, r1
 800843e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_data_length_cp0 *cp0 = (hci_le_set_data_length_cp0*)(cmd_buffer);
 8008440:	f107 0310 	add.w	r3, r7, #16
 8008444:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  hci_le_set_data_length_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008448:	f107 030c 	add.w	r3, r7, #12
 800844c:	2203      	movs	r2, #3
 800844e:	2100      	movs	r1, #0
 8008450:	4618      	mov	r0, r3
 8008452:	f000 f8ea 	bl	800862a <Osal_MemSet>
  int index_input = 0;
 8008456:	2300      	movs	r3, #0
 8008458:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800845c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008460:	1dba      	adds	r2, r7, #6
 8008462:	8812      	ldrh	r2, [r2, #0]
 8008464:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008466:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800846a:	3302      	adds	r3, #2
 800846c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TxOctets = TxOctets;
 8008470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008474:	1d3a      	adds	r2, r7, #4
 8008476:	8812      	ldrh	r2, [r2, #0]
 8008478:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800847a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800847e:	3302      	adds	r3, #2
 8008480:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TxTime = TxTime;
 8008484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008488:	1cba      	adds	r2, r7, #2
 800848a:	8812      	ldrh	r2, [r2, #0]
 800848c:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800848e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008492:	3302      	adds	r3, #2
 8008494:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008498:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800849c:	2218      	movs	r2, #24
 800849e:	2100      	movs	r1, #0
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 f8c2 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x08;
 80084a6:	2308      	movs	r3, #8
 80084a8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x022;
 80084ac:	2322      	movs	r3, #34	; 0x22
 80084ae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80084b2:	f107 0310 	add.w	r3, r7, #16
 80084b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80084ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80084c2:	f107 030c 	add.w	r3, r7, #12
 80084c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80084ca:	2303      	movs	r3, #3
 80084cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80084d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80084d4:	2100      	movs	r1, #0
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 fbd4 	bl	8008c84 <hci_send_req>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	da01      	bge.n	80084e6 <hci_le_set_data_length+0xc4>
    return BLE_STATUS_TIMEOUT;
 80084e2:	23ff      	movs	r3, #255	; 0xff
 80084e4:	e009      	b.n	80084fa <hci_le_set_data_length+0xd8>
  if ( resp.Status )
 80084e6:	f107 030c 	add.w	r3, r7, #12
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d003      	beq.n	80084f8 <hci_le_set_data_length+0xd6>
    return resp.Status;
 80084f0:	f107 030c 	add.w	r3, r7, #12
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	e000      	b.n	80084fa <hci_le_set_data_length+0xd8>
  return BLE_STATUS_SUCCESS;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008500:	46bd      	mov	sp, r7
 8008502:	bd90      	pop	{r4, r7, pc}

08008504 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Slave_latency,
                                                      uint16_t Timeout_Multiplier )
{
 8008504:	b5b0      	push	{r4, r5, r7, lr}
 8008506:	b0cc      	sub	sp, #304	; 0x130
 8008508:	af00      	add	r7, sp, #0
 800850a:	4605      	mov	r5, r0
 800850c:	460c      	mov	r4, r1
 800850e:	4610      	mov	r0, r2
 8008510:	4619      	mov	r1, r3
 8008512:	1dbb      	adds	r3, r7, #6
 8008514:	462a      	mov	r2, r5
 8008516:	801a      	strh	r2, [r3, #0]
 8008518:	1d3b      	adds	r3, r7, #4
 800851a:	4622      	mov	r2, r4
 800851c:	801a      	strh	r2, [r3, #0]
 800851e:	1cbb      	adds	r3, r7, #2
 8008520:	4602      	mov	r2, r0
 8008522:	801a      	strh	r2, [r3, #0]
 8008524:	463b      	mov	r3, r7
 8008526:	460a      	mov	r2, r1
 8008528:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 800852a:	f107 0310 	add.w	r3, r7, #16
 800852e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008532:	f107 030f 	add.w	r3, r7, #15
 8008536:	2200      	movs	r2, #0
 8008538:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008544:	1dba      	adds	r2, r7, #6
 8008546:	8812      	ldrh	r2, [r2, #0]
 8008548:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800854a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800854e:	3302      	adds	r3, #2
 8008550:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8008554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008558:	1d3a      	adds	r2, r7, #4
 800855a:	8812      	ldrh	r2, [r2, #0]
 800855c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800855e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008562:	3302      	adds	r3, #2
 8008564:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8008568:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800856c:	1cba      	adds	r2, r7, #2
 800856e:	8812      	ldrh	r2, [r2, #0]
 8008570:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8008572:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008576:	3302      	adds	r3, #2
 8008578:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = Slave_latency;
 800857c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008580:	463a      	mov	r2, r7
 8008582:	8812      	ldrh	r2, [r2, #0]
 8008584:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8008586:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800858a:	3302      	adds	r3, #2
 800858c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8008590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008594:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8008598:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800859a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800859e:	3302      	adds	r3, #2
 80085a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80085a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80085a8:	2218      	movs	r2, #24
 80085aa:	2100      	movs	r1, #0
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 f83c 	bl	800862a <Osal_MemSet>
  rq.ogf = 0x3f;
 80085b2:	233f      	movs	r3, #63	; 0x3f
 80085b4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 80085b8:	f240 1381 	movw	r3, #385	; 0x181
 80085bc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80085c0:	230f      	movs	r3, #15
 80085c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80085c6:	f107 0310 	add.w	r3, r7, #16
 80085ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80085ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80085d6:	f107 030f 	add.w	r3, r7, #15
 80085da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80085de:	2301      	movs	r3, #1
 80085e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80085e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80085e8:	2100      	movs	r1, #0
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 fb4a 	bl	8008c84 <hci_send_req>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	da01      	bge.n	80085fa <aci_l2cap_connection_parameter_update_req+0xf6>
    return BLE_STATUS_TIMEOUT;
 80085f6:	23ff      	movs	r3, #255	; 0xff
 80085f8:	e002      	b.n	8008600 <aci_l2cap_connection_parameter_update_req+0xfc>
  return status;
 80085fa:	f107 030f 	add.w	r3, r7, #15
 80085fe:	781b      	ldrb	r3, [r3, #0]
}
 8008600:	4618      	mov	r0, r3
 8008602:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008606:	46bd      	mov	sp, r7
 8008608:	bdb0      	pop	{r4, r5, r7, pc}

0800860a <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b084      	sub	sp, #16
 800860e:	af00      	add	r7, sp, #0
 8008610:	60f8      	str	r0, [r7, #12]
 8008612:	60b9      	str	r1, [r7, #8]
 8008614:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	68b9      	ldr	r1, [r7, #8]
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f007 fef4 	bl	8010408 <memcpy>
 8008620:	4603      	mov	r3, r0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b084      	sub	sp, #16
 800862e:	af00      	add	r7, sp, #0
 8008630:	60f8      	str	r0, [r7, #12]
 8008632:	60b9      	str	r1, [r7, #8]
 8008634:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	68b9      	ldr	r1, [r7, #8]
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f007 feef 	bl	801041e <memset>
 8008640:	4603      	mov	r3, r0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
	...

0800864c <DIS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DIS_Init(void)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b088      	sub	sp, #32
 8008650:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult;

  memset ( &DIS_Context, 0, sizeof(DIS_Context_t) );
 8008652:	2204      	movs	r2, #4
 8008654:	2100      	movs	r1, #0
 8008656:	4816      	ldr	r0, [pc, #88]	; (80086b0 <DIS_Init+0x64>)
 8008658:	f007 fee1 	bl	801041e <memset>
   */

  /**
   *  Add Device Information Service
   */
  uuid = DEVICE_INFORMATION_SERVICE_UUID;
 800865c:	f641 030a 	movw	r3, #6154	; 0x180a
 8008660:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 8008662:	1d39      	adds	r1, r7, #4
 8008664:	4b12      	ldr	r3, [pc, #72]	; (80086b0 <DIS_Init+0x64>)
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	2303      	movs	r3, #3
 800866a:	2201      	movs	r2, #1
 800866c:	2001      	movs	r0, #1
 800866e:	f7ff f9d1 	bl	8007a14 <aci_gatt_add_service>
 8008672:	4603      	mov	r3, r0
 8008674:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
  /**
   *  Add Manufacturer Name String Characteristic
   */
  uuid = MANUFACTURER_NAME_UUID;
 8008676:	f642 2329 	movw	r3, #10793	; 0x2a29
 800867a:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(DIS_Context.DeviceInformationSvcHdle,
 800867c:	4b0c      	ldr	r3, [pc, #48]	; (80086b0 <DIS_Init+0x64>)
 800867e:	8818      	ldrh	r0, [r3, #0]
 8008680:	1d3a      	adds	r2, r7, #4
 8008682:	4b0c      	ldr	r3, [pc, #48]	; (80086b4 <DIS_Init+0x68>)
 8008684:	9305      	str	r3, [sp, #20]
 8008686:	2301      	movs	r3, #1
 8008688:	9304      	str	r3, [sp, #16]
 800868a:	230a      	movs	r3, #10
 800868c:	9303      	str	r3, [sp, #12]
 800868e:	2300      	movs	r3, #0
 8008690:	9302      	str	r3, [sp, #8]
 8008692:	2300      	movs	r3, #0
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	2302      	movs	r3, #2
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	2320      	movs	r3, #32
 800869c:	2101      	movs	r1, #1
 800869e:	f7ff fa68 	bl	8007b72 <aci_gatt_add_char>
 80086a2:	4603      	mov	r3, r0
 80086a4:	71fb      	strb	r3, [r7, #7]
    BLE_DBG_DIS_MSG ("FAILED to add PNP ID Characteristic, Error: %02X !!\n", 
                hciCmdResult);
  }
#endif
      
  return;
 80086a6:	bf00      	nop
}
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	20000130 	.word	0x20000130
 80086b4:	20000132 	.word	0x20000132

080086b8 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b08a      	sub	sp, #40	; 0x28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 80086c0:	2300      	movs	r3, #0
 80086c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	3301      	adds	r3, #1
 80086ca:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 80086cc:	6a3b      	ldr	r3, [r7, #32]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	2bff      	cmp	r3, #255	; 0xff
 80086d2:	d000      	beq.n	80086d6 <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 80086d4:	e04d      	b.n	8008772 <PeerToPeer_Event_Handler+0xba>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	3302      	adds	r3, #2
 80086da:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	461a      	mov	r2, r3
 80086e4:	f640 4301 	movw	r3, #3073	; 0xc01
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d000      	beq.n	80086ee <PeerToPeer_Event_Handler+0x36>
          break;
 80086ec:	e040      	b.n	8008770 <PeerToPeer_Event_Handler+0xb8>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	3302      	adds	r3, #2
 80086f2:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	885b      	ldrh	r3, [r3, #2]
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	461a      	mov	r2, r3
 80086fc:	4b20      	ldr	r3, [pc, #128]	; (8008780 <PeerToPeer_Event_Handler+0xc8>)
 80086fe:	889b      	ldrh	r3, [r3, #4]
 8008700:	3302      	adds	r3, #2
 8008702:	429a      	cmp	r2, r3
 8008704:	d118      	bne.n	8008738 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 8008706:	2301      	movs	r3, #1
 8008708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	7a1b      	ldrb	r3, [r3, #8]
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	2b00      	cmp	r3, #0
 8008716:	d007      	beq.n	8008728 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8008718:	2300      	movs	r3, #0
 800871a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800871c:	f107 0308 	add.w	r3, r7, #8
 8008720:	4618      	mov	r0, r3
 8008722:	f007 f993 	bl	800fa4c <P2PS_STM_App_Notification>
        break;
 8008726:	e022      	b.n	800876e <PeerToPeer_Event_Handler+0xb6>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8008728:	2301      	movs	r3, #1
 800872a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800872c:	f107 0308 	add.w	r3, r7, #8
 8008730:	4618      	mov	r0, r3
 8008732:	f007 f98b 	bl	800fa4c <P2PS_STM_App_Notification>
        break;
 8008736:	e01a      	b.n	800876e <PeerToPeer_Event_Handler+0xb6>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	885b      	ldrh	r3, [r3, #2]
 800873c:	b29b      	uxth	r3, r3
 800873e:	461a      	mov	r2, r3
 8008740:	4b0f      	ldr	r3, [pc, #60]	; (8008780 <PeerToPeer_Event_Handler+0xc8>)
 8008742:	885b      	ldrh	r3, [r3, #2]
 8008744:	3301      	adds	r3, #1
 8008746:	429a      	cmp	r2, r3
 8008748:	d111      	bne.n	800876e <PeerToPeer_Event_Handler+0xb6>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 800874a:	480e      	ldr	r0, [pc, #56]	; (8008784 <PeerToPeer_Event_Handler+0xcc>)
 800874c:	f007 fee4 	bl	8010518 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8008750:	2303      	movs	r3, #3
 8008752:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	88db      	ldrh	r3, [r3, #6]
 8008758:	b29b      	uxth	r3, r3
 800875a:	b2db      	uxtb	r3, r3
 800875c:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	3308      	adds	r3, #8
 8008762:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8008764:	f107 0308 	add.w	r3, r7, #8
 8008768:	4618      	mov	r0, r3
 800876a:	f007 f96f 	bl	800fa4c <P2PS_STM_App_Notification>
        break;
 800876e:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 8008770:	bf00      	nop
  }

  return(return_value);
 8008772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8008776:	4618      	mov	r0, r3
 8008778:	3728      	adds	r7, #40	; 0x28
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000134 	.word	0x20000134
 8008784:	08011928 	.word	0x08011928

08008788 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08a      	sub	sp, #40	; 0x28
 800878c:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800878e:	484a      	ldr	r0, [pc, #296]	; (80088b8 <P2PS_STM_Init+0x130>)
 8008790:	f000 f922 	bl	80089d8 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8008794:	238f      	movs	r3, #143	; 0x8f
 8008796:	703b      	strb	r3, [r7, #0]
 8008798:	23e5      	movs	r3, #229	; 0xe5
 800879a:	707b      	strb	r3, [r7, #1]
 800879c:	23b3      	movs	r3, #179	; 0xb3
 800879e:	70bb      	strb	r3, [r7, #2]
 80087a0:	23d5      	movs	r3, #213	; 0xd5
 80087a2:	70fb      	strb	r3, [r7, #3]
 80087a4:	232e      	movs	r3, #46	; 0x2e
 80087a6:	713b      	strb	r3, [r7, #4]
 80087a8:	237f      	movs	r3, #127	; 0x7f
 80087aa:	717b      	strb	r3, [r7, #5]
 80087ac:	234a      	movs	r3, #74	; 0x4a
 80087ae:	71bb      	strb	r3, [r7, #6]
 80087b0:	2398      	movs	r3, #152	; 0x98
 80087b2:	71fb      	strb	r3, [r7, #7]
 80087b4:	232a      	movs	r3, #42	; 0x2a
 80087b6:	723b      	strb	r3, [r7, #8]
 80087b8:	2348      	movs	r3, #72	; 0x48
 80087ba:	727b      	strb	r3, [r7, #9]
 80087bc:	237a      	movs	r3, #122	; 0x7a
 80087be:	72bb      	strb	r3, [r7, #10]
 80087c0:	23cc      	movs	r3, #204	; 0xcc
 80087c2:	72fb      	strb	r3, [r7, #11]
 80087c4:	2340      	movs	r3, #64	; 0x40
 80087c6:	733b      	strb	r3, [r7, #12]
 80087c8:	23fe      	movs	r3, #254	; 0xfe
 80087ca:	737b      	strb	r3, [r7, #13]
 80087cc:	2300      	movs	r3, #0
 80087ce:	73bb      	strb	r3, [r7, #14]
 80087d0:	2300      	movs	r3, #0
 80087d2:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 80087d4:	4639      	mov	r1, r7
 80087d6:	4b39      	ldr	r3, [pc, #228]	; (80088bc <P2PS_STM_Init+0x134>)
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	2308      	movs	r3, #8
 80087dc:	2201      	movs	r2, #1
 80087de:	2002      	movs	r0, #2
 80087e0:	f7ff f918 	bl	8007a14 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 80087e4:	2319      	movs	r3, #25
 80087e6:	703b      	strb	r3, [r7, #0]
 80087e8:	23ed      	movs	r3, #237	; 0xed
 80087ea:	707b      	strb	r3, [r7, #1]
 80087ec:	2382      	movs	r3, #130	; 0x82
 80087ee:	70bb      	strb	r3, [r7, #2]
 80087f0:	23ae      	movs	r3, #174	; 0xae
 80087f2:	70fb      	strb	r3, [r7, #3]
 80087f4:	23ed      	movs	r3, #237	; 0xed
 80087f6:	713b      	strb	r3, [r7, #4]
 80087f8:	2321      	movs	r3, #33	; 0x21
 80087fa:	717b      	strb	r3, [r7, #5]
 80087fc:	234c      	movs	r3, #76	; 0x4c
 80087fe:	71bb      	strb	r3, [r7, #6]
 8008800:	239d      	movs	r3, #157	; 0x9d
 8008802:	71fb      	strb	r3, [r7, #7]
 8008804:	2341      	movs	r3, #65	; 0x41
 8008806:	723b      	strb	r3, [r7, #8]
 8008808:	2345      	movs	r3, #69	; 0x45
 800880a:	727b      	strb	r3, [r7, #9]
 800880c:	2322      	movs	r3, #34	; 0x22
 800880e:	72bb      	strb	r3, [r7, #10]
 8008810:	238e      	movs	r3, #142	; 0x8e
 8008812:	72fb      	strb	r3, [r7, #11]
 8008814:	2341      	movs	r3, #65	; 0x41
 8008816:	733b      	strb	r3, [r7, #12]
 8008818:	23fe      	movs	r3, #254	; 0xfe
 800881a:	737b      	strb	r3, [r7, #13]
 800881c:	2300      	movs	r3, #0
 800881e:	73bb      	strb	r3, [r7, #14]
 8008820:	2300      	movs	r3, #0
 8008822:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8008824:	4b25      	ldr	r3, [pc, #148]	; (80088bc <P2PS_STM_Init+0x134>)
 8008826:	8818      	ldrh	r0, [r3, #0]
 8008828:	463a      	mov	r2, r7
 800882a:	4b25      	ldr	r3, [pc, #148]	; (80088c0 <P2PS_STM_Init+0x138>)
 800882c:	9305      	str	r3, [sp, #20]
 800882e:	2301      	movs	r3, #1
 8008830:	9304      	str	r3, [sp, #16]
 8008832:	230a      	movs	r3, #10
 8008834:	9303      	str	r3, [sp, #12]
 8008836:	2301      	movs	r3, #1
 8008838:	9302      	str	r3, [sp, #8]
 800883a:	2300      	movs	r3, #0
 800883c:	9301      	str	r3, [sp, #4]
 800883e:	2306      	movs	r3, #6
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	2302      	movs	r3, #2
 8008844:	2102      	movs	r1, #2
 8008846:	f7ff f994 	bl	8007b72 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800884a:	2319      	movs	r3, #25
 800884c:	703b      	strb	r3, [r7, #0]
 800884e:	23ed      	movs	r3, #237	; 0xed
 8008850:	707b      	strb	r3, [r7, #1]
 8008852:	2382      	movs	r3, #130	; 0x82
 8008854:	70bb      	strb	r3, [r7, #2]
 8008856:	23ae      	movs	r3, #174	; 0xae
 8008858:	70fb      	strb	r3, [r7, #3]
 800885a:	23ed      	movs	r3, #237	; 0xed
 800885c:	713b      	strb	r3, [r7, #4]
 800885e:	2321      	movs	r3, #33	; 0x21
 8008860:	717b      	strb	r3, [r7, #5]
 8008862:	234c      	movs	r3, #76	; 0x4c
 8008864:	71bb      	strb	r3, [r7, #6]
 8008866:	239d      	movs	r3, #157	; 0x9d
 8008868:	71fb      	strb	r3, [r7, #7]
 800886a:	2341      	movs	r3, #65	; 0x41
 800886c:	723b      	strb	r3, [r7, #8]
 800886e:	2345      	movs	r3, #69	; 0x45
 8008870:	727b      	strb	r3, [r7, #9]
 8008872:	2322      	movs	r3, #34	; 0x22
 8008874:	72bb      	strb	r3, [r7, #10]
 8008876:	238e      	movs	r3, #142	; 0x8e
 8008878:	72fb      	strb	r3, [r7, #11]
 800887a:	2342      	movs	r3, #66	; 0x42
 800887c:	733b      	strb	r3, [r7, #12]
 800887e:	23fe      	movs	r3, #254	; 0xfe
 8008880:	737b      	strb	r3, [r7, #13]
 8008882:	2300      	movs	r3, #0
 8008884:	73bb      	strb	r3, [r7, #14]
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800888a:	4b0c      	ldr	r3, [pc, #48]	; (80088bc <P2PS_STM_Init+0x134>)
 800888c:	8818      	ldrh	r0, [r3, #0]
 800888e:	463a      	mov	r2, r7
 8008890:	4b0c      	ldr	r3, [pc, #48]	; (80088c4 <P2PS_STM_Init+0x13c>)
 8008892:	9305      	str	r3, [sp, #20]
 8008894:	2301      	movs	r3, #1
 8008896:	9304      	str	r3, [sp, #16]
 8008898:	230a      	movs	r3, #10
 800889a:	9303      	str	r3, [sp, #12]
 800889c:	2301      	movs	r3, #1
 800889e:	9302      	str	r3, [sp, #8]
 80088a0:	2300      	movs	r3, #0
 80088a2:	9301      	str	r3, [sp, #4]
 80088a4:	2310      	movs	r3, #16
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	2302      	movs	r3, #2
 80088aa:	2102      	movs	r1, #2
 80088ac:	f7ff f961 	bl	8007b72 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 80088b0:	bf00      	nop
}
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	080086b9 	.word	0x080086b9
 80088bc:	20000134 	.word	0x20000134
 80088c0:	20000136 	.word	0x20000136
 80088c4:	20000138 	.word	0x20000138

080088c8 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 80088c8:	b480      	push	{r7}
 80088ca:	af00      	add	r7, sp, #0
  return;
 80088cc:	bf00      	nop
}
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 80088d6:	b480      	push	{r7}
 80088d8:	af00      	add	r7, sp, #0
  return;
 80088da:	bf00      	nop
}
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <EDS_STM_Init>:
__weak void DIS_Init( void )
{
  return;
}
__weak void EDS_STM_Init( void )
{
 80088e4:	b480      	push	{r7}
 80088e6:	af00      	add	r7, sp, #0
  return;
 80088e8:	bf00      	nop
}
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 80088f2:	b480      	push	{r7}
 80088f4:	af00      	add	r7, sp, #0
  return;
 80088f6:	bf00      	nop
}
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <HRS_Init>:
__weak void HRS_Init( void )
{
 8008900:	b480      	push	{r7}
 8008902:	af00      	add	r7, sp, #0
  return;
 8008904:	bf00      	nop
}
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <HTS_Init>:
__weak void HTS_Init( void )
{
 800890e:	b480      	push	{r7}
 8008910:	af00      	add	r7, sp, #0
  return;
 8008912:	bf00      	nop
}
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <IAS_Init>:
__weak void IAS_Init( void )
{
 800891c:	b480      	push	{r7}
 800891e:	af00      	add	r7, sp, #0
  return;
 8008920:	bf00      	nop
}
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <LLS_Init>:
__weak void LLS_Init( void )
{
 800892a:	b480      	push	{r7}
 800892c:	af00      	add	r7, sp, #0
  return;
 800892e:	bf00      	nop
}
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <MOTENV_STM_Init>:
__weak void TPS_Init( void )
{
  return;
}
__weak void MOTENV_STM_Init( void )
{
 8008938:	b480      	push	{r7}
 800893a:	af00      	add	r7, sp, #0
  return;
 800893c:	bf00      	nop
}
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8008946:	b480      	push	{r7}
 8008948:	af00      	add	r7, sp, #0
  return;
 800894a:	bf00      	nop
}
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <MESH_Init>:
__weak void MESH_Init( void )
{
 8008954:	b480      	push	{r7}
 8008956:	af00      	add	r7, sp, #0
  return;
 8008958:	bf00      	nop
}
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8008962:	b480      	push	{r7}
 8008964:	af00      	add	r7, sp, #0
  return;
 8008966:	bf00      	nop
}
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008974:	4b04      	ldr	r3, [pc, #16]	; (8008988 <SVCCTL_Init+0x18>)
 8008976:	2200      	movs	r2, #0
 8008978:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800897a:	4b04      	ldr	r3, [pc, #16]	; (800898c <SVCCTL_Init+0x1c>)
 800897c:	2200      	movs	r2, #0
 800897e:	731a      	strb	r2, [r3, #12]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8008980:	f000 f806 	bl	8008990 <SVCCTL_SvcInit>

  return;
 8008984:	bf00      	nop
}
 8008986:	bd80      	pop	{r7, pc}
 8008988:	2000013c 	.word	0x2000013c
 800898c:	2000015c 	.word	0x2000015c

08008990 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	af00      	add	r7, sp, #0
  BLS_Init();
 8008994:	f7ff ff98 	bl	80088c8 <BLS_Init>

  CRS_STM_Init();
 8008998:	f7ff ff9d 	bl	80088d6 <CRS_STM_Init>

  DIS_Init();
 800899c:	f7ff fe56 	bl	800864c <DIS_Init>

  EDS_STM_Init();
 80089a0:	f7ff ffa0 	bl	80088e4 <EDS_STM_Init>

  HIDS_Init();
 80089a4:	f7ff ffa5 	bl	80088f2 <HIDS_Init>

  HRS_Init();
 80089a8:	f7ff ffaa 	bl	8008900 <HRS_Init>

  HTS_Init();
 80089ac:	f7ff ffaf 	bl	800890e <HTS_Init>

  IAS_Init();
 80089b0:	f7ff ffb4 	bl	800891c <IAS_Init>

  LLS_Init();
 80089b4:	f7ff ffb9 	bl	800892a <LLS_Init>

  TPS_Init();
 80089b8:	f000 f8b0 	bl	8008b1c <TPS_Init>

  MOTENV_STM_Init();
 80089bc:	f7ff ffbc 	bl	8008938 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80089c0:	f7ff fee2 	bl	8008788 <P2PS_STM_Init>

  OTAS_STM_Init();
 80089c4:	f7ff ffbf 	bl	8008946 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80089c8:	f7ff ffcb 	bl	8008962 <BVOPUS_STM_Init>

  MESH_Init();
 80089cc:	f7ff ffc2 	bl	8008954 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80089d0:	f006 f9b4 	bl	800ed3c <SVCCTL_InitCustomSvc>
  
  return;
 80089d4:	bf00      	nop
}
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80089e0:	4b09      	ldr	r3, [pc, #36]	; (8008a08 <SVCCTL_RegisterSvcHandler+0x30>)
 80089e2:	7f1b      	ldrb	r3, [r3, #28]
 80089e4:	4619      	mov	r1, r3
 80089e6:	4a08      	ldr	r2, [pc, #32]	; (8008a08 <SVCCTL_RegisterSvcHandler+0x30>)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80089ee:	4b06      	ldr	r3, [pc, #24]	; (8008a08 <SVCCTL_RegisterSvcHandler+0x30>)
 80089f0:	7f1b      	ldrb	r3, [r3, #28]
 80089f2:	3301      	adds	r3, #1
 80089f4:	b2da      	uxtb	r2, r3
 80089f6:	4b04      	ldr	r3, [pc, #16]	; (8008a08 <SVCCTL_RegisterSvcHandler+0x30>)
 80089f8:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80089fa:	bf00      	nop
}
 80089fc:	370c      	adds	r7, #12
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	2000013c 	.word	0x2000013c

08008a0c <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 8008a14:	4b09      	ldr	r3, [pc, #36]	; (8008a3c <SVCCTL_RegisterCltHandler+0x30>)
 8008a16:	7b1b      	ldrb	r3, [r3, #12]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4a08      	ldr	r2, [pc, #32]	; (8008a3c <SVCCTL_RegisterCltHandler+0x30>)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 8008a22:	4b06      	ldr	r3, [pc, #24]	; (8008a3c <SVCCTL_RegisterCltHandler+0x30>)
 8008a24:	7b1b      	ldrb	r3, [r3, #12]
 8008a26:	3301      	adds	r3, #1
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	4b04      	ldr	r3, [pc, #16]	; (8008a3c <SVCCTL_RegisterCltHandler+0x30>)
 8008a2c:	731a      	strb	r2, [r3, #12]
#else
  (void)(pfBLE_SVC_Client_Event_Handler);
#endif

  return;
 8008a2e:	bf00      	nop
}
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	2000015c 	.word	0x2000015c

08008a40 <SVCCTL_UserEvtRx>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	2bff      	cmp	r3, #255	; 0xff
 8008a58:	d000      	beq.n	8008a5c <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8008a5a:	e03f      	b.n	8008adc <SVCCTL_UserEvtRx+0x9c>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	3302      	adds	r3, #2
 8008a60:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008a6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a70:	d000      	beq.n	8008a74 <SVCCTL_UserEvtRx+0x34>
          break;
 8008a72:	e032      	b.n	8008ada <SVCCTL_UserEvtRx+0x9a>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008a74:	2300      	movs	r3, #0
 8008a76:	757b      	strb	r3, [r7, #21]
 8008a78:	e00d      	b.n	8008a96 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008a7a:	7d7b      	ldrb	r3, [r7, #21]
 8008a7c:	4a25      	ldr	r2, [pc, #148]	; (8008b14 <SVCCTL_UserEvtRx+0xd4>)
 8008a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	4798      	blx	r3
 8008a86:	4603      	mov	r3, r0
 8008a88:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008a8a:	7dfb      	ldrb	r3, [r7, #23]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d108      	bne.n	8008aa2 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008a90:	7d7b      	ldrb	r3, [r7, #21]
 8008a92:	3301      	adds	r3, #1
 8008a94:	757b      	strb	r3, [r7, #21]
 8008a96:	4b1f      	ldr	r3, [pc, #124]	; (8008b14 <SVCCTL_UserEvtRx+0xd4>)
 8008a98:	7f1b      	ldrb	r3, [r3, #28]
 8008a9a:	7d7a      	ldrb	r2, [r7, #21]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d3ec      	bcc.n	8008a7a <SVCCTL_UserEvtRx+0x3a>
 8008aa0:	e000      	b.n	8008aa4 <SVCCTL_UserEvtRx+0x64>
              break;
 8008aa2:	bf00      	nop
          event_notification_status = SVCCTL_EvtNotAck;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	757b      	strb	r3, [r7, #21]
 8008aac:	e00d      	b.n	8008aca <SVCCTL_UserEvtRx+0x8a>
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 8008aae:	7d7b      	ldrb	r3, [r7, #21]
 8008ab0:	4a19      	ldr	r2, [pc, #100]	; (8008b18 <SVCCTL_UserEvtRx+0xd8>)
 8008ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	4798      	blx	r3
 8008aba:	4603      	mov	r3, r0
 8008abc:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008abe:	7dfb      	ldrb	r3, [r7, #23]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d108      	bne.n	8008ad6 <SVCCTL_UserEvtRx+0x96>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8008ac4:	7d7b      	ldrb	r3, [r7, #21]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	757b      	strb	r3, [r7, #21]
 8008aca:	4b13      	ldr	r3, [pc, #76]	; (8008b18 <SVCCTL_UserEvtRx+0xd8>)
 8008acc:	7b1b      	ldrb	r3, [r3, #12]
 8008ace:	7d7a      	ldrb	r2, [r7, #21]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d3ec      	bcc.n	8008aae <SVCCTL_UserEvtRx+0x6e>
          break;
 8008ad4:	e000      	b.n	8008ad8 <SVCCTL_UserEvtRx+0x98>
              break;
 8008ad6:	bf00      	nop
          break;
 8008ad8:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 8008ada:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d009      	beq.n	8008af6 <SVCCTL_UserEvtRx+0xb6>
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d00a      	beq.n	8008afc <SVCCTL_UserEvtRx+0xbc>
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10b      	bne.n	8008b02 <SVCCTL_UserEvtRx+0xc2>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f005 fbda 	bl	800e2a4 <SVCCTL_App_Notification>
 8008af0:	4603      	mov	r3, r0
 8008af2:	75bb      	strb	r3, [r7, #22]
      break;
 8008af4:	e008      	b.n	8008b08 <SVCCTL_UserEvtRx+0xc8>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008af6:	2301      	movs	r3, #1
 8008af8:	75bb      	strb	r3, [r7, #22]
      break;
 8008afa:	e005      	b.n	8008b08 <SVCCTL_UserEvtRx+0xc8>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8008afc:	2300      	movs	r3, #0
 8008afe:	75bb      	strb	r3, [r7, #22]
      break;
 8008b00:	e002      	b.n	8008b08 <SVCCTL_UserEvtRx+0xc8>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008b02:	2301      	movs	r3, #1
 8008b04:	75bb      	strb	r3, [r7, #22]
      break;
 8008b06:	bf00      	nop
  }

  return (return_status);
 8008b08:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3718      	adds	r7, #24
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	2000013c 	.word	0x2000013c
 8008b18:	2000015c 	.word	0x2000015c

08008b1c <TPS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void TPS_Init(void)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b088      	sub	sp, #32
 8008b20:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult = BLE_STATUS_SUCCESS;
 8008b22:	2300      	movs	r3, #0
 8008b24:	71fb      	strb	r3, [r7, #7]
   *
   * Max_Attribute_Records = 2*no_of_char + 1
   * service_max_attribute_record = 1 for Tx Power service +
   *                                2 for Tx Power Level measurement characteristic +
   */
  uuid = TX_POWER_SERVICE_UUID;
 8008b26:	f641 0304 	movw	r3, #6148	; 0x1804
 8008b2a:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 8008b2c:	1d39      	adds	r1, r7, #4
 8008b2e:	4b12      	ldr	r3, [pc, #72]	; (8008b78 <TPS_Init+0x5c>)
 8008b30:	9300      	str	r3, [sp, #0]
 8008b32:	2303      	movs	r3, #3
 8008b34:	2201      	movs	r2, #1
 8008b36:	2001      	movs	r0, #1
 8008b38:	f7fe ff6c 	bl	8007a14 <aci_gatt_add_service>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	71fb      	strb	r3, [r7, #7]
  }
  
  /**
   *  Add Tx Power Level Characteristic
   */
  uuid = TX_POWER_LEVEL_CHARACTERISTIC_UUID;
 8008b40:	f642 2307 	movw	r3, #10759	; 0x2a07
 8008b44:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(TPS_Context.SvcHdle,
 8008b46:	4b0c      	ldr	r3, [pc, #48]	; (8008b78 <TPS_Init+0x5c>)
 8008b48:	8818      	ldrh	r0, [r3, #0]
 8008b4a:	1d3a      	adds	r2, r7, #4
 8008b4c:	4b0b      	ldr	r3, [pc, #44]	; (8008b7c <TPS_Init+0x60>)
 8008b4e:	9305      	str	r3, [sp, #20]
 8008b50:	2301      	movs	r3, #1
 8008b52:	9304      	str	r3, [sp, #16]
 8008b54:	230a      	movs	r3, #10
 8008b56:	9303      	str	r3, [sp, #12]
 8008b58:	2300      	movs	r3, #0
 8008b5a:	9302      	str	r3, [sp, #8]
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	9301      	str	r3, [sp, #4]
 8008b60:	2302      	movs	r3, #2
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	2301      	movs	r3, #1
 8008b66:	2101      	movs	r1, #1
 8008b68:	f7ff f803 	bl	8007b72 <aci_gatt_add_char>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	71fb      	strb	r3, [r7, #7]
  {
    BLE_DBG_TPS_MSG ("FAILED to add Tx Power Level Characteristic, Error: %02X !!\n", 
                        hciCmdResult);
  }

  return;
 8008b70:	bf00      	nop
}
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	2000016c 	.word	0x2000016c
 8008b7c:	2000016e 	.word	0x2000016e

08008b80 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b088      	sub	sp, #32
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008b88:	f107 030c 	add.w	r3, r7, #12
 8008b8c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	2121      	movs	r1, #33	; 0x21
 8008b98:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8008b9c:	f000 fa08 	bl	8008fb0 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	330b      	adds	r3, #11
 8008ba4:	78db      	ldrb	r3, [r3, #3]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3720      	adds	r7, #32
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
	...

08008bb0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	4a08      	ldr	r2, [pc, #32]	; (8008be0 <hci_init+0x30>)
 8008bc0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008bc2:	4a08      	ldr	r2, [pc, #32]	; (8008be4 <hci_init+0x34>)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008bc8:	4806      	ldr	r0, [pc, #24]	; (8008be4 <hci_init+0x34>)
 8008bca:	f000 f973 	bl	8008eb4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 f8d4 	bl	8008d80 <TlInit>

  return;
 8008bd8:	bf00      	nop
}
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	2000028c 	.word	0x2000028c
 8008be4:	20000264 	.word	0x20000264

08008be8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008bee:	4822      	ldr	r0, [pc, #136]	; (8008c78 <hci_user_evt_proc+0x90>)
 8008bf0:	f000 fe04 	bl	80097fc <LST_is_empty>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d12b      	bne.n	8008c52 <hci_user_evt_proc+0x6a>
 8008bfa:	4b20      	ldr	r3, [pc, #128]	; (8008c7c <hci_user_evt_proc+0x94>)
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d027      	beq.n	8008c52 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008c02:	f107 030c 	add.w	r3, r7, #12
 8008c06:	4619      	mov	r1, r3
 8008c08:	481b      	ldr	r0, [pc, #108]	; (8008c78 <hci_user_evt_proc+0x90>)
 8008c0a:	f000 fe7e 	bl	800990a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008c0e:	4b1c      	ldr	r3, [pc, #112]	; (8008c80 <hci_user_evt_proc+0x98>)
 8008c10:	69db      	ldr	r3, [r3, #28]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00c      	beq.n	8008c30 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008c1e:	4b18      	ldr	r3, [pc, #96]	; (8008c80 <hci_user_evt_proc+0x98>)
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	1d3a      	adds	r2, r7, #4
 8008c24:	4610      	mov	r0, r2
 8008c26:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008c28:	793a      	ldrb	r2, [r7, #4]
 8008c2a:	4b14      	ldr	r3, [pc, #80]	; (8008c7c <hci_user_evt_proc+0x94>)
 8008c2c:	701a      	strb	r2, [r3, #0]
 8008c2e:	e002      	b.n	8008c36 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008c30:	4b12      	ldr	r3, [pc, #72]	; (8008c7c <hci_user_evt_proc+0x94>)
 8008c32:	2201      	movs	r2, #1
 8008c34:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008c36:	4b11      	ldr	r3, [pc, #68]	; (8008c7c <hci_user_evt_proc+0x94>)
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d004      	beq.n	8008c48 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	4618      	mov	r0, r3
 8008c42:	f000 fc35 	bl	80094b0 <TL_MM_EvtDone>
 8008c46:	e004      	b.n	8008c52 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	480a      	ldr	r0, [pc, #40]	; (8008c78 <hci_user_evt_proc+0x90>)
 8008c4e:	f000 fdf5 	bl	800983c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008c52:	4809      	ldr	r0, [pc, #36]	; (8008c78 <hci_user_evt_proc+0x90>)
 8008c54:	f000 fdd2 	bl	80097fc <LST_is_empty>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d107      	bne.n	8008c6e <hci_user_evt_proc+0x86>
 8008c5e:	4b07      	ldr	r3, [pc, #28]	; (8008c7c <hci_user_evt_proc+0x94>)
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d003      	beq.n	8008c6e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008c66:	4804      	ldr	r0, [pc, #16]	; (8008c78 <hci_user_evt_proc+0x90>)
 8008c68:	f005 fffa 	bl	800ec60 <hci_notify_asynch_evt>
  }


  return;
 8008c6c:	bf00      	nop
 8008c6e:	bf00      	nop
}
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	20000174 	.word	0x20000174
 8008c7c:	20000180 	.word	0x20000180
 8008c80:	20000264 	.word	0x20000264

08008c84 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b088      	sub	sp, #32
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008c90:	2000      	movs	r0, #0
 8008c92:	f000 f8cb 	bl	8008e2c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008c96:	2300      	movs	r3, #0
 8008c98:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	885b      	ldrh	r3, [r3, #2]
 8008c9e:	b21b      	sxth	r3, r3
 8008ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ca4:	b21a      	sxth	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	881b      	ldrh	r3, [r3, #0]
 8008caa:	029b      	lsls	r3, r3, #10
 8008cac:	b21b      	sxth	r3, r3
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	b21b      	sxth	r3, r3
 8008cb2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	b2d9      	uxtb	r1, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	689a      	ldr	r2, [r3, #8]
 8008cbe:	8bbb      	ldrh	r3, [r7, #28]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 f88d 	bl	8008de0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008cc6:	e04e      	b.n	8008d66 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008cc8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008ccc:	f005 ffe8 	bl	800eca0 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008cd0:	e043      	b.n	8008d5a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8008cd2:	f107 030c 	add.w	r3, r7, #12
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	4828      	ldr	r0, [pc, #160]	; (8008d7c <hci_send_req+0xf8>)
 8008cda:	f000 fe16 	bl	800990a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	7a5b      	ldrb	r3, [r3, #9]
 8008ce2:	2b0f      	cmp	r3, #15
 8008ce4:	d114      	bne.n	8008d10 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	330b      	adds	r3, #11
 8008cea:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	885b      	ldrh	r3, [r3, #2]
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	8bba      	ldrh	r2, [r7, #28]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d104      	bne.n	8008d02 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	7812      	ldrb	r2, [r2, #0]
 8008d00:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	785b      	ldrb	r3, [r3, #1]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d027      	beq.n	8008d5a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	77fb      	strb	r3, [r7, #31]
 8008d0e:	e024      	b.n	8008d5a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	330b      	adds	r3, #11
 8008d14:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	8bba      	ldrh	r2, [r7, #28]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d114      	bne.n	8008d4e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	7a9b      	ldrb	r3, [r3, #10]
 8008d28:	3b03      	subs	r3, #3
 8008d2a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	695a      	ldr	r2, [r3, #20]
 8008d30:	7dfb      	ldrb	r3, [r7, #23]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	bfa8      	it	ge
 8008d36:	461a      	movge	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6918      	ldr	r0, [r3, #16]
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	1cd9      	adds	r1, r3, #3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	461a      	mov	r2, r3
 8008d4a:	f007 fb5d 	bl	8010408 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d001      	beq.n	8008d5a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008d56:	2301      	movs	r3, #1
 8008d58:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008d5a:	4808      	ldr	r0, [pc, #32]	; (8008d7c <hci_send_req+0xf8>)
 8008d5c:	f000 fd4e 	bl	80097fc <LST_is_empty>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0b5      	beq.n	8008cd2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008d66:	7ffb      	ldrb	r3, [r7, #31]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d0ad      	beq.n	8008cc8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008d6c:	2001      	movs	r0, #1
 8008d6e:	f000 f85d 	bl	8008e2c <NotifyCmdStatus>

  return 0;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3720      	adds	r7, #32
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	20000284 	.word	0x20000284

08008d80 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008d88:	480f      	ldr	r0, [pc, #60]	; (8008dc8 <TlInit+0x48>)
 8008d8a:	f000 fd27 	bl	80097dc <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8008d8e:	4a0f      	ldr	r2, [pc, #60]	; (8008dcc <TlInit+0x4c>)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008d94:	480e      	ldr	r0, [pc, #56]	; (8008dd0 <TlInit+0x50>)
 8008d96:	f000 fd21 	bl	80097dc <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008d9a:	4b0e      	ldr	r3, [pc, #56]	; (8008dd4 <TlInit+0x54>)
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008da0:	4b0d      	ldr	r3, [pc, #52]	; (8008dd8 <TlInit+0x58>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00a      	beq.n	8008dbe <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008dac:	4b0b      	ldr	r3, [pc, #44]	; (8008ddc <TlInit+0x5c>)
 8008dae:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008db0:	4b09      	ldr	r3, [pc, #36]	; (8008dd8 <TlInit+0x58>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f107 0208 	add.w	r2, r7, #8
 8008db8:	4610      	mov	r0, r2
 8008dba:	4798      	blx	r3
  }

  return;
 8008dbc:	bf00      	nop
 8008dbe:	bf00      	nop
}
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20000284 	.word	0x20000284
 8008dcc:	2000017c 	.word	0x2000017c
 8008dd0:	20000174 	.word	0x20000174
 8008dd4:	20000180 	.word	0x20000180
 8008dd8:	20000264 	.word	0x20000264
 8008ddc:	08008e6d 	.word	0x08008e6d

08008de0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	4603      	mov	r3, r0
 8008de8:	603a      	str	r2, [r7, #0]
 8008dea:	80fb      	strh	r3, [r7, #6]
 8008dec:	460b      	mov	r3, r1
 8008dee:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008df0:	4b0c      	ldr	r3, [pc, #48]	; (8008e24 <SendCmd+0x44>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	88fa      	ldrh	r2, [r7, #6]
 8008df6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008dfa:	4b0a      	ldr	r3, [pc, #40]	; (8008e24 <SendCmd+0x44>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	797a      	ldrb	r2, [r7, #5]
 8008e00:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8008e02:	4b08      	ldr	r3, [pc, #32]	; (8008e24 <SendCmd+0x44>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	330c      	adds	r3, #12
 8008e08:	797a      	ldrb	r2, [r7, #5]
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f007 fafb 	bl	8010408 <memcpy>

  hciContext.io.Send(0,0);
 8008e12:	4b05      	ldr	r3, [pc, #20]	; (8008e28 <SendCmd+0x48>)
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	2100      	movs	r1, #0
 8008e18:	2000      	movs	r0, #0
 8008e1a:	4798      	blx	r3

  return;
 8008e1c:	bf00      	nop
}
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	2000017c 	.word	0x2000017c
 8008e28:	20000264 	.word	0x20000264

08008e2c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	4603      	mov	r3, r0
 8008e34:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008e36:	79fb      	ldrb	r3, [r7, #7]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d108      	bne.n	8008e4e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008e3c:	4b0a      	ldr	r3, [pc, #40]	; (8008e68 <NotifyCmdStatus+0x3c>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d00d      	beq.n	8008e60 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008e44:	4b08      	ldr	r3, [pc, #32]	; (8008e68 <NotifyCmdStatus+0x3c>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2000      	movs	r0, #0
 8008e4a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008e4c:	e008      	b.n	8008e60 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8008e4e:	4b06      	ldr	r3, [pc, #24]	; (8008e68 <NotifyCmdStatus+0x3c>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d004      	beq.n	8008e60 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008e56:	4b04      	ldr	r3, [pc, #16]	; (8008e68 <NotifyCmdStatus+0x3c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2001      	movs	r0, #1
 8008e5c:	4798      	blx	r3
  return;
 8008e5e:	bf00      	nop
 8008e60:	bf00      	nop
}
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	2000028c 	.word	0x2000028c

08008e6c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	7a5b      	ldrb	r3, [r3, #9]
 8008e78:	2b0f      	cmp	r3, #15
 8008e7a:	d003      	beq.n	8008e84 <TlEvtReceived+0x18>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	7a5b      	ldrb	r3, [r3, #9]
 8008e80:	2b0e      	cmp	r3, #14
 8008e82:	d107      	bne.n	8008e94 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	4809      	ldr	r0, [pc, #36]	; (8008eac <TlEvtReceived+0x40>)
 8008e88:	f000 fcfc 	bl	8009884 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	f005 fef7 	bl	800ec80 <hci_cmd_resp_release>
 8008e92:	e006      	b.n	8008ea2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008e94:	6879      	ldr	r1, [r7, #4]
 8008e96:	4806      	ldr	r0, [pc, #24]	; (8008eb0 <TlEvtReceived+0x44>)
 8008e98:	f000 fcf4 	bl	8009884 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008e9c:	4804      	ldr	r0, [pc, #16]	; (8008eb0 <TlEvtReceived+0x44>)
 8008e9e:	f005 fedf 	bl	800ec60 <hci_notify_asynch_evt>
  }

  return;
 8008ea2:	bf00      	nop
}
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	20000284 	.word	0x20000284
 8008eb0:	20000174 	.word	0x20000174

08008eb4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a05      	ldr	r2, [pc, #20]	; (8008ed4 <hci_register_io_bus+0x20>)
 8008ec0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a04      	ldr	r2, [pc, #16]	; (8008ed8 <hci_register_io_bus+0x24>)
 8008ec6:	611a      	str	r2, [r3, #16]

  return;
 8008ec8:	bf00      	nop
}
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	080091c5 	.word	0x080091c5
 8008ed8:	0800922d 	.word	0x0800922d

08008edc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	4a08      	ldr	r2, [pc, #32]	; (8008f0c <shci_init+0x30>)
 8008eec:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8008eee:	4a08      	ldr	r2, [pc, #32]	; (8008f10 <shci_init+0x34>)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8008ef4:	4806      	ldr	r0, [pc, #24]	; (8008f10 <shci_init+0x34>)
 8008ef6:	f000 f911 	bl	800911c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 f894 	bl	800902c <TlInit>

  return;
 8008f04:	bf00      	nop
}
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	200002b0 	.word	0x200002b0
 8008f10:	20000290 	.word	0x20000290

08008f14 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008f1a:	4822      	ldr	r0, [pc, #136]	; (8008fa4 <shci_user_evt_proc+0x90>)
 8008f1c:	f000 fc6e 	bl	80097fc <LST_is_empty>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d12b      	bne.n	8008f7e <shci_user_evt_proc+0x6a>
 8008f26:	4b20      	ldr	r3, [pc, #128]	; (8008fa8 <shci_user_evt_proc+0x94>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d027      	beq.n	8008f7e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008f2e:	f107 030c 	add.w	r3, r7, #12
 8008f32:	4619      	mov	r1, r3
 8008f34:	481b      	ldr	r0, [pc, #108]	; (8008fa4 <shci_user_evt_proc+0x90>)
 8008f36:	f000 fce8 	bl	800990a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8008f3a:	4b1c      	ldr	r3, [pc, #112]	; (8008fac <shci_user_evt_proc+0x98>)
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00c      	beq.n	8008f5c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8008f46:	2301      	movs	r3, #1
 8008f48:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008f4a:	4b18      	ldr	r3, [pc, #96]	; (8008fac <shci_user_evt_proc+0x98>)
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	1d3a      	adds	r2, r7, #4
 8008f50:	4610      	mov	r0, r2
 8008f52:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8008f54:	793a      	ldrb	r2, [r7, #4]
 8008f56:	4b14      	ldr	r3, [pc, #80]	; (8008fa8 <shci_user_evt_proc+0x94>)
 8008f58:	701a      	strb	r2, [r3, #0]
 8008f5a:	e002      	b.n	8008f62 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008f5c:	4b12      	ldr	r3, [pc, #72]	; (8008fa8 <shci_user_evt_proc+0x94>)
 8008f5e:	2201      	movs	r2, #1
 8008f60:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8008f62:	4b11      	ldr	r3, [pc, #68]	; (8008fa8 <shci_user_evt_proc+0x94>)
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d004      	beq.n	8008f74 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 fa9f 	bl	80094b0 <TL_MM_EvtDone>
 8008f72:	e004      	b.n	8008f7e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	4619      	mov	r1, r3
 8008f78:	480a      	ldr	r0, [pc, #40]	; (8008fa4 <shci_user_evt_proc+0x90>)
 8008f7a:	f000 fc5f 	bl	800983c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008f7e:	4809      	ldr	r0, [pc, #36]	; (8008fa4 <shci_user_evt_proc+0x90>)
 8008f80:	f000 fc3c 	bl	80097fc <LST_is_empty>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d107      	bne.n	8008f9a <shci_user_evt_proc+0x86>
 8008f8a:	4b07      	ldr	r3, [pc, #28]	; (8008fa8 <shci_user_evt_proc+0x94>)
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d003      	beq.n	8008f9a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8008f92:	4804      	ldr	r0, [pc, #16]	; (8008fa4 <shci_user_evt_proc+0x90>)
 8008f94:	f7f8 f880 	bl	8001098 <shci_notify_asynch_evt>
  }


  return;
 8008f98:	bf00      	nop
 8008f9a:	bf00      	nop
}
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	20000184 	.word	0x20000184
 8008fa8:	20000194 	.word	0x20000194
 8008fac:	20000290 	.word	0x20000290

08008fb0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60ba      	str	r2, [r7, #8]
 8008fb8:	607b      	str	r3, [r7, #4]
 8008fba:	4603      	mov	r3, r0
 8008fbc:	81fb      	strh	r3, [r7, #14]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	f000 f864 	bl	8009090 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008fc8:	4b16      	ldr	r3, [pc, #88]	; (8009024 <shci_send+0x74>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	89fa      	ldrh	r2, [r7, #14]
 8008fce:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8008fd2:	4b14      	ldr	r3, [pc, #80]	; (8009024 <shci_send+0x74>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	7b7a      	ldrb	r2, [r7, #13]
 8008fd8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8008fda:	4b12      	ldr	r3, [pc, #72]	; (8009024 <shci_send+0x74>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	330c      	adds	r3, #12
 8008fe0:	7b7a      	ldrb	r2, [r7, #13]
 8008fe2:	68b9      	ldr	r1, [r7, #8]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f007 fa0f 	bl	8010408 <memcpy>

  shciContext.io.Send(0,0);
 8008fea:	4b0f      	ldr	r3, [pc, #60]	; (8009028 <shci_send+0x78>)
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	2100      	movs	r1, #0
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008ff4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008ff8:	f7f8 f86e 	bl	80010d8 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f103 0008 	add.w	r0, r3, #8
 8009002:	4b08      	ldr	r3, [pc, #32]	; (8009024 <shci_send+0x74>)
 8009004:	6819      	ldr	r1, [r3, #0]
 8009006:	4b07      	ldr	r3, [pc, #28]	; (8009024 <shci_send+0x74>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	789b      	ldrb	r3, [r3, #2]
 800900c:	3303      	adds	r3, #3
 800900e:	461a      	mov	r2, r3
 8009010:	f007 f9fa 	bl	8010408 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009014:	2001      	movs	r0, #1
 8009016:	f000 f83b 	bl	8009090 <Cmd_SetStatus>

  return;
 800901a:	bf00      	nop
}
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20000190 	.word	0x20000190
 8009028:	20000290 	.word	0x20000290

0800902c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009034:	4a10      	ldr	r2, [pc, #64]	; (8009078 <TlInit+0x4c>)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800903a:	4810      	ldr	r0, [pc, #64]	; (800907c <TlInit+0x50>)
 800903c:	f000 fbce 	bl	80097dc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009040:	2001      	movs	r0, #1
 8009042:	f000 f825 	bl	8009090 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009046:	4b0e      	ldr	r3, [pc, #56]	; (8009080 <TlInit+0x54>)
 8009048:	2201      	movs	r2, #1
 800904a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800904c:	4b0d      	ldr	r3, [pc, #52]	; (8009084 <TlInit+0x58>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00c      	beq.n	800906e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009058:	4b0b      	ldr	r3, [pc, #44]	; (8009088 <TlInit+0x5c>)
 800905a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800905c:	4b0b      	ldr	r3, [pc, #44]	; (800908c <TlInit+0x60>)
 800905e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009060:	4b08      	ldr	r3, [pc, #32]	; (8009084 <TlInit+0x58>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f107 020c 	add.w	r2, r7, #12
 8009068:	4610      	mov	r0, r2
 800906a:	4798      	blx	r3
  }

  return;
 800906c:	bf00      	nop
 800906e:	bf00      	nop
}
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	20000190 	.word	0x20000190
 800907c:	20000184 	.word	0x20000184
 8009080:	20000194 	.word	0x20000194
 8009084:	20000290 	.word	0x20000290
 8009088:	080090e1 	.word	0x080090e1
 800908c:	080090f9 	.word	0x080090f9

08009090 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	4603      	mov	r3, r0
 8009098:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800909a:	79fb      	ldrb	r3, [r7, #7]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10b      	bne.n	80090b8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80090a0:	4b0d      	ldr	r3, [pc, #52]	; (80090d8 <Cmd_SetStatus+0x48>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d003      	beq.n	80090b0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80090a8:	4b0b      	ldr	r3, [pc, #44]	; (80090d8 <Cmd_SetStatus+0x48>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2000      	movs	r0, #0
 80090ae:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80090b0:	4b0a      	ldr	r3, [pc, #40]	; (80090dc <Cmd_SetStatus+0x4c>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80090b6:	e00b      	b.n	80090d0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80090b8:	4b08      	ldr	r3, [pc, #32]	; (80090dc <Cmd_SetStatus+0x4c>)
 80090ba:	2201      	movs	r2, #1
 80090bc:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80090be:	4b06      	ldr	r3, [pc, #24]	; (80090d8 <Cmd_SetStatus+0x48>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d004      	beq.n	80090d0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80090c6:	4b04      	ldr	r3, [pc, #16]	; (80090d8 <Cmd_SetStatus+0x48>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2001      	movs	r0, #1
 80090cc:	4798      	blx	r3
  return;
 80090ce:	bf00      	nop
 80090d0:	bf00      	nop
}
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	200002b0 	.word	0x200002b0
 80090dc:	2000018c 	.word	0x2000018c

080090e0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80090e8:	2000      	movs	r0, #0
 80090ea:	f7f7 ffe5 	bl	80010b8 <shci_cmd_resp_release>

  return;
 80090ee:	bf00      	nop
}
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
	...

080090f8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009100:	6879      	ldr	r1, [r7, #4]
 8009102:	4805      	ldr	r0, [pc, #20]	; (8009118 <TlUserEvtReceived+0x20>)
 8009104:	f000 fbbe 	bl	8009884 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009108:	4803      	ldr	r0, [pc, #12]	; (8009118 <TlUserEvtReceived+0x20>)
 800910a:	f7f7 ffc5 	bl	8001098 <shci_notify_asynch_evt>

  return;
 800910e:	bf00      	nop
}
 8009110:	3708      	adds	r7, #8
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	20000184 	.word	0x20000184

0800911c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a05      	ldr	r2, [pc, #20]	; (800913c <shci_register_io_bus+0x20>)
 8009128:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a04      	ldr	r2, [pc, #16]	; (8009140 <shci_register_io_bus+0x24>)
 800912e:	611a      	str	r2, [r3, #16]

  return;
 8009130:	bf00      	nop
}
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	080092d9 	.word	0x080092d9
 8009140:	0800932d 	.word	0x0800932d

08009144 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009148:	f006 fec0 	bl	800fecc <HW_IPCC_Enable>

  return;
 800914c:	bf00      	nop
}
 800914e:	bd80      	pop	{r7, pc}

08009150 <TL_Init>:


void TL_Init( void )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009154:	4b10      	ldr	r3, [pc, #64]	; (8009198 <TL_Init+0x48>)
 8009156:	4a11      	ldr	r2, [pc, #68]	; (800919c <TL_Init+0x4c>)
 8009158:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800915a:	4b0f      	ldr	r3, [pc, #60]	; (8009198 <TL_Init+0x48>)
 800915c:	4a10      	ldr	r2, [pc, #64]	; (80091a0 <TL_Init+0x50>)
 800915e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009160:	4b0d      	ldr	r3, [pc, #52]	; (8009198 <TL_Init+0x48>)
 8009162:	4a10      	ldr	r2, [pc, #64]	; (80091a4 <TL_Init+0x54>)
 8009164:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8009166:	4b0c      	ldr	r3, [pc, #48]	; (8009198 <TL_Init+0x48>)
 8009168:	4a0f      	ldr	r2, [pc, #60]	; (80091a8 <TL_Init+0x58>)
 800916a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800916c:	4b0a      	ldr	r3, [pc, #40]	; (8009198 <TL_Init+0x48>)
 800916e:	4a0f      	ldr	r2, [pc, #60]	; (80091ac <TL_Init+0x5c>)
 8009170:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009172:	4b09      	ldr	r3, [pc, #36]	; (8009198 <TL_Init+0x48>)
 8009174:	4a0e      	ldr	r2, [pc, #56]	; (80091b0 <TL_Init+0x60>)
 8009176:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009178:	4b07      	ldr	r3, [pc, #28]	; (8009198 <TL_Init+0x48>)
 800917a:	4a0e      	ldr	r2, [pc, #56]	; (80091b4 <TL_Init+0x64>)
 800917c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800917e:	4b06      	ldr	r3, [pc, #24]	; (8009198 <TL_Init+0x48>)
 8009180:	4a0d      	ldr	r2, [pc, #52]	; (80091b8 <TL_Init+0x68>)
 8009182:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009184:	4b04      	ldr	r3, [pc, #16]	; (8009198 <TL_Init+0x48>)
 8009186:	4a0d      	ldr	r2, [pc, #52]	; (80091bc <TL_Init+0x6c>)
 8009188:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800918a:	4b03      	ldr	r3, [pc, #12]	; (8009198 <TL_Init+0x48>)
 800918c:	4a0c      	ldr	r2, [pc, #48]	; (80091c0 <TL_Init+0x70>)
 800918e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009190:	f006 feb0 	bl	800fef4 <HW_IPCC_Init>

  return;
 8009194:	bf00      	nop
}
 8009196:	bd80      	pop	{r7, pc}
 8009198:	20030000 	.word	0x20030000
 800919c:	20030028 	.word	0x20030028
 80091a0:	20030048 	.word	0x20030048
 80091a4:	20030058 	.word	0x20030058
 80091a8:	20030064 	.word	0x20030064
 80091ac:	2003006c 	.word	0x2003006c
 80091b0:	20030074 	.word	0x20030074
 80091b4:	2003007c 	.word	0x2003007c
 80091b8:	20030098 	.word	0x20030098
 80091bc:	2003009c 	.word	0x2003009c
 80091c0:	200300a8 	.word	0x200300a8

080091c4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80091d0:	4811      	ldr	r0, [pc, #68]	; (8009218 <TL_BLE_Init+0x54>)
 80091d2:	f000 fb03 	bl	80097dc <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80091d6:	4b11      	ldr	r3, [pc, #68]	; (800921c <TL_BLE_Init+0x58>)
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	689a      	ldr	r2, [r3, #8]
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	68da      	ldr	r2, [r3, #12]
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	4a0c      	ldr	r2, [pc, #48]	; (8009220 <TL_BLE_Init+0x5c>)
 80091f0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	4a08      	ldr	r2, [pc, #32]	; (8009218 <TL_BLE_Init+0x54>)
 80091f6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80091f8:	f006 fe92 	bl	800ff20 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a08      	ldr	r2, [pc, #32]	; (8009224 <TL_BLE_Init+0x60>)
 8009202:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	4a07      	ldr	r2, [pc, #28]	; (8009228 <TL_BLE_Init+0x64>)
 800920a:	6013      	str	r3, [r2, #0]

  return 0;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	200300c4 	.word	0x200300c4
 800921c:	20030000 	.word	0x20030000
 8009220:	20030a40 	.word	0x20030a40
 8009224:	200002bc 	.word	0x200002bc
 8009228:	200002c0 	.word	0x200002c0

0800922c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	460b      	mov	r3, r1
 8009236:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009238:	4b09      	ldr	r3, [pc, #36]	; (8009260 <TL_BLE_SendCmd+0x34>)
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2201      	movs	r2, #1
 8009240:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8009242:	4b07      	ldr	r3, [pc, #28]	; (8009260 <TL_BLE_SendCmd+0x34>)
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4619      	mov	r1, r3
 800924a:	2001      	movs	r0, #1
 800924c:	f000 f994 	bl	8009578 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009250:	f006 fe70 	bl	800ff34 <HW_IPCC_BLE_SendCmd>

  return 0;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	20030000 	.word	0x20030000

08009264 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800926a:	e01c      	b.n	80092a6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800926c:	1d3b      	adds	r3, r7, #4
 800926e:	4619      	mov	r1, r3
 8009270:	4812      	ldr	r0, [pc, #72]	; (80092bc <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009272:	f000 fb4a 	bl	800990a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	7a5b      	ldrb	r3, [r3, #9]
 800927a:	2b0f      	cmp	r3, #15
 800927c:	d003      	beq.n	8009286 <HW_IPCC_BLE_RxEvtNot+0x22>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	7a5b      	ldrb	r3, [r3, #9]
 8009282:	2b0e      	cmp	r3, #14
 8009284:	d105      	bne.n	8009292 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4619      	mov	r1, r3
 800928a:	2002      	movs	r0, #2
 800928c:	f000 f974 	bl	8009578 <OutputDbgTrace>
 8009290:	e004      	b.n	800929c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4619      	mov	r1, r3
 8009296:	2003      	movs	r0, #3
 8009298:	f000 f96e 	bl	8009578 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800929c:	4b08      	ldr	r3, [pc, #32]	; (80092c0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	4610      	mov	r0, r2
 80092a4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80092a6:	4805      	ldr	r0, [pc, #20]	; (80092bc <HW_IPCC_BLE_RxEvtNot+0x58>)
 80092a8:	f000 faa8 	bl	80097fc <LST_is_empty>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d0dc      	beq.n	800926c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80092b2:	bf00      	nop
}
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	200300c4 	.word	0x200300c4
 80092c0:	200002bc 	.word	0x200002bc

080092c4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80092c8:	4b02      	ldr	r3, [pc, #8]	; (80092d4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4798      	blx	r3

  return;
 80092ce:	bf00      	nop
}
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	200002c0 	.word	0x200002c0

080092d8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80092e4:	480d      	ldr	r0, [pc, #52]	; (800931c <TL_SYS_Init+0x44>)
 80092e6:	f000 fa79 	bl	80097dc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80092ea:	4b0d      	ldr	r3, [pc, #52]	; (8009320 <TL_SYS_Init+0x48>)
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	689a      	ldr	r2, [r3, #8]
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	4a08      	ldr	r2, [pc, #32]	; (800931c <TL_SYS_Init+0x44>)
 80092fc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80092fe:	f006 fe3b 	bl	800ff78 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a07      	ldr	r2, [pc, #28]	; (8009324 <TL_SYS_Init+0x4c>)
 8009308:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	4a06      	ldr	r2, [pc, #24]	; (8009328 <TL_SYS_Init+0x50>)
 8009310:	6013      	str	r3, [r2, #0]

  return 0;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	200300cc 	.word	0x200300cc
 8009320:	20030000 	.word	0x20030000
 8009324:	200002c4 	.word	0x200002c4
 8009328:	200002c8 	.word	0x200002c8

0800932c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009338:	4b09      	ldr	r3, [pc, #36]	; (8009360 <TL_SYS_SendCmd+0x34>)
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2210      	movs	r2, #16
 8009340:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8009342:	4b07      	ldr	r3, [pc, #28]	; (8009360 <TL_SYS_SendCmd+0x34>)
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4619      	mov	r1, r3
 800934a:	2004      	movs	r0, #4
 800934c:	f000 f914 	bl	8009578 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009350:	f006 fe1c 	bl	800ff8c <HW_IPCC_SYS_SendCmd>

  return 0;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3708      	adds	r7, #8
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	20030000 	.word	0x20030000

08009364 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009368:	4b07      	ldr	r3, [pc, #28]	; (8009388 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4619      	mov	r1, r3
 8009370:	2005      	movs	r0, #5
 8009372:	f000 f901 	bl	8009578 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009376:	4b05      	ldr	r3, [pc, #20]	; (800938c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a03      	ldr	r2, [pc, #12]	; (8009388 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800937c:	68d2      	ldr	r2, [r2, #12]
 800937e:	6812      	ldr	r2, [r2, #0]
 8009380:	4610      	mov	r0, r2
 8009382:	4798      	blx	r3

  return;
 8009384:	bf00      	nop
}
 8009386:	bd80      	pop	{r7, pc}
 8009388:	20030000 	.word	0x20030000
 800938c:	200002c4 	.word	0x200002c4

08009390 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009396:	e00e      	b.n	80093b6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009398:	1d3b      	adds	r3, r7, #4
 800939a:	4619      	mov	r1, r3
 800939c:	480b      	ldr	r0, [pc, #44]	; (80093cc <HW_IPCC_SYS_EvtNot+0x3c>)
 800939e:	f000 fab4 	bl	800990a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4619      	mov	r1, r3
 80093a6:	2006      	movs	r0, #6
 80093a8:	f000 f8e6 	bl	8009578 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80093ac:	4b08      	ldr	r3, [pc, #32]	; (80093d0 <HW_IPCC_SYS_EvtNot+0x40>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	4610      	mov	r0, r2
 80093b4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80093b6:	4805      	ldr	r0, [pc, #20]	; (80093cc <HW_IPCC_SYS_EvtNot+0x3c>)
 80093b8:	f000 fa20 	bl	80097fc <LST_is_empty>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d0ea      	beq.n	8009398 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80093c2:	bf00      	nop
}
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	200300cc 	.word	0x200300cc
 80093d0:	200002c8 	.word	0x200002c8

080093d4 <TL_THREAD_CliSendAck>:

  return;
}

void TL_THREAD_CliSendAck ( void )
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80093d8:	4b04      	ldr	r3, [pc, #16]	; (80093ec <TL_THREAD_CliSendAck+0x18>)
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	220d      	movs	r2, #13
 80093e0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 80093e2:	f006 fdf9 	bl	800ffd8 <HW_IPCC_THREAD_CliSendAck>

  return;
 80093e6:	bf00      	nop
}
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	20030000 	.word	0x20030000

080093f0 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 80093f4:	4b03      	ldr	r3, [pc, #12]	; (8009404 <HW_IPCC_OT_CmdEvtNot+0x14>)
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f005 fca4 	bl	800ed48 <TL_OT_CmdEvtReceived>

  return;
 8009400:	bf00      	nop
}
 8009402:	bd80      	pop	{r7, pc}
 8009404:	20030000 	.word	0x20030000

08009408 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800940c:	4b03      	ldr	r3, [pc, #12]	; (800941c <HW_IPCC_THREAD_EvtNot+0x14>)
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4618      	mov	r0, r3
 8009414:	f005 fca2 	bl	800ed5c <TL_THREAD_NotReceived>

  return;
 8009418:	bf00      	nop
}
 800941a:	bd80      	pop	{r7, pc}
 800941c:	20030000 	.word	0x20030000

08009420 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 8009424:	4b03      	ldr	r3, [pc, #12]	; (8009434 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	4618      	mov	r0, r3
 800942c:	f005 fccc 	bl	800edc8 <TL_THREAD_CliNotReceived>

  return;
 8009430:	bf00      	nop
}
 8009432:	bd80      	pop	{r7, pc}
 8009434:	20030000 	.word	0x20030000

08009438 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009440:	4817      	ldr	r0, [pc, #92]	; (80094a0 <TL_MM_Init+0x68>)
 8009442:	f000 f9cb 	bl	80097dc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009446:	4817      	ldr	r0, [pc, #92]	; (80094a4 <TL_MM_Init+0x6c>)
 8009448:	f000 f9c8 	bl	80097dc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800944c:	4b16      	ldr	r3, [pc, #88]	; (80094a8 <TL_MM_Init+0x70>)
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	4a16      	ldr	r2, [pc, #88]	; (80094ac <TL_MM_Init+0x74>)
 8009452:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009454:	4b15      	ldr	r3, [pc, #84]	; (80094ac <TL_MM_Init+0x74>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	6892      	ldr	r2, [r2, #8]
 800945c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800945e:	4b13      	ldr	r3, [pc, #76]	; (80094ac <TL_MM_Init+0x74>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	68d2      	ldr	r2, [r2, #12]
 8009466:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009468:	4b10      	ldr	r3, [pc, #64]	; (80094ac <TL_MM_Init+0x74>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a0c      	ldr	r2, [pc, #48]	; (80094a0 <TL_MM_Init+0x68>)
 800946e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009470:	4b0e      	ldr	r3, [pc, #56]	; (80094ac <TL_MM_Init+0x74>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	6812      	ldr	r2, [r2, #0]
 8009478:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800947a:	4b0c      	ldr	r3, [pc, #48]	; (80094ac <TL_MM_Init+0x74>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	6852      	ldr	r2, [r2, #4]
 8009482:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009484:	4b09      	ldr	r3, [pc, #36]	; (80094ac <TL_MM_Init+0x74>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	6912      	ldr	r2, [r2, #16]
 800948c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800948e:	4b07      	ldr	r3, [pc, #28]	; (80094ac <TL_MM_Init+0x74>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	6952      	ldr	r2, [r2, #20]
 8009496:	619a      	str	r2, [r3, #24]

  return;
 8009498:	bf00      	nop
}
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	200300b4 	.word	0x200300b4
 80094a4:	200002b4 	.word	0x200002b4
 80094a8:	20030000 	.word	0x20030000
 80094ac:	200002cc 	.word	0x200002cc

080094b0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80094b8:	6879      	ldr	r1, [r7, #4]
 80094ba:	4807      	ldr	r0, [pc, #28]	; (80094d8 <TL_MM_EvtDone+0x28>)
 80094bc:	f000 f9e2 	bl	8009884 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80094c0:	6879      	ldr	r1, [r7, #4]
 80094c2:	2000      	movs	r0, #0
 80094c4:	f000 f858 	bl	8009578 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80094c8:	4804      	ldr	r0, [pc, #16]	; (80094dc <TL_MM_EvtDone+0x2c>)
 80094ca:	f006 fdb7 	bl	801003c <HW_IPCC_MM_SendFreeBuf>

  return;
 80094ce:	bf00      	nop
}
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	200002b4 	.word	0x200002b4
 80094dc:	080094e1 	.word	0x080094e1

080094e0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80094e6:	e00c      	b.n	8009502 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80094e8:	1d3b      	adds	r3, r7, #4
 80094ea:	4619      	mov	r1, r3
 80094ec:	480a      	ldr	r0, [pc, #40]	; (8009518 <SendFreeBuf+0x38>)
 80094ee:	f000 fa0c 	bl	800990a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80094f2:	4b0a      	ldr	r3, [pc, #40]	; (800951c <SendFreeBuf+0x3c>)
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	4611      	mov	r1, r2
 80094fc:	4618      	mov	r0, r3
 80094fe:	f000 f9c1 	bl	8009884 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009502:	4805      	ldr	r0, [pc, #20]	; (8009518 <SendFreeBuf+0x38>)
 8009504:	f000 f97a 	bl	80097fc <LST_is_empty>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d0ec      	beq.n	80094e8 <SendFreeBuf+0x8>
  }

  return;
 800950e:	bf00      	nop
}
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	200002b4 	.word	0x200002b4
 800951c:	20030000 	.word	0x20030000

08009520 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009524:	4805      	ldr	r0, [pc, #20]	; (800953c <TL_TRACES_Init+0x1c>)
 8009526:	f000 f959 	bl	80097dc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800952a:	4b05      	ldr	r3, [pc, #20]	; (8009540 <TL_TRACES_Init+0x20>)
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	4a03      	ldr	r2, [pc, #12]	; (800953c <TL_TRACES_Init+0x1c>)
 8009530:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009532:	f006 fdb9 	bl	80100a8 <HW_IPCC_TRACES_Init>

  return;
 8009536:	bf00      	nop
}
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	200300bc 	.word	0x200300bc
 8009540:	20030000 	.word	0x20030000

08009544 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800954a:	e008      	b.n	800955e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800954c:	1d3b      	adds	r3, r7, #4
 800954e:	4619      	mov	r1, r3
 8009550:	4808      	ldr	r0, [pc, #32]	; (8009574 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009552:	f000 f9da 	bl	800990a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4618      	mov	r0, r3
 800955a:	f7f7 fdcf 	bl	80010fc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800955e:	4805      	ldr	r0, [pc, #20]	; (8009574 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009560:	f000 f94c 	bl	80097fc <LST_is_empty>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d0f0      	beq.n	800954c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800956a:	bf00      	nop
}
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	200300bc 	.word	0x200300bc

08009578 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009578:	b480      	push	{r7}
 800957a:	b085      	sub	sp, #20
 800957c:	af00      	add	r7, sp, #0
 800957e:	4603      	mov	r3, r0
 8009580:	6039      	str	r1, [r7, #0]
 8009582:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009584:	79fb      	ldrb	r3, [r7, #7]
 8009586:	2b06      	cmp	r3, #6
 8009588:	d849      	bhi.n	800961e <OutputDbgTrace+0xa6>
 800958a:	a201      	add	r2, pc, #4	; (adr r2, 8009590 <OutputDbgTrace+0x18>)
 800958c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009590:	080095ad 	.word	0x080095ad
 8009594:	080095cf 	.word	0x080095cf
 8009598:	080095d5 	.word	0x080095d5
 800959c:	080095ef 	.word	0x080095ef
 80095a0:	080095fb 	.word	0x080095fb
 80095a4:	08009601 	.word	0x08009601
 80095a8:	08009613 	.word	0x08009613
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	7a5b      	ldrb	r3, [r3, #9]
 80095b4:	2b0f      	cmp	r3, #15
 80095b6:	d004      	beq.n	80095c2 <OutputDbgTrace+0x4a>
 80095b8:	2bff      	cmp	r3, #255	; 0xff
 80095ba:	d004      	beq.n	80095c6 <OutputDbgTrace+0x4e>
 80095bc:	2b0e      	cmp	r3, #14
 80095be:	d004      	beq.n	80095ca <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80095c0:	e004      	b.n	80095cc <OutputDbgTrace+0x54>
          break;
 80095c2:	bf00      	nop
 80095c4:	e02c      	b.n	8009620 <OutputDbgTrace+0xa8>
          break;
 80095c6:	bf00      	nop
 80095c8:	e02a      	b.n	8009620 <OutputDbgTrace+0xa8>
          break;
 80095ca:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80095cc:	e028      	b.n	8009620 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80095d2:	e025      	b.n	8009620 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	7a5b      	ldrb	r3, [r3, #9]
 80095dc:	2b0e      	cmp	r3, #14
 80095de:	d002      	beq.n	80095e6 <OutputDbgTrace+0x6e>
 80095e0:	2b0f      	cmp	r3, #15
 80095e2:	d002      	beq.n	80095ea <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80095e4:	e002      	b.n	80095ec <OutputDbgTrace+0x74>
          break;
 80095e6:	bf00      	nop
 80095e8:	e01a      	b.n	8009620 <OutputDbgTrace+0xa8>
          break;
 80095ea:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80095ec:	e018      	b.n	8009620 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	7a5b      	ldrb	r3, [r3, #9]
 80095f6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80095f8:	e012      	b.n	8009620 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80095fe:	e00f      	b.n	8009620 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	7a5b      	ldrb	r3, [r3, #9]
 8009608:	2b0e      	cmp	r3, #14
 800960a:	d000      	beq.n	800960e <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800960c:	e000      	b.n	8009610 <OutputDbgTrace+0x98>
          break;
 800960e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009610:	e006      	b.n	8009620 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	7a5b      	ldrb	r3, [r3, #9]
 800961a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800961c:	e000      	b.n	8009620 <OutputDbgTrace+0xa8>

    default:
      break;
 800961e:	bf00      	nop
  }

  return;
 8009620:	bf00      	nop
}
 8009622:	3714      	adds	r7, #20
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009632:	f3ef 8310 	mrs	r3, PRIMASK
 8009636:	60fb      	str	r3, [r7, #12]
  return(result);
 8009638:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800963a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800963c:	b672      	cpsid	i

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800963e:	1cbb      	adds	r3, r7, #2
 8009640:	4619      	mov	r1, r3
 8009642:	4812      	ldr	r0, [pc, #72]	; (800968c <DbgTrace_TxCpltCallback+0x60>)
 8009644:	f000 fbd7 	bl	8009df6 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8009648:	1cbb      	adds	r3, r7, #2
 800964a:	4619      	mov	r1, r3
 800964c:	480f      	ldr	r0, [pc, #60]	; (800968c <DbgTrace_TxCpltCallback+0x60>)
 800964e:	f000 fcc6 	bl	8009fde <CircularQueue_Sense>
 8009652:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00b      	beq.n	8009672 <DbgTrace_TxCpltCallback+0x46>
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8009664:	887b      	ldrh	r3, [r7, #2]
 8009666:	4a0a      	ldr	r2, [pc, #40]	; (8009690 <DbgTrace_TxCpltCallback+0x64>)
 8009668:	4619      	mov	r1, r3
 800966a:	6938      	ldr	r0, [r7, #16]
 800966c:	f7f7 fd61 	bl	8001132 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8009670:	e007      	b.n	8009682 <DbgTrace_TxCpltCallback+0x56>
    DbgTracePeripheralReady = SET;
 8009672:	4b08      	ldr	r3, [pc, #32]	; (8009694 <DbgTrace_TxCpltCallback+0x68>)
 8009674:	2201      	movs	r2, #1
 8009676:	701a      	strb	r2, [r3, #0]
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	607b      	str	r3, [r7, #4]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f383 8810 	msr	PRIMASK, r3
}
 8009682:	bf00      	nop
 8009684:	3718      	adds	r7, #24
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	200002d0 	.word	0x200002d0
 8009690:	0800962d 	.word	0x0800962d
 8009694:	20000019 	.word	0x20000019

08009698 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800969e:	f7f7 fd42 	bl	8001126 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 80096a2:	2302      	movs	r3, #2
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	2300      	movs	r3, #0
 80096a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80096ac:	4903      	ldr	r1, [pc, #12]	; (80096bc <DbgTraceInit+0x24>)
 80096ae:	4804      	ldr	r0, [pc, #16]	; (80096c0 <DbgTraceInit+0x28>)
 80096b0:	f000 f948 	bl	8009944 <CircularQueue_Init>
#endif 
#endif
  return;
 80096b4:	bf00      	nop
}
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	200002f0 	.word	0x200002f0
 80096c0:	200002d0 	.word	0x200002d0

080096c4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	68b9      	ldr	r1, [r7, #8]
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f000 f805 	bl	80096e4 <DbgTraceWrite>
 80096da:	4603      	mov	r3, r0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b08a      	sub	sp, #40	; 0x28
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 80096f0:	2300      	movs	r3, #0
 80096f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096f4:	f3ef 8310 	mrs	r3, PRIMASK
 80096f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80096fa:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 80096fc:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009704:	d102      	bne.n	800970c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8009706:	2300      	movs	r3, #0
 8009708:	627b      	str	r3, [r7, #36]	; 0x24
 800970a:	e034      	b.n	8009776 <DbgTraceWrite+0x92>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d006      	beq.n	8009720 <DbgTraceWrite+0x3c>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2b02      	cmp	r3, #2
 8009716:	d003      	beq.n	8009720 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8009718:	f04f 33ff 	mov.w	r3, #4294967295
 800971c:	627b      	str	r3, [r7, #36]	; 0x24
 800971e:	e02a      	b.n	8009776 <DbgTraceWrite+0x92>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d027      	beq.n	8009776 <DbgTraceWrite+0x92>
  {
    chars_written = bufSize;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800972a:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	b29a      	uxth	r2, r3
 8009730:	2301      	movs	r3, #1
 8009732:	68b9      	ldr	r1, [r7, #8]
 8009734:	4812      	ldr	r0, [pc, #72]	; (8009780 <DbgTraceWrite+0x9c>)
 8009736:	f000 f937 	bl	80099a8 <CircularQueue_Add>
 800973a:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d014      	beq.n	800976c <DbgTraceWrite+0x88>
 8009742:	4b10      	ldr	r3, [pc, #64]	; (8009784 <DbgTraceWrite+0xa0>)
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	b2db      	uxtb	r3, r3
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00f      	beq.n	800976c <DbgTraceWrite+0x88>
    {
      DbgTracePeripheralReady = RESET;
 800974c:	4b0d      	ldr	r3, [pc, #52]	; (8009784 <DbgTraceWrite+0xa0>)
 800974e:	2200      	movs	r2, #0
 8009750:	701a      	strb	r2, [r3, #0]
 8009752:	6a3b      	ldr	r3, [r7, #32]
 8009754:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f383 8810 	msr	PRIMASK, r3
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	b29b      	uxth	r3, r3
 8009760:	4a09      	ldr	r2, [pc, #36]	; (8009788 <DbgTraceWrite+0xa4>)
 8009762:	4619      	mov	r1, r3
 8009764:	69f8      	ldr	r0, [r7, #28]
 8009766:	f7f7 fce4 	bl	8001132 <DbgOutputTraces>
 800976a:	e004      	b.n	8009776 <DbgTraceWrite+0x92>
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	613b      	str	r3, [r7, #16]
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	f383 8810 	msr	PRIMASK, r3
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8009776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009778:	4618      	mov	r0, r3
 800977a:	3728      	adds	r7, #40	; 0x28
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	200002d0 	.word	0x200002d0
 8009784:	20000019 	.word	0x20000019
 8009788:	0800962d 	.word	0x0800962d

0800978c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	4603      	mov	r3, r0
 8009794:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009796:	4b0f      	ldr	r3, [pc, #60]	; (80097d4 <OTP_Read+0x48>)
 8009798:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800979a:	e002      	b.n	80097a2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	3b08      	subs	r3, #8
 80097a0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	3307      	adds	r3, #7
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	79fa      	ldrb	r2, [r7, #7]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d003      	beq.n	80097b6 <OTP_Read+0x2a>
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	4a09      	ldr	r2, [pc, #36]	; (80097d8 <OTP_Read+0x4c>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d1f2      	bne.n	800979c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3307      	adds	r3, #7
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	79fa      	ldrb	r2, [r7, #7]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d001      	beq.n	80097c6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80097c2:	2300      	movs	r3, #0
 80097c4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80097c6:	68fb      	ldr	r3, [r7, #12]
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3714      	adds	r7, #20
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr
 80097d4:	1fff73f8 	.word	0x1fff73f8
 80097d8:	1fff7000 	.word	0x1fff7000

080097dc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	605a      	str	r2, [r3, #4]
}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009804:	f3ef 8310 	mrs	r3, PRIMASK
 8009808:	60fb      	str	r3, [r7, #12]
  return(result);
 800980a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800980c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800980e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	429a      	cmp	r2, r3
 8009818:	d102      	bne.n	8009820 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800981a:	2301      	movs	r3, #1
 800981c:	75fb      	strb	r3, [r7, #23]
 800981e:	e001      	b.n	8009824 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8009820:	2300      	movs	r3, #0
 8009822:	75fb      	strb	r3, [r7, #23]
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800982e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009830:	4618      	mov	r0, r3
 8009832:	371c      	adds	r7, #28
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800983c:	b480      	push	{r7}
 800983e:	b087      	sub	sp, #28
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009846:	f3ef 8310 	mrs	r3, PRIMASK
 800984a:	60fb      	str	r3, [r7, #12]
  return(result);
 800984c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800984e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009850:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	605a      	str	r2, [r3, #4]
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009878:	bf00      	nop
 800987a:	371c      	adds	r7, #28
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8009884:	b480      	push	{r7}
 8009886:	b087      	sub	sp, #28
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800988e:	f3ef 8310 	mrs	r3, PRIMASK
 8009892:	60fb      	str	r3, [r7, #12]
  return(result);
 8009894:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009896:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009898:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	683a      	ldr	r2, [r7, #0]
 80098ac:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	683a      	ldr	r2, [r7, #0]
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80098c0:	bf00      	nop
 80098c2:	371c      	adds	r7, #28
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b087      	sub	sp, #28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098d4:	f3ef 8310 	mrs	r3, PRIMASK
 80098d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80098da:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80098dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80098de:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	6812      	ldr	r2, [r2, #0]
 80098e8:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	6852      	ldr	r2, [r2, #4]
 80098f2:	605a      	str	r2, [r3, #4]
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80098fe:	bf00      	nop
 8009900:	371c      	adds	r7, #28
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b086      	sub	sp, #24
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009914:	f3ef 8310 	mrs	r3, PRIMASK
 8009918:	60fb      	str	r3, [r7, #12]
  return(result);
 800991a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800991c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800991e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4618      	mov	r0, r3
 800992e:	f7ff ffcd 	bl	80098cc <LST_remove_node>
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800993c:	bf00      	nop
 800993e:	3718      	adds	r7, #24
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
 8009950:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	68ba      	ldr	r2, [r7, #8]
 8009956:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	887a      	ldrh	r2, [r7, #2]
 800997a:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	7e3a      	ldrb	r2, [r7, #24]
 8009980:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8009982:	7e3b      	ldrb	r3, [r7, #24]
 8009984:	f003 0302 	and.w	r3, r3, #2
 8009988:	2b00      	cmp	r3, #0
 800998a:	d006      	beq.n	800999a <CircularQueue_Init+0x56>
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	891b      	ldrh	r3, [r3, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8009994:	f04f 33ff 	mov.w	r3, #4294967295
 8009998:	e000      	b.n	800999c <CircularQueue_Init+0x58>
  }
  return 0;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3714      	adds	r7, #20
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b08e      	sub	sp, #56	; 0x38
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	603b      	str	r3, [r7, #0]
 80099b4:	4613      	mov	r3, r2
 80099b6:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 80099b8:	2300      	movs	r3, #0
 80099ba:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 80099bc:	2300      	movs	r3, #0
 80099be:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 80099c0:	2300      	movs	r3, #0
 80099c2:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 80099c4:	2300      	movs	r3, #0
 80099c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80099c8:	2300      	movs	r3, #0
 80099ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 80099cc:	2300      	movs	r3, #0
 80099ce:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 80099d0:	2300      	movs	r3, #0
 80099d2:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	891b      	ldrh	r3, [r3, #8]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <CircularQueue_Add+0x38>
 80099dc:	2302      	movs	r3, #2
 80099de:	e000      	b.n	80099e2 <CircularQueue_Add+0x3a>
 80099e0:	2300      	movs	r3, #0
 80099e2:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	695b      	ldr	r3, [r3, #20]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d02a      	beq.n	8009a42 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	891b      	ldrh	r3, [r3, #8]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d123      	bne.n	8009a3c <CircularQueue_Add+0x94>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	4413      	add	r3, r2
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	b29a      	uxth	r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6819      	ldr	r1, [r3, #0]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	1c58      	adds	r0, r3, #1
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	4298      	cmp	r0, r3
 8009a12:	d306      	bcc.n	8009a22 <CircularQueue_Add+0x7a>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6918      	ldr	r0, [r3, #16]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	1ac3      	subs	r3, r0, r3
 8009a1e:	3301      	adds	r3, #1
 8009a20:	e002      	b.n	8009a28 <CircularQueue_Add+0x80>
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	3301      	adds	r3, #1
 8009a28:	440b      	add	r3, r1
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	021b      	lsls	r3, r3, #8
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	4413      	add	r3, r2
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	3302      	adds	r3, #2
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	e001      	b.n	8009a40 <CircularQueue_Add+0x98>
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	891b      	ldrh	r3, [r3, #8]
 8009a40:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	891b      	ldrh	r3, [r3, #8]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d002      	beq.n	8009a50 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	891b      	ldrh	r3, [r3, #8]
 8009a4e:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	691a      	ldr	r2, [r3, #16]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d307      	bcc.n	8009a6c <CircularQueue_Add+0xc4>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	685a      	ldr	r2, [r3, #4]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6919      	ldr	r1, [r3, #16]
 8009a64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009a66:	440b      	add	r3, r1
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	e000      	b.n	8009a6e <CircularQueue_Add+0xc6>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8009a70:	88fa      	ldrh	r2, [r7, #6]
 8009a72:	7ffb      	ldrb	r3, [r7, #31]
 8009a74:	4413      	add	r3, r2
 8009a76:	461a      	mov	r2, r3
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	fb03 f302 	mul.w	r3, r3, r2
 8009a7e:	69ba      	ldr	r2, [r7, #24]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d80b      	bhi.n	8009a9c <CircularQueue_Add+0xf4>
 8009a84:	88fa      	ldrh	r2, [r7, #6]
 8009a86:	7ffb      	ldrb	r3, [r7, #31]
 8009a88:	4413      	add	r3, r2
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a92:	fb02 f201 	mul.w	r2, r2, r1
 8009a96:	1a9b      	subs	r3, r3, r2
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	e000      	b.n	8009a9e <CircularQueue_Add+0xf6>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8009aa0:	7dfa      	ldrb	r2, [r7, #23]
 8009aa2:	7ffb      	ldrb	r3, [r7, #31]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	bf8c      	ite	hi
 8009aa8:	2301      	movhi	r3, #1
 8009aaa:	2300      	movls	r3, #0
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8009ab0:	7fbb      	ldrb	r3, [r7, #30]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d008      	beq.n	8009ac8 <CircularQueue_Add+0x120>
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	7f1b      	ldrb	r3, [r3, #28]
 8009aba:	f003 0301 	and.w	r3, r3, #1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d002      	beq.n	8009ac8 <CircularQueue_Add+0x120>
 8009ac2:	7dfb      	ldrb	r3, [r7, #23]
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	e000      	b.n	8009aca <CircularQueue_Add+0x122>
 8009ac8:	8bbb      	ldrh	r3, [r7, #28]
 8009aca:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8009acc:	7fbb      	ldrb	r3, [r7, #30]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d008      	beq.n	8009ae4 <CircularQueue_Add+0x13c>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	7f1b      	ldrb	r3, [r3, #28]
 8009ad6:	f003 0302 	and.w	r3, r3, #2
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d002      	beq.n	8009ae4 <CircularQueue_Add+0x13c>
 8009ade:	7ffb      	ldrb	r3, [r7, #31]
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	e000      	b.n	8009ae6 <CircularQueue_Add+0x13e>
 8009ae4:	8bbb      	ldrh	r3, [r7, #28]
 8009ae6:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8009ae8:	88fb      	ldrh	r3, [r7, #6]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f000 817e 	beq.w	8009dec <CircularQueue_Add+0x444>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	695a      	ldr	r2, [r3, #20]
 8009af4:	88f9      	ldrh	r1, [r7, #6]
 8009af6:	7ffb      	ldrb	r3, [r7, #31]
 8009af8:	440b      	add	r3, r1
 8009afa:	4619      	mov	r1, r3
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	fb03 f301 	mul.w	r3, r3, r1
 8009b02:	441a      	add	r2, r3
 8009b04:	8bbb      	ldrh	r3, [r7, #28]
 8009b06:	441a      	add	r2, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	f200 816d 	bhi.w	8009dec <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8009b12:	2300      	movs	r3, #0
 8009b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b16:	e14a      	b.n	8009dae <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	691a      	ldr	r2, [r3, #16]
 8009b1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009b1e:	441a      	add	r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d307      	bcc.n	8009b38 <CircularQueue_Add+0x190>
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	691a      	ldr	r2, [r3, #16]
 8009b2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009b2e:	441a      	add	r2, r3
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	e003      	b.n	8009b40 <CircularQueue_Add+0x198>
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	691a      	ldr	r2, [r3, #16]
 8009b3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009b3e:	4413      	add	r3, r2
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	891b      	ldrh	r3, [r3, #8]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d130      	bne.n	8009bb4 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b58:	1c59      	adds	r1, r3, #1
 8009b5a:	6339      	str	r1, [r7, #48]	; 0x30
 8009b5c:	4413      	add	r3, r2
 8009b5e:	88fa      	ldrh	r2, [r7, #6]
 8009b60:	b2d2      	uxtb	r2, r2
 8009b62:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d304      	bcc.n	8009b78 <CircularQueue_Add+0x1d0>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b74:	1ad3      	subs	r3, r2, r3
 8009b76:	e000      	b.n	8009b7a <CircularQueue_Add+0x1d2>
 8009b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7a:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8009b7c:	88fb      	ldrh	r3, [r7, #6]
 8009b7e:	0a1b      	lsrs	r3, r3, #8
 8009b80:	b298      	uxth	r0, r3
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b88:	1c59      	adds	r1, r3, #1
 8009b8a:	6339      	str	r1, [r7, #48]	; 0x30
 8009b8c:	4413      	add	r3, r2
 8009b8e:	b2c2      	uxtb	r2, r0
 8009b90:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d304      	bcc.n	8009ba6 <CircularQueue_Add+0x1fe>
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	e000      	b.n	8009ba8 <CircularQueue_Add+0x200>
 8009ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba8:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	695b      	ldr	r3, [r3, #20]
 8009bae:	1c9a      	adds	r2, r3, #2
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8009bb4:	88fa      	ldrh	r2, [r7, #6]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6859      	ldr	r1, [r3, #4]
 8009bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bbc:	1acb      	subs	r3, r1, r3
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	bf28      	it	cs
 8009bc2:	4613      	movcs	r3, r2
 8009bc4:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8009bc6:	88fb      	ldrh	r3, [r7, #6]
 8009bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d007      	beq.n	8009bde <CircularQueue_Add+0x236>
 8009bce:	88fb      	ldrh	r3, [r7, #6]
 8009bd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d225      	bcs.n	8009c22 <CircularQueue_Add+0x27a>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	7f1b      	ldrb	r3, [r3, #28]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d121      	bne.n	8009c22 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be4:	18d0      	adds	r0, r2, r3
 8009be6:	88fb      	ldrh	r3, [r7, #6]
 8009be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bea:	fb02 f303 	mul.w	r3, r2, r3
 8009bee:	68ba      	ldr	r2, [r7, #8]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	f006 fc07 	bl	8010408 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	695a      	ldr	r2, [r3, #20]
 8009bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c00:	441a      	add	r2, r3
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8009c06:	2300      	movs	r3, #0
 8009c08:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8009c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0c:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8009c0e:	88fa      	ldrh	r2, [r7, #6]
 8009c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c12:	1ad3      	subs	r3, r2, r3
 8009c14:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8009c16:	7ffb      	ldrb	r3, [r7, #31]
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	88fb      	ldrh	r3, [r7, #6]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009c20:	e0a4      	b.n	8009d6c <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8009c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 80a1 	beq.w	8009d6c <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	7f1b      	ldrb	r3, [r3, #28]
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d03a      	beq.n	8009cac <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	891b      	ldrh	r3, [r3, #8]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d10d      	bne.n	8009c5a <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c44:	3b02      	subs	r3, #2
 8009c46:	4413      	add	r3, r2
 8009c48:	22ff      	movs	r2, #255	; 0xff
 8009c4a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c52:	3b01      	subs	r3, #1
 8009c54:	4413      	add	r3, r2
 8009c56:	22ff      	movs	r2, #255	; 0xff
 8009c58:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	695a      	ldr	r2, [r3, #20]
 8009c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c60:	441a      	add	r2, r3
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8009c66:	2300      	movs	r3, #0
 8009c68:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8009c6a:	88fb      	ldrh	r3, [r7, #6]
 8009c6c:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8009c6e:	2300      	movs	r3, #0
 8009c70:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	891b      	ldrh	r3, [r3, #8]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d16f      	bne.n	8009d5a <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c80:	1c59      	adds	r1, r3, #1
 8009c82:	6339      	str	r1, [r7, #48]	; 0x30
 8009c84:	4413      	add	r3, r2
 8009c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c88:	b2d2      	uxtb	r2, r2
 8009c8a:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8e:	0a18      	lsrs	r0, r3, #8
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c96:	1c59      	adds	r1, r3, #1
 8009c98:	6339      	str	r1, [r7, #48]	; 0x30
 8009c9a:	4413      	add	r3, r2
 8009c9c:	b2c2      	uxtb	r2, r0
 8009c9e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	695b      	ldr	r3, [r3, #20]
 8009ca4:	1c9a      	adds	r2, r3, #2
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	615a      	str	r2, [r3, #20]
 8009caa:	e056      	b.n	8009d5a <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	7f1b      	ldrb	r3, [r3, #28]
 8009cb0:	f003 0302 	and.w	r3, r3, #2
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d050      	beq.n	8009d5a <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	891b      	ldrh	r3, [r3, #8]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d14a      	bne.n	8009d56 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc6:	3b02      	subs	r3, #2
 8009cc8:	4413      	add	r3, r2
 8009cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ccc:	b2d2      	uxtb	r2, r2
 8009cce:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd2:	0a19      	lsrs	r1, r3, #8
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cda:	3b01      	subs	r3, #1
 8009cdc:	4413      	add	r3, r2
 8009cde:	b2ca      	uxtb	r2, r1
 8009ce0:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce8:	18d0      	adds	r0, r2, r3
 8009cea:	88fb      	ldrh	r3, [r7, #6]
 8009cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cee:	fb02 f303 	mul.w	r3, r2, r3
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	f006 fb85 	bl	8010408 <memcpy>
             q->byteCount += NbBytesToCopy; 
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	695a      	ldr	r2, [r3, #20]
 8009d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d04:	441a      	add	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8009d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0c:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8009d0e:	88fa      	ldrh	r2, [r7, #6]
 8009d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	699b      	ldr	r3, [r3, #24]
 8009d1a:	1c5a      	adds	r2, r3, #1
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8009d20:	2300      	movs	r3, #0
 8009d22:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2a:	1c59      	adds	r1, r3, #1
 8009d2c:	6339      	str	r1, [r7, #48]	; 0x30
 8009d2e:	4413      	add	r3, r2
 8009d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d32:	b2d2      	uxtb	r2, r2
 8009d34:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d38:	0a18      	lsrs	r0, r3, #8
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d40:	1c59      	adds	r1, r3, #1
 8009d42:	6339      	str	r1, [r7, #48]	; 0x30
 8009d44:	4413      	add	r3, r2
 8009d46:	b2c2      	uxtb	r2, r0
 8009d48:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	1c9a      	adds	r2, r3, #2
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	615a      	str	r2, [r3, #20]
 8009d54:	e001      	b.n	8009d5a <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8009d56:	2300      	movs	r3, #0
 8009d58:	e049      	b.n	8009dee <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8009d5a:	7ffb      	ldrb	r3, [r7, #31]
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	4413      	add	r3, r2
 8009d64:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 8009d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d015      	beq.n	8009d9e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d78:	18d0      	adds	r0, r2, r3
 8009d7a:	88fb      	ldrh	r3, [r7, #6]
 8009d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d7e:	fb02 f203 	mul.w	r2, r2, r3
 8009d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d84:	4413      	add	r3, r2
 8009d86:	68ba      	ldr	r2, [r7, #8]
 8009d88:	4413      	add	r3, r2
 8009d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	f006 fb3b 	bl	8010408 <memcpy>
        q->byteCount += NbBytesToCopy;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	695a      	ldr	r2, [r3, #20]
 8009d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d98:	441a      	add	r2, r3
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	699b      	ldr	r3, [r3, #24]
 8009da2:	1c5a      	adds	r2, r3, #1
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8009da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009daa:	3301      	adds	r3, #1
 8009dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	f4ff aeb0 	bcc.w	8009b18 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6919      	ldr	r1, [r3, #16]
 8009dc0:	7ffb      	ldrb	r3, [r7, #31]
 8009dc2:	4419      	add	r1, r3
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	4299      	cmp	r1, r3
 8009dca:	d307      	bcc.n	8009ddc <CircularQueue_Add+0x434>
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6919      	ldr	r1, [r3, #16]
 8009dd0:	7ffb      	ldrb	r3, [r7, #31]
 8009dd2:	4419      	add	r1, r3
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	1acb      	subs	r3, r1, r3
 8009dda:	e003      	b.n	8009de4 <CircularQueue_Add+0x43c>
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6919      	ldr	r1, [r3, #16]
 8009de0:	7ffb      	ldrb	r3, [r7, #31]
 8009de2:	440b      	add	r3, r1
 8009de4:	4413      	add	r3, r2
 8009de6:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8009de8:	6a3b      	ldr	r3, [r7, #32]
 8009dea:	e000      	b.n	8009dee <CircularQueue_Add+0x446>
    return NULL;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3738      	adds	r7, #56	; 0x38
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8009df6:	b480      	push	{r7}
 8009df8:	b085      	sub	sp, #20
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
 8009dfe:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009e00:	2300      	movs	r3, #0
 8009e02:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 8009e04:	2300      	movs	r3, #0
 8009e06:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	891b      	ldrh	r3, [r3, #8]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <CircularQueue_Remove+0x1e>
 8009e10:	2302      	movs	r3, #2
 8009e12:	e000      	b.n	8009e16 <CircularQueue_Remove+0x20>
 8009e14:	2300      	movs	r3, #0
 8009e16:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	695b      	ldr	r3, [r3, #20]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f000 80d4 	beq.w	8009fd0 <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	891b      	ldrh	r3, [r3, #8]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d121      	bne.n	8009e74 <CircularQueue_Remove+0x7e>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	4413      	add	r3, r2
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	b29a      	uxth	r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6819      	ldr	r1, [r3, #0]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	1c58      	adds	r0, r3, #1
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	4298      	cmp	r0, r3
 8009e4e:	d306      	bcc.n	8009e5e <CircularQueue_Remove+0x68>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	68d8      	ldr	r0, [r3, #12]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	1ac3      	subs	r3, r0, r3
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	e002      	b.n	8009e64 <CircularQueue_Remove+0x6e>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	3301      	adds	r3, #1
 8009e64:	440b      	add	r3, r1
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	021b      	lsls	r3, r3, #8
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	4413      	add	r3, r2
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	e001      	b.n	8009e78 <CircularQueue_Remove+0x82>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	891b      	ldrh	r3, [r3, #8]
 8009e78:	683a      	ldr	r2, [r7, #0]
 8009e7a:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	7f1b      	ldrb	r3, [r3, #28]
 8009e80:	f003 0301 	and.w	r3, r3, #1
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d059      	beq.n	8009f3c <CircularQueue_Remove+0x146>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	7f1b      	ldrb	r3, [r3, #28]
 8009e8c:	f003 0302 	and.w	r3, r3, #2
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d153      	bne.n	8009f3c <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	881b      	ldrh	r3, [r3, #0]
 8009e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d103      	bne.n	8009ea8 <CircularQueue_Remove+0xb2>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	891b      	ldrh	r3, [r3, #8]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d012      	beq.n	8009ece <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	68da      	ldr	r2, [r3, #12]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d943      	bls.n	8009f3c <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	891b      	ldrh	r3, [r3, #8]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d03f      	beq.n	8009f3c <CircularQueue_Remove+0x146>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	685a      	ldr	r2, [r3, #4]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	8912      	ldrh	r2, [r2, #8]
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d236      	bcs.n	8009f3c <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	695a      	ldr	r2, [r3, #20]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	68d9      	ldr	r1, [r3, #12]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	1acb      	subs	r3, r1, r3
 8009edc:	441a      	add	r2, r3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	891b      	ldrh	r3, [r3, #8]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d121      	bne.n	8009f34 <CircularQueue_Remove+0x13e>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	4413      	add	r3, r2
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6819      	ldr	r1, [r3, #0]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	1c58      	adds	r0, r3, #1
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	4298      	cmp	r0, r3
 8009f0e:	d306      	bcc.n	8009f1e <CircularQueue_Remove+0x128>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	68d8      	ldr	r0, [r3, #12]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	1ac3      	subs	r3, r0, r3
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	e002      	b.n	8009f24 <CircularQueue_Remove+0x12e>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	3301      	adds	r3, #1
 8009f24:	440b      	add	r3, r1
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	021b      	lsls	r3, r3, #8
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	4413      	add	r3, r2
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	e001      	b.n	8009f38 <CircularQueue_Remove+0x142>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	891b      	ldrh	r3, [r3, #8]
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	68d9      	ldr	r1, [r3, #12]
 8009f44:	7afb      	ldrb	r3, [r7, #11]
 8009f46:	4419      	add	r1, r3
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	4299      	cmp	r1, r3
 8009f4e:	d307      	bcc.n	8009f60 <CircularQueue_Remove+0x16a>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	68d9      	ldr	r1, [r3, #12]
 8009f54:	7afb      	ldrb	r3, [r7, #11]
 8009f56:	4419      	add	r1, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	1acb      	subs	r3, r1, r3
 8009f5e:	e003      	b.n	8009f68 <CircularQueue_Remove+0x172>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	68d9      	ldr	r1, [r3, #12]
 8009f64:	7afb      	ldrb	r3, [r7, #11]
 8009f66:	440b      	add	r3, r1
 8009f68:	4413      	add	r3, r2
 8009f6a:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	695b      	ldr	r3, [r3, #20]
 8009f70:	683a      	ldr	r2, [r7, #0]
 8009f72:	8812      	ldrh	r2, [r2, #0]
 8009f74:	4611      	mov	r1, r2
 8009f76:	7afa      	ldrb	r2, [r7, #11]
 8009f78:	440a      	add	r2, r1
 8009f7a:	1a9a      	subs	r2, r3, r2
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	695b      	ldr	r3, [r3, #20]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d01e      	beq.n	8009fc6 <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	683a      	ldr	r2, [r7, #0]
 8009f8e:	8812      	ldrh	r2, [r2, #0]
 8009f90:	441a      	add	r2, r3
 8009f92:	7afb      	ldrb	r3, [r7, #11]
 8009f94:	441a      	add	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d30a      	bcc.n	8009fb4 <CircularQueue_Remove+0x1be>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	8812      	ldrh	r2, [r2, #0]
 8009fa6:	441a      	add	r2, r3
 8009fa8:	7afb      	ldrb	r3, [r7, #11]
 8009faa:	441a      	add	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	e006      	b.n	8009fc2 <CircularQueue_Remove+0x1cc>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	683a      	ldr	r2, [r7, #0]
 8009fba:	8812      	ldrh	r2, [r2, #0]
 8009fbc:	441a      	add	r2, r3
 8009fbe:	7afb      	ldrb	r3, [r7, #11]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	699b      	ldr	r3, [r3, #24]
 8009fca:	1e5a      	subs	r2, r3, #1
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3714      	adds	r7, #20
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b087      	sub	sp, #28
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 8009fec:	2300      	movs	r3, #0
 8009fee:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	891b      	ldrh	r3, [r3, #8]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d101      	bne.n	8009ffc <CircularQueue_Sense+0x1e>
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	e000      	b.n	8009ffe <CircularQueue_Sense+0x20>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	2200      	movs	r2, #0
 800a004:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 800a006:	2300      	movs	r3, #0
 800a008:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f000 8093 	beq.w	800a13a <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	891b      	ldrh	r3, [r3, #8]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d121      	bne.n	800a066 <CircularQueue_Sense+0x88>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	4413      	add	r3, r2
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	b29a      	uxth	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6819      	ldr	r1, [r3, #0]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	1c58      	adds	r0, r3, #1
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	4298      	cmp	r0, r3
 800a040:	d306      	bcc.n	800a050 <CircularQueue_Sense+0x72>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	68d8      	ldr	r0, [r3, #12]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	1ac3      	subs	r3, r0, r3
 800a04c:	3301      	adds	r3, #1
 800a04e:	e002      	b.n	800a056 <CircularQueue_Sense+0x78>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	3301      	adds	r3, #1
 800a056:	440b      	add	r3, r1
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	021b      	lsls	r3, r3, #8
 800a05e:	b29b      	uxth	r3, r3
 800a060:	4413      	add	r3, r2
 800a062:	b29b      	uxth	r3, r3
 800a064:	e001      	b.n	800a06a <CircularQueue_Sense+0x8c>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	891b      	ldrh	r3, [r3, #8]
 800a06a:	683a      	ldr	r2, [r7, #0]
 800a06c:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	7f1b      	ldrb	r3, [r3, #28]
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	d04a      	beq.n	800a110 <CircularQueue_Sense+0x132>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	7f1b      	ldrb	r3, [r3, #28]
 800a07e:	f003 0302 	and.w	r3, r3, #2
 800a082:	2b00      	cmp	r3, #0
 800a084:	d144      	bne.n	800a110 <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	881b      	ldrh	r3, [r3, #0]
 800a08a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a08e:	4293      	cmp	r3, r2
 800a090:	d103      	bne.n	800a09a <CircularQueue_Sense+0xbc>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	891b      	ldrh	r3, [r3, #8]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d012      	beq.n	800a0c0 <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68da      	ldr	r2, [r3, #12]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d934      	bls.n	800a110 <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	891b      	ldrh	r3, [r3, #8]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d030      	beq.n	800a110 <CircularQueue_Sense+0x132>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	1ad3      	subs	r3, r2, r3
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	8912      	ldrh	r2, [r2, #8]
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d227      	bcs.n	800a110 <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	891b      	ldrh	r3, [r3, #8]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d11d      	bne.n	800a108 <CircularQueue_Sense+0x12a>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6819      	ldr	r1, [r3, #0]
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	1c58      	adds	r0, r3, #1
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	4298      	cmp	r0, r3
 800a0e6:	d305      	bcc.n	800a0f4 <CircularQueue_Sense+0x116>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	6938      	ldr	r0, [r7, #16]
 800a0ee:	1ac3      	subs	r3, r0, r3
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	e001      	b.n	800a0f8 <CircularQueue_Sense+0x11a>
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	440b      	add	r3, r1
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	021b      	lsls	r3, r3, #8
 800a100:	b29b      	uxth	r3, r3
 800a102:	4413      	add	r3, r2
 800a104:	b29b      	uxth	r3, r3
 800a106:	e001      	b.n	800a10c <CircularQueue_Sense+0x12e>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	891b      	ldrh	r3, [r3, #8]
 800a10c:	683a      	ldr	r2, [r7, #0]
 800a10e:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	7bf9      	ldrb	r1, [r7, #15]
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	4419      	add	r1, r3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	4299      	cmp	r1, r3
 800a120:	d306      	bcc.n	800a130 <CircularQueue_Sense+0x152>
 800a122:	7bf9      	ldrb	r1, [r7, #15]
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	4419      	add	r1, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	1acb      	subs	r3, r1, r3
 800a12e:	e002      	b.n	800a136 <CircularQueue_Sense+0x158>
 800a130:	7bf9      	ldrb	r1, [r7, #15]
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	440b      	add	r3, r1
 800a136:	4413      	add	r3, r2
 800a138:	617b      	str	r3, [r7, #20]
  }
  return x;
 800a13a:	697b      	ldr	r3, [r7, #20]
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	371c      	adds	r7, #28
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a148:	b480      	push	{r7}
 800a14a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a14c:	bf00      	nop
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
	...

0800a158 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a15e:	f3ef 8305 	mrs	r3, IPSR
 800a162:	60bb      	str	r3, [r7, #8]
  return(result);
 800a164:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10f      	bne.n	800a18a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a16a:	f3ef 8310 	mrs	r3, PRIMASK
 800a16e:	607b      	str	r3, [r7, #4]
  return(result);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d105      	bne.n	800a182 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a176:	f3ef 8311 	mrs	r3, BASEPRI
 800a17a:	603b      	str	r3, [r7, #0]
  return(result);
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d007      	beq.n	800a192 <osKernelInitialize+0x3a>
 800a182:	4b0e      	ldr	r3, [pc, #56]	; (800a1bc <osKernelInitialize+0x64>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b02      	cmp	r3, #2
 800a188:	d103      	bne.n	800a192 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a18a:	f06f 0305 	mvn.w	r3, #5
 800a18e:	60fb      	str	r3, [r7, #12]
 800a190:	e00c      	b.n	800a1ac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a192:	4b0a      	ldr	r3, [pc, #40]	; (800a1bc <osKernelInitialize+0x64>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d105      	bne.n	800a1a6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a19a:	4b08      	ldr	r3, [pc, #32]	; (800a1bc <osKernelInitialize+0x64>)
 800a19c:	2201      	movs	r2, #1
 800a19e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	60fb      	str	r3, [r7, #12]
 800a1a4:	e002      	b.n	800a1ac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a1a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a1aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3714      	adds	r7, #20
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	200012f0 	.word	0x200012f0

0800a1c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1c6:	f3ef 8305 	mrs	r3, IPSR
 800a1ca:	60bb      	str	r3, [r7, #8]
  return(result);
 800a1cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d10f      	bne.n	800a1f2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1d2:	f3ef 8310 	mrs	r3, PRIMASK
 800a1d6:	607b      	str	r3, [r7, #4]
  return(result);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d105      	bne.n	800a1ea <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a1de:	f3ef 8311 	mrs	r3, BASEPRI
 800a1e2:	603b      	str	r3, [r7, #0]
  return(result);
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d007      	beq.n	800a1fa <osKernelStart+0x3a>
 800a1ea:	4b0f      	ldr	r3, [pc, #60]	; (800a228 <osKernelStart+0x68>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d103      	bne.n	800a1fa <osKernelStart+0x3a>
    stat = osErrorISR;
 800a1f2:	f06f 0305 	mvn.w	r3, #5
 800a1f6:	60fb      	str	r3, [r7, #12]
 800a1f8:	e010      	b.n	800a21c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a1fa:	4b0b      	ldr	r3, [pc, #44]	; (800a228 <osKernelStart+0x68>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d109      	bne.n	800a216 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a202:	f7ff ffa1 	bl	800a148 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a206:	4b08      	ldr	r3, [pc, #32]	; (800a228 <osKernelStart+0x68>)
 800a208:	2202      	movs	r2, #2
 800a20a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a20c:	f001 ffd8 	bl	800c1c0 <vTaskStartScheduler>
      stat = osOK;
 800a210:	2300      	movs	r3, #0
 800a212:	60fb      	str	r3, [r7, #12]
 800a214:	e002      	b.n	800a21c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a216:	f04f 33ff 	mov.w	r3, #4294967295
 800a21a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a21c:	68fb      	ldr	r3, [r7, #12]
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	200012f0 	.word	0x200012f0

0800a22c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b090      	sub	sp, #64	; 0x40
 800a230:	af04      	add	r7, sp, #16
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a238:	2300      	movs	r3, #0
 800a23a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a23c:	f3ef 8305 	mrs	r3, IPSR
 800a240:	61fb      	str	r3, [r7, #28]
  return(result);
 800a242:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a244:	2b00      	cmp	r3, #0
 800a246:	f040 8090 	bne.w	800a36a <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a24a:	f3ef 8310 	mrs	r3, PRIMASK
 800a24e:	61bb      	str	r3, [r7, #24]
  return(result);
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d105      	bne.n	800a262 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a256:	f3ef 8311 	mrs	r3, BASEPRI
 800a25a:	617b      	str	r3, [r7, #20]
  return(result);
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d003      	beq.n	800a26a <osThreadNew+0x3e>
 800a262:	4b44      	ldr	r3, [pc, #272]	; (800a374 <osThreadNew+0x148>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2b02      	cmp	r3, #2
 800a268:	d07f      	beq.n	800a36a <osThreadNew+0x13e>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d07c      	beq.n	800a36a <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800a270:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a274:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a276:	2318      	movs	r3, #24
 800a278:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a27a:	2300      	movs	r3, #0
 800a27c:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a27e:	f04f 33ff 	mov.w	r3, #4294967295
 800a282:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d045      	beq.n	800a316 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d002      	beq.n	800a298 <osThreadNew+0x6c>
        name = attr->name;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	699b      	ldr	r3, [r3, #24]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d002      	beq.n	800a2a6 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d008      	beq.n	800a2be <osThreadNew+0x92>
 800a2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ae:	2b38      	cmp	r3, #56	; 0x38
 800a2b0:	d805      	bhi.n	800a2be <osThreadNew+0x92>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	f003 0301 	and.w	r3, r3, #1
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d001      	beq.n	800a2c2 <osThreadNew+0x96>
        return (NULL);
 800a2be:	2300      	movs	r3, #0
 800a2c0:	e054      	b.n	800a36c <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	695b      	ldr	r3, [r3, #20]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d003      	beq.n	800a2d2 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	089b      	lsrs	r3, r3, #2
 800a2d0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00e      	beq.n	800a2f8 <osThreadNew+0xcc>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	2b5b      	cmp	r3, #91	; 0x5b
 800a2e0:	d90a      	bls.n	800a2f8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d006      	beq.n	800a2f8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	695b      	ldr	r3, [r3, #20]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d002      	beq.n	800a2f8 <osThreadNew+0xcc>
        mem = 1;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	623b      	str	r3, [r7, #32]
 800a2f6:	e010      	b.n	800a31a <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10c      	bne.n	800a31a <osThreadNew+0xee>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d108      	bne.n	800a31a <osThreadNew+0xee>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d104      	bne.n	800a31a <osThreadNew+0xee>
          mem = 0;
 800a310:	2300      	movs	r3, #0
 800a312:	623b      	str	r3, [r7, #32]
 800a314:	e001      	b.n	800a31a <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800a316:	2300      	movs	r3, #0
 800a318:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a31a:	6a3b      	ldr	r3, [r7, #32]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d110      	bne.n	800a342 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a328:	9202      	str	r2, [sp, #8]
 800a32a:	9301      	str	r3, [sp, #4]
 800a32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32e:	9300      	str	r3, [sp, #0]
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a334:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a336:	68f8      	ldr	r0, [r7, #12]
 800a338:	f001 fd70 	bl	800be1c <xTaskCreateStatic>
 800a33c:	4603      	mov	r3, r0
 800a33e:	613b      	str	r3, [r7, #16]
 800a340:	e013      	b.n	800a36a <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800a342:	6a3b      	ldr	r3, [r7, #32]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d110      	bne.n	800a36a <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34a:	b29a      	uxth	r2, r3
 800a34c:	f107 0310 	add.w	r3, r7, #16
 800a350:	9301      	str	r3, [sp, #4]
 800a352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f001 fdb8 	bl	800bed0 <xTaskCreate>
 800a360:	4603      	mov	r3, r0
 800a362:	2b01      	cmp	r3, #1
 800a364:	d001      	beq.n	800a36a <osThreadNew+0x13e>
          hTask = NULL;
 800a366:	2300      	movs	r3, #0
 800a368:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a36a:	693b      	ldr	r3, [r7, #16]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3730      	adds	r7, #48	; 0x30
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	200012f0 	.word	0x200012f0

0800a378 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800a378:	b580      	push	{r7, lr}
 800a37a:	b08a      	sub	sp, #40	; 0x28
 800a37c:	af02      	add	r7, sp, #8
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d002      	beq.n	800a392 <osThreadFlagsSet+0x1a>
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	da03      	bge.n	800a39a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800a392:	f06f 0303 	mvn.w	r3, #3
 800a396:	60fb      	str	r3, [r7, #12]
 800a398:	e046      	b.n	800a428 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800a39a:	f04f 33ff 	mov.w	r3, #4294967295
 800a39e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3a0:	f3ef 8305 	mrs	r3, IPSR
 800a3a4:	61bb      	str	r3, [r7, #24]
  return(result);
 800a3a6:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10f      	bne.n	800a3cc <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3ac:	f3ef 8310 	mrs	r3, PRIMASK
 800a3b0:	617b      	str	r3, [r7, #20]
  return(result);
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d105      	bne.n	800a3c4 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a3b8:	f3ef 8311 	mrs	r3, BASEPRI
 800a3bc:	613b      	str	r3, [r7, #16]
  return(result);
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d024      	beq.n	800a40e <osThreadFlagsSet+0x96>
 800a3c4:	4b1b      	ldr	r3, [pc, #108]	; (800a434 <osThreadFlagsSet+0xbc>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d120      	bne.n	800a40e <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800a3d0:	f107 0308 	add.w	r3, r7, #8
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	2201      	movs	r2, #1
 800a3da:	6839      	ldr	r1, [r7, #0]
 800a3dc:	69f8      	ldr	r0, [r7, #28]
 800a3de:	f002 fe2b 	bl	800d038 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800a3e2:	f107 020c 	add.w	r2, r7, #12
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	69f8      	ldr	r0, [r7, #28]
 800a3f2:	f002 fe21 	bl	800d038 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d015      	beq.n	800a428 <osThreadFlagsSet+0xb0>
 800a3fc:	4b0e      	ldr	r3, [pc, #56]	; (800a438 <osThreadFlagsSet+0xc0>)
 800a3fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a402:	601a      	str	r2, [r3, #0]
 800a404:	f3bf 8f4f 	dsb	sy
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	e00c      	b.n	800a428 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800a40e:	2300      	movs	r3, #0
 800a410:	2201      	movs	r2, #1
 800a412:	6839      	ldr	r1, [r7, #0]
 800a414:	69f8      	ldr	r0, [r7, #28]
 800a416:	f002 fd59 	bl	800cecc <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800a41a:	f107 030c 	add.w	r3, r7, #12
 800a41e:	2200      	movs	r2, #0
 800a420:	2100      	movs	r1, #0
 800a422:	69f8      	ldr	r0, [r7, #28]
 800a424:	f002 fd52 	bl	800cecc <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800a428:	68fb      	ldr	r3, [r7, #12]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3720      	adds	r7, #32
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	200012f0 	.word	0x200012f0
 800a438:	e000ed04 	.word	0xe000ed04

0800a43c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b08e      	sub	sp, #56	; 0x38
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a448:	f3ef 8305 	mrs	r3, IPSR
 800a44c:	61fb      	str	r3, [r7, #28]
  return(result);
 800a44e:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800a450:	2b00      	cmp	r3, #0
 800a452:	d10f      	bne.n	800a474 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a454:	f3ef 8310 	mrs	r3, PRIMASK
 800a458:	61bb      	str	r3, [r7, #24]
  return(result);
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d105      	bne.n	800a46c <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a460:	f3ef 8311 	mrs	r3, BASEPRI
 800a464:	617b      	str	r3, [r7, #20]
  return(result);
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d007      	beq.n	800a47c <osThreadFlagsWait+0x40>
 800a46c:	4b3c      	ldr	r3, [pc, #240]	; (800a560 <osThreadFlagsWait+0x124>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b02      	cmp	r3, #2
 800a472:	d103      	bne.n	800a47c <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800a474:	f06f 0305 	mvn.w	r3, #5
 800a478:	637b      	str	r3, [r7, #52]	; 0x34
 800a47a:	e06b      	b.n	800a554 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	da03      	bge.n	800a48a <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800a482:	f06f 0303 	mvn.w	r3, #3
 800a486:	637b      	str	r3, [r7, #52]	; 0x34
 800a488:	e064      	b.n	800a554 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	f003 0302 	and.w	r3, r3, #2
 800a490:	2b00      	cmp	r3, #0
 800a492:	d002      	beq.n	800a49a <osThreadFlagsWait+0x5e>
      clear = 0U;
 800a494:	2300      	movs	r3, #0
 800a496:	633b      	str	r3, [r7, #48]	; 0x30
 800a498:	e001      	b.n	800a49e <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800a4a6:	f001 ffd1 	bl	800c44c <xTaskGetTickCount>
 800a4aa:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800a4ac:	f107 0210 	add.w	r2, r7, #16
 800a4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	f002 fcaf 	bl	800ce18 <xTaskNotifyWait>
 800a4ba:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d137      	bne.n	800a532 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800a4c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	f003 0301 	and.w	r3, r3, #1
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00c      	beq.n	800a4f6 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e0:	4013      	ands	r3, r2
 800a4e2:	68fa      	ldr	r2, [r7, #12]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d032      	beq.n	800a54e <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10f      	bne.n	800a50e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800a4ee:	f06f 0302 	mvn.w	r3, #2
 800a4f2:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800a4f4:	e02e      	b.n	800a554 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d128      	bne.n	800a552 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d103      	bne.n	800a50e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800a506:	f06f 0302 	mvn.w	r3, #2
 800a50a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800a50c:	e022      	b.n	800a554 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800a50e:	f001 ff9d 	bl	800c44c <xTaskGetTickCount>
 800a512:	4602      	mov	r2, r0
 800a514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800a51a:	6a3a      	ldr	r2, [r7, #32]
 800a51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51e:	429a      	cmp	r2, r3
 800a520:	d902      	bls.n	800a528 <osThreadFlagsWait+0xec>
          tout  = 0;
 800a522:	2300      	movs	r3, #0
 800a524:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a526:	e00e      	b.n	800a546 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800a528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a52a:	6a3b      	ldr	r3, [r7, #32]
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a530:	e009      	b.n	800a546 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d103      	bne.n	800a540 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800a538:	f06f 0302 	mvn.w	r3, #2
 800a53c:	637b      	str	r3, [r7, #52]	; 0x34
 800a53e:	e002      	b.n	800a546 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800a540:	f06f 0301 	mvn.w	r3, #1
 800a544:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800a546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1af      	bne.n	800a4ac <osThreadFlagsWait+0x70>
 800a54c:	e002      	b.n	800a554 <osThreadFlagsWait+0x118>
            break;
 800a54e:	bf00      	nop
 800a550:	e000      	b.n	800a554 <osThreadFlagsWait+0x118>
            break;
 800a552:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800a554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a556:	4618      	mov	r0, r3
 800a558:	3738      	adds	r7, #56	; 0x38
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	200012f0 	.word	0x200012f0

0800a564 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a56c:	f3ef 8305 	mrs	r3, IPSR
 800a570:	613b      	str	r3, [r7, #16]
  return(result);
 800a572:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10f      	bne.n	800a598 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a578:	f3ef 8310 	mrs	r3, PRIMASK
 800a57c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d105      	bne.n	800a590 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a584:	f3ef 8311 	mrs	r3, BASEPRI
 800a588:	60bb      	str	r3, [r7, #8]
  return(result);
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d007      	beq.n	800a5a0 <osDelay+0x3c>
 800a590:	4b0a      	ldr	r3, [pc, #40]	; (800a5bc <osDelay+0x58>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2b02      	cmp	r3, #2
 800a596:	d103      	bne.n	800a5a0 <osDelay+0x3c>
    stat = osErrorISR;
 800a598:	f06f 0305 	mvn.w	r3, #5
 800a59c:	617b      	str	r3, [r7, #20]
 800a59e:	e007      	b.n	800a5b0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d002      	beq.n	800a5b0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f001 fdd4 	bl	800c158 <vTaskDelay>
    }
  }

  return (stat);
 800a5b0:	697b      	ldr	r3, [r7, #20]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3718      	adds	r7, #24
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	200012f0 	.word	0x200012f0

0800a5c0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b08a      	sub	sp, #40	; 0x28
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5cc:	f3ef 8305 	mrs	r3, IPSR
 800a5d0:	613b      	str	r3, [r7, #16]
  return(result);
 800a5d2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f040 8085 	bne.w	800a6e4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5da:	f3ef 8310 	mrs	r3, PRIMASK
 800a5de:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d105      	bne.n	800a5f2 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a5e6:	f3ef 8311 	mrs	r3, BASEPRI
 800a5ea:	60bb      	str	r3, [r7, #8]
  return(result);
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d003      	beq.n	800a5fa <osMutexNew+0x3a>
 800a5f2:	4b3f      	ldr	r3, [pc, #252]	; (800a6f0 <osMutexNew+0x130>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d074      	beq.n	800a6e4 <osMutexNew+0x124>
    if (attr != NULL) {
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d003      	beq.n	800a608 <osMutexNew+0x48>
      type = attr->attr_bits;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	623b      	str	r3, [r7, #32]
 800a606:	e001      	b.n	800a60c <osMutexNew+0x4c>
    } else {
      type = 0U;
 800a608:	2300      	movs	r3, #0
 800a60a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a60c:	6a3b      	ldr	r3, [r7, #32]
 800a60e:	f003 0301 	and.w	r3, r3, #1
 800a612:	2b00      	cmp	r3, #0
 800a614:	d002      	beq.n	800a61c <osMutexNew+0x5c>
      rmtx = 1U;
 800a616:	2301      	movs	r3, #1
 800a618:	61fb      	str	r3, [r7, #28]
 800a61a:	e001      	b.n	800a620 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800a61c:	2300      	movs	r3, #0
 800a61e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a620:	6a3b      	ldr	r3, [r7, #32]
 800a622:	f003 0308 	and.w	r3, r3, #8
 800a626:	2b00      	cmp	r3, #0
 800a628:	d15c      	bne.n	800a6e4 <osMutexNew+0x124>
      mem = -1;
 800a62a:	f04f 33ff 	mov.w	r3, #4294967295
 800a62e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d015      	beq.n	800a662 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d006      	beq.n	800a64c <osMutexNew+0x8c>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	2b4f      	cmp	r3, #79	; 0x4f
 800a644:	d902      	bls.n	800a64c <osMutexNew+0x8c>
          mem = 1;
 800a646:	2301      	movs	r3, #1
 800a648:	61bb      	str	r3, [r7, #24]
 800a64a:	e00c      	b.n	800a666 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d108      	bne.n	800a666 <osMutexNew+0xa6>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d104      	bne.n	800a666 <osMutexNew+0xa6>
            mem = 0;
 800a65c:	2300      	movs	r3, #0
 800a65e:	61bb      	str	r3, [r7, #24]
 800a660:	e001      	b.n	800a666 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800a662:	2300      	movs	r3, #0
 800a664:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d112      	bne.n	800a692 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d007      	beq.n	800a682 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	4619      	mov	r1, r3
 800a678:	2004      	movs	r0, #4
 800a67a:	f000 fc9c 	bl	800afb6 <xQueueCreateMutexStatic>
 800a67e:	6278      	str	r0, [r7, #36]	; 0x24
 800a680:	e016      	b.n	800a6b0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	4619      	mov	r1, r3
 800a688:	2001      	movs	r0, #1
 800a68a:	f000 fc94 	bl	800afb6 <xQueueCreateMutexStatic>
 800a68e:	6278      	str	r0, [r7, #36]	; 0x24
 800a690:	e00e      	b.n	800a6b0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10b      	bne.n	800a6b0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d004      	beq.n	800a6a8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800a69e:	2004      	movs	r0, #4
 800a6a0:	f000 fc71 	bl	800af86 <xQueueCreateMutex>
 800a6a4:	6278      	str	r0, [r7, #36]	; 0x24
 800a6a6:	e003      	b.n	800a6b0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800a6a8:	2001      	movs	r0, #1
 800a6aa:	f000 fc6c 	bl	800af86 <xQueueCreateMutex>
 800a6ae:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00c      	beq.n	800a6d0 <osMutexNew+0x110>
        if (attr != NULL) {
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d003      	beq.n	800a6c4 <osMutexNew+0x104>
          name = attr->name;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	617b      	str	r3, [r7, #20]
 800a6c2:	e001      	b.n	800a6c8 <osMutexNew+0x108>
        } else {
          name = NULL;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800a6c8:	6979      	ldr	r1, [r7, #20]
 800a6ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6cc:	f001 fb20 	bl	800bd10 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d006      	beq.n	800a6e4 <osMutexNew+0x124>
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d003      	beq.n	800a6e4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6de:	f043 0301 	orr.w	r3, r3, #1
 800a6e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3728      	adds	r7, #40	; 0x28
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	200012f0 	.word	0x200012f0

0800a6f4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b088      	sub	sp, #32
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f023 0301 	bic.w	r3, r3, #1
 800a704:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800a70e:	2300      	movs	r3, #0
 800a710:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a712:	f3ef 8305 	mrs	r3, IPSR
 800a716:	613b      	str	r3, [r7, #16]
  return(result);
 800a718:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d10f      	bne.n	800a73e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a71e:	f3ef 8310 	mrs	r3, PRIMASK
 800a722:	60fb      	str	r3, [r7, #12]
  return(result);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d105      	bne.n	800a736 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a72a:	f3ef 8311 	mrs	r3, BASEPRI
 800a72e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d007      	beq.n	800a746 <osMutexAcquire+0x52>
 800a736:	4b1d      	ldr	r3, [pc, #116]	; (800a7ac <osMutexAcquire+0xb8>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d103      	bne.n	800a746 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800a73e:	f06f 0305 	mvn.w	r3, #5
 800a742:	61fb      	str	r3, [r7, #28]
 800a744:	e02c      	b.n	800a7a0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d103      	bne.n	800a754 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800a74c:	f06f 0303 	mvn.w	r3, #3
 800a750:	61fb      	str	r3, [r7, #28]
 800a752:	e025      	b.n	800a7a0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d011      	beq.n	800a77e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a75a:	6839      	ldr	r1, [r7, #0]
 800a75c:	69b8      	ldr	r0, [r7, #24]
 800a75e:	f000 fc78 	bl	800b052 <xQueueTakeMutexRecursive>
 800a762:	4603      	mov	r3, r0
 800a764:	2b01      	cmp	r3, #1
 800a766:	d01b      	beq.n	800a7a0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d003      	beq.n	800a776 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800a76e:	f06f 0301 	mvn.w	r3, #1
 800a772:	61fb      	str	r3, [r7, #28]
 800a774:	e014      	b.n	800a7a0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800a776:	f06f 0302 	mvn.w	r3, #2
 800a77a:	61fb      	str	r3, [r7, #28]
 800a77c:	e010      	b.n	800a7a0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a77e:	6839      	ldr	r1, [r7, #0]
 800a780:	69b8      	ldr	r0, [r7, #24]
 800a782:	f000 fff5 	bl	800b770 <xQueueSemaphoreTake>
 800a786:	4603      	mov	r3, r0
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d009      	beq.n	800a7a0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d003      	beq.n	800a79a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800a792:	f06f 0301 	mvn.w	r3, #1
 800a796:	61fb      	str	r3, [r7, #28]
 800a798:	e002      	b.n	800a7a0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800a79a:	f06f 0302 	mvn.w	r3, #2
 800a79e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a7a0:	69fb      	ldr	r3, [r7, #28]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3720      	adds	r7, #32
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	200012f0 	.word	0x200012f0

0800a7b0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b088      	sub	sp, #32
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f023 0301 	bic.w	r3, r3, #1
 800a7be:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f003 0301 	and.w	r3, r3, #1
 800a7c6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7cc:	f3ef 8305 	mrs	r3, IPSR
 800a7d0:	613b      	str	r3, [r7, #16]
  return(result);
 800a7d2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10f      	bne.n	800a7f8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7d8:	f3ef 8310 	mrs	r3, PRIMASK
 800a7dc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d105      	bne.n	800a7f0 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a7e4:	f3ef 8311 	mrs	r3, BASEPRI
 800a7e8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d007      	beq.n	800a800 <osMutexRelease+0x50>
 800a7f0:	4b16      	ldr	r3, [pc, #88]	; (800a84c <osMutexRelease+0x9c>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d103      	bne.n	800a800 <osMutexRelease+0x50>
    stat = osErrorISR;
 800a7f8:	f06f 0305 	mvn.w	r3, #5
 800a7fc:	61fb      	str	r3, [r7, #28]
 800a7fe:	e01f      	b.n	800a840 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d103      	bne.n	800a80e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800a806:	f06f 0303 	mvn.w	r3, #3
 800a80a:	61fb      	str	r3, [r7, #28]
 800a80c:	e018      	b.n	800a840 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d009      	beq.n	800a828 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a814:	69b8      	ldr	r0, [r7, #24]
 800a816:	f000 fbe9 	bl	800afec <xQueueGiveMutexRecursive>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d00f      	beq.n	800a840 <osMutexRelease+0x90>
        stat = osErrorResource;
 800a820:	f06f 0302 	mvn.w	r3, #2
 800a824:	61fb      	str	r3, [r7, #28]
 800a826:	e00b      	b.n	800a840 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a828:	2300      	movs	r3, #0
 800a82a:	2200      	movs	r2, #0
 800a82c:	2100      	movs	r1, #0
 800a82e:	69b8      	ldr	r0, [r7, #24]
 800a830:	f000 fcaa 	bl	800b188 <xQueueGenericSend>
 800a834:	4603      	mov	r3, r0
 800a836:	2b01      	cmp	r3, #1
 800a838:	d002      	beq.n	800a840 <osMutexRelease+0x90>
        stat = osErrorResource;
 800a83a:	f06f 0302 	mvn.w	r3, #2
 800a83e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800a840:	69fb      	ldr	r3, [r7, #28]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3720      	adds	r7, #32
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	200012f0 	.word	0x200012f0

0800a850 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a850:	b580      	push	{r7, lr}
 800a852:	b08c      	sub	sp, #48	; 0x30
 800a854:	af02      	add	r7, sp, #8
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a85c:	2300      	movs	r3, #0
 800a85e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a860:	f3ef 8305 	mrs	r3, IPSR
 800a864:	61bb      	str	r3, [r7, #24]
  return(result);
 800a866:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f040 8087 	bne.w	800a97c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a86e:	f3ef 8310 	mrs	r3, PRIMASK
 800a872:	617b      	str	r3, [r7, #20]
  return(result);
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d105      	bne.n	800a886 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a87a:	f3ef 8311 	mrs	r3, BASEPRI
 800a87e:	613b      	str	r3, [r7, #16]
  return(result);
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d003      	beq.n	800a88e <osSemaphoreNew+0x3e>
 800a886:	4b40      	ldr	r3, [pc, #256]	; (800a988 <osSemaphoreNew+0x138>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	d076      	beq.n	800a97c <osSemaphoreNew+0x12c>
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d073      	beq.n	800a97c <osSemaphoreNew+0x12c>
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d86f      	bhi.n	800a97c <osSemaphoreNew+0x12c>
    mem = -1;
 800a89c:	f04f 33ff 	mov.w	r3, #4294967295
 800a8a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d015      	beq.n	800a8d4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d006      	beq.n	800a8be <osSemaphoreNew+0x6e>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	2b4f      	cmp	r3, #79	; 0x4f
 800a8b6:	d902      	bls.n	800a8be <osSemaphoreNew+0x6e>
        mem = 1;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	623b      	str	r3, [r7, #32]
 800a8bc:	e00c      	b.n	800a8d8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d108      	bne.n	800a8d8 <osSemaphoreNew+0x88>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d104      	bne.n	800a8d8 <osSemaphoreNew+0x88>
          mem = 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	623b      	str	r3, [r7, #32]
 800a8d2:	e001      	b.n	800a8d8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800a8d8:	6a3b      	ldr	r3, [r7, #32]
 800a8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8de:	d04d      	beq.n	800a97c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d129      	bne.n	800a93a <osSemaphoreNew+0xea>
        if (mem == 1) {
 800a8e6:	6a3b      	ldr	r3, [r7, #32]
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d10b      	bne.n	800a904 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	689a      	ldr	r2, [r3, #8]
 800a8f0:	2303      	movs	r3, #3
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	f000 fa54 	bl	800ada8 <xQueueGenericCreateStatic>
 800a900:	6278      	str	r0, [r7, #36]	; 0x24
 800a902:	e005      	b.n	800a910 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800a904:	2203      	movs	r2, #3
 800a906:	2100      	movs	r1, #0
 800a908:	2001      	movs	r0, #1
 800a90a:	f000 fac0 	bl	800ae8e <xQueueGenericCreate>
 800a90e:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a912:	2b00      	cmp	r3, #0
 800a914:	d022      	beq.n	800a95c <osSemaphoreNew+0x10c>
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d01f      	beq.n	800a95c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a91c:	2300      	movs	r3, #0
 800a91e:	2200      	movs	r2, #0
 800a920:	2100      	movs	r1, #0
 800a922:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a924:	f000 fc30 	bl	800b188 <xQueueGenericSend>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d016      	beq.n	800a95c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800a92e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a930:	f001 f8a3 	bl	800ba7a <vQueueDelete>
            hSemaphore = NULL;
 800a934:	2300      	movs	r3, #0
 800a936:	627b      	str	r3, [r7, #36]	; 0x24
 800a938:	e010      	b.n	800a95c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800a93a:	6a3b      	ldr	r3, [r7, #32]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d108      	bne.n	800a952 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	461a      	mov	r2, r3
 800a946:	68b9      	ldr	r1, [r7, #8]
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f000 fbb7 	bl	800b0bc <xQueueCreateCountingSemaphoreStatic>
 800a94e:	6278      	str	r0, [r7, #36]	; 0x24
 800a950:	e004      	b.n	800a95c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a952:	68b9      	ldr	r1, [r7, #8]
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f000 fbe6 	bl	800b126 <xQueueCreateCountingSemaphore>
 800a95a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00c      	beq.n	800a97c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d003      	beq.n	800a970 <osSemaphoreNew+0x120>
          name = attr->name;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	61fb      	str	r3, [r7, #28]
 800a96e:	e001      	b.n	800a974 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800a970:	2300      	movs	r3, #0
 800a972:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a974:	69f9      	ldr	r1, [r7, #28]
 800a976:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a978:	f001 f9ca 	bl	800bd10 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3728      	adds	r7, #40	; 0x28
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	200012f0 	.word	0x200012f0

0800a98c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b088      	sub	sp, #32
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d103      	bne.n	800a9ac <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a9a4:	f06f 0303 	mvn.w	r3, #3
 800a9a8:	61fb      	str	r3, [r7, #28]
 800a9aa:	e04b      	b.n	800aa44 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9ac:	f3ef 8305 	mrs	r3, IPSR
 800a9b0:	617b      	str	r3, [r7, #20]
  return(result);
 800a9b2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d10f      	bne.n	800a9d8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a9bc:	613b      	str	r3, [r7, #16]
  return(result);
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d105      	bne.n	800a9d0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a9c4:	f3ef 8311 	mrs	r3, BASEPRI
 800a9c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d026      	beq.n	800aa1e <osSemaphoreAcquire+0x92>
 800a9d0:	4b1f      	ldr	r3, [pc, #124]	; (800aa50 <osSemaphoreAcquire+0xc4>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2b02      	cmp	r3, #2
 800a9d6:	d122      	bne.n	800aa1e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d003      	beq.n	800a9e6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800a9de:	f06f 0303 	mvn.w	r3, #3
 800a9e2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a9e4:	e02d      	b.n	800aa42 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a9ea:	f107 0308 	add.w	r3, r7, #8
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	69b8      	ldr	r0, [r7, #24]
 800a9f4:	f000 ffc4 	bl	800b980 <xQueueReceiveFromISR>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d003      	beq.n	800aa06 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800a9fe:	f06f 0302 	mvn.w	r3, #2
 800aa02:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800aa04:	e01d      	b.n	800aa42 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d01a      	beq.n	800aa42 <osSemaphoreAcquire+0xb6>
 800aa0c:	4b11      	ldr	r3, [pc, #68]	; (800aa54 <osSemaphoreAcquire+0xc8>)
 800aa0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa12:	601a      	str	r2, [r3, #0]
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800aa1c:	e011      	b.n	800aa42 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	69b8      	ldr	r0, [r7, #24]
 800aa22:	f000 fea5 	bl	800b770 <xQueueSemaphoreTake>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d00b      	beq.n	800aa44 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d003      	beq.n	800aa3a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800aa32:	f06f 0301 	mvn.w	r3, #1
 800aa36:	61fb      	str	r3, [r7, #28]
 800aa38:	e004      	b.n	800aa44 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800aa3a:	f06f 0302 	mvn.w	r3, #2
 800aa3e:	61fb      	str	r3, [r7, #28]
 800aa40:	e000      	b.n	800aa44 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800aa42:	bf00      	nop
      }
    }
  }

  return (stat);
 800aa44:	69fb      	ldr	r3, [r7, #28]
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3720      	adds	r7, #32
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	200012f0 	.word	0x200012f0
 800aa54:	e000ed04 	.word	0xe000ed04

0800aa58 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b088      	sub	sp, #32
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800aa64:	2300      	movs	r3, #0
 800aa66:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d103      	bne.n	800aa76 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800aa6e:	f06f 0303 	mvn.w	r3, #3
 800aa72:	61fb      	str	r3, [r7, #28]
 800aa74:	e03e      	b.n	800aaf4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa76:	f3ef 8305 	mrs	r3, IPSR
 800aa7a:	617b      	str	r3, [r7, #20]
  return(result);
 800aa7c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10f      	bne.n	800aaa2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa82:	f3ef 8310 	mrs	r3, PRIMASK
 800aa86:	613b      	str	r3, [r7, #16]
  return(result);
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d105      	bne.n	800aa9a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aa8e:	f3ef 8311 	mrs	r3, BASEPRI
 800aa92:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d01e      	beq.n	800aad8 <osSemaphoreRelease+0x80>
 800aa9a:	4b19      	ldr	r3, [pc, #100]	; (800ab00 <osSemaphoreRelease+0xa8>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d11a      	bne.n	800aad8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800aaa6:	f107 0308 	add.w	r3, r7, #8
 800aaaa:	4619      	mov	r1, r3
 800aaac:	69b8      	ldr	r0, [r7, #24]
 800aaae:	f000 fcf9 	bl	800b4a4 <xQueueGiveFromISR>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d003      	beq.n	800aac0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800aab8:	f06f 0302 	mvn.w	r3, #2
 800aabc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800aabe:	e018      	b.n	800aaf2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d015      	beq.n	800aaf2 <osSemaphoreRelease+0x9a>
 800aac6:	4b0f      	ldr	r3, [pc, #60]	; (800ab04 <osSemaphoreRelease+0xac>)
 800aac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aacc:	601a      	str	r2, [r3, #0]
 800aace:	f3bf 8f4f 	dsb	sy
 800aad2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800aad6:	e00c      	b.n	800aaf2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800aad8:	2300      	movs	r3, #0
 800aada:	2200      	movs	r2, #0
 800aadc:	2100      	movs	r1, #0
 800aade:	69b8      	ldr	r0, [r7, #24]
 800aae0:	f000 fb52 	bl	800b188 <xQueueGenericSend>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d004      	beq.n	800aaf4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800aaea:	f06f 0302 	mvn.w	r3, #2
 800aaee:	61fb      	str	r3, [r7, #28]
 800aaf0:	e000      	b.n	800aaf4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800aaf2:	bf00      	nop
    }
  }

  return (stat);
 800aaf4:	69fb      	ldr	r3, [r7, #28]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3720      	adds	r7, #32
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	200012f0 	.word	0x200012f0
 800ab04:	e000ed04 	.word	0xe000ed04

0800ab08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	4a07      	ldr	r2, [pc, #28]	; (800ab34 <vApplicationGetIdleTaskMemory+0x2c>)
 800ab18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	4a06      	ldr	r2, [pc, #24]	; (800ab38 <vApplicationGetIdleTaskMemory+0x30>)
 800ab1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab26:	601a      	str	r2, [r3, #0]
}
 800ab28:	bf00      	nop
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	200012f4 	.word	0x200012f4
 800ab38:	20001350 	.word	0x20001350

0800ab3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ab3c:	b480      	push	{r7}
 800ab3e:	b085      	sub	sp, #20
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	4a07      	ldr	r2, [pc, #28]	; (800ab68 <vApplicationGetTimerTaskMemory+0x2c>)
 800ab4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	4a06      	ldr	r2, [pc, #24]	; (800ab6c <vApplicationGetTimerTaskMemory+0x30>)
 800ab52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab5a:	601a      	str	r2, [r3, #0]
}
 800ab5c:	bf00      	nop
 800ab5e:	3714      	adds	r7, #20
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr
 800ab68:	20001750 	.word	0x20001750
 800ab6c:	200017ac 	.word	0x200017ac

0800ab70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f103 0208 	add.w	r2, r3, #8
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f04f 32ff 	mov.w	r2, #4294967295
 800ab88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f103 0208 	add.w	r2, r3, #8
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f103 0208 	add.w	r2, r3, #8
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aba4:	bf00      	nop
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800abbe:	bf00      	nop
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800abca:	b480      	push	{r7}
 800abcc:	b085      	sub	sp, #20
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	689a      	ldr	r2, [r3, #8]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	683a      	ldr	r2, [r7, #0]
 800abee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	683a      	ldr	r2, [r7, #0]
 800abf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	1c5a      	adds	r2, r3, #1
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	601a      	str	r2, [r3, #0]
}
 800ac06:	bf00      	nop
 800ac08:	3714      	adds	r7, #20
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr

0800ac12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac12:	b480      	push	{r7}
 800ac14:	b085      	sub	sp, #20
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac28:	d103      	bne.n	800ac32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	60fb      	str	r3, [r7, #12]
 800ac30:	e00c      	b.n	800ac4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	3308      	adds	r3, #8
 800ac36:	60fb      	str	r3, [r7, #12]
 800ac38:	e002      	b.n	800ac40 <vListInsert+0x2e>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	60fb      	str	r3, [r7, #12]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	68ba      	ldr	r2, [r7, #8]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d2f6      	bcs.n	800ac3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	683a      	ldr	r2, [r7, #0]
 800ac5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	683a      	ldr	r2, [r7, #0]
 800ac66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	1c5a      	adds	r2, r3, #1
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	601a      	str	r2, [r3, #0]
}
 800ac78:	bf00      	nop
 800ac7a:	3714      	adds	r7, #20
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	691b      	ldr	r3, [r3, #16]
 800ac90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	6892      	ldr	r2, [r2, #8]
 800ac9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	6852      	ldr	r2, [r2, #4]
 800aca4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	429a      	cmp	r2, r3
 800acae:	d103      	bne.n	800acb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	689a      	ldr	r2, [r3, #8]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	1e5a      	subs	r2, r3, #1
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3714      	adds	r7, #20
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d109      	bne.n	800ad00 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800acec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf0:	f383 8811 	msr	BASEPRI, r3
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	60bb      	str	r3, [r7, #8]
 800acfe:	e7fe      	b.n	800acfe <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800ad00:	f002 ff34 	bl	800db6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad0c:	68f9      	ldr	r1, [r7, #12]
 800ad0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ad10:	fb01 f303 	mul.w	r3, r1, r3
 800ad14:	441a      	add	r2, r3
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad30:	3b01      	subs	r3, #1
 800ad32:	68f9      	ldr	r1, [r7, #12]
 800ad34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ad36:	fb01 f303 	mul.w	r3, r1, r3
 800ad3a:	441a      	add	r2, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	22ff      	movs	r2, #255	; 0xff
 800ad44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	22ff      	movs	r2, #255	; 0xff
 800ad4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d114      	bne.n	800ad80 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d01a      	beq.n	800ad94 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	3310      	adds	r3, #16
 800ad62:	4618      	mov	r0, r3
 800ad64:	f001 fce4 	bl	800c730 <xTaskRemoveFromEventList>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d012      	beq.n	800ad94 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ad6e:	4b0d      	ldr	r3, [pc, #52]	; (800ada4 <xQueueGenericReset+0xcc>)
 800ad70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad74:	601a      	str	r2, [r3, #0]
 800ad76:	f3bf 8f4f 	dsb	sy
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	e009      	b.n	800ad94 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	3310      	adds	r3, #16
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7ff fef3 	bl	800ab70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	3324      	adds	r3, #36	; 0x24
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7ff feee 	bl	800ab70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ad94:	f002 ff18 	bl	800dbc8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ad98:	2301      	movs	r3, #1
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	e000ed04 	.word	0xe000ed04

0800ada8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b08e      	sub	sp, #56	; 0x38
 800adac:	af02      	add	r7, sp, #8
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
 800adb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d109      	bne.n	800add0 <xQueueGenericCreateStatic+0x28>
 800adbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	62bb      	str	r3, [r7, #40]	; 0x28
 800adce:	e7fe      	b.n	800adce <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d109      	bne.n	800adea <xQueueGenericCreateStatic+0x42>
 800add6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adda:	f383 8811 	msr	BASEPRI, r3
 800adde:	f3bf 8f6f 	isb	sy
 800ade2:	f3bf 8f4f 	dsb	sy
 800ade6:	627b      	str	r3, [r7, #36]	; 0x24
 800ade8:	e7fe      	b.n	800ade8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d002      	beq.n	800adf6 <xQueueGenericCreateStatic+0x4e>
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d001      	beq.n	800adfa <xQueueGenericCreateStatic+0x52>
 800adf6:	2301      	movs	r3, #1
 800adf8:	e000      	b.n	800adfc <xQueueGenericCreateStatic+0x54>
 800adfa:	2300      	movs	r3, #0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d109      	bne.n	800ae14 <xQueueGenericCreateStatic+0x6c>
 800ae00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae04:	f383 8811 	msr	BASEPRI, r3
 800ae08:	f3bf 8f6f 	isb	sy
 800ae0c:	f3bf 8f4f 	dsb	sy
 800ae10:	623b      	str	r3, [r7, #32]
 800ae12:	e7fe      	b.n	800ae12 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d102      	bne.n	800ae20 <xQueueGenericCreateStatic+0x78>
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d101      	bne.n	800ae24 <xQueueGenericCreateStatic+0x7c>
 800ae20:	2301      	movs	r3, #1
 800ae22:	e000      	b.n	800ae26 <xQueueGenericCreateStatic+0x7e>
 800ae24:	2300      	movs	r3, #0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d109      	bne.n	800ae3e <xQueueGenericCreateStatic+0x96>
 800ae2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2e:	f383 8811 	msr	BASEPRI, r3
 800ae32:	f3bf 8f6f 	isb	sy
 800ae36:	f3bf 8f4f 	dsb	sy
 800ae3a:	61fb      	str	r3, [r7, #28]
 800ae3c:	e7fe      	b.n	800ae3c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ae3e:	2350      	movs	r3, #80	; 0x50
 800ae40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	2b50      	cmp	r3, #80	; 0x50
 800ae46:	d009      	beq.n	800ae5c <xQueueGenericCreateStatic+0xb4>
 800ae48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4c:	f383 8811 	msr	BASEPRI, r3
 800ae50:	f3bf 8f6f 	isb	sy
 800ae54:	f3bf 8f4f 	dsb	sy
 800ae58:	61bb      	str	r3, [r7, #24]
 800ae5a:	e7fe      	b.n	800ae5a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ae5c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ae62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00d      	beq.n	800ae84 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ae68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae70:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ae74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	4613      	mov	r3, r2
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	68b9      	ldr	r1, [r7, #8]
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	f000 f844 	bl	800af0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3730      	adds	r7, #48	; 0x30
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}

0800ae8e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ae8e:	b580      	push	{r7, lr}
 800ae90:	b08a      	sub	sp, #40	; 0x28
 800ae92:	af02      	add	r7, sp, #8
 800ae94:	60f8      	str	r0, [r7, #12]
 800ae96:	60b9      	str	r1, [r7, #8]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d109      	bne.n	800aeb6 <xQueueGenericCreate+0x28>
 800aea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea6:	f383 8811 	msr	BASEPRI, r3
 800aeaa:	f3bf 8f6f 	isb	sy
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	613b      	str	r3, [r7, #16]
 800aeb4:	e7fe      	b.n	800aeb4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d102      	bne.n	800aec2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800aebc:	2300      	movs	r3, #0
 800aebe:	61fb      	str	r3, [r7, #28]
 800aec0:	e004      	b.n	800aecc <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	68ba      	ldr	r2, [r7, #8]
 800aec6:	fb02 f303 	mul.w	r3, r2, r3
 800aeca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	3350      	adds	r3, #80	; 0x50
 800aed0:	4618      	mov	r0, r3
 800aed2:	f002 ff65 	bl	800dda0 <pvPortMalloc>
 800aed6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d011      	beq.n	800af02 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	3350      	adds	r3, #80	; 0x50
 800aee6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aef0:	79fa      	ldrb	r2, [r7, #7]
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	4613      	mov	r3, r2
 800aef8:	697a      	ldr	r2, [r7, #20]
 800aefa:	68b9      	ldr	r1, [r7, #8]
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f000 f805 	bl	800af0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800af02:	69bb      	ldr	r3, [r7, #24]
	}
 800af04:	4618      	mov	r0, r3
 800af06:	3720      	adds	r7, #32
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	607a      	str	r2, [r7, #4]
 800af18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d103      	bne.n	800af28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800af20:	69bb      	ldr	r3, [r7, #24]
 800af22:	69ba      	ldr	r2, [r7, #24]
 800af24:	601a      	str	r2, [r3, #0]
 800af26:	e002      	b.n	800af2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	68fa      	ldr	r2, [r7, #12]
 800af32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800af34:	69bb      	ldr	r3, [r7, #24]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800af3a:	2101      	movs	r1, #1
 800af3c:	69b8      	ldr	r0, [r7, #24]
 800af3e:	f7ff fecb 	bl	800acd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	78fa      	ldrb	r2, [r7, #3]
 800af46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800af4a:	bf00      	nop
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800af52:	b580      	push	{r7, lr}
 800af54:	b082      	sub	sp, #8
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00e      	beq.n	800af7e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2200      	movs	r2, #0
 800af64:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800af72:	2300      	movs	r3, #0
 800af74:	2200      	movs	r2, #0
 800af76:	2100      	movs	r1, #0
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 f905 	bl	800b188 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800af7e:	bf00      	nop
 800af80:	3708      	adds	r7, #8
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800af86:	b580      	push	{r7, lr}
 800af88:	b086      	sub	sp, #24
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	4603      	mov	r3, r0
 800af8e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800af90:	2301      	movs	r3, #1
 800af92:	617b      	str	r3, [r7, #20]
 800af94:	2300      	movs	r3, #0
 800af96:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800af98:	79fb      	ldrb	r3, [r7, #7]
 800af9a:	461a      	mov	r2, r3
 800af9c:	6939      	ldr	r1, [r7, #16]
 800af9e:	6978      	ldr	r0, [r7, #20]
 800afa0:	f7ff ff75 	bl	800ae8e <xQueueGenericCreate>
 800afa4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800afa6:	68f8      	ldr	r0, [r7, #12]
 800afa8:	f7ff ffd3 	bl	800af52 <prvInitialiseMutex>

		return xNewQueue;
 800afac:	68fb      	ldr	r3, [r7, #12]
	}
 800afae:	4618      	mov	r0, r3
 800afb0:	3718      	adds	r7, #24
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b088      	sub	sp, #32
 800afba:	af02      	add	r7, sp, #8
 800afbc:	4603      	mov	r3, r0
 800afbe:	6039      	str	r1, [r7, #0]
 800afc0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800afc2:	2301      	movs	r3, #1
 800afc4:	617b      	str	r3, [r7, #20]
 800afc6:	2300      	movs	r3, #0
 800afc8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800afca:	79fb      	ldrb	r3, [r7, #7]
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	2200      	movs	r2, #0
 800afd2:	6939      	ldr	r1, [r7, #16]
 800afd4:	6978      	ldr	r0, [r7, #20]
 800afd6:	f7ff fee7 	bl	800ada8 <xQueueGenericCreateStatic>
 800afda:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	f7ff ffb8 	bl	800af52 <prvInitialiseMutex>

		return xNewQueue;
 800afe2:	68fb      	ldr	r3, [r7, #12]
	}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3718      	adds	r7, #24
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800afec:	b590      	push	{r4, r7, lr}
 800afee:	b087      	sub	sp, #28
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d109      	bne.n	800b012 <xQueueGiveMutexRecursive+0x26>
 800affe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b002:	f383 8811 	msr	BASEPRI, r3
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	60fb      	str	r3, [r7, #12]
 800b010:	e7fe      	b.n	800b010 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	689c      	ldr	r4, [r3, #8]
 800b016:	f001 fd69 	bl	800caec <xTaskGetCurrentTaskHandle>
 800b01a:	4603      	mov	r3, r0
 800b01c:	429c      	cmp	r4, r3
 800b01e:	d111      	bne.n	800b044 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	1e5a      	subs	r2, r3, #1
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	68db      	ldr	r3, [r3, #12]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d105      	bne.n	800b03e <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b032:	2300      	movs	r3, #0
 800b034:	2200      	movs	r2, #0
 800b036:	2100      	movs	r1, #0
 800b038:	6938      	ldr	r0, [r7, #16]
 800b03a:	f000 f8a5 	bl	800b188 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b03e:	2301      	movs	r3, #1
 800b040:	617b      	str	r3, [r7, #20]
 800b042:	e001      	b.n	800b048 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b044:	2300      	movs	r3, #0
 800b046:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b048:	697b      	ldr	r3, [r7, #20]
	}
 800b04a:	4618      	mov	r0, r3
 800b04c:	371c      	adds	r7, #28
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd90      	pop	{r4, r7, pc}

0800b052 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b052:	b590      	push	{r4, r7, lr}
 800b054:	b087      	sub	sp, #28
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d109      	bne.n	800b07a <xQueueTakeMutexRecursive+0x28>
 800b066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06a:	f383 8811 	msr	BASEPRI, r3
 800b06e:	f3bf 8f6f 	isb	sy
 800b072:	f3bf 8f4f 	dsb	sy
 800b076:	60fb      	str	r3, [r7, #12]
 800b078:	e7fe      	b.n	800b078 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	689c      	ldr	r4, [r3, #8]
 800b07e:	f001 fd35 	bl	800caec <xTaskGetCurrentTaskHandle>
 800b082:	4603      	mov	r3, r0
 800b084:	429c      	cmp	r4, r3
 800b086:	d107      	bne.n	800b098 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	1c5a      	adds	r2, r3, #1
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b092:	2301      	movs	r3, #1
 800b094:	617b      	str	r3, [r7, #20]
 800b096:	e00c      	b.n	800b0b2 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b098:	6839      	ldr	r1, [r7, #0]
 800b09a:	6938      	ldr	r0, [r7, #16]
 800b09c:	f000 fb68 	bl	800b770 <xQueueSemaphoreTake>
 800b0a0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d004      	beq.n	800b0b2 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	1c5a      	adds	r2, r3, #1
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b0b2:	697b      	ldr	r3, [r7, #20]
	}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	371c      	adds	r7, #28
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd90      	pop	{r4, r7, pc}

0800b0bc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b08a      	sub	sp, #40	; 0x28
 800b0c0:	af02      	add	r7, sp, #8
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d109      	bne.n	800b0e2 <xQueueCreateCountingSemaphoreStatic+0x26>
 800b0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	61bb      	str	r3, [r7, #24]
 800b0e0:	e7fe      	b.n	800b0e0 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d909      	bls.n	800b0fe <xQueueCreateCountingSemaphoreStatic+0x42>
 800b0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ee:	f383 8811 	msr	BASEPRI, r3
 800b0f2:	f3bf 8f6f 	isb	sy
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	617b      	str	r3, [r7, #20]
 800b0fc:	e7fe      	b.n	800b0fc <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b0fe:	2302      	movs	r3, #2
 800b100:	9300      	str	r3, [sp, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	2100      	movs	r1, #0
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f7ff fe4d 	bl	800ada8 <xQueueGenericCreateStatic>
 800b10e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b110:	69fb      	ldr	r3, [r7, #28]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d002      	beq.n	800b11c <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b116:	69fb      	ldr	r3, [r7, #28]
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b11c:	69fb      	ldr	r3, [r7, #28]
	}
 800b11e:	4618      	mov	r0, r3
 800b120:	3720      	adds	r7, #32
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b126:	b580      	push	{r7, lr}
 800b128:	b086      	sub	sp, #24
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d109      	bne.n	800b14a <xQueueCreateCountingSemaphore+0x24>
 800b136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13a:	f383 8811 	msr	BASEPRI, r3
 800b13e:	f3bf 8f6f 	isb	sy
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	613b      	str	r3, [r7, #16]
 800b148:	e7fe      	b.n	800b148 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b14a:	683a      	ldr	r2, [r7, #0]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d909      	bls.n	800b166 <xQueueCreateCountingSemaphore+0x40>
 800b152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	60fb      	str	r3, [r7, #12]
 800b164:	e7fe      	b.n	800b164 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b166:	2202      	movs	r2, #2
 800b168:	2100      	movs	r1, #0
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f7ff fe8f 	bl	800ae8e <xQueueGenericCreate>
 800b170:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d002      	beq.n	800b17e <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	683a      	ldr	r2, [r7, #0]
 800b17c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b17e:	697b      	ldr	r3, [r7, #20]
	}
 800b180:	4618      	mov	r0, r3
 800b182:	3718      	adds	r7, #24
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b08e      	sub	sp, #56	; 0x38
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
 800b194:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b196:	2300      	movs	r3, #0
 800b198:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d109      	bne.n	800b1b8 <xQueueGenericSend+0x30>
 800b1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a8:	f383 8811 	msr	BASEPRI, r3
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1b6:	e7fe      	b.n	800b1b6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d103      	bne.n	800b1c6 <xQueueGenericSend+0x3e>
 800b1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d101      	bne.n	800b1ca <xQueueGenericSend+0x42>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e000      	b.n	800b1cc <xQueueGenericSend+0x44>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d109      	bne.n	800b1e4 <xQueueGenericSend+0x5c>
 800b1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b1e2:	e7fe      	b.n	800b1e2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	d103      	bne.n	800b1f2 <xQueueGenericSend+0x6a>
 800b1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d101      	bne.n	800b1f6 <xQueueGenericSend+0x6e>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e000      	b.n	800b1f8 <xQueueGenericSend+0x70>
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d109      	bne.n	800b210 <xQueueGenericSend+0x88>
 800b1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b200:	f383 8811 	msr	BASEPRI, r3
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	623b      	str	r3, [r7, #32]
 800b20e:	e7fe      	b.n	800b20e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b210:	f001 fc7c 	bl	800cb0c <xTaskGetSchedulerState>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d102      	bne.n	800b220 <xQueueGenericSend+0x98>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d101      	bne.n	800b224 <xQueueGenericSend+0x9c>
 800b220:	2301      	movs	r3, #1
 800b222:	e000      	b.n	800b226 <xQueueGenericSend+0x9e>
 800b224:	2300      	movs	r3, #0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d109      	bne.n	800b23e <xQueueGenericSend+0xb6>
 800b22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22e:	f383 8811 	msr	BASEPRI, r3
 800b232:	f3bf 8f6f 	isb	sy
 800b236:	f3bf 8f4f 	dsb	sy
 800b23a:	61fb      	str	r3, [r7, #28]
 800b23c:	e7fe      	b.n	800b23c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b23e:	f002 fc95 	bl	800db6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d302      	bcc.n	800b254 <xQueueGenericSend+0xcc>
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	2b02      	cmp	r3, #2
 800b252:	d129      	bne.n	800b2a8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b254:	683a      	ldr	r2, [r7, #0]
 800b256:	68b9      	ldr	r1, [r7, #8]
 800b258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b25a:	f000 fc48 	bl	800baee <prvCopyDataToQueue>
 800b25e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b264:	2b00      	cmp	r3, #0
 800b266:	d010      	beq.n	800b28a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26a:	3324      	adds	r3, #36	; 0x24
 800b26c:	4618      	mov	r0, r3
 800b26e:	f001 fa5f 	bl	800c730 <xTaskRemoveFromEventList>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d013      	beq.n	800b2a0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b278:	4b3f      	ldr	r3, [pc, #252]	; (800b378 <xQueueGenericSend+0x1f0>)
 800b27a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b27e:	601a      	str	r2, [r3, #0]
 800b280:	f3bf 8f4f 	dsb	sy
 800b284:	f3bf 8f6f 	isb	sy
 800b288:	e00a      	b.n	800b2a0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d007      	beq.n	800b2a0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b290:	4b39      	ldr	r3, [pc, #228]	; (800b378 <xQueueGenericSend+0x1f0>)
 800b292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b296:	601a      	str	r2, [r3, #0]
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b2a0:	f002 fc92 	bl	800dbc8 <vPortExitCritical>
				return pdPASS;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	e063      	b.n	800b370 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d103      	bne.n	800b2b6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b2ae:	f002 fc8b 	bl	800dbc8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	e05c      	b.n	800b370 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d106      	bne.n	800b2ca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b2bc:	f107 0314 	add.w	r3, r7, #20
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f001 fa99 	bl	800c7f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b2ca:	f002 fc7d 	bl	800dbc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b2ce:	f000 ffdb 	bl	800c288 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b2d2:	f002 fc4b 	bl	800db6c <vPortEnterCritical>
 800b2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2dc:	b25b      	sxtb	r3, r3
 800b2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e2:	d103      	bne.n	800b2ec <xQueueGenericSend+0x164>
 800b2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2f2:	b25b      	sxtb	r3, r3
 800b2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2f8:	d103      	bne.n	800b302 <xQueueGenericSend+0x17a>
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b302:	f002 fc61 	bl	800dbc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b306:	1d3a      	adds	r2, r7, #4
 800b308:	f107 0314 	add.w	r3, r7, #20
 800b30c:	4611      	mov	r1, r2
 800b30e:	4618      	mov	r0, r3
 800b310:	f001 fa88 	bl	800c824 <xTaskCheckForTimeOut>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d124      	bne.n	800b364 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b31a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b31c:	f000 fcdf 	bl	800bcde <prvIsQueueFull>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d018      	beq.n	800b358 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b328:	3310      	adds	r3, #16
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	4611      	mov	r1, r2
 800b32e:	4618      	mov	r0, r3
 800b330:	f001 f9b0 	bl	800c694 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b336:	f000 fc6a 	bl	800bc0e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b33a:	f000 ffeb 	bl	800c314 <xTaskResumeAll>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b00      	cmp	r3, #0
 800b342:	f47f af7c 	bne.w	800b23e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800b346:	4b0c      	ldr	r3, [pc, #48]	; (800b378 <xQueueGenericSend+0x1f0>)
 800b348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b34c:	601a      	str	r2, [r3, #0]
 800b34e:	f3bf 8f4f 	dsb	sy
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	e772      	b.n	800b23e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b35a:	f000 fc58 	bl	800bc0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b35e:	f000 ffd9 	bl	800c314 <xTaskResumeAll>
 800b362:	e76c      	b.n	800b23e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b366:	f000 fc52 	bl	800bc0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b36a:	f000 ffd3 	bl	800c314 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b36e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b370:	4618      	mov	r0, r3
 800b372:	3738      	adds	r7, #56	; 0x38
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	e000ed04 	.word	0xe000ed04

0800b37c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b08e      	sub	sp, #56	; 0x38
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
 800b388:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b390:	2b00      	cmp	r3, #0
 800b392:	d109      	bne.n	800b3a8 <xQueueGenericSendFromISR+0x2c>
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	627b      	str	r3, [r7, #36]	; 0x24
 800b3a6:	e7fe      	b.n	800b3a6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d103      	bne.n	800b3b6 <xQueueGenericSendFromISR+0x3a>
 800b3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d101      	bne.n	800b3ba <xQueueGenericSendFromISR+0x3e>
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e000      	b.n	800b3bc <xQueueGenericSendFromISR+0x40>
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d109      	bne.n	800b3d4 <xQueueGenericSendFromISR+0x58>
 800b3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	623b      	str	r3, [r7, #32]
 800b3d2:	e7fe      	b.n	800b3d2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	2b02      	cmp	r3, #2
 800b3d8:	d103      	bne.n	800b3e2 <xQueueGenericSendFromISR+0x66>
 800b3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d101      	bne.n	800b3e6 <xQueueGenericSendFromISR+0x6a>
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e000      	b.n	800b3e8 <xQueueGenericSendFromISR+0x6c>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d109      	bne.n	800b400 <xQueueGenericSendFromISR+0x84>
 800b3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f0:	f383 8811 	msr	BASEPRI, r3
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	61fb      	str	r3, [r7, #28]
 800b3fe:	e7fe      	b.n	800b3fe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b400:	f002 fc90 	bl	800dd24 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b404:	f3ef 8211 	mrs	r2, BASEPRI
 800b408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40c:	f383 8811 	msr	BASEPRI, r3
 800b410:	f3bf 8f6f 	isb	sy
 800b414:	f3bf 8f4f 	dsb	sy
 800b418:	61ba      	str	r2, [r7, #24]
 800b41a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b41c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b41e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b428:	429a      	cmp	r2, r3
 800b42a:	d302      	bcc.n	800b432 <xQueueGenericSendFromISR+0xb6>
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	2b02      	cmp	r3, #2
 800b430:	d12c      	bne.n	800b48c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b438:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b43c:	683a      	ldr	r2, [r7, #0]
 800b43e:	68b9      	ldr	r1, [r7, #8]
 800b440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b442:	f000 fb54 	bl	800baee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b446:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b44e:	d112      	bne.n	800b476 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b454:	2b00      	cmp	r3, #0
 800b456:	d016      	beq.n	800b486 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45a:	3324      	adds	r3, #36	; 0x24
 800b45c:	4618      	mov	r0, r3
 800b45e:	f001 f967 	bl	800c730 <xTaskRemoveFromEventList>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00e      	beq.n	800b486 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00b      	beq.n	800b486 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2201      	movs	r2, #1
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	e007      	b.n	800b486 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b476:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b47a:	3301      	adds	r3, #1
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	b25a      	sxtb	r2, r3
 800b480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b486:	2301      	movs	r3, #1
 800b488:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b48a:	e001      	b.n	800b490 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b48c:	2300      	movs	r3, #0
 800b48e:	637b      	str	r3, [r7, #52]	; 0x34
 800b490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b492:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3738      	adds	r7, #56	; 0x38
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b08e      	sub	sp, #56	; 0x38
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d109      	bne.n	800b4cc <xQueueGiveFromISR+0x28>
	__asm volatile
 800b4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4bc:	f383 8811 	msr	BASEPRI, r3
 800b4c0:	f3bf 8f6f 	isb	sy
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	623b      	str	r3, [r7, #32]
 800b4ca:	e7fe      	b.n	800b4ca <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d009      	beq.n	800b4e8 <xQueueGiveFromISR+0x44>
 800b4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d8:	f383 8811 	msr	BASEPRI, r3
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	61fb      	str	r3, [r7, #28]
 800b4e6:	e7fe      	b.n	800b4e6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d103      	bne.n	800b4f8 <xQueueGiveFromISR+0x54>
 800b4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d101      	bne.n	800b4fc <xQueueGiveFromISR+0x58>
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e000      	b.n	800b4fe <xQueueGiveFromISR+0x5a>
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d109      	bne.n	800b516 <xQueueGiveFromISR+0x72>
 800b502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	61bb      	str	r3, [r7, #24]
 800b514:	e7fe      	b.n	800b514 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b516:	f002 fc05 	bl	800dd24 <vPortValidateInterruptPriority>
	__asm volatile
 800b51a:	f3ef 8211 	mrs	r2, BASEPRI
 800b51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b522:	f383 8811 	msr	BASEPRI, r3
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	617a      	str	r2, [r7, #20]
 800b530:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b532:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b534:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b542:	429a      	cmp	r2, r3
 800b544:	d22b      	bcs.n	800b59e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b548:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b54c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b552:	1c5a      	adds	r2, r3, #1
 800b554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b556:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b558:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b560:	d112      	bne.n	800b588 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b566:	2b00      	cmp	r3, #0
 800b568:	d016      	beq.n	800b598 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56c:	3324      	adds	r3, #36	; 0x24
 800b56e:	4618      	mov	r0, r3
 800b570:	f001 f8de 	bl	800c730 <xTaskRemoveFromEventList>
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00e      	beq.n	800b598 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d00b      	beq.n	800b598 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	2201      	movs	r2, #1
 800b584:	601a      	str	r2, [r3, #0]
 800b586:	e007      	b.n	800b598 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b58c:	3301      	adds	r3, #1
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	b25a      	sxtb	r2, r3
 800b592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b598:	2301      	movs	r3, #1
 800b59a:	637b      	str	r3, [r7, #52]	; 0x34
 800b59c:	e001      	b.n	800b5a2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	637b      	str	r3, [r7, #52]	; 0x34
 800b5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3738      	adds	r7, #56	; 0x38
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
	...

0800b5b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b08c      	sub	sp, #48	; 0x30
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d109      	bne.n	800b5e6 <xQueueReceive+0x2e>
	__asm volatile
 800b5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d6:	f383 8811 	msr	BASEPRI, r3
 800b5da:	f3bf 8f6f 	isb	sy
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	623b      	str	r3, [r7, #32]
 800b5e4:	e7fe      	b.n	800b5e4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d103      	bne.n	800b5f4 <xQueueReceive+0x3c>
 800b5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d101      	bne.n	800b5f8 <xQueueReceive+0x40>
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e000      	b.n	800b5fa <xQueueReceive+0x42>
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d109      	bne.n	800b612 <xQueueReceive+0x5a>
 800b5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b602:	f383 8811 	msr	BASEPRI, r3
 800b606:	f3bf 8f6f 	isb	sy
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	61fb      	str	r3, [r7, #28]
 800b610:	e7fe      	b.n	800b610 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b612:	f001 fa7b 	bl	800cb0c <xTaskGetSchedulerState>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d102      	bne.n	800b622 <xQueueReceive+0x6a>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d101      	bne.n	800b626 <xQueueReceive+0x6e>
 800b622:	2301      	movs	r3, #1
 800b624:	e000      	b.n	800b628 <xQueueReceive+0x70>
 800b626:	2300      	movs	r3, #0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d109      	bne.n	800b640 <xQueueReceive+0x88>
 800b62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b630:	f383 8811 	msr	BASEPRI, r3
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	61bb      	str	r3, [r7, #24]
 800b63e:	e7fe      	b.n	800b63e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b640:	f002 fa94 	bl	800db6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b648:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d01f      	beq.n	800b690 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b650:	68b9      	ldr	r1, [r7, #8]
 800b652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b654:	f000 fab5 	bl	800bbc2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65a:	1e5a      	subs	r2, r3, #1
 800b65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b662:	691b      	ldr	r3, [r3, #16]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00f      	beq.n	800b688 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66a:	3310      	adds	r3, #16
 800b66c:	4618      	mov	r0, r3
 800b66e:	f001 f85f 	bl	800c730 <xTaskRemoveFromEventList>
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d007      	beq.n	800b688 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b678:	4b3c      	ldr	r3, [pc, #240]	; (800b76c <xQueueReceive+0x1b4>)
 800b67a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b67e:	601a      	str	r2, [r3, #0]
 800b680:	f3bf 8f4f 	dsb	sy
 800b684:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b688:	f002 fa9e 	bl	800dbc8 <vPortExitCritical>
				return pdPASS;
 800b68c:	2301      	movs	r3, #1
 800b68e:	e069      	b.n	800b764 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d103      	bne.n	800b69e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b696:	f002 fa97 	bl	800dbc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b69a:	2300      	movs	r3, #0
 800b69c:	e062      	b.n	800b764 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d106      	bne.n	800b6b2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6a4:	f107 0310 	add.w	r3, r7, #16
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f001 f8a5 	bl	800c7f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6b2:	f002 fa89 	bl	800dbc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6b6:	f000 fde7 	bl	800c288 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6ba:	f002 fa57 	bl	800db6c <vPortEnterCritical>
 800b6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6c4:	b25b      	sxtb	r3, r3
 800b6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ca:	d103      	bne.n	800b6d4 <xQueueReceive+0x11c>
 800b6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6da:	b25b      	sxtb	r3, r3
 800b6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e0:	d103      	bne.n	800b6ea <xQueueReceive+0x132>
 800b6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6ea:	f002 fa6d 	bl	800dbc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6ee:	1d3a      	adds	r2, r7, #4
 800b6f0:	f107 0310 	add.w	r3, r7, #16
 800b6f4:	4611      	mov	r1, r2
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f001 f894 	bl	800c824 <xTaskCheckForTimeOut>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d123      	bne.n	800b74a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b704:	f000 fad5 	bl	800bcb2 <prvIsQueueEmpty>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d017      	beq.n	800b73e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b710:	3324      	adds	r3, #36	; 0x24
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	4611      	mov	r1, r2
 800b716:	4618      	mov	r0, r3
 800b718:	f000 ffbc 	bl	800c694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b71c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b71e:	f000 fa76 	bl	800bc0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b722:	f000 fdf7 	bl	800c314 <xTaskResumeAll>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d189      	bne.n	800b640 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800b72c:	4b0f      	ldr	r3, [pc, #60]	; (800b76c <xQueueReceive+0x1b4>)
 800b72e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b732:	601a      	str	r2, [r3, #0]
 800b734:	f3bf 8f4f 	dsb	sy
 800b738:	f3bf 8f6f 	isb	sy
 800b73c:	e780      	b.n	800b640 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b73e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b740:	f000 fa65 	bl	800bc0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b744:	f000 fde6 	bl	800c314 <xTaskResumeAll>
 800b748:	e77a      	b.n	800b640 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b74a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b74c:	f000 fa5f 	bl	800bc0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b750:	f000 fde0 	bl	800c314 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b756:	f000 faac 	bl	800bcb2 <prvIsQueueEmpty>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f43f af6f 	beq.w	800b640 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b762:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b764:	4618      	mov	r0, r3
 800b766:	3730      	adds	r7, #48	; 0x30
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	e000ed04 	.word	0xe000ed04

0800b770 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b08e      	sub	sp, #56	; 0x38
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b77a:	2300      	movs	r3, #0
 800b77c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b782:	2300      	movs	r3, #0
 800b784:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d109      	bne.n	800b7a0 <xQueueSemaphoreTake+0x30>
 800b78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b790:	f383 8811 	msr	BASEPRI, r3
 800b794:	f3bf 8f6f 	isb	sy
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	623b      	str	r3, [r7, #32]
 800b79e:	e7fe      	b.n	800b79e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d009      	beq.n	800b7bc <xQueueSemaphoreTake+0x4c>
 800b7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ac:	f383 8811 	msr	BASEPRI, r3
 800b7b0:	f3bf 8f6f 	isb	sy
 800b7b4:	f3bf 8f4f 	dsb	sy
 800b7b8:	61fb      	str	r3, [r7, #28]
 800b7ba:	e7fe      	b.n	800b7ba <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7bc:	f001 f9a6 	bl	800cb0c <xTaskGetSchedulerState>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d102      	bne.n	800b7cc <xQueueSemaphoreTake+0x5c>
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d101      	bne.n	800b7d0 <xQueueSemaphoreTake+0x60>
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e000      	b.n	800b7d2 <xQueueSemaphoreTake+0x62>
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d109      	bne.n	800b7ea <xQueueSemaphoreTake+0x7a>
 800b7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7da:	f383 8811 	msr	BASEPRI, r3
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	61bb      	str	r3, [r7, #24]
 800b7e8:	e7fe      	b.n	800b7e8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7ea:	f002 f9bf 	bl	800db6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d024      	beq.n	800b844 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fc:	1e5a      	subs	r2, r3, #1
 800b7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b800:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d104      	bne.n	800b814 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b80a:	f001 faf1 	bl	800cdf0 <pvTaskIncrementMutexHeldCount>
 800b80e:	4602      	mov	r2, r0
 800b810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b812:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b816:	691b      	ldr	r3, [r3, #16]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00f      	beq.n	800b83c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81e:	3310      	adds	r3, #16
 800b820:	4618      	mov	r0, r3
 800b822:	f000 ff85 	bl	800c730 <xTaskRemoveFromEventList>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d007      	beq.n	800b83c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b82c:	4b53      	ldr	r3, [pc, #332]	; (800b97c <xQueueSemaphoreTake+0x20c>)
 800b82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	f3bf 8f4f 	dsb	sy
 800b838:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b83c:	f002 f9c4 	bl	800dbc8 <vPortExitCritical>
				return pdPASS;
 800b840:	2301      	movs	r3, #1
 800b842:	e096      	b.n	800b972 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d110      	bne.n	800b86c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d009      	beq.n	800b864 <xQueueSemaphoreTake+0xf4>
 800b850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	617b      	str	r3, [r7, #20]
 800b862:	e7fe      	b.n	800b862 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b864:	f002 f9b0 	bl	800dbc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b868:	2300      	movs	r3, #0
 800b86a:	e082      	b.n	800b972 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b86c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d106      	bne.n	800b880 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b872:	f107 030c 	add.w	r3, r7, #12
 800b876:	4618      	mov	r0, r3
 800b878:	f000 ffbe 	bl	800c7f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b87c:	2301      	movs	r3, #1
 800b87e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b880:	f002 f9a2 	bl	800dbc8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b884:	f000 fd00 	bl	800c288 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b888:	f002 f970 	bl	800db6c <vPortEnterCritical>
 800b88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b892:	b25b      	sxtb	r3, r3
 800b894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b898:	d103      	bne.n	800b8a2 <xQueueSemaphoreTake+0x132>
 800b89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8a8:	b25b      	sxtb	r3, r3
 800b8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ae:	d103      	bne.n	800b8b8 <xQueueSemaphoreTake+0x148>
 800b8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8b8:	f002 f986 	bl	800dbc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8bc:	463a      	mov	r2, r7
 800b8be:	f107 030c 	add.w	r3, r7, #12
 800b8c2:	4611      	mov	r1, r2
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f000 ffad 	bl	800c824 <xTaskCheckForTimeOut>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d132      	bne.n	800b936 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8d2:	f000 f9ee 	bl	800bcb2 <prvIsQueueEmpty>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d026      	beq.n	800b92a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d109      	bne.n	800b8f8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800b8e4:	f002 f942 	bl	800db6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f001 f92b 	bl	800cb48 <xTaskPriorityInherit>
 800b8f2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b8f4:	f002 f968 	bl	800dbc8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8fa:	3324      	adds	r3, #36	; 0x24
 800b8fc:	683a      	ldr	r2, [r7, #0]
 800b8fe:	4611      	mov	r1, r2
 800b900:	4618      	mov	r0, r3
 800b902:	f000 fec7 	bl	800c694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b906:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b908:	f000 f981 	bl	800bc0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b90c:	f000 fd02 	bl	800c314 <xTaskResumeAll>
 800b910:	4603      	mov	r3, r0
 800b912:	2b00      	cmp	r3, #0
 800b914:	f47f af69 	bne.w	800b7ea <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800b918:	4b18      	ldr	r3, [pc, #96]	; (800b97c <xQueueSemaphoreTake+0x20c>)
 800b91a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b91e:	601a      	str	r2, [r3, #0]
 800b920:	f3bf 8f4f 	dsb	sy
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	e75f      	b.n	800b7ea <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b92a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b92c:	f000 f96f 	bl	800bc0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b930:	f000 fcf0 	bl	800c314 <xTaskResumeAll>
 800b934:	e759      	b.n	800b7ea <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b936:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b938:	f000 f969 	bl	800bc0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b93c:	f000 fcea 	bl	800c314 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b940:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b942:	f000 f9b6 	bl	800bcb2 <prvIsQueueEmpty>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f43f af4e 	beq.w	800b7ea <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b950:	2b00      	cmp	r3, #0
 800b952:	d00d      	beq.n	800b970 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800b954:	f002 f90a 	bl	800db6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b958:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b95a:	f000 f8b0 	bl	800babe <prvGetDisinheritPriorityAfterTimeout>
 800b95e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b966:	4618      	mov	r0, r3
 800b968:	f001 f9c2 	bl	800ccf0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b96c:	f002 f92c 	bl	800dbc8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b970:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b972:	4618      	mov	r0, r3
 800b974:	3738      	adds	r7, #56	; 0x38
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	e000ed04 	.word	0xe000ed04

0800b980 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b08e      	sub	sp, #56	; 0x38
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b992:	2b00      	cmp	r3, #0
 800b994:	d109      	bne.n	800b9aa <xQueueReceiveFromISR+0x2a>
 800b996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99a:	f383 8811 	msr	BASEPRI, r3
 800b99e:	f3bf 8f6f 	isb	sy
 800b9a2:	f3bf 8f4f 	dsb	sy
 800b9a6:	623b      	str	r3, [r7, #32]
 800b9a8:	e7fe      	b.n	800b9a8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d103      	bne.n	800b9b8 <xQueueReceiveFromISR+0x38>
 800b9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d101      	bne.n	800b9bc <xQueueReceiveFromISR+0x3c>
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e000      	b.n	800b9be <xQueueReceiveFromISR+0x3e>
 800b9bc:	2300      	movs	r3, #0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d109      	bne.n	800b9d6 <xQueueReceiveFromISR+0x56>
 800b9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c6:	f383 8811 	msr	BASEPRI, r3
 800b9ca:	f3bf 8f6f 	isb	sy
 800b9ce:	f3bf 8f4f 	dsb	sy
 800b9d2:	61fb      	str	r3, [r7, #28]
 800b9d4:	e7fe      	b.n	800b9d4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9d6:	f002 f9a5 	bl	800dd24 <vPortValidateInterruptPriority>
	__asm volatile
 800b9da:	f3ef 8211 	mrs	r2, BASEPRI
 800b9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e2:	f383 8811 	msr	BASEPRI, r3
 800b9e6:	f3bf 8f6f 	isb	sy
 800b9ea:	f3bf 8f4f 	dsb	sy
 800b9ee:	61ba      	str	r2, [r7, #24]
 800b9f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b9f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d02f      	beq.n	800ba62 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ba02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ba0c:	68b9      	ldr	r1, [r7, #8]
 800ba0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba10:	f000 f8d7 	bl	800bbc2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ba14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba16:	1e5a      	subs	r2, r3, #1
 800ba18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ba1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba24:	d112      	bne.n	800ba4c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba28:	691b      	ldr	r3, [r3, #16]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d016      	beq.n	800ba5c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba30:	3310      	adds	r3, #16
 800ba32:	4618      	mov	r0, r3
 800ba34:	f000 fe7c 	bl	800c730 <xTaskRemoveFromEventList>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d00e      	beq.n	800ba5c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d00b      	beq.n	800ba5c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2201      	movs	r2, #1
 800ba48:	601a      	str	r2, [r3, #0]
 800ba4a:	e007      	b.n	800ba5c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ba4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba50:	3301      	adds	r3, #1
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	b25a      	sxtb	r2, r3
 800ba56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	637b      	str	r3, [r7, #52]	; 0x34
 800ba60:	e001      	b.n	800ba66 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800ba62:	2300      	movs	r3, #0
 800ba64:	637b      	str	r3, [r7, #52]	; 0x34
 800ba66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba68:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3738      	adds	r7, #56	; 0x38
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b084      	sub	sp, #16
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d109      	bne.n	800baa0 <vQueueDelete+0x26>
	__asm volatile
 800ba8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba90:	f383 8811 	msr	BASEPRI, r3
 800ba94:	f3bf 8f6f 	isb	sy
 800ba98:	f3bf 8f4f 	dsb	sy
 800ba9c:	60bb      	str	r3, [r7, #8]
 800ba9e:	e7fe      	b.n	800ba9e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f000 f95d 	bl	800bd60 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800baac:	2b00      	cmp	r3, #0
 800baae:	d102      	bne.n	800bab6 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f002 fa37 	bl	800df24 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800bab6:	bf00      	nop
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800babe:	b480      	push	{r7}
 800bac0:	b085      	sub	sp, #20
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d006      	beq.n	800badc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800bad8:	60fb      	str	r3, [r7, #12]
 800bada:	e001      	b.n	800bae0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800badc:	2300      	movs	r3, #0
 800bade:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bae0:	68fb      	ldr	r3, [r7, #12]
	}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3714      	adds	r7, #20
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr

0800baee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b086      	sub	sp, #24
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	60f8      	str	r0, [r7, #12]
 800baf6:	60b9      	str	r1, [r7, #8]
 800baf8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bafa:	2300      	movs	r3, #0
 800bafc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb02:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d10d      	bne.n	800bb28 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d14d      	bne.n	800bbb0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f001 f87d 	bl	800cc18 <xTaskPriorityDisinherit>
 800bb1e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2200      	movs	r2, #0
 800bb24:	609a      	str	r2, [r3, #8]
 800bb26:	e043      	b.n	800bbb0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d119      	bne.n	800bb62 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	6858      	ldr	r0, [r3, #4]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb36:	461a      	mov	r2, r3
 800bb38:	68b9      	ldr	r1, [r7, #8]
 800bb3a:	f004 fc65 	bl	8010408 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	685a      	ldr	r2, [r3, #4]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb46:	441a      	add	r2, r3
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	685a      	ldr	r2, [r3, #4]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d32b      	bcc.n	800bbb0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	605a      	str	r2, [r3, #4]
 800bb60:	e026      	b.n	800bbb0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	68d8      	ldr	r0, [r3, #12]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	68b9      	ldr	r1, [r7, #8]
 800bb6e:	f004 fc4b 	bl	8010408 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	68da      	ldr	r2, [r3, #12]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb7a:	425b      	negs	r3, r3
 800bb7c:	441a      	add	r2, r3
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	68da      	ldr	r2, [r3, #12]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d207      	bcs.n	800bb9e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	689a      	ldr	r2, [r3, #8]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb96:	425b      	negs	r3, r3
 800bb98:	441a      	add	r2, r3
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2b02      	cmp	r3, #2
 800bba2:	d105      	bne.n	800bbb0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d002      	beq.n	800bbb0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	3b01      	subs	r3, #1
 800bbae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	1c5a      	adds	r2, r3, #1
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bbb8:	697b      	ldr	r3, [r7, #20]
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3718      	adds	r7, #24
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bbc2:	b580      	push	{r7, lr}
 800bbc4:	b082      	sub	sp, #8
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
 800bbca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d018      	beq.n	800bc06 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	68da      	ldr	r2, [r3, #12]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbdc:	441a      	add	r2, r3
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	68da      	ldr	r2, [r3, #12]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	689b      	ldr	r3, [r3, #8]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d303      	bcc.n	800bbf6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	68d9      	ldr	r1, [r3, #12]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbfe:	461a      	mov	r2, r3
 800bc00:	6838      	ldr	r0, [r7, #0]
 800bc02:	f004 fc01 	bl	8010408 <memcpy>
	}
}
 800bc06:	bf00      	nop
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b084      	sub	sp, #16
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bc16:	f001 ffa9 	bl	800db6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc20:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc22:	e011      	b.n	800bc48 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d012      	beq.n	800bc52 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	3324      	adds	r3, #36	; 0x24
 800bc30:	4618      	mov	r0, r3
 800bc32:	f000 fd7d 	bl	800c730 <xTaskRemoveFromEventList>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d001      	beq.n	800bc40 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bc3c:	f000 fe52 	bl	800c8e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bc40:	7bfb      	ldrb	r3, [r7, #15]
 800bc42:	3b01      	subs	r3, #1
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	dce9      	bgt.n	800bc24 <prvUnlockQueue+0x16>
 800bc50:	e000      	b.n	800bc54 <prvUnlockQueue+0x46>
					break;
 800bc52:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	22ff      	movs	r2, #255	; 0xff
 800bc58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bc5c:	f001 ffb4 	bl	800dbc8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bc60:	f001 ff84 	bl	800db6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc6a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc6c:	e011      	b.n	800bc92 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d012      	beq.n	800bc9c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	3310      	adds	r3, #16
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f000 fd58 	bl	800c730 <xTaskRemoveFromEventList>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d001      	beq.n	800bc8a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bc86:	f000 fe2d 	bl	800c8e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bc8a:	7bbb      	ldrb	r3, [r7, #14]
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	dce9      	bgt.n	800bc6e <prvUnlockQueue+0x60>
 800bc9a:	e000      	b.n	800bc9e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bc9c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	22ff      	movs	r2, #255	; 0xff
 800bca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bca6:	f001 ff8f 	bl	800dbc8 <vPortExitCritical>
}
 800bcaa:	bf00      	nop
 800bcac:	3710      	adds	r7, #16
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b084      	sub	sp, #16
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bcba:	f001 ff57 	bl	800db6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d102      	bne.n	800bccc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	60fb      	str	r3, [r7, #12]
 800bcca:	e001      	b.n	800bcd0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bccc:	2300      	movs	r3, #0
 800bcce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bcd0:	f001 ff7a 	bl	800dbc8 <vPortExitCritical>

	return xReturn;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b084      	sub	sp, #16
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bce6:	f001 ff41 	bl	800db6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d102      	bne.n	800bcfc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	60fb      	str	r3, [r7, #12]
 800bcfa:	e001      	b.n	800bd00 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd00:	f001 ff62 	bl	800dbc8 <vPortExitCritical>

	return xReturn;
 800bd04:	68fb      	ldr	r3, [r7, #12]
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
	...

0800bd10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	60fb      	str	r3, [r7, #12]
 800bd1e:	e014      	b.n	800bd4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bd20:	4a0e      	ldr	r2, [pc, #56]	; (800bd5c <vQueueAddToRegistry+0x4c>)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d10b      	bne.n	800bd44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bd2c:	490b      	ldr	r1, [pc, #44]	; (800bd5c <vQueueAddToRegistry+0x4c>)
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	683a      	ldr	r2, [r7, #0]
 800bd32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bd36:	4a09      	ldr	r2, [pc, #36]	; (800bd5c <vQueueAddToRegistry+0x4c>)
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	00db      	lsls	r3, r3, #3
 800bd3c:	4413      	add	r3, r2
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bd42:	e005      	b.n	800bd50 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	3301      	adds	r3, #1
 800bd48:	60fb      	str	r3, [r7, #12]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2b07      	cmp	r3, #7
 800bd4e:	d9e7      	bls.n	800bd20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bd50:	bf00      	nop
 800bd52:	3714      	adds	r7, #20
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	20006cec 	.word	0x20006cec

0800bd60 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd68:	2300      	movs	r3, #0
 800bd6a:	60fb      	str	r3, [r7, #12]
 800bd6c:	e016      	b.n	800bd9c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bd6e:	4a10      	ldr	r2, [pc, #64]	; (800bdb0 <vQueueUnregisterQueue+0x50>)
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	00db      	lsls	r3, r3, #3
 800bd74:	4413      	add	r3, r2
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d10b      	bne.n	800bd96 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bd7e:	4a0c      	ldr	r2, [pc, #48]	; (800bdb0 <vQueueUnregisterQueue+0x50>)
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2100      	movs	r1, #0
 800bd84:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bd88:	4a09      	ldr	r2, [pc, #36]	; (800bdb0 <vQueueUnregisterQueue+0x50>)
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	00db      	lsls	r3, r3, #3
 800bd8e:	4413      	add	r3, r2
 800bd90:	2200      	movs	r2, #0
 800bd92:	605a      	str	r2, [r3, #4]
				break;
 800bd94:	e005      	b.n	800bda2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	3301      	adds	r3, #1
 800bd9a:	60fb      	str	r3, [r7, #12]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2b07      	cmp	r3, #7
 800bda0:	d9e5      	bls.n	800bd6e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bda2:	bf00      	nop
 800bda4:	3714      	adds	r7, #20
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	20006cec 	.word	0x20006cec

0800bdb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bdc4:	f001 fed2 	bl	800db6c <vPortEnterCritical>
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdce:	b25b      	sxtb	r3, r3
 800bdd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd4:	d103      	bne.n	800bdde <vQueueWaitForMessageRestricted+0x2a>
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bde4:	b25b      	sxtb	r3, r3
 800bde6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdea:	d103      	bne.n	800bdf4 <vQueueWaitForMessageRestricted+0x40>
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdf4:	f001 fee8 	bl	800dbc8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d106      	bne.n	800be0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	3324      	adds	r3, #36	; 0x24
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	68b9      	ldr	r1, [r7, #8]
 800be08:	4618      	mov	r0, r3
 800be0a:	f000 fc67 	bl	800c6dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800be0e:	6978      	ldr	r0, [r7, #20]
 800be10:	f7ff fefd 	bl	800bc0e <prvUnlockQueue>
	}
 800be14:	bf00      	nop
 800be16:	3718      	adds	r7, #24
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b08e      	sub	sp, #56	; 0x38
 800be20:	af04      	add	r7, sp, #16
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
 800be28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800be2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d109      	bne.n	800be44 <xTaskCreateStatic+0x28>
 800be30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be34:	f383 8811 	msr	BASEPRI, r3
 800be38:	f3bf 8f6f 	isb	sy
 800be3c:	f3bf 8f4f 	dsb	sy
 800be40:	623b      	str	r3, [r7, #32]
 800be42:	e7fe      	b.n	800be42 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800be44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be46:	2b00      	cmp	r3, #0
 800be48:	d109      	bne.n	800be5e <xTaskCreateStatic+0x42>
 800be4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4e:	f383 8811 	msr	BASEPRI, r3
 800be52:	f3bf 8f6f 	isb	sy
 800be56:	f3bf 8f4f 	dsb	sy
 800be5a:	61fb      	str	r3, [r7, #28]
 800be5c:	e7fe      	b.n	800be5c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800be5e:	235c      	movs	r3, #92	; 0x5c
 800be60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	2b5c      	cmp	r3, #92	; 0x5c
 800be66:	d009      	beq.n	800be7c <xTaskCreateStatic+0x60>
 800be68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6c:	f383 8811 	msr	BASEPRI, r3
 800be70:	f3bf 8f6f 	isb	sy
 800be74:	f3bf 8f4f 	dsb	sy
 800be78:	61bb      	str	r3, [r7, #24]
 800be7a:	e7fe      	b.n	800be7a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800be7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800be7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be80:	2b00      	cmp	r3, #0
 800be82:	d01e      	beq.n	800bec2 <xTaskCreateStatic+0xa6>
 800be84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be86:	2b00      	cmp	r3, #0
 800be88:	d01b      	beq.n	800bec2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be92:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800be94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be96:	2202      	movs	r2, #2
 800be98:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800be9c:	2300      	movs	r3, #0
 800be9e:	9303      	str	r3, [sp, #12]
 800bea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea2:	9302      	str	r3, [sp, #8]
 800bea4:	f107 0314 	add.w	r3, r7, #20
 800bea8:	9301      	str	r3, [sp, #4]
 800beaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beac:	9300      	str	r3, [sp, #0]
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	68b9      	ldr	r1, [r7, #8]
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	f000 f850 	bl	800bf5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800beba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bebc:	f000 f8dc 	bl	800c078 <prvAddNewTaskToReadyList>
 800bec0:	e001      	b.n	800bec6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800bec2:	2300      	movs	r3, #0
 800bec4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bec6:	697b      	ldr	r3, [r7, #20]
	}
 800bec8:	4618      	mov	r0, r3
 800beca:	3728      	adds	r7, #40	; 0x28
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b08c      	sub	sp, #48	; 0x30
 800bed4:	af04      	add	r7, sp, #16
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	603b      	str	r3, [r7, #0]
 800bedc:	4613      	mov	r3, r2
 800bede:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bee0:	88fb      	ldrh	r3, [r7, #6]
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	4618      	mov	r0, r3
 800bee6:	f001 ff5b 	bl	800dda0 <pvPortMalloc>
 800beea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00e      	beq.n	800bf10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bef2:	205c      	movs	r0, #92	; 0x5c
 800bef4:	f001 ff54 	bl	800dda0 <pvPortMalloc>
 800bef8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d003      	beq.n	800bf08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	697a      	ldr	r2, [r7, #20]
 800bf04:	631a      	str	r2, [r3, #48]	; 0x30
 800bf06:	e005      	b.n	800bf14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf08:	6978      	ldr	r0, [r7, #20]
 800bf0a:	f002 f80b 	bl	800df24 <vPortFree>
 800bf0e:	e001      	b.n	800bf14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bf10:	2300      	movs	r3, #0
 800bf12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d017      	beq.n	800bf4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bf22:	88fa      	ldrh	r2, [r7, #6]
 800bf24:	2300      	movs	r3, #0
 800bf26:	9303      	str	r3, [sp, #12]
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	9302      	str	r3, [sp, #8]
 800bf2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2e:	9301      	str	r3, [sp, #4]
 800bf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf32:	9300      	str	r3, [sp, #0]
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	68b9      	ldr	r1, [r7, #8]
 800bf38:	68f8      	ldr	r0, [r7, #12]
 800bf3a:	f000 f80e 	bl	800bf5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf3e:	69f8      	ldr	r0, [r7, #28]
 800bf40:	f000 f89a 	bl	800c078 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bf44:	2301      	movs	r3, #1
 800bf46:	61bb      	str	r3, [r7, #24]
 800bf48:	e002      	b.n	800bf50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf4a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bf50:	69bb      	ldr	r3, [r7, #24]
	}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3720      	adds	r7, #32
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b088      	sub	sp, #32
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	60f8      	str	r0, [r7, #12]
 800bf62:	60b9      	str	r1, [r7, #8]
 800bf64:	607a      	str	r2, [r7, #4]
 800bf66:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	461a      	mov	r2, r3
 800bf72:	21a5      	movs	r1, #165	; 0xa5
 800bf74:	f004 fa53 	bl	801041e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bf82:	3b01      	subs	r3, #1
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	4413      	add	r3, r2
 800bf88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bf8a:	69bb      	ldr	r3, [r7, #24]
 800bf8c:	f023 0307 	bic.w	r3, r3, #7
 800bf90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	f003 0307 	and.w	r3, r3, #7
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d009      	beq.n	800bfb0 <prvInitialiseNewTask+0x56>
 800bf9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa0:	f383 8811 	msr	BASEPRI, r3
 800bfa4:	f3bf 8f6f 	isb	sy
 800bfa8:	f3bf 8f4f 	dsb	sy
 800bfac:	617b      	str	r3, [r7, #20]
 800bfae:	e7fe      	b.n	800bfae <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d01f      	beq.n	800bff6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	61fb      	str	r3, [r7, #28]
 800bfba:	e012      	b.n	800bfe2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	69fb      	ldr	r3, [r7, #28]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	7819      	ldrb	r1, [r3, #0]
 800bfc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfc6:	69fb      	ldr	r3, [r7, #28]
 800bfc8:	4413      	add	r3, r2
 800bfca:	3334      	adds	r3, #52	; 0x34
 800bfcc:	460a      	mov	r2, r1
 800bfce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d006      	beq.n	800bfea <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfdc:	69fb      	ldr	r3, [r7, #28]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	61fb      	str	r3, [r7, #28]
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	2b0f      	cmp	r3, #15
 800bfe6:	d9e9      	bls.n	800bfbc <prvInitialiseNewTask+0x62>
 800bfe8:	e000      	b.n	800bfec <prvInitialiseNewTask+0x92>
			{
				break;
 800bfea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfee:	2200      	movs	r2, #0
 800bff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bff4:	e003      	b.n	800bffe <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	2200      	movs	r2, #0
 800bffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c000:	2b37      	cmp	r3, #55	; 0x37
 800c002:	d901      	bls.n	800c008 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c004:	2337      	movs	r3, #55	; 0x37
 800c006:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c00c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c010:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c012:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c016:	2200      	movs	r2, #0
 800c018:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	3304      	adds	r3, #4
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fe fdc6 	bl	800abb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c026:	3318      	adds	r3, #24
 800c028:	4618      	mov	r0, r3
 800c02a:	f7fe fdc1 	bl	800abb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c032:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c036:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c042:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c046:	2200      	movs	r2, #0
 800c048:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04c:	2200      	movs	r2, #0
 800c04e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c052:	683a      	ldr	r2, [r7, #0]
 800c054:	68f9      	ldr	r1, [r7, #12]
 800c056:	69b8      	ldr	r0, [r7, #24]
 800c058:	f001 fc60 	bl	800d91c <pxPortInitialiseStack>
 800c05c:	4602      	mov	r2, r0
 800c05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c060:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c064:	2b00      	cmp	r3, #0
 800c066:	d002      	beq.n	800c06e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c06a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c06c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c06e:	bf00      	nop
 800c070:	3720      	adds	r7, #32
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
	...

0800c078 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c080:	f001 fd74 	bl	800db6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c084:	4b2d      	ldr	r3, [pc, #180]	; (800c13c <prvAddNewTaskToReadyList+0xc4>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	3301      	adds	r3, #1
 800c08a:	4a2c      	ldr	r2, [pc, #176]	; (800c13c <prvAddNewTaskToReadyList+0xc4>)
 800c08c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c08e:	4b2c      	ldr	r3, [pc, #176]	; (800c140 <prvAddNewTaskToReadyList+0xc8>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d109      	bne.n	800c0aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c096:	4a2a      	ldr	r2, [pc, #168]	; (800c140 <prvAddNewTaskToReadyList+0xc8>)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c09c:	4b27      	ldr	r3, [pc, #156]	; (800c13c <prvAddNewTaskToReadyList+0xc4>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d110      	bne.n	800c0c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c0a4:	f000 fc68 	bl	800c978 <prvInitialiseTaskLists>
 800c0a8:	e00d      	b.n	800c0c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c0aa:	4b26      	ldr	r3, [pc, #152]	; (800c144 <prvAddNewTaskToReadyList+0xcc>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d109      	bne.n	800c0c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c0b2:	4b23      	ldr	r3, [pc, #140]	; (800c140 <prvAddNewTaskToReadyList+0xc8>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d802      	bhi.n	800c0c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c0c0:	4a1f      	ldr	r2, [pc, #124]	; (800c140 <prvAddNewTaskToReadyList+0xc8>)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c0c6:	4b20      	ldr	r3, [pc, #128]	; (800c148 <prvAddNewTaskToReadyList+0xd0>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	4a1e      	ldr	r2, [pc, #120]	; (800c148 <prvAddNewTaskToReadyList+0xd0>)
 800c0ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c0d0:	4b1d      	ldr	r3, [pc, #116]	; (800c148 <prvAddNewTaskToReadyList+0xd0>)
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0dc:	4b1b      	ldr	r3, [pc, #108]	; (800c14c <prvAddNewTaskToReadyList+0xd4>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d903      	bls.n	800c0ec <prvAddNewTaskToReadyList+0x74>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e8:	4a18      	ldr	r2, [pc, #96]	; (800c14c <prvAddNewTaskToReadyList+0xd4>)
 800c0ea:	6013      	str	r3, [r2, #0]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f0:	4613      	mov	r3, r2
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	4413      	add	r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	4a15      	ldr	r2, [pc, #84]	; (800c150 <prvAddNewTaskToReadyList+0xd8>)
 800c0fa:	441a      	add	r2, r3
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	3304      	adds	r3, #4
 800c100:	4619      	mov	r1, r3
 800c102:	4610      	mov	r0, r2
 800c104:	f7fe fd61 	bl	800abca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c108:	f001 fd5e 	bl	800dbc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c10c:	4b0d      	ldr	r3, [pc, #52]	; (800c144 <prvAddNewTaskToReadyList+0xcc>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d00e      	beq.n	800c132 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c114:	4b0a      	ldr	r3, [pc, #40]	; (800c140 <prvAddNewTaskToReadyList+0xc8>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c11e:	429a      	cmp	r2, r3
 800c120:	d207      	bcs.n	800c132 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c122:	4b0c      	ldr	r3, [pc, #48]	; (800c154 <prvAddNewTaskToReadyList+0xdc>)
 800c124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c128:	601a      	str	r2, [r3, #0]
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c132:	bf00      	nop
 800c134:	3708      	adds	r7, #8
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	20002c80 	.word	0x20002c80
 800c140:	200027ac 	.word	0x200027ac
 800c144:	20002c8c 	.word	0x20002c8c
 800c148:	20002c9c 	.word	0x20002c9c
 800c14c:	20002c88 	.word	0x20002c88
 800c150:	200027b0 	.word	0x200027b0
 800c154:	e000ed04 	.word	0xe000ed04

0800c158 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c160:	2300      	movs	r3, #0
 800c162:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d016      	beq.n	800c198 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c16a:	4b13      	ldr	r3, [pc, #76]	; (800c1b8 <vTaskDelay+0x60>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d009      	beq.n	800c186 <vTaskDelay+0x2e>
 800c172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c176:	f383 8811 	msr	BASEPRI, r3
 800c17a:	f3bf 8f6f 	isb	sy
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	60bb      	str	r3, [r7, #8]
 800c184:	e7fe      	b.n	800c184 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800c186:	f000 f87f 	bl	800c288 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c18a:	2100      	movs	r1, #0
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f001 f82b 	bl	800d1e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c192:	f000 f8bf 	bl	800c314 <xTaskResumeAll>
 800c196:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d107      	bne.n	800c1ae <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800c19e:	4b07      	ldr	r3, [pc, #28]	; (800c1bc <vTaskDelay+0x64>)
 800c1a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1a4:	601a      	str	r2, [r3, #0]
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1ae:	bf00      	nop
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	20002ca8 	.word	0x20002ca8
 800c1bc:	e000ed04 	.word	0xe000ed04

0800c1c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b08a      	sub	sp, #40	; 0x28
 800c1c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c1ce:	463a      	mov	r2, r7
 800c1d0:	1d39      	adds	r1, r7, #4
 800c1d2:	f107 0308 	add.w	r3, r7, #8
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7fe fc96 	bl	800ab08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c1dc:	6839      	ldr	r1, [r7, #0]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	68ba      	ldr	r2, [r7, #8]
 800c1e2:	9202      	str	r2, [sp, #8]
 800c1e4:	9301      	str	r3, [sp, #4]
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	9300      	str	r3, [sp, #0]
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	460a      	mov	r2, r1
 800c1ee:	4920      	ldr	r1, [pc, #128]	; (800c270 <vTaskStartScheduler+0xb0>)
 800c1f0:	4820      	ldr	r0, [pc, #128]	; (800c274 <vTaskStartScheduler+0xb4>)
 800c1f2:	f7ff fe13 	bl	800be1c <xTaskCreateStatic>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	4b1f      	ldr	r3, [pc, #124]	; (800c278 <vTaskStartScheduler+0xb8>)
 800c1fa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c1fc:	4b1e      	ldr	r3, [pc, #120]	; (800c278 <vTaskStartScheduler+0xb8>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d002      	beq.n	800c20a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c204:	2301      	movs	r3, #1
 800c206:	617b      	str	r3, [r7, #20]
 800c208:	e001      	b.n	800c20e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c20a:	2300      	movs	r3, #0
 800c20c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	2b01      	cmp	r3, #1
 800c212:	d102      	bne.n	800c21a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c214:	f001 f83c 	bl	800d290 <xTimerCreateTimerTask>
 800c218:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d115      	bne.n	800c24c <vTaskStartScheduler+0x8c>
 800c220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c224:	f383 8811 	msr	BASEPRI, r3
 800c228:	f3bf 8f6f 	isb	sy
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c232:	4b12      	ldr	r3, [pc, #72]	; (800c27c <vTaskStartScheduler+0xbc>)
 800c234:	f04f 32ff 	mov.w	r2, #4294967295
 800c238:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c23a:	4b11      	ldr	r3, [pc, #68]	; (800c280 <vTaskStartScheduler+0xc0>)
 800c23c:	2201      	movs	r2, #1
 800c23e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c240:	4b10      	ldr	r3, [pc, #64]	; (800c284 <vTaskStartScheduler+0xc4>)
 800c242:	2200      	movs	r2, #0
 800c244:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c246:	f001 fbf3 	bl	800da30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c24a:	e00d      	b.n	800c268 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c252:	d109      	bne.n	800c268 <vTaskStartScheduler+0xa8>
 800c254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c258:	f383 8811 	msr	BASEPRI, r3
 800c25c:	f3bf 8f6f 	isb	sy
 800c260:	f3bf 8f4f 	dsb	sy
 800c264:	60fb      	str	r3, [r7, #12]
 800c266:	e7fe      	b.n	800c266 <vTaskStartScheduler+0xa6>
}
 800c268:	bf00      	nop
 800c26a:	3718      	adds	r7, #24
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	08011950 	.word	0x08011950
 800c274:	0800c8fd 	.word	0x0800c8fd
 800c278:	20002ca4 	.word	0x20002ca4
 800c27c:	20002ca0 	.word	0x20002ca0
 800c280:	20002c8c 	.word	0x20002c8c
 800c284:	20002c84 	.word	0x20002c84

0800c288 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c288:	b480      	push	{r7}
 800c28a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c28c:	4b04      	ldr	r3, [pc, #16]	; (800c2a0 <vTaskSuspendAll+0x18>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	3301      	adds	r3, #1
 800c292:	4a03      	ldr	r2, [pc, #12]	; (800c2a0 <vTaskSuspendAll+0x18>)
 800c294:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c296:	bf00      	nop
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr
 800c2a0:	20002ca8 	.word	0x20002ca8

0800c2a4 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800c2ae:	4b14      	ldr	r3, [pc, #80]	; (800c300 <prvGetExpectedIdleTime+0x5c>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d001      	beq.n	800c2ba <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800c2ba:	4b12      	ldr	r3, [pc, #72]	; (800c304 <prvGetExpectedIdleTime+0x60>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d002      	beq.n	800c2ca <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	607b      	str	r3, [r7, #4]
 800c2c8:	e012      	b.n	800c2f0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800c2ca:	4b0f      	ldr	r3, [pc, #60]	; (800c308 <prvGetExpectedIdleTime+0x64>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d902      	bls.n	800c2d8 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	607b      	str	r3, [r7, #4]
 800c2d6:	e00b      	b.n	800c2f0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d002      	beq.n	800c2e4 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	607b      	str	r3, [r7, #4]
 800c2e2:	e005      	b.n	800c2f0 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800c2e4:	4b09      	ldr	r3, [pc, #36]	; (800c30c <prvGetExpectedIdleTime+0x68>)
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	4b09      	ldr	r3, [pc, #36]	; (800c310 <prvGetExpectedIdleTime+0x6c>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	1ad3      	subs	r3, r2, r3
 800c2ee:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800c2f0:	687b      	ldr	r3, [r7, #4]
	}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	370c      	adds	r7, #12
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	20002c88 	.word	0x20002c88
 800c304:	200027ac 	.word	0x200027ac
 800c308:	200027b0 	.word	0x200027b0
 800c30c:	20002ca0 	.word	0x20002ca0
 800c310:	20002c84 	.word	0x20002c84

0800c314 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c31a:	2300      	movs	r3, #0
 800c31c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c31e:	2300      	movs	r3, #0
 800c320:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c322:	4b41      	ldr	r3, [pc, #260]	; (800c428 <xTaskResumeAll+0x114>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d109      	bne.n	800c33e <xTaskResumeAll+0x2a>
 800c32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32e:	f383 8811 	msr	BASEPRI, r3
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	603b      	str	r3, [r7, #0]
 800c33c:	e7fe      	b.n	800c33c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c33e:	f001 fc15 	bl	800db6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c342:	4b39      	ldr	r3, [pc, #228]	; (800c428 <xTaskResumeAll+0x114>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	3b01      	subs	r3, #1
 800c348:	4a37      	ldr	r2, [pc, #220]	; (800c428 <xTaskResumeAll+0x114>)
 800c34a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c34c:	4b36      	ldr	r3, [pc, #216]	; (800c428 <xTaskResumeAll+0x114>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d162      	bne.n	800c41a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c354:	4b35      	ldr	r3, [pc, #212]	; (800c42c <xTaskResumeAll+0x118>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d05e      	beq.n	800c41a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c35c:	e02f      	b.n	800c3be <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c35e:	4b34      	ldr	r3, [pc, #208]	; (800c430 <xTaskResumeAll+0x11c>)
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	3318      	adds	r3, #24
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fe fc8a 	bl	800ac84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	3304      	adds	r3, #4
 800c374:	4618      	mov	r0, r3
 800c376:	f7fe fc85 	bl	800ac84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c37e:	4b2d      	ldr	r3, [pc, #180]	; (800c434 <xTaskResumeAll+0x120>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	429a      	cmp	r2, r3
 800c384:	d903      	bls.n	800c38e <xTaskResumeAll+0x7a>
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c38a:	4a2a      	ldr	r2, [pc, #168]	; (800c434 <xTaskResumeAll+0x120>)
 800c38c:	6013      	str	r3, [r2, #0]
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c392:	4613      	mov	r3, r2
 800c394:	009b      	lsls	r3, r3, #2
 800c396:	4413      	add	r3, r2
 800c398:	009b      	lsls	r3, r3, #2
 800c39a:	4a27      	ldr	r2, [pc, #156]	; (800c438 <xTaskResumeAll+0x124>)
 800c39c:	441a      	add	r2, r3
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	3304      	adds	r3, #4
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	4610      	mov	r0, r2
 800c3a6:	f7fe fc10 	bl	800abca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ae:	4b23      	ldr	r3, [pc, #140]	; (800c43c <xTaskResumeAll+0x128>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d302      	bcc.n	800c3be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c3b8:	4b21      	ldr	r3, [pc, #132]	; (800c440 <xTaskResumeAll+0x12c>)
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3be:	4b1c      	ldr	r3, [pc, #112]	; (800c430 <xTaskResumeAll+0x11c>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d1cb      	bne.n	800c35e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d001      	beq.n	800c3d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c3cc:	f000 fb6e 	bl	800caac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c3d0:	4b1c      	ldr	r3, [pc, #112]	; (800c444 <xTaskResumeAll+0x130>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d010      	beq.n	800c3fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c3dc:	f000 f846 	bl	800c46c <xTaskIncrementTick>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d002      	beq.n	800c3ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c3e6:	4b16      	ldr	r3, [pc, #88]	; (800c440 <xTaskResumeAll+0x12c>)
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	3b01      	subs	r3, #1
 800c3f0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d1f1      	bne.n	800c3dc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800c3f8:	4b12      	ldr	r3, [pc, #72]	; (800c444 <xTaskResumeAll+0x130>)
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c3fe:	4b10      	ldr	r3, [pc, #64]	; (800c440 <xTaskResumeAll+0x12c>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d009      	beq.n	800c41a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c406:	2301      	movs	r3, #1
 800c408:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c40a:	4b0f      	ldr	r3, [pc, #60]	; (800c448 <xTaskResumeAll+0x134>)
 800c40c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c410:	601a      	str	r2, [r3, #0]
 800c412:	f3bf 8f4f 	dsb	sy
 800c416:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c41a:	f001 fbd5 	bl	800dbc8 <vPortExitCritical>

	return xAlreadyYielded;
 800c41e:	68bb      	ldr	r3, [r7, #8]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3710      	adds	r7, #16
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}
 800c428:	20002ca8 	.word	0x20002ca8
 800c42c:	20002c80 	.word	0x20002c80
 800c430:	20002c40 	.word	0x20002c40
 800c434:	20002c88 	.word	0x20002c88
 800c438:	200027b0 	.word	0x200027b0
 800c43c:	200027ac 	.word	0x200027ac
 800c440:	20002c94 	.word	0x20002c94
 800c444:	20002c90 	.word	0x20002c90
 800c448:	e000ed04 	.word	0xe000ed04

0800c44c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c44c:	b480      	push	{r7}
 800c44e:	b083      	sub	sp, #12
 800c450:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c452:	4b05      	ldr	r3, [pc, #20]	; (800c468 <xTaskGetTickCount+0x1c>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c458:	687b      	ldr	r3, [r7, #4]
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	370c      	adds	r7, #12
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop
 800c468:	20002c84 	.word	0x20002c84

0800c46c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b086      	sub	sp, #24
 800c470:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c472:	2300      	movs	r3, #0
 800c474:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c476:	4b4e      	ldr	r3, [pc, #312]	; (800c5b0 <xTaskIncrementTick+0x144>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	f040 8088 	bne.w	800c590 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c480:	4b4c      	ldr	r3, [pc, #304]	; (800c5b4 <xTaskIncrementTick+0x148>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	3301      	adds	r3, #1
 800c486:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c488:	4a4a      	ldr	r2, [pc, #296]	; (800c5b4 <xTaskIncrementTick+0x148>)
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d11f      	bne.n	800c4d4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800c494:	4b48      	ldr	r3, [pc, #288]	; (800c5b8 <xTaskIncrementTick+0x14c>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d009      	beq.n	800c4b2 <xTaskIncrementTick+0x46>
 800c49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a2:	f383 8811 	msr	BASEPRI, r3
 800c4a6:	f3bf 8f6f 	isb	sy
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	603b      	str	r3, [r7, #0]
 800c4b0:	e7fe      	b.n	800c4b0 <xTaskIncrementTick+0x44>
 800c4b2:	4b41      	ldr	r3, [pc, #260]	; (800c5b8 <xTaskIncrementTick+0x14c>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	60fb      	str	r3, [r7, #12]
 800c4b8:	4b40      	ldr	r3, [pc, #256]	; (800c5bc <xTaskIncrementTick+0x150>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a3e      	ldr	r2, [pc, #248]	; (800c5b8 <xTaskIncrementTick+0x14c>)
 800c4be:	6013      	str	r3, [r2, #0]
 800c4c0:	4a3e      	ldr	r2, [pc, #248]	; (800c5bc <xTaskIncrementTick+0x150>)
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	6013      	str	r3, [r2, #0]
 800c4c6:	4b3e      	ldr	r3, [pc, #248]	; (800c5c0 <xTaskIncrementTick+0x154>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	4a3c      	ldr	r2, [pc, #240]	; (800c5c0 <xTaskIncrementTick+0x154>)
 800c4ce:	6013      	str	r3, [r2, #0]
 800c4d0:	f000 faec 	bl	800caac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c4d4:	4b3b      	ldr	r3, [pc, #236]	; (800c5c4 <xTaskIncrementTick+0x158>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	693a      	ldr	r2, [r7, #16]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d349      	bcc.n	800c572 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4de:	4b36      	ldr	r3, [pc, #216]	; (800c5b8 <xTaskIncrementTick+0x14c>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d104      	bne.n	800c4f2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4e8:	4b36      	ldr	r3, [pc, #216]	; (800c5c4 <xTaskIncrementTick+0x158>)
 800c4ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ee:	601a      	str	r2, [r3, #0]
					break;
 800c4f0:	e03f      	b.n	800c572 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4f2:	4b31      	ldr	r3, [pc, #196]	; (800c5b8 <xTaskIncrementTick+0x14c>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	68db      	ldr	r3, [r3, #12]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c502:	693a      	ldr	r2, [r7, #16]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	429a      	cmp	r2, r3
 800c508:	d203      	bcs.n	800c512 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c50a:	4a2e      	ldr	r2, [pc, #184]	; (800c5c4 <xTaskIncrementTick+0x158>)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c510:	e02f      	b.n	800c572 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	3304      	adds	r3, #4
 800c516:	4618      	mov	r0, r3
 800c518:	f7fe fbb4 	bl	800ac84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c520:	2b00      	cmp	r3, #0
 800c522:	d004      	beq.n	800c52e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	3318      	adds	r3, #24
 800c528:	4618      	mov	r0, r3
 800c52a:	f7fe fbab 	bl	800ac84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c532:	4b25      	ldr	r3, [pc, #148]	; (800c5c8 <xTaskIncrementTick+0x15c>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	429a      	cmp	r2, r3
 800c538:	d903      	bls.n	800c542 <xTaskIncrementTick+0xd6>
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c53e:	4a22      	ldr	r2, [pc, #136]	; (800c5c8 <xTaskIncrementTick+0x15c>)
 800c540:	6013      	str	r3, [r2, #0]
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c546:	4613      	mov	r3, r2
 800c548:	009b      	lsls	r3, r3, #2
 800c54a:	4413      	add	r3, r2
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	4a1f      	ldr	r2, [pc, #124]	; (800c5cc <xTaskIncrementTick+0x160>)
 800c550:	441a      	add	r2, r3
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	3304      	adds	r3, #4
 800c556:	4619      	mov	r1, r3
 800c558:	4610      	mov	r0, r2
 800c55a:	f7fe fb36 	bl	800abca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c562:	4b1b      	ldr	r3, [pc, #108]	; (800c5d0 <xTaskIncrementTick+0x164>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c568:	429a      	cmp	r2, r3
 800c56a:	d3b8      	bcc.n	800c4de <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800c56c:	2301      	movs	r3, #1
 800c56e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c570:	e7b5      	b.n	800c4de <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c572:	4b17      	ldr	r3, [pc, #92]	; (800c5d0 <xTaskIncrementTick+0x164>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c578:	4914      	ldr	r1, [pc, #80]	; (800c5cc <xTaskIncrementTick+0x160>)
 800c57a:	4613      	mov	r3, r2
 800c57c:	009b      	lsls	r3, r3, #2
 800c57e:	4413      	add	r3, r2
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	440b      	add	r3, r1
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2b01      	cmp	r3, #1
 800c588:	d907      	bls.n	800c59a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800c58a:	2301      	movs	r3, #1
 800c58c:	617b      	str	r3, [r7, #20]
 800c58e:	e004      	b.n	800c59a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c590:	4b10      	ldr	r3, [pc, #64]	; (800c5d4 <xTaskIncrementTick+0x168>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	3301      	adds	r3, #1
 800c596:	4a0f      	ldr	r2, [pc, #60]	; (800c5d4 <xTaskIncrementTick+0x168>)
 800c598:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c59a:	4b0f      	ldr	r3, [pc, #60]	; (800c5d8 <xTaskIncrementTick+0x16c>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d001      	beq.n	800c5a6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c5a6:	697b      	ldr	r3, [r7, #20]
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3718      	adds	r7, #24
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	20002ca8 	.word	0x20002ca8
 800c5b4:	20002c84 	.word	0x20002c84
 800c5b8:	20002c38 	.word	0x20002c38
 800c5bc:	20002c3c 	.word	0x20002c3c
 800c5c0:	20002c98 	.word	0x20002c98
 800c5c4:	20002ca0 	.word	0x20002ca0
 800c5c8:	20002c88 	.word	0x20002c88
 800c5cc:	200027b0 	.word	0x200027b0
 800c5d0:	200027ac 	.word	0x200027ac
 800c5d4:	20002c90 	.word	0x20002c90
 800c5d8:	20002c94 	.word	0x20002c94

0800c5dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b085      	sub	sp, #20
 800c5e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c5e2:	4b27      	ldr	r3, [pc, #156]	; (800c680 <vTaskSwitchContext+0xa4>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d003      	beq.n	800c5f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c5ea:	4b26      	ldr	r3, [pc, #152]	; (800c684 <vTaskSwitchContext+0xa8>)
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c5f0:	e040      	b.n	800c674 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800c5f2:	4b24      	ldr	r3, [pc, #144]	; (800c684 <vTaskSwitchContext+0xa8>)
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5f8:	4b23      	ldr	r3, [pc, #140]	; (800c688 <vTaskSwitchContext+0xac>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	60fb      	str	r3, [r7, #12]
 800c5fe:	e00f      	b.n	800c620 <vTaskSwitchContext+0x44>
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d109      	bne.n	800c61a <vTaskSwitchContext+0x3e>
 800c606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60a:	f383 8811 	msr	BASEPRI, r3
 800c60e:	f3bf 8f6f 	isb	sy
 800c612:	f3bf 8f4f 	dsb	sy
 800c616:	607b      	str	r3, [r7, #4]
 800c618:	e7fe      	b.n	800c618 <vTaskSwitchContext+0x3c>
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	3b01      	subs	r3, #1
 800c61e:	60fb      	str	r3, [r7, #12]
 800c620:	491a      	ldr	r1, [pc, #104]	; (800c68c <vTaskSwitchContext+0xb0>)
 800c622:	68fa      	ldr	r2, [r7, #12]
 800c624:	4613      	mov	r3, r2
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	4413      	add	r3, r2
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	440b      	add	r3, r1
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d0e5      	beq.n	800c600 <vTaskSwitchContext+0x24>
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	4613      	mov	r3, r2
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	4413      	add	r3, r2
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	4a13      	ldr	r2, [pc, #76]	; (800c68c <vTaskSwitchContext+0xb0>)
 800c640:	4413      	add	r3, r2
 800c642:	60bb      	str	r3, [r7, #8]
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	685a      	ldr	r2, [r3, #4]
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	605a      	str	r2, [r3, #4]
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	685a      	ldr	r2, [r3, #4]
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	3308      	adds	r3, #8
 800c656:	429a      	cmp	r2, r3
 800c658:	d104      	bne.n	800c664 <vTaskSwitchContext+0x88>
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	685a      	ldr	r2, [r3, #4]
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	605a      	str	r2, [r3, #4]
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	68db      	ldr	r3, [r3, #12]
 800c66a:	4a09      	ldr	r2, [pc, #36]	; (800c690 <vTaskSwitchContext+0xb4>)
 800c66c:	6013      	str	r3, [r2, #0]
 800c66e:	4a06      	ldr	r2, [pc, #24]	; (800c688 <vTaskSwitchContext+0xac>)
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	6013      	str	r3, [r2, #0]
}
 800c674:	bf00      	nop
 800c676:	3714      	adds	r7, #20
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr
 800c680:	20002ca8 	.word	0x20002ca8
 800c684:	20002c94 	.word	0x20002c94
 800c688:	20002c88 	.word	0x20002c88
 800c68c:	200027b0 	.word	0x200027b0
 800c690:	200027ac 	.word	0x200027ac

0800c694 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d109      	bne.n	800c6b8 <vTaskPlaceOnEventList+0x24>
 800c6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a8:	f383 8811 	msr	BASEPRI, r3
 800c6ac:	f3bf 8f6f 	isb	sy
 800c6b0:	f3bf 8f4f 	dsb	sy
 800c6b4:	60fb      	str	r3, [r7, #12]
 800c6b6:	e7fe      	b.n	800c6b6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c6b8:	4b07      	ldr	r3, [pc, #28]	; (800c6d8 <vTaskPlaceOnEventList+0x44>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	3318      	adds	r3, #24
 800c6be:	4619      	mov	r1, r3
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f7fe faa6 	bl	800ac12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c6c6:	2101      	movs	r1, #1
 800c6c8:	6838      	ldr	r0, [r7, #0]
 800c6ca:	f000 fd8d 	bl	800d1e8 <prvAddCurrentTaskToDelayedList>
}
 800c6ce:	bf00      	nop
 800c6d0:	3710      	adds	r7, #16
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	200027ac 	.word	0x200027ac

0800c6dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b086      	sub	sp, #24
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d109      	bne.n	800c702 <vTaskPlaceOnEventListRestricted+0x26>
 800c6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f2:	f383 8811 	msr	BASEPRI, r3
 800c6f6:	f3bf 8f6f 	isb	sy
 800c6fa:	f3bf 8f4f 	dsb	sy
 800c6fe:	617b      	str	r3, [r7, #20]
 800c700:	e7fe      	b.n	800c700 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c702:	4b0a      	ldr	r3, [pc, #40]	; (800c72c <vTaskPlaceOnEventListRestricted+0x50>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	3318      	adds	r3, #24
 800c708:	4619      	mov	r1, r3
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f7fe fa5d 	bl	800abca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d002      	beq.n	800c71c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800c716:	f04f 33ff 	mov.w	r3, #4294967295
 800c71a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c71c:	6879      	ldr	r1, [r7, #4]
 800c71e:	68b8      	ldr	r0, [r7, #8]
 800c720:	f000 fd62 	bl	800d1e8 <prvAddCurrentTaskToDelayedList>
	}
 800c724:	bf00      	nop
 800c726:	3718      	adds	r7, #24
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	200027ac 	.word	0x200027ac

0800c730 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b086      	sub	sp, #24
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d109      	bne.n	800c75a <xTaskRemoveFromEventList+0x2a>
 800c746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74a:	f383 8811 	msr	BASEPRI, r3
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	60fb      	str	r3, [r7, #12]
 800c758:	e7fe      	b.n	800c758 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	3318      	adds	r3, #24
 800c75e:	4618      	mov	r0, r3
 800c760:	f7fe fa90 	bl	800ac84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c764:	4b1e      	ldr	r3, [pc, #120]	; (800c7e0 <xTaskRemoveFromEventList+0xb0>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d11f      	bne.n	800c7ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	3304      	adds	r3, #4
 800c770:	4618      	mov	r0, r3
 800c772:	f7fe fa87 	bl	800ac84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c77a:	4b1a      	ldr	r3, [pc, #104]	; (800c7e4 <xTaskRemoveFromEventList+0xb4>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d903      	bls.n	800c78a <xTaskRemoveFromEventList+0x5a>
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c786:	4a17      	ldr	r2, [pc, #92]	; (800c7e4 <xTaskRemoveFromEventList+0xb4>)
 800c788:	6013      	str	r3, [r2, #0]
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c78e:	4613      	mov	r3, r2
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	4413      	add	r3, r2
 800c794:	009b      	lsls	r3, r3, #2
 800c796:	4a14      	ldr	r2, [pc, #80]	; (800c7e8 <xTaskRemoveFromEventList+0xb8>)
 800c798:	441a      	add	r2, r3
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	3304      	adds	r3, #4
 800c79e:	4619      	mov	r1, r3
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	f7fe fa12 	bl	800abca <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800c7a6:	f000 f981 	bl	800caac <prvResetNextTaskUnblockTime>
 800c7aa:	e005      	b.n	800c7b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	3318      	adds	r3, #24
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	480e      	ldr	r0, [pc, #56]	; (800c7ec <xTaskRemoveFromEventList+0xbc>)
 800c7b4:	f7fe fa09 	bl	800abca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7bc:	4b0c      	ldr	r3, [pc, #48]	; (800c7f0 <xTaskRemoveFromEventList+0xc0>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d905      	bls.n	800c7d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c7ca:	4b0a      	ldr	r3, [pc, #40]	; (800c7f4 <xTaskRemoveFromEventList+0xc4>)
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	601a      	str	r2, [r3, #0]
 800c7d0:	e001      	b.n	800c7d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c7d6:	697b      	ldr	r3, [r7, #20]
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3718      	adds	r7, #24
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}
 800c7e0:	20002ca8 	.word	0x20002ca8
 800c7e4:	20002c88 	.word	0x20002c88
 800c7e8:	200027b0 	.word	0x200027b0
 800c7ec:	20002c40 	.word	0x20002c40
 800c7f0:	200027ac 	.word	0x200027ac
 800c7f4:	20002c94 	.word	0x20002c94

0800c7f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c800:	4b06      	ldr	r3, [pc, #24]	; (800c81c <vTaskInternalSetTimeOutState+0x24>)
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c808:	4b05      	ldr	r3, [pc, #20]	; (800c820 <vTaskInternalSetTimeOutState+0x28>)
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	605a      	str	r2, [r3, #4]
}
 800c810:	bf00      	nop
 800c812:	370c      	adds	r7, #12
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr
 800c81c:	20002c98 	.word	0x20002c98
 800c820:	20002c84 	.word	0x20002c84

0800c824 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b088      	sub	sp, #32
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d109      	bne.n	800c848 <xTaskCheckForTimeOut+0x24>
 800c834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c838:	f383 8811 	msr	BASEPRI, r3
 800c83c:	f3bf 8f6f 	isb	sy
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	613b      	str	r3, [r7, #16]
 800c846:	e7fe      	b.n	800c846 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d109      	bne.n	800c862 <xTaskCheckForTimeOut+0x3e>
 800c84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c852:	f383 8811 	msr	BASEPRI, r3
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	60fb      	str	r3, [r7, #12]
 800c860:	e7fe      	b.n	800c860 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800c862:	f001 f983 	bl	800db6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c866:	4b1d      	ldr	r3, [pc, #116]	; (800c8dc <xTaskCheckForTimeOut+0xb8>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	69ba      	ldr	r2, [r7, #24]
 800c872:	1ad3      	subs	r3, r2, r3
 800c874:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c87e:	d102      	bne.n	800c886 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c880:	2300      	movs	r3, #0
 800c882:	61fb      	str	r3, [r7, #28]
 800c884:	e023      	b.n	800c8ce <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	4b15      	ldr	r3, [pc, #84]	; (800c8e0 <xTaskCheckForTimeOut+0xbc>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d007      	beq.n	800c8a2 <xTaskCheckForTimeOut+0x7e>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	69ba      	ldr	r2, [r7, #24]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d302      	bcc.n	800c8a2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c89c:	2301      	movs	r3, #1
 800c89e:	61fb      	str	r3, [r7, #28]
 800c8a0:	e015      	b.n	800c8ce <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	697a      	ldr	r2, [r7, #20]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d20b      	bcs.n	800c8c4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	681a      	ldr	r2, [r3, #0]
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	1ad2      	subs	r2, r2, r3
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f7ff ff9d 	bl	800c7f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	61fb      	str	r3, [r7, #28]
 800c8c2:	e004      	b.n	800c8ce <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c8ce:	f001 f97b 	bl	800dbc8 <vPortExitCritical>

	return xReturn;
 800c8d2:	69fb      	ldr	r3, [r7, #28]
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3720      	adds	r7, #32
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	20002c84 	.word	0x20002c84
 800c8e0:	20002c98 	.word	0x20002c98

0800c8e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c8e8:	4b03      	ldr	r3, [pc, #12]	; (800c8f8 <vTaskMissedYield+0x14>)
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	601a      	str	r2, [r3, #0]
}
 800c8ee:	bf00      	nop
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr
 800c8f8:	20002c94 	.word	0x20002c94

0800c8fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c904:	f000 f878 	bl	800c9f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c908:	4b17      	ldr	r3, [pc, #92]	; (800c968 <prvIdleTask+0x6c>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d907      	bls.n	800c920 <prvIdleTask+0x24>
			{
				taskYIELD();
 800c910:	4b16      	ldr	r3, [pc, #88]	; (800c96c <prvIdleTask+0x70>)
 800c912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c916:	601a      	str	r2, [r3, #0]
 800c918:	f3bf 8f4f 	dsb	sy
 800c91c:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800c920:	f7ff fcc0 	bl	800c2a4 <prvGetExpectedIdleTime>
 800c924:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d9eb      	bls.n	800c904 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800c92c:	f7ff fcac 	bl	800c288 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800c930:	4b0f      	ldr	r3, [pc, #60]	; (800c970 <prvIdleTask+0x74>)
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	4b0f      	ldr	r3, [pc, #60]	; (800c974 <prvIdleTask+0x78>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d209      	bcs.n	800c950 <prvIdleTask+0x54>
 800c93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c940:	f383 8811 	msr	BASEPRI, r3
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	60bb      	str	r3, [r7, #8]
 800c94e:	e7fe      	b.n	800c94e <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800c950:	f7ff fca8 	bl	800c2a4 <prvGetExpectedIdleTime>
 800c954:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d902      	bls.n	800c962 <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800c95c:	68f8      	ldr	r0, [r7, #12]
 800c95e:	f7f4 fc4b 	bl	80011f8 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800c962:	f7ff fcd7 	bl	800c314 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800c966:	e7cd      	b.n	800c904 <prvIdleTask+0x8>
 800c968:	200027b0 	.word	0x200027b0
 800c96c:	e000ed04 	.word	0xe000ed04
 800c970:	20002ca0 	.word	0x20002ca0
 800c974:	20002c84 	.word	0x20002c84

0800c978 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c97e:	2300      	movs	r3, #0
 800c980:	607b      	str	r3, [r7, #4]
 800c982:	e00c      	b.n	800c99e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	4613      	mov	r3, r2
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	4413      	add	r3, r2
 800c98c:	009b      	lsls	r3, r3, #2
 800c98e:	4a12      	ldr	r2, [pc, #72]	; (800c9d8 <prvInitialiseTaskLists+0x60>)
 800c990:	4413      	add	r3, r2
 800c992:	4618      	mov	r0, r3
 800c994:	f7fe f8ec 	bl	800ab70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	3301      	adds	r3, #1
 800c99c:	607b      	str	r3, [r7, #4]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2b37      	cmp	r3, #55	; 0x37
 800c9a2:	d9ef      	bls.n	800c984 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c9a4:	480d      	ldr	r0, [pc, #52]	; (800c9dc <prvInitialiseTaskLists+0x64>)
 800c9a6:	f7fe f8e3 	bl	800ab70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c9aa:	480d      	ldr	r0, [pc, #52]	; (800c9e0 <prvInitialiseTaskLists+0x68>)
 800c9ac:	f7fe f8e0 	bl	800ab70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c9b0:	480c      	ldr	r0, [pc, #48]	; (800c9e4 <prvInitialiseTaskLists+0x6c>)
 800c9b2:	f7fe f8dd 	bl	800ab70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c9b6:	480c      	ldr	r0, [pc, #48]	; (800c9e8 <prvInitialiseTaskLists+0x70>)
 800c9b8:	f7fe f8da 	bl	800ab70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c9bc:	480b      	ldr	r0, [pc, #44]	; (800c9ec <prvInitialiseTaskLists+0x74>)
 800c9be:	f7fe f8d7 	bl	800ab70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c9c2:	4b0b      	ldr	r3, [pc, #44]	; (800c9f0 <prvInitialiseTaskLists+0x78>)
 800c9c4:	4a05      	ldr	r2, [pc, #20]	; (800c9dc <prvInitialiseTaskLists+0x64>)
 800c9c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c9c8:	4b0a      	ldr	r3, [pc, #40]	; (800c9f4 <prvInitialiseTaskLists+0x7c>)
 800c9ca:	4a05      	ldr	r2, [pc, #20]	; (800c9e0 <prvInitialiseTaskLists+0x68>)
 800c9cc:	601a      	str	r2, [r3, #0]
}
 800c9ce:	bf00      	nop
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	200027b0 	.word	0x200027b0
 800c9dc:	20002c10 	.word	0x20002c10
 800c9e0:	20002c24 	.word	0x20002c24
 800c9e4:	20002c40 	.word	0x20002c40
 800c9e8:	20002c54 	.word	0x20002c54
 800c9ec:	20002c6c 	.word	0x20002c6c
 800c9f0:	20002c38 	.word	0x20002c38
 800c9f4:	20002c3c 	.word	0x20002c3c

0800c9f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c9fe:	e019      	b.n	800ca34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ca00:	f001 f8b4 	bl	800db6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca04:	4b0f      	ldr	r3, [pc, #60]	; (800ca44 <prvCheckTasksWaitingTermination+0x4c>)
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	3304      	adds	r3, #4
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7fe f937 	bl	800ac84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ca16:	4b0c      	ldr	r3, [pc, #48]	; (800ca48 <prvCheckTasksWaitingTermination+0x50>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	3b01      	subs	r3, #1
 800ca1c:	4a0a      	ldr	r2, [pc, #40]	; (800ca48 <prvCheckTasksWaitingTermination+0x50>)
 800ca1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ca20:	4b0a      	ldr	r3, [pc, #40]	; (800ca4c <prvCheckTasksWaitingTermination+0x54>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	3b01      	subs	r3, #1
 800ca26:	4a09      	ldr	r2, [pc, #36]	; (800ca4c <prvCheckTasksWaitingTermination+0x54>)
 800ca28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ca2a:	f001 f8cd 	bl	800dbc8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 f80e 	bl	800ca50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca34:	4b05      	ldr	r3, [pc, #20]	; (800ca4c <prvCheckTasksWaitingTermination+0x54>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d1e1      	bne.n	800ca00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ca3c:	bf00      	nop
 800ca3e:	3708      	adds	r7, #8
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	20002c54 	.word	0x20002c54
 800ca48:	20002c80 	.word	0x20002c80
 800ca4c:	20002c68 	.word	0x20002c68

0800ca50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b084      	sub	sp, #16
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d108      	bne.n	800ca74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca66:	4618      	mov	r0, r3
 800ca68:	f001 fa5c 	bl	800df24 <vPortFree>
				vPortFree( pxTCB );
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f001 fa59 	bl	800df24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ca72:	e017      	b.n	800caa4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ca7a:	2b01      	cmp	r3, #1
 800ca7c:	d103      	bne.n	800ca86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f001 fa50 	bl	800df24 <vPortFree>
	}
 800ca84:	e00e      	b.n	800caa4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ca8c:	2b02      	cmp	r3, #2
 800ca8e:	d009      	beq.n	800caa4 <prvDeleteTCB+0x54>
 800ca90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca94:	f383 8811 	msr	BASEPRI, r3
 800ca98:	f3bf 8f6f 	isb	sy
 800ca9c:	f3bf 8f4f 	dsb	sy
 800caa0:	60fb      	str	r3, [r7, #12]
 800caa2:	e7fe      	b.n	800caa2 <prvDeleteTCB+0x52>
	}
 800caa4:	bf00      	nop
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cab2:	4b0c      	ldr	r3, [pc, #48]	; (800cae4 <prvResetNextTaskUnblockTime+0x38>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d104      	bne.n	800cac6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cabc:	4b0a      	ldr	r3, [pc, #40]	; (800cae8 <prvResetNextTaskUnblockTime+0x3c>)
 800cabe:	f04f 32ff 	mov.w	r2, #4294967295
 800cac2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cac4:	e008      	b.n	800cad8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cac6:	4b07      	ldr	r3, [pc, #28]	; (800cae4 <prvResetNextTaskUnblockTime+0x38>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	68db      	ldr	r3, [r3, #12]
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	4a04      	ldr	r2, [pc, #16]	; (800cae8 <prvResetNextTaskUnblockTime+0x3c>)
 800cad6:	6013      	str	r3, [r2, #0]
}
 800cad8:	bf00      	nop
 800cada:	370c      	adds	r7, #12
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr
 800cae4:	20002c38 	.word	0x20002c38
 800cae8:	20002ca0 	.word	0x20002ca0

0800caec <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800caf2:	4b05      	ldr	r3, [pc, #20]	; (800cb08 <xTaskGetCurrentTaskHandle+0x1c>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800caf8:	687b      	ldr	r3, [r7, #4]
	}
 800cafa:	4618      	mov	r0, r3
 800cafc:	370c      	adds	r7, #12
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr
 800cb06:	bf00      	nop
 800cb08:	200027ac 	.word	0x200027ac

0800cb0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cb12:	4b0b      	ldr	r3, [pc, #44]	; (800cb40 <xTaskGetSchedulerState+0x34>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d102      	bne.n	800cb20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	607b      	str	r3, [r7, #4]
 800cb1e:	e008      	b.n	800cb32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb20:	4b08      	ldr	r3, [pc, #32]	; (800cb44 <xTaskGetSchedulerState+0x38>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d102      	bne.n	800cb2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cb28:	2302      	movs	r3, #2
 800cb2a:	607b      	str	r3, [r7, #4]
 800cb2c:	e001      	b.n	800cb32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cb32:	687b      	ldr	r3, [r7, #4]
	}
 800cb34:	4618      	mov	r0, r3
 800cb36:	370c      	adds	r7, #12
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr
 800cb40:	20002c8c 	.word	0x20002c8c
 800cb44:	20002ca8 	.word	0x20002ca8

0800cb48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cb54:	2300      	movs	r3, #0
 800cb56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d051      	beq.n	800cc02 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb62:	4b2a      	ldr	r3, [pc, #168]	; (800cc0c <xTaskPriorityInherit+0xc4>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d241      	bcs.n	800cbf0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	699b      	ldr	r3, [r3, #24]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	db06      	blt.n	800cb82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb74:	4b25      	ldr	r3, [pc, #148]	; (800cc0c <xTaskPriorityInherit+0xc4>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	6959      	ldr	r1, [r3, #20]
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb8a:	4613      	mov	r3, r2
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	4413      	add	r3, r2
 800cb90:	009b      	lsls	r3, r3, #2
 800cb92:	4a1f      	ldr	r2, [pc, #124]	; (800cc10 <xTaskPriorityInherit+0xc8>)
 800cb94:	4413      	add	r3, r2
 800cb96:	4299      	cmp	r1, r3
 800cb98:	d122      	bne.n	800cbe0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	3304      	adds	r3, #4
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fe f870 	bl	800ac84 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cba4:	4b19      	ldr	r3, [pc, #100]	; (800cc0c <xTaskPriorityInherit+0xc4>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbb2:	4b18      	ldr	r3, [pc, #96]	; (800cc14 <xTaskPriorityInherit+0xcc>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d903      	bls.n	800cbc2 <xTaskPriorityInherit+0x7a>
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbbe:	4a15      	ldr	r2, [pc, #84]	; (800cc14 <xTaskPriorityInherit+0xcc>)
 800cbc0:	6013      	str	r3, [r2, #0]
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	4413      	add	r3, r2
 800cbcc:	009b      	lsls	r3, r3, #2
 800cbce:	4a10      	ldr	r2, [pc, #64]	; (800cc10 <xTaskPriorityInherit+0xc8>)
 800cbd0:	441a      	add	r2, r3
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	3304      	adds	r3, #4
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	4610      	mov	r0, r2
 800cbda:	f7fd fff6 	bl	800abca <vListInsertEnd>
 800cbde:	e004      	b.n	800cbea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cbe0:	4b0a      	ldr	r3, [pc, #40]	; (800cc0c <xTaskPriorityInherit+0xc4>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cbea:	2301      	movs	r3, #1
 800cbec:	60fb      	str	r3, [r7, #12]
 800cbee:	e008      	b.n	800cc02 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cbf4:	4b05      	ldr	r3, [pc, #20]	; (800cc0c <xTaskPriorityInherit+0xc4>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d201      	bcs.n	800cc02 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc02:	68fb      	ldr	r3, [r7, #12]
	}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3710      	adds	r7, #16
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	200027ac 	.word	0x200027ac
 800cc10:	200027b0 	.word	0x200027b0
 800cc14:	20002c88 	.word	0x20002c88

0800cc18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b086      	sub	sp, #24
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cc24:	2300      	movs	r3, #0
 800cc26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d054      	beq.n	800ccd8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cc2e:	4b2d      	ldr	r3, [pc, #180]	; (800cce4 <xTaskPriorityDisinherit+0xcc>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	693a      	ldr	r2, [r7, #16]
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d009      	beq.n	800cc4c <xTaskPriorityDisinherit+0x34>
 800cc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3c:	f383 8811 	msr	BASEPRI, r3
 800cc40:	f3bf 8f6f 	isb	sy
 800cc44:	f3bf 8f4f 	dsb	sy
 800cc48:	60fb      	str	r3, [r7, #12]
 800cc4a:	e7fe      	b.n	800cc4a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d109      	bne.n	800cc68 <xTaskPriorityDisinherit+0x50>
 800cc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc58:	f383 8811 	msr	BASEPRI, r3
 800cc5c:	f3bf 8f6f 	isb	sy
 800cc60:	f3bf 8f4f 	dsb	sy
 800cc64:	60bb      	str	r3, [r7, #8]
 800cc66:	e7fe      	b.n	800cc66 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc6c:	1e5a      	subs	r2, r3, #1
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d02c      	beq.n	800ccd8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d128      	bne.n	800ccd8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	3304      	adds	r3, #4
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7fd fffa 	bl	800ac84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cca8:	4b0f      	ldr	r3, [pc, #60]	; (800cce8 <xTaskPriorityDisinherit+0xd0>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d903      	bls.n	800ccb8 <xTaskPriorityDisinherit+0xa0>
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccb4:	4a0c      	ldr	r2, [pc, #48]	; (800cce8 <xTaskPriorityDisinherit+0xd0>)
 800ccb6:	6013      	str	r3, [r2, #0]
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	4413      	add	r3, r2
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	4a09      	ldr	r2, [pc, #36]	; (800ccec <xTaskPriorityDisinherit+0xd4>)
 800ccc6:	441a      	add	r2, r3
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	3304      	adds	r3, #4
 800cccc:	4619      	mov	r1, r3
 800ccce:	4610      	mov	r0, r2
 800ccd0:	f7fd ff7b 	bl	800abca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ccd8:	697b      	ldr	r3, [r7, #20]
	}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3718      	adds	r7, #24
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	200027ac 	.word	0x200027ac
 800cce8:	20002c88 	.word	0x20002c88
 800ccec:	200027b0 	.word	0x200027b0

0800ccf0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b088      	sub	sp, #32
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d068      	beq.n	800cdda <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d109      	bne.n	800cd24 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800cd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	60fb      	str	r3, [r7, #12]
 800cd22:	e7fe      	b.n	800cd22 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cd24:	69bb      	ldr	r3, [r7, #24]
 800cd26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd28:	683a      	ldr	r2, [r7, #0]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d902      	bls.n	800cd34 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	61fb      	str	r3, [r7, #28]
 800cd32:	e002      	b.n	800cd3a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd38:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd3e:	69fa      	ldr	r2, [r7, #28]
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d04a      	beq.n	800cdda <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cd44:	69bb      	ldr	r3, [r7, #24]
 800cd46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd48:	697a      	ldr	r2, [r7, #20]
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d145      	bne.n	800cdda <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cd4e:	4b25      	ldr	r3, [pc, #148]	; (800cde4 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	69ba      	ldr	r2, [r7, #24]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d109      	bne.n	800cd6c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800cd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd5c:	f383 8811 	msr	BASEPRI, r3
 800cd60:	f3bf 8f6f 	isb	sy
 800cd64:	f3bf 8f4f 	dsb	sy
 800cd68:	60bb      	str	r3, [r7, #8]
 800cd6a:	e7fe      	b.n	800cd6a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cd6c:	69bb      	ldr	r3, [r7, #24]
 800cd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd70:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cd72:	69bb      	ldr	r3, [r7, #24]
 800cd74:	69fa      	ldr	r2, [r7, #28]
 800cd76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cd78:	69bb      	ldr	r3, [r7, #24]
 800cd7a:	699b      	ldr	r3, [r3, #24]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	db04      	blt.n	800cd8a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd80:	69fb      	ldr	r3, [r7, #28]
 800cd82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cd86:	69bb      	ldr	r3, [r7, #24]
 800cd88:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cd8a:	69bb      	ldr	r3, [r7, #24]
 800cd8c:	6959      	ldr	r1, [r3, #20]
 800cd8e:	693a      	ldr	r2, [r7, #16]
 800cd90:	4613      	mov	r3, r2
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	4413      	add	r3, r2
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	4a13      	ldr	r2, [pc, #76]	; (800cde8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800cd9a:	4413      	add	r3, r2
 800cd9c:	4299      	cmp	r1, r3
 800cd9e:	d11c      	bne.n	800cdda <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cda0:	69bb      	ldr	r3, [r7, #24]
 800cda2:	3304      	adds	r3, #4
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7fd ff6d 	bl	800ac84 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cdaa:	69bb      	ldr	r3, [r7, #24]
 800cdac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdae:	4b0f      	ldr	r3, [pc, #60]	; (800cdec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d903      	bls.n	800cdbe <vTaskPriorityDisinheritAfterTimeout+0xce>
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdba:	4a0c      	ldr	r2, [pc, #48]	; (800cdec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800cdbc:	6013      	str	r3, [r2, #0]
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdc2:	4613      	mov	r3, r2
 800cdc4:	009b      	lsls	r3, r3, #2
 800cdc6:	4413      	add	r3, r2
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	4a07      	ldr	r2, [pc, #28]	; (800cde8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800cdcc:	441a      	add	r2, r3
 800cdce:	69bb      	ldr	r3, [r7, #24]
 800cdd0:	3304      	adds	r3, #4
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	4610      	mov	r0, r2
 800cdd6:	f7fd fef8 	bl	800abca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cdda:	bf00      	nop
 800cddc:	3720      	adds	r7, #32
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	200027ac 	.word	0x200027ac
 800cde8:	200027b0 	.word	0x200027b0
 800cdec:	20002c88 	.word	0x20002c88

0800cdf0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cdf0:	b480      	push	{r7}
 800cdf2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cdf4:	4b07      	ldr	r3, [pc, #28]	; (800ce14 <pvTaskIncrementMutexHeldCount+0x24>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d004      	beq.n	800ce06 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cdfc:	4b05      	ldr	r3, [pc, #20]	; (800ce14 <pvTaskIncrementMutexHeldCount+0x24>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce02:	3201      	adds	r2, #1
 800ce04:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ce06:	4b03      	ldr	r3, [pc, #12]	; (800ce14 <pvTaskIncrementMutexHeldCount+0x24>)
 800ce08:	681b      	ldr	r3, [r3, #0]
	}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr
 800ce14:	200027ac 	.word	0x200027ac

0800ce18 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b086      	sub	sp, #24
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	607a      	str	r2, [r7, #4]
 800ce24:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ce26:	f000 fea1 	bl	800db6c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ce2a:	4b26      	ldr	r3, [pc, #152]	; (800cec4 <xTaskNotifyWait+0xac>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	2b02      	cmp	r3, #2
 800ce36:	d01a      	beq.n	800ce6e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ce38:	4b22      	ldr	r3, [pc, #136]	; (800cec4 <xTaskNotifyWait+0xac>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ce3e:	68fa      	ldr	r2, [r7, #12]
 800ce40:	43d2      	mvns	r2, r2
 800ce42:	400a      	ands	r2, r1
 800ce44:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ce46:	4b1f      	ldr	r3, [pc, #124]	; (800cec4 <xTaskNotifyWait+0xac>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d00b      	beq.n	800ce6e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce56:	2101      	movs	r1, #1
 800ce58:	6838      	ldr	r0, [r7, #0]
 800ce5a:	f000 f9c5 	bl	800d1e8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ce5e:	4b1a      	ldr	r3, [pc, #104]	; (800cec8 <xTaskNotifyWait+0xb0>)
 800ce60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce64:	601a      	str	r2, [r3, #0]
 800ce66:	f3bf 8f4f 	dsb	sy
 800ce6a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ce6e:	f000 feab 	bl	800dbc8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ce72:	f000 fe7b 	bl	800db6c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d004      	beq.n	800ce86 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ce7c:	4b11      	ldr	r3, [pc, #68]	; (800cec4 <xTaskNotifyWait+0xac>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ce86:	4b0f      	ldr	r3, [pc, #60]	; (800cec4 <xTaskNotifyWait+0xac>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	2b02      	cmp	r3, #2
 800ce92:	d002      	beq.n	800ce9a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ce94:	2300      	movs	r3, #0
 800ce96:	617b      	str	r3, [r7, #20]
 800ce98:	e008      	b.n	800ceac <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ce9a:	4b0a      	ldr	r3, [pc, #40]	; (800cec4 <xTaskNotifyWait+0xac>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cea0:	68ba      	ldr	r2, [r7, #8]
 800cea2:	43d2      	mvns	r2, r2
 800cea4:	400a      	ands	r2, r1
 800cea6:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800cea8:	2301      	movs	r3, #1
 800ceaa:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ceac:	4b05      	ldr	r3, [pc, #20]	; (800cec4 <xTaskNotifyWait+0xac>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800ceb6:	f000 fe87 	bl	800dbc8 <vPortExitCritical>

		return xReturn;
 800ceba:	697b      	ldr	r3, [r7, #20]
	}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3718      	adds	r7, #24
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	200027ac 	.word	0x200027ac
 800cec8:	e000ed04 	.word	0xe000ed04

0800cecc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b08a      	sub	sp, #40	; 0x28
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	60f8      	str	r0, [r7, #12]
 800ced4:	60b9      	str	r1, [r7, #8]
 800ced6:	603b      	str	r3, [r7, #0]
 800ced8:	4613      	mov	r3, r2
 800ceda:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800cedc:	2301      	movs	r3, #1
 800cede:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d109      	bne.n	800cefa <xTaskGenericNotify+0x2e>
 800cee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceea:	f383 8811 	msr	BASEPRI, r3
 800ceee:	f3bf 8f6f 	isb	sy
 800cef2:	f3bf 8f4f 	dsb	sy
 800cef6:	61bb      	str	r3, [r7, #24]
 800cef8:	e7fe      	b.n	800cef8 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800cefe:	f000 fe35 	bl	800db6c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d003      	beq.n	800cf10 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cf08:	6a3b      	ldr	r3, [r7, #32]
 800cf0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cf10:	6a3b      	ldr	r3, [r7, #32]
 800cf12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800cf16:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cf18:	6a3b      	ldr	r3, [r7, #32]
 800cf1a:	2202      	movs	r2, #2
 800cf1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800cf20:	79fb      	ldrb	r3, [r7, #7]
 800cf22:	2b04      	cmp	r3, #4
 800cf24:	d827      	bhi.n	800cf76 <xTaskGenericNotify+0xaa>
 800cf26:	a201      	add	r2, pc, #4	; (adr r2, 800cf2c <xTaskGenericNotify+0x60>)
 800cf28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf2c:	0800cf95 	.word	0x0800cf95
 800cf30:	0800cf41 	.word	0x0800cf41
 800cf34:	0800cf4f 	.word	0x0800cf4f
 800cf38:	0800cf5b 	.word	0x0800cf5b
 800cf3c:	0800cf63 	.word	0x0800cf63
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800cf40:	6a3b      	ldr	r3, [r7, #32]
 800cf42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	431a      	orrs	r2, r3
 800cf48:	6a3b      	ldr	r3, [r7, #32]
 800cf4a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800cf4c:	e025      	b.n	800cf9a <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800cf4e:	6a3b      	ldr	r3, [r7, #32]
 800cf50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf52:	1c5a      	adds	r2, r3, #1
 800cf54:	6a3b      	ldr	r3, [r7, #32]
 800cf56:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800cf58:	e01f      	b.n	800cf9a <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800cf5a:	6a3b      	ldr	r3, [r7, #32]
 800cf5c:	68ba      	ldr	r2, [r7, #8]
 800cf5e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800cf60:	e01b      	b.n	800cf9a <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800cf62:	7ffb      	ldrb	r3, [r7, #31]
 800cf64:	2b02      	cmp	r3, #2
 800cf66:	d003      	beq.n	800cf70 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800cf68:	6a3b      	ldr	r3, [r7, #32]
 800cf6a:	68ba      	ldr	r2, [r7, #8]
 800cf6c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cf6e:	e014      	b.n	800cf9a <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 800cf70:	2300      	movs	r3, #0
 800cf72:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800cf74:	e011      	b.n	800cf9a <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800cf76:	6a3b      	ldr	r3, [r7, #32]
 800cf78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf7e:	d00b      	beq.n	800cf98 <xTaskGenericNotify+0xcc>
 800cf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf84:	f383 8811 	msr	BASEPRI, r3
 800cf88:	f3bf 8f6f 	isb	sy
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	617b      	str	r3, [r7, #20]
 800cf92:	e7fe      	b.n	800cf92 <xTaskGenericNotify+0xc6>
					break;
 800cf94:	bf00      	nop
 800cf96:	e000      	b.n	800cf9a <xTaskGenericNotify+0xce>

					break;
 800cf98:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cf9a:	7ffb      	ldrb	r3, [r7, #31]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d13b      	bne.n	800d018 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfa0:	6a3b      	ldr	r3, [r7, #32]
 800cfa2:	3304      	adds	r3, #4
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7fd fe6d 	bl	800ac84 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800cfaa:	6a3b      	ldr	r3, [r7, #32]
 800cfac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfae:	4b1e      	ldr	r3, [pc, #120]	; (800d028 <xTaskGenericNotify+0x15c>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d903      	bls.n	800cfbe <xTaskGenericNotify+0xf2>
 800cfb6:	6a3b      	ldr	r3, [r7, #32]
 800cfb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfba:	4a1b      	ldr	r2, [pc, #108]	; (800d028 <xTaskGenericNotify+0x15c>)
 800cfbc:	6013      	str	r3, [r2, #0]
 800cfbe:	6a3b      	ldr	r3, [r7, #32]
 800cfc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfc2:	4613      	mov	r3, r2
 800cfc4:	009b      	lsls	r3, r3, #2
 800cfc6:	4413      	add	r3, r2
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	4a18      	ldr	r2, [pc, #96]	; (800d02c <xTaskGenericNotify+0x160>)
 800cfcc:	441a      	add	r2, r3
 800cfce:	6a3b      	ldr	r3, [r7, #32]
 800cfd0:	3304      	adds	r3, #4
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	4610      	mov	r0, r2
 800cfd6:	f7fd fdf8 	bl	800abca <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cfda:	6a3b      	ldr	r3, [r7, #32]
 800cfdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d009      	beq.n	800cff6 <xTaskGenericNotify+0x12a>
 800cfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe6:	f383 8811 	msr	BASEPRI, r3
 800cfea:	f3bf 8f6f 	isb	sy
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	613b      	str	r3, [r7, #16]
 800cff4:	e7fe      	b.n	800cff4 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 800cff6:	f7ff fd59 	bl	800caac <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cffa:	6a3b      	ldr	r3, [r7, #32]
 800cffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cffe:	4b0c      	ldr	r3, [pc, #48]	; (800d030 <xTaskGenericNotify+0x164>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d004:	429a      	cmp	r2, r3
 800d006:	d907      	bls.n	800d018 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800d008:	4b0a      	ldr	r3, [pc, #40]	; (800d034 <xTaskGenericNotify+0x168>)
 800d00a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d00e:	601a      	str	r2, [r3, #0]
 800d010:	f3bf 8f4f 	dsb	sy
 800d014:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d018:	f000 fdd6 	bl	800dbc8 <vPortExitCritical>

		return xReturn;
 800d01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d01e:	4618      	mov	r0, r3
 800d020:	3728      	adds	r7, #40	; 0x28
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	20002c88 	.word	0x20002c88
 800d02c:	200027b0 	.word	0x200027b0
 800d030:	200027ac 	.word	0x200027ac
 800d034:	e000ed04 	.word	0xe000ed04

0800d038 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b08e      	sub	sp, #56	; 0x38
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	603b      	str	r3, [r7, #0]
 800d044:	4613      	mov	r3, r2
 800d046:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800d048:	2301      	movs	r3, #1
 800d04a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d109      	bne.n	800d066 <xTaskGenericNotifyFromISR+0x2e>
 800d052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d056:	f383 8811 	msr	BASEPRI, r3
 800d05a:	f3bf 8f6f 	isb	sy
 800d05e:	f3bf 8f4f 	dsb	sy
 800d062:	627b      	str	r3, [r7, #36]	; 0x24
 800d064:	e7fe      	b.n	800d064 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d066:	f000 fe5d 	bl	800dd24 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800d06e:	f3ef 8211 	mrs	r2, BASEPRI
 800d072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d076:	f383 8811 	msr	BASEPRI, r3
 800d07a:	f3bf 8f6f 	isb	sy
 800d07e:	f3bf 8f4f 	dsb	sy
 800d082:	623a      	str	r2, [r7, #32]
 800d084:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800d086:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d088:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d003      	beq.n	800d098 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d092:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d09e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a4:	2202      	movs	r2, #2
 800d0a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800d0aa:	79fb      	ldrb	r3, [r7, #7]
 800d0ac:	2b04      	cmp	r3, #4
 800d0ae:	d829      	bhi.n	800d104 <xTaskGenericNotifyFromISR+0xcc>
 800d0b0:	a201      	add	r2, pc, #4	; (adr r2, 800d0b8 <xTaskGenericNotifyFromISR+0x80>)
 800d0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b6:	bf00      	nop
 800d0b8:	0800d123 	.word	0x0800d123
 800d0bc:	0800d0cd 	.word	0x0800d0cd
 800d0c0:	0800d0db 	.word	0x0800d0db
 800d0c4:	0800d0e7 	.word	0x0800d0e7
 800d0c8:	0800d0ef 	.word	0x0800d0ef
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	431a      	orrs	r2, r3
 800d0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d0d8:	e026      	b.n	800d128 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0de:	1c5a      	adds	r2, r3, #1
 800d0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d0e4:	e020      	b.n	800d128 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e8:	68ba      	ldr	r2, [r7, #8]
 800d0ea:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d0ec:	e01c      	b.n	800d128 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d0ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d0f2:	2b02      	cmp	r3, #2
 800d0f4:	d003      	beq.n	800d0fe <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f8:	68ba      	ldr	r2, [r7, #8]
 800d0fa:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d0fc:	e014      	b.n	800d128 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800d0fe:	2300      	movs	r3, #0
 800d100:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800d102:	e011      	b.n	800d128 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d10c:	d00b      	beq.n	800d126 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800d10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d112:	f383 8811 	msr	BASEPRI, r3
 800d116:	f3bf 8f6f 	isb	sy
 800d11a:	f3bf 8f4f 	dsb	sy
 800d11e:	61bb      	str	r3, [r7, #24]
 800d120:	e7fe      	b.n	800d120 <xTaskGenericNotifyFromISR+0xe8>
					break;
 800d122:	bf00      	nop
 800d124:	e000      	b.n	800d128 <xTaskGenericNotifyFromISR+0xf0>
					break;
 800d126:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d128:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d145      	bne.n	800d1bc <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d134:	2b00      	cmp	r3, #0
 800d136:	d009      	beq.n	800d14c <xTaskGenericNotifyFromISR+0x114>
 800d138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13c:	f383 8811 	msr	BASEPRI, r3
 800d140:	f3bf 8f6f 	isb	sy
 800d144:	f3bf 8f4f 	dsb	sy
 800d148:	617b      	str	r3, [r7, #20]
 800d14a:	e7fe      	b.n	800d14a <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d14c:	4b20      	ldr	r3, [pc, #128]	; (800d1d0 <xTaskGenericNotifyFromISR+0x198>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d11d      	bne.n	800d190 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d156:	3304      	adds	r3, #4
 800d158:	4618      	mov	r0, r3
 800d15a:	f7fd fd93 	bl	800ac84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d162:	4b1c      	ldr	r3, [pc, #112]	; (800d1d4 <xTaskGenericNotifyFromISR+0x19c>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	429a      	cmp	r2, r3
 800d168:	d903      	bls.n	800d172 <xTaskGenericNotifyFromISR+0x13a>
 800d16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d16e:	4a19      	ldr	r2, [pc, #100]	; (800d1d4 <xTaskGenericNotifyFromISR+0x19c>)
 800d170:	6013      	str	r3, [r2, #0]
 800d172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d176:	4613      	mov	r3, r2
 800d178:	009b      	lsls	r3, r3, #2
 800d17a:	4413      	add	r3, r2
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	4a16      	ldr	r2, [pc, #88]	; (800d1d8 <xTaskGenericNotifyFromISR+0x1a0>)
 800d180:	441a      	add	r2, r3
 800d182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d184:	3304      	adds	r3, #4
 800d186:	4619      	mov	r1, r3
 800d188:	4610      	mov	r0, r2
 800d18a:	f7fd fd1e 	bl	800abca <vListInsertEnd>
 800d18e:	e005      	b.n	800d19c <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d192:	3318      	adds	r3, #24
 800d194:	4619      	mov	r1, r3
 800d196:	4811      	ldr	r0, [pc, #68]	; (800d1dc <xTaskGenericNotifyFromISR+0x1a4>)
 800d198:	f7fd fd17 	bl	800abca <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1a0:	4b0f      	ldr	r3, [pc, #60]	; (800d1e0 <xTaskGenericNotifyFromISR+0x1a8>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d908      	bls.n	800d1bc <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d1aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d002      	beq.n	800d1b6 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d1b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d1b6:	4b0b      	ldr	r3, [pc, #44]	; (800d1e4 <xTaskGenericNotifyFromISR+0x1ac>)
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	601a      	str	r2, [r3, #0]
 800d1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1be:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800d1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3738      	adds	r7, #56	; 0x38
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	20002ca8 	.word	0x20002ca8
 800d1d4:	20002c88 	.word	0x20002c88
 800d1d8:	200027b0 	.word	0x200027b0
 800d1dc:	20002c40 	.word	0x20002c40
 800d1e0:	200027ac 	.word	0x200027ac
 800d1e4:	20002c94 	.word	0x20002c94

0800d1e8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b084      	sub	sp, #16
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d1f2:	4b21      	ldr	r3, [pc, #132]	; (800d278 <prvAddCurrentTaskToDelayedList+0x90>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1f8:	4b20      	ldr	r3, [pc, #128]	; (800d27c <prvAddCurrentTaskToDelayedList+0x94>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	3304      	adds	r3, #4
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7fd fd40 	bl	800ac84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d20a:	d10a      	bne.n	800d222 <prvAddCurrentTaskToDelayedList+0x3a>
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d007      	beq.n	800d222 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d212:	4b1a      	ldr	r3, [pc, #104]	; (800d27c <prvAddCurrentTaskToDelayedList+0x94>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	3304      	adds	r3, #4
 800d218:	4619      	mov	r1, r3
 800d21a:	4819      	ldr	r0, [pc, #100]	; (800d280 <prvAddCurrentTaskToDelayedList+0x98>)
 800d21c:	f7fd fcd5 	bl	800abca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d220:	e026      	b.n	800d270 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d222:	68fa      	ldr	r2, [r7, #12]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	4413      	add	r3, r2
 800d228:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d22a:	4b14      	ldr	r3, [pc, #80]	; (800d27c <prvAddCurrentTaskToDelayedList+0x94>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	68ba      	ldr	r2, [r7, #8]
 800d230:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d232:	68ba      	ldr	r2, [r7, #8]
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	429a      	cmp	r2, r3
 800d238:	d209      	bcs.n	800d24e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d23a:	4b12      	ldr	r3, [pc, #72]	; (800d284 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d23c:	681a      	ldr	r2, [r3, #0]
 800d23e:	4b0f      	ldr	r3, [pc, #60]	; (800d27c <prvAddCurrentTaskToDelayedList+0x94>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	3304      	adds	r3, #4
 800d244:	4619      	mov	r1, r3
 800d246:	4610      	mov	r0, r2
 800d248:	f7fd fce3 	bl	800ac12 <vListInsert>
}
 800d24c:	e010      	b.n	800d270 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d24e:	4b0e      	ldr	r3, [pc, #56]	; (800d288 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d250:	681a      	ldr	r2, [r3, #0]
 800d252:	4b0a      	ldr	r3, [pc, #40]	; (800d27c <prvAddCurrentTaskToDelayedList+0x94>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	3304      	adds	r3, #4
 800d258:	4619      	mov	r1, r3
 800d25a:	4610      	mov	r0, r2
 800d25c:	f7fd fcd9 	bl	800ac12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d260:	4b0a      	ldr	r3, [pc, #40]	; (800d28c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	68ba      	ldr	r2, [r7, #8]
 800d266:	429a      	cmp	r2, r3
 800d268:	d202      	bcs.n	800d270 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d26a:	4a08      	ldr	r2, [pc, #32]	; (800d28c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	6013      	str	r3, [r2, #0]
}
 800d270:	bf00      	nop
 800d272:	3710      	adds	r7, #16
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}
 800d278:	20002c84 	.word	0x20002c84
 800d27c:	200027ac 	.word	0x200027ac
 800d280:	20002c6c 	.word	0x20002c6c
 800d284:	20002c3c 	.word	0x20002c3c
 800d288:	20002c38 	.word	0x20002c38
 800d28c:	20002ca0 	.word	0x20002ca0

0800d290 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b08a      	sub	sp, #40	; 0x28
 800d294:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d296:	2300      	movs	r3, #0
 800d298:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d29a:	f000 faff 	bl	800d89c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d29e:	4b1c      	ldr	r3, [pc, #112]	; (800d310 <xTimerCreateTimerTask+0x80>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d021      	beq.n	800d2ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d2ae:	1d3a      	adds	r2, r7, #4
 800d2b0:	f107 0108 	add.w	r1, r7, #8
 800d2b4:	f107 030c 	add.w	r3, r7, #12
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7fd fc3f 	bl	800ab3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d2be:	6879      	ldr	r1, [r7, #4]
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	68fa      	ldr	r2, [r7, #12]
 800d2c4:	9202      	str	r2, [sp, #8]
 800d2c6:	9301      	str	r3, [sp, #4]
 800d2c8:	2302      	movs	r3, #2
 800d2ca:	9300      	str	r3, [sp, #0]
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	460a      	mov	r2, r1
 800d2d0:	4910      	ldr	r1, [pc, #64]	; (800d314 <xTimerCreateTimerTask+0x84>)
 800d2d2:	4811      	ldr	r0, [pc, #68]	; (800d318 <xTimerCreateTimerTask+0x88>)
 800d2d4:	f7fe fda2 	bl	800be1c <xTaskCreateStatic>
 800d2d8:	4602      	mov	r2, r0
 800d2da:	4b10      	ldr	r3, [pc, #64]	; (800d31c <xTimerCreateTimerTask+0x8c>)
 800d2dc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d2de:	4b0f      	ldr	r3, [pc, #60]	; (800d31c <xTimerCreateTimerTask+0x8c>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d001      	beq.n	800d2ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d109      	bne.n	800d304 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800d2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f4:	f383 8811 	msr	BASEPRI, r3
 800d2f8:	f3bf 8f6f 	isb	sy
 800d2fc:	f3bf 8f4f 	dsb	sy
 800d300:	613b      	str	r3, [r7, #16]
 800d302:	e7fe      	b.n	800d302 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800d304:	697b      	ldr	r3, [r7, #20]
}
 800d306:	4618      	mov	r0, r3
 800d308:	3718      	adds	r7, #24
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	20002cdc 	.word	0x20002cdc
 800d314:	08011958 	.word	0x08011958
 800d318:	0800d451 	.word	0x0800d451
 800d31c:	20002ce0 	.word	0x20002ce0

0800d320 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b08a      	sub	sp, #40	; 0x28
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
 800d32c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d32e:	2300      	movs	r3, #0
 800d330:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d109      	bne.n	800d34c <xTimerGenericCommand+0x2c>
 800d338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d33c:	f383 8811 	msr	BASEPRI, r3
 800d340:	f3bf 8f6f 	isb	sy
 800d344:	f3bf 8f4f 	dsb	sy
 800d348:	623b      	str	r3, [r7, #32]
 800d34a:	e7fe      	b.n	800d34a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d34c:	4b19      	ldr	r3, [pc, #100]	; (800d3b4 <xTimerGenericCommand+0x94>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d02a      	beq.n	800d3aa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	2b05      	cmp	r3, #5
 800d364:	dc18      	bgt.n	800d398 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d366:	f7ff fbd1 	bl	800cb0c <xTaskGetSchedulerState>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	d109      	bne.n	800d384 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d370:	4b10      	ldr	r3, [pc, #64]	; (800d3b4 <xTimerGenericCommand+0x94>)
 800d372:	6818      	ldr	r0, [r3, #0]
 800d374:	f107 0110 	add.w	r1, r7, #16
 800d378:	2300      	movs	r3, #0
 800d37a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d37c:	f7fd ff04 	bl	800b188 <xQueueGenericSend>
 800d380:	6278      	str	r0, [r7, #36]	; 0x24
 800d382:	e012      	b.n	800d3aa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d384:	4b0b      	ldr	r3, [pc, #44]	; (800d3b4 <xTimerGenericCommand+0x94>)
 800d386:	6818      	ldr	r0, [r3, #0]
 800d388:	f107 0110 	add.w	r1, r7, #16
 800d38c:	2300      	movs	r3, #0
 800d38e:	2200      	movs	r2, #0
 800d390:	f7fd fefa 	bl	800b188 <xQueueGenericSend>
 800d394:	6278      	str	r0, [r7, #36]	; 0x24
 800d396:	e008      	b.n	800d3aa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d398:	4b06      	ldr	r3, [pc, #24]	; (800d3b4 <xTimerGenericCommand+0x94>)
 800d39a:	6818      	ldr	r0, [r3, #0]
 800d39c:	f107 0110 	add.w	r1, r7, #16
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	683a      	ldr	r2, [r7, #0]
 800d3a4:	f7fd ffea 	bl	800b37c <xQueueGenericSendFromISR>
 800d3a8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3728      	adds	r7, #40	; 0x28
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	20002cdc 	.word	0x20002cdc

0800d3b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b088      	sub	sp, #32
 800d3bc:	af02      	add	r7, sp, #8
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3c2:	4b22      	ldr	r3, [pc, #136]	; (800d44c <prvProcessExpiredTimer+0x94>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	68db      	ldr	r3, [r3, #12]
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	3304      	adds	r3, #4
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7fd fc57 	bl	800ac84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3dc:	f003 0304 	and.w	r3, r3, #4
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d021      	beq.n	800d428 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	699a      	ldr	r2, [r3, #24]
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	18d1      	adds	r1, r2, r3
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	683a      	ldr	r2, [r7, #0]
 800d3f0:	6978      	ldr	r0, [r7, #20]
 800d3f2:	f000 f8d1 	bl	800d598 <prvInsertTimerInActiveList>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d01e      	beq.n	800d43a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	9300      	str	r3, [sp, #0]
 800d400:	2300      	movs	r3, #0
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	2100      	movs	r1, #0
 800d406:	6978      	ldr	r0, [r7, #20]
 800d408:	f7ff ff8a 	bl	800d320 <xTimerGenericCommand>
 800d40c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d112      	bne.n	800d43a <prvProcessExpiredTimer+0x82>
 800d414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d418:	f383 8811 	msr	BASEPRI, r3
 800d41c:	f3bf 8f6f 	isb	sy
 800d420:	f3bf 8f4f 	dsb	sy
 800d424:	60fb      	str	r3, [r7, #12]
 800d426:	e7fe      	b.n	800d426 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d42e:	f023 0301 	bic.w	r3, r3, #1
 800d432:	b2da      	uxtb	r2, r3
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	6a1b      	ldr	r3, [r3, #32]
 800d43e:	6978      	ldr	r0, [r7, #20]
 800d440:	4798      	blx	r3
}
 800d442:	bf00      	nop
 800d444:	3718      	adds	r7, #24
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	bf00      	nop
 800d44c:	20002cd4 	.word	0x20002cd4

0800d450 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b084      	sub	sp, #16
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d458:	f107 0308 	add.w	r3, r7, #8
 800d45c:	4618      	mov	r0, r3
 800d45e:	f000 f857 	bl	800d510 <prvGetNextExpireTime>
 800d462:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	4619      	mov	r1, r3
 800d468:	68f8      	ldr	r0, [r7, #12]
 800d46a:	f000 f803 	bl	800d474 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d46e:	f000 f8d5 	bl	800d61c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d472:	e7f1      	b.n	800d458 <prvTimerTask+0x8>

0800d474 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d47e:	f7fe ff03 	bl	800c288 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d482:	f107 0308 	add.w	r3, r7, #8
 800d486:	4618      	mov	r0, r3
 800d488:	f000 f866 	bl	800d558 <prvSampleTimeNow>
 800d48c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d130      	bne.n	800d4f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d10a      	bne.n	800d4b0 <prvProcessTimerOrBlockTask+0x3c>
 800d49a:	687a      	ldr	r2, [r7, #4]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d806      	bhi.n	800d4b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d4a2:	f7fe ff37 	bl	800c314 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d4a6:	68f9      	ldr	r1, [r7, #12]
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f7ff ff85 	bl	800d3b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d4ae:	e024      	b.n	800d4fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d008      	beq.n	800d4c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d4b6:	4b13      	ldr	r3, [pc, #76]	; (800d504 <prvProcessTimerOrBlockTask+0x90>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d101      	bne.n	800d4c4 <prvProcessTimerOrBlockTask+0x50>
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	e000      	b.n	800d4c6 <prvProcessTimerOrBlockTask+0x52>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d4c8:	4b0f      	ldr	r3, [pc, #60]	; (800d508 <prvProcessTimerOrBlockTask+0x94>)
 800d4ca:	6818      	ldr	r0, [r3, #0]
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	1ad3      	subs	r3, r2, r3
 800d4d2:	683a      	ldr	r2, [r7, #0]
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	f7fe fc6d 	bl	800bdb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d4da:	f7fe ff1b 	bl	800c314 <xTaskResumeAll>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d10a      	bne.n	800d4fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d4e4:	4b09      	ldr	r3, [pc, #36]	; (800d50c <prvProcessTimerOrBlockTask+0x98>)
 800d4e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4ea:	601a      	str	r2, [r3, #0]
 800d4ec:	f3bf 8f4f 	dsb	sy
 800d4f0:	f3bf 8f6f 	isb	sy
}
 800d4f4:	e001      	b.n	800d4fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d4f6:	f7fe ff0d 	bl	800c314 <xTaskResumeAll>
}
 800d4fa:	bf00      	nop
 800d4fc:	3710      	adds	r7, #16
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
 800d502:	bf00      	nop
 800d504:	20002cd8 	.word	0x20002cd8
 800d508:	20002cdc 	.word	0x20002cdc
 800d50c:	e000ed04 	.word	0xe000ed04

0800d510 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d510:	b480      	push	{r7}
 800d512:	b085      	sub	sp, #20
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d518:	4b0e      	ldr	r3, [pc, #56]	; (800d554 <prvGetNextExpireTime+0x44>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d101      	bne.n	800d526 <prvGetNextExpireTime+0x16>
 800d522:	2201      	movs	r2, #1
 800d524:	e000      	b.n	800d528 <prvGetNextExpireTime+0x18>
 800d526:	2200      	movs	r2, #0
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d105      	bne.n	800d540 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d534:	4b07      	ldr	r3, [pc, #28]	; (800d554 <prvGetNextExpireTime+0x44>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	60fb      	str	r3, [r7, #12]
 800d53e:	e001      	b.n	800d544 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d540:	2300      	movs	r3, #0
 800d542:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d544:	68fb      	ldr	r3, [r7, #12]
}
 800d546:	4618      	mov	r0, r3
 800d548:	3714      	adds	r7, #20
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr
 800d552:	bf00      	nop
 800d554:	20002cd4 	.word	0x20002cd4

0800d558 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d560:	f7fe ff74 	bl	800c44c <xTaskGetTickCount>
 800d564:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d566:	4b0b      	ldr	r3, [pc, #44]	; (800d594 <prvSampleTimeNow+0x3c>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d205      	bcs.n	800d57c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d570:	f000 f930 	bl	800d7d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2201      	movs	r2, #1
 800d578:	601a      	str	r2, [r3, #0]
 800d57a:	e002      	b.n	800d582 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d582:	4a04      	ldr	r2, [pc, #16]	; (800d594 <prvSampleTimeNow+0x3c>)
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d588:	68fb      	ldr	r3, [r7, #12]
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3710      	adds	r7, #16
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	20002ce4 	.word	0x20002ce4

0800d598 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b086      	sub	sp, #24
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	60f8      	str	r0, [r7, #12]
 800d5a0:	60b9      	str	r1, [r7, #8]
 800d5a2:	607a      	str	r2, [r7, #4]
 800d5a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	68ba      	ldr	r2, [r7, #8]
 800d5ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	68fa      	ldr	r2, [r7, #12]
 800d5b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d5b6:	68ba      	ldr	r2, [r7, #8]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d812      	bhi.n	800d5e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	1ad2      	subs	r2, r2, r3
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	699b      	ldr	r3, [r3, #24]
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d302      	bcc.n	800d5d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	617b      	str	r3, [r7, #20]
 800d5d0:	e01b      	b.n	800d60a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d5d2:	4b10      	ldr	r3, [pc, #64]	; (800d614 <prvInsertTimerInActiveList+0x7c>)
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	3304      	adds	r3, #4
 800d5da:	4619      	mov	r1, r3
 800d5dc:	4610      	mov	r0, r2
 800d5de:	f7fd fb18 	bl	800ac12 <vListInsert>
 800d5e2:	e012      	b.n	800d60a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d206      	bcs.n	800d5fa <prvInsertTimerInActiveList+0x62>
 800d5ec:	68ba      	ldr	r2, [r7, #8]
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d302      	bcc.n	800d5fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	617b      	str	r3, [r7, #20]
 800d5f8:	e007      	b.n	800d60a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d5fa:	4b07      	ldr	r3, [pc, #28]	; (800d618 <prvInsertTimerInActiveList+0x80>)
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	3304      	adds	r3, #4
 800d602:	4619      	mov	r1, r3
 800d604:	4610      	mov	r0, r2
 800d606:	f7fd fb04 	bl	800ac12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d60a:	697b      	ldr	r3, [r7, #20]
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3718      	adds	r7, #24
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	20002cd8 	.word	0x20002cd8
 800d618:	20002cd4 	.word	0x20002cd4

0800d61c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b08e      	sub	sp, #56	; 0x38
 800d620:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d622:	e0c6      	b.n	800d7b2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2b00      	cmp	r3, #0
 800d628:	da17      	bge.n	800d65a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d62a:	1d3b      	adds	r3, r7, #4
 800d62c:	3304      	adds	r3, #4
 800d62e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d632:	2b00      	cmp	r3, #0
 800d634:	d109      	bne.n	800d64a <prvProcessReceivedCommands+0x2e>
 800d636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d63a:	f383 8811 	msr	BASEPRI, r3
 800d63e:	f3bf 8f6f 	isb	sy
 800d642:	f3bf 8f4f 	dsb	sy
 800d646:	61fb      	str	r3, [r7, #28]
 800d648:	e7fe      	b.n	800d648 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d650:	6850      	ldr	r0, [r2, #4]
 800d652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d654:	6892      	ldr	r2, [r2, #8]
 800d656:	4611      	mov	r1, r2
 800d658:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	f2c0 80a7 	blt.w	800d7b0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d668:	695b      	ldr	r3, [r3, #20]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d004      	beq.n	800d678 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d670:	3304      	adds	r3, #4
 800d672:	4618      	mov	r0, r3
 800d674:	f7fd fb06 	bl	800ac84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d678:	463b      	mov	r3, r7
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7ff ff6c 	bl	800d558 <prvSampleTimeNow>
 800d680:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2b09      	cmp	r3, #9
 800d686:	f200 8094 	bhi.w	800d7b2 <prvProcessReceivedCommands+0x196>
 800d68a:	a201      	add	r2, pc, #4	; (adr r2, 800d690 <prvProcessReceivedCommands+0x74>)
 800d68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d690:	0800d6b9 	.word	0x0800d6b9
 800d694:	0800d6b9 	.word	0x0800d6b9
 800d698:	0800d6b9 	.word	0x0800d6b9
 800d69c:	0800d72b 	.word	0x0800d72b
 800d6a0:	0800d73f 	.word	0x0800d73f
 800d6a4:	0800d787 	.word	0x0800d787
 800d6a8:	0800d6b9 	.word	0x0800d6b9
 800d6ac:	0800d6b9 	.word	0x0800d6b9
 800d6b0:	0800d72b 	.word	0x0800d72b
 800d6b4:	0800d73f 	.word	0x0800d73f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6be:	f043 0301 	orr.w	r3, r3, #1
 800d6c2:	b2da      	uxtb	r2, r3
 800d6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d6ca:	68ba      	ldr	r2, [r7, #8]
 800d6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ce:	699b      	ldr	r3, [r3, #24]
 800d6d0:	18d1      	adds	r1, r2, r3
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6d8:	f7ff ff5e 	bl	800d598 <prvInsertTimerInActiveList>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d067      	beq.n	800d7b2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e4:	6a1b      	ldr	r3, [r3, #32]
 800d6e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6f0:	f003 0304 	and.w	r3, r3, #4
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d05c      	beq.n	800d7b2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d6f8:	68ba      	ldr	r2, [r7, #8]
 800d6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fc:	699b      	ldr	r3, [r3, #24]
 800d6fe:	441a      	add	r2, r3
 800d700:	2300      	movs	r3, #0
 800d702:	9300      	str	r3, [sp, #0]
 800d704:	2300      	movs	r3, #0
 800d706:	2100      	movs	r1, #0
 800d708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d70a:	f7ff fe09 	bl	800d320 <xTimerGenericCommand>
 800d70e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d710:	6a3b      	ldr	r3, [r7, #32]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d14d      	bne.n	800d7b2 <prvProcessReceivedCommands+0x196>
 800d716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71a:	f383 8811 	msr	BASEPRI, r3
 800d71e:	f3bf 8f6f 	isb	sy
 800d722:	f3bf 8f4f 	dsb	sy
 800d726:	61bb      	str	r3, [r7, #24]
 800d728:	e7fe      	b.n	800d728 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d730:	f023 0301 	bic.w	r3, r3, #1
 800d734:	b2da      	uxtb	r2, r3
 800d736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d738:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d73c:	e039      	b.n	800d7b2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d740:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d744:	f043 0301 	orr.w	r3, r3, #1
 800d748:	b2da      	uxtb	r2, r3
 800d74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d750:	68ba      	ldr	r2, [r7, #8]
 800d752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d754:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d758:	699b      	ldr	r3, [r3, #24]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d109      	bne.n	800d772 <prvProcessReceivedCommands+0x156>
 800d75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d762:	f383 8811 	msr	BASEPRI, r3
 800d766:	f3bf 8f6f 	isb	sy
 800d76a:	f3bf 8f4f 	dsb	sy
 800d76e:	617b      	str	r3, [r7, #20]
 800d770:	e7fe      	b.n	800d770 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d774:	699a      	ldr	r2, [r3, #24]
 800d776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d778:	18d1      	adds	r1, r2, r3
 800d77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d77e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d780:	f7ff ff0a 	bl	800d598 <prvInsertTimerInActiveList>
					break;
 800d784:	e015      	b.n	800d7b2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d78c:	f003 0302 	and.w	r3, r3, #2
 800d790:	2b00      	cmp	r3, #0
 800d792:	d103      	bne.n	800d79c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800d794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d796:	f000 fbc5 	bl	800df24 <vPortFree>
 800d79a:	e00a      	b.n	800d7b2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7a2:	f023 0301 	bic.w	r3, r3, #1
 800d7a6:	b2da      	uxtb	r2, r3
 800d7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d7ae:	e000      	b.n	800d7b2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d7b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d7b2:	4b07      	ldr	r3, [pc, #28]	; (800d7d0 <prvProcessReceivedCommands+0x1b4>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	1d39      	adds	r1, r7, #4
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7fd fefc 	bl	800b5b8 <xQueueReceive>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	f47f af2e 	bne.w	800d624 <prvProcessReceivedCommands+0x8>
	}
}
 800d7c8:	bf00      	nop
 800d7ca:	3730      	adds	r7, #48	; 0x30
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	20002cdc 	.word	0x20002cdc

0800d7d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b088      	sub	sp, #32
 800d7d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d7da:	e047      	b.n	800d86c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d7dc:	4b2d      	ldr	r3, [pc, #180]	; (800d894 <prvSwitchTimerLists+0xc0>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7e6:	4b2b      	ldr	r3, [pc, #172]	; (800d894 <prvSwitchTimerLists+0xc0>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	68db      	ldr	r3, [r3, #12]
 800d7ec:	68db      	ldr	r3, [r3, #12]
 800d7ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	3304      	adds	r3, #4
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7fd fa45 	bl	800ac84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	6a1b      	ldr	r3, [r3, #32]
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d808:	f003 0304 	and.w	r3, r3, #4
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d02d      	beq.n	800d86c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	699b      	ldr	r3, [r3, #24]
 800d814:	693a      	ldr	r2, [r7, #16]
 800d816:	4413      	add	r3, r2
 800d818:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d81a:	68ba      	ldr	r2, [r7, #8]
 800d81c:	693b      	ldr	r3, [r7, #16]
 800d81e:	429a      	cmp	r2, r3
 800d820:	d90e      	bls.n	800d840 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	68ba      	ldr	r2, [r7, #8]
 800d826:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	68fa      	ldr	r2, [r7, #12]
 800d82c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d82e:	4b19      	ldr	r3, [pc, #100]	; (800d894 <prvSwitchTimerLists+0xc0>)
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	3304      	adds	r3, #4
 800d836:	4619      	mov	r1, r3
 800d838:	4610      	mov	r0, r2
 800d83a:	f7fd f9ea 	bl	800ac12 <vListInsert>
 800d83e:	e015      	b.n	800d86c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d840:	2300      	movs	r3, #0
 800d842:	9300      	str	r3, [sp, #0]
 800d844:	2300      	movs	r3, #0
 800d846:	693a      	ldr	r2, [r7, #16]
 800d848:	2100      	movs	r1, #0
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	f7ff fd68 	bl	800d320 <xTimerGenericCommand>
 800d850:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d109      	bne.n	800d86c <prvSwitchTimerLists+0x98>
 800d858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85c:	f383 8811 	msr	BASEPRI, r3
 800d860:	f3bf 8f6f 	isb	sy
 800d864:	f3bf 8f4f 	dsb	sy
 800d868:	603b      	str	r3, [r7, #0]
 800d86a:	e7fe      	b.n	800d86a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d86c:	4b09      	ldr	r3, [pc, #36]	; (800d894 <prvSwitchTimerLists+0xc0>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d1b2      	bne.n	800d7dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d876:	4b07      	ldr	r3, [pc, #28]	; (800d894 <prvSwitchTimerLists+0xc0>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d87c:	4b06      	ldr	r3, [pc, #24]	; (800d898 <prvSwitchTimerLists+0xc4>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a04      	ldr	r2, [pc, #16]	; (800d894 <prvSwitchTimerLists+0xc0>)
 800d882:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d884:	4a04      	ldr	r2, [pc, #16]	; (800d898 <prvSwitchTimerLists+0xc4>)
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	6013      	str	r3, [r2, #0]
}
 800d88a:	bf00      	nop
 800d88c:	3718      	adds	r7, #24
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	20002cd4 	.word	0x20002cd4
 800d898:	20002cd8 	.word	0x20002cd8

0800d89c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d8a2:	f000 f963 	bl	800db6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d8a6:	4b15      	ldr	r3, [pc, #84]	; (800d8fc <prvCheckForValidListAndQueue+0x60>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d120      	bne.n	800d8f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d8ae:	4814      	ldr	r0, [pc, #80]	; (800d900 <prvCheckForValidListAndQueue+0x64>)
 800d8b0:	f7fd f95e 	bl	800ab70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d8b4:	4813      	ldr	r0, [pc, #76]	; (800d904 <prvCheckForValidListAndQueue+0x68>)
 800d8b6:	f7fd f95b 	bl	800ab70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d8ba:	4b13      	ldr	r3, [pc, #76]	; (800d908 <prvCheckForValidListAndQueue+0x6c>)
 800d8bc:	4a10      	ldr	r2, [pc, #64]	; (800d900 <prvCheckForValidListAndQueue+0x64>)
 800d8be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d8c0:	4b12      	ldr	r3, [pc, #72]	; (800d90c <prvCheckForValidListAndQueue+0x70>)
 800d8c2:	4a10      	ldr	r2, [pc, #64]	; (800d904 <prvCheckForValidListAndQueue+0x68>)
 800d8c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	9300      	str	r3, [sp, #0]
 800d8ca:	4b11      	ldr	r3, [pc, #68]	; (800d910 <prvCheckForValidListAndQueue+0x74>)
 800d8cc:	4a11      	ldr	r2, [pc, #68]	; (800d914 <prvCheckForValidListAndQueue+0x78>)
 800d8ce:	2110      	movs	r1, #16
 800d8d0:	200a      	movs	r0, #10
 800d8d2:	f7fd fa69 	bl	800ada8 <xQueueGenericCreateStatic>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	4b08      	ldr	r3, [pc, #32]	; (800d8fc <prvCheckForValidListAndQueue+0x60>)
 800d8da:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d8dc:	4b07      	ldr	r3, [pc, #28]	; (800d8fc <prvCheckForValidListAndQueue+0x60>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d005      	beq.n	800d8f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d8e4:	4b05      	ldr	r3, [pc, #20]	; (800d8fc <prvCheckForValidListAndQueue+0x60>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	490b      	ldr	r1, [pc, #44]	; (800d918 <prvCheckForValidListAndQueue+0x7c>)
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7fe fa10 	bl	800bd10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d8f0:	f000 f96a 	bl	800dbc8 <vPortExitCritical>
}
 800d8f4:	bf00      	nop
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	20002cdc 	.word	0x20002cdc
 800d900:	20002cac 	.word	0x20002cac
 800d904:	20002cc0 	.word	0x20002cc0
 800d908:	20002cd4 	.word	0x20002cd4
 800d90c:	20002cd8 	.word	0x20002cd8
 800d910:	20002d88 	.word	0x20002d88
 800d914:	20002ce8 	.word	0x20002ce8
 800d918:	08011960 	.word	0x08011960

0800d91c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d91c:	b480      	push	{r7}
 800d91e:	b085      	sub	sp, #20
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	3b04      	subs	r3, #4
 800d92c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	3b04      	subs	r3, #4
 800d93a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	f023 0201 	bic.w	r2, r3, #1
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	3b04      	subs	r3, #4
 800d94a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d94c:	4a0c      	ldr	r2, [pc, #48]	; (800d980 <pxPortInitialiseStack+0x64>)
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	3b14      	subs	r3, #20
 800d956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d958:	687a      	ldr	r2, [r7, #4]
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	3b04      	subs	r3, #4
 800d962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f06f 0202 	mvn.w	r2, #2
 800d96a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	3b20      	subs	r3, #32
 800d970:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d972:	68fb      	ldr	r3, [r7, #12]
}
 800d974:	4618      	mov	r0, r3
 800d976:	3714      	adds	r7, #20
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr
 800d980:	0800d985 	.word	0x0800d985

0800d984 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d984:	b480      	push	{r7}
 800d986:	b085      	sub	sp, #20
 800d988:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d98a:	2300      	movs	r3, #0
 800d98c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d98e:	4b11      	ldr	r3, [pc, #68]	; (800d9d4 <prvTaskExitError+0x50>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d996:	d009      	beq.n	800d9ac <prvTaskExitError+0x28>
 800d998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d99c:	f383 8811 	msr	BASEPRI, r3
 800d9a0:	f3bf 8f6f 	isb	sy
 800d9a4:	f3bf 8f4f 	dsb	sy
 800d9a8:	60fb      	str	r3, [r7, #12]
 800d9aa:	e7fe      	b.n	800d9aa <prvTaskExitError+0x26>
 800d9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b0:	f383 8811 	msr	BASEPRI, r3
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d9be:	bf00      	nop
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d0fc      	beq.n	800d9c0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d9c6:	bf00      	nop
 800d9c8:	3714      	adds	r7, #20
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	2000001c 	.word	0x2000001c
	...

0800d9e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d9e0:	4b07      	ldr	r3, [pc, #28]	; (800da00 <pxCurrentTCBConst2>)
 800d9e2:	6819      	ldr	r1, [r3, #0]
 800d9e4:	6808      	ldr	r0, [r1, #0]
 800d9e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ea:	f380 8809 	msr	PSP, r0
 800d9ee:	f3bf 8f6f 	isb	sy
 800d9f2:	f04f 0000 	mov.w	r0, #0
 800d9f6:	f380 8811 	msr	BASEPRI, r0
 800d9fa:	4770      	bx	lr
 800d9fc:	f3af 8000 	nop.w

0800da00 <pxCurrentTCBConst2>:
 800da00:	200027ac 	.word	0x200027ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800da04:	bf00      	nop
 800da06:	bf00      	nop

0800da08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800da08:	4808      	ldr	r0, [pc, #32]	; (800da2c <prvPortStartFirstTask+0x24>)
 800da0a:	6800      	ldr	r0, [r0, #0]
 800da0c:	6800      	ldr	r0, [r0, #0]
 800da0e:	f380 8808 	msr	MSP, r0
 800da12:	f04f 0000 	mov.w	r0, #0
 800da16:	f380 8814 	msr	CONTROL, r0
 800da1a:	b662      	cpsie	i
 800da1c:	b661      	cpsie	f
 800da1e:	f3bf 8f4f 	dsb	sy
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	df00      	svc	0
 800da28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800da2a:	bf00      	nop
 800da2c:	e000ed08 	.word	0xe000ed08

0800da30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b086      	sub	sp, #24
 800da34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800da36:	4b44      	ldr	r3, [pc, #272]	; (800db48 <xPortStartScheduler+0x118>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4a44      	ldr	r2, [pc, #272]	; (800db4c <xPortStartScheduler+0x11c>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d109      	bne.n	800da54 <xPortStartScheduler+0x24>
 800da40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da44:	f383 8811 	msr	BASEPRI, r3
 800da48:	f3bf 8f6f 	isb	sy
 800da4c:	f3bf 8f4f 	dsb	sy
 800da50:	613b      	str	r3, [r7, #16]
 800da52:	e7fe      	b.n	800da52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800da54:	4b3c      	ldr	r3, [pc, #240]	; (800db48 <xPortStartScheduler+0x118>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4a3d      	ldr	r2, [pc, #244]	; (800db50 <xPortStartScheduler+0x120>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d109      	bne.n	800da72 <xPortStartScheduler+0x42>
 800da5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da62:	f383 8811 	msr	BASEPRI, r3
 800da66:	f3bf 8f6f 	isb	sy
 800da6a:	f3bf 8f4f 	dsb	sy
 800da6e:	60fb      	str	r3, [r7, #12]
 800da70:	e7fe      	b.n	800da70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800da72:	4b38      	ldr	r3, [pc, #224]	; (800db54 <xPortStartScheduler+0x124>)
 800da74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	22ff      	movs	r2, #255	; 0xff
 800da82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800da8c:	78fb      	ldrb	r3, [r7, #3]
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800da94:	b2da      	uxtb	r2, r3
 800da96:	4b30      	ldr	r3, [pc, #192]	; (800db58 <xPortStartScheduler+0x128>)
 800da98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800da9a:	4b30      	ldr	r3, [pc, #192]	; (800db5c <xPortStartScheduler+0x12c>)
 800da9c:	2207      	movs	r2, #7
 800da9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800daa0:	e009      	b.n	800dab6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800daa2:	4b2e      	ldr	r3, [pc, #184]	; (800db5c <xPortStartScheduler+0x12c>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	3b01      	subs	r3, #1
 800daa8:	4a2c      	ldr	r2, [pc, #176]	; (800db5c <xPortStartScheduler+0x12c>)
 800daaa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800daac:	78fb      	ldrb	r3, [r7, #3]
 800daae:	b2db      	uxtb	r3, r3
 800dab0:	005b      	lsls	r3, r3, #1
 800dab2:	b2db      	uxtb	r3, r3
 800dab4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dab6:	78fb      	ldrb	r3, [r7, #3]
 800dab8:	b2db      	uxtb	r3, r3
 800daba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dabe:	2b80      	cmp	r3, #128	; 0x80
 800dac0:	d0ef      	beq.n	800daa2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dac2:	4b26      	ldr	r3, [pc, #152]	; (800db5c <xPortStartScheduler+0x12c>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f1c3 0307 	rsb	r3, r3, #7
 800daca:	2b04      	cmp	r3, #4
 800dacc:	d009      	beq.n	800dae2 <xPortStartScheduler+0xb2>
 800dace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad2:	f383 8811 	msr	BASEPRI, r3
 800dad6:	f3bf 8f6f 	isb	sy
 800dada:	f3bf 8f4f 	dsb	sy
 800dade:	60bb      	str	r3, [r7, #8]
 800dae0:	e7fe      	b.n	800dae0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dae2:	4b1e      	ldr	r3, [pc, #120]	; (800db5c <xPortStartScheduler+0x12c>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	021b      	lsls	r3, r3, #8
 800dae8:	4a1c      	ldr	r2, [pc, #112]	; (800db5c <xPortStartScheduler+0x12c>)
 800daea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800daec:	4b1b      	ldr	r3, [pc, #108]	; (800db5c <xPortStartScheduler+0x12c>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800daf4:	4a19      	ldr	r2, [pc, #100]	; (800db5c <xPortStartScheduler+0x12c>)
 800daf6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	b2da      	uxtb	r2, r3
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800db00:	4b17      	ldr	r3, [pc, #92]	; (800db60 <xPortStartScheduler+0x130>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	4a16      	ldr	r2, [pc, #88]	; (800db60 <xPortStartScheduler+0x130>)
 800db06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800db0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800db0c:	4b14      	ldr	r3, [pc, #80]	; (800db60 <xPortStartScheduler+0x130>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	4a13      	ldr	r2, [pc, #76]	; (800db60 <xPortStartScheduler+0x130>)
 800db12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800db16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800db18:	f000 f8d6 	bl	800dcc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800db1c:	4b11      	ldr	r3, [pc, #68]	; (800db64 <xPortStartScheduler+0x134>)
 800db1e:	2200      	movs	r2, #0
 800db20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800db22:	f000 f8f5 	bl	800dd10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800db26:	4b10      	ldr	r3, [pc, #64]	; (800db68 <xPortStartScheduler+0x138>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4a0f      	ldr	r2, [pc, #60]	; (800db68 <xPortStartScheduler+0x138>)
 800db2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800db30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800db32:	f7ff ff69 	bl	800da08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800db36:	f7fe fd51 	bl	800c5dc <vTaskSwitchContext>
	prvTaskExitError();
 800db3a:	f7ff ff23 	bl	800d984 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800db3e:	2300      	movs	r3, #0
}
 800db40:	4618      	mov	r0, r3
 800db42:	3718      	adds	r7, #24
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	e000ed00 	.word	0xe000ed00
 800db4c:	410fc271 	.word	0x410fc271
 800db50:	410fc270 	.word	0x410fc270
 800db54:	e000e400 	.word	0xe000e400
 800db58:	20002dd8 	.word	0x20002dd8
 800db5c:	20002ddc 	.word	0x20002ddc
 800db60:	e000ed20 	.word	0xe000ed20
 800db64:	2000001c 	.word	0x2000001c
 800db68:	e000ef34 	.word	0xe000ef34

0800db6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800db6c:	b480      	push	{r7}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
 800db72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db76:	f383 8811 	msr	BASEPRI, r3
 800db7a:	f3bf 8f6f 	isb	sy
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800db84:	4b0e      	ldr	r3, [pc, #56]	; (800dbc0 <vPortEnterCritical+0x54>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	3301      	adds	r3, #1
 800db8a:	4a0d      	ldr	r2, [pc, #52]	; (800dbc0 <vPortEnterCritical+0x54>)
 800db8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800db8e:	4b0c      	ldr	r3, [pc, #48]	; (800dbc0 <vPortEnterCritical+0x54>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	2b01      	cmp	r3, #1
 800db94:	d10e      	bne.n	800dbb4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800db96:	4b0b      	ldr	r3, [pc, #44]	; (800dbc4 <vPortEnterCritical+0x58>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d009      	beq.n	800dbb4 <vPortEnterCritical+0x48>
 800dba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba4:	f383 8811 	msr	BASEPRI, r3
 800dba8:	f3bf 8f6f 	isb	sy
 800dbac:	f3bf 8f4f 	dsb	sy
 800dbb0:	603b      	str	r3, [r7, #0]
 800dbb2:	e7fe      	b.n	800dbb2 <vPortEnterCritical+0x46>
	}
}
 800dbb4:	bf00      	nop
 800dbb6:	370c      	adds	r7, #12
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr
 800dbc0:	2000001c 	.word	0x2000001c
 800dbc4:	e000ed04 	.word	0xe000ed04

0800dbc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b083      	sub	sp, #12
 800dbcc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dbce:	4b11      	ldr	r3, [pc, #68]	; (800dc14 <vPortExitCritical+0x4c>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d109      	bne.n	800dbea <vPortExitCritical+0x22>
 800dbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbda:	f383 8811 	msr	BASEPRI, r3
 800dbde:	f3bf 8f6f 	isb	sy
 800dbe2:	f3bf 8f4f 	dsb	sy
 800dbe6:	607b      	str	r3, [r7, #4]
 800dbe8:	e7fe      	b.n	800dbe8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800dbea:	4b0a      	ldr	r3, [pc, #40]	; (800dc14 <vPortExitCritical+0x4c>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	3b01      	subs	r3, #1
 800dbf0:	4a08      	ldr	r2, [pc, #32]	; (800dc14 <vPortExitCritical+0x4c>)
 800dbf2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dbf4:	4b07      	ldr	r3, [pc, #28]	; (800dc14 <vPortExitCritical+0x4c>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d104      	bne.n	800dc06 <vPortExitCritical+0x3e>
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800dc06:	bf00      	nop
 800dc08:	370c      	adds	r7, #12
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr
 800dc12:	bf00      	nop
 800dc14:	2000001c 	.word	0x2000001c
	...

0800dc20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dc20:	f3ef 8009 	mrs	r0, PSP
 800dc24:	f3bf 8f6f 	isb	sy
 800dc28:	4b15      	ldr	r3, [pc, #84]	; (800dc80 <pxCurrentTCBConst>)
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	f01e 0f10 	tst.w	lr, #16
 800dc30:	bf08      	it	eq
 800dc32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dc36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc3a:	6010      	str	r0, [r2, #0]
 800dc3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dc40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dc44:	f380 8811 	msr	BASEPRI, r0
 800dc48:	f3bf 8f4f 	dsb	sy
 800dc4c:	f3bf 8f6f 	isb	sy
 800dc50:	f7fe fcc4 	bl	800c5dc <vTaskSwitchContext>
 800dc54:	f04f 0000 	mov.w	r0, #0
 800dc58:	f380 8811 	msr	BASEPRI, r0
 800dc5c:	bc09      	pop	{r0, r3}
 800dc5e:	6819      	ldr	r1, [r3, #0]
 800dc60:	6808      	ldr	r0, [r1, #0]
 800dc62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc66:	f01e 0f10 	tst.w	lr, #16
 800dc6a:	bf08      	it	eq
 800dc6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dc70:	f380 8809 	msr	PSP, r0
 800dc74:	f3bf 8f6f 	isb	sy
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop
 800dc7c:	f3af 8000 	nop.w

0800dc80 <pxCurrentTCBConst>:
 800dc80:	200027ac 	.word	0x200027ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dc84:	bf00      	nop
 800dc86:	bf00      	nop

0800dc88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
	__asm volatile
 800dc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc92:	f383 8811 	msr	BASEPRI, r3
 800dc96:	f3bf 8f6f 	isb	sy
 800dc9a:	f3bf 8f4f 	dsb	sy
 800dc9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dca0:	f7fe fbe4 	bl	800c46c <xTaskIncrementTick>
 800dca4:	4603      	mov	r3, r0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d003      	beq.n	800dcb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dcaa:	4b06      	ldr	r3, [pc, #24]	; (800dcc4 <SysTick_Handler+0x3c>)
 800dcac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcb0:	601a      	str	r2, [r3, #0]
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800dcbc:	bf00      	nop
 800dcbe:	3708      	adds	r7, #8
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}
 800dcc4:	e000ed04 	.word	0xe000ed04

0800dcc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dcc8:	b480      	push	{r7}
 800dcca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dccc:	4b0b      	ldr	r3, [pc, #44]	; (800dcfc <vPortSetupTimerInterrupt+0x34>)
 800dcce:	2200      	movs	r2, #0
 800dcd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dcd2:	4b0b      	ldr	r3, [pc, #44]	; (800dd00 <vPortSetupTimerInterrupt+0x38>)
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dcd8:	4b0a      	ldr	r3, [pc, #40]	; (800dd04 <vPortSetupTimerInterrupt+0x3c>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4a0a      	ldr	r2, [pc, #40]	; (800dd08 <vPortSetupTimerInterrupt+0x40>)
 800dcde:	fba2 2303 	umull	r2, r3, r2, r3
 800dce2:	099b      	lsrs	r3, r3, #6
 800dce4:	4a09      	ldr	r2, [pc, #36]	; (800dd0c <vPortSetupTimerInterrupt+0x44>)
 800dce6:	3b01      	subs	r3, #1
 800dce8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dcea:	4b04      	ldr	r3, [pc, #16]	; (800dcfc <vPortSetupTimerInterrupt+0x34>)
 800dcec:	2207      	movs	r2, #7
 800dcee:	601a      	str	r2, [r3, #0]
}
 800dcf0:	bf00      	nop
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr
 800dcfa:	bf00      	nop
 800dcfc:	e000e010 	.word	0xe000e010
 800dd00:	e000e018 	.word	0xe000e018
 800dd04:	20000010 	.word	0x20000010
 800dd08:	10624dd3 	.word	0x10624dd3
 800dd0c:	e000e014 	.word	0xe000e014

0800dd10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dd10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dd20 <vPortEnableVFP+0x10>
 800dd14:	6801      	ldr	r1, [r0, #0]
 800dd16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dd1a:	6001      	str	r1, [r0, #0]
 800dd1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dd1e:	bf00      	nop
 800dd20:	e000ed88 	.word	0xe000ed88

0800dd24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dd24:	b480      	push	{r7}
 800dd26:	b085      	sub	sp, #20
 800dd28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dd2a:	f3ef 8305 	mrs	r3, IPSR
 800dd2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2b0f      	cmp	r3, #15
 800dd34:	d913      	bls.n	800dd5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dd36:	4a16      	ldr	r2, [pc, #88]	; (800dd90 <vPortValidateInterruptPriority+0x6c>)
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	4413      	add	r3, r2
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dd40:	4b14      	ldr	r3, [pc, #80]	; (800dd94 <vPortValidateInterruptPriority+0x70>)
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	7afa      	ldrb	r2, [r7, #11]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d209      	bcs.n	800dd5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800dd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd4e:	f383 8811 	msr	BASEPRI, r3
 800dd52:	f3bf 8f6f 	isb	sy
 800dd56:	f3bf 8f4f 	dsb	sy
 800dd5a:	607b      	str	r3, [r7, #4]
 800dd5c:	e7fe      	b.n	800dd5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dd5e:	4b0e      	ldr	r3, [pc, #56]	; (800dd98 <vPortValidateInterruptPriority+0x74>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dd66:	4b0d      	ldr	r3, [pc, #52]	; (800dd9c <vPortValidateInterruptPriority+0x78>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d909      	bls.n	800dd82 <vPortValidateInterruptPriority+0x5e>
 800dd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd72:	f383 8811 	msr	BASEPRI, r3
 800dd76:	f3bf 8f6f 	isb	sy
 800dd7a:	f3bf 8f4f 	dsb	sy
 800dd7e:	603b      	str	r3, [r7, #0]
 800dd80:	e7fe      	b.n	800dd80 <vPortValidateInterruptPriority+0x5c>
	}
 800dd82:	bf00      	nop
 800dd84:	3714      	adds	r7, #20
 800dd86:	46bd      	mov	sp, r7
 800dd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8c:	4770      	bx	lr
 800dd8e:	bf00      	nop
 800dd90:	e000e3f0 	.word	0xe000e3f0
 800dd94:	20002dd8 	.word	0x20002dd8
 800dd98:	e000ed0c 	.word	0xe000ed0c
 800dd9c:	20002ddc 	.word	0x20002ddc

0800dda0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b08a      	sub	sp, #40	; 0x28
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ddac:	f7fe fa6c 	bl	800c288 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ddb0:	4b57      	ldr	r3, [pc, #348]	; (800df10 <pvPortMalloc+0x170>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d101      	bne.n	800ddbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ddb8:	f000 f90c 	bl	800dfd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ddbc:	4b55      	ldr	r3, [pc, #340]	; (800df14 <pvPortMalloc+0x174>)
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	4013      	ands	r3, r2
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	f040 808c 	bne.w	800dee2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d01c      	beq.n	800de0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800ddd0:	2208      	movs	r2, #8
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	4413      	add	r3, r2
 800ddd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f003 0307 	and.w	r3, r3, #7
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d013      	beq.n	800de0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f023 0307 	bic.w	r3, r3, #7
 800dde8:	3308      	adds	r3, #8
 800ddea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f003 0307 	and.w	r3, r3, #7
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d009      	beq.n	800de0a <pvPortMalloc+0x6a>
 800ddf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddfa:	f383 8811 	msr	BASEPRI, r3
 800ddfe:	f3bf 8f6f 	isb	sy
 800de02:	f3bf 8f4f 	dsb	sy
 800de06:	617b      	str	r3, [r7, #20]
 800de08:	e7fe      	b.n	800de08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d068      	beq.n	800dee2 <pvPortMalloc+0x142>
 800de10:	4b41      	ldr	r3, [pc, #260]	; (800df18 <pvPortMalloc+0x178>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	429a      	cmp	r2, r3
 800de18:	d863      	bhi.n	800dee2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800de1a:	4b40      	ldr	r3, [pc, #256]	; (800df1c <pvPortMalloc+0x17c>)
 800de1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800de1e:	4b3f      	ldr	r3, [pc, #252]	; (800df1c <pvPortMalloc+0x17c>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de24:	e004      	b.n	800de30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800de26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800de2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	429a      	cmp	r2, r3
 800de38:	d903      	bls.n	800de42 <pvPortMalloc+0xa2>
 800de3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d1f1      	bne.n	800de26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800de42:	4b33      	ldr	r3, [pc, #204]	; (800df10 <pvPortMalloc+0x170>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de48:	429a      	cmp	r2, r3
 800de4a:	d04a      	beq.n	800dee2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800de4c:	6a3b      	ldr	r3, [r7, #32]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2208      	movs	r2, #8
 800de52:	4413      	add	r3, r2
 800de54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800de56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	6a3b      	ldr	r3, [r7, #32]
 800de5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800de5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de60:	685a      	ldr	r2, [r3, #4]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	1ad2      	subs	r2, r2, r3
 800de66:	2308      	movs	r3, #8
 800de68:	005b      	lsls	r3, r3, #1
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d91e      	bls.n	800deac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800de6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	4413      	add	r3, r2
 800de74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de76:	69bb      	ldr	r3, [r7, #24]
 800de78:	f003 0307 	and.w	r3, r3, #7
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d009      	beq.n	800de94 <pvPortMalloc+0xf4>
 800de80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de84:	f383 8811 	msr	BASEPRI, r3
 800de88:	f3bf 8f6f 	isb	sy
 800de8c:	f3bf 8f4f 	dsb	sy
 800de90:	613b      	str	r3, [r7, #16]
 800de92:	e7fe      	b.n	800de92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800de94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de96:	685a      	ldr	r2, [r3, #4]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	1ad2      	subs	r2, r2, r3
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dea6:	69b8      	ldr	r0, [r7, #24]
 800dea8:	f000 f8f6 	bl	800e098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800deac:	4b1a      	ldr	r3, [pc, #104]	; (800df18 <pvPortMalloc+0x178>)
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	4a18      	ldr	r2, [pc, #96]	; (800df18 <pvPortMalloc+0x178>)
 800deb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800deba:	4b17      	ldr	r3, [pc, #92]	; (800df18 <pvPortMalloc+0x178>)
 800debc:	681a      	ldr	r2, [r3, #0]
 800debe:	4b18      	ldr	r3, [pc, #96]	; (800df20 <pvPortMalloc+0x180>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d203      	bcs.n	800dece <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dec6:	4b14      	ldr	r3, [pc, #80]	; (800df18 <pvPortMalloc+0x178>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	4a15      	ldr	r2, [pc, #84]	; (800df20 <pvPortMalloc+0x180>)
 800decc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded0:	685a      	ldr	r2, [r3, #4]
 800ded2:	4b10      	ldr	r3, [pc, #64]	; (800df14 <pvPortMalloc+0x174>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	431a      	orrs	r2, r3
 800ded8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dede:	2200      	movs	r2, #0
 800dee0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dee2:	f7fe fa17 	bl	800c314 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dee6:	69fb      	ldr	r3, [r7, #28]
 800dee8:	f003 0307 	and.w	r3, r3, #7
 800deec:	2b00      	cmp	r3, #0
 800deee:	d009      	beq.n	800df04 <pvPortMalloc+0x164>
 800def0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def4:	f383 8811 	msr	BASEPRI, r3
 800def8:	f3bf 8f6f 	isb	sy
 800defc:	f3bf 8f4f 	dsb	sy
 800df00:	60fb      	str	r3, [r7, #12]
 800df02:	e7fe      	b.n	800df02 <pvPortMalloc+0x162>
	return pvReturn;
 800df04:	69fb      	ldr	r3, [r7, #28]
}
 800df06:	4618      	mov	r0, r3
 800df08:	3728      	adds	r7, #40	; 0x28
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	20006880 	.word	0x20006880
 800df14:	2000688c 	.word	0x2000688c
 800df18:	20006884 	.word	0x20006884
 800df1c:	20006878 	.word	0x20006878
 800df20:	20006888 	.word	0x20006888

0800df24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b086      	sub	sp, #24
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d046      	beq.n	800dfc4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800df36:	2308      	movs	r3, #8
 800df38:	425b      	negs	r3, r3
 800df3a:	697a      	ldr	r2, [r7, #20]
 800df3c:	4413      	add	r3, r2
 800df3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	685a      	ldr	r2, [r3, #4]
 800df48:	4b20      	ldr	r3, [pc, #128]	; (800dfcc <vPortFree+0xa8>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	4013      	ands	r3, r2
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d109      	bne.n	800df66 <vPortFree+0x42>
 800df52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df56:	f383 8811 	msr	BASEPRI, r3
 800df5a:	f3bf 8f6f 	isb	sy
 800df5e:	f3bf 8f4f 	dsb	sy
 800df62:	60fb      	str	r3, [r7, #12]
 800df64:	e7fe      	b.n	800df64 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800df66:	693b      	ldr	r3, [r7, #16]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d009      	beq.n	800df82 <vPortFree+0x5e>
 800df6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df72:	f383 8811 	msr	BASEPRI, r3
 800df76:	f3bf 8f6f 	isb	sy
 800df7a:	f3bf 8f4f 	dsb	sy
 800df7e:	60bb      	str	r3, [r7, #8]
 800df80:	e7fe      	b.n	800df80 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	685a      	ldr	r2, [r3, #4]
 800df86:	4b11      	ldr	r3, [pc, #68]	; (800dfcc <vPortFree+0xa8>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4013      	ands	r3, r2
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d019      	beq.n	800dfc4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d115      	bne.n	800dfc4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	685a      	ldr	r2, [r3, #4]
 800df9c:	4b0b      	ldr	r3, [pc, #44]	; (800dfcc <vPortFree+0xa8>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	43db      	mvns	r3, r3
 800dfa2:	401a      	ands	r2, r3
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dfa8:	f7fe f96e 	bl	800c288 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	685a      	ldr	r2, [r3, #4]
 800dfb0:	4b07      	ldr	r3, [pc, #28]	; (800dfd0 <vPortFree+0xac>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4413      	add	r3, r2
 800dfb6:	4a06      	ldr	r2, [pc, #24]	; (800dfd0 <vPortFree+0xac>)
 800dfb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dfba:	6938      	ldr	r0, [r7, #16]
 800dfbc:	f000 f86c 	bl	800e098 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800dfc0:	f7fe f9a8 	bl	800c314 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dfc4:	bf00      	nop
 800dfc6:	3718      	adds	r7, #24
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}
 800dfcc:	2000688c 	.word	0x2000688c
 800dfd0:	20006884 	.word	0x20006884

0800dfd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b085      	sub	sp, #20
 800dfd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dfda:	f643 2398 	movw	r3, #15000	; 0x3a98
 800dfde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dfe0:	4b27      	ldr	r3, [pc, #156]	; (800e080 <prvHeapInit+0xac>)
 800dfe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f003 0307 	and.w	r3, r3, #7
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d00c      	beq.n	800e008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	3307      	adds	r3, #7
 800dff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	f023 0307 	bic.w	r3, r3, #7
 800dffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dffc:	68ba      	ldr	r2, [r7, #8]
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	1ad3      	subs	r3, r2, r3
 800e002:	4a1f      	ldr	r2, [pc, #124]	; (800e080 <prvHeapInit+0xac>)
 800e004:	4413      	add	r3, r2
 800e006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e00c:	4a1d      	ldr	r2, [pc, #116]	; (800e084 <prvHeapInit+0xb0>)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e012:	4b1c      	ldr	r3, [pc, #112]	; (800e084 <prvHeapInit+0xb0>)
 800e014:	2200      	movs	r2, #0
 800e016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	68ba      	ldr	r2, [r7, #8]
 800e01c:	4413      	add	r3, r2
 800e01e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e020:	2208      	movs	r2, #8
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	1a9b      	subs	r3, r3, r2
 800e026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f023 0307 	bic.w	r3, r3, #7
 800e02e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	4a15      	ldr	r2, [pc, #84]	; (800e088 <prvHeapInit+0xb4>)
 800e034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e036:	4b14      	ldr	r3, [pc, #80]	; (800e088 <prvHeapInit+0xb4>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2200      	movs	r2, #0
 800e03c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e03e:	4b12      	ldr	r3, [pc, #72]	; (800e088 <prvHeapInit+0xb4>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	2200      	movs	r2, #0
 800e044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	68fa      	ldr	r2, [r7, #12]
 800e04e:	1ad2      	subs	r2, r2, r3
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e054:	4b0c      	ldr	r3, [pc, #48]	; (800e088 <prvHeapInit+0xb4>)
 800e056:	681a      	ldr	r2, [r3, #0]
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	4a0a      	ldr	r2, [pc, #40]	; (800e08c <prvHeapInit+0xb8>)
 800e062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	4a09      	ldr	r2, [pc, #36]	; (800e090 <prvHeapInit+0xbc>)
 800e06a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e06c:	4b09      	ldr	r3, [pc, #36]	; (800e094 <prvHeapInit+0xc0>)
 800e06e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e072:	601a      	str	r2, [r3, #0]
}
 800e074:	bf00      	nop
 800e076:	3714      	adds	r7, #20
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr
 800e080:	20002de0 	.word	0x20002de0
 800e084:	20006878 	.word	0x20006878
 800e088:	20006880 	.word	0x20006880
 800e08c:	20006888 	.word	0x20006888
 800e090:	20006884 	.word	0x20006884
 800e094:	2000688c 	.word	0x2000688c

0800e098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e098:	b480      	push	{r7}
 800e09a:	b085      	sub	sp, #20
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e0a0:	4b28      	ldr	r3, [pc, #160]	; (800e144 <prvInsertBlockIntoFreeList+0xac>)
 800e0a2:	60fb      	str	r3, [r7, #12]
 800e0a4:	e002      	b.n	800e0ac <prvInsertBlockIntoFreeList+0x14>
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	60fb      	str	r3, [r7, #12]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	687a      	ldr	r2, [r7, #4]
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d8f7      	bhi.n	800e0a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	68ba      	ldr	r2, [r7, #8]
 800e0c0:	4413      	add	r3, r2
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d108      	bne.n	800e0da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	685a      	ldr	r2, [r3, #4]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	441a      	add	r2, r3
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	68ba      	ldr	r2, [r7, #8]
 800e0e4:	441a      	add	r2, r3
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d118      	bne.n	800e120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681a      	ldr	r2, [r3, #0]
 800e0f2:	4b15      	ldr	r3, [pc, #84]	; (800e148 <prvInsertBlockIntoFreeList+0xb0>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d00d      	beq.n	800e116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	685a      	ldr	r2, [r3, #4]
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	441a      	add	r2, r3
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	601a      	str	r2, [r3, #0]
 800e114:	e008      	b.n	800e128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e116:	4b0c      	ldr	r3, [pc, #48]	; (800e148 <prvInsertBlockIntoFreeList+0xb0>)
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	601a      	str	r2, [r3, #0]
 800e11e:	e003      	b.n	800e128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681a      	ldr	r2, [r3, #0]
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e128:	68fa      	ldr	r2, [r7, #12]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d002      	beq.n	800e136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	687a      	ldr	r2, [r7, #4]
 800e134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e136:	bf00      	nop
 800e138:	3714      	adds	r7, #20
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr
 800e142:	bf00      	nop
 800e144:	20006878 	.word	0x20006878
 800e148:	20006880 	.word	0x20006880

0800e14c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800e14c:	b480      	push	{r7}
 800e14e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800e150:	4b03      	ldr	r3, [pc, #12]	; (800e160 <LL_FLASH_GetUDN+0x14>)
 800e152:	681b      	ldr	r3, [r3, #0]
}
 800e154:	4618      	mov	r0, r3
 800e156:	46bd      	mov	sp, r7
 800e158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15c:	4770      	bx	lr
 800e15e:	bf00      	nop
 800e160:	1fff7580 	.word	0x1fff7580

0800e164 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800e164:	b480      	push	{r7}
 800e166:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800e168:	4b03      	ldr	r3, [pc, #12]	; (800e178 <LL_FLASH_GetDeviceID+0x14>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	b2db      	uxtb	r3, r3
}
 800e16e:	4618      	mov	r0, r3
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr
 800e178:	1fff7584 	.word	0x1fff7584

0800e17c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800e17c:	b480      	push	{r7}
 800e17e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800e180:	4b03      	ldr	r3, [pc, #12]	; (800e190 <LL_FLASH_GetSTCompanyID+0x14>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	0a1b      	lsrs	r3, r3, #8
}
 800e186:	4618      	mov	r0, r3
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr
 800e190:	1fff7584 	.word	0x1fff7584

0800e194 <APP_BLE_Init_Dyn_1>:
void LinkConfiguration(void * argument);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init_Dyn_1( void )
{
 800e194:	b5b0      	push	{r4, r5, r7, lr}
 800e196:	b08c      	sub	sp, #48	; 0x30
 800e198:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN APP_BLE_Init_1 */

	/* USER CODE END APP_BLE_Init_1 */

	SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800e19a:	4b28      	ldr	r3, [pc, #160]	; (800e23c <APP_BLE_Init_Dyn_1+0xa8>)
 800e19c:	463c      	mov	r4, r7
 800e19e:	461d      	mov	r5, r3
 800e1a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e1a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e1a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e1ac:	c407      	stmia	r4!, {r0, r1, r2}
 800e1ae:	7023      	strb	r3, [r4, #0]
	};

	/**
	 * Initialize Ble Transport Layer
	 */
	Ble_Tl_Init( );
 800e1b0:	f000 fac0 	bl	800e734 <Ble_Tl_Init>

	/**
	 * Do not allow standby in the application
	 */
	UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800e1b4:	2101      	movs	r1, #1
 800e1b6:	2004      	movs	r0, #4
 800e1b8:	f001 ff9e 	bl	80100f8 <UTIL_LPM_SetOffMode>
	//  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);

	/**
	 * Register the hci transport layer to handle BLE User Asynchronous Events
	 */
	HciUserEvtProcessId = osThreadNew(HciUserEvtProcess, NULL, &HciUserEvtProcess_attr);
 800e1bc:	4a20      	ldr	r2, [pc, #128]	; (800e240 <APP_BLE_Init_Dyn_1+0xac>)
 800e1be:	2100      	movs	r1, #0
 800e1c0:	4820      	ldr	r0, [pc, #128]	; (800e244 <APP_BLE_Init_Dyn_1+0xb0>)
 800e1c2:	f7fc f833 	bl	800a22c <osThreadNew>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	4b1f      	ldr	r3, [pc, #124]	; (800e248 <APP_BLE_Init_Dyn_1+0xb4>)
 800e1ca:	601a      	str	r2, [r3, #0]
	//  SHCI_C2_BLE_Init( &ble_init_cmd_packet );

	/**
	 * Starts the BLE Stack on CPU2
	 */
	if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800e1cc:	463b      	mov	r3, r7
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7fa fcd6 	bl	8008b80 <SHCI_C2_BLE_Init>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d001      	beq.n	800e1de <APP_BLE_Init_Dyn_1+0x4a>
	{
		Error_Handler();
 800e1da:	f7f4 f8eb 	bl	80023b4 <Error_Handler>
	}

	/**
	 * Initialization of HCI & GATT & GAP layer
	 */
	Ble_Hci_Gap_Gatt_Init();
 800e1de:	f000 fabf 	bl	800e760 <Ble_Hci_Gap_Gatt_Init>

	/**
	 * Initialization of the BLE Services
	 */
	SVCCTL_Init();
 800e1e2:	f7fa fbc5 	bl	8008970 <SVCCTL_Init>

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
	index_con_int = 0;
 800e1e6:	4b19      	ldr	r3, [pc, #100]	; (800e24c <APP_BLE_Init_Dyn_1+0xb8>)
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	701a      	strb	r2, [r3, #0]
	mutex = 1;
 800e1ec:	4b18      	ldr	r3, [pc, #96]	; (800e250 <APP_BLE_Init_Dyn_1+0xbc>)
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	701a      	strb	r2, [r3, #0]


	/**
	 * From here, all initialization are BLE application specific
	 */
	AdvUpdateProcessId = osThreadNew(AdvUpdateProcess, NULL, &AdvUpdateProcess_attr);
 800e1f2:	4a18      	ldr	r2, [pc, #96]	; (800e254 <APP_BLE_Init_Dyn_1+0xc0>)
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	4818      	ldr	r0, [pc, #96]	; (800e258 <APP_BLE_Init_Dyn_1+0xc4>)
 800e1f8:	f7fc f818 	bl	800a22c <osThreadNew>
 800e1fc:	4602      	mov	r2, r0
 800e1fe:	4b17      	ldr	r3, [pc, #92]	; (800e25c <APP_BLE_Init_Dyn_1+0xc8>)
 800e200:	601a      	str	r2, [r3, #0]
	//ST SW Engineers converted the below statement to a FreeRTOS-friendly function: Adv_Request()
	//  UTIL_SEQ_RegTask( 1<<CFG_TASK_START_ADV_ID, UTIL_SEQ_RFU, Adv_Request);
	/**
	 * Create timer for Data Throughput process (write data)
	 */
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(TimerDataThroughputWrite_Id), hw_ts_SingleShot, DataThroughput_proc);
 800e202:	4b17      	ldr	r3, [pc, #92]	; (800e260 <APP_BLE_Init_Dyn_1+0xcc>)
 800e204:	2200      	movs	r2, #0
 800e206:	4917      	ldr	r1, [pc, #92]	; (800e264 <APP_BLE_Init_Dyn_1+0xd0>)
 800e208:	2000      	movs	r0, #0
 800e20a:	f7f3 fd2f 	bl	8001c6c <HW_TS_Create>
	//  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
	//  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_UPDATE_ID, UTIL_SEQ_RFU, Connection_Update);
#endif


	LinkConfigProcessId= osThreadNew(LinkConfiguration, NULL, &LinkConfigProcess_attr);
 800e20e:	4a16      	ldr	r2, [pc, #88]	; (800e268 <APP_BLE_Init_Dyn_1+0xd4>)
 800e210:	2100      	movs	r1, #0
 800e212:	4816      	ldr	r0, [pc, #88]	; (800e26c <APP_BLE_Init_Dyn_1+0xd8>)
 800e214:	f7fc f80a 	bl	800a22c <osThreadNew>
 800e218:	4602      	mov	r2, r0
 800e21a:	4b15      	ldr	r3, [pc, #84]	; (800e270 <APP_BLE_Init_Dyn_1+0xdc>)
 800e21c:	601a      	str	r2, [r3, #0]

	BleApplicationContext.DeviceServerFound = NO_DEVICE_FOUND;
 800e21e:	4b15      	ldr	r3, [pc, #84]	; (800e274 <APP_BLE_Init_Dyn_1+0xe0>)
 800e220:	2200      	movs	r2, #0
 800e222:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

	/**
	 * Clear DataBase
	 */
	aci_gap_clear_security_db();
 800e226:	f7f9 fb0b 	bl	8007840 <aci_gap_clear_security_db>
	 * Initialize Data Client (this shouldn''t ideally happen but some of ST's example code for server
	 * relies on functions within this function)
	 * todo: rip out what's needed and fold it into DTS_App_Init()
	 */

	DTC_App_Init();
 800e22a:	f000 fdf9 	bl	800ee20 <DTC_App_Init>

	/**
	 * Initialize Data Server (GATT SERVER)
	 */

	DTS_App_Init();
 800e22e:	f001 f8f5 	bl	800f41c <DTS_App_Init>
#endif
	/**
	 * Create timer to handle the Led Switch OFF
	 */
	//  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
	return;
 800e232:	bf00      	nop
}
 800e234:	3730      	adds	r7, #48	; 0x30
 800e236:	46bd      	mov	sp, r7
 800e238:	bdb0      	pop	{r4, r5, r7, pc}
 800e23a:	bf00      	nop
 800e23c:	080119ac 	.word	0x080119ac
 800e240:	080128e8 	.word	0x080128e8
 800e244:	0800eb13 	.word	0x0800eb13
 800e248:	20006d30 	.word	0x20006d30
 800e24c:	20006d49 	.word	0x20006d49
 800e250:	20006d48 	.word	0x20006d48
 800e254:	080128c4 	.word	0x080128c4
 800e258:	0800eaeb 	.word	0x0800eaeb
 800e25c:	20006d6c 	.word	0x20006d6c
 800e260:	0800eb2d 	.word	0x0800eb2d
 800e264:	20006d58 	.word	0x20006d58
 800e268:	0801290c 	.word	0x0801290c
 800e26c:	0800eb45 	.word	0x0800eb45
 800e270:	20006d3c 	.word	0x20006d3c
 800e274:	20000198 	.word	0x20000198

0800e278 <APP_BLE_Init_Dyn_2>:

void APP_BLE_Init_Dyn_2( void ) {
 800e278:	b580      	push	{r7, lr}
 800e27a:	af00      	add	r7, sp, #0
	//   * Make device discoverable
	//   */
	//  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL; //TODO: the heartbeat example uses: AD_TYPE_16_BIT_SERV_UUID
	//  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
	//  /* Initialize intervals for reconnexion without intervals update */
	AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800e27c:	4b06      	ldr	r3, [pc, #24]	; (800e298 <APP_BLE_Init_Dyn_2+0x20>)
 800e27e:	2280      	movs	r2, #128	; 0x80
 800e280:	801a      	strh	r2, [r3, #0]
	AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800e282:	4b06      	ldr	r3, [pc, #24]	; (800e29c <APP_BLE_Init_Dyn_2+0x24>)
 800e284:	22a0      	movs	r2, #160	; 0xa0
 800e286:	801a      	strh	r2, [r3, #0]
	 * Start to Advertise to be connected by P2P Client
	 */
#ifndef DYNAMIC_MODE
	Adv_Request(APP_BLE_FAST_ADV);
#else
	osThreadFlagsSet(AdvUpdateProcessId, 1);
 800e288:	4b05      	ldr	r3, [pc, #20]	; (800e2a0 <APP_BLE_Init_Dyn_2+0x28>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	2101      	movs	r1, #1
 800e28e:	4618      	mov	r0, r3
 800e290:	f7fc f872 	bl	800a378 <osThreadFlagsSet>
//	Adv_Request(APP_BLE_LP_ADV);
#endif
	/* USER CODE BEGIN APP_BLE_Init_2 */

	/* USER CODE END APP_BLE_Init_2 */
	return;
 800e294:	bf00      	nop
}
 800e296:	bd80      	pop	{r7, pc}
 800e298:	2000022c 	.word	0x2000022c
 800e29c:	2000022e 	.word	0x2000022e
 800e2a0:	20006d6c 	.word	0x20006d6c

0800e2a4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800e2a4:	b590      	push	{r4, r7, lr}
 800e2a6:	b093      	sub	sp, #76	; 0x4c
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
	hci_le_connection_complete_event_rp0 * connection_complete_event;
	hci_le_advertising_report_event_rp0 * le_advertising_event;
	hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
	hci_le_connection_update_complete_event_rp0 *connection_update_complete;
	uint8_t event_type, event_data_size;
	int k = 0;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t adtype, adlength;
	uint8_t *adv_report_data;
	float Connection_Interval;
	float Supervision_Timeout;

	event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	643b      	str	r3, [r7, #64]	; 0x40

	switch (event_pckt->evt)
 800e2b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	2b3e      	cmp	r3, #62	; 0x3e
 800e2bc:	d02b      	beq.n	800e316 <SVCCTL_App_Notification+0x72>
 800e2be:	2bff      	cmp	r3, #255	; 0xff
 800e2c0:	f000 8198 	beq.w	800e5f4 <SVCCTL_App_Notification+0x350>
 800e2c4:	2b05      	cmp	r3, #5
 800e2c6:	d000      	beq.n	800e2ca <SVCCTL_App_Notification+0x26>

		default:
			/* USER CODE BEGIN ECODE_DEFAULT*/

			/* USER CODE END ECODE_DEFAULT*/
			break;
 800e2c8:	e218      	b.n	800e6fc <SVCCTL_App_Notification+0x458>
		disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800e2ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2cc:	3302      	adds	r3, #2
 800e2ce:	60fb      	str	r3, [r7, #12]
		if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e2d6:	b29a      	uxth	r2, r3
 800e2d8:	4bb5      	ldr	r3, [pc, #724]	; (800e5b0 <SVCCTL_App_Notification+0x30c>)
 800e2da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d109      	bne.n	800e2f4 <SVCCTL_App_Notification+0x50>
			BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800e2e0:	4bb3      	ldr	r3, [pc, #716]	; (800e5b0 <SVCCTL_App_Notification+0x30c>)
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	84da      	strh	r2, [r3, #38]	; 0x26
			BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800e2e6:	4bb2      	ldr	r3, [pc, #712]	; (800e5b0 <SVCCTL_App_Notification+0x30c>)
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 800e2ee:	48b1      	ldr	r0, [pc, #708]	; (800e5b4 <SVCCTL_App_Notification+0x310>)
 800e2f0:	f002 f912 	bl	8010518 <puts>
		osThreadFlagsSet(AdvUpdateProcessId, 1);
 800e2f4:	4bb0      	ldr	r3, [pc, #704]	; (800e5b8 <SVCCTL_App_Notification+0x314>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2101      	movs	r1, #1
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7fc f83c 	bl	800a378 <osThreadFlagsSet>
		handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800e300:	4bae      	ldr	r3, [pc, #696]	; (800e5bc <SVCCTL_App_Notification+0x318>)
 800e302:	2201      	movs	r2, #1
 800e304:	701a      	strb	r2, [r3, #0]
		handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800e306:	4baa      	ldr	r3, [pc, #680]	; (800e5b0 <SVCCTL_App_Notification+0x30c>)
 800e308:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800e30a:	4bac      	ldr	r3, [pc, #688]	; (800e5bc <SVCCTL_App_Notification+0x318>)
 800e30c:	805a      	strh	r2, [r3, #2]
		P2PS_APP_Notification(&handleNotification);
 800e30e:	48ab      	ldr	r0, [pc, #684]	; (800e5bc <SVCCTL_App_Notification+0x318>)
 800e310:	f001 fbf2 	bl	800faf8 <P2PS_APP_Notification>
	break; /* EVT_DISCONN_COMPLETE */
 800e314:	e1f2      	b.n	800e6fc <SVCCTL_App_Notification+0x458>
		meta_evt = (evt_le_meta_event*) event_pckt->data;
 800e316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e318:	3302      	adds	r3, #2
 800e31a:	637b      	str	r3, [r7, #52]	; 0x34
		switch (meta_evt->subevent)
 800e31c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	3b01      	subs	r3, #1
 800e322:	2b0b      	cmp	r3, #11
 800e324:	f200 8140 	bhi.w	800e5a8 <SVCCTL_App_Notification+0x304>
 800e328:	a201      	add	r2, pc, #4	; (adr r2, 800e330 <SVCCTL_App_Notification+0x8c>)
 800e32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e32e:	bf00      	nop
 800e330:	0800e417 	.word	0x0800e417
 800e334:	0800e4c1 	.word	0x0800e4c1
 800e338:	0800e385 	.word	0x0800e385
 800e33c:	0800e5a9 	.word	0x0800e5a9
 800e340:	0800e5a9 	.word	0x0800e5a9
 800e344:	0800e5a9 	.word	0x0800e5a9
 800e348:	0800e5a9 	.word	0x0800e5a9
 800e34c:	0800e5a9 	.word	0x0800e5a9
 800e350:	0800e5a9 	.word	0x0800e5a9
 800e354:	0800e5a9 	.word	0x0800e5a9
 800e358:	0800e5a9 	.word	0x0800e5a9
 800e35c:	0800e361 	.word	0x0800e361
			evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800e360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e362:	3301      	adds	r3, #1
 800e364:	633b      	str	r3, [r7, #48]	; 0x30
			if (evt_le_phy_update_complete->Status == 0)
 800e366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d103      	bne.n	800e376 <SVCCTL_App_Notification+0xd2>
				APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, success \n");
 800e36e:	4894      	ldr	r0, [pc, #592]	; (800e5c0 <SVCCTL_App_Notification+0x31c>)
 800e370:	f002 f8d2 	bl	8010518 <puts>
			break;
 800e374:	e11b      	b.n	800e5ae <SVCCTL_App_Notification+0x30a>
				APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, failure %d \n", evt_le_phy_update_complete->Status);
 800e376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	4619      	mov	r1, r3
 800e37c:	4891      	ldr	r0, [pc, #580]	; (800e5c4 <SVCCTL_App_Notification+0x320>)
 800e37e:	f002 f857 	bl	8010430 <iprintf>
			break;
 800e382:	e114      	b.n	800e5ae <SVCCTL_App_Notification+0x30a>
			mutex = 1;
 800e384:	4b90      	ldr	r3, [pc, #576]	; (800e5c8 <SVCCTL_App_Notification+0x324>)
 800e386:	2201      	movs	r2, #1
 800e388:	701a      	strb	r2, [r3, #0]
			connection_update_complete = (hci_le_connection_update_complete_event_rp0*)meta_evt->data;
 800e38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e38c:	3301      	adds	r3, #1
 800e38e:	62fb      	str	r3, [r7, #44]	; 0x2c
			APP_DBG_MSG("EVT_LE_CONN_UPDATE_COMPLETE \n");
 800e390:	488e      	ldr	r0, [pc, #568]	; (800e5cc <SVCCTL_App_Notification+0x328>)
 800e392:	f002 f8c1 	bl	8010518 <puts>
			Connection_Interval = connection_update_complete->Conn_Interval * 1.25;
 800e396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e398:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7f2 f8a8 	bl	80004f4 <__aeabi_i2d>
 800e3a4:	f04f 0200 	mov.w	r2, #0
 800e3a8:	4b89      	ldr	r3, [pc, #548]	; (800e5d0 <SVCCTL_App_Notification+0x32c>)
 800e3aa:	f7f2 f90d 	bl	80005c8 <__aeabi_dmul>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	460c      	mov	r4, r1
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	4621      	mov	r1, r4
 800e3b6:	f7f2 fb19 	bl	80009ec <__aeabi_d2f>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	62bb      	str	r3, [r7, #40]	; 0x28
			APP_DBG_MSG("interval= %.2f ms \n",Connection_Interval);
 800e3be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3c0:	f7f2 f8aa 	bl	8000518 <__aeabi_f2d>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	460c      	mov	r4, r1
 800e3c8:	461a      	mov	r2, r3
 800e3ca:	4623      	mov	r3, r4
 800e3cc:	4881      	ldr	r0, [pc, #516]	; (800e5d4 <SVCCTL_App_Notification+0x330>)
 800e3ce:	f002 f82f 	bl	8010430 <iprintf>
			APP_DBG_MSG("latency= 0x%x \n",connection_update_complete->Conn_Latency);
 800e3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	4619      	mov	r1, r3
 800e3dc:	487e      	ldr	r0, [pc, #504]	; (800e5d8 <SVCCTL_App_Notification+0x334>)
 800e3de:	f002 f827 	bl	8010430 <iprintf>
			Supervision_Timeout = connection_update_complete->Supervision_Timeout * 10;
 800e3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	4613      	mov	r3, r2
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	4413      	add	r3, r2
 800e3f2:	005b      	lsls	r3, r3, #1
 800e3f4:	ee07 3a90 	vmov	s15, r3
 800e3f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3fc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			APP_DBG_MSG("supervision_timeout= %.2f ms \n",Supervision_Timeout);
 800e400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e402:	f7f2 f889 	bl	8000518 <__aeabi_f2d>
 800e406:	4603      	mov	r3, r0
 800e408:	460c      	mov	r4, r1
 800e40a:	461a      	mov	r2, r3
 800e40c:	4623      	mov	r3, r4
 800e40e:	4873      	ldr	r0, [pc, #460]	; (800e5dc <SVCCTL_App_Notification+0x338>)
 800e410:	f002 f80e 	bl	8010430 <iprintf>
			break;
 800e414:	e0cb      	b.n	800e5ae <SVCCTL_App_Notification+0x30a>
			connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800e416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e418:	3301      	adds	r3, #1
 800e41a:	613b      	str	r3, [r7, #16]
			BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e422:	b29a      	uxth	r2, r3
 800e424:	4b62      	ldr	r3, [pc, #392]	; (800e5b0 <SVCCTL_App_Notification+0x30c>)
 800e426:	84da      	strh	r2, [r3, #38]	; 0x26
			APP_DBG_MSG("EVT_LE_CONN_COMPLETE connection as slave\n");
 800e428:	486d      	ldr	r0, [pc, #436]	; (800e5e0 <SVCCTL_App_Notification+0x33c>)
 800e42a:	f002 f875 	bl	8010518 <puts>
			Connection_Interval = connection_complete_event->Conn_Interval * 1.25;
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800e434:	b29b      	uxth	r3, r3
 800e436:	4618      	mov	r0, r3
 800e438:	f7f2 f85c 	bl	80004f4 <__aeabi_i2d>
 800e43c:	f04f 0200 	mov.w	r2, #0
 800e440:	4b63      	ldr	r3, [pc, #396]	; (800e5d0 <SVCCTL_App_Notification+0x32c>)
 800e442:	f7f2 f8c1 	bl	80005c8 <__aeabi_dmul>
 800e446:	4603      	mov	r3, r0
 800e448:	460c      	mov	r4, r1
 800e44a:	4618      	mov	r0, r3
 800e44c:	4621      	mov	r1, r4
 800e44e:	f7f2 facd 	bl	80009ec <__aeabi_d2f>
 800e452:	4603      	mov	r3, r0
 800e454:	62bb      	str	r3, [r7, #40]	; 0x28
			APP_DBG_MSG("EVT_LE_CONN_COMPLETE connection as slave\n");
 800e456:	4862      	ldr	r0, [pc, #392]	; (800e5e0 <SVCCTL_App_Notification+0x33c>)
 800e458:	f002 f85e 	bl	8010518 <puts>
			APP_DBG_MSG("interval= %.2f ms \n",Connection_Interval);
 800e45c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e45e:	f7f2 f85b 	bl	8000518 <__aeabi_f2d>
 800e462:	4603      	mov	r3, r0
 800e464:	460c      	mov	r4, r1
 800e466:	461a      	mov	r2, r3
 800e468:	4623      	mov	r3, r4
 800e46a:	485a      	ldr	r0, [pc, #360]	; (800e5d4 <SVCCTL_App_Notification+0x330>)
 800e46c:	f001 ffe0 	bl	8010430 <iprintf>
			APP_DBG_MSG("latency= 0x%x \n",connection_complete_event->Conn_Latency);
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800e476:	b29b      	uxth	r3, r3
 800e478:	4619      	mov	r1, r3
 800e47a:	4857      	ldr	r0, [pc, #348]	; (800e5d8 <SVCCTL_App_Notification+0x334>)
 800e47c:	f001 ffd8 	bl	8010430 <iprintf>
			Supervision_Timeout = connection_complete_event->Supervision_Timeout * 10;
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800e486:	b29b      	uxth	r3, r3
 800e488:	461a      	mov	r2, r3
 800e48a:	4613      	mov	r3, r2
 800e48c:	009b      	lsls	r3, r3, #2
 800e48e:	4413      	add	r3, r2
 800e490:	005b      	lsls	r3, r3, #1
 800e492:	ee07 3a90 	vmov	s15, r3
 800e496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e49a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			APP_DBG_MSG("supervision_timeout= %.2f ms \n",Supervision_Timeout);
 800e49e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4a0:	f7f2 f83a 	bl	8000518 <__aeabi_f2d>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	460c      	mov	r4, r1
 800e4a8:	461a      	mov	r2, r3
 800e4aa:	4623      	mov	r3, r4
 800e4ac:	484b      	ldr	r0, [pc, #300]	; (800e5dc <SVCCTL_App_Notification+0x338>)
 800e4ae:	f001 ffbf 	bl	8010430 <iprintf>
			osThreadFlagsSet( LinkConfigProcessId, 1 );
 800e4b2:	4b4c      	ldr	r3, [pc, #304]	; (800e5e4 <SVCCTL_App_Notification+0x340>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	2101      	movs	r1, #1
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7fb ff5d 	bl	800a378 <osThreadFlagsSet>
		break; /* HCI_EVT_LE_CONN_COMPLETE */
 800e4be:	e076      	b.n	800e5ae <SVCCTL_App_Notification+0x30a>
			le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 800e4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	623b      	str	r3, [r7, #32]
			event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 800e4c6:	6a3b      	ldr	r3, [r7, #32]
 800e4c8:	785b      	ldrb	r3, [r3, #1]
 800e4ca:	77fb      	strb	r3, [r7, #31]
			event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 800e4cc:	6a3b      	ldr	r3, [r7, #32]
 800e4ce:	7a5b      	ldrb	r3, [r3, #9]
 800e4d0:	77bb      	strb	r3, [r7, #30]
			adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 800e4d2:	6a3b      	ldr	r3, [r7, #32]
 800e4d4:	3309      	adds	r3, #9
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	61bb      	str	r3, [r7, #24]
			k = 0;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	647b      	str	r3, [r7, #68]	; 0x44
			if (event_type == ADV_IND)
 800e4de:	7ffb      	ldrb	r3, [r7, #31]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d163      	bne.n	800e5ac <SVCCTL_App_Notification+0x308>
				while(k < event_data_size)
 800e4e4:	e05b      	b.n	800e59e <SVCCTL_App_Notification+0x2fa>
					adlength = adv_report_data[k];
 800e4e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4e8:	69ba      	ldr	r2, [r7, #24]
 800e4ea:	4413      	add	r3, r2
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	75fb      	strb	r3, [r7, #23]
					adtype = adv_report_data[k + 1];
 800e4f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	69ba      	ldr	r2, [r7, #24]
 800e4f6:	4413      	add	r3, r2
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	75bb      	strb	r3, [r7, #22]
					switch (adtype)
 800e4fc:	7dbb      	ldrb	r3, [r7, #22]
 800e4fe:	2b0a      	cmp	r3, #10
 800e500:	d043      	beq.n	800e58a <SVCCTL_App_Notification+0x2e6>
 800e502:	2b0a      	cmp	r3, #10
 800e504:	dc02      	bgt.n	800e50c <SVCCTL_App_Notification+0x268>
 800e506:	2b01      	cmp	r3, #1
 800e508:	d041      	beq.n	800e58e <SVCCTL_App_Notification+0x2ea>
						break;
 800e50a:	e043      	b.n	800e594 <SVCCTL_App_Notification+0x2f0>
					switch (adtype)
 800e50c:	2b16      	cmp	r3, #22
 800e50e:	d040      	beq.n	800e592 <SVCCTL_App_Notification+0x2ee>
 800e510:	2bff      	cmp	r3, #255	; 0xff
 800e512:	d000      	beq.n	800e516 <SVCCTL_App_Notification+0x272>
						break;
 800e514:	e03e      	b.n	800e594 <SVCCTL_App_Notification+0x2f0>
						if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 800e516:	7dfb      	ldrb	r3, [r7, #23]
 800e518:	2b06      	cmp	r3, #6
 800e51a:	d934      	bls.n	800e586 <SVCCTL_App_Notification+0x2e2>
 800e51c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e51e:	3302      	adds	r3, #2
 800e520:	69ba      	ldr	r2, [r7, #24]
 800e522:	4413      	add	r3, r2
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	2b01      	cmp	r3, #1
 800e528:	d12d      	bne.n	800e586 <SVCCTL_App_Notification+0x2e2>
							APP_DBG_MSG("--- ST MANUFACTURER ID --- \n");
 800e52a:	482f      	ldr	r0, [pc, #188]	; (800e5e8 <SVCCTL_App_Notification+0x344>)
 800e52c:	f001 fff4 	bl	8010518 <puts>
							switch (adv_report_data[k + 3])
 800e530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e532:	3303      	adds	r3, #3
 800e534:	69ba      	ldr	r2, [r7, #24]
 800e536:	4413      	add	r3, r2
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	2b88      	cmp	r3, #136	; 0x88
 800e53c:	d000      	beq.n	800e540 <SVCCTL_App_Notification+0x29c>
								break;
 800e53e:	e023      	b.n	800e588 <SVCCTL_App_Notification+0x2e4>
								APP_DBG_MSG("-- SERVER DETECTED -- VIA MAN ID\n");
 800e540:	482a      	ldr	r0, [pc, #168]	; (800e5ec <SVCCTL_App_Notification+0x348>)
 800e542:	f001 ffe9 	bl	8010518 <puts>
								BleApplicationContext.DeviceServerFound = AT_LEAST_ONE_DEVICE_FOUND;
 800e546:	4b1a      	ldr	r3, [pc, #104]	; (800e5b0 <SVCCTL_App_Notification+0x30c>)
 800e548:	2201      	movs	r2, #1
 800e54a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
								SERVER_REMOTE_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 800e54e:	6a3b      	ldr	r3, [r7, #32]
 800e550:	78da      	ldrb	r2, [r3, #3]
 800e552:	4b27      	ldr	r3, [pc, #156]	; (800e5f0 <SVCCTL_App_Notification+0x34c>)
 800e554:	701a      	strb	r2, [r3, #0]
								SERVER_REMOTE_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800e556:	6a3b      	ldr	r3, [r7, #32]
 800e558:	791a      	ldrb	r2, [r3, #4]
 800e55a:	4b25      	ldr	r3, [pc, #148]	; (800e5f0 <SVCCTL_App_Notification+0x34c>)
 800e55c:	705a      	strb	r2, [r3, #1]
								SERVER_REMOTE_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 800e55e:	6a3b      	ldr	r3, [r7, #32]
 800e560:	795a      	ldrb	r2, [r3, #5]
 800e562:	4b23      	ldr	r3, [pc, #140]	; (800e5f0 <SVCCTL_App_Notification+0x34c>)
 800e564:	709a      	strb	r2, [r3, #2]
								SERVER_REMOTE_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 800e566:	6a3b      	ldr	r3, [r7, #32]
 800e568:	799a      	ldrb	r2, [r3, #6]
 800e56a:	4b21      	ldr	r3, [pc, #132]	; (800e5f0 <SVCCTL_App_Notification+0x34c>)
 800e56c:	70da      	strb	r2, [r3, #3]
								SERVER_REMOTE_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 800e56e:	6a3b      	ldr	r3, [r7, #32]
 800e570:	79da      	ldrb	r2, [r3, #7]
 800e572:	4b1f      	ldr	r3, [pc, #124]	; (800e5f0 <SVCCTL_App_Notification+0x34c>)
 800e574:	711a      	strb	r2, [r3, #4]
								SERVER_REMOTE_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 800e576:	6a3b      	ldr	r3, [r7, #32]
 800e578:	7a1a      	ldrb	r2, [r3, #8]
 800e57a:	4b1d      	ldr	r3, [pc, #116]	; (800e5f0 <SVCCTL_App_Notification+0x34c>)
 800e57c:	715a      	strb	r2, [r3, #5]
								aci_gap_terminate_gap_proc(GAP_GENERAL_DISCOVERY_PROC);
 800e57e:	2002      	movs	r0, #2
 800e580:	f7f9 f982 	bl	8007888 <aci_gap_terminate_gap_proc>
								break;
 800e584:	e000      	b.n	800e588 <SVCCTL_App_Notification+0x2e4>
						}
 800e586:	bf00      	nop
						break;
 800e588:	e004      	b.n	800e594 <SVCCTL_App_Notification+0x2f0>
						break;
 800e58a:	bf00      	nop
 800e58c:	e002      	b.n	800e594 <SVCCTL_App_Notification+0x2f0>
					break;
 800e58e:	bf00      	nop
 800e590:	e000      	b.n	800e594 <SVCCTL_App_Notification+0x2f0>
						break;
 800e592:	bf00      	nop
					k += adlength + 1;
 800e594:	7dfb      	ldrb	r3, [r7, #23]
 800e596:	3301      	adds	r3, #1
 800e598:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e59a:	4413      	add	r3, r2
 800e59c:	647b      	str	r3, [r7, #68]	; 0x44
				while(k < event_data_size)
 800e59e:	7fbb      	ldrb	r3, [r7, #30]
 800e5a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	db9f      	blt.n	800e4e6 <SVCCTL_App_Notification+0x242>
			break;
 800e5a6:	e001      	b.n	800e5ac <SVCCTL_App_Notification+0x308>
			break;
 800e5a8:	bf00      	nop
 800e5aa:	e0a7      	b.n	800e6fc <SVCCTL_App_Notification+0x458>
			break;
 800e5ac:	bf00      	nop
	break; /* HCI_EVT_LE_META_EVENT */
 800e5ae:	e0a5      	b.n	800e6fc <SVCCTL_App_Notification+0x458>
 800e5b0:	20000198 	.word	0x20000198
 800e5b4:	080119dc 	.word	0x080119dc
 800e5b8:	20006d6c 	.word	0x20006d6c
 800e5bc:	20006d38 	.word	0x20006d38
 800e5c0:	08011a04 	.word	0x08011a04
 800e5c4:	08011a28 	.word	0x08011a28
 800e5c8:	20006d48 	.word	0x20006d48
 800e5cc:	08011a50 	.word	0x08011a50
 800e5d0:	3ff40000 	.word	0x3ff40000
 800e5d4:	08011a70 	.word	0x08011a70
 800e5d8:	08011a84 	.word	0x08011a84
 800e5dc:	08011a94 	.word	0x08011a94
 800e5e0:	08011ab4 	.word	0x08011ab4
 800e5e4:	20006d3c 	.word	0x20006d3c
 800e5e8:	08011ae0 	.word	0x08011ae0
 800e5ec:	08011afc 	.word	0x08011afc
 800e5f0:	20006d4c 	.word	0x20006d4c
		blue_evt = (evt_blue_aci*) event_pckt->data;
 800e5f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5f6:	3302      	adds	r3, #2
 800e5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		switch (blue_evt->ecode)
 800e5fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5fc:	881b      	ldrh	r3, [r3, #0]
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	f240 4207 	movw	r2, #1031	; 0x407
 800e604:	4293      	cmp	r3, r2
 800e606:	d056      	beq.n	800e6b6 <SVCCTL_App_Notification+0x412>
 800e608:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800e60c:	da08      	bge.n	800e620 <SVCCTL_App_Notification+0x37c>
 800e60e:	f240 4201 	movw	r2, #1025	; 0x401
 800e612:	4293      	cmp	r3, r2
 800e614:	d010      	beq.n	800e638 <SVCCTL_App_Notification+0x394>
 800e616:	f240 4202 	movw	r2, #1026	; 0x402
 800e61a:	4293      	cmp	r3, r2
 800e61c:	d016      	beq.n	800e64c <SVCCTL_App_Notification+0x3a8>
		break; /* EVT_VENDOR */
 800e61e:	e06c      	b.n	800e6fa <SVCCTL_App_Notification+0x456>
		switch (blue_evt->ecode)
 800e620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e624:	d043      	beq.n	800e6ae <SVCCTL_App_Notification+0x40a>
 800e626:	f640 4216 	movw	r2, #3094	; 0xc16
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d039      	beq.n	800e6a2 <SVCCTL_App_Notification+0x3fe>
 800e62e:	f240 4209 	movw	r2, #1033	; 0x409
 800e632:	4293      	cmp	r3, r2
 800e634:	d01a      	beq.n	800e66c <SVCCTL_App_Notification+0x3c8>
		break; /* EVT_VENDOR */
 800e636:	e060      	b.n	800e6fa <SVCCTL_App_Notification+0x456>
			APP_DBG_MSG("Pairing complete \n");
 800e638:	4833      	ldr	r0, [pc, #204]	; (800e708 <SVCCTL_App_Notification+0x464>)
 800e63a:	f001 ff6d 	bl	8010518 <puts>
			BSP_LED_On(LED_RED);
 800e63e:	2002      	movs	r0, #2
 800e640:	f7f3 fe72 	bl	8002328 <BSP_LED_On>
			BSP_LED_On(LED_BLUE);
 800e644:	2000      	movs	r0, #0
 800e646:	f7f3 fe6f 	bl	8002328 <BSP_LED_On>
			break;
 800e64a:	e056      	b.n	800e6fa <SVCCTL_App_Notification+0x456>
			APP_DBG_MSG("respond to the passkey request\n");
 800e64c:	482f      	ldr	r0, [pc, #188]	; (800e70c <SVCCTL_App_Notification+0x468>)
 800e64e:	f001 ff63 	bl	8010518 <puts>
			BSP_LED_On(LED_BLUE);
 800e652:	2000      	movs	r0, #0
 800e654:	f7f3 fe68 	bl	8002328 <BSP_LED_On>
			BSP_LED_On(LED_GREEN);
 800e658:	2001      	movs	r0, #1
 800e65a:	f7f3 fe65 	bl	8002328 <BSP_LED_On>
			aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 111111);
 800e65e:	4b2c      	ldr	r3, [pc, #176]	; (800e710 <SVCCTL_App_Notification+0x46c>)
 800e660:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e662:	492c      	ldr	r1, [pc, #176]	; (800e714 <SVCCTL_App_Notification+0x470>)
 800e664:	4618      	mov	r0, r3
 800e666:	f7f8 ff89 	bl	800757c <aci_gap_pass_key_resp>
			break;
 800e66a:	e046      	b.n	800e6fa <SVCCTL_App_Notification+0x456>
					   ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 800e66c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e66e:	3302      	adds	r3, #2
			   APP_DBG_MSG("Hex_value = %ld\n",
 800e670:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800e674:	4619      	mov	r1, r3
 800e676:	4828      	ldr	r0, [pc, #160]	; (800e718 <SVCCTL_App_Notification+0x474>)
 800e678:	f001 feda 	bl	8010430 <iprintf>
		BSP_LED_On(LED_RED);
 800e67c:	2002      	movs	r0, #2
 800e67e:	f7f3 fe53 	bl	8002328 <BSP_LED_On>
		BSP_LED_On(LED_BLUE);
 800e682:	2000      	movs	r0, #0
 800e684:	f7f3 fe50 	bl	8002328 <BSP_LED_On>
		BSP_LED_On(LED_GREEN);
 800e688:	2001      	movs	r0, #1
 800e68a:	f7f3 fe4d 	bl	8002328 <BSP_LED_On>
		aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 800e68e:	4b20      	ldr	r3, [pc, #128]	; (800e710 <SVCCTL_App_Notification+0x46c>)
 800e690:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e692:	2101      	movs	r1, #1
 800e694:	4618      	mov	r0, r3
 800e696:	f7f9 f941 	bl	800791c <aci_gap_numeric_comparison_value_confirm_yesno>
		APP_DBG_MSG("\r\n\r** aci_gap_numeric_comparison_value_confirm_yesno-->YES \n");
 800e69a:	4820      	ldr	r0, [pc, #128]	; (800e71c <SVCCTL_App_Notification+0x478>)
 800e69c:	f001 ff3c 	bl	8010518 <puts>
		break;
 800e6a0:	e02b      	b.n	800e6fa <SVCCTL_App_Notification+0x456>
			BSP_LED_On(LED_RED);
 800e6a2:	2002      	movs	r0, #2
 800e6a4:	f7f3 fe40 	bl	8002328 <BSP_LED_On>
			DTS_App_TxPoolAvailableNotification();
 800e6a8:	f000 fef6 	bl	800f498 <DTS_App_TxPoolAvailableNotification>
			break;
 800e6ac:	e025      	b.n	800e6fa <SVCCTL_App_Notification+0x456>
			mutex = 1;
 800e6ae:	4b1c      	ldr	r3, [pc, #112]	; (800e720 <SVCCTL_App_Notification+0x47c>)
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	701a      	strb	r2, [r3, #0]
			break;
 800e6b4:	e021      	b.n	800e6fa <SVCCTL_App_Notification+0x456>
			APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PROCEDURE_COMPLETE \n");
 800e6b6:	481b      	ldr	r0, [pc, #108]	; (800e724 <SVCCTL_App_Notification+0x480>)
 800e6b8:	f001 ff2e 	bl	8010518 <puts>
			aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blue_evt->data;
 800e6bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6be:	3302      	adds	r3, #2
 800e6c0:	63bb      	str	r3, [r7, #56]	; 0x38
			if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC)
 800e6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	2b02      	cmp	r3, #2
 800e6c8:	d116      	bne.n	800e6f8 <SVCCTL_App_Notification+0x454>
				if( gap_evt_proc_complete->Status != BLE_STATUS_SUCCESS )
 800e6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6cc:	785b      	ldrb	r3, [r3, #1]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d003      	beq.n	800e6da <SVCCTL_App_Notification+0x436>
					APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE FAILED\n");
 800e6d2:	4815      	ldr	r0, [pc, #84]	; (800e728 <SVCCTL_App_Notification+0x484>)
 800e6d4:	f001 ff20 	bl	8010518 <puts>
			break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800e6d8:	e00e      	b.n	800e6f8 <SVCCTL_App_Notification+0x454>
					BSP_LED_On(LED_RED);
 800e6da:	2002      	movs	r0, #2
 800e6dc:	f7f3 fe24 	bl	8002328 <BSP_LED_On>
					if (BleApplicationContext.DeviceServerFound != NO_DEVICE_FOUND)
 800e6e0:	4b0b      	ldr	r3, [pc, #44]	; (800e710 <SVCCTL_App_Notification+0x46c>)
 800e6e2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d003      	beq.n	800e6f2 <SVCCTL_App_Notification+0x44e>
						APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE COMPLETED\n");
 800e6ea:	4810      	ldr	r0, [pc, #64]	; (800e72c <SVCCTL_App_Notification+0x488>)
 800e6ec:	f001 ff14 	bl	8010518 <puts>
			break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800e6f0:	e002      	b.n	800e6f8 <SVCCTL_App_Notification+0x454>
						APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE COMPLETED WITH NO DEVICE FOUND\n");
 800e6f2:	480f      	ldr	r0, [pc, #60]	; (800e730 <SVCCTL_App_Notification+0x48c>)
 800e6f4:	f001 ff10 	bl	8010518 <puts>
			break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800e6f8:	bf00      	nop
		break; /* EVT_VENDOR */
 800e6fa:	bf00      	nop
	}

	return (SVCCTL_UserEvtFlowEnable);
 800e6fc:	2301      	movs	r3, #1
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	374c      	adds	r7, #76	; 0x4c
 800e702:	46bd      	mov	sp, r7
 800e704:	bd90      	pop	{r4, r7, pc}
 800e706:	bf00      	nop
 800e708:	08011b20 	.word	0x08011b20
 800e70c:	08011b34 	.word	0x08011b34
 800e710:	20000198 	.word	0x20000198
 800e714:	0001b207 	.word	0x0001b207
 800e718:	08011b54 	.word	0x08011b54
 800e71c:	08011b68 	.word	0x08011b68
 800e720:	20006d48 	.word	0x20006d48
 800e724:	08011ba4 	.word	0x08011ba4
 800e728:	08011bcc 	.word	0x08011bcc
 800e72c:	08011bf8 	.word	0x08011bf8
 800e730:	08011c28 	.word	0x08011c28

0800e734 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b082      	sub	sp, #8
 800e738:	af00      	add	r7, sp, #0
	HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

	Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800e73a:	4b06      	ldr	r3, [pc, #24]	; (800e754 <Ble_Tl_Init+0x20>)
 800e73c:	603b      	str	r3, [r7, #0]
	Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800e73e:	4b06      	ldr	r3, [pc, #24]	; (800e758 <Ble_Tl_Init+0x24>)
 800e740:	607b      	str	r3, [r7, #4]
	hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800e742:	463b      	mov	r3, r7
 800e744:	4619      	mov	r1, r3
 800e746:	4805      	ldr	r0, [pc, #20]	; (800e75c <Ble_Tl_Init+0x28>)
 800e748:	f7fa fa32 	bl	8008bb0 <hci_init>

	return;
 800e74c:	bf00      	nop
}
 800e74e:	3708      	adds	r7, #8
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}
 800e754:	200300d4 	.word	0x200300d4
 800e758:	0800ecfd 	.word	0x0800ecfd
 800e75c:	0800ecc5 	.word	0x0800ecc5

0800e760 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800e760:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e762:	b08f      	sub	sp, #60	; 0x3c
 800e764:	af06      	add	r7, sp, #24
	uint8_t role;
	uint8_t index;
	uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
	const uint8_t *bd_addr;
	uint32_t srd_bd_addr[2];
	uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800e766:	f44f 7350 	mov.w	r3, #832	; 0x340
 800e76a:	803b      	strh	r3, [r7, #0]

	/**
	 * Initialize HCI layer
	 */
	/*HCI Reset to synchronise BLE Stack*/
	hci_reset();
 800e76c:	f7f9 fe35 	bl	80083da <hci_reset>

	/**
	 * Write the BD Address
	 */

	bd_addr = BleGetBdAddress();
 800e770:	f000 f93c 	bl	800e9ec <BleGetBdAddress>
 800e774:	61f8      	str	r0, [r7, #28]
	aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800e776:	69fa      	ldr	r2, [r7, #28]
 800e778:	2106      	movs	r1, #6
 800e77a:	2000      	movs	r0, #0
 800e77c:	f7f9 fd6d 	bl	800825a <aci_hal_write_config_data>
	 * Static random Address
	 * The two upper bits shall be set to 1
	 * The lowest 32bits is read from the UDN to differentiate between devices
	 * The RNG may be used to provide a random number on each power on
	 */
	srd_bd_addr[1] =  0x0000ED6E;
 800e780:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800e784:	60bb      	str	r3, [r7, #8]
	srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800e786:	f7ff fce1 	bl	800e14c <LL_FLASH_GetUDN>
 800e78a:	4603      	mov	r3, r0
 800e78c:	607b      	str	r3, [r7, #4]
	aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800e78e:	1d3b      	adds	r3, r7, #4
 800e790:	461a      	mov	r2, r3
 800e792:	2106      	movs	r1, #6
 800e794:	202e      	movs	r0, #46	; 0x2e
 800e796:	f7f9 fd60 	bl	800825a <aci_hal_write_config_data>

	/**
	 * Write Identity root key used to derive LTK and CSRK
	 */
	aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800e79a:	4a3e      	ldr	r2, [pc, #248]	; (800e894 <Ble_Hci_Gap_Gatt_Init+0x134>)
 800e79c:	2110      	movs	r1, #16
 800e79e:	2018      	movs	r0, #24
 800e7a0:	f7f9 fd5b 	bl	800825a <aci_hal_write_config_data>

	/**
	 * Write Encryption root key used to derive LTK and CSRK
	 */
	aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800e7a4:	4a3c      	ldr	r2, [pc, #240]	; (800e898 <Ble_Hci_Gap_Gatt_Init+0x138>)
 800e7a6:	2110      	movs	r1, #16
 800e7a8:	2008      	movs	r0, #8
 800e7aa:	f7f9 fd56 	bl	800825a <aci_hal_write_config_data>

	/**
	 * Set TX Power to 0dBm.
	 */
	aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800e7ae:	2118      	movs	r1, #24
 800e7b0:	2001      	movs	r0, #1
 800e7b2:	f7f9 fdbb 	bl	800832c <aci_hal_set_tx_power_level>

	/**
	 * Initialize GATT interface
	 */
	aci_gatt_init();
 800e7b6:	f7f9 f908 	bl	80079ca <aci_gatt_init>

	/**
	 * Initialize GAP interface
	 */
	role = 0;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
	role |= GAP_PERIPHERAL_ROLE;
 800e7be:	7efb      	ldrb	r3, [r7, #27]
 800e7c0:	f043 0301 	orr.w	r3, r3, #1
 800e7c4:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
	role |= GAP_CENTRAL_ROLE;
#endif

	if (role > 0)
 800e7c6:	7efb      	ldrb	r3, [r7, #27]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d01e      	beq.n	800e80a <Ble_Hci_Gap_Gatt_Init+0xaa>
	{
		const char *name = "BLEcore";
 800e7cc:	4b33      	ldr	r3, [pc, #204]	; (800e89c <Ble_Hci_Gap_Gatt_Init+0x13c>)
 800e7ce:	617b      	str	r3, [r7, #20]
		aci_gap_init(role, 0,
 800e7d0:	f107 0212 	add.w	r2, r7, #18
 800e7d4:	7ef8      	ldrb	r0, [r7, #27]
 800e7d6:	f107 030e 	add.w	r3, r7, #14
 800e7da:	9301      	str	r3, [sp, #4]
 800e7dc:	f107 0310 	add.w	r3, r7, #16
 800e7e0:	9300      	str	r3, [sp, #0]
 800e7e2:	4613      	mov	r3, r2
 800e7e4:	2207      	movs	r2, #7
 800e7e6:	2100      	movs	r1, #0
 800e7e8:	f7f8 ff1f 	bl	800762a <aci_gap_init>
				APPBLE_GAP_DEVICE_NAME_LENGTH,
				&gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

		if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800e7ec:	8a7c      	ldrh	r4, [r7, #18]
 800e7ee:	8a3d      	ldrh	r5, [r7, #16]
 800e7f0:	6978      	ldr	r0, [r7, #20]
 800e7f2:	f7f1 fccf 	bl	8000194 <strlen>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	b2da      	uxtb	r2, r3
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	9300      	str	r3, [sp, #0]
 800e7fe:	4613      	mov	r3, r2
 800e800:	2200      	movs	r2, #0
 800e802:	4629      	mov	r1, r5
 800e804:	4620      	mov	r0, r4
 800e806:	f7f9 fa9e 	bl	8007d46 <aci_gatt_update_char_value>
		{
			BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
		}
	}

	if(aci_gatt_update_char_value(gap_service_handle,
 800e80a:	8a78      	ldrh	r0, [r7, #18]
 800e80c:	89f9      	ldrh	r1, [r7, #14]
 800e80e:	463b      	mov	r3, r7
 800e810:	9300      	str	r3, [sp, #0]
 800e812:	2302      	movs	r3, #2
 800e814:	2200      	movs	r2, #0
 800e816:	f7f9 fa96 	bl	8007d46 <aci_gatt_update_char_value>
	//  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);

	/**
	 * Initialize IO capability
	 */
	BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800e81a:	4b21      	ldr	r3, [pc, #132]	; (800e8a0 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800e81c:	2201      	movs	r2, #1
 800e81e:	701a      	strb	r2, [r3, #0]
	aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800e820:	4b1f      	ldr	r3, [pc, #124]	; (800e8a0 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	4618      	mov	r0, r3
 800e826:	f7f8 fdb7 	bl	8007398 <aci_gap_set_io_capability>
	//                                         BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
	//                                         BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
	//                                         BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
	//                                         0
	//  );
	BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800e82a:	4b1d      	ldr	r3, [pc, #116]	; (800e8a0 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800e82c:	2201      	movs	r2, #1
 800e82e:	705a      	strb	r2, [r3, #1]
	BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800e830:	4b1b      	ldr	r3, [pc, #108]	; (800e8a0 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800e832:	2208      	movs	r2, #8
 800e834:	755a      	strb	r2, [r3, #21]
	BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800e836:	4b1a      	ldr	r3, [pc, #104]	; (800e8a0 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800e838:	2210      	movs	r2, #16
 800e83a:	759a      	strb	r2, [r3, #22]
	BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800e83c:	4b18      	ldr	r3, [pc, #96]	; (800e8a0 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800e83e:	2200      	movs	r2, #0
 800e840:	751a      	strb	r2, [r3, #20]
	BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800e842:	4b17      	ldr	r3, [pc, #92]	; (800e8a0 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800e844:	4a17      	ldr	r2, [pc, #92]	; (800e8a4 <Ble_Hci_Gap_Gatt_Init+0x144>)
 800e846:	619a      	str	r2, [r3, #24]
	BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800e848:	4b15      	ldr	r3, [pc, #84]	; (800e8a0 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800e84a:	2201      	movs	r2, #1
 800e84c:	709a      	strb	r2, [r3, #2]

	aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800e84e:	4b14      	ldr	r3, [pc, #80]	; (800e8a0 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800e850:	789d      	ldrb	r5, [r3, #2]
 800e852:	4b13      	ldr	r3, [pc, #76]	; (800e8a0 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800e854:	785e      	ldrb	r6, [r3, #1]
 800e856:	4b12      	ldr	r3, [pc, #72]	; (800e8a0 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800e858:	7d5b      	ldrb	r3, [r3, #21]
 800e85a:	4a11      	ldr	r2, [pc, #68]	; (800e8a0 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800e85c:	7d92      	ldrb	r2, [r2, #22]
 800e85e:	4910      	ldr	r1, [pc, #64]	; (800e8a0 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800e860:	7d09      	ldrb	r1, [r1, #20]
 800e862:	480f      	ldr	r0, [pc, #60]	; (800e8a0 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800e864:	6980      	ldr	r0, [r0, #24]
 800e866:	2400      	movs	r4, #0
 800e868:	9404      	str	r4, [sp, #16]
 800e86a:	9003      	str	r0, [sp, #12]
 800e86c:	9102      	str	r1, [sp, #8]
 800e86e:	9201      	str	r2, [sp, #4]
 800e870:	9300      	str	r3, [sp, #0]
 800e872:	2300      	movs	r3, #0
 800e874:	2201      	movs	r2, #1
 800e876:	4631      	mov	r1, r6
 800e878:	4628      	mov	r0, r5
 800e87a:	f7f8 fdd7 	bl	800742c <aci_gap_set_authentication_requirement>
	);

	/**
	 * Initialize whitelist
	 */
	 if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800e87e:	4b08      	ldr	r3, [pc, #32]	; (800e8a0 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800e880:	789b      	ldrb	r3, [r3, #2]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d001      	beq.n	800e88a <Ble_Hci_Gap_Gatt_Init+0x12a>
	 {
		 aci_gap_configure_whitelist();
 800e886:	f7f8 ffb7 	bl	80077f8 <aci_gap_configure_whitelist>
	 }
}
 800e88a:	bf00      	nop
 800e88c:	3724      	adds	r7, #36	; 0x24
 800e88e:	46bd      	mov	sp, r7
 800e890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e892:	bf00      	nop
 800e894:	08012880 	.word	0x08012880
 800e898:	08012890 	.word	0x08012890
 800e89c:	08011c80 	.word	0x08011c80
 800e8a0:	20000198 	.word	0x20000198
 800e8a4:	0001b207 	.word	0x0001b207

0800e8a8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b08c      	sub	sp, #48	; 0x30
 800e8ac:	af08      	add	r7, sp, #32
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	71fb      	strb	r3, [r7, #7]
	tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e8b2:	2342      	movs	r3, #66	; 0x42
 800e8b4:	73fb      	strb	r3, [r7, #15]
	uint16_t Min_Inter, Max_Inter;

	if (New_Status == APP_BLE_FAST_ADV)
 800e8b6:	79fb      	ldrb	r3, [r7, #7]
 800e8b8:	2b01      	cmp	r3, #1
 800e8ba:	d106      	bne.n	800e8ca <Adv_Request+0x22>
	{
		Min_Inter = AdvIntervalMin;
 800e8bc:	4b3e      	ldr	r3, [pc, #248]	; (800e9b8 <Adv_Request+0x110>)
 800e8be:	881b      	ldrh	r3, [r3, #0]
 800e8c0:	81bb      	strh	r3, [r7, #12]
		Max_Inter = AdvIntervalMax;
 800e8c2:	4b3e      	ldr	r3, [pc, #248]	; (800e9bc <Adv_Request+0x114>)
 800e8c4:	881b      	ldrh	r3, [r3, #0]
 800e8c6:	817b      	strh	r3, [r7, #10]
 800e8c8:	e005      	b.n	800e8d6 <Adv_Request+0x2e>
	}
	else
	{
		Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800e8ca:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800e8ce:	81bb      	strh	r3, [r7, #12]
		Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800e8d0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800e8d4:	817b      	strh	r3, [r7, #10]

	/**
	 * Stop the timer, it will be restarted for a new shot
	 * It does not hurt if the timer was not running
	 */
	HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800e8d6:	4b3a      	ldr	r3, [pc, #232]	; (800e9c0 <Adv_Request+0x118>)
 800e8d8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7f3 fa3b 	bl	8001d58 <HW_TS_Stop>

	APP_DBG_MSG("First index in %d state \n",
			BleApplicationContext.Device_Connection_Status);
 800e8e2:	4b37      	ldr	r3, [pc, #220]	; (800e9c0 <Adv_Request+0x118>)
 800e8e4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
	APP_DBG_MSG("First index in %d state \n",
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	4836      	ldr	r0, [pc, #216]	; (800e9c4 <Adv_Request+0x11c>)
 800e8ec:	f001 fda0 	bl	8010430 <iprintf>

	if ((New_Status == APP_BLE_LP_ADV)
 800e8f0:	79fb      	ldrb	r3, [r7, #7]
 800e8f2:	2b02      	cmp	r3, #2
 800e8f4:	d119      	bne.n	800e92a <Adv_Request+0x82>
			&& ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800e8f6:	4b32      	ldr	r3, [pc, #200]	; (800e9c0 <Adv_Request+0x118>)
 800e8f8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	d004      	beq.n	800e90a <Adv_Request+0x62>
					|| (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800e900:	4b2f      	ldr	r3, [pc, #188]	; (800e9c0 <Adv_Request+0x118>)
 800e902:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800e906:	2b02      	cmp	r3, #2
 800e908:	d10f      	bne.n	800e92a <Adv_Request+0x82>
	{
		/* Connection in ADVERTISE mode have to stop the current advertising */
		ret = aci_gap_set_non_discoverable();
 800e90a:	f7f8 fc43 	bl	8007194 <aci_gap_set_non_discoverable>
 800e90e:	4603      	mov	r3, r0
 800e910:	73fb      	strb	r3, [r7, #15]
		if (ret == BLE_STATUS_SUCCESS)
 800e912:	7bfb      	ldrb	r3, [r7, #15]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d103      	bne.n	800e920 <Adv_Request+0x78>
		{
			APP_DBG_MSG("Successfully Stopped Advertising");
 800e918:	482b      	ldr	r0, [pc, #172]	; (800e9c8 <Adv_Request+0x120>)
 800e91a:	f001 fd89 	bl	8010430 <iprintf>
 800e91e:	e004      	b.n	800e92a <Adv_Request+0x82>
		}
		else
		{
			APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 800e920:	7bfb      	ldrb	r3, [r7, #15]
 800e922:	4619      	mov	r1, r3
 800e924:	4829      	ldr	r0, [pc, #164]	; (800e9cc <Adv_Request+0x124>)
 800e926:	f001 fd83 	bl	8010430 <iprintf>
		}
	}

	BleApplicationContext.Device_Connection_Status = New_Status;
 800e92a:	4a25      	ldr	r2, [pc, #148]	; (800e9c0 <Adv_Request+0x118>)
 800e92c:	79fb      	ldrb	r3, [r7, #7]
 800e92e:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
	//        (uint8_t*) local_name,
	//        BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
	//        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
	//        6,
	//        8);
	ret = aci_gap_set_discoverable(ADV_IND,
 800e932:	2308      	movs	r3, #8
 800e934:	9306      	str	r3, [sp, #24]
 800e936:	2306      	movs	r3, #6
 800e938:	9305      	str	r3, [sp, #20]
 800e93a:	2300      	movs	r3, #0
 800e93c:	9304      	str	r3, [sp, #16]
 800e93e:	2300      	movs	r3, #0
 800e940:	9303      	str	r3, [sp, #12]
 800e942:	4b23      	ldr	r3, [pc, #140]	; (800e9d0 <Adv_Request+0x128>)
 800e944:	9302      	str	r3, [sp, #8]
 800e946:	230a      	movs	r3, #10
 800e948:	9301      	str	r3, [sp, #4]
 800e94a:	2300      	movs	r3, #0
 800e94c:	9300      	str	r3, [sp, #0]
 800e94e:	2300      	movs	r3, #0
 800e950:	2230      	movs	r2, #48	; 0x30
 800e952:	2120      	movs	r1, #32
 800e954:	2000      	movs	r0, #0
 800e956:	f7f8 fc41 	bl	80071dc <aci_gap_set_discoverable>
 800e95a:	4603      	mov	r3, r0
 800e95c:	73fb      	strb	r3, [r7, #15]
			NO_WHITE_LIST_USE, /* use white list */
			sizeof(local_name), (uint8_t*) local_name, 0,
			NULL,
			6, 8);
	/* Update Advertising data */
	ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800e95e:	491d      	ldr	r1, [pc, #116]	; (800e9d4 <Adv_Request+0x12c>)
 800e960:	2016      	movs	r0, #22
 800e962:	f7f8 feed 	bl	8007740 <aci_gap_update_adv_data>
 800e966:	4603      	mov	r3, r0
 800e968:	73fb      	strb	r3, [r7, #15]
	//    ret = aci_gap_update_adv_data(22, (uint8_t*) manuf_data);

	if (ret == BLE_STATUS_SUCCESS)
 800e96a:	7bfb      	ldrb	r3, [r7, #15]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d111      	bne.n	800e994 <Adv_Request+0xec>
	{
		if (New_Status == APP_BLE_FAST_ADV)
 800e970:	79fb      	ldrb	r3, [r7, #7]
 800e972:	2b01      	cmp	r3, #1
 800e974:	d10a      	bne.n	800e98c <Adv_Request+0xe4>
		{
			APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 800e976:	4818      	ldr	r0, [pc, #96]	; (800e9d8 <Adv_Request+0x130>)
 800e978:	f001 fdce 	bl	8010518 <puts>
			/* Start Timer to STOP ADV - TIMEOUT */
			HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800e97c:	4b10      	ldr	r3, [pc, #64]	; (800e9c0 <Adv_Request+0x118>)
 800e97e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800e982:	4916      	ldr	r1, [pc, #88]	; (800e9dc <Adv_Request+0x134>)
 800e984:	4618      	mov	r0, r3
 800e986:	f7f3 fa71 	bl	8001e6c <HW_TS_Start>
		{
			APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
		}
	}

	return;
 800e98a:	e012      	b.n	800e9b2 <Adv_Request+0x10a>
			APP_DBG_MSG("\n\rSuccessfully Start Low Power Advertising \n\r");
 800e98c:	4814      	ldr	r0, [pc, #80]	; (800e9e0 <Adv_Request+0x138>)
 800e98e:	f001 fd4f 	bl	8010430 <iprintf>
	return;
 800e992:	e00e      	b.n	800e9b2 <Adv_Request+0x10a>
		if (New_Status == APP_BLE_FAST_ADV)
 800e994:	79fb      	ldrb	r3, [r7, #7]
 800e996:	2b01      	cmp	r3, #1
 800e998:	d105      	bne.n	800e9a6 <Adv_Request+0xfe>
			APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n\r", ret);
 800e99a:	7bfb      	ldrb	r3, [r7, #15]
 800e99c:	4619      	mov	r1, r3
 800e99e:	4811      	ldr	r0, [pc, #68]	; (800e9e4 <Adv_Request+0x13c>)
 800e9a0:	f001 fd46 	bl	8010430 <iprintf>
	return;
 800e9a4:	e005      	b.n	800e9b2 <Adv_Request+0x10a>
			APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 800e9a6:	7bfb      	ldrb	r3, [r7, #15]
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	480f      	ldr	r0, [pc, #60]	; (800e9e8 <Adv_Request+0x140>)
 800e9ac:	f001 fd40 	bl	8010430 <iprintf>
	return;
 800e9b0:	bf00      	nop
}
 800e9b2:	3710      	adds	r7, #16
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}
 800e9b8:	2000022c 	.word	0x2000022c
 800e9bc:	2000022e 	.word	0x2000022e
 800e9c0:	20000198 	.word	0x20000198
 800e9c4:	08011c88 	.word	0x08011c88
 800e9c8:	08011ca4 	.word	0x08011ca4
 800e9cc:	08011cc8 	.word	0x08011cc8
 800e9d0:	080128a0 	.word	0x080128a0
 800e9d4:	080128ac 	.word	0x080128ac
 800e9d8:	08011cf0 	.word	0x08011cf0
 800e9dc:	0001e046 	.word	0x0001e046
 800e9e0:	08011d18 	.word	0x08011d18
 800e9e4:	08011d48 	.word	0x08011d48
 800e9e8:	08011d78 	.word	0x08011d78

0800e9ec <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b086      	sub	sp, #24
 800e9f0:	af00      	add	r7, sp, #0
	const uint8_t *bd_addr;
	uint32_t udn;
	uint32_t company_id;
	uint32_t device_id;

	udn = LL_FLASH_GetUDN();
 800e9f2:	f7ff fbab 	bl	800e14c <LL_FLASH_GetUDN>
 800e9f6:	6138      	str	r0, [r7, #16]

	if(udn != 0xFFFFFFFF)
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9fe:	d023      	beq.n	800ea48 <BleGetBdAddress+0x5c>
	{
		company_id = LL_FLASH_GetSTCompanyID();
 800ea00:	f7ff fbbc 	bl	800e17c <LL_FLASH_GetSTCompanyID>
 800ea04:	60b8      	str	r0, [r7, #8]
		device_id = LL_FLASH_GetDeviceID();
 800ea06:	f7ff fbad 	bl	800e164 <LL_FLASH_GetDeviceID>
 800ea0a:	6078      	str	r0, [r7, #4]

		bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	b2da      	uxtb	r2, r3
 800ea10:	4b16      	ldr	r3, [pc, #88]	; (800ea6c <BleGetBdAddress+0x80>)
 800ea12:	701a      	strb	r2, [r3, #0]
		bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	0a1b      	lsrs	r3, r3, #8
 800ea18:	b2da      	uxtb	r2, r3
 800ea1a:	4b14      	ldr	r3, [pc, #80]	; (800ea6c <BleGetBdAddress+0x80>)
 800ea1c:	705a      	strb	r2, [r3, #1]
		bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	0c1b      	lsrs	r3, r3, #16
 800ea22:	b2da      	uxtb	r2, r3
 800ea24:	4b11      	ldr	r3, [pc, #68]	; (800ea6c <BleGetBdAddress+0x80>)
 800ea26:	709a      	strb	r2, [r3, #2]
		bd_addr_udn[3] = (uint8_t)device_id;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	b2da      	uxtb	r2, r3
 800ea2c:	4b0f      	ldr	r3, [pc, #60]	; (800ea6c <BleGetBdAddress+0x80>)
 800ea2e:	70da      	strb	r2, [r3, #3]
		bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	b2da      	uxtb	r2, r3
 800ea34:	4b0d      	ldr	r3, [pc, #52]	; (800ea6c <BleGetBdAddress+0x80>)
 800ea36:	711a      	strb	r2, [r3, #4]
		bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	0a1b      	lsrs	r3, r3, #8
 800ea3c:	b2da      	uxtb	r2, r3
 800ea3e:	4b0b      	ldr	r3, [pc, #44]	; (800ea6c <BleGetBdAddress+0x80>)
 800ea40:	715a      	strb	r2, [r3, #5]

		bd_addr = (const uint8_t *)bd_addr_udn;
 800ea42:	4b0a      	ldr	r3, [pc, #40]	; (800ea6c <BleGetBdAddress+0x80>)
 800ea44:	617b      	str	r3, [r7, #20]
 800ea46:	e00b      	b.n	800ea60 <BleGetBdAddress+0x74>
	}
	else
	{
		otp_addr = OTP_Read(0);
 800ea48:	2000      	movs	r0, #0
 800ea4a:	f7fa fe9f 	bl	800978c <OTP_Read>
 800ea4e:	60f8      	str	r0, [r7, #12]
		if(otp_addr)
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d002      	beq.n	800ea5c <BleGetBdAddress+0x70>
		{
			bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	617b      	str	r3, [r7, #20]
 800ea5a:	e001      	b.n	800ea60 <BleGetBdAddress+0x74>
		}
		else
		{
			bd_addr = M_bd_addr;
 800ea5c:	4b04      	ldr	r3, [pc, #16]	; (800ea70 <BleGetBdAddress+0x84>)
 800ea5e:	617b      	str	r3, [r7, #20]
		}

	}

	return bd_addr;
 800ea60:	697b      	ldr	r3, [r7, #20]
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3718      	adds	r7, #24
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}
 800ea6a:	bf00      	nop
 800ea6c:	20006890 	.word	0x20006890
 800ea70:	08012878 	.word	0x08012878

0800ea74 <APP_BLE_ComputeCRC8>:

/* USER CODE BEGIN FD_LOCAL_FUNCTION */
uint8_t APP_BLE_ComputeCRC8( uint8_t *DataPtr , uint8_t Datalen )
{
 800ea74:	b480      	push	{r7}
 800ea76:	b085      	sub	sp, #20
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	70fb      	strb	r3, [r7, #3]
	uint8_t i, j;
	const uint8_t PolynomeCRC = 0x97;
 800ea80:	2397      	movs	r3, #151	; 0x97
 800ea82:	733b      	strb	r3, [r7, #12]
	uint8_t CRC8 = 0x00;
 800ea84:	2300      	movs	r3, #0
 800ea86:	737b      	strb	r3, [r7, #13]

	for (i = 0; i < Datalen; i++)
 800ea88:	2300      	movs	r3, #0
 800ea8a:	73fb      	strb	r3, [r7, #15]
 800ea8c:	e022      	b.n	800ead4 <APP_BLE_ComputeCRC8+0x60>
	{
		CRC8 ^= DataPtr[i];
 800ea8e:	7bfb      	ldrb	r3, [r7, #15]
 800ea90:	687a      	ldr	r2, [r7, #4]
 800ea92:	4413      	add	r3, r2
 800ea94:	781a      	ldrb	r2, [r3, #0]
 800ea96:	7b7b      	ldrb	r3, [r7, #13]
 800ea98:	4053      	eors	r3, r2
 800ea9a:	737b      	strb	r3, [r7, #13]
		for (j = 0; j < 8; j++)
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	73bb      	strb	r3, [r7, #14]
 800eaa0:	e012      	b.n	800eac8 <APP_BLE_ComputeCRC8+0x54>
		{
			if ((CRC8 & 0x80) != 0)
 800eaa2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	da08      	bge.n	800eabc <APP_BLE_ComputeCRC8+0x48>
			{
				CRC8 = (uint8_t) ((CRC8 << 1) ^ PolynomeCRC);
 800eaaa:	7b7b      	ldrb	r3, [r7, #13]
 800eaac:	005b      	lsls	r3, r3, #1
 800eaae:	b25a      	sxtb	r2, r3
 800eab0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800eab4:	4053      	eors	r3, r2
 800eab6:	b25b      	sxtb	r3, r3
 800eab8:	737b      	strb	r3, [r7, #13]
 800eaba:	e002      	b.n	800eac2 <APP_BLE_ComputeCRC8+0x4e>
			}
			else
			{
				CRC8 <<= 1;
 800eabc:	7b7b      	ldrb	r3, [r7, #13]
 800eabe:	005b      	lsls	r3, r3, #1
 800eac0:	737b      	strb	r3, [r7, #13]
		for (j = 0; j < 8; j++)
 800eac2:	7bbb      	ldrb	r3, [r7, #14]
 800eac4:	3301      	adds	r3, #1
 800eac6:	73bb      	strb	r3, [r7, #14]
 800eac8:	7bbb      	ldrb	r3, [r7, #14]
 800eaca:	2b07      	cmp	r3, #7
 800eacc:	d9e9      	bls.n	800eaa2 <APP_BLE_ComputeCRC8+0x2e>
	for (i = 0; i < Datalen; i++)
 800eace:	7bfb      	ldrb	r3, [r7, #15]
 800ead0:	3301      	adds	r3, #1
 800ead2:	73fb      	strb	r3, [r7, #15]
 800ead4:	7bfa      	ldrb	r2, [r7, #15]
 800ead6:	78fb      	ldrb	r3, [r7, #3]
 800ead8:	429a      	cmp	r2, r3
 800eada:	d3d8      	bcc.n	800ea8e <APP_BLE_ComputeCRC8+0x1a>
			}
		}
	}
	return (CRC8);
 800eadc:	7b7b      	ldrb	r3, [r7, #13]
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3714      	adds	r7, #20
 800eae2:	46bd      	mov	sp, r7
 800eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae8:	4770      	bx	lr

0800eaea <AdvUpdateProcess>:

	return;
}

static void AdvUpdateProcess(void *argument)
{
 800eaea:	b580      	push	{r7, lr}
 800eaec:	b082      	sub	sp, #8
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
	UNUSED(argument);

	for(;;)
	{
		osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800eaf2:	f04f 32ff 	mov.w	r2, #4294967295
 800eaf6:	2100      	movs	r1, #0
 800eaf8:	2001      	movs	r0, #1
 800eafa:	f7fb fc9f 	bl	800a43c <osThreadFlagsWait>
		Adv_Update( );
 800eafe:	f000 f801 	bl	800eb04 <Adv_Update>
		osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800eb02:	e7f6      	b.n	800eaf2 <AdvUpdateProcess+0x8>

0800eb04 <Adv_Update>:
//	}
//	return;
//}

static void Adv_Update( void )
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	af00      	add	r7, sp, #0
	Adv_Request(APP_BLE_LP_ADV);
 800eb08:	2002      	movs	r0, #2
 800eb0a:	f7ff fecd 	bl	800e8a8 <Adv_Request>

	return;
 800eb0e:	bf00      	nop
}
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <HciUserEvtProcess>:

static void HciUserEvtProcess(void *argument)
{
 800eb12:	b580      	push	{r7, lr}
 800eb14:	b082      	sub	sp, #8
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	6078      	str	r0, [r7, #4]
	UNUSED(argument);

	for(;;)
	{
		osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800eb1a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb1e:	2100      	movs	r1, #0
 800eb20:	2001      	movs	r0, #1
 800eb22:	f7fb fc8b 	bl	800a43c <osThreadFlagsWait>
		hci_user_evt_proc( );
 800eb26:	f7fa f85f 	bl	8008be8 <hci_user_evt_proc>
		osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800eb2a:	e7f6      	b.n	800eb1a <HciUserEvtProcess+0x8>

0800eb2c <DataThroughput_proc>:
//    APP_DBG_MSG("** add ADV data **  Failed \r\n\r");
//  }
//  return;
//}

void DataThroughput_proc(void){
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	af00      	add	r7, sp, #0

	//  UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_WRITE_ID, CFG_SCH_PRIO_0);

	osThreadFlagsSet( DataWriteProcessId, 1 );
 800eb30:	4b03      	ldr	r3, [pc, #12]	; (800eb40 <DataThroughput_proc+0x14>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	2101      	movs	r1, #1
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7fb fc1e 	bl	800a378 <osThreadFlagsSet>
}
 800eb3c:	bf00      	nop
 800eb3e:	bd80      	pop	{r7, pc}
 800eb40:	20006d44 	.word	0x20006d44

0800eb44 <LinkConfiguration>:
#endif

void LinkConfiguration(void * argument)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	tBleStatus status;

	while(1)
	{
		osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800eb4c:	f04f 32ff 	mov.w	r2, #4294967295
 800eb50:	2100      	movs	r1, #0
 800eb52:	2001      	movs	r0, #1
 800eb54:	f7fb fc72 	bl	800a43c <osThreadFlagsWait>
			APP_DBG_MSG("TX PHY = %d\n", tx_phy);
			APP_DBG_MSG("RX PHY = %d\n", rx_phy);
		}
#endif

		  APP_DBG_MSG("set data length \n");
 800eb58:	480c      	ldr	r0, [pc, #48]	; (800eb8c <LinkConfiguration+0x48>)
 800eb5a:	f001 fcdd 	bl	8010518 <puts>
//		  BSP_LED_On(LED_BLUE);
		status = hci_le_set_data_length(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,251,2120);
 800eb5e:	4b0c      	ldr	r3, [pc, #48]	; (800eb90 <LinkConfiguration+0x4c>)
 800eb60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800eb62:	f640 0248 	movw	r2, #2120	; 0x848
 800eb66:	21fb      	movs	r1, #251	; 0xfb
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7f9 fc5a 	bl	8008422 <hci_le_set_data_length>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	73fb      	strb	r3, [r7, #15]
		if (status != BLE_STATUS_SUCCESS)
 800eb72:	7bfb      	ldrb	r3, [r7, #15]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d002      	beq.n	800eb7e <LinkConfiguration+0x3a>
		{
//				  BSP_LED_On(LED_RED);
			    APP_DBG_MSG("set data length command error \n");
 800eb78:	4806      	ldr	r0, [pc, #24]	; (800eb94 <LinkConfiguration+0x50>)
 800eb7a:	f001 fccd 	bl	8010518 <puts>

#if ((CFG_ENCRYPTION_ENABLE != 0) && (CFG_BLE_CENTRAL != 0))
		GapProcReq(GAP_PROC_PAIRING);
#endif

		DTC_App_LinkReadyNotification(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800eb7e:	4b04      	ldr	r3, [pc, #16]	; (800eb90 <LinkConfiguration+0x4c>)
 800eb80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800eb82:	4618      	mov	r0, r3
 800eb84:	f000 f96a 	bl	800ee5c <DTC_App_LinkReadyNotification>
		osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800eb88:	e7e0      	b.n	800eb4c <LinkConfiguration+0x8>
 800eb8a:	bf00      	nop
 800eb8c:	08011dac 	.word	0x08011dac
 800eb90:	20000198 	.word	0x20000198
 800eb94:	08011dc0 	.word	0x08011dc0

0800eb98 <BLE_SVC_L2CAP_Conn_Update>:
	/* USER CODE END Switch_OFF_GPIO */
}

#if(L2CAP_REQUEST_NEW_CONN_PARAM != 0)  
void BLE_SVC_L2CAP_Conn_Update(uint16_t Connection_Handle)
{
 800eb98:	b590      	push	{r4, r7, lr}
 800eb9a:	b089      	sub	sp, #36	; 0x24
 800eb9c:	af02      	add	r7, sp, #8
 800eb9e:	4603      	mov	r3, r0
 800eba0:	80fb      	strh	r3, [r7, #6]
	/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

	/* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */
	if(mutex == 1) {
 800eba2:	4b29      	ldr	r3, [pc, #164]	; (800ec48 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	2b01      	cmp	r3, #1
 800eba8:	d149      	bne.n	800ec3e <BLE_SVC_L2CAP_Conn_Update+0xa6>
		mutex = 0;
 800ebaa:	4b27      	ldr	r3, [pc, #156]	; (800ec48 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 800ebac:	2200      	movs	r2, #0
 800ebae:	701a      	strb	r2, [r3, #0]
		index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 800ebb0:	4b26      	ldr	r3, [pc, #152]	; (800ec4c <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800ebb2:	781b      	ldrb	r3, [r3, #0]
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	f003 0301 	and.w	r3, r3, #1
 800ebbc:	bfb8      	it	lt
 800ebbe:	425b      	neglt	r3, r3
 800ebc0:	b2da      	uxtb	r2, r3
 800ebc2:	4b22      	ldr	r3, [pc, #136]	; (800ec4c <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800ebc4:	701a      	strb	r2, [r3, #0]
		uint16_t interval_min = CONN_P(tab_conn_interval[index_con_int]);
 800ebc6:	4b21      	ldr	r3, [pc, #132]	; (800ec4c <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	4a21      	ldr	r2, [pc, #132]	; (800ec50 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 800ebcc:	009b      	lsls	r3, r3, #2
 800ebce:	4413      	add	r3, r2
 800ebd0:	ed93 7a00 	vldr	s14, [r3]
 800ebd4:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 800ebd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ebdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ebe0:	ee17 3a90 	vmov	r3, s15
 800ebe4:	82fb      	strh	r3, [r7, #22]
		uint16_t interval_max = CONN_P(tab_conn_interval[index_con_int]);
 800ebe6:	4b19      	ldr	r3, [pc, #100]	; (800ec4c <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	4a19      	ldr	r2, [pc, #100]	; (800ec50 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 800ebec:	009b      	lsls	r3, r3, #2
 800ebee:	4413      	add	r3, r2
 800ebf0:	ed93 7a00 	vldr	s14, [r3]
 800ebf4:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 800ebf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ebfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec00:	ee17 3a90 	vmov	r3, s15
 800ec04:	82bb      	strh	r3, [r7, #20]
		uint16_t slave_latency = L2CAP_SLAVE_LATENCY;
 800ec06:	2300      	movs	r3, #0
 800ec08:	827b      	strh	r3, [r7, #18]
		uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 800ec0a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800ec0e:	823b      	strh	r3, [r7, #16]
		tBleStatus result;

		result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800ec10:	4b10      	ldr	r3, [pc, #64]	; (800ec54 <BLE_SVC_L2CAP_Conn_Update+0xbc>)
 800ec12:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 800ec14:	8a7c      	ldrh	r4, [r7, #18]
 800ec16:	8aba      	ldrh	r2, [r7, #20]
 800ec18:	8af9      	ldrh	r1, [r7, #22]
 800ec1a:	8a3b      	ldrh	r3, [r7, #16]
 800ec1c:	9300      	str	r3, [sp, #0]
 800ec1e:	4623      	mov	r3, r4
 800ec20:	f7f9 fc70 	bl	8008504 <aci_l2cap_connection_parameter_update_req>
 800ec24:	4603      	mov	r3, r0
 800ec26:	73fb      	strb	r3, [r7, #15]
				interval_min, interval_max,
				slave_latency, timeout_multiplier);
		if( result == BLE_STATUS_SUCCESS )
 800ec28:	7bfb      	ldrb	r3, [r7, #15]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d103      	bne.n	800ec36 <BLE_SVC_L2CAP_Conn_Update+0x9e>
		{
			APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 800ec2e:	480a      	ldr	r0, [pc, #40]	; (800ec58 <BLE_SVC_L2CAP_Conn_Update+0xc0>)
 800ec30:	f001 fbfe 	bl	8010430 <iprintf>
		}
	}
	/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

	/* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */
	return;
 800ec34:	e003      	b.n	800ec3e <BLE_SVC_L2CAP_Conn_Update+0xa6>
			APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 800ec36:	4809      	ldr	r0, [pc, #36]	; (800ec5c <BLE_SVC_L2CAP_Conn_Update+0xc4>)
 800ec38:	f001 fbfa 	bl	8010430 <iprintf>
	return;
 800ec3c:	bf00      	nop
 800ec3e:	bf00      	nop
}
 800ec40:	371c      	adds	r7, #28
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd90      	pop	{r4, r7, pc}
 800ec46:	bf00      	nop
 800ec48:	20006d48 	.word	0x20006d48
 800ec4c:	20006d49 	.word	0x20006d49
 800ec50:	20000020 	.word	0x20000020
 800ec54:	20000198 	.word	0x20000198
 800ec58:	08011ebc 	.word	0x08011ebc
 800ec5c:	08011eec 	.word	0x08011eec

0800ec60 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
	UNUSED(pdata);
	osThreadFlagsSet( HciUserEvtProcessId, 1 );
 800ec68:	4b04      	ldr	r3, [pc, #16]	; (800ec7c <hci_notify_asynch_evt+0x1c>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	2101      	movs	r1, #1
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7fb fb82 	bl	800a378 <osThreadFlagsSet>
	return;
 800ec74:	bf00      	nop
}
 800ec76:	3708      	adds	r7, #8
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}
 800ec7c:	20006d30 	.word	0x20006d30

0800ec80 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b082      	sub	sp, #8
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
	UNUSED(flag);
	osSemaphoreRelease( SemHciId );
 800ec88:	4b04      	ldr	r3, [pc, #16]	; (800ec9c <hci_cmd_resp_release+0x1c>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7fb fee3 	bl	800aa58 <osSemaphoreRelease>
	return;
 800ec92:	bf00      	nop
}
 800ec94:	3708      	adds	r7, #8
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}
 800ec9a:	bf00      	nop
 800ec9c:	20006d2c 	.word	0x20006d2c

0800eca0 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b082      	sub	sp, #8
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
	UNUSED(timeout);
	osSemaphoreAcquire( SemHciId, osWaitForever );
 800eca8:	4b05      	ldr	r3, [pc, #20]	; (800ecc0 <hci_cmd_resp_wait+0x20>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f04f 31ff 	mov.w	r1, #4294967295
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7fb fe6b 	bl	800a98c <osSemaphoreAcquire>
	return;
 800ecb6:	bf00      	nop
}
 800ecb8:	3708      	adds	r7, #8
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	20006d2c 	.word	0x20006d2c

0800ecc4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
	SVCCTL_UserEvtFlowStatus_t svctl_return_status;
	tHCI_UserEvtRxParam *pParam;

	pParam = (tHCI_UserEvtRxParam *)pPayload;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	60fb      	str	r3, [r7, #12]

	svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	3308      	adds	r3, #8
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7f9 feb2 	bl	8008a40 <SVCCTL_UserEvtRx>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	72fb      	strb	r3, [r7, #11]
	if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800ece0:	7afb      	ldrb	r3, [r7, #11]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d003      	beq.n	800ecee <BLE_UserEvtRx+0x2a>
	{
		pParam->status = HCI_TL_UserEventFlow_Enable;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2201      	movs	r2, #1
 800ecea:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		pParam->status = HCI_TL_UserEventFlow_Disable;
	}
}
 800ecec:	e002      	b.n	800ecf4 <BLE_UserEvtRx+0x30>
		pParam->status = HCI_TL_UserEventFlow_Disable;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	701a      	strb	r2, [r3, #0]
}
 800ecf4:	bf00      	nop
 800ecf6:	3710      	adds	r7, #16
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}

0800ecfc <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b082      	sub	sp, #8
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	4603      	mov	r3, r0
 800ed04:	71fb      	strb	r3, [r7, #7]
	switch (status)
 800ed06:	79fb      	ldrb	r3, [r7, #7]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d002      	beq.n	800ed12 <BLE_StatusNot+0x16>
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	d008      	beq.n	800ed22 <BLE_StatusNot+0x26>
	case HCI_TL_CmdAvailable:
		osMutexRelease( MtxHciId );
		break;

	default:
		break;
 800ed10:	e00d      	b.n	800ed2e <BLE_StatusNot+0x32>
		osMutexAcquire( MtxHciId, osWaitForever );
 800ed12:	4b09      	ldr	r3, [pc, #36]	; (800ed38 <BLE_StatusNot+0x3c>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	f04f 31ff 	mov.w	r1, #4294967295
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7fb fcea 	bl	800a6f4 <osMutexAcquire>
		break;
 800ed20:	e005      	b.n	800ed2e <BLE_StatusNot+0x32>
		osMutexRelease( MtxHciId );
 800ed22:	4b05      	ldr	r3, [pc, #20]	; (800ed38 <BLE_StatusNot+0x3c>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7fb fd42 	bl	800a7b0 <osMutexRelease>
		break;
 800ed2c:	bf00      	nop
	}
	return;
 800ed2e:	bf00      	nop
}
 800ed30:	3708      	adds	r7, #8
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	20006d54 	.word	0x20006d54

0800ed3c <SVCCTL_InitCustomSvc>:
	return;
}

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void SVCCTL_InitCustomSvc( void )
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	af00      	add	r7, sp, #0
	DTS_STM_Init();
 800ed40:	f000 fdb6 	bl	800f8b0 <DTS_STM_Init>
}
 800ed44:	bf00      	nop
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 800ed50:	f000 f814 	bl	800ed7c <Receive_Ack_From_M0>
}
 800ed54:	bf00      	nop
 800ed56:	3708      	adds	r7, #8
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b082      	sub	sp, #8
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 800ed64:	4a04      	ldr	r2, [pc, #16]	; (800ed78 <TL_THREAD_NotReceived+0x1c>)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 800ed6a:	f000 f813 	bl	800ed94 <Receive_Notification_From_M0>
}
 800ed6e:	bf00      	nop
 800ed70:	3708      	adds	r7, #8
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	20006898 	.word	0x20006898

0800ed7c <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 800ed80:	4b03      	ldr	r3, [pc, #12]	; (800ed90 <Receive_Ack_From_M0+0x14>)
 800ed82:	2201      	movs	r2, #1
 800ed84:	601a      	str	r2, [r3, #0]
}
 800ed86:	bf00      	nop
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr
 800ed90:	200068a0 	.word	0x200068a0

0800ed94 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 800ed98:	4b06      	ldr	r3, [pc, #24]	; (800edb4 <Receive_Notification_From_M0+0x20>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	4a05      	ldr	r2, [pc, #20]	; (800edb4 <Receive_Notification_From_M0+0x20>)
 800eda0:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 800eda2:	4b05      	ldr	r3, [pc, #20]	; (800edb8 <Receive_Notification_From_M0+0x24>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	2101      	movs	r1, #1
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7fb fae5 	bl	800a378 <osThreadFlagsSet>
}
 800edae:	bf00      	nop
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop
 800edb4:	2000689c 	.word	0x2000689c
 800edb8:	200068a4 	.word	0x200068a4

0800edbc <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 800edc0:	f7fa fb08 	bl	80093d4 <TL_THREAD_CliSendAck>
}
 800edc4:	bf00      	nop
 800edc6:	bd80      	pop	{r7, pc}

0800edc8 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b084      	sub	sp, #16
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	7adb      	ldrb	r3, [r3, #11]
 800edd8:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	330c      	adds	r3, #12
 800edde:	490b      	ldr	r1, [pc, #44]	; (800ee0c <TL_THREAD_CliNotReceived+0x44>)
 800ede0:	4618      	mov	r0, r3
 800ede2:	f7f1 f9cd 	bl	8000180 <strcmp>
 800ede6:	4603      	mov	r3, r0
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d009      	beq.n	800ee00 <TL_THREAD_CliNotReceived+0x38>
  {
    /* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	f103 010c 	add.w	r1, r3, #12
 800edf2:	7afb      	ldrb	r3, [r7, #11]
 800edf4:	b29a      	uxth	r2, r3
 800edf6:	4b06      	ldr	r3, [pc, #24]	; (800ee10 <TL_THREAD_CliNotReceived+0x48>)
 800edf8:	2000      	movs	r0, #0
 800edfa:	f7f3 f8cb 	bl	8001f94 <HW_UART_Transmit_IT>
  }
  else
  {
    Send_CLI_Ack_For_OT();
  }
}
 800edfe:	e001      	b.n	800ee04 <TL_THREAD_CliNotReceived+0x3c>
    Send_CLI_Ack_For_OT();
 800ee00:	f7ff ffdc 	bl	800edbc <Send_CLI_Ack_For_OT>
}
 800ee04:	bf00      	nop
 800ee06:	3710      	adds	r7, #16
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}
 800ee0c:	08012144 	.word	0x08012144
 800ee10:	0800ee15 	.word	0x0800ee15

0800ee14 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	af00      	add	r7, sp, #0
  Send_CLI_Ack_For_OT();
 800ee18:	f7ff ffd0 	bl	800edbc <Send_CLI_Ack_For_OT>
}
 800ee1c:	bf00      	nop
 800ee1e:	bd80      	pop	{r7, pc}

0800ee20 <DTC_App_Init>:
 *
 * PUBLIC FUNCTIONS
 *
 *************************************************************/
void DTC_App_Init( void )
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	af00      	add	r7, sp, #0
  SVCCTL_RegisterCltHandler(DTC_Event_Handler);
 800ee24:	4808      	ldr	r0, [pc, #32]	; (800ee48 <DTC_App_Init+0x28>)
 800ee26:	f7f9 fdf1 	bl	8008a0c <SVCCTL_RegisterCltHandler>

//  UTIL_SEQ_RegTask( 1<< CFG_TASK_APP_DATA_THROUGHPUT_ID, UTIL_SEQ_RFU, DataThroughput_Calculation);

  DataTransferClientContext.connHandle = 0xFFFF;
 800ee2a:	4b08      	ldr	r3, [pc, #32]	; (800ee4c <DTC_App_Init+0x2c>)
 800ee2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee30:	801a      	strh	r2, [r3, #0]
  /* Create timer for Data Throughput */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(TimerDataThroughput_Id), hw_ts_SingleShot, DataThroughputTimer);
 800ee32:	4b07      	ldr	r3, [pc, #28]	; (800ee50 <DTC_App_Init+0x30>)
 800ee34:	2200      	movs	r2, #0
 800ee36:	4907      	ldr	r1, [pc, #28]	; (800ee54 <DTC_App_Init+0x34>)
 800ee38:	2000      	movs	r0, #0
 800ee3a:	f7f2 ff17 	bl	8001c6c <HW_TS_Create>

  APP_DBG_MSG("-- DT CLIENT INITIALIZED \n");
 800ee3e:	4806      	ldr	r0, [pc, #24]	; (800ee58 <DTC_App_Init+0x38>)
 800ee40:	f001 fb6a 	bl	8010518 <puts>

  return;
 800ee44:	bf00      	nop
}
 800ee46:	bd80      	pop	{r7, pc}
 800ee48:	0800ee81 	.word	0x0800ee81
 800ee4c:	20006d74 	.word	0x20006d74
 800ee50:	0800f275 	.word	0x0800f275
 800ee54:	200068c8 	.word	0x200068c8
 800ee58:	08012148 	.word	0x08012148

0800ee5c <DTC_App_LinkReadyNotification>:

void DTC_App_LinkReadyNotification(uint16_t ConnectionHandle)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	4603      	mov	r3, r0
 800ee64:	80fb      	strh	r3, [r7, #6]
#if(CFG_SERVER_ONLY != 1)
  tBleStatus status;
  uint16_t enable_notification = 0x0001;
#endif  

  DataTransferClientContext.connHandle = ConnectionHandle;
 800ee66:	4a05      	ldr	r2, [pc, #20]	; (800ee7c <DTC_App_LinkReadyNotification+0x20>)
 800ee68:	88fb      	ldrh	r3, [r7, #6]
 800ee6a:	8013      	strh	r3, [r2, #0]

#if(CFG_BLE_CENTRAL != 1)
  GattProcReq(GATT_PROC_MTU_UPDATE);
 800ee6c:	2000      	movs	r0, #0
 800ee6e:	f000 fa1f 	bl	800f2b0 <GattProcReq>
#endif
  
#if(CFG_BLE_CENTRAL != 0)
    UTIL_SEQ_SetTask(1<<CFG_TASK_CONN_UPDATE_ID, CFG_SCH_PRIO_0); 
#endif
  return;
 800ee72:	bf00      	nop
}
 800ee74:	3708      	adds	r7, #8
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	20006d74 	.word	0x20006d74

0800ee80 <DTC_Event_Handler>:
 *
 * CALLBACK FUNCTIONS
 *
 *************************************************************/
static SVCCTL_EvtAckStatus_t DTC_Event_Handler( void *Event )
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b090      	sub	sp, #64	; 0x40
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  hci_event_pckt * event_pckt;
  evt_blue_aci * blue_evt;
  uint8_t CRC_Result;
  uint8_t CRC_Received;

  return_value = SVCCTL_EvtNotAck;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  event_pckt = (hci_event_pckt *) (((hci_uart_pckt*) Event)->data);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	3301      	adds	r3, #1
 800ee92:	637b      	str	r3, [r7, #52]	; 0x34

  switch (event_pckt->evt)
 800ee94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	2bff      	cmp	r3, #255	; 0xff
 800ee9a:	d000      	beq.n	800ee9e <DTC_Event_Handler+0x1e>

        default:
          break;
        }
        default:
          break;
 800ee9c:	e1d3      	b.n	800f246 <DTC_Event_Handler+0x3c6>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800ee9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eea0:	3302      	adds	r3, #2
 800eea2:	633b      	str	r3, [r7, #48]	; 0x30
      switch (blue_evt->ecode)
 800eea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea6:	881b      	ldrh	r3, [r3, #0]
 800eea8:	b29b      	uxth	r3, r3
 800eeaa:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 800eeae:	2b0c      	cmp	r3, #12
 800eeb0:	f200 81c0 	bhi.w	800f234 <DTC_Event_Handler+0x3b4>
 800eeb4:	a201      	add	r2, pc, #4	; (adr r2, 800eebc <DTC_Event_Handler+0x3c>)
 800eeb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeba:	bf00      	nop
 800eebc:	0800f08b 	.word	0x0800f08b
 800eec0:	0800f235 	.word	0x0800f235
 800eec4:	0800efe5 	.word	0x0800efe5
 800eec8:	0800f235 	.word	0x0800f235
 800eecc:	0800f235 	.word	0x0800f235
 800eed0:	0800f235 	.word	0x0800f235
 800eed4:	0800eef1 	.word	0x0800eef1
 800eed8:	0800f235 	.word	0x0800f235
 800eedc:	0800f235 	.word	0x0800f235
 800eee0:	0800f235 	.word	0x0800f235
 800eee4:	0800f235 	.word	0x0800f235
 800eee8:	0800f149 	.word	0x0800f149
 800eeec:	0800f227 	.word	0x0800f227
          aci_att_read_by_group_type_resp_event_rp0 *pr = (void*) blue_evt->data;
 800eef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef2:	3302      	adds	r3, #2
 800eef4:	627b      	str	r3, [r7, #36]	; 0x24
          handle = pr->Connection_Handle;
 800eef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef8:	781a      	ldrb	r2, [r3, #0]
 800eefa:	785b      	ldrb	r3, [r3, #1]
 800eefc:	021b      	lsls	r3, r3, #8
 800eefe:	4313      	orrs	r3, r2
 800ef00:	847b      	strh	r3, [r7, #34]	; 0x22
          APP_DBG_MSG("DTC_Event_Handler: EVT_BLUE_ATT_READ_BY_GROUP_TYPE_RESP\n");
 800ef02:	488c      	ldr	r0, [pc, #560]	; (800f134 <DTC_Event_Handler+0x2b4>)
 800ef04:	f001 fb08 	bl	8010518 <puts>
          DataTransferClientContext.connHandle = handle;
 800ef08:	4a8b      	ldr	r2, [pc, #556]	; (800f138 <DTC_Event_Handler+0x2b8>)
 800ef0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef0c:	8013      	strh	r3, [r2, #0]
          numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 800ef0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef10:	78da      	ldrb	r2, [r3, #3]
 800ef12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef14:	789b      	ldrb	r3, [r3, #2]
 800ef16:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef1a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
          if (pr->Attribute_Data_Length == 20)
 800ef1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef20:	789b      	ldrb	r3, [r3, #2]
 800ef22:	2b14      	cmp	r3, #20
 800ef24:	f040 8188 	bne.w	800f238 <DTC_Event_Handler+0x3b8>
            idx = 16;
 800ef28:	2310      	movs	r3, #16
 800ef2a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
              for (i = 0; i < numServ; i++)
 800ef2e:	2300      	movs	r3, #0
 800ef30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ef34:	e04f      	b.n	800efd6 <DTC_Event_Handler+0x156>
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 800ef36:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ef3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef3c:	4413      	add	r3, r2
 800ef3e:	791b      	ldrb	r3, [r3, #4]
 800ef40:	b29a      	uxth	r2, r3
 800ef42:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ef46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef48:	440b      	add	r3, r1
 800ef4a:	3304      	adds	r3, #4
 800ef4c:	3301      	adds	r3, #1
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	b29b      	uxth	r3, r3
 800ef52:	021b      	lsls	r3, r3, #8
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	4313      	orrs	r3, r2
 800ef58:	83fb      	strh	r3, [r7, #30]
                if (uuid == DATA_TRANSFER_SERVICE_UUID)
 800ef5a:	8bfb      	ldrh	r3, [r7, #30]
 800ef5c:	f64f 6280 	movw	r2, #65152	; 0xfe80
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d12e      	bne.n	800efc2 <DTC_Event_Handler+0x142>
                  DataTransferClientContext.DataTransferServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 800ef64:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ef68:	3b10      	subs	r3, #16
 800ef6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef6c:	4413      	add	r3, r2
 800ef6e:	791b      	ldrb	r3, [r3, #4]
 800ef70:	b29a      	uxth	r2, r3
 800ef72:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ef76:	3b10      	subs	r3, #16
 800ef78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef7a:	440b      	add	r3, r1
 800ef7c:	3304      	adds	r3, #4
 800ef7e:	3301      	adds	r3, #1
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	b29b      	uxth	r3, r3
 800ef84:	021b      	lsls	r3, r3, #8
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	4313      	orrs	r3, r2
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	4b6a      	ldr	r3, [pc, #424]	; (800f138 <DTC_Event_Handler+0x2b8>)
 800ef8e:	805a      	strh	r2, [r3, #2]
                  DataTransferClientContext.DataTransferServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 800ef90:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ef94:	3b0e      	subs	r3, #14
 800ef96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef98:	4413      	add	r3, r2
 800ef9a:	791b      	ldrb	r3, [r3, #4]
 800ef9c:	b29a      	uxth	r2, r3
 800ef9e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800efa2:	3b0e      	subs	r3, #14
 800efa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800efa6:	440b      	add	r3, r1
 800efa8:	3304      	adds	r3, #4
 800efaa:	3301      	adds	r3, #1
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	b29b      	uxth	r3, r3
 800efb0:	021b      	lsls	r3, r3, #8
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	4313      	orrs	r3, r2
 800efb6:	b29a      	uxth	r2, r3
 800efb8:	4b5f      	ldr	r3, [pc, #380]	; (800f138 <DTC_Event_Handler+0x2b8>)
 800efba:	809a      	strh	r2, [r3, #4]
                  APP_DBG_MSG("DTC_Event_Handler: DATA_TRANSFER_SERVICE_UUID found !\n");
 800efbc:	485f      	ldr	r0, [pc, #380]	; (800f13c <DTC_Event_Handler+0x2bc>)
 800efbe:	f001 faab 	bl	8010518 <puts>
                idx += 6;
 800efc2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800efc6:	3306      	adds	r3, #6
 800efc8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
              for (i = 0; i < numServ; i++)
 800efcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800efd0:	3301      	adds	r3, #1
 800efd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800efd6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800efda:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800efde:	429a      	cmp	r2, r3
 800efe0:	d3a9      	bcc.n	800ef36 <DTC_Event_Handler+0xb6>
          break;
 800efe2:	e129      	b.n	800f238 <DTC_Event_Handler+0x3b8>
          aci_att_read_by_type_resp_event_rp0 *pr = (void*) blue_evt->data;
 800efe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe6:	3302      	adds	r3, #2
 800efe8:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG("DTC_Event_Handler: EVT_BLUE_ATT_READ_BY_TYPE_RESP\n");
 800efea:	4855      	ldr	r0, [pc, #340]	; (800f140 <DTC_Event_Handler+0x2c0>)
 800efec:	f001 fa94 	bl	8010518 <puts>
          idx = 17;
 800eff0:	2311      	movs	r3, #17
 800eff2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
          if (pr->Handle_Value_Pair_Length == 21)
 800eff6:	69bb      	ldr	r3, [r7, #24]
 800eff8:	789b      	ldrb	r3, [r3, #2]
 800effa:	2b15      	cmp	r3, #21
 800effc:	f040 811e 	bne.w	800f23c <DTC_Event_Handler+0x3bc>
            pr->Data_Length -= 1;
 800f000:	69bb      	ldr	r3, [r7, #24]
 800f002:	78db      	ldrb	r3, [r3, #3]
 800f004:	3b01      	subs	r3, #1
 800f006:	b2da      	uxtb	r2, r3
 800f008:	69bb      	ldr	r3, [r7, #24]
 800f00a:	70da      	strb	r2, [r3, #3]
            while(pr->Data_Length > 0)
 800f00c:	e038      	b.n	800f080 <DTC_Event_Handler+0x200>
              uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 800f00e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800f012:	69ba      	ldr	r2, [r7, #24]
 800f014:	4413      	add	r3, r2
 800f016:	791b      	ldrb	r3, [r3, #4]
 800f018:	b29a      	uxth	r2, r3
 800f01a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800f01e:	69b9      	ldr	r1, [r7, #24]
 800f020:	440b      	add	r3, r1
 800f022:	3304      	adds	r3, #4
 800f024:	3301      	adds	r3, #1
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	b29b      	uxth	r3, r3
 800f02a:	021b      	lsls	r3, r3, #8
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	4313      	orrs	r3, r2
 800f030:	82fb      	strh	r3, [r7, #22]
              handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 800f032:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800f036:	3b0e      	subs	r3, #14
 800f038:	69ba      	ldr	r2, [r7, #24]
 800f03a:	4413      	add	r3, r2
 800f03c:	791b      	ldrb	r3, [r3, #4]
 800f03e:	b29a      	uxth	r2, r3
 800f040:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800f044:	3b0e      	subs	r3, #14
 800f046:	69b9      	ldr	r1, [r7, #24]
 800f048:	440b      	add	r3, r1
 800f04a:	3304      	adds	r3, #4
 800f04c:	3301      	adds	r3, #1
 800f04e:	781b      	ldrb	r3, [r3, #0]
 800f050:	b29b      	uxth	r3, r3
 800f052:	021b      	lsls	r3, r3, #8
 800f054:	b29b      	uxth	r3, r3
 800f056:	4313      	orrs	r3, r2
 800f058:	82bb      	strh	r3, [r7, #20]
              if (uuid == DATA_TRANSFER_TX_CHAR_UUID)
 800f05a:	8afb      	ldrh	r3, [r7, #22]
 800f05c:	f64f 6281 	movw	r2, #65153	; 0xfe81
 800f060:	4293      	cmp	r3, r2
 800f062:	d102      	bne.n	800f06a <DTC_Event_Handler+0x1ea>
                DataTransferClientContext.DataTransferTxCharHdle = handle;
 800f064:	4a34      	ldr	r2, [pc, #208]	; (800f138 <DTC_Event_Handler+0x2b8>)
 800f066:	8abb      	ldrh	r3, [r7, #20]
 800f068:	80d3      	strh	r3, [r2, #6]
              pr->Data_Length -= 21;
 800f06a:	69bb      	ldr	r3, [r7, #24]
 800f06c:	78db      	ldrb	r3, [r3, #3]
 800f06e:	3b15      	subs	r3, #21
 800f070:	b2da      	uxtb	r2, r3
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	70da      	strb	r2, [r3, #3]
              idx += 21;
 800f076:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800f07a:	3315      	adds	r3, #21
 800f07c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
            while(pr->Data_Length > 0)
 800f080:	69bb      	ldr	r3, [r7, #24]
 800f082:	78db      	ldrb	r3, [r3, #3]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d1c2      	bne.n	800f00e <DTC_Event_Handler+0x18e>
        break;
 800f088:	e0d8      	b.n	800f23c <DTC_Event_Handler+0x3bc>
          aci_att_find_info_resp_event_rp0 *pr = (void*) blue_evt->data;
 800f08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f08c:	3302      	adds	r3, #2
 800f08e:	613b      	str	r3, [r7, #16]
          numDesc = (pr->Event_Data_Length) / 4;
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	78db      	ldrb	r3, [r3, #3]
 800f094:	089b      	lsrs	r3, r3, #2
 800f096:	73fb      	strb	r3, [r7, #15]
          idx = 0;
 800f098:	2300      	movs	r3, #0
 800f09a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
          if (pr->Format == UUID_TYPE_16)
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	789b      	ldrb	r3, [r3, #2]
 800f0a2:	2b01      	cmp	r3, #1
 800f0a4:	f040 80cc 	bne.w	800f240 <DTC_Event_Handler+0x3c0>
            for (i = 0; i < numDesc; i++)
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800f0ae:	e03a      	b.n	800f126 <DTC_Event_Handler+0x2a6>
              handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 800f0b0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f0b4:	693a      	ldr	r2, [r7, #16]
 800f0b6:	4413      	add	r3, r2
 800f0b8:	791b      	ldrb	r3, [r3, #4]
 800f0ba:	b29a      	uxth	r2, r3
 800f0bc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f0c0:	6939      	ldr	r1, [r7, #16]
 800f0c2:	440b      	add	r3, r1
 800f0c4:	3304      	adds	r3, #4
 800f0c6:	3301      	adds	r3, #1
 800f0c8:	781b      	ldrb	r3, [r3, #0]
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	021b      	lsls	r3, r3, #8
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	4313      	orrs	r3, r2
 800f0d2:	81bb      	strh	r3, [r7, #12]
              uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx + 2]);
 800f0d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f0d8:	3302      	adds	r3, #2
 800f0da:	693a      	ldr	r2, [r7, #16]
 800f0dc:	4413      	add	r3, r2
 800f0de:	791b      	ldrb	r3, [r3, #4]
 800f0e0:	b29a      	uxth	r2, r3
 800f0e2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f0e6:	3302      	adds	r3, #2
 800f0e8:	6939      	ldr	r1, [r7, #16]
 800f0ea:	440b      	add	r3, r1
 800f0ec:	3304      	adds	r3, #4
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	b29b      	uxth	r3, r3
 800f0f4:	021b      	lsls	r3, r3, #8
 800f0f6:	b29b      	uxth	r3, r3
 800f0f8:	4313      	orrs	r3, r2
 800f0fa:	817b      	strh	r3, [r7, #10]
              if (uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 800f0fc:	897b      	ldrh	r3, [r7, #10]
 800f0fe:	f642 1202 	movw	r2, #10498	; 0x2902
 800f102:	4293      	cmp	r3, r2
 800f104:	d105      	bne.n	800f112 <DTC_Event_Handler+0x292>
                APP_DBG_MSG("DTC_Event_Handler: DTC_DISCOVER_TX_CHAR_DESC ready to enable notification\n");
 800f106:	480f      	ldr	r0, [pc, #60]	; (800f144 <DTC_Event_Handler+0x2c4>)
 800f108:	f001 fa06 	bl	8010518 <puts>
                DataTransferClientContext.DataTransferTxDescHandle = handle;
 800f10c:	4a0a      	ldr	r2, [pc, #40]	; (800f138 <DTC_Event_Handler+0x2b8>)
 800f10e:	89bb      	ldrh	r3, [r7, #12]
 800f110:	8113      	strh	r3, [r2, #8]
              idx += 4;
 800f112:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f116:	3304      	adds	r3, #4
 800f118:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
            for (i = 0; i < numDesc; i++)
 800f11c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f120:	3301      	adds	r3, #1
 800f122:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800f126:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800f12a:	7bfb      	ldrb	r3, [r7, #15]
 800f12c:	429a      	cmp	r2, r3
 800f12e:	d3bf      	bcc.n	800f0b0 <DTC_Event_Handler+0x230>
        break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 800f130:	e086      	b.n	800f240 <DTC_Event_Handler+0x3c0>
 800f132:	bf00      	nop
 800f134:	08012164 	.word	0x08012164
 800f138:	20006d74 	.word	0x20006d74
 800f13c:	0801219c 	.word	0x0801219c
 800f140:	080121d4 	.word	0x080121d4
 800f144:	08012208 	.word	0x08012208
          aci_gatt_notification_event_rp0 *pr = (void*) blue_evt->data;
 800f148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f14a:	3302      	adds	r3, #2
 800f14c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if ((pr->Attribute_Handle == DataTransferClientContext.DataTransferTxCharHdle)
 800f14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f150:	885b      	ldrh	r3, [r3, #2]
 800f152:	b29a      	uxth	r2, r3
 800f154:	4b3f      	ldr	r3, [pc, #252]	; (800f254 <DTC_Event_Handler+0x3d4>)
 800f156:	88db      	ldrh	r3, [r3, #6]
 800f158:	429a      	cmp	r2, r3
 800f15a:	d173      	bne.n	800f244 <DTC_Event_Handler+0x3c4>
              && (pr->Attribute_Value_Length > (2)))
 800f15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f15e:	791b      	ldrb	r3, [r3, #4]
 800f160:	2b02      	cmp	r3, #2
 800f162:	d96f      	bls.n	800f244 <DTC_Event_Handler+0x3c4>
            NotificationData.DataTransfered.Length = pr->Attribute_Value_Length;
 800f164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f166:	791b      	ldrb	r3, [r3, #4]
 800f168:	461a      	mov	r2, r3
 800f16a:	4b3b      	ldr	r3, [pc, #236]	; (800f258 <DTC_Event_Handler+0x3d8>)
 800f16c:	611a      	str	r2, [r3, #16]
            NotificationData.DataTransfered.pPayload = (pr->Attribute_Value);
 800f16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f170:	3305      	adds	r3, #5
 800f172:	4a39      	ldr	r2, [pc, #228]	; (800f258 <DTC_Event_Handler+0x3d8>)
 800f174:	6053      	str	r3, [r2, #4]
            NotificationData.DataTransfered.pPayload_n = *((uint32_t*) &(pr->Attribute_Value[0]));
 800f176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f178:	3305      	adds	r3, #5
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	4a36      	ldr	r2, [pc, #216]	; (800f258 <DTC_Event_Handler+0x3d8>)
 800f17e:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f180:	b672      	cpsid	i
            if (NotificationData.DataTransfered.pPayload_n >= (NotificationData.DataTransfered.pPayload_n_1 + 2))
 800f182:	4b35      	ldr	r3, [pc, #212]	; (800f258 <DTC_Event_Handler+0x3d8>)
 800f184:	68da      	ldr	r2, [r3, #12]
 800f186:	4b34      	ldr	r3, [pc, #208]	; (800f258 <DTC_Event_Handler+0x3d8>)
 800f188:	689b      	ldr	r3, [r3, #8]
 800f18a:	3302      	adds	r3, #2
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d30f      	bcc.n	800f1b0 <DTC_Event_Handler+0x330>
                  ((NotificationData.DataTransfered.pPayload_n - NotificationData.DataTransfered.pPayload_n_1) - 1);
 800f190:	4b31      	ldr	r3, [pc, #196]	; (800f258 <DTC_Event_Handler+0x3d8>)
 800f192:	68db      	ldr	r3, [r3, #12]
 800f194:	b29a      	uxth	r2, r3
 800f196:	4b30      	ldr	r3, [pc, #192]	; (800f258 <DTC_Event_Handler+0x3d8>)
 800f198:	689b      	ldr	r3, [r3, #8]
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	1ad3      	subs	r3, r2, r3
 800f19e:	b29a      	uxth	r2, r3
              packet_lost +=
 800f1a0:	4b2e      	ldr	r3, [pc, #184]	; (800f25c <DTC_Event_Handler+0x3dc>)
 800f1a2:	881b      	ldrh	r3, [r3, #0]
 800f1a4:	4413      	add	r3, r2
 800f1a6:	b29b      	uxth	r3, r3
 800f1a8:	3b01      	subs	r3, #1
 800f1aa:	b29a      	uxth	r2, r3
 800f1ac:	4b2b      	ldr	r3, [pc, #172]	; (800f25c <DTC_Event_Handler+0x3dc>)
 800f1ae:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800f1b0:	b662      	cpsie	i
            CRC_Result = APP_BLE_ComputeCRC8((uint8_t*) (pr->Attribute_Value), (pr->Attribute_Value_Length) - 1);
 800f1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b4:	1d5a      	adds	r2, r3, #5
 800f1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b8:	791b      	ldrb	r3, [r3, #4]
 800f1ba:	3b01      	subs	r3, #1
 800f1bc:	b2db      	uxtb	r3, r3
 800f1be:	4619      	mov	r1, r3
 800f1c0:	4610      	mov	r0, r2
 800f1c2:	f7ff fc57 	bl	800ea74 <APP_BLE_ComputeCRC8>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            CRC_Received = (uint8_t) (pr->Attribute_Value[DATA_NOTIFICATION_MAX_PACKET_SIZE-1]);
 800f1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ce:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800f1d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if (CRC_Received != CRC_Result)
 800f1d6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800f1da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	d00a      	beq.n	800f1f8 <DTC_Event_Handler+0x378>
              N+=1;
 800f1e2:	4b1f      	ldr	r3, [pc, #124]	; (800f260 <DTC_Event_Handler+0x3e0>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	4a1d      	ldr	r2, [pc, #116]	; (800f260 <DTC_Event_Handler+0x3e0>)
 800f1ea:	6013      	str	r3, [r2, #0]
              APP_DBG_MSG("** data error **  N= %d \r\n",(int)N);
 800f1ec:	4b1c      	ldr	r3, [pc, #112]	; (800f260 <DTC_Event_Handler+0x3e0>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	481c      	ldr	r0, [pc, #112]	; (800f264 <DTC_Event_Handler+0x3e4>)
 800f1f4:	f001 f91c 	bl	8010430 <iprintf>
            NotificationData.DataTransfered.pPayload_n_1 = NotificationData.DataTransfered.pPayload_n;
 800f1f8:	4b17      	ldr	r3, [pc, #92]	; (800f258 <DTC_Event_Handler+0x3d8>)
 800f1fa:	68db      	ldr	r3, [r3, #12]
 800f1fc:	4a16      	ldr	r2, [pc, #88]	; (800f258 <DTC_Event_Handler+0x3d8>)
 800f1fe:	6093      	str	r3, [r2, #8]
            if (DataTransfered == 0)
 800f200:	4b19      	ldr	r3, [pc, #100]	; (800f268 <DTC_Event_Handler+0x3e8>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d106      	bne.n	800f216 <DTC_Event_Handler+0x396>
              HW_TS_Start(TimerDataThroughput_Id, DATA_THROUGHPUT_MEASUREMENT);
 800f208:	4b18      	ldr	r3, [pc, #96]	; (800f26c <DTC_Event_Handler+0x3ec>)
 800f20a:	781b      	ldrb	r3, [r3, #0]
 800f20c:	f640 0101 	movw	r1, #2049	; 0x801
 800f210:	4618      	mov	r0, r3
 800f212:	f7f2 fe2b 	bl	8001e6c <HW_TS_Start>
            DataTransfered += NotificationData.DataTransfered.Length;
 800f216:	4b10      	ldr	r3, [pc, #64]	; (800f258 <DTC_Event_Handler+0x3d8>)
 800f218:	691a      	ldr	r2, [r3, #16]
 800f21a:	4b13      	ldr	r3, [pc, #76]	; (800f268 <DTC_Event_Handler+0x3e8>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	4413      	add	r3, r2
 800f220:	4a11      	ldr	r2, [pc, #68]	; (800f268 <DTC_Event_Handler+0x3e8>)
 800f222:	6013      	str	r3, [r2, #0]
        break;/* end EVT_BLUE_GATT_NOTIFICATION */
 800f224:	e00e      	b.n	800f244 <DTC_Event_Handler+0x3c4>
          osThreadFlagsSet( LinkConfigProcessId, 2 );
 800f226:	4b12      	ldr	r3, [pc, #72]	; (800f270 <DTC_Event_Handler+0x3f0>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	2102      	movs	r1, #2
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7fb f8a3 	bl	800a378 <osThreadFlagsSet>
          break; /*EVT_BLUE_GATT_PROCEDURE_COMPLETE*/
 800f232:	e008      	b.n	800f246 <DTC_Event_Handler+0x3c6>
          break;
 800f234:	bf00      	nop
 800f236:	e006      	b.n	800f246 <DTC_Event_Handler+0x3c6>
          break;
 800f238:	bf00      	nop
 800f23a:	e004      	b.n	800f246 <DTC_Event_Handler+0x3c6>
        break;
 800f23c:	bf00      	nop
 800f23e:	e002      	b.n	800f246 <DTC_Event_Handler+0x3c6>
        break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 800f240:	bf00      	nop
 800f242:	e000      	b.n	800f246 <DTC_Event_Handler+0x3c6>
        break;/* end EVT_BLUE_GATT_NOTIFICATION */
 800f244:	bf00      	nop
          break;
 800f246:	bf00      	nop
      }
    }

    return (return_value);
 800f248:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
  }
 800f24c:	4618      	mov	r0, r3
 800f24e:	3740      	adds	r7, #64	; 0x40
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	20006d74 	.word	0x20006d74
 800f258:	200068b4 	.word	0x200068b4
 800f25c:	200068a8 	.word	0x200068a8
 800f260:	200068cc 	.word	0x200068cc
 800f264:	08012254 	.word	0x08012254
 800f268:	200068d0 	.word	0x200068d0
 800f26c:	200068c8 	.word	0x200068c8
 800f270:	20006d3c 	.word	0x20006d3c

0800f274 <DataThroughputTimer>:

    APP_DBG_MSG("DT = %ld bytes/s lost = %ld \n",DataThroughputValue, packet_lost_local);
  }

  static void DataThroughputTimer( void )
  {
 800f274:	b480      	push	{r7}
 800f276:	af00      	add	r7, sp, #0
    DataThroughputValue = (uint32_t)(DataTransfered / TIMEUNIT);
 800f278:	4b09      	ldr	r3, [pc, #36]	; (800f2a0 <DataThroughputTimer+0x2c>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	4a09      	ldr	r2, [pc, #36]	; (800f2a4 <DataThroughputTimer+0x30>)
 800f27e:	6013      	str	r3, [r2, #0]
    packet_lost_local = (uint32_t)(packet_lost / TIMEUNIT);
 800f280:	4b09      	ldr	r3, [pc, #36]	; (800f2a8 <DataThroughputTimer+0x34>)
 800f282:	881b      	ldrh	r3, [r3, #0]
 800f284:	461a      	mov	r2, r3
 800f286:	4b09      	ldr	r3, [pc, #36]	; (800f2ac <DataThroughputTimer+0x38>)
 800f288:	601a      	str	r2, [r3, #0]
    DataTransfered = 0;
 800f28a:	4b05      	ldr	r3, [pc, #20]	; (800f2a0 <DataThroughputTimer+0x2c>)
 800f28c:	2200      	movs	r2, #0
 800f28e:	601a      	str	r2, [r3, #0]
    packet_lost = 0;
 800f290:	4b05      	ldr	r3, [pc, #20]	; (800f2a8 <DataThroughputTimer+0x34>)
 800f292:	2200      	movs	r2, #0
 800f294:	801a      	strh	r2, [r3, #0]

//    UTIL_SEQ_SetTask(1 << CFG_TASK_APP_DATA_THROUGHPUT_ID, CFG_SCH_PRIO_0);
    return;
 800f296:	bf00      	nop
  }
 800f298:	46bd      	mov	sp, r7
 800f29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29e:	4770      	bx	lr
 800f2a0:	200068d0 	.word	0x200068d0
 800f2a4:	200068ac 	.word	0x200068ac
 800f2a8:	200068a8 	.word	0x200068a8
 800f2ac:	200068b0 	.word	0x200068b0

0800f2b0 <GattProcReq>:

  static void GattProcReq(GattProcId_t GattProcId)
  {
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b084      	sub	sp, #16
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	71fb      	strb	r3, [r7, #7]
    tBleStatus status;

    switch(GattProcId)
 800f2ba:	79fb      	ldrb	r3, [r7, #7]
 800f2bc:	2b03      	cmp	r3, #3
 800f2be:	f200 808e 	bhi.w	800f3de <GattProcReq+0x12e>
 800f2c2:	a201      	add	r2, pc, #4	; (adr r2, 800f2c8 <GattProcReq+0x18>)
 800f2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2c8:	0800f2d9 	.word	0x0800f2d9
 800f2cc:	0800f323 	.word	0x0800f323
 800f2d0:	0800f35b 	.word	0x0800f35b
 800f2d4:	0800f39b 	.word	0x0800f39b
    {
      case GATT_PROC_MTU_UPDATE:
        APP_DBG_MSG("change ATT MTU size \n");
 800f2d8:	4843      	ldr	r0, [pc, #268]	; (800f3e8 <GattProcReq+0x138>)
 800f2da:	f001 f91d 	bl	8010518 <puts>
        status = aci_gatt_exchange_config(DataTransferClientContext.connHandle);
 800f2de:	4b43      	ldr	r3, [pc, #268]	; (800f3ec <GattProcReq+0x13c>)
 800f2e0:	881b      	ldrh	r3, [r3, #0]
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7f8 fdb6 	bl	8007e54 <aci_gatt_exchange_config>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	73fb      	strb	r3, [r7, #15]
        if (status != BLE_STATUS_SUCCESS)
 800f2ec:	7bfb      	ldrb	r3, [r7, #15]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d007      	beq.n	800f302 <GattProcReq+0x52>
        {
          APP_DBG_MSG("change MTU cmd failure: 0x%x\n", status);
 800f2f2:	7bfb      	ldrb	r3, [r7, #15]
 800f2f4:	4619      	mov	r1, r3
 800f2f6:	483e      	ldr	r0, [pc, #248]	; (800f3f0 <GattProcReq+0x140>)
 800f2f8:	f001 f89a 	bl	8010430 <iprintf>
          BSP_LED_On(LED_RED);
 800f2fc:	2002      	movs	r0, #2
 800f2fe:	f7f3 f813 	bl	8002328 <BSP_LED_On>

        }
        BSP_LED_On(LED_GREEN);
 800f302:	2001      	movs	r0, #1
 800f304:	f7f3 f810 	bl	8002328 <BSP_LED_On>
//        UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_GATT_PROC_COMPLETE);
        osThreadFlagsWait( 2, osFlagsWaitAny, osWaitForever);
 800f308:	f04f 32ff 	mov.w	r2, #4294967295
 800f30c:	2100      	movs	r1, #0
 800f30e:	2002      	movs	r0, #2
 800f310:	f7fb f894 	bl	800a43c <osThreadFlagsWait>
        BSP_LED_Off(LED_GREEN);
 800f314:	2001      	movs	r0, #1
 800f316:	f7f3 f821 	bl	800235c <BSP_LED_Off>
        APP_DBG_MSG("GATT_PROC_MTU_UPDATE complete event received \n");
 800f31a:	4836      	ldr	r0, [pc, #216]	; (800f3f4 <GattProcReq+0x144>)
 800f31c:	f001 f8fc 	bl	8010518 <puts>
        break;
 800f320:	e05e      	b.n	800f3e0 <GattProcReq+0x130>

      case GATT_PROC_DISC_ALL_PRIMARY_SERVICES:
//    	  BSP_LED_On(LED_BLUE);
        APP_DBG_MSG("Discover all primary services \n");
 800f322:	4835      	ldr	r0, [pc, #212]	; (800f3f8 <GattProcReq+0x148>)
 800f324:	f001 f8f8 	bl	8010518 <puts>

        status = aci_gatt_disc_all_primary_services(DataTransferClientContext.connHandle);
 800f328:	4b30      	ldr	r3, [pc, #192]	; (800f3ec <GattProcReq+0x13c>)
 800f32a:	881b      	ldrh	r3, [r3, #0]
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7f8 fddf 	bl	8007ef0 <aci_gatt_disc_all_primary_services>
 800f332:	4603      	mov	r3, r0
 800f334:	73fb      	strb	r3, [r7, #15]
        if (status != BLE_STATUS_SUCCESS)
 800f336:	7bfb      	ldrb	r3, [r7, #15]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d004      	beq.n	800f346 <GattProcReq+0x96>
        {
          APP_DBG_MSG("Discover all primary services cmd failure: 0x%x\n", status);
 800f33c:	7bfb      	ldrb	r3, [r7, #15]
 800f33e:	4619      	mov	r1, r3
 800f340:	482e      	ldr	r0, [pc, #184]	; (800f3fc <GattProcReq+0x14c>)
 800f342:	f001 f875 	bl	8010430 <iprintf>
//          BSP_LED_On(LED_RED);
        }
//        UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_GATT_PROC_COMPLETE);
        osThreadFlagsWait( 2, osFlagsWaitAny, osWaitForever);
 800f346:	f04f 32ff 	mov.w	r2, #4294967295
 800f34a:	2100      	movs	r1, #0
 800f34c:	2002      	movs	r0, #2
 800f34e:	f7fb f875 	bl	800a43c <osThreadFlagsWait>
//        BSP_LED_On(LED_GREEN);
        APP_DBG_MSG("GATT_PROC_DISC_ALL_PRIMARY_SERVICES complete event received \n");
 800f352:	482b      	ldr	r0, [pc, #172]	; (800f400 <GattProcReq+0x150>)
 800f354:	f001 f8e0 	bl	8010518 <puts>
        break;
 800f358:	e042      	b.n	800f3e0 <GattProcReq+0x130>

      case GATT_PROC_DISC_ALL_CHAR_OF_DT_SERVICE:
        APP_DBG_MSG("Discover all char of service \n");
 800f35a:	482a      	ldr	r0, [pc, #168]	; (800f404 <GattProcReq+0x154>)
 800f35c:	f001 f8dc 	bl	8010518 <puts>

        status = aci_gatt_disc_all_char_of_service(
 800f360:	4b22      	ldr	r3, [pc, #136]	; (800f3ec <GattProcReq+0x13c>)
 800f362:	8818      	ldrh	r0, [r3, #0]
 800f364:	4b21      	ldr	r3, [pc, #132]	; (800f3ec <GattProcReq+0x13c>)
 800f366:	8859      	ldrh	r1, [r3, #2]
 800f368:	4b20      	ldr	r3, [pc, #128]	; (800f3ec <GattProcReq+0x13c>)
 800f36a:	889b      	ldrh	r3, [r3, #4]
 800f36c:	461a      	mov	r2, r3
 800f36e:	f7f8 fe0d 	bl	8007f8c <aci_gatt_disc_all_char_of_service>
 800f372:	4603      	mov	r3, r0
 800f374:	73fb      	strb	r3, [r7, #15]
            DataTransferClientContext.connHandle,
            DataTransferClientContext.DataTransferServiceHandle,
            DataTransferClientContext.DataTransferServiceEndHandle);
        if (status != BLE_STATUS_SUCCESS)
 800f376:	7bfb      	ldrb	r3, [r7, #15]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d004      	beq.n	800f386 <GattProcReq+0xd6>
        {
          APP_DBG_MSG("Discover all char of service cmd failure: 0x%x\n", status);
 800f37c:	7bfb      	ldrb	r3, [r7, #15]
 800f37e:	4619      	mov	r1, r3
 800f380:	4821      	ldr	r0, [pc, #132]	; (800f408 <GattProcReq+0x158>)
 800f382:	f001 f855 	bl	8010430 <iprintf>
//          BSP_LED_On(LED_RED);
        }
//        UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_GATT_PROC_COMPLETE);
        osThreadFlagsWait( 2, osFlagsWaitAny, osWaitForever);
 800f386:	f04f 32ff 	mov.w	r2, #4294967295
 800f38a:	2100      	movs	r1, #0
 800f38c:	2002      	movs	r0, #2
 800f38e:	f7fb f855 	bl	800a43c <osThreadFlagsWait>

        APP_DBG_MSG("GATT_PROC_DISC_ALL_CHAR_OF_DT_SERVICE complete event received \n");
 800f392:	481e      	ldr	r0, [pc, #120]	; (800f40c <GattProcReq+0x15c>)
 800f394:	f001 f8c0 	bl	8010518 <puts>
        break;
 800f398:	e022      	b.n	800f3e0 <GattProcReq+0x130>

      case GATT_PROC_DISC_TX_CHAR_DESC:
        APP_DBG_MSG("Discover Tx char descriptors \n");
 800f39a:	481d      	ldr	r0, [pc, #116]	; (800f410 <GattProcReq+0x160>)
 800f39c:	f001 f8bc 	bl	8010518 <puts>

        status = aci_gatt_disc_all_char_desc(
 800f3a0:	4b12      	ldr	r3, [pc, #72]	; (800f3ec <GattProcReq+0x13c>)
 800f3a2:	8818      	ldrh	r0, [r3, #0]
 800f3a4:	4b11      	ldr	r3, [pc, #68]	; (800f3ec <GattProcReq+0x13c>)
 800f3a6:	88d9      	ldrh	r1, [r3, #6]
            DataTransferClientContext.connHandle,
            DataTransferClientContext.DataTransferTxCharHdle,
            DataTransferClientContext.DataTransferTxCharHdle + 2);
 800f3a8:	4b10      	ldr	r3, [pc, #64]	; (800f3ec <GattProcReq+0x13c>)
 800f3aa:	88db      	ldrh	r3, [r3, #6]
        status = aci_gatt_disc_all_char_desc(
 800f3ac:	3302      	adds	r3, #2
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	461a      	mov	r2, r3
 800f3b2:	f7f8 fe56 	bl	8008062 <aci_gatt_disc_all_char_desc>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	73fb      	strb	r3, [r7, #15]
        if (status != BLE_STATUS_SUCCESS)
 800f3ba:	7bfb      	ldrb	r3, [r7, #15]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d004      	beq.n	800f3ca <GattProcReq+0x11a>
        {
          APP_DBG_MSG("Discover Tx char descriptors cmd failure: 0x%x\n", status);
 800f3c0:	7bfb      	ldrb	r3, [r7, #15]
 800f3c2:	4619      	mov	r1, r3
 800f3c4:	4813      	ldr	r0, [pc, #76]	; (800f414 <GattProcReq+0x164>)
 800f3c6:	f001 f833 	bl	8010430 <iprintf>
//          BSP_LED_On(LED_RED);
        }
//        UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_GATT_PROC_COMPLETE);
        osThreadFlagsWait( 2, osFlagsWaitAny, osWaitForever);
 800f3ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f3ce:	2100      	movs	r1, #0
 800f3d0:	2002      	movs	r0, #2
 800f3d2:	f7fb f833 	bl	800a43c <osThreadFlagsWait>

        APP_DBG_MSG("GATT_PROC_DISC_TX_CHAR_DESC complete event received \n");
 800f3d6:	4810      	ldr	r0, [pc, #64]	; (800f418 <GattProcReq+0x168>)
 800f3d8:	f001 f89e 	bl	8010518 <puts>
        break;
 800f3dc:	e000      	b.n	800f3e0 <GattProcReq+0x130>

      default:
        break;
 800f3de:	bf00      	nop
    }
    return;
 800f3e0:	bf00      	nop
  }
 800f3e2:	3710      	adds	r7, #16
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}
 800f3e8:	080122a4 	.word	0x080122a4
 800f3ec:	20006d74 	.word	0x20006d74
 800f3f0:	080122bc 	.word	0x080122bc
 800f3f4:	080122dc 	.word	0x080122dc
 800f3f8:	0801230c 	.word	0x0801230c
 800f3fc:	0801232c 	.word	0x0801232c
 800f400:	08012360 	.word	0x08012360
 800f404:	080123a0 	.word	0x080123a0
 800f408:	080123c0 	.word	0x080123c0
 800f40c:	080123f0 	.word	0x080123f0
 800f410:	08012430 	.word	0x08012430
 800f414:	08012450 	.word	0x08012450
 800f418:	08012480 	.word	0x08012480

0800f41c <DTS_App_Init>:
 *
 * PUBLIC FUNCTIONS
 *
 *************************************************************/
void DTS_App_Init(void)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_SW2_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, DT_App_Button2_Trigger_Received);
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_SW3_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, DT_App_Button3_Trigger_Received);
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_DATA_TRANSFER_UPDATE_ID, UTIL_SEQ_RFU, SendData);
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_DATA_WRITE_ID, UTIL_SEQ_RFU, BLE_App_Delay_DataThroughput);

  DataWriteProcessId= osThreadNew(BLE_App_Delay_DataThroughput, NULL, &DataWriteProcess_attr);
 800f422:	4a15      	ldr	r2, [pc, #84]	; (800f478 <DTS_App_Init+0x5c>)
 800f424:	2100      	movs	r1, #0
 800f426:	4815      	ldr	r0, [pc, #84]	; (800f47c <DTS_App_Init+0x60>)
 800f428:	f7fa ff00 	bl	800a22c <osThreadNew>
 800f42c:	4602      	mov	r2, r0
 800f42e:	4b14      	ldr	r3, [pc, #80]	; (800f480 <DTS_App_Init+0x64>)
 800f430:	601a      	str	r2, [r3, #0]
  DataTransferProcessId= osThreadNew(SendData, NULL, &DataTransferProcess_attr);
 800f432:	4a14      	ldr	r2, [pc, #80]	; (800f484 <DTS_App_Init+0x68>)
 800f434:	2100      	movs	r1, #0
 800f436:	4814      	ldr	r0, [pc, #80]	; (800f488 <DTS_App_Init+0x6c>)
 800f438:	f7fa fef8 	bl	800a22c <osThreadNew>
 800f43c:	4602      	mov	r2, r0
 800f43e:	4b13      	ldr	r3, [pc, #76]	; (800f48c <DTS_App_Init+0x70>)
 800f440:	601a      	str	r2, [r3, #0]


  /**
   * Initialize data buffer
   */
  for (i=0 ; i<(DATA_NOTIFICATION_MAX_PACKET_SIZE-1) ; i++)
 800f442:	2300      	movs	r3, #0
 800f444:	71fb      	strb	r3, [r7, #7]
 800f446:	e006      	b.n	800f456 <DTS_App_Init+0x3a>
  {
    Notification_Data_Buffer[i] = i;
 800f448:	79fb      	ldrb	r3, [r7, #7]
 800f44a:	4911      	ldr	r1, [pc, #68]	; (800f490 <DTS_App_Init+0x74>)
 800f44c:	79fa      	ldrb	r2, [r7, #7]
 800f44e:	54ca      	strb	r2, [r1, r3]
  for (i=0 ; i<(DATA_NOTIFICATION_MAX_PACKET_SIZE-1) ; i++)
 800f450:	79fb      	ldrb	r3, [r7, #7]
 800f452:	3301      	adds	r3, #1
 800f454:	71fb      	strb	r3, [r7, #7]
 800f456:	79fb      	ldrb	r3, [r7, #7]
 800f458:	2bee      	cmp	r3, #238	; 0xee
 800f45a:	d9f5      	bls.n	800f448 <DTS_App_Init+0x2c>
  }

  DataTransferServerContext.NotificationTransferReq = DTS_APP_TRANSFER_REQ_OFF;
 800f45c:	4b0d      	ldr	r3, [pc, #52]	; (800f494 <DTS_App_Init+0x78>)
 800f45e:	2200      	movs	r2, #0
 800f460:	741a      	strb	r2, [r3, #16]
  DataTransferServerContext.ButtonTransferReq = DTS_APP_TRANSFER_REQ_OFF;
 800f462:	4b0c      	ldr	r3, [pc, #48]	; (800f494 <DTS_App_Init+0x78>)
 800f464:	2200      	movs	r2, #0
 800f466:	745a      	strb	r2, [r3, #17]
  DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_ON;
 800f468:	4b0a      	ldr	r3, [pc, #40]	; (800f494 <DTS_App_Init+0x78>)
 800f46a:	2201      	movs	r2, #1
 800f46c:	749a      	strb	r2, [r3, #18]
}
 800f46e:	bf00      	nop
 800f470:	3708      	adds	r7, #8
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop
 800f478:	08012930 	.word	0x08012930
 800f47c:	0800f641 	.word	0x0800f641
 800f480:	20006d44 	.word	0x20006d44
 800f484:	08012954 	.word	0x08012954
 800f488:	0800f589 	.word	0x0800f589
 800f48c:	20006d68 	.word	0x20006d68
 800f490:	200068d4 	.word	0x200068d4
 800f494:	20006d84 	.word	0x20006d84

0800f498 <DTS_App_TxPoolAvailableNotification>:
//    UTIL_SEQ_SetTask(1 << CFG_TASK_SW3_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
	  osThreadFlagsSet( Button_SW2_ProcessId, 1 );
}

void DTS_App_TxPoolAvailableNotification(void)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	af00      	add	r7, sp, #0
  DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_ON;
 800f49c:	4b05      	ldr	r3, [pc, #20]	; (800f4b4 <DTS_App_TxPoolAvailableNotification+0x1c>)
 800f49e:	2201      	movs	r2, #1
 800f4a0:	749a      	strb	r2, [r3, #18]
//  UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_TRANSFER_UPDATE_ID, CFG_SCH_PRIO_0);
  osThreadFlagsSet( DataTransferProcessId, 1 );
 800f4a2:	4b05      	ldr	r3, [pc, #20]	; (800f4b8 <DTS_App_TxPoolAvailableNotification+0x20>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	2101      	movs	r1, #1
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f7fa ff65 	bl	800a378 <osThreadFlagsSet>

  return;
 800f4ae:	bf00      	nop
}
 800f4b0:	bd80      	pop	{r7, pc}
 800f4b2:	bf00      	nop
 800f4b4:	20006d84 	.word	0x20006d84
 800f4b8:	20006d68 	.word	0x20006d68

0800f4bc <DTS_Notification>:
 *
 * CALLBACK FUNCTIONS
 *
 *************************************************************/
void DTS_Notification( DTS_STM_App_Notification_evt_t *pNotification )
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
  switch (pNotification->Evt_Opcode)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	785b      	ldrb	r3, [r3, #1]
 800f4c8:	2b05      	cmp	r3, #5
 800f4ca:	d84c      	bhi.n	800f566 <DTS_Notification+0xaa>
 800f4cc:	a201      	add	r2, pc, #4	; (adr r2, 800f4d4 <DTS_Notification+0x18>)
 800f4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4d2:	bf00      	nop
 800f4d4:	0800f4ed 	.word	0x0800f4ed
 800f4d8:	0800f501 	.word	0x0800f501
 800f4dc:	0800f553 	.word	0x0800f553
 800f4e0:	0800f509 	.word	0x0800f509
 800f4e4:	0800f515 	.word	0x0800f515
 800f4e8:	0800f51d 	.word	0x0800f51d
  {
    case DTS_STM__NOTIFICATION_ENABLED:
      DataTransferServerContext.NotificationTransferReq = DTS_APP_TRANSFER_REQ_ON;
 800f4ec:	4b20      	ldr	r3, [pc, #128]	; (800f570 <DTS_Notification+0xb4>)
 800f4ee:	2201      	movs	r2, #1
 800f4f0:	741a      	strb	r2, [r3, #16]
//      UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_TRANSFER_UPDATE_ID, CFG_SCH_PRIO_0);
      osThreadFlagsSet( DataTransferProcessId, 1 );
 800f4f2:	4b20      	ldr	r3, [pc, #128]	; (800f574 <DTS_Notification+0xb8>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	2101      	movs	r1, #1
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7fa ff3d 	bl	800a378 <osThreadFlagsSet>
      break;
 800f4fe:	e033      	b.n	800f568 <DTS_Notification+0xac>

    case DTS_STM_NOTIFICATION_DISABLED:
      DataTransferServerContext.NotificationTransferReq = DTS_APP_TRANSFER_REQ_OFF;
 800f500:	4b1b      	ldr	r3, [pc, #108]	; (800f570 <DTS_Notification+0xb4>)
 800f502:	2200      	movs	r2, #0
 800f504:	741a      	strb	r2, [r3, #16]
      break;
 800f506:	e02f      	b.n	800f568 <DTS_Notification+0xac>
      
    case DTC_NOTIFICATION_ENABLED:
//      BLE_SVC_L2CAP_Conn_Update_7_5();
      BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800f508:	4b1b      	ldr	r3, [pc, #108]	; (800f578 <DTS_Notification+0xbc>)
 800f50a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7ff fb43 	bl	800eb98 <BLE_SVC_L2CAP_Conn_Update>

      //DataTransferServerContext.NotificationClientTransferFlag = 0x01;
      break;
 800f512:	e029      	b.n	800f568 <DTS_Notification+0xac>
      
    case DTC_NOTIFICATION_DISABLED:
      //DataTransferServerContext.NotificationClientTransferFlag = 0x00;
      APP_DBG_MSG("write data notification disabled \n");
 800f514:	4819      	ldr	r0, [pc, #100]	; (800f57c <DTS_Notification+0xc0>)
 800f516:	f000 ffff 	bl	8010518 <puts>
      break;
 800f51a:	e025      	b.n	800f568 <DTS_Notification+0xac>
      
    case DTS_STM_DATA_RECEIVED:
      if (DataReceived == 0)
 800f51c:	4b18      	ldr	r3, [pc, #96]	; (800f580 <DTS_Notification+0xc4>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d10e      	bne.n	800f542 <DTS_Notification+0x86>
      {
        /* start timer */
        DataReceived += pNotification->DataTransfered.Length;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	691a      	ldr	r2, [r3, #16]
 800f528:	4b15      	ldr	r3, [pc, #84]	; (800f580 <DTS_Notification+0xc4>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	4413      	add	r3, r2
 800f52e:	4a14      	ldr	r2, [pc, #80]	; (800f580 <DTS_Notification+0xc4>)
 800f530:	6013      	str	r3, [r2, #0]
        HW_TS_Start(TimerDataThroughputWrite_Id, DELAY_1s);
 800f532:	4b14      	ldr	r3, [pc, #80]	; (800f584 <DTS_Notification+0xc8>)
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	f640 0101 	movw	r1, #2049	; 0x801
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7f2 fc96 	bl	8001e6c <HW_TS_Start>
      }
      else
      {
        DataReceived += pNotification->DataTransfered.Length;
      }
      break;
 800f540:	e012      	b.n	800f568 <DTS_Notification+0xac>
        DataReceived += pNotification->DataTransfered.Length;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	691a      	ldr	r2, [r3, #16]
 800f546:	4b0e      	ldr	r3, [pc, #56]	; (800f580 <DTS_Notification+0xc4>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	4413      	add	r3, r2
 800f54c:	4a0c      	ldr	r2, [pc, #48]	; (800f580 <DTS_Notification+0xc4>)
 800f54e:	6013      	str	r3, [r2, #0]
      break;
 800f550:	e00a      	b.n	800f568 <DTS_Notification+0xac>

    case DTS_STM_GATT_TX_POOL_AVAILABLE:
      DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_ON;
 800f552:	4b07      	ldr	r3, [pc, #28]	; (800f570 <DTS_Notification+0xb4>)
 800f554:	2201      	movs	r2, #1
 800f556:	749a      	strb	r2, [r3, #18]
//      UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_TRANSFER_UPDATE_ID, CFG_SCH_PRIO_0);
      osThreadFlagsSet( DataTransferProcessId, 1 );
 800f558:	4b06      	ldr	r3, [pc, #24]	; (800f574 <DTS_Notification+0xb8>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	2101      	movs	r1, #1
 800f55e:	4618      	mov	r0, r3
 800f560:	f7fa ff0a 	bl	800a378 <osThreadFlagsSet>
      break;
 800f564:	e000      	b.n	800f568 <DTS_Notification+0xac>

    default:
      break;
 800f566:	bf00      	nop
  }

  return;
 800f568:	bf00      	nop
}
 800f56a:	3708      	adds	r7, #8
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}
 800f570:	20006d84 	.word	0x20006d84
 800f574:	20006d68 	.word	0x20006d68
 800f578:	20000198 	.word	0x20000198
 800f57c:	080124f8 	.word	0x080124f8
 800f580:	20006d80 	.word	0x20006d80
 800f584:	20006d58 	.word	0x20006d58

0800f588 <SendData>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
void SendData( void * argument )
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b084      	sub	sp, #16
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	  for(;;)
	  {
	    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800f590:	f04f 32ff 	mov.w	r2, #4294967295
 800f594:	2100      	movs	r1, #0
 800f596:	2001      	movs	r0, #1
 800f598:	f7fa ff50 	bl	800a43c <osThreadFlagsWait>

  tBleStatus status = BLE_STATUS_INVALID_PARAMS;
 800f59c:	2342      	movs	r3, #66	; 0x42
 800f59e:	73fb      	strb	r3, [r7, #15]
  uint8_t crc_result;

  if( (DataTransferServerContext.ButtonTransferReq != DTS_APP_TRANSFER_REQ_OFF)
 800f5a0:	4b1e      	ldr	r3, [pc, #120]	; (800f61c <SendData+0x94>)
 800f5a2:	7c5b      	ldrb	r3, [r3, #17]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d0f3      	beq.n	800f590 <SendData+0x8>
      && (DataTransferServerContext.NotificationTransferReq != DTS_APP_TRANSFER_REQ_OFF)
 800f5a8:	4b1c      	ldr	r3, [pc, #112]	; (800f61c <SendData+0x94>)
 800f5aa:	7c1b      	ldrb	r3, [r3, #16]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d0ef      	beq.n	800f590 <SendData+0x8>
      && (DataTransferServerContext.DtFlowStatus != DTS_APP_FLOW_OFF) )
 800f5b0:	4b1a      	ldr	r3, [pc, #104]	; (800f61c <SendData+0x94>)
 800f5b2:	7c9b      	ldrb	r3, [r3, #18]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d0eb      	beq.n	800f590 <SendData+0x8>
  {   
    /*Data Packet to send to remote*/
    Notification_Data_Buffer[0] += 1;
 800f5b8:	4b19      	ldr	r3, [pc, #100]	; (800f620 <SendData+0x98>)
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	3301      	adds	r3, #1
 800f5be:	b2da      	uxtb	r2, r3
 800f5c0:	4b17      	ldr	r3, [pc, #92]	; (800f620 <SendData+0x98>)
 800f5c2:	701a      	strb	r2, [r3, #0]
    /* compute CRC */
    crc_result = APP_BLE_ComputeCRC8((uint8_t*) Notification_Data_Buffer, (DATA_NOTIFICATION_MAX_PACKET_SIZE - 1));
 800f5c4:	21ef      	movs	r1, #239	; 0xef
 800f5c6:	4816      	ldr	r0, [pc, #88]	; (800f620 <SendData+0x98>)
 800f5c8:	f7ff fa54 	bl	800ea74 <APP_BLE_ComputeCRC8>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	73bb      	strb	r3, [r7, #14]
    Notification_Data_Buffer[DATA_NOTIFICATION_MAX_PACKET_SIZE - 1] = crc_result;
 800f5d0:	4a13      	ldr	r2, [pc, #76]	; (800f620 <SendData+0x98>)
 800f5d2:	7bbb      	ldrb	r3, [r7, #14]
 800f5d4:	f882 30ef 	strb.w	r3, [r2, #239]	; 0xef

    DataTransferServerContext.TxData.pPayload = Notification_Data_Buffer;
 800f5d8:	4b10      	ldr	r3, [pc, #64]	; (800f61c <SendData+0x94>)
 800f5da:	4a11      	ldr	r2, [pc, #68]	; (800f620 <SendData+0x98>)
 800f5dc:	601a      	str	r2, [r3, #0]
    //DataTransferServerContext.TxData.Length = DATA_NOTIFICATION_MAX_PACKET_SIZE; /* DATA_NOTIFICATION_MAX_PACKET_SIZE */
    DataTransferServerContext.TxData.Length =  DATA_NOTIFICATION_MAX_PACKET_SIZE; //Att_Mtu_Exchanged-10;
 800f5de:	4b0f      	ldr	r3, [pc, #60]	; (800f61c <SendData+0x94>)
 800f5e0:	22f0      	movs	r2, #240	; 0xf0
 800f5e2:	60da      	str	r2, [r3, #12]

    status = DTS_STM_UpdateChar(DATA_TRANSFER_TX_CHAR_UUID, (uint8_t *) &DataTransferServerContext.TxData);
 800f5e4:	490d      	ldr	r1, [pc, #52]	; (800f61c <SendData+0x94>)
 800f5e6:	f64f 6081 	movw	r0, #65153	; 0xfe81
 800f5ea:	f000 f9f7 	bl	800f9dc <DTS_STM_UpdateChar>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	73fb      	strb	r3, [r7, #15]
    if (status == BLE_STATUS_INSUFFICIENT_RESOURCES)
 800f5f2:	7bfb      	ldrb	r3, [r7, #15]
 800f5f4:	2b64      	cmp	r3, #100	; 0x64
 800f5f6:	d109      	bne.n	800f60c <SendData+0x84>
    {
      DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_OFF;
 800f5f8:	4b08      	ldr	r3, [pc, #32]	; (800f61c <SendData+0x94>)
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	749a      	strb	r2, [r3, #18]
      (Notification_Data_Buffer[0])-=1;
 800f5fe:	4b08      	ldr	r3, [pc, #32]	; (800f620 <SendData+0x98>)
 800f600:	781b      	ldrb	r3, [r3, #0]
 800f602:	3b01      	subs	r3, #1
 800f604:	b2da      	uxtb	r2, r3
 800f606:	4b06      	ldr	r3, [pc, #24]	; (800f620 <SendData+0x98>)
 800f608:	701a      	strb	r2, [r3, #0]
 800f60a:	e7c1      	b.n	800f590 <SendData+0x8>
    }
    else
    {
//      UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_TRANSFER_UPDATE_ID, CFG_SCH_PRIO_0);
    	osThreadFlagsSet( DataTransferProcessId, 1 );
 800f60c:	4b05      	ldr	r3, [pc, #20]	; (800f624 <SendData+0x9c>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	2101      	movs	r1, #1
 800f612:	4618      	mov	r0, r3
 800f614:	f7fa feb0 	bl	800a378 <osThreadFlagsSet>
	  {
 800f618:	e7ba      	b.n	800f590 <SendData+0x8>
 800f61a:	bf00      	nop
 800f61c:	20006d84 	.word	0x20006d84
 800f620:	200068d4 	.word	0x200068d4
 800f624:	20006d68 	.word	0x20006d68

0800f628 <Resume_Notification>:
  }
	  }
//  return;
}
void Resume_Notification(void)
{
 800f628:	b480      	push	{r7}
 800f62a:	af00      	add	r7, sp, #0
  DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_ON;
 800f62c:	4b03      	ldr	r3, [pc, #12]	; (800f63c <Resume_Notification+0x14>)
 800f62e:	2201      	movs	r2, #1
 800f630:	749a      	strb	r2, [r3, #18]
}
 800f632:	bf00      	nop
 800f634:	46bd      	mov	sp, r7
 800f636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63a:	4770      	bx	lr
 800f63c:	20006d84 	.word	0x20006d84

0800f640 <BLE_App_Delay_DataThroughput>:
//  Appli_UpdateButtonState(BSP_PB_GetState(BUTTON_SW3) == BUTTON_PRESSED);
	  }
}

void BLE_App_Delay_DataThroughput(void * argument)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b088      	sub	sp, #32
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	  for(;;)
	  {
	    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800f648:	f04f 32ff 	mov.w	r2, #4294967295
 800f64c:	2100      	movs	r1, #0
 800f64e:	2001      	movs	r0, #1
 800f650:	f7fa fef4 	bl	800a43c <osThreadFlagsWait>
  uint32_t DataThroughput;
  DTS_STM_Payload_t ThroughputToSend; 
  
  DataThroughput = (uint32_t)(DataReceived/TIMEUNIT);
 800f654:	4b0a      	ldr	r3, [pc, #40]	; (800f680 <BLE_App_Delay_DataThroughput+0x40>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	61fb      	str	r3, [r7, #28]
  APP_DBG_MSG("DataThroughput = %ld  bytes/s\n", DataThroughput);
 800f65a:	69fb      	ldr	r3, [r7, #28]
 800f65c:	4619      	mov	r1, r3
 800f65e:	4809      	ldr	r0, [pc, #36]	; (800f684 <BLE_App_Delay_DataThroughput+0x44>)
 800f660:	f000 fee6 	bl	8010430 <iprintf>
  
  ThroughputToSend.Length = 4;
 800f664:	2304      	movs	r3, #4
 800f666:	61bb      	str	r3, [r7, #24]
  ThroughputToSend.pPayload = (uint8_t*)&DataThroughput;
 800f668:	f107 031c 	add.w	r3, r7, #28
 800f66c:	60fb      	str	r3, [r7, #12]
  
  DTS_STM_UpdateCharThroughput( (DTS_STM_Payload_t*) &ThroughputToSend);  
 800f66e:	f107 030c 	add.w	r3, r7, #12
 800f672:	4618      	mov	r0, r3
 800f674:	f000 f9cc 	bl	800fa10 <DTS_STM_UpdateCharThroughput>
  DataReceived = 0;
 800f678:	4b01      	ldr	r3, [pc, #4]	; (800f680 <BLE_App_Delay_DataThroughput+0x40>)
 800f67a:	2200      	movs	r2, #0
 800f67c:	601a      	str	r2, [r3, #0]
	  {
 800f67e:	e7e3      	b.n	800f648 <BLE_App_Delay_DataThroughput+0x8>
 800f680:	20006d80 	.word	0x20006d80
 800f684:	08012550 	.word	0x08012550

0800f688 <DTS_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t DTS_Event_Handler( void *Event )
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b090      	sub	sp, #64	; 0x40
 800f68c:	af02      	add	r7, sp, #8
 800f68e:	6078      	str	r0, [r7, #4]
  aci_att_exchange_mtu_resp_event_rp0 * exchange_mtu_resp;
  aci_gatt_write_permit_req_event_rp0 * write_permit_req ;

  DTS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800f690:	2300      	movs	r3, #0
 800f692:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  event_pckt = (hci_event_pckt *) (((hci_uart_pckt*) Event)->data);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	3301      	adds	r3, #1
 800f69a:	633b      	str	r3, [r7, #48]	; 0x30

  switch (event_pckt->evt)
 800f69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69e:	781b      	ldrb	r3, [r3, #0]
 800f6a0:	2bff      	cmp	r3, #255	; 0xff
 800f6a2:	d000      	beq.n	800f6a6 <DTS_Event_Handler+0x1e>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800f6a4:	e0d4      	b.n	800f850 <DTS_Event_Handler+0x1c8>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800f6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a8:	3302      	adds	r3, #2
 800f6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      switch (blue_evt->ecode)
 800f6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ae:	881b      	ldrh	r3, [r3, #0]
 800f6b0:	b29b      	uxth	r3, r3
 800f6b2:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 800f6b6:	2b15      	cmp	r3, #21
 800f6b8:	f200 80c6 	bhi.w	800f848 <DTS_Event_Handler+0x1c0>
 800f6bc:	a201      	add	r2, pc, #4	; (adr r2, 800f6c4 <DTS_Event_Handler+0x3c>)
 800f6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6c2:	bf00      	nop
 800f6c4:	0800f74f 	.word	0x0800f74f
 800f6c8:	0800f849 	.word	0x0800f849
 800f6cc:	0800f71d 	.word	0x0800f71d
 800f6d0:	0800f849 	.word	0x0800f849
 800f6d4:	0800f849 	.word	0x0800f849
 800f6d8:	0800f849 	.word	0x0800f849
 800f6dc:	0800f849 	.word	0x0800f849
 800f6e0:	0800f849 	.word	0x0800f849
 800f6e4:	0800f849 	.word	0x0800f849
 800f6e8:	0800f849 	.word	0x0800f849
 800f6ec:	0800f849 	.word	0x0800f849
 800f6f0:	0800f849 	.word	0x0800f849
 800f6f4:	0800f849 	.word	0x0800f849
 800f6f8:	0800f849 	.word	0x0800f849
 800f6fc:	0800f849 	.word	0x0800f849
 800f700:	0800f849 	.word	0x0800f849
 800f704:	0800f849 	.word	0x0800f849
 800f708:	0800f849 	.word	0x0800f849
 800f70c:	0800f81b 	.word	0x0800f81b
 800f710:	0800f849 	.word	0x0800f849
 800f714:	0800f849 	.word	0x0800f849
 800f718:	0800f815 	.word	0x0800f815
        	 BSP_LED_On(LED_BLUE);
 800f71c:	2000      	movs	r0, #0
 800f71e:	f7f2 fe03 	bl	8002328 <BSP_LED_On>
          APP_DBG_MSG("EVT_BLUE_ATT_EXCHANGE_MTU_RESP \n");
 800f722:	484e      	ldr	r0, [pc, #312]	; (800f85c <DTS_Event_Handler+0x1d4>)
 800f724:	f000 fef8 	bl	8010518 <puts>
          exchange_mtu_resp = (aci_att_exchange_mtu_resp_event_rp0 *)blue_evt->data;
 800f728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f72a:	3302      	adds	r3, #2
 800f72c:	627b      	str	r3, [r7, #36]	; 0x24
          APP_DBG_MSG("MTU_size = %d \n",exchange_mtu_resp->Server_RX_MTU );
 800f72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f730:	885b      	ldrh	r3, [r3, #2]
 800f732:	b29b      	uxth	r3, r3
 800f734:	4619      	mov	r1, r3
 800f736:	484a      	ldr	r0, [pc, #296]	; (800f860 <DTS_Event_Handler+0x1d8>)
 800f738:	f000 fe7a 	bl	8010430 <iprintf>
          Att_Mtu_Exchanged = exchange_mtu_resp->Server_RX_MTU;
 800f73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f73e:	885b      	ldrh	r3, [r3, #2]
 800f740:	b29a      	uxth	r2, r3
 800f742:	4b48      	ldr	r3, [pc, #288]	; (800f864 <DTS_Event_Handler+0x1dc>)
 800f744:	801a      	strh	r2, [r3, #0]
     	 BSP_LED_On(LED_GREEN);
 800f746:	2001      	movs	r0, #1
 800f748:	f7f2 fdee 	bl	8002328 <BSP_LED_On>
          break;
 800f74c:	e07f      	b.n	800f84e <DTS_Event_Handler+0x1c6>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*) blue_evt->data;
 800f74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f750:	3302      	adds	r3, #2
 800f752:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (aDataTransferContext.DataTransferTxCharHdle + 2))
 800f754:	6a3b      	ldr	r3, [r7, #32]
 800f756:	885b      	ldrh	r3, [r3, #2]
 800f758:	b29b      	uxth	r3, r3
 800f75a:	461a      	mov	r2, r3
 800f75c:	4b42      	ldr	r3, [pc, #264]	; (800f868 <DTS_Event_Handler+0x1e0>)
 800f75e:	885b      	ldrh	r3, [r3, #2]
 800f760:	3302      	adds	r3, #2
 800f762:	429a      	cmp	r2, r3
 800f764:	d11a      	bne.n	800f79c <DTS_Event_Handler+0x114>
            if (attribute_modified->Attr_Data[0] & DTS_STM_NOTIFICATION_MASK)
 800f766:	6a3b      	ldr	r3, [r7, #32]
 800f768:	7a1b      	ldrb	r3, [r3, #8]
 800f76a:	f003 0301 	and.w	r3, r3, #1
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d00a      	beq.n	800f788 <DTS_Event_Handler+0x100>
              APP_DBG_MSG("notification enabled\n");
 800f772:	483e      	ldr	r0, [pc, #248]	; (800f86c <DTS_Event_Handler+0x1e4>)
 800f774:	f000 fed0 	bl	8010518 <puts>
              Notification.Evt_Opcode = DTS_STM__NOTIFICATION_ENABLED;
 800f778:	2300      	movs	r3, #0
 800f77a:	737b      	strb	r3, [r7, #13]
              DTS_Notification(&Notification);
 800f77c:	f107 030c 	add.w	r3, r7, #12
 800f780:	4618      	mov	r0, r3
 800f782:	f7ff fe9b 	bl	800f4bc <DTS_Notification>
 800f786:	e009      	b.n	800f79c <DTS_Event_Handler+0x114>
              APP_DBG_MSG("notification disabled\n");
 800f788:	4839      	ldr	r0, [pc, #228]	; (800f870 <DTS_Event_Handler+0x1e8>)
 800f78a:	f000 fec5 	bl	8010518 <puts>
              Notification.Evt_Opcode = DTS_STM_NOTIFICATION_DISABLED;
 800f78e:	2301      	movs	r3, #1
 800f790:	737b      	strb	r3, [r7, #13]
              DTS_Notification(&Notification);
 800f792:	f107 030c 	add.w	r3, r7, #12
 800f796:	4618      	mov	r0, r3
 800f798:	f7ff fe90 	bl	800f4bc <DTS_Notification>
          if (attribute_modified->Attr_Handle == (aDataTransferContext.DataTransferTxChar3Hdle + 5))
 800f79c:	6a3b      	ldr	r3, [r7, #32]
 800f79e:	885b      	ldrh	r3, [r3, #2]
 800f7a0:	b29b      	uxth	r3, r3
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	4b30      	ldr	r3, [pc, #192]	; (800f868 <DTS_Event_Handler+0x1e0>)
 800f7a6:	88db      	ldrh	r3, [r3, #6]
 800f7a8:	3305      	adds	r3, #5
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d11a      	bne.n	800f7e4 <DTS_Event_Handler+0x15c>
            if (attribute_modified->Attr_Data[0] & DTS_STM_NOTIFICATION_MASK)
 800f7ae:	6a3b      	ldr	r3, [r7, #32]
 800f7b0:	7a1b      	ldrb	r3, [r3, #8]
 800f7b2:	f003 0301 	and.w	r3, r3, #1
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d00a      	beq.n	800f7d0 <DTS_Event_Handler+0x148>
              APP_DBG_MSG("notification enabled\n");
 800f7ba:	482c      	ldr	r0, [pc, #176]	; (800f86c <DTS_Event_Handler+0x1e4>)
 800f7bc:	f000 feac 	bl	8010518 <puts>
              Notification.Evt_Opcode = DTC_NOTIFICATION_ENABLED;
 800f7c0:	2303      	movs	r3, #3
 800f7c2:	737b      	strb	r3, [r7, #13]
              DTS_Notification(&Notification);
 800f7c4:	f107 030c 	add.w	r3, r7, #12
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7ff fe77 	bl	800f4bc <DTS_Notification>
 800f7ce:	e009      	b.n	800f7e4 <DTS_Event_Handler+0x15c>
              APP_DBG_MSG("notification disabled\n");
 800f7d0:	4827      	ldr	r0, [pc, #156]	; (800f870 <DTS_Event_Handler+0x1e8>)
 800f7d2:	f000 fea1 	bl	8010518 <puts>
              Notification.Evt_Opcode = DTC_NOTIFICATION_DISABLED;
 800f7d6:	2304      	movs	r3, #4
 800f7d8:	737b      	strb	r3, [r7, #13]
              DTS_Notification(&Notification);
 800f7da:	f107 030c 	add.w	r3, r7, #12
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7ff fe6c 	bl	800f4bc <DTS_Notification>
          if(attribute_modified->Attr_Handle == (aDataTransferContext.DataTransferRxCharHdle + 1))
 800f7e4:	6a3b      	ldr	r3, [r7, #32]
 800f7e6:	885b      	ldrh	r3, [r3, #2]
 800f7e8:	b29b      	uxth	r3, r3
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	4b1e      	ldr	r3, [pc, #120]	; (800f868 <DTS_Event_Handler+0x1e0>)
 800f7ee:	889b      	ldrh	r3, [r3, #4]
 800f7f0:	3301      	adds	r3, #1
 800f7f2:	429a      	cmp	r2, r3
 800f7f4:	d12a      	bne.n	800f84c <DTS_Event_Handler+0x1c4>
            return_value = SVCCTL_EvtAckFlowEnable;
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            Notification.Evt_Opcode = DTS_STM_DATA_RECEIVED;
 800f7fc:	2305      	movs	r3, #5
 800f7fe:	737b      	strb	r3, [r7, #13]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800f800:	6a3b      	ldr	r3, [r7, #32]
 800f802:	88db      	ldrh	r3, [r3, #6]
 800f804:	b29b      	uxth	r3, r3
 800f806:	61fb      	str	r3, [r7, #28]
            DTS_Notification(&Notification); 
 800f808:	f107 030c 	add.w	r3, r7, #12
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7ff fe55 	bl	800f4bc <DTS_Notification>
          break;
 800f812:	e01b      	b.n	800f84c <DTS_Event_Handler+0x1c4>
          Resume_Notification();
 800f814:	f7ff ff08 	bl	800f628 <Resume_Notification>
          break; 
 800f818:	e019      	b.n	800f84e <DTS_Event_Handler+0x1c6>
        APP_DBG_MSG("write permit req\r\n");
 800f81a:	4816      	ldr	r0, [pc, #88]	; (800f874 <DTS_Event_Handler+0x1ec>)
 800f81c:	f000 fe7c 	bl	8010518 <puts>
        write_permit_req = (aci_gatt_write_permit_req_event_rp0 *) blue_evt->data;
 800f820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f822:	3302      	adds	r3, #2
 800f824:	62bb      	str	r3, [r7, #40]	; 0x28
        aci_gatt_write_resp( write_permit_req->Connection_Handle, write_permit_req->Attribute_Handle, 0, 0, write_permit_req->Data_Length, write_permit_req->Data);        
 800f826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f828:	881b      	ldrh	r3, [r3, #0]
 800f82a:	b298      	uxth	r0, r3
 800f82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f82e:	885b      	ldrh	r3, [r3, #2]
 800f830:	b299      	uxth	r1, r3
 800f832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f834:	791b      	ldrb	r3, [r3, #4]
 800f836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f838:	3205      	adds	r2, #5
 800f83a:	9201      	str	r2, [sp, #4]
 800f83c:	9300      	str	r3, [sp, #0]
 800f83e:	2300      	movs	r3, #0
 800f840:	2200      	movs	r2, #0
 800f842:	f7f8 fc79 	bl	8008138 <aci_gatt_write_resp>
        break;
 800f846:	e002      	b.n	800f84e <DTS_Event_Handler+0x1c6>
          break;
 800f848:	bf00      	nop
 800f84a:	e000      	b.n	800f84e <DTS_Event_Handler+0x1c6>
          break;
 800f84c:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800f84e:	bf00      	nop
  }

  return (return_value);
 800f850:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}/* end SVCCTL_EvtAckStatus_t */
 800f854:	4618      	mov	r0, r3
 800f856:	3738      	adds	r7, #56	; 0x38
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	08012570 	.word	0x08012570
 800f860:	08012590 	.word	0x08012590
 800f864:	20006d70 	.word	0x20006d70
 800f868:	200069c4 	.word	0x200069c4
 800f86c:	080125a0 	.word	0x080125a0
 800f870:	080125b8 	.word	0x080125b8
 800f874:	080125d0 	.word	0x080125d0

0800f878 <TX_Update_Char>:
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * @param  pFeatureValue: The address of the new value to be written
 * @retval None
 */
static tBleStatus TX_Update_Char( DTS_STM_Payload_t *pDataValue )
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b086      	sub	sp, #24
 800f87c:	af02      	add	r7, sp, #8
 800f87e:	6078      	str	r0, [r7, #4]
  tBleStatus ret;

  /**
   *  Notification Data Transfer Packet
   */
  ret = aci_gatt_update_char_value(
 800f880:	4b0a      	ldr	r3, [pc, #40]	; (800f8ac <TX_Update_Char+0x34>)
 800f882:	8818      	ldrh	r0, [r3, #0]
 800f884:	4b09      	ldr	r3, [pc, #36]	; (800f8ac <TX_Update_Char+0x34>)
 800f886:	8859      	ldrh	r1, [r3, #2]
                                   aDataTransferContext.DataTransferSvcHdle,
                                   aDataTransferContext.DataTransferTxCharHdle,
                                   0, /* charValOffset */
                                   pDataValue->Length, /* charValueLen */
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	68db      	ldr	r3, [r3, #12]
  ret = aci_gatt_update_char_value(
 800f88c:	b2da      	uxtb	r2, r3
                                   (uint8_t *) pDataValue->pPayload);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
  ret = aci_gatt_update_char_value(
 800f892:	9300      	str	r3, [sp, #0]
 800f894:	4613      	mov	r3, r2
 800f896:	2200      	movs	r2, #0
 800f898:	f7f8 fa55 	bl	8007d46 <aci_gatt_update_char_value>
 800f89c:	4603      	mov	r3, r0
 800f89e:	73fb      	strb	r3, [r7, #15]

  return ret;
 800f8a0:	7bfb      	ldrb	r3, [r7, #15]
}/* end TX_Update_Char() */
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3710      	adds	r7, #16
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}
 800f8aa:	bf00      	nop
 800f8ac:	200069c4 	.word	0x200069c4

0800f8b0 <DTS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DTS_STM_Init( void )
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b088      	sub	sp, #32
 800f8b4:	af06      	add	r7, sp, #24
  tBleStatus hciCmdResult = BLE_STATUS_FAILED;
 800f8b6:	2341      	movs	r3, #65	; 0x41
 800f8b8:	71fb      	strb	r3, [r7, #7]

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(DTS_Event_Handler);
 800f8ba:	483c      	ldr	r0, [pc, #240]	; (800f9ac <DTS_STM_Init+0xfc>)
 800f8bc:	f7f9 f88c 	bl	80089d8 <SVCCTL_RegisterSvcHandler>

  /* DT service and characteristics */
  hciCmdResult = aci_gatt_add_service(DT_UUID_LENGTH, (Service_UUID_t *) DT_REQ_SERV_UUID,
 800f8c0:	4b3b      	ldr	r3, [pc, #236]	; (800f9b0 <DTS_STM_Init+0x100>)
 800f8c2:	9300      	str	r3, [sp, #0]
 800f8c4:	230a      	movs	r3, #10
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	493a      	ldr	r1, [pc, #232]	; (800f9b4 <DTS_STM_Init+0x104>)
 800f8ca:	2002      	movs	r0, #2
 800f8cc:	f7f8 f8a2 	bl	8007a14 <aci_gatt_add_service>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	71fb      	strb	r3, [r7, #7]
  PRIMARY_SERVICE,
                                      10, &(aDataTransferContext.DataTransferSvcHdle));
  if (hciCmdResult != 0)
 800f8d4:	79fb      	ldrb	r3, [r7, #7]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d007      	beq.n	800f8ea <DTS_STM_Init+0x3a>
  {
    APP_DBG_MSG("error add service 0x%x\n", hciCmdResult);
 800f8da:	79fb      	ldrb	r3, [r7, #7]
 800f8dc:	4619      	mov	r1, r3
 800f8de:	4836      	ldr	r0, [pc, #216]	; (800f9b8 <DTS_STM_Init+0x108>)
 800f8e0:	f000 fda6 	bl	8010430 <iprintf>
    BSP_LED_On(LED_RED);
 800f8e4:	2002      	movs	r0, #2
 800f8e6:	f7f2 fd1f 	bl	8002328 <BSP_LED_On>
  }

  /**
   *  Add Data Transfer TX Characteristic
   */
  hciCmdResult = aci_gatt_add_char(aDataTransferContext.DataTransferSvcHdle,
 800f8ea:	4b31      	ldr	r3, [pc, #196]	; (800f9b0 <DTS_STM_Init+0x100>)
 800f8ec:	8818      	ldrh	r0, [r3, #0]
 800f8ee:	4b33      	ldr	r3, [pc, #204]	; (800f9bc <DTS_STM_Init+0x10c>)
 800f8f0:	9305      	str	r3, [sp, #20]
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	9304      	str	r3, [sp, #16]
 800f8f6:	230a      	movs	r3, #10
 800f8f8:	9303      	str	r3, [sp, #12]
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	9302      	str	r3, [sp, #8]
 800f8fe:	2300      	movs	r3, #0
 800f900:	9301      	str	r3, [sp, #4]
 800f902:	2310      	movs	r3, #16
 800f904:	9300      	str	r3, [sp, #0]
 800f906:	23ff      	movs	r3, #255	; 0xff
 800f908:	4a2d      	ldr	r2, [pc, #180]	; (800f9c0 <DTS_STM_Init+0x110>)
 800f90a:	2102      	movs	r1, #2
 800f90c:	f7f8 f931 	bl	8007b72 <aci_gatt_add_char>
 800f910:	4603      	mov	r3, r0
 800f912:	71fb      	strb	r3, [r7, #7]
                    ATTR_PERMISSION_NONE,
                    GATT_DONT_NOTIFY_EVENTS, /* gattEvtMask */
                    10, /* encryKeySize */
                    1, /* isVariable */
                    &(aDataTransferContext.DataTransferTxCharHdle));
  if (hciCmdResult != 0)
 800f914:	79fb      	ldrb	r3, [r7, #7]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d007      	beq.n	800f92a <DTS_STM_Init+0x7a>
  {
    APP_DBG_MSG("error add char Tx 0x%x\n", hciCmdResult);
 800f91a:	79fb      	ldrb	r3, [r7, #7]
 800f91c:	4619      	mov	r1, r3
 800f91e:	4829      	ldr	r0, [pc, #164]	; (800f9c4 <DTS_STM_Init+0x114>)
 800f920:	f000 fd86 	bl	8010430 <iprintf>
    BSP_LED_On(LED_RED);
 800f924:	2002      	movs	r0, #2
 800f926:	f7f2 fcff 	bl	8002328 <BSP_LED_On>
  }

  /**
   *  Add Data Transfer RX Characteristic
   */
  hciCmdResult = aci_gatt_add_char(aDataTransferContext.DataTransferSvcHdle,
 800f92a:	4b21      	ldr	r3, [pc, #132]	; (800f9b0 <DTS_STM_Init+0x100>)
 800f92c:	8818      	ldrh	r0, [r3, #0]
 800f92e:	4b26      	ldr	r3, [pc, #152]	; (800f9c8 <DTS_STM_Init+0x118>)
 800f930:	9305      	str	r3, [sp, #20]
 800f932:	2301      	movs	r3, #1
 800f934:	9304      	str	r3, [sp, #16]
 800f936:	230a      	movs	r3, #10
 800f938:	9303      	str	r3, [sp, #12]
 800f93a:	2301      	movs	r3, #1
 800f93c:	9302      	str	r3, [sp, #8]
 800f93e:	2300      	movs	r3, #0
 800f940:	9301      	str	r3, [sp, #4]
 800f942:	2304      	movs	r3, #4
 800f944:	9300      	str	r3, [sp, #0]
 800f946:	23ff      	movs	r3, #255	; 0xff
 800f948:	4a20      	ldr	r2, [pc, #128]	; (800f9cc <DTS_STM_Init+0x11c>)
 800f94a:	2102      	movs	r1, #2
 800f94c:	f7f8 f911 	bl	8007b72 <aci_gatt_add_char>
 800f950:	4603      	mov	r3, r0
 800f952:	71fb      	strb	r3, [r7, #7]
                    ATTR_PERMISSION_NONE,
                    GATT_NOTIFY_ATTRIBUTE_WRITE, //GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP, /* gattEvtMask */
                    10, /* encryKeySize */
                    1, /* isVariable */
                    &(aDataTransferContext.DataTransferRxCharHdle));
  if (hciCmdResult != 0)
 800f954:	79fb      	ldrb	r3, [r7, #7]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d005      	beq.n	800f966 <DTS_STM_Init+0xb6>
  {
    APP_DBG_MSG("error add char Tx\n");
 800f95a:	481d      	ldr	r0, [pc, #116]	; (800f9d0 <DTS_STM_Init+0x120>)
 800f95c:	f000 fddc 	bl	8010518 <puts>
    BSP_LED_On(LED_RED);
 800f960:	2002      	movs	r0, #2
 800f962:	f7f2 fce1 	bl	8002328 <BSP_LED_On>
  }
  
  /**
   *  Add Data Transfer TX Characteristic
   */
  hciCmdResult = aci_gatt_add_char(aDataTransferContext.DataTransferSvcHdle,
 800f966:	4b12      	ldr	r3, [pc, #72]	; (800f9b0 <DTS_STM_Init+0x100>)
 800f968:	8818      	ldrh	r0, [r3, #0]
 800f96a:	4b1a      	ldr	r3, [pc, #104]	; (800f9d4 <DTS_STM_Init+0x124>)
 800f96c:	9305      	str	r3, [sp, #20]
 800f96e:	2301      	movs	r3, #1
 800f970:	9304      	str	r3, [sp, #16]
 800f972:	230a      	movs	r3, #10
 800f974:	9303      	str	r3, [sp, #12]
 800f976:	2300      	movs	r3, #0
 800f978:	9302      	str	r3, [sp, #8]
 800f97a:	2300      	movs	r3, #0
 800f97c:	9301      	str	r3, [sp, #4]
 800f97e:	2310      	movs	r3, #16
 800f980:	9300      	str	r3, [sp, #0]
 800f982:	23ff      	movs	r3, #255	; 0xff
 800f984:	4a14      	ldr	r2, [pc, #80]	; (800f9d8 <DTS_STM_Init+0x128>)
 800f986:	2102      	movs	r1, #2
 800f988:	f7f8 f8f3 	bl	8007b72 <aci_gatt_add_char>
 800f98c:	4603      	mov	r3, r0
 800f98e:	71fb      	strb	r3, [r7, #7]
                    ATTR_PERMISSION_NONE,
                    GATT_DONT_NOTIFY_EVENTS, /* gattEvtMask */
                    10, /* encryKeySize */
                    1, /* isVariable */
                    &(aDataTransferContext.DataTransferTxChar3Hdle));
  if (hciCmdResult != 0)
 800f990:	79fb      	ldrb	r3, [r7, #7]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d006      	beq.n	800f9a4 <DTS_STM_Init+0xf4>
  {
    APP_DBG_MSG("error add char Tx\n");
 800f996:	480e      	ldr	r0, [pc, #56]	; (800f9d0 <DTS_STM_Init+0x120>)
 800f998:	f000 fdbe 	bl	8010518 <puts>
    BSP_LED_On(LED_RED);
 800f99c:	2002      	movs	r0, #2
 800f99e:	f7f2 fcc3 	bl	8002328 <BSP_LED_On>
  }
  
  return;
 800f9a2:	bf00      	nop
 800f9a4:	bf00      	nop
}
 800f9a6:	3708      	adds	r7, #8
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}
 800f9ac:	0800f689 	.word	0x0800f689
 800f9b0:	200069c4 	.word	0x200069c4
 800f9b4:	080129a8 	.word	0x080129a8
 800f9b8:	080125e4 	.word	0x080125e4
 800f9bc:	200069c6 	.word	0x200069c6
 800f9c0:	08012978 	.word	0x08012978
 800f9c4:	080125fc 	.word	0x080125fc
 800f9c8:	200069c8 	.word	0x200069c8
 800f9cc:	08012988 	.word	0x08012988
 800f9d0:	08012614 	.word	0x08012614
 800f9d4:	200069ca 	.word	0x200069ca
 800f9d8:	08012998 	.word	0x08012998

0800f9dc <DTS_STM_UpdateChar>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus DTS_STM_UpdateChar( uint16_t UUID , uint8_t *pPayload )
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b084      	sub	sp, #16
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	6039      	str	r1, [r7, #0]
 800f9e6:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800f9e8:	2342      	movs	r3, #66	; 0x42
 800f9ea:	73fb      	strb	r3, [r7, #15]
  switch (UUID)
 800f9ec:	88fb      	ldrh	r3, [r7, #6]
 800f9ee:	f64f 6281 	movw	r2, #65153	; 0xfe81
 800f9f2:	4293      	cmp	r3, r2
 800f9f4:	d000      	beq.n	800f9f8 <DTS_STM_UpdateChar+0x1c>
    case DATA_TRANSFER_TX_CHAR_UUID:
      result = TX_Update_Char((DTS_STM_Payload_t*) pPayload);
      break;

    default:
      break;
 800f9f6:	e005      	b.n	800fa04 <DTS_STM_UpdateChar+0x28>
      result = TX_Update_Char((DTS_STM_Payload_t*) pPayload);
 800f9f8:	6838      	ldr	r0, [r7, #0]
 800f9fa:	f7ff ff3d 	bl	800f878 <TX_Update_Char>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	73fb      	strb	r3, [r7, #15]
      break;
 800fa02:	bf00      	nop
  }
  return result;
 800fa04:	7bfb      	ldrb	r3, [r7, #15]
}/* end DTS_STM_UpdateChar() */
 800fa06:	4618      	mov	r0, r3
 800fa08:	3710      	adds	r7, #16
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}
	...

0800fa10 <DTS_STM_UpdateCharThroughput>:

tBleStatus DTS_STM_UpdateCharThroughput(DTS_STM_Payload_t *pDataValue )
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b086      	sub	sp, #24
 800fa14:	af02      	add	r7, sp, #8
 800fa16:	6078      	str	r0, [r7, #4]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800fa18:	2342      	movs	r3, #66	; 0x42
 800fa1a:	73fb      	strb	r3, [r7, #15]
  /**
   *  Notification Data Transfer Packet
   */
  result = aci_gatt_update_char_value(
 800fa1c:	4b0a      	ldr	r3, [pc, #40]	; (800fa48 <DTS_STM_UpdateCharThroughput+0x38>)
 800fa1e:	8818      	ldrh	r0, [r3, #0]
 800fa20:	4b09      	ldr	r3, [pc, #36]	; (800fa48 <DTS_STM_UpdateCharThroughput+0x38>)
 800fa22:	88d9      	ldrh	r1, [r3, #6]
                                   aDataTransferContext.DataTransferSvcHdle,
                                   aDataTransferContext.DataTransferTxChar3Hdle,
                                   0, /* charValOffset */
                                   pDataValue->Length, /* charValueLen */
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	68db      	ldr	r3, [r3, #12]
  result = aci_gatt_update_char_value(
 800fa28:	b2da      	uxtb	r2, r3
                                   (uint8_t *) pDataValue->pPayload);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
  result = aci_gatt_update_char_value(
 800fa2e:	9300      	str	r3, [sp, #0]
 800fa30:	4613      	mov	r3, r2
 800fa32:	2200      	movs	r2, #0
 800fa34:	f7f8 f987 	bl	8007d46 <aci_gatt_update_char_value>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	73fb      	strb	r3, [r7, #15]
  return result;
 800fa3c:	7bfb      	ldrb	r3, [r7, #15]
}/* end DTS_STM_UpdateChar() */
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3710      	adds	r7, #16
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}
 800fa46:	bf00      	nop
 800fa48:	200069c4 	.word	0x200069c4

0800fa4c <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b082      	sub	sp, #8
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	2b01      	cmp	r3, #1
 800fa5a:	d00e      	beq.n	800fa7a <P2PS_STM_App_Notification+0x2e>
 800fa5c:	2b03      	cmp	r3, #3
 800fa5e:	d016      	beq.n	800fa8e <P2PS_STM_App_Notification+0x42>
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d000      	beq.n	800fa66 <P2PS_STM_App_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800fa64:	e037      	b.n	800fad6 <P2PS_STM_App_Notification+0x8a>
      P2P_Server_App_Context.Notification_Status = 1;
 800fa66:	4b1e      	ldr	r3, [pc, #120]	; (800fae0 <P2PS_STM_App_Notification+0x94>)
 800fa68:	2201      	movs	r2, #1
 800fa6a:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 800fa6c:	481d      	ldr	r0, [pc, #116]	; (800fae4 <P2PS_STM_App_Notification+0x98>)
 800fa6e:	f000 fd53 	bl	8010518 <puts>
      APP_DBG_MSG(" \n\r");
 800fa72:	481d      	ldr	r0, [pc, #116]	; (800fae8 <P2PS_STM_App_Notification+0x9c>)
 800fa74:	f000 fcdc 	bl	8010430 <iprintf>
      break;
 800fa78:	e02d      	b.n	800fad6 <P2PS_STM_App_Notification+0x8a>
      P2P_Server_App_Context.Notification_Status = 0;
 800fa7a:	4b19      	ldr	r3, [pc, #100]	; (800fae0 <P2PS_STM_App_Notification+0x94>)
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 800fa80:	481a      	ldr	r0, [pc, #104]	; (800faec <P2PS_STM_App_Notification+0xa0>)
 800fa82:	f000 fd49 	bl	8010518 <puts>
      APP_DBG_MSG(" \n\r");
 800fa86:	4818      	ldr	r0, [pc, #96]	; (800fae8 <P2PS_STM_App_Notification+0x9c>)
 800fa88:	f000 fcd2 	bl	8010430 <iprintf>
      break;
 800fa8c:	e023      	b.n	800fad6 <P2PS_STM_App_Notification+0x8a>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	685b      	ldr	r3, [r3, #4]
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d11d      	bne.n	800fad4 <P2PS_STM_App_Notification+0x88>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	685b      	ldr	r3, [r3, #4]
 800fa9c:	3301      	adds	r3, #1
 800fa9e:	781b      	ldrb	r3, [r3, #0]
 800faa0:	2b01      	cmp	r3, #1
 800faa2:	d108      	bne.n	800fab6 <P2PS_STM_App_Notification+0x6a>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n"); 
 800faa4:	4812      	ldr	r0, [pc, #72]	; (800faf0 <P2PS_STM_App_Notification+0xa4>)
 800faa6:	f000 fd37 	bl	8010518 <puts>
          APP_DBG_MSG(" \n\r");
 800faaa:	480f      	ldr	r0, [pc, #60]	; (800fae8 <P2PS_STM_App_Notification+0x9c>)
 800faac:	f000 fcc0 	bl	8010430 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800fab0:	4b0b      	ldr	r3, [pc, #44]	; (800fae0 <P2PS_STM_App_Notification+0x94>)
 800fab2:	2201      	movs	r2, #1
 800fab4:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	685b      	ldr	r3, [r3, #4]
 800faba:	3301      	adds	r3, #1
 800fabc:	781b      	ldrb	r3, [r3, #0]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d108      	bne.n	800fad4 <P2PS_STM_App_Notification+0x88>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n"); 
 800fac2:	480c      	ldr	r0, [pc, #48]	; (800faf4 <P2PS_STM_App_Notification+0xa8>)
 800fac4:	f000 fd28 	bl	8010518 <puts>
          APP_DBG_MSG(" \n\r");
 800fac8:	4807      	ldr	r0, [pc, #28]	; (800fae8 <P2PS_STM_App_Notification+0x9c>)
 800faca:	f000 fcb1 	bl	8010430 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800face:	4b04      	ldr	r3, [pc, #16]	; (800fae0 <P2PS_STM_App_Notification+0x94>)
 800fad0:	2200      	movs	r2, #0
 800fad2:	709a      	strb	r2, [r3, #2]
      break;
 800fad4:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800fad6:	bf00      	nop
}
 800fad8:	3708      	adds	r7, #8
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}
 800fade:	bf00      	nop
 800fae0:	20000230 	.word	0x20000230
 800fae4:	08012628 	.word	0x08012628
 800fae8:	0801265c 	.word	0x0801265c
 800faec:	08012660 	.word	0x08012660
 800faf0:	08012694 	.word	0x08012694
 800faf4:	080126bc 	.word	0x080126bc

0800faf8 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d005      	beq.n	800fb14 <P2PS_APP_Notification+0x1c>
 800fb08:	2b01      	cmp	r3, #1
 800fb0a:	d000      	beq.n	800fb0e <P2PS_APP_Notification+0x16>
    
    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800fb0c:	e003      	b.n	800fb16 <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 800fb0e:	f000 f806 	bl	800fb1e <P2PS_APP_LED_BUTTON_context_Init>
    break;
 800fb12:	e000      	b.n	800fb16 <P2PS_APP_Notification+0x1e>
    break;
 800fb14:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800fb16:	bf00      	nop
}
 800fb18:	3708      	adds	r7, #8
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}

0800fb1e <P2PS_APP_LED_BUTTON_context_Init>:
/* USER CODE END P2PS_APP_Init */
  return;
}

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 800fb1e:	b480      	push	{r7}
 800fb20:	af00      	add	r7, sp, #0
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 800fb22:	bf00      	nop
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr

0800fb2c <LL_PWR_EnableBootC2>:
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800fb30:	4b05      	ldr	r3, [pc, #20]	; (800fb48 <LL_PWR_EnableBootC2+0x1c>)
 800fb32:	68db      	ldr	r3, [r3, #12]
 800fb34:	4a04      	ldr	r2, [pc, #16]	; (800fb48 <LL_PWR_EnableBootC2+0x1c>)
 800fb36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb3a:	60d3      	str	r3, [r2, #12]
}
 800fb3c:	bf00      	nop
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb44:	4770      	bx	lr
 800fb46:	bf00      	nop
 800fb48:	58000400 	.word	0x58000400

0800fb4c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800fb4c:	b480      	push	{r7}
 800fb4e:	b083      	sub	sp, #12
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800fb54:	4b06      	ldr	r3, [pc, #24]	; (800fb70 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800fb56:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800fb5a:	4905      	ldr	r1, [pc, #20]	; (800fb70 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	4313      	orrs	r3, r2
 800fb60:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800fb64:	bf00      	nop
 800fb66:	370c      	adds	r7, #12
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr
 800fb70:	58000800 	.word	0x58000800

0800fb74 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800fb74:	b480      	push	{r7}
 800fb76:	b083      	sub	sp, #12
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800fb7c:	4b05      	ldr	r3, [pc, #20]	; (800fb94 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800fb7e:	6a1a      	ldr	r2, [r3, #32]
 800fb80:	4904      	ldr	r1, [pc, #16]	; (800fb94 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	4313      	orrs	r3, r2
 800fb86:	620b      	str	r3, [r1, #32]
}
 800fb88:	bf00      	nop
 800fb8a:	370c      	adds	r7, #12
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb92:	4770      	bx	lr
 800fb94:	58000800 	.word	0x58000800

0800fb98 <LL_AHB3_GRP1_EnableClock>:
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b085      	sub	sp, #20
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800fba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fba4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	4313      	orrs	r3, r2
 800fbae:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800fbb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fbb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	4013      	ands	r3, r2
 800fbba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fbbc:	68fb      	ldr	r3, [r7, #12]
}
 800fbbe:	bf00      	nop
 800fbc0:	3714      	adds	r7, #20
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc8:	4770      	bx	lr

0800fbca <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800fbca:	b480      	push	{r7}
 800fbcc:	b085      	sub	sp, #20
 800fbce:	af00      	add	r7, sp, #0
 800fbd0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800fbd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fbd6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800fbda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	4313      	orrs	r3, r2
 800fbe2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800fbe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fbea:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	4013      	ands	r3, r2
 800fbf2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
}
 800fbf6:	bf00      	nop
 800fbf8:	3714      	adds	r7, #20
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr

0800fc02 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800fc02:	b480      	push	{r7}
 800fc04:	b083      	sub	sp, #12
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	601a      	str	r2, [r3, #0]
}
 800fc16:	bf00      	nop
 800fc18:	370c      	adds	r7, #12
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc20:	4770      	bx	lr

0800fc22 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800fc22:	b480      	push	{r7}
 800fc24:	b083      	sub	sp, #12
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	f043 0201 	orr.w	r2, r3, #1
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	601a      	str	r2, [r3, #0]
}
 800fc36:	bf00      	nop
 800fc38:	370c      	adds	r7, #12
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc40:	4770      	bx	lr

0800fc42 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fc42:	b480      	push	{r7}
 800fc44:	b083      	sub	sp, #12
 800fc46:	af00      	add	r7, sp, #0
 800fc48:	6078      	str	r0, [r7, #4]
 800fc4a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	685a      	ldr	r2, [r3, #4]
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	041b      	lsls	r3, r3, #16
 800fc54:	43db      	mvns	r3, r3
 800fc56:	401a      	ands	r2, r3
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	605a      	str	r2, [r3, #4]
}
 800fc5c:	bf00      	nop
 800fc5e:	370c      	adds	r7, #12
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr

0800fc68 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b083      	sub	sp, #12
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	685a      	ldr	r2, [r3, #4]
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	041b      	lsls	r3, r3, #16
 800fc7a:	431a      	orrs	r2, r3
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	605a      	str	r2, [r3, #4]
}
 800fc80:	bf00      	nop
 800fc82:	370c      	adds	r7, #12
 800fc84:	46bd      	mov	sp, r7
 800fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8a:	4770      	bx	lr

0800fc8c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b083      	sub	sp, #12
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	685a      	ldr	r2, [r3, #4]
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	43db      	mvns	r3, r3
 800fc9e:	401a      	ands	r2, r3
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	605a      	str	r2, [r3, #4]
}
 800fca4:	bf00      	nop
 800fca6:	370c      	adds	r7, #12
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcae:	4770      	bx	lr

0800fcb0 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b083      	sub	sp, #12
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	685a      	ldr	r2, [r3, #4]
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	431a      	orrs	r2, r3
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	605a      	str	r2, [r3, #4]
}
 800fcc6:	bf00      	nop
 800fcc8:	370c      	adds	r7, #12
 800fcca:	46bd      	mov	sp, r7
 800fccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd0:	4770      	bx	lr

0800fcd2 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fcd2:	b480      	push	{r7}
 800fcd4:	b083      	sub	sp, #12
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	6078      	str	r0, [r7, #4]
 800fcda:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	683a      	ldr	r2, [r7, #0]
 800fce0:	609a      	str	r2, [r3, #8]
}
 800fce2:	bf00      	nop
 800fce4:	370c      	adds	r7, #12
 800fce6:	46bd      	mov	sp, r7
 800fce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcec:	4770      	bx	lr

0800fcee <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fcee:	b480      	push	{r7}
 800fcf0:	b083      	sub	sp, #12
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	6078      	str	r0, [r7, #4]
 800fcf6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	041a      	lsls	r2, r3, #16
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	609a      	str	r2, [r3, #8]
}
 800fd00:	bf00      	nop
 800fd02:	370c      	adds	r7, #12
 800fd04:	46bd      	mov	sp, r7
 800fd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0a:	4770      	bx	lr

0800fd0c <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	b083      	sub	sp, #12
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	68da      	ldr	r2, [r3, #12]
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	4013      	ands	r3, r2
 800fd1e:	683a      	ldr	r2, [r7, #0]
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d101      	bne.n	800fd28 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800fd24:	2301      	movs	r3, #1
 800fd26:	e000      	b.n	800fd2a <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800fd28:	2300      	movs	r3, #0
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	370c      	adds	r7, #12
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd34:	4770      	bx	lr

0800fd36 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800fd36:	b480      	push	{r7}
 800fd38:	b083      	sub	sp, #12
 800fd3a:	af00      	add	r7, sp, #0
 800fd3c:	6078      	str	r0, [r7, #4]
 800fd3e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	69da      	ldr	r2, [r3, #28]
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	4013      	ands	r3, r2
 800fd48:	683a      	ldr	r2, [r7, #0]
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d101      	bne.n	800fd52 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800fd4e:	2301      	movs	r3, #1
 800fd50:	e000      	b.n	800fd54 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800fd52:	2300      	movs	r3, #0
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	370c      	adds	r7, #12
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr

0800fd60 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800fd64:	2102      	movs	r1, #2
 800fd66:	482a      	ldr	r0, [pc, #168]	; (800fe10 <HW_IPCC_Rx_Handler+0xb0>)
 800fd68:	f7ff ffe5 	bl	800fd36 <LL_C2_IPCC_IsActiveFlag_CHx>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d009      	beq.n	800fd86 <HW_IPCC_Rx_Handler+0x26>
 800fd72:	4b27      	ldr	r3, [pc, #156]	; (800fe10 <HW_IPCC_Rx_Handler+0xb0>)
 800fd74:	685b      	ldr	r3, [r3, #4]
 800fd76:	43db      	mvns	r3, r3
 800fd78:	f003 0302 	and.w	r3, r3, #2
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d002      	beq.n	800fd86 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800fd80:	f000 f91e 	bl	800ffc0 <HW_IPCC_SYS_EvtHandler>
 800fd84:	e041      	b.n	800fe0a <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 800fd86:	2104      	movs	r1, #4
 800fd88:	4821      	ldr	r0, [pc, #132]	; (800fe10 <HW_IPCC_Rx_Handler+0xb0>)
 800fd8a:	f7ff ffd4 	bl	800fd36 <LL_C2_IPCC_IsActiveFlag_CHx>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d009      	beq.n	800fda8 <HW_IPCC_Rx_Handler+0x48>
 800fd94:	4b1e      	ldr	r3, [pc, #120]	; (800fe10 <HW_IPCC_Rx_Handler+0xb0>)
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	43db      	mvns	r3, r3
 800fd9a:	f003 0304 	and.w	r3, r3, #4
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d002      	beq.n	800fda8 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 800fda2:	f000 f933 	bl	801000c <HW_IPCC_THREAD_NotEvtHandler>
 800fda6:	e030      	b.n	800fe0a <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 800fda8:	2110      	movs	r1, #16
 800fdaa:	4819      	ldr	r0, [pc, #100]	; (800fe10 <HW_IPCC_Rx_Handler+0xb0>)
 800fdac:	f7ff ffc3 	bl	800fd36 <LL_C2_IPCC_IsActiveFlag_CHx>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d009      	beq.n	800fdca <HW_IPCC_Rx_Handler+0x6a>
 800fdb6:	4b16      	ldr	r3, [pc, #88]	; (800fe10 <HW_IPCC_Rx_Handler+0xb0>)
 800fdb8:	685b      	ldr	r3, [r3, #4]
 800fdba:	43db      	mvns	r3, r3
 800fdbc:	f003 0310 	and.w	r3, r3, #16
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d002      	beq.n	800fdca <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 800fdc4:	f000 f92e 	bl	8010024 <HW_IPCC_THREAD_CliNotEvtHandler>
 800fdc8:	e01f      	b.n	800fe0a <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800fdca:	2101      	movs	r1, #1
 800fdcc:	4810      	ldr	r0, [pc, #64]	; (800fe10 <HW_IPCC_Rx_Handler+0xb0>)
 800fdce:	f7ff ffb2 	bl	800fd36 <LL_C2_IPCC_IsActiveFlag_CHx>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d008      	beq.n	800fdea <HW_IPCC_Rx_Handler+0x8a>
 800fdd8:	4b0d      	ldr	r3, [pc, #52]	; (800fe10 <HW_IPCC_Rx_Handler+0xb0>)
 800fdda:	685b      	ldr	r3, [r3, #4]
 800fddc:	f003 0301 	and.w	r3, r3, #1
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d102      	bne.n	800fdea <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 800fde4:	f000 f8b0 	bl	800ff48 <HW_IPCC_BLE_EvtHandler>
 800fde8:	e00f      	b.n	800fe0a <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800fdea:	2108      	movs	r1, #8
 800fdec:	4808      	ldr	r0, [pc, #32]	; (800fe10 <HW_IPCC_Rx_Handler+0xb0>)
 800fdee:	f7ff ffa2 	bl	800fd36 <LL_C2_IPCC_IsActiveFlag_CHx>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d009      	beq.n	800fe0c <HW_IPCC_Rx_Handler+0xac>
 800fdf8:	4b05      	ldr	r3, [pc, #20]	; (800fe10 <HW_IPCC_Rx_Handler+0xb0>)
 800fdfa:	685b      	ldr	r3, [r3, #4]
 800fdfc:	43db      	mvns	r3, r3
 800fdfe:	f003 0308 	and.w	r3, r3, #8
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d002      	beq.n	800fe0c <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 800fe06:	f000 f959 	bl	80100bc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800fe0a:	bf00      	nop
 800fe0c:	bf00      	nop
}
 800fe0e:	bd80      	pop	{r7, pc}
 800fe10:	58000c00 	.word	0x58000c00

0800fe14 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800fe18:	2102      	movs	r1, #2
 800fe1a:	482b      	ldr	r0, [pc, #172]	; (800fec8 <HW_IPCC_Tx_Handler+0xb4>)
 800fe1c:	f7ff ff76 	bl	800fd0c <LL_C1_IPCC_IsActiveFlag_CHx>
 800fe20:	4603      	mov	r3, r0
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d109      	bne.n	800fe3a <HW_IPCC_Tx_Handler+0x26>
 800fe26:	4b28      	ldr	r3, [pc, #160]	; (800fec8 <HW_IPCC_Tx_Handler+0xb4>)
 800fe28:	685b      	ldr	r3, [r3, #4]
 800fe2a:	43db      	mvns	r3, r3
 800fe2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d002      	beq.n	800fe3a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800fe34:	f000 f8b8 	bl	800ffa8 <HW_IPCC_SYS_CmdEvtHandler>
 800fe38:	e042      	b.n	800fec0 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 800fe3a:	2104      	movs	r1, #4
 800fe3c:	4822      	ldr	r0, [pc, #136]	; (800fec8 <HW_IPCC_Tx_Handler+0xb4>)
 800fe3e:	f7ff ff65 	bl	800fd0c <LL_C1_IPCC_IsActiveFlag_CHx>
 800fe42:	4603      	mov	r3, r0
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d109      	bne.n	800fe5c <HW_IPCC_Tx_Handler+0x48>
 800fe48:	4b1f      	ldr	r3, [pc, #124]	; (800fec8 <HW_IPCC_Tx_Handler+0xb4>)
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	43db      	mvns	r3, r3
 800fe4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d002      	beq.n	800fe5c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 800fe56:	f000 f8cd 	bl	800fff4 <HW_IPCC_OT_CmdEvtHandler>
 800fe5a:	e031      	b.n	800fec0 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800fe5c:	2102      	movs	r1, #2
 800fe5e:	481a      	ldr	r0, [pc, #104]	; (800fec8 <HW_IPCC_Tx_Handler+0xb4>)
 800fe60:	f7ff ff54 	bl	800fd0c <LL_C1_IPCC_IsActiveFlag_CHx>
 800fe64:	4603      	mov	r3, r0
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d109      	bne.n	800fe7e <HW_IPCC_Tx_Handler+0x6a>
 800fe6a:	4b17      	ldr	r3, [pc, #92]	; (800fec8 <HW_IPCC_Tx_Handler+0xb4>)
 800fe6c:	685b      	ldr	r3, [r3, #4]
 800fe6e:	43db      	mvns	r3, r3
 800fe70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d002      	beq.n	800fe7e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800fe78:	f000 f896 	bl	800ffa8 <HW_IPCC_SYS_CmdEvtHandler>
 800fe7c:	e020      	b.n	800fec0 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800fe7e:	2108      	movs	r1, #8
 800fe80:	4811      	ldr	r0, [pc, #68]	; (800fec8 <HW_IPCC_Tx_Handler+0xb4>)
 800fe82:	f7ff ff43 	bl	800fd0c <LL_C1_IPCC_IsActiveFlag_CHx>
 800fe86:	4603      	mov	r3, r0
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d109      	bne.n	800fea0 <HW_IPCC_Tx_Handler+0x8c>
 800fe8c:	4b0e      	ldr	r3, [pc, #56]	; (800fec8 <HW_IPCC_Tx_Handler+0xb4>)
 800fe8e:	685b      	ldr	r3, [r3, #4]
 800fe90:	43db      	mvns	r3, r3
 800fe92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d002      	beq.n	800fea0 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 800fe9a:	f000 f8f1 	bl	8010080 <HW_IPCC_MM_FreeBufHandler>
 800fe9e:	e00f      	b.n	800fec0 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800fea0:	2120      	movs	r1, #32
 800fea2:	4809      	ldr	r0, [pc, #36]	; (800fec8 <HW_IPCC_Tx_Handler+0xb4>)
 800fea4:	f7ff ff32 	bl	800fd0c <LL_C1_IPCC_IsActiveFlag_CHx>
 800fea8:	4603      	mov	r3, r0
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d109      	bne.n	800fec2 <HW_IPCC_Tx_Handler+0xae>
 800feae:	4b06      	ldr	r3, [pc, #24]	; (800fec8 <HW_IPCC_Tx_Handler+0xb4>)
 800feb0:	685b      	ldr	r3, [r3, #4]
 800feb2:	43db      	mvns	r3, r3
 800feb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d002      	beq.n	800fec2 <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800febc:	f000 f850 	bl	800ff60 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800fec0:	bf00      	nop
 800fec2:	bf00      	nop
}
 800fec4:	bd80      	pop	{r7, pc}
 800fec6:	bf00      	nop
 800fec8:	58000c00 	.word	0x58000c00

0800fecc <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800fed0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800fed4:	f7ff fe79 	bl	800fbca <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800fed8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800fedc:	f7ff fe36 	bl	800fb4c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800fee0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800fee4:	f7ff fe46 	bl	800fb74 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800fee8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800feea:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800feec:	f7ff fe1e 	bl	800fb2c <LL_PWR_EnableBootC2>

  return;
 800fef0:	bf00      	nop
}
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800fef8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800fefc:	f7ff fe4c 	bl	800fb98 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800ff00:	4806      	ldr	r0, [pc, #24]	; (800ff1c <HW_IPCC_Init+0x28>)
 800ff02:	f7ff fe8e 	bl	800fc22 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800ff06:	4805      	ldr	r0, [pc, #20]	; (800ff1c <HW_IPCC_Init+0x28>)
 800ff08:	f7ff fe7b 	bl	800fc02 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800ff0c:	202c      	movs	r0, #44	; 0x2c
 800ff0e:	f7f3 f943 	bl	8003198 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800ff12:	202d      	movs	r0, #45	; 0x2d
 800ff14:	f7f3 f940 	bl	8003198 <HAL_NVIC_EnableIRQ>

  return;
 800ff18:	bf00      	nop
}
 800ff1a:	bd80      	pop	{r7, pc}
 800ff1c:	58000c00 	.word	0x58000c00

0800ff20 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800ff24:	2101      	movs	r1, #1
 800ff26:	4802      	ldr	r0, [pc, #8]	; (800ff30 <HW_IPCC_BLE_Init+0x10>)
 800ff28:	f7ff feb0 	bl	800fc8c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800ff2c:	bf00      	nop
}
 800ff2e:	bd80      	pop	{r7, pc}
 800ff30:	58000c00 	.word	0x58000c00

0800ff34 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800ff38:	2101      	movs	r1, #1
 800ff3a:	4802      	ldr	r0, [pc, #8]	; (800ff44 <HW_IPCC_BLE_SendCmd+0x10>)
 800ff3c:	f7ff fed7 	bl	800fcee <LL_C1_IPCC_SetFlag_CHx>

  return;
 800ff40:	bf00      	nop
}
 800ff42:	bd80      	pop	{r7, pc}
 800ff44:	58000c00 	.word	0x58000c00

0800ff48 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800ff4c:	f7f9 f98a 	bl	8009264 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800ff50:	2101      	movs	r1, #1
 800ff52:	4802      	ldr	r0, [pc, #8]	; (800ff5c <HW_IPCC_BLE_EvtHandler+0x14>)
 800ff54:	f7ff febd 	bl	800fcd2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800ff58:	bf00      	nop
}
 800ff5a:	bd80      	pop	{r7, pc}
 800ff5c:	58000c00 	.word	0x58000c00

0800ff60 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800ff64:	2120      	movs	r1, #32
 800ff66:	4803      	ldr	r0, [pc, #12]	; (800ff74 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800ff68:	f7ff fe7e 	bl	800fc68 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800ff6c:	f7f9 f9aa 	bl	80092c4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800ff70:	bf00      	nop
}
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	58000c00 	.word	0x58000c00

0800ff78 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800ff7c:	2102      	movs	r1, #2
 800ff7e:	4802      	ldr	r0, [pc, #8]	; (800ff88 <HW_IPCC_SYS_Init+0x10>)
 800ff80:	f7ff fe84 	bl	800fc8c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800ff84:	bf00      	nop
}
 800ff86:	bd80      	pop	{r7, pc}
 800ff88:	58000c00 	.word	0x58000c00

0800ff8c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800ff90:	2102      	movs	r1, #2
 800ff92:	4804      	ldr	r0, [pc, #16]	; (800ffa4 <HW_IPCC_SYS_SendCmd+0x18>)
 800ff94:	f7ff feab 	bl	800fcee <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800ff98:	2102      	movs	r1, #2
 800ff9a:	4802      	ldr	r0, [pc, #8]	; (800ffa4 <HW_IPCC_SYS_SendCmd+0x18>)
 800ff9c:	f7ff fe51 	bl	800fc42 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800ffa0:	bf00      	nop
}
 800ffa2:	bd80      	pop	{r7, pc}
 800ffa4:	58000c00 	.word	0x58000c00

0800ffa8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800ffac:	2102      	movs	r1, #2
 800ffae:	4803      	ldr	r0, [pc, #12]	; (800ffbc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800ffb0:	f7ff fe5a 	bl	800fc68 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800ffb4:	f7f9 f9d6 	bl	8009364 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800ffb8:	bf00      	nop
}
 800ffba:	bd80      	pop	{r7, pc}
 800ffbc:	58000c00 	.word	0x58000c00

0800ffc0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800ffc4:	f7f9 f9e4 	bl	8009390 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800ffc8:	2102      	movs	r1, #2
 800ffca:	4802      	ldr	r0, [pc, #8]	; (800ffd4 <HW_IPCC_SYS_EvtHandler+0x14>)
 800ffcc:	f7ff fe81 	bl	800fcd2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800ffd0:	bf00      	nop
}
 800ffd2:	bd80      	pop	{r7, pc}
 800ffd4:	58000c00 	.word	0x58000c00

0800ffd8 <HW_IPCC_THREAD_CliSendAck>:

  return;
}

void HW_IPCC_THREAD_CliSendAck( void )
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800ffdc:	2110      	movs	r1, #16
 800ffde:	4804      	ldr	r0, [pc, #16]	; (800fff0 <HW_IPCC_THREAD_CliSendAck+0x18>)
 800ffe0:	f7ff fe77 	bl	800fcd2 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800ffe4:	2110      	movs	r1, #16
 800ffe6:	4802      	ldr	r0, [pc, #8]	; (800fff0 <HW_IPCC_THREAD_CliSendAck+0x18>)
 800ffe8:	f7ff fe50 	bl	800fc8c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800ffec:	bf00      	nop
}
 800ffee:	bd80      	pop	{r7, pc}
 800fff0:	58000c00 	.word	0x58000c00

0800fff4 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 800fff8:	2104      	movs	r1, #4
 800fffa:	4803      	ldr	r0, [pc, #12]	; (8010008 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 800fffc:	f7ff fe34 	bl	800fc68 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8010000:	f7f9 f9f6 	bl	80093f0 <HW_IPCC_OT_CmdEvtNot>

  return;
 8010004:	bf00      	nop
}
 8010006:	bd80      	pop	{r7, pc}
 8010008:	58000c00 	.word	0x58000c00

0801000c <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 801000c:	b580      	push	{r7, lr}
 801000e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8010010:	2104      	movs	r1, #4
 8010012:	4803      	ldr	r0, [pc, #12]	; (8010020 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8010014:	f7ff fe4c 	bl	800fcb0 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8010018:	f7f9 f9f6 	bl	8009408 <HW_IPCC_THREAD_EvtNot>

  return;
 801001c:	bf00      	nop
}
 801001e:	bd80      	pop	{r7, pc}
 8010020:	58000c00 	.word	0x58000c00

08010024 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8010024:	b580      	push	{r7, lr}
 8010026:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8010028:	2110      	movs	r1, #16
 801002a:	4803      	ldr	r0, [pc, #12]	; (8010038 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 801002c:	f7ff fe40 	bl	800fcb0 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8010030:	f7f9 f9f6 	bl	8009420 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8010034:	bf00      	nop
}
 8010036:	bd80      	pop	{r7, pc}
 8010038:	58000c00 	.word	0x58000c00

0801003c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8010044:	2108      	movs	r1, #8
 8010046:	480c      	ldr	r0, [pc, #48]	; (8010078 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010048:	f7ff fe60 	bl	800fd0c <LL_C1_IPCC_IsActiveFlag_CHx>
 801004c:	4603      	mov	r3, r0
 801004e:	2b00      	cmp	r3, #0
 8010050:	d007      	beq.n	8010062 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8010052:	4a0a      	ldr	r2, [pc, #40]	; (801007c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010058:	2108      	movs	r1, #8
 801005a:	4807      	ldr	r0, [pc, #28]	; (8010078 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801005c:	f7ff fdf1 	bl	800fc42 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8010060:	e006      	b.n	8010070 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010066:	2108      	movs	r1, #8
 8010068:	4803      	ldr	r0, [pc, #12]	; (8010078 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801006a:	f7ff fe40 	bl	800fcee <LL_C1_IPCC_SetFlag_CHx>
  return;
 801006e:	bf00      	nop
}
 8010070:	3708      	adds	r7, #8
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
 8010076:	bf00      	nop
 8010078:	58000c00 	.word	0x58000c00
 801007c:	200069cc 	.word	0x200069cc

08010080 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8010080:	b580      	push	{r7, lr}
 8010082:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010084:	2108      	movs	r1, #8
 8010086:	4806      	ldr	r0, [pc, #24]	; (80100a0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8010088:	f7ff fdee 	bl	800fc68 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 801008c:	4b05      	ldr	r3, [pc, #20]	; (80100a4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010092:	2108      	movs	r1, #8
 8010094:	4802      	ldr	r0, [pc, #8]	; (80100a0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8010096:	f7ff fe2a 	bl	800fcee <LL_C1_IPCC_SetFlag_CHx>

  return;
 801009a:	bf00      	nop
}
 801009c:	bd80      	pop	{r7, pc}
 801009e:	bf00      	nop
 80100a0:	58000c00 	.word	0x58000c00
 80100a4:	200069cc 	.word	0x200069cc

080100a8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80100ac:	2108      	movs	r1, #8
 80100ae:	4802      	ldr	r0, [pc, #8]	; (80100b8 <HW_IPCC_TRACES_Init+0x10>)
 80100b0:	f7ff fdec 	bl	800fc8c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80100b4:	bf00      	nop
}
 80100b6:	bd80      	pop	{r7, pc}
 80100b8:	58000c00 	.word	0x58000c00

080100bc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80100c0:	f7f9 fa40 	bl	8009544 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80100c4:	2108      	movs	r1, #8
 80100c6:	4802      	ldr	r0, [pc, #8]	; (80100d0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80100c8:	f7ff fe03 	bl	800fcd2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80100cc:	bf00      	nop
}
 80100ce:	bd80      	pop	{r7, pc}
 80100d0:	58000c00 	.word	0x58000c00

080100d4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80100d4:	b480      	push	{r7}
 80100d6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80100d8:	4b05      	ldr	r3, [pc, #20]	; (80100f0 <UTIL_LPM_Init+0x1c>)
 80100da:	2200      	movs	r2, #0
 80100dc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80100de:	4b05      	ldr	r3, [pc, #20]	; (80100f4 <UTIL_LPM_Init+0x20>)
 80100e0:	2200      	movs	r2, #0
 80100e2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80100e4:	bf00      	nop
 80100e6:	46bd      	mov	sp, r7
 80100e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ec:	4770      	bx	lr
 80100ee:	bf00      	nop
 80100f0:	200069d0 	.word	0x200069d0
 80100f4:	200069d4 	.word	0x200069d4

080100f8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80100f8:	b480      	push	{r7}
 80100fa:	b087      	sub	sp, #28
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
 8010100:	460b      	mov	r3, r1
 8010102:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010104:	f3ef 8310 	mrs	r3, PRIMASK
 8010108:	613b      	str	r3, [r7, #16]
  return(result);
 801010a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801010c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801010e:	b672      	cpsid	i
  
  switch(state)
 8010110:	78fb      	ldrb	r3, [r7, #3]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d009      	beq.n	801012a <UTIL_LPM_SetOffMode+0x32>
 8010116:	2b01      	cmp	r3, #1
 8010118:	d000      	beq.n	801011c <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 801011a:	e00e      	b.n	801013a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 801011c:	4b0c      	ldr	r3, [pc, #48]	; (8010150 <UTIL_LPM_SetOffMode+0x58>)
 801011e:	681a      	ldr	r2, [r3, #0]
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	4313      	orrs	r3, r2
 8010124:	4a0a      	ldr	r2, [pc, #40]	; (8010150 <UTIL_LPM_SetOffMode+0x58>)
 8010126:	6013      	str	r3, [r2, #0]
      break;
 8010128:	e007      	b.n	801013a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	43da      	mvns	r2, r3
 801012e:	4b08      	ldr	r3, [pc, #32]	; (8010150 <UTIL_LPM_SetOffMode+0x58>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	4013      	ands	r3, r2
 8010134:	4a06      	ldr	r2, [pc, #24]	; (8010150 <UTIL_LPM_SetOffMode+0x58>)
 8010136:	6013      	str	r3, [r2, #0]
      break;
 8010138:	bf00      	nop
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010144:	bf00      	nop
 8010146:	371c      	adds	r7, #28
 8010148:	46bd      	mov	sp, r7
 801014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014e:	4770      	bx	lr
 8010150:	200069d4 	.word	0x200069d4

08010154 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b08c      	sub	sp, #48	; 0x30
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801015c:	4b65      	ldr	r3, [pc, #404]	; (80102f4 <UTIL_SEQ_Run+0x1a0>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8010162:	4b64      	ldr	r3, [pc, #400]	; (80102f4 <UTIL_SEQ_Run+0x1a0>)
 8010164:	681a      	ldr	r2, [r3, #0]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	4013      	ands	r3, r2
 801016a:	4a62      	ldr	r2, [pc, #392]	; (80102f4 <UTIL_SEQ_Run+0x1a0>)
 801016c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801016e:	e081      	b.n	8010274 <UTIL_SEQ_Run+0x120>
  {
    counter = 0U;
 8010170:	2300      	movs	r3, #0
 8010172:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8010174:	e002      	b.n	801017c <UTIL_SEQ_Run+0x28>
    {
      counter++;
 8010176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010178:	3301      	adds	r3, #1
 801017a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801017c:	4a5e      	ldr	r2, [pc, #376]	; (80102f8 <UTIL_SEQ_Run+0x1a4>)
 801017e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010180:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010184:	4b5d      	ldr	r3, [pc, #372]	; (80102fc <UTIL_SEQ_Run+0x1a8>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	401a      	ands	r2, r3
 801018a:	4b5a      	ldr	r3, [pc, #360]	; (80102f4 <UTIL_SEQ_Run+0x1a0>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	4013      	ands	r3, r2
 8010190:	2b00      	cmp	r3, #0
 8010192:	d0f0      	beq.n	8010176 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8010194:	4a58      	ldr	r2, [pc, #352]	; (80102f8 <UTIL_SEQ_Run+0x1a4>)
 8010196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010198:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801019c:	4b57      	ldr	r3, [pc, #348]	; (80102fc <UTIL_SEQ_Run+0x1a8>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	401a      	ands	r2, r3
 80101a2:	4b54      	ldr	r3, [pc, #336]	; (80102f4 <UTIL_SEQ_Run+0x1a0>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	4013      	ands	r3, r2
 80101a8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80101aa:	4a53      	ldr	r2, [pc, #332]	; (80102f8 <UTIL_SEQ_Run+0x1a4>)
 80101ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ae:	00db      	lsls	r3, r3, #3
 80101b0:	4413      	add	r3, r2
 80101b2:	685a      	ldr	r2, [r3, #4]
 80101b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b6:	4013      	ands	r3, r2
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d106      	bne.n	80101ca <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80101bc:	4a4e      	ldr	r2, [pc, #312]	; (80102f8 <UTIL_SEQ_Run+0x1a4>)
 80101be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101c0:	00db      	lsls	r3, r3, #3
 80101c2:	4413      	add	r3, r2
 80101c4:	f04f 32ff 	mov.w	r2, #4294967295
 80101c8:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80101ca:	4a4b      	ldr	r2, [pc, #300]	; (80102f8 <UTIL_SEQ_Run+0x1a4>)
 80101cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ce:	00db      	lsls	r3, r3, #3
 80101d0:	4413      	add	r3, r2
 80101d2:	685a      	ldr	r2, [r3, #4]
 80101d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d6:	4013      	ands	r3, r2
 80101d8:	4618      	mov	r0, r3
 80101da:	f000 f8b1 	bl	8010340 <SEQ_BitPosition>
 80101de:	4603      	mov	r3, r0
 80101e0:	461a      	mov	r2, r3
 80101e2:	4b47      	ldr	r3, [pc, #284]	; (8010300 <UTIL_SEQ_Run+0x1ac>)
 80101e4:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80101e6:	4a44      	ldr	r2, [pc, #272]	; (80102f8 <UTIL_SEQ_Run+0x1a4>)
 80101e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ea:	00db      	lsls	r3, r3, #3
 80101ec:	4413      	add	r3, r2
 80101ee:	685a      	ldr	r2, [r3, #4]
 80101f0:	4b43      	ldr	r3, [pc, #268]	; (8010300 <UTIL_SEQ_Run+0x1ac>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	2101      	movs	r1, #1
 80101f6:	fa01 f303 	lsl.w	r3, r1, r3
 80101fa:	43db      	mvns	r3, r3
 80101fc:	401a      	ands	r2, r3
 80101fe:	493e      	ldr	r1, [pc, #248]	; (80102f8 <UTIL_SEQ_Run+0x1a4>)
 8010200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010202:	00db      	lsls	r3, r3, #3
 8010204:	440b      	add	r3, r1
 8010206:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010208:	f3ef 8310 	mrs	r3, PRIMASK
 801020c:	61bb      	str	r3, [r7, #24]
  return(result);
 801020e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010210:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8010212:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8010214:	4b3a      	ldr	r3, [pc, #232]	; (8010300 <UTIL_SEQ_Run+0x1ac>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	2201      	movs	r2, #1
 801021a:	fa02 f303 	lsl.w	r3, r2, r3
 801021e:	43da      	mvns	r2, r3
 8010220:	4b38      	ldr	r3, [pc, #224]	; (8010304 <UTIL_SEQ_Run+0x1b0>)
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	4013      	ands	r3, r2
 8010226:	4a37      	ldr	r2, [pc, #220]	; (8010304 <UTIL_SEQ_Run+0x1b0>)
 8010228:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801022a:	2302      	movs	r3, #2
 801022c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801022e:	e013      	b.n	8010258 <UTIL_SEQ_Run+0x104>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8010230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010232:	3b01      	subs	r3, #1
 8010234:	4a30      	ldr	r2, [pc, #192]	; (80102f8 <UTIL_SEQ_Run+0x1a4>)
 8010236:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801023a:	4b31      	ldr	r3, [pc, #196]	; (8010300 <UTIL_SEQ_Run+0x1ac>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	2201      	movs	r2, #1
 8010240:	fa02 f303 	lsl.w	r3, r2, r3
 8010244:	43da      	mvns	r2, r3
 8010246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010248:	3b01      	subs	r3, #1
 801024a:	400a      	ands	r2, r1
 801024c:	492a      	ldr	r1, [pc, #168]	; (80102f8 <UTIL_SEQ_Run+0x1a4>)
 801024e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010254:	3b01      	subs	r3, #1
 8010256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801025a:	2b00      	cmp	r3, #0
 801025c:	d1e8      	bne.n	8010230 <UTIL_SEQ_Run+0xdc>
 801025e:	6a3b      	ldr	r3, [r7, #32]
 8010260:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010262:	697b      	ldr	r3, [r7, #20]
 8010264:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8010268:	4b25      	ldr	r3, [pc, #148]	; (8010300 <UTIL_SEQ_Run+0x1ac>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	4a26      	ldr	r2, [pc, #152]	; (8010308 <UTIL_SEQ_Run+0x1b4>)
 801026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010272:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8010274:	4b23      	ldr	r3, [pc, #140]	; (8010304 <UTIL_SEQ_Run+0x1b0>)
 8010276:	681a      	ldr	r2, [r3, #0]
 8010278:	4b20      	ldr	r3, [pc, #128]	; (80102fc <UTIL_SEQ_Run+0x1a8>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	401a      	ands	r2, r3
 801027e:	4b1d      	ldr	r3, [pc, #116]	; (80102f4 <UTIL_SEQ_Run+0x1a0>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	4013      	ands	r3, r2
 8010284:	2b00      	cmp	r3, #0
 8010286:	d007      	beq.n	8010298 <UTIL_SEQ_Run+0x144>
 8010288:	4b20      	ldr	r3, [pc, #128]	; (801030c <UTIL_SEQ_Run+0x1b8>)
 801028a:	681a      	ldr	r2, [r3, #0]
 801028c:	4b20      	ldr	r3, [pc, #128]	; (8010310 <UTIL_SEQ_Run+0x1bc>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	4013      	ands	r3, r2
 8010292:	2b00      	cmp	r3, #0
 8010294:	f43f af6c 	beq.w	8010170 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8010298:	4b19      	ldr	r3, [pc, #100]	; (8010300 <UTIL_SEQ_Run+0x1ac>)
 801029a:	f04f 32ff 	mov.w	r2, #4294967295
 801029e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80102a0:	f000 f83f 	bl	8010322 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102a4:	f3ef 8310 	mrs	r3, PRIMASK
 80102a8:	613b      	str	r3, [r7, #16]
  return(result);
 80102aa:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80102ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80102ae:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 80102b0:	4b14      	ldr	r3, [pc, #80]	; (8010304 <UTIL_SEQ_Run+0x1b0>)
 80102b2:	681a      	ldr	r2, [r3, #0]
 80102b4:	4b11      	ldr	r3, [pc, #68]	; (80102fc <UTIL_SEQ_Run+0x1a8>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	401a      	ands	r2, r3
 80102ba:	4b0e      	ldr	r3, [pc, #56]	; (80102f4 <UTIL_SEQ_Run+0x1a0>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	4013      	ands	r3, r2
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d108      	bne.n	80102d6 <UTIL_SEQ_Run+0x182>
 80102c4:	4b11      	ldr	r3, [pc, #68]	; (801030c <UTIL_SEQ_Run+0x1b8>)
 80102c6:	681a      	ldr	r2, [r3, #0]
 80102c8:	4b11      	ldr	r3, [pc, #68]	; (8010310 <UTIL_SEQ_Run+0x1bc>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	4013      	ands	r3, r2
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d101      	bne.n	80102d6 <UTIL_SEQ_Run+0x182>
  {
	UTIL_SEQ_Idle( );
 80102d2:	f000 f81f 	bl	8010314 <UTIL_SEQ_Idle>
 80102d6:	69fb      	ldr	r3, [r7, #28]
 80102d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 80102e0:	f000 f826 	bl	8010330 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80102e4:	4a03      	ldr	r2, [pc, #12]	; (80102f4 <UTIL_SEQ_Run+0x1a0>)
 80102e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102e8:	6013      	str	r3, [r2, #0]

  return;
 80102ea:	bf00      	nop
}
 80102ec:	3730      	adds	r7, #48	; 0x30
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}
 80102f2:	bf00      	nop
 80102f4:	2000002c 	.word	0x2000002c
 80102f8:	20006a68 	.word	0x20006a68
 80102fc:	20000028 	.word	0x20000028
 8010300:	200069e4 	.word	0x200069e4
 8010304:	200069d8 	.word	0x200069d8
 8010308:	200069e8 	.word	0x200069e8
 801030c:	200069dc 	.word	0x200069dc
 8010310:	200069e0 	.word	0x200069e0

08010314 <UTIL_SEQ_Idle>:
  UTIL_SEQ_Run(~TaskId_bm);
  return;
}

__WEAK void UTIL_SEQ_Idle( void )
{
 8010314:	b480      	push	{r7}
 8010316:	af00      	add	r7, sp, #0
  return;
 8010318:	bf00      	nop
}
 801031a:	46bd      	mov	sp, r7
 801031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010320:	4770      	bx	lr

08010322 <UTIL_SEQ_PreIdle>:

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8010322:	b480      	push	{r7}
 8010324:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8010326:	bf00      	nop
}
 8010328:	46bd      	mov	sp, r7
 801032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032e:	4770      	bx	lr

08010330 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8010330:	b480      	push	{r7}
 8010332:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8010334:	bf00      	nop
}
 8010336:	46bd      	mov	sp, r7
 8010338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033c:	4770      	bx	lr
	...

08010340 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8010340:	b480      	push	{r7}
 8010342:	b085      	sub	sp, #20
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8010348:	2300      	movs	r3, #0
 801034a:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	0c1b      	lsrs	r3, r3, #16
 8010350:	041b      	lsls	r3, r3, #16
 8010352:	2b00      	cmp	r3, #0
 8010354:	d104      	bne.n	8010360 <SEQ_BitPosition+0x20>
 8010356:	2310      	movs	r3, #16
 8010358:	73fb      	strb	r3, [r7, #15]
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	041b      	lsls	r3, r3, #16
 801035e:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010366:	2b00      	cmp	r3, #0
 8010368:	d105      	bne.n	8010376 <SEQ_BitPosition+0x36>
 801036a:	7bfb      	ldrb	r3, [r7, #15]
 801036c:	3308      	adds	r3, #8
 801036e:	73fb      	strb	r3, [r7, #15]
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	021b      	lsls	r3, r3, #8
 8010374:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801037c:	2b00      	cmp	r3, #0
 801037e:	d105      	bne.n	801038c <SEQ_BitPosition+0x4c>
 8010380:	7bfb      	ldrb	r3, [r7, #15]
 8010382:	3304      	adds	r3, #4
 8010384:	73fb      	strb	r3, [r7, #15]
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	011b      	lsls	r3, r3, #4
 801038a:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	0f1b      	lsrs	r3, r3, #28
 8010390:	4a07      	ldr	r2, [pc, #28]	; (80103b0 <SEQ_BitPosition+0x70>)
 8010392:	5cd2      	ldrb	r2, [r2, r3]
 8010394:	7bfb      	ldrb	r3, [r7, #15]
 8010396:	4413      	add	r3, r2
 8010398:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801039a:	7bfb      	ldrb	r3, [r7, #15]
 801039c:	f1c3 031f 	rsb	r3, r3, #31
 80103a0:	b2db      	uxtb	r3, r3
}
 80103a2:	4618      	mov	r0, r3
 80103a4:	3714      	adds	r7, #20
 80103a6:	46bd      	mov	sp, r7
 80103a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ac:	4770      	bx	lr
 80103ae:	bf00      	nop
 80103b0:	080129b8 	.word	0x080129b8

080103b4 <__errno>:
 80103b4:	4b01      	ldr	r3, [pc, #4]	; (80103bc <__errno+0x8>)
 80103b6:	6818      	ldr	r0, [r3, #0]
 80103b8:	4770      	bx	lr
 80103ba:	bf00      	nop
 80103bc:	20000030 	.word	0x20000030

080103c0 <__libc_init_array>:
 80103c0:	b570      	push	{r4, r5, r6, lr}
 80103c2:	4e0d      	ldr	r6, [pc, #52]	; (80103f8 <__libc_init_array+0x38>)
 80103c4:	4c0d      	ldr	r4, [pc, #52]	; (80103fc <__libc_init_array+0x3c>)
 80103c6:	1ba4      	subs	r4, r4, r6
 80103c8:	10a4      	asrs	r4, r4, #2
 80103ca:	2500      	movs	r5, #0
 80103cc:	42a5      	cmp	r5, r4
 80103ce:	d109      	bne.n	80103e4 <__libc_init_array+0x24>
 80103d0:	4e0b      	ldr	r6, [pc, #44]	; (8010400 <__libc_init_array+0x40>)
 80103d2:	4c0c      	ldr	r4, [pc, #48]	; (8010404 <__libc_init_array+0x44>)
 80103d4:	f001 f97c 	bl	80116d0 <_init>
 80103d8:	1ba4      	subs	r4, r4, r6
 80103da:	10a4      	asrs	r4, r4, #2
 80103dc:	2500      	movs	r5, #0
 80103de:	42a5      	cmp	r5, r4
 80103e0:	d105      	bne.n	80103ee <__libc_init_array+0x2e>
 80103e2:	bd70      	pop	{r4, r5, r6, pc}
 80103e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80103e8:	4798      	blx	r3
 80103ea:	3501      	adds	r5, #1
 80103ec:	e7ee      	b.n	80103cc <__libc_init_array+0xc>
 80103ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80103f2:	4798      	blx	r3
 80103f4:	3501      	adds	r5, #1
 80103f6:	e7f2      	b.n	80103de <__libc_init_array+0x1e>
 80103f8:	08012a68 	.word	0x08012a68
 80103fc:	08012a68 	.word	0x08012a68
 8010400:	08012a68 	.word	0x08012a68
 8010404:	08012a6c 	.word	0x08012a6c

08010408 <memcpy>:
 8010408:	b510      	push	{r4, lr}
 801040a:	1e43      	subs	r3, r0, #1
 801040c:	440a      	add	r2, r1
 801040e:	4291      	cmp	r1, r2
 8010410:	d100      	bne.n	8010414 <memcpy+0xc>
 8010412:	bd10      	pop	{r4, pc}
 8010414:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010418:	f803 4f01 	strb.w	r4, [r3, #1]!
 801041c:	e7f7      	b.n	801040e <memcpy+0x6>

0801041e <memset>:
 801041e:	4402      	add	r2, r0
 8010420:	4603      	mov	r3, r0
 8010422:	4293      	cmp	r3, r2
 8010424:	d100      	bne.n	8010428 <memset+0xa>
 8010426:	4770      	bx	lr
 8010428:	f803 1b01 	strb.w	r1, [r3], #1
 801042c:	e7f9      	b.n	8010422 <memset+0x4>
	...

08010430 <iprintf>:
 8010430:	b40f      	push	{r0, r1, r2, r3}
 8010432:	4b0a      	ldr	r3, [pc, #40]	; (801045c <iprintf+0x2c>)
 8010434:	b513      	push	{r0, r1, r4, lr}
 8010436:	681c      	ldr	r4, [r3, #0]
 8010438:	b124      	cbz	r4, 8010444 <iprintf+0x14>
 801043a:	69a3      	ldr	r3, [r4, #24]
 801043c:	b913      	cbnz	r3, 8010444 <iprintf+0x14>
 801043e:	4620      	mov	r0, r4
 8010440:	f000 fa90 	bl	8010964 <__sinit>
 8010444:	ab05      	add	r3, sp, #20
 8010446:	9a04      	ldr	r2, [sp, #16]
 8010448:	68a1      	ldr	r1, [r4, #8]
 801044a:	9301      	str	r3, [sp, #4]
 801044c:	4620      	mov	r0, r4
 801044e:	f000 fd9b 	bl	8010f88 <_vfiprintf_r>
 8010452:	b002      	add	sp, #8
 8010454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010458:	b004      	add	sp, #16
 801045a:	4770      	bx	lr
 801045c:	20000030 	.word	0x20000030

08010460 <_puts_r>:
 8010460:	b570      	push	{r4, r5, r6, lr}
 8010462:	460e      	mov	r6, r1
 8010464:	4605      	mov	r5, r0
 8010466:	b118      	cbz	r0, 8010470 <_puts_r+0x10>
 8010468:	6983      	ldr	r3, [r0, #24]
 801046a:	b90b      	cbnz	r3, 8010470 <_puts_r+0x10>
 801046c:	f000 fa7a 	bl	8010964 <__sinit>
 8010470:	69ab      	ldr	r3, [r5, #24]
 8010472:	68ac      	ldr	r4, [r5, #8]
 8010474:	b913      	cbnz	r3, 801047c <_puts_r+0x1c>
 8010476:	4628      	mov	r0, r5
 8010478:	f000 fa74 	bl	8010964 <__sinit>
 801047c:	4b23      	ldr	r3, [pc, #140]	; (801050c <_puts_r+0xac>)
 801047e:	429c      	cmp	r4, r3
 8010480:	d117      	bne.n	80104b2 <_puts_r+0x52>
 8010482:	686c      	ldr	r4, [r5, #4]
 8010484:	89a3      	ldrh	r3, [r4, #12]
 8010486:	071b      	lsls	r3, r3, #28
 8010488:	d51d      	bpl.n	80104c6 <_puts_r+0x66>
 801048a:	6923      	ldr	r3, [r4, #16]
 801048c:	b1db      	cbz	r3, 80104c6 <_puts_r+0x66>
 801048e:	3e01      	subs	r6, #1
 8010490:	68a3      	ldr	r3, [r4, #8]
 8010492:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010496:	3b01      	subs	r3, #1
 8010498:	60a3      	str	r3, [r4, #8]
 801049a:	b9e9      	cbnz	r1, 80104d8 <_puts_r+0x78>
 801049c:	2b00      	cmp	r3, #0
 801049e:	da2e      	bge.n	80104fe <_puts_r+0x9e>
 80104a0:	4622      	mov	r2, r4
 80104a2:	210a      	movs	r1, #10
 80104a4:	4628      	mov	r0, r5
 80104a6:	f000 f8ad 	bl	8010604 <__swbuf_r>
 80104aa:	3001      	adds	r0, #1
 80104ac:	d011      	beq.n	80104d2 <_puts_r+0x72>
 80104ae:	200a      	movs	r0, #10
 80104b0:	e011      	b.n	80104d6 <_puts_r+0x76>
 80104b2:	4b17      	ldr	r3, [pc, #92]	; (8010510 <_puts_r+0xb0>)
 80104b4:	429c      	cmp	r4, r3
 80104b6:	d101      	bne.n	80104bc <_puts_r+0x5c>
 80104b8:	68ac      	ldr	r4, [r5, #8]
 80104ba:	e7e3      	b.n	8010484 <_puts_r+0x24>
 80104bc:	4b15      	ldr	r3, [pc, #84]	; (8010514 <_puts_r+0xb4>)
 80104be:	429c      	cmp	r4, r3
 80104c0:	bf08      	it	eq
 80104c2:	68ec      	ldreq	r4, [r5, #12]
 80104c4:	e7de      	b.n	8010484 <_puts_r+0x24>
 80104c6:	4621      	mov	r1, r4
 80104c8:	4628      	mov	r0, r5
 80104ca:	f000 f8ed 	bl	80106a8 <__swsetup_r>
 80104ce:	2800      	cmp	r0, #0
 80104d0:	d0dd      	beq.n	801048e <_puts_r+0x2e>
 80104d2:	f04f 30ff 	mov.w	r0, #4294967295
 80104d6:	bd70      	pop	{r4, r5, r6, pc}
 80104d8:	2b00      	cmp	r3, #0
 80104da:	da04      	bge.n	80104e6 <_puts_r+0x86>
 80104dc:	69a2      	ldr	r2, [r4, #24]
 80104de:	429a      	cmp	r2, r3
 80104e0:	dc06      	bgt.n	80104f0 <_puts_r+0x90>
 80104e2:	290a      	cmp	r1, #10
 80104e4:	d004      	beq.n	80104f0 <_puts_r+0x90>
 80104e6:	6823      	ldr	r3, [r4, #0]
 80104e8:	1c5a      	adds	r2, r3, #1
 80104ea:	6022      	str	r2, [r4, #0]
 80104ec:	7019      	strb	r1, [r3, #0]
 80104ee:	e7cf      	b.n	8010490 <_puts_r+0x30>
 80104f0:	4622      	mov	r2, r4
 80104f2:	4628      	mov	r0, r5
 80104f4:	f000 f886 	bl	8010604 <__swbuf_r>
 80104f8:	3001      	adds	r0, #1
 80104fa:	d1c9      	bne.n	8010490 <_puts_r+0x30>
 80104fc:	e7e9      	b.n	80104d2 <_puts_r+0x72>
 80104fe:	6823      	ldr	r3, [r4, #0]
 8010500:	200a      	movs	r0, #10
 8010502:	1c5a      	adds	r2, r3, #1
 8010504:	6022      	str	r2, [r4, #0]
 8010506:	7018      	strb	r0, [r3, #0]
 8010508:	e7e5      	b.n	80104d6 <_puts_r+0x76>
 801050a:	bf00      	nop
 801050c:	080129ec 	.word	0x080129ec
 8010510:	08012a0c 	.word	0x08012a0c
 8010514:	080129cc 	.word	0x080129cc

08010518 <puts>:
 8010518:	4b02      	ldr	r3, [pc, #8]	; (8010524 <puts+0xc>)
 801051a:	4601      	mov	r1, r0
 801051c:	6818      	ldr	r0, [r3, #0]
 801051e:	f7ff bf9f 	b.w	8010460 <_puts_r>
 8010522:	bf00      	nop
 8010524:	20000030 	.word	0x20000030

08010528 <sniprintf>:
 8010528:	b40c      	push	{r2, r3}
 801052a:	b530      	push	{r4, r5, lr}
 801052c:	4b17      	ldr	r3, [pc, #92]	; (801058c <sniprintf+0x64>)
 801052e:	1e0c      	subs	r4, r1, #0
 8010530:	b09d      	sub	sp, #116	; 0x74
 8010532:	681d      	ldr	r5, [r3, #0]
 8010534:	da08      	bge.n	8010548 <sniprintf+0x20>
 8010536:	238b      	movs	r3, #139	; 0x8b
 8010538:	602b      	str	r3, [r5, #0]
 801053a:	f04f 30ff 	mov.w	r0, #4294967295
 801053e:	b01d      	add	sp, #116	; 0x74
 8010540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010544:	b002      	add	sp, #8
 8010546:	4770      	bx	lr
 8010548:	f44f 7302 	mov.w	r3, #520	; 0x208
 801054c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010550:	bf14      	ite	ne
 8010552:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010556:	4623      	moveq	r3, r4
 8010558:	9304      	str	r3, [sp, #16]
 801055a:	9307      	str	r3, [sp, #28]
 801055c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010560:	9002      	str	r0, [sp, #8]
 8010562:	9006      	str	r0, [sp, #24]
 8010564:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010568:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801056a:	ab21      	add	r3, sp, #132	; 0x84
 801056c:	a902      	add	r1, sp, #8
 801056e:	4628      	mov	r0, r5
 8010570:	9301      	str	r3, [sp, #4]
 8010572:	f000 fbe7 	bl	8010d44 <_svfiprintf_r>
 8010576:	1c43      	adds	r3, r0, #1
 8010578:	bfbc      	itt	lt
 801057a:	238b      	movlt	r3, #139	; 0x8b
 801057c:	602b      	strlt	r3, [r5, #0]
 801057e:	2c00      	cmp	r4, #0
 8010580:	d0dd      	beq.n	801053e <sniprintf+0x16>
 8010582:	9b02      	ldr	r3, [sp, #8]
 8010584:	2200      	movs	r2, #0
 8010586:	701a      	strb	r2, [r3, #0]
 8010588:	e7d9      	b.n	801053e <sniprintf+0x16>
 801058a:	bf00      	nop
 801058c:	20000030 	.word	0x20000030

08010590 <_vsniprintf_r>:
 8010590:	b530      	push	{r4, r5, lr}
 8010592:	1e14      	subs	r4, r2, #0
 8010594:	4605      	mov	r5, r0
 8010596:	b09b      	sub	sp, #108	; 0x6c
 8010598:	4618      	mov	r0, r3
 801059a:	da05      	bge.n	80105a8 <_vsniprintf_r+0x18>
 801059c:	238b      	movs	r3, #139	; 0x8b
 801059e:	602b      	str	r3, [r5, #0]
 80105a0:	f04f 30ff 	mov.w	r0, #4294967295
 80105a4:	b01b      	add	sp, #108	; 0x6c
 80105a6:	bd30      	pop	{r4, r5, pc}
 80105a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80105ac:	f8ad 300c 	strh.w	r3, [sp, #12]
 80105b0:	bf14      	ite	ne
 80105b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80105b6:	4623      	moveq	r3, r4
 80105b8:	9302      	str	r3, [sp, #8]
 80105ba:	9305      	str	r3, [sp, #20]
 80105bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80105c0:	9100      	str	r1, [sp, #0]
 80105c2:	9104      	str	r1, [sp, #16]
 80105c4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80105c8:	4602      	mov	r2, r0
 80105ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80105cc:	4669      	mov	r1, sp
 80105ce:	4628      	mov	r0, r5
 80105d0:	f000 fbb8 	bl	8010d44 <_svfiprintf_r>
 80105d4:	1c43      	adds	r3, r0, #1
 80105d6:	bfbc      	itt	lt
 80105d8:	238b      	movlt	r3, #139	; 0x8b
 80105da:	602b      	strlt	r3, [r5, #0]
 80105dc:	2c00      	cmp	r4, #0
 80105de:	d0e1      	beq.n	80105a4 <_vsniprintf_r+0x14>
 80105e0:	9b00      	ldr	r3, [sp, #0]
 80105e2:	2200      	movs	r2, #0
 80105e4:	701a      	strb	r2, [r3, #0]
 80105e6:	e7dd      	b.n	80105a4 <_vsniprintf_r+0x14>

080105e8 <vsniprintf>:
 80105e8:	b507      	push	{r0, r1, r2, lr}
 80105ea:	9300      	str	r3, [sp, #0]
 80105ec:	4613      	mov	r3, r2
 80105ee:	460a      	mov	r2, r1
 80105f0:	4601      	mov	r1, r0
 80105f2:	4803      	ldr	r0, [pc, #12]	; (8010600 <vsniprintf+0x18>)
 80105f4:	6800      	ldr	r0, [r0, #0]
 80105f6:	f7ff ffcb 	bl	8010590 <_vsniprintf_r>
 80105fa:	b003      	add	sp, #12
 80105fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8010600:	20000030 	.word	0x20000030

08010604 <__swbuf_r>:
 8010604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010606:	460e      	mov	r6, r1
 8010608:	4614      	mov	r4, r2
 801060a:	4605      	mov	r5, r0
 801060c:	b118      	cbz	r0, 8010616 <__swbuf_r+0x12>
 801060e:	6983      	ldr	r3, [r0, #24]
 8010610:	b90b      	cbnz	r3, 8010616 <__swbuf_r+0x12>
 8010612:	f000 f9a7 	bl	8010964 <__sinit>
 8010616:	4b21      	ldr	r3, [pc, #132]	; (801069c <__swbuf_r+0x98>)
 8010618:	429c      	cmp	r4, r3
 801061a:	d12a      	bne.n	8010672 <__swbuf_r+0x6e>
 801061c:	686c      	ldr	r4, [r5, #4]
 801061e:	69a3      	ldr	r3, [r4, #24]
 8010620:	60a3      	str	r3, [r4, #8]
 8010622:	89a3      	ldrh	r3, [r4, #12]
 8010624:	071a      	lsls	r2, r3, #28
 8010626:	d52e      	bpl.n	8010686 <__swbuf_r+0x82>
 8010628:	6923      	ldr	r3, [r4, #16]
 801062a:	b363      	cbz	r3, 8010686 <__swbuf_r+0x82>
 801062c:	6923      	ldr	r3, [r4, #16]
 801062e:	6820      	ldr	r0, [r4, #0]
 8010630:	1ac0      	subs	r0, r0, r3
 8010632:	6963      	ldr	r3, [r4, #20]
 8010634:	b2f6      	uxtb	r6, r6
 8010636:	4283      	cmp	r3, r0
 8010638:	4637      	mov	r7, r6
 801063a:	dc04      	bgt.n	8010646 <__swbuf_r+0x42>
 801063c:	4621      	mov	r1, r4
 801063e:	4628      	mov	r0, r5
 8010640:	f000 f926 	bl	8010890 <_fflush_r>
 8010644:	bb28      	cbnz	r0, 8010692 <__swbuf_r+0x8e>
 8010646:	68a3      	ldr	r3, [r4, #8]
 8010648:	3b01      	subs	r3, #1
 801064a:	60a3      	str	r3, [r4, #8]
 801064c:	6823      	ldr	r3, [r4, #0]
 801064e:	1c5a      	adds	r2, r3, #1
 8010650:	6022      	str	r2, [r4, #0]
 8010652:	701e      	strb	r6, [r3, #0]
 8010654:	6963      	ldr	r3, [r4, #20]
 8010656:	3001      	adds	r0, #1
 8010658:	4283      	cmp	r3, r0
 801065a:	d004      	beq.n	8010666 <__swbuf_r+0x62>
 801065c:	89a3      	ldrh	r3, [r4, #12]
 801065e:	07db      	lsls	r3, r3, #31
 8010660:	d519      	bpl.n	8010696 <__swbuf_r+0x92>
 8010662:	2e0a      	cmp	r6, #10
 8010664:	d117      	bne.n	8010696 <__swbuf_r+0x92>
 8010666:	4621      	mov	r1, r4
 8010668:	4628      	mov	r0, r5
 801066a:	f000 f911 	bl	8010890 <_fflush_r>
 801066e:	b190      	cbz	r0, 8010696 <__swbuf_r+0x92>
 8010670:	e00f      	b.n	8010692 <__swbuf_r+0x8e>
 8010672:	4b0b      	ldr	r3, [pc, #44]	; (80106a0 <__swbuf_r+0x9c>)
 8010674:	429c      	cmp	r4, r3
 8010676:	d101      	bne.n	801067c <__swbuf_r+0x78>
 8010678:	68ac      	ldr	r4, [r5, #8]
 801067a:	e7d0      	b.n	801061e <__swbuf_r+0x1a>
 801067c:	4b09      	ldr	r3, [pc, #36]	; (80106a4 <__swbuf_r+0xa0>)
 801067e:	429c      	cmp	r4, r3
 8010680:	bf08      	it	eq
 8010682:	68ec      	ldreq	r4, [r5, #12]
 8010684:	e7cb      	b.n	801061e <__swbuf_r+0x1a>
 8010686:	4621      	mov	r1, r4
 8010688:	4628      	mov	r0, r5
 801068a:	f000 f80d 	bl	80106a8 <__swsetup_r>
 801068e:	2800      	cmp	r0, #0
 8010690:	d0cc      	beq.n	801062c <__swbuf_r+0x28>
 8010692:	f04f 37ff 	mov.w	r7, #4294967295
 8010696:	4638      	mov	r0, r7
 8010698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801069a:	bf00      	nop
 801069c:	080129ec 	.word	0x080129ec
 80106a0:	08012a0c 	.word	0x08012a0c
 80106a4:	080129cc 	.word	0x080129cc

080106a8 <__swsetup_r>:
 80106a8:	4b32      	ldr	r3, [pc, #200]	; (8010774 <__swsetup_r+0xcc>)
 80106aa:	b570      	push	{r4, r5, r6, lr}
 80106ac:	681d      	ldr	r5, [r3, #0]
 80106ae:	4606      	mov	r6, r0
 80106b0:	460c      	mov	r4, r1
 80106b2:	b125      	cbz	r5, 80106be <__swsetup_r+0x16>
 80106b4:	69ab      	ldr	r3, [r5, #24]
 80106b6:	b913      	cbnz	r3, 80106be <__swsetup_r+0x16>
 80106b8:	4628      	mov	r0, r5
 80106ba:	f000 f953 	bl	8010964 <__sinit>
 80106be:	4b2e      	ldr	r3, [pc, #184]	; (8010778 <__swsetup_r+0xd0>)
 80106c0:	429c      	cmp	r4, r3
 80106c2:	d10f      	bne.n	80106e4 <__swsetup_r+0x3c>
 80106c4:	686c      	ldr	r4, [r5, #4]
 80106c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106ca:	b29a      	uxth	r2, r3
 80106cc:	0715      	lsls	r5, r2, #28
 80106ce:	d42c      	bmi.n	801072a <__swsetup_r+0x82>
 80106d0:	06d0      	lsls	r0, r2, #27
 80106d2:	d411      	bmi.n	80106f8 <__swsetup_r+0x50>
 80106d4:	2209      	movs	r2, #9
 80106d6:	6032      	str	r2, [r6, #0]
 80106d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106dc:	81a3      	strh	r3, [r4, #12]
 80106de:	f04f 30ff 	mov.w	r0, #4294967295
 80106e2:	e03e      	b.n	8010762 <__swsetup_r+0xba>
 80106e4:	4b25      	ldr	r3, [pc, #148]	; (801077c <__swsetup_r+0xd4>)
 80106e6:	429c      	cmp	r4, r3
 80106e8:	d101      	bne.n	80106ee <__swsetup_r+0x46>
 80106ea:	68ac      	ldr	r4, [r5, #8]
 80106ec:	e7eb      	b.n	80106c6 <__swsetup_r+0x1e>
 80106ee:	4b24      	ldr	r3, [pc, #144]	; (8010780 <__swsetup_r+0xd8>)
 80106f0:	429c      	cmp	r4, r3
 80106f2:	bf08      	it	eq
 80106f4:	68ec      	ldreq	r4, [r5, #12]
 80106f6:	e7e6      	b.n	80106c6 <__swsetup_r+0x1e>
 80106f8:	0751      	lsls	r1, r2, #29
 80106fa:	d512      	bpl.n	8010722 <__swsetup_r+0x7a>
 80106fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80106fe:	b141      	cbz	r1, 8010712 <__swsetup_r+0x6a>
 8010700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010704:	4299      	cmp	r1, r3
 8010706:	d002      	beq.n	801070e <__swsetup_r+0x66>
 8010708:	4630      	mov	r0, r6
 801070a:	f000 fa19 	bl	8010b40 <_free_r>
 801070e:	2300      	movs	r3, #0
 8010710:	6363      	str	r3, [r4, #52]	; 0x34
 8010712:	89a3      	ldrh	r3, [r4, #12]
 8010714:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010718:	81a3      	strh	r3, [r4, #12]
 801071a:	2300      	movs	r3, #0
 801071c:	6063      	str	r3, [r4, #4]
 801071e:	6923      	ldr	r3, [r4, #16]
 8010720:	6023      	str	r3, [r4, #0]
 8010722:	89a3      	ldrh	r3, [r4, #12]
 8010724:	f043 0308 	orr.w	r3, r3, #8
 8010728:	81a3      	strh	r3, [r4, #12]
 801072a:	6923      	ldr	r3, [r4, #16]
 801072c:	b94b      	cbnz	r3, 8010742 <__swsetup_r+0x9a>
 801072e:	89a3      	ldrh	r3, [r4, #12]
 8010730:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010738:	d003      	beq.n	8010742 <__swsetup_r+0x9a>
 801073a:	4621      	mov	r1, r4
 801073c:	4630      	mov	r0, r6
 801073e:	f000 f9bf 	bl	8010ac0 <__smakebuf_r>
 8010742:	89a2      	ldrh	r2, [r4, #12]
 8010744:	f012 0301 	ands.w	r3, r2, #1
 8010748:	d00c      	beq.n	8010764 <__swsetup_r+0xbc>
 801074a:	2300      	movs	r3, #0
 801074c:	60a3      	str	r3, [r4, #8]
 801074e:	6963      	ldr	r3, [r4, #20]
 8010750:	425b      	negs	r3, r3
 8010752:	61a3      	str	r3, [r4, #24]
 8010754:	6923      	ldr	r3, [r4, #16]
 8010756:	b953      	cbnz	r3, 801076e <__swsetup_r+0xc6>
 8010758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801075c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010760:	d1ba      	bne.n	80106d8 <__swsetup_r+0x30>
 8010762:	bd70      	pop	{r4, r5, r6, pc}
 8010764:	0792      	lsls	r2, r2, #30
 8010766:	bf58      	it	pl
 8010768:	6963      	ldrpl	r3, [r4, #20]
 801076a:	60a3      	str	r3, [r4, #8]
 801076c:	e7f2      	b.n	8010754 <__swsetup_r+0xac>
 801076e:	2000      	movs	r0, #0
 8010770:	e7f7      	b.n	8010762 <__swsetup_r+0xba>
 8010772:	bf00      	nop
 8010774:	20000030 	.word	0x20000030
 8010778:	080129ec 	.word	0x080129ec
 801077c:	08012a0c 	.word	0x08012a0c
 8010780:	080129cc 	.word	0x080129cc

08010784 <__sflush_r>:
 8010784:	898a      	ldrh	r2, [r1, #12]
 8010786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801078a:	4605      	mov	r5, r0
 801078c:	0710      	lsls	r0, r2, #28
 801078e:	460c      	mov	r4, r1
 8010790:	d458      	bmi.n	8010844 <__sflush_r+0xc0>
 8010792:	684b      	ldr	r3, [r1, #4]
 8010794:	2b00      	cmp	r3, #0
 8010796:	dc05      	bgt.n	80107a4 <__sflush_r+0x20>
 8010798:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801079a:	2b00      	cmp	r3, #0
 801079c:	dc02      	bgt.n	80107a4 <__sflush_r+0x20>
 801079e:	2000      	movs	r0, #0
 80107a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80107a6:	2e00      	cmp	r6, #0
 80107a8:	d0f9      	beq.n	801079e <__sflush_r+0x1a>
 80107aa:	2300      	movs	r3, #0
 80107ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80107b0:	682f      	ldr	r7, [r5, #0]
 80107b2:	6a21      	ldr	r1, [r4, #32]
 80107b4:	602b      	str	r3, [r5, #0]
 80107b6:	d032      	beq.n	801081e <__sflush_r+0x9a>
 80107b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80107ba:	89a3      	ldrh	r3, [r4, #12]
 80107bc:	075a      	lsls	r2, r3, #29
 80107be:	d505      	bpl.n	80107cc <__sflush_r+0x48>
 80107c0:	6863      	ldr	r3, [r4, #4]
 80107c2:	1ac0      	subs	r0, r0, r3
 80107c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80107c6:	b10b      	cbz	r3, 80107cc <__sflush_r+0x48>
 80107c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80107ca:	1ac0      	subs	r0, r0, r3
 80107cc:	2300      	movs	r3, #0
 80107ce:	4602      	mov	r2, r0
 80107d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80107d2:	6a21      	ldr	r1, [r4, #32]
 80107d4:	4628      	mov	r0, r5
 80107d6:	47b0      	blx	r6
 80107d8:	1c43      	adds	r3, r0, #1
 80107da:	89a3      	ldrh	r3, [r4, #12]
 80107dc:	d106      	bne.n	80107ec <__sflush_r+0x68>
 80107de:	6829      	ldr	r1, [r5, #0]
 80107e0:	291d      	cmp	r1, #29
 80107e2:	d848      	bhi.n	8010876 <__sflush_r+0xf2>
 80107e4:	4a29      	ldr	r2, [pc, #164]	; (801088c <__sflush_r+0x108>)
 80107e6:	40ca      	lsrs	r2, r1
 80107e8:	07d6      	lsls	r6, r2, #31
 80107ea:	d544      	bpl.n	8010876 <__sflush_r+0xf2>
 80107ec:	2200      	movs	r2, #0
 80107ee:	6062      	str	r2, [r4, #4]
 80107f0:	04d9      	lsls	r1, r3, #19
 80107f2:	6922      	ldr	r2, [r4, #16]
 80107f4:	6022      	str	r2, [r4, #0]
 80107f6:	d504      	bpl.n	8010802 <__sflush_r+0x7e>
 80107f8:	1c42      	adds	r2, r0, #1
 80107fa:	d101      	bne.n	8010800 <__sflush_r+0x7c>
 80107fc:	682b      	ldr	r3, [r5, #0]
 80107fe:	b903      	cbnz	r3, 8010802 <__sflush_r+0x7e>
 8010800:	6560      	str	r0, [r4, #84]	; 0x54
 8010802:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010804:	602f      	str	r7, [r5, #0]
 8010806:	2900      	cmp	r1, #0
 8010808:	d0c9      	beq.n	801079e <__sflush_r+0x1a>
 801080a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801080e:	4299      	cmp	r1, r3
 8010810:	d002      	beq.n	8010818 <__sflush_r+0x94>
 8010812:	4628      	mov	r0, r5
 8010814:	f000 f994 	bl	8010b40 <_free_r>
 8010818:	2000      	movs	r0, #0
 801081a:	6360      	str	r0, [r4, #52]	; 0x34
 801081c:	e7c0      	b.n	80107a0 <__sflush_r+0x1c>
 801081e:	2301      	movs	r3, #1
 8010820:	4628      	mov	r0, r5
 8010822:	47b0      	blx	r6
 8010824:	1c41      	adds	r1, r0, #1
 8010826:	d1c8      	bne.n	80107ba <__sflush_r+0x36>
 8010828:	682b      	ldr	r3, [r5, #0]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d0c5      	beq.n	80107ba <__sflush_r+0x36>
 801082e:	2b1d      	cmp	r3, #29
 8010830:	d001      	beq.n	8010836 <__sflush_r+0xb2>
 8010832:	2b16      	cmp	r3, #22
 8010834:	d101      	bne.n	801083a <__sflush_r+0xb6>
 8010836:	602f      	str	r7, [r5, #0]
 8010838:	e7b1      	b.n	801079e <__sflush_r+0x1a>
 801083a:	89a3      	ldrh	r3, [r4, #12]
 801083c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010840:	81a3      	strh	r3, [r4, #12]
 8010842:	e7ad      	b.n	80107a0 <__sflush_r+0x1c>
 8010844:	690f      	ldr	r7, [r1, #16]
 8010846:	2f00      	cmp	r7, #0
 8010848:	d0a9      	beq.n	801079e <__sflush_r+0x1a>
 801084a:	0793      	lsls	r3, r2, #30
 801084c:	680e      	ldr	r6, [r1, #0]
 801084e:	bf08      	it	eq
 8010850:	694b      	ldreq	r3, [r1, #20]
 8010852:	600f      	str	r7, [r1, #0]
 8010854:	bf18      	it	ne
 8010856:	2300      	movne	r3, #0
 8010858:	eba6 0807 	sub.w	r8, r6, r7
 801085c:	608b      	str	r3, [r1, #8]
 801085e:	f1b8 0f00 	cmp.w	r8, #0
 8010862:	dd9c      	ble.n	801079e <__sflush_r+0x1a>
 8010864:	4643      	mov	r3, r8
 8010866:	463a      	mov	r2, r7
 8010868:	6a21      	ldr	r1, [r4, #32]
 801086a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801086c:	4628      	mov	r0, r5
 801086e:	47b0      	blx	r6
 8010870:	2800      	cmp	r0, #0
 8010872:	dc06      	bgt.n	8010882 <__sflush_r+0xfe>
 8010874:	89a3      	ldrh	r3, [r4, #12]
 8010876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801087a:	81a3      	strh	r3, [r4, #12]
 801087c:	f04f 30ff 	mov.w	r0, #4294967295
 8010880:	e78e      	b.n	80107a0 <__sflush_r+0x1c>
 8010882:	4407      	add	r7, r0
 8010884:	eba8 0800 	sub.w	r8, r8, r0
 8010888:	e7e9      	b.n	801085e <__sflush_r+0xda>
 801088a:	bf00      	nop
 801088c:	20400001 	.word	0x20400001

08010890 <_fflush_r>:
 8010890:	b538      	push	{r3, r4, r5, lr}
 8010892:	690b      	ldr	r3, [r1, #16]
 8010894:	4605      	mov	r5, r0
 8010896:	460c      	mov	r4, r1
 8010898:	b1db      	cbz	r3, 80108d2 <_fflush_r+0x42>
 801089a:	b118      	cbz	r0, 80108a4 <_fflush_r+0x14>
 801089c:	6983      	ldr	r3, [r0, #24]
 801089e:	b90b      	cbnz	r3, 80108a4 <_fflush_r+0x14>
 80108a0:	f000 f860 	bl	8010964 <__sinit>
 80108a4:	4b0c      	ldr	r3, [pc, #48]	; (80108d8 <_fflush_r+0x48>)
 80108a6:	429c      	cmp	r4, r3
 80108a8:	d109      	bne.n	80108be <_fflush_r+0x2e>
 80108aa:	686c      	ldr	r4, [r5, #4]
 80108ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108b0:	b17b      	cbz	r3, 80108d2 <_fflush_r+0x42>
 80108b2:	4621      	mov	r1, r4
 80108b4:	4628      	mov	r0, r5
 80108b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108ba:	f7ff bf63 	b.w	8010784 <__sflush_r>
 80108be:	4b07      	ldr	r3, [pc, #28]	; (80108dc <_fflush_r+0x4c>)
 80108c0:	429c      	cmp	r4, r3
 80108c2:	d101      	bne.n	80108c8 <_fflush_r+0x38>
 80108c4:	68ac      	ldr	r4, [r5, #8]
 80108c6:	e7f1      	b.n	80108ac <_fflush_r+0x1c>
 80108c8:	4b05      	ldr	r3, [pc, #20]	; (80108e0 <_fflush_r+0x50>)
 80108ca:	429c      	cmp	r4, r3
 80108cc:	bf08      	it	eq
 80108ce:	68ec      	ldreq	r4, [r5, #12]
 80108d0:	e7ec      	b.n	80108ac <_fflush_r+0x1c>
 80108d2:	2000      	movs	r0, #0
 80108d4:	bd38      	pop	{r3, r4, r5, pc}
 80108d6:	bf00      	nop
 80108d8:	080129ec 	.word	0x080129ec
 80108dc:	08012a0c 	.word	0x08012a0c
 80108e0:	080129cc 	.word	0x080129cc

080108e4 <std>:
 80108e4:	2300      	movs	r3, #0
 80108e6:	b510      	push	{r4, lr}
 80108e8:	4604      	mov	r4, r0
 80108ea:	e9c0 3300 	strd	r3, r3, [r0]
 80108ee:	6083      	str	r3, [r0, #8]
 80108f0:	8181      	strh	r1, [r0, #12]
 80108f2:	6643      	str	r3, [r0, #100]	; 0x64
 80108f4:	81c2      	strh	r2, [r0, #14]
 80108f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80108fa:	6183      	str	r3, [r0, #24]
 80108fc:	4619      	mov	r1, r3
 80108fe:	2208      	movs	r2, #8
 8010900:	305c      	adds	r0, #92	; 0x5c
 8010902:	f7ff fd8c 	bl	801041e <memset>
 8010906:	4b05      	ldr	r3, [pc, #20]	; (801091c <std+0x38>)
 8010908:	6263      	str	r3, [r4, #36]	; 0x24
 801090a:	4b05      	ldr	r3, [pc, #20]	; (8010920 <std+0x3c>)
 801090c:	62a3      	str	r3, [r4, #40]	; 0x28
 801090e:	4b05      	ldr	r3, [pc, #20]	; (8010924 <std+0x40>)
 8010910:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010912:	4b05      	ldr	r3, [pc, #20]	; (8010928 <std+0x44>)
 8010914:	6224      	str	r4, [r4, #32]
 8010916:	6323      	str	r3, [r4, #48]	; 0x30
 8010918:	bd10      	pop	{r4, pc}
 801091a:	bf00      	nop
 801091c:	080114e5 	.word	0x080114e5
 8010920:	08011507 	.word	0x08011507
 8010924:	0801153f 	.word	0x0801153f
 8010928:	08011563 	.word	0x08011563

0801092c <_cleanup_r>:
 801092c:	4901      	ldr	r1, [pc, #4]	; (8010934 <_cleanup_r+0x8>)
 801092e:	f000 b885 	b.w	8010a3c <_fwalk_reent>
 8010932:	bf00      	nop
 8010934:	08010891 	.word	0x08010891

08010938 <__sfmoreglue>:
 8010938:	b570      	push	{r4, r5, r6, lr}
 801093a:	1e4a      	subs	r2, r1, #1
 801093c:	2568      	movs	r5, #104	; 0x68
 801093e:	4355      	muls	r5, r2
 8010940:	460e      	mov	r6, r1
 8010942:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010946:	f000 f949 	bl	8010bdc <_malloc_r>
 801094a:	4604      	mov	r4, r0
 801094c:	b140      	cbz	r0, 8010960 <__sfmoreglue+0x28>
 801094e:	2100      	movs	r1, #0
 8010950:	e9c0 1600 	strd	r1, r6, [r0]
 8010954:	300c      	adds	r0, #12
 8010956:	60a0      	str	r0, [r4, #8]
 8010958:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801095c:	f7ff fd5f 	bl	801041e <memset>
 8010960:	4620      	mov	r0, r4
 8010962:	bd70      	pop	{r4, r5, r6, pc}

08010964 <__sinit>:
 8010964:	6983      	ldr	r3, [r0, #24]
 8010966:	b510      	push	{r4, lr}
 8010968:	4604      	mov	r4, r0
 801096a:	bb33      	cbnz	r3, 80109ba <__sinit+0x56>
 801096c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010970:	6503      	str	r3, [r0, #80]	; 0x50
 8010972:	4b12      	ldr	r3, [pc, #72]	; (80109bc <__sinit+0x58>)
 8010974:	4a12      	ldr	r2, [pc, #72]	; (80109c0 <__sinit+0x5c>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	6282      	str	r2, [r0, #40]	; 0x28
 801097a:	4298      	cmp	r0, r3
 801097c:	bf04      	itt	eq
 801097e:	2301      	moveq	r3, #1
 8010980:	6183      	streq	r3, [r0, #24]
 8010982:	f000 f81f 	bl	80109c4 <__sfp>
 8010986:	6060      	str	r0, [r4, #4]
 8010988:	4620      	mov	r0, r4
 801098a:	f000 f81b 	bl	80109c4 <__sfp>
 801098e:	60a0      	str	r0, [r4, #8]
 8010990:	4620      	mov	r0, r4
 8010992:	f000 f817 	bl	80109c4 <__sfp>
 8010996:	2200      	movs	r2, #0
 8010998:	60e0      	str	r0, [r4, #12]
 801099a:	2104      	movs	r1, #4
 801099c:	6860      	ldr	r0, [r4, #4]
 801099e:	f7ff ffa1 	bl	80108e4 <std>
 80109a2:	2201      	movs	r2, #1
 80109a4:	2109      	movs	r1, #9
 80109a6:	68a0      	ldr	r0, [r4, #8]
 80109a8:	f7ff ff9c 	bl	80108e4 <std>
 80109ac:	2202      	movs	r2, #2
 80109ae:	2112      	movs	r1, #18
 80109b0:	68e0      	ldr	r0, [r4, #12]
 80109b2:	f7ff ff97 	bl	80108e4 <std>
 80109b6:	2301      	movs	r3, #1
 80109b8:	61a3      	str	r3, [r4, #24]
 80109ba:	bd10      	pop	{r4, pc}
 80109bc:	080129c8 	.word	0x080129c8
 80109c0:	0801092d 	.word	0x0801092d

080109c4 <__sfp>:
 80109c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109c6:	4b1b      	ldr	r3, [pc, #108]	; (8010a34 <__sfp+0x70>)
 80109c8:	681e      	ldr	r6, [r3, #0]
 80109ca:	69b3      	ldr	r3, [r6, #24]
 80109cc:	4607      	mov	r7, r0
 80109ce:	b913      	cbnz	r3, 80109d6 <__sfp+0x12>
 80109d0:	4630      	mov	r0, r6
 80109d2:	f7ff ffc7 	bl	8010964 <__sinit>
 80109d6:	3648      	adds	r6, #72	; 0x48
 80109d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80109dc:	3b01      	subs	r3, #1
 80109de:	d503      	bpl.n	80109e8 <__sfp+0x24>
 80109e0:	6833      	ldr	r3, [r6, #0]
 80109e2:	b133      	cbz	r3, 80109f2 <__sfp+0x2e>
 80109e4:	6836      	ldr	r6, [r6, #0]
 80109e6:	e7f7      	b.n	80109d8 <__sfp+0x14>
 80109e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80109ec:	b16d      	cbz	r5, 8010a0a <__sfp+0x46>
 80109ee:	3468      	adds	r4, #104	; 0x68
 80109f0:	e7f4      	b.n	80109dc <__sfp+0x18>
 80109f2:	2104      	movs	r1, #4
 80109f4:	4638      	mov	r0, r7
 80109f6:	f7ff ff9f 	bl	8010938 <__sfmoreglue>
 80109fa:	6030      	str	r0, [r6, #0]
 80109fc:	2800      	cmp	r0, #0
 80109fe:	d1f1      	bne.n	80109e4 <__sfp+0x20>
 8010a00:	230c      	movs	r3, #12
 8010a02:	603b      	str	r3, [r7, #0]
 8010a04:	4604      	mov	r4, r0
 8010a06:	4620      	mov	r0, r4
 8010a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a0a:	4b0b      	ldr	r3, [pc, #44]	; (8010a38 <__sfp+0x74>)
 8010a0c:	6665      	str	r5, [r4, #100]	; 0x64
 8010a0e:	e9c4 5500 	strd	r5, r5, [r4]
 8010a12:	60a5      	str	r5, [r4, #8]
 8010a14:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010a18:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010a1c:	2208      	movs	r2, #8
 8010a1e:	4629      	mov	r1, r5
 8010a20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010a24:	f7ff fcfb 	bl	801041e <memset>
 8010a28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010a2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010a30:	e7e9      	b.n	8010a06 <__sfp+0x42>
 8010a32:	bf00      	nop
 8010a34:	080129c8 	.word	0x080129c8
 8010a38:	ffff0001 	.word	0xffff0001

08010a3c <_fwalk_reent>:
 8010a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a40:	4680      	mov	r8, r0
 8010a42:	4689      	mov	r9, r1
 8010a44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010a48:	2600      	movs	r6, #0
 8010a4a:	b914      	cbnz	r4, 8010a52 <_fwalk_reent+0x16>
 8010a4c:	4630      	mov	r0, r6
 8010a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a52:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010a56:	3f01      	subs	r7, #1
 8010a58:	d501      	bpl.n	8010a5e <_fwalk_reent+0x22>
 8010a5a:	6824      	ldr	r4, [r4, #0]
 8010a5c:	e7f5      	b.n	8010a4a <_fwalk_reent+0xe>
 8010a5e:	89ab      	ldrh	r3, [r5, #12]
 8010a60:	2b01      	cmp	r3, #1
 8010a62:	d907      	bls.n	8010a74 <_fwalk_reent+0x38>
 8010a64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010a68:	3301      	adds	r3, #1
 8010a6a:	d003      	beq.n	8010a74 <_fwalk_reent+0x38>
 8010a6c:	4629      	mov	r1, r5
 8010a6e:	4640      	mov	r0, r8
 8010a70:	47c8      	blx	r9
 8010a72:	4306      	orrs	r6, r0
 8010a74:	3568      	adds	r5, #104	; 0x68
 8010a76:	e7ee      	b.n	8010a56 <_fwalk_reent+0x1a>

08010a78 <__swhatbuf_r>:
 8010a78:	b570      	push	{r4, r5, r6, lr}
 8010a7a:	460e      	mov	r6, r1
 8010a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a80:	2900      	cmp	r1, #0
 8010a82:	b096      	sub	sp, #88	; 0x58
 8010a84:	4614      	mov	r4, r2
 8010a86:	461d      	mov	r5, r3
 8010a88:	da07      	bge.n	8010a9a <__swhatbuf_r+0x22>
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	602b      	str	r3, [r5, #0]
 8010a8e:	89b3      	ldrh	r3, [r6, #12]
 8010a90:	061a      	lsls	r2, r3, #24
 8010a92:	d410      	bmi.n	8010ab6 <__swhatbuf_r+0x3e>
 8010a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a98:	e00e      	b.n	8010ab8 <__swhatbuf_r+0x40>
 8010a9a:	466a      	mov	r2, sp
 8010a9c:	f000 fd88 	bl	80115b0 <_fstat_r>
 8010aa0:	2800      	cmp	r0, #0
 8010aa2:	dbf2      	blt.n	8010a8a <__swhatbuf_r+0x12>
 8010aa4:	9a01      	ldr	r2, [sp, #4]
 8010aa6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010aaa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010aae:	425a      	negs	r2, r3
 8010ab0:	415a      	adcs	r2, r3
 8010ab2:	602a      	str	r2, [r5, #0]
 8010ab4:	e7ee      	b.n	8010a94 <__swhatbuf_r+0x1c>
 8010ab6:	2340      	movs	r3, #64	; 0x40
 8010ab8:	2000      	movs	r0, #0
 8010aba:	6023      	str	r3, [r4, #0]
 8010abc:	b016      	add	sp, #88	; 0x58
 8010abe:	bd70      	pop	{r4, r5, r6, pc}

08010ac0 <__smakebuf_r>:
 8010ac0:	898b      	ldrh	r3, [r1, #12]
 8010ac2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ac4:	079d      	lsls	r5, r3, #30
 8010ac6:	4606      	mov	r6, r0
 8010ac8:	460c      	mov	r4, r1
 8010aca:	d507      	bpl.n	8010adc <__smakebuf_r+0x1c>
 8010acc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ad0:	6023      	str	r3, [r4, #0]
 8010ad2:	6123      	str	r3, [r4, #16]
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	6163      	str	r3, [r4, #20]
 8010ad8:	b002      	add	sp, #8
 8010ada:	bd70      	pop	{r4, r5, r6, pc}
 8010adc:	ab01      	add	r3, sp, #4
 8010ade:	466a      	mov	r2, sp
 8010ae0:	f7ff ffca 	bl	8010a78 <__swhatbuf_r>
 8010ae4:	9900      	ldr	r1, [sp, #0]
 8010ae6:	4605      	mov	r5, r0
 8010ae8:	4630      	mov	r0, r6
 8010aea:	f000 f877 	bl	8010bdc <_malloc_r>
 8010aee:	b948      	cbnz	r0, 8010b04 <__smakebuf_r+0x44>
 8010af0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010af4:	059a      	lsls	r2, r3, #22
 8010af6:	d4ef      	bmi.n	8010ad8 <__smakebuf_r+0x18>
 8010af8:	f023 0303 	bic.w	r3, r3, #3
 8010afc:	f043 0302 	orr.w	r3, r3, #2
 8010b00:	81a3      	strh	r3, [r4, #12]
 8010b02:	e7e3      	b.n	8010acc <__smakebuf_r+0xc>
 8010b04:	4b0d      	ldr	r3, [pc, #52]	; (8010b3c <__smakebuf_r+0x7c>)
 8010b06:	62b3      	str	r3, [r6, #40]	; 0x28
 8010b08:	89a3      	ldrh	r3, [r4, #12]
 8010b0a:	6020      	str	r0, [r4, #0]
 8010b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b10:	81a3      	strh	r3, [r4, #12]
 8010b12:	9b00      	ldr	r3, [sp, #0]
 8010b14:	6163      	str	r3, [r4, #20]
 8010b16:	9b01      	ldr	r3, [sp, #4]
 8010b18:	6120      	str	r0, [r4, #16]
 8010b1a:	b15b      	cbz	r3, 8010b34 <__smakebuf_r+0x74>
 8010b1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b20:	4630      	mov	r0, r6
 8010b22:	f000 fd57 	bl	80115d4 <_isatty_r>
 8010b26:	b128      	cbz	r0, 8010b34 <__smakebuf_r+0x74>
 8010b28:	89a3      	ldrh	r3, [r4, #12]
 8010b2a:	f023 0303 	bic.w	r3, r3, #3
 8010b2e:	f043 0301 	orr.w	r3, r3, #1
 8010b32:	81a3      	strh	r3, [r4, #12]
 8010b34:	89a3      	ldrh	r3, [r4, #12]
 8010b36:	431d      	orrs	r5, r3
 8010b38:	81a5      	strh	r5, [r4, #12]
 8010b3a:	e7cd      	b.n	8010ad8 <__smakebuf_r+0x18>
 8010b3c:	0801092d 	.word	0x0801092d

08010b40 <_free_r>:
 8010b40:	b538      	push	{r3, r4, r5, lr}
 8010b42:	4605      	mov	r5, r0
 8010b44:	2900      	cmp	r1, #0
 8010b46:	d045      	beq.n	8010bd4 <_free_r+0x94>
 8010b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b4c:	1f0c      	subs	r4, r1, #4
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	bfb8      	it	lt
 8010b52:	18e4      	addlt	r4, r4, r3
 8010b54:	f000 fd79 	bl	801164a <__malloc_lock>
 8010b58:	4a1f      	ldr	r2, [pc, #124]	; (8010bd8 <_free_r+0x98>)
 8010b5a:	6813      	ldr	r3, [r2, #0]
 8010b5c:	4610      	mov	r0, r2
 8010b5e:	b933      	cbnz	r3, 8010b6e <_free_r+0x2e>
 8010b60:	6063      	str	r3, [r4, #4]
 8010b62:	6014      	str	r4, [r2, #0]
 8010b64:	4628      	mov	r0, r5
 8010b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b6a:	f000 bd6f 	b.w	801164c <__malloc_unlock>
 8010b6e:	42a3      	cmp	r3, r4
 8010b70:	d90c      	bls.n	8010b8c <_free_r+0x4c>
 8010b72:	6821      	ldr	r1, [r4, #0]
 8010b74:	1862      	adds	r2, r4, r1
 8010b76:	4293      	cmp	r3, r2
 8010b78:	bf04      	itt	eq
 8010b7a:	681a      	ldreq	r2, [r3, #0]
 8010b7c:	685b      	ldreq	r3, [r3, #4]
 8010b7e:	6063      	str	r3, [r4, #4]
 8010b80:	bf04      	itt	eq
 8010b82:	1852      	addeq	r2, r2, r1
 8010b84:	6022      	streq	r2, [r4, #0]
 8010b86:	6004      	str	r4, [r0, #0]
 8010b88:	e7ec      	b.n	8010b64 <_free_r+0x24>
 8010b8a:	4613      	mov	r3, r2
 8010b8c:	685a      	ldr	r2, [r3, #4]
 8010b8e:	b10a      	cbz	r2, 8010b94 <_free_r+0x54>
 8010b90:	42a2      	cmp	r2, r4
 8010b92:	d9fa      	bls.n	8010b8a <_free_r+0x4a>
 8010b94:	6819      	ldr	r1, [r3, #0]
 8010b96:	1858      	adds	r0, r3, r1
 8010b98:	42a0      	cmp	r0, r4
 8010b9a:	d10b      	bne.n	8010bb4 <_free_r+0x74>
 8010b9c:	6820      	ldr	r0, [r4, #0]
 8010b9e:	4401      	add	r1, r0
 8010ba0:	1858      	adds	r0, r3, r1
 8010ba2:	4282      	cmp	r2, r0
 8010ba4:	6019      	str	r1, [r3, #0]
 8010ba6:	d1dd      	bne.n	8010b64 <_free_r+0x24>
 8010ba8:	6810      	ldr	r0, [r2, #0]
 8010baa:	6852      	ldr	r2, [r2, #4]
 8010bac:	605a      	str	r2, [r3, #4]
 8010bae:	4401      	add	r1, r0
 8010bb0:	6019      	str	r1, [r3, #0]
 8010bb2:	e7d7      	b.n	8010b64 <_free_r+0x24>
 8010bb4:	d902      	bls.n	8010bbc <_free_r+0x7c>
 8010bb6:	230c      	movs	r3, #12
 8010bb8:	602b      	str	r3, [r5, #0]
 8010bba:	e7d3      	b.n	8010b64 <_free_r+0x24>
 8010bbc:	6820      	ldr	r0, [r4, #0]
 8010bbe:	1821      	adds	r1, r4, r0
 8010bc0:	428a      	cmp	r2, r1
 8010bc2:	bf04      	itt	eq
 8010bc4:	6811      	ldreq	r1, [r2, #0]
 8010bc6:	6852      	ldreq	r2, [r2, #4]
 8010bc8:	6062      	str	r2, [r4, #4]
 8010bca:	bf04      	itt	eq
 8010bcc:	1809      	addeq	r1, r1, r0
 8010bce:	6021      	streq	r1, [r4, #0]
 8010bd0:	605c      	str	r4, [r3, #4]
 8010bd2:	e7c7      	b.n	8010b64 <_free_r+0x24>
 8010bd4:	bd38      	pop	{r3, r4, r5, pc}
 8010bd6:	bf00      	nop
 8010bd8:	20006a78 	.word	0x20006a78

08010bdc <_malloc_r>:
 8010bdc:	b570      	push	{r4, r5, r6, lr}
 8010bde:	1ccd      	adds	r5, r1, #3
 8010be0:	f025 0503 	bic.w	r5, r5, #3
 8010be4:	3508      	adds	r5, #8
 8010be6:	2d0c      	cmp	r5, #12
 8010be8:	bf38      	it	cc
 8010bea:	250c      	movcc	r5, #12
 8010bec:	2d00      	cmp	r5, #0
 8010bee:	4606      	mov	r6, r0
 8010bf0:	db01      	blt.n	8010bf6 <_malloc_r+0x1a>
 8010bf2:	42a9      	cmp	r1, r5
 8010bf4:	d903      	bls.n	8010bfe <_malloc_r+0x22>
 8010bf6:	230c      	movs	r3, #12
 8010bf8:	6033      	str	r3, [r6, #0]
 8010bfa:	2000      	movs	r0, #0
 8010bfc:	bd70      	pop	{r4, r5, r6, pc}
 8010bfe:	f000 fd24 	bl	801164a <__malloc_lock>
 8010c02:	4a21      	ldr	r2, [pc, #132]	; (8010c88 <_malloc_r+0xac>)
 8010c04:	6814      	ldr	r4, [r2, #0]
 8010c06:	4621      	mov	r1, r4
 8010c08:	b991      	cbnz	r1, 8010c30 <_malloc_r+0x54>
 8010c0a:	4c20      	ldr	r4, [pc, #128]	; (8010c8c <_malloc_r+0xb0>)
 8010c0c:	6823      	ldr	r3, [r4, #0]
 8010c0e:	b91b      	cbnz	r3, 8010c18 <_malloc_r+0x3c>
 8010c10:	4630      	mov	r0, r6
 8010c12:	f000 fc57 	bl	80114c4 <_sbrk_r>
 8010c16:	6020      	str	r0, [r4, #0]
 8010c18:	4629      	mov	r1, r5
 8010c1a:	4630      	mov	r0, r6
 8010c1c:	f000 fc52 	bl	80114c4 <_sbrk_r>
 8010c20:	1c43      	adds	r3, r0, #1
 8010c22:	d124      	bne.n	8010c6e <_malloc_r+0x92>
 8010c24:	230c      	movs	r3, #12
 8010c26:	6033      	str	r3, [r6, #0]
 8010c28:	4630      	mov	r0, r6
 8010c2a:	f000 fd0f 	bl	801164c <__malloc_unlock>
 8010c2e:	e7e4      	b.n	8010bfa <_malloc_r+0x1e>
 8010c30:	680b      	ldr	r3, [r1, #0]
 8010c32:	1b5b      	subs	r3, r3, r5
 8010c34:	d418      	bmi.n	8010c68 <_malloc_r+0x8c>
 8010c36:	2b0b      	cmp	r3, #11
 8010c38:	d90f      	bls.n	8010c5a <_malloc_r+0x7e>
 8010c3a:	600b      	str	r3, [r1, #0]
 8010c3c:	50cd      	str	r5, [r1, r3]
 8010c3e:	18cc      	adds	r4, r1, r3
 8010c40:	4630      	mov	r0, r6
 8010c42:	f000 fd03 	bl	801164c <__malloc_unlock>
 8010c46:	f104 000b 	add.w	r0, r4, #11
 8010c4a:	1d23      	adds	r3, r4, #4
 8010c4c:	f020 0007 	bic.w	r0, r0, #7
 8010c50:	1ac3      	subs	r3, r0, r3
 8010c52:	d0d3      	beq.n	8010bfc <_malloc_r+0x20>
 8010c54:	425a      	negs	r2, r3
 8010c56:	50e2      	str	r2, [r4, r3]
 8010c58:	e7d0      	b.n	8010bfc <_malloc_r+0x20>
 8010c5a:	428c      	cmp	r4, r1
 8010c5c:	684b      	ldr	r3, [r1, #4]
 8010c5e:	bf16      	itet	ne
 8010c60:	6063      	strne	r3, [r4, #4]
 8010c62:	6013      	streq	r3, [r2, #0]
 8010c64:	460c      	movne	r4, r1
 8010c66:	e7eb      	b.n	8010c40 <_malloc_r+0x64>
 8010c68:	460c      	mov	r4, r1
 8010c6a:	6849      	ldr	r1, [r1, #4]
 8010c6c:	e7cc      	b.n	8010c08 <_malloc_r+0x2c>
 8010c6e:	1cc4      	adds	r4, r0, #3
 8010c70:	f024 0403 	bic.w	r4, r4, #3
 8010c74:	42a0      	cmp	r0, r4
 8010c76:	d005      	beq.n	8010c84 <_malloc_r+0xa8>
 8010c78:	1a21      	subs	r1, r4, r0
 8010c7a:	4630      	mov	r0, r6
 8010c7c:	f000 fc22 	bl	80114c4 <_sbrk_r>
 8010c80:	3001      	adds	r0, #1
 8010c82:	d0cf      	beq.n	8010c24 <_malloc_r+0x48>
 8010c84:	6025      	str	r5, [r4, #0]
 8010c86:	e7db      	b.n	8010c40 <_malloc_r+0x64>
 8010c88:	20006a78 	.word	0x20006a78
 8010c8c:	20006a7c 	.word	0x20006a7c

08010c90 <__ssputs_r>:
 8010c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c94:	688e      	ldr	r6, [r1, #8]
 8010c96:	429e      	cmp	r6, r3
 8010c98:	4682      	mov	sl, r0
 8010c9a:	460c      	mov	r4, r1
 8010c9c:	4690      	mov	r8, r2
 8010c9e:	4699      	mov	r9, r3
 8010ca0:	d837      	bhi.n	8010d12 <__ssputs_r+0x82>
 8010ca2:	898a      	ldrh	r2, [r1, #12]
 8010ca4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010ca8:	d031      	beq.n	8010d0e <__ssputs_r+0x7e>
 8010caa:	6825      	ldr	r5, [r4, #0]
 8010cac:	6909      	ldr	r1, [r1, #16]
 8010cae:	1a6f      	subs	r7, r5, r1
 8010cb0:	6965      	ldr	r5, [r4, #20]
 8010cb2:	2302      	movs	r3, #2
 8010cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010cb8:	fb95 f5f3 	sdiv	r5, r5, r3
 8010cbc:	f109 0301 	add.w	r3, r9, #1
 8010cc0:	443b      	add	r3, r7
 8010cc2:	429d      	cmp	r5, r3
 8010cc4:	bf38      	it	cc
 8010cc6:	461d      	movcc	r5, r3
 8010cc8:	0553      	lsls	r3, r2, #21
 8010cca:	d530      	bpl.n	8010d2e <__ssputs_r+0x9e>
 8010ccc:	4629      	mov	r1, r5
 8010cce:	f7ff ff85 	bl	8010bdc <_malloc_r>
 8010cd2:	4606      	mov	r6, r0
 8010cd4:	b950      	cbnz	r0, 8010cec <__ssputs_r+0x5c>
 8010cd6:	230c      	movs	r3, #12
 8010cd8:	f8ca 3000 	str.w	r3, [sl]
 8010cdc:	89a3      	ldrh	r3, [r4, #12]
 8010cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ce2:	81a3      	strh	r3, [r4, #12]
 8010ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cec:	463a      	mov	r2, r7
 8010cee:	6921      	ldr	r1, [r4, #16]
 8010cf0:	f7ff fb8a 	bl	8010408 <memcpy>
 8010cf4:	89a3      	ldrh	r3, [r4, #12]
 8010cf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cfe:	81a3      	strh	r3, [r4, #12]
 8010d00:	6126      	str	r6, [r4, #16]
 8010d02:	6165      	str	r5, [r4, #20]
 8010d04:	443e      	add	r6, r7
 8010d06:	1bed      	subs	r5, r5, r7
 8010d08:	6026      	str	r6, [r4, #0]
 8010d0a:	60a5      	str	r5, [r4, #8]
 8010d0c:	464e      	mov	r6, r9
 8010d0e:	454e      	cmp	r6, r9
 8010d10:	d900      	bls.n	8010d14 <__ssputs_r+0x84>
 8010d12:	464e      	mov	r6, r9
 8010d14:	4632      	mov	r2, r6
 8010d16:	4641      	mov	r1, r8
 8010d18:	6820      	ldr	r0, [r4, #0]
 8010d1a:	f000 fc7d 	bl	8011618 <memmove>
 8010d1e:	68a3      	ldr	r3, [r4, #8]
 8010d20:	1b9b      	subs	r3, r3, r6
 8010d22:	60a3      	str	r3, [r4, #8]
 8010d24:	6823      	ldr	r3, [r4, #0]
 8010d26:	441e      	add	r6, r3
 8010d28:	6026      	str	r6, [r4, #0]
 8010d2a:	2000      	movs	r0, #0
 8010d2c:	e7dc      	b.n	8010ce8 <__ssputs_r+0x58>
 8010d2e:	462a      	mov	r2, r5
 8010d30:	f000 fc8d 	bl	801164e <_realloc_r>
 8010d34:	4606      	mov	r6, r0
 8010d36:	2800      	cmp	r0, #0
 8010d38:	d1e2      	bne.n	8010d00 <__ssputs_r+0x70>
 8010d3a:	6921      	ldr	r1, [r4, #16]
 8010d3c:	4650      	mov	r0, sl
 8010d3e:	f7ff feff 	bl	8010b40 <_free_r>
 8010d42:	e7c8      	b.n	8010cd6 <__ssputs_r+0x46>

08010d44 <_svfiprintf_r>:
 8010d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d48:	461d      	mov	r5, r3
 8010d4a:	898b      	ldrh	r3, [r1, #12]
 8010d4c:	061f      	lsls	r7, r3, #24
 8010d4e:	b09d      	sub	sp, #116	; 0x74
 8010d50:	4680      	mov	r8, r0
 8010d52:	460c      	mov	r4, r1
 8010d54:	4616      	mov	r6, r2
 8010d56:	d50f      	bpl.n	8010d78 <_svfiprintf_r+0x34>
 8010d58:	690b      	ldr	r3, [r1, #16]
 8010d5a:	b96b      	cbnz	r3, 8010d78 <_svfiprintf_r+0x34>
 8010d5c:	2140      	movs	r1, #64	; 0x40
 8010d5e:	f7ff ff3d 	bl	8010bdc <_malloc_r>
 8010d62:	6020      	str	r0, [r4, #0]
 8010d64:	6120      	str	r0, [r4, #16]
 8010d66:	b928      	cbnz	r0, 8010d74 <_svfiprintf_r+0x30>
 8010d68:	230c      	movs	r3, #12
 8010d6a:	f8c8 3000 	str.w	r3, [r8]
 8010d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8010d72:	e0c8      	b.n	8010f06 <_svfiprintf_r+0x1c2>
 8010d74:	2340      	movs	r3, #64	; 0x40
 8010d76:	6163      	str	r3, [r4, #20]
 8010d78:	2300      	movs	r3, #0
 8010d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8010d7c:	2320      	movs	r3, #32
 8010d7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d82:	2330      	movs	r3, #48	; 0x30
 8010d84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d88:	9503      	str	r5, [sp, #12]
 8010d8a:	f04f 0b01 	mov.w	fp, #1
 8010d8e:	4637      	mov	r7, r6
 8010d90:	463d      	mov	r5, r7
 8010d92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010d96:	b10b      	cbz	r3, 8010d9c <_svfiprintf_r+0x58>
 8010d98:	2b25      	cmp	r3, #37	; 0x25
 8010d9a:	d13e      	bne.n	8010e1a <_svfiprintf_r+0xd6>
 8010d9c:	ebb7 0a06 	subs.w	sl, r7, r6
 8010da0:	d00b      	beq.n	8010dba <_svfiprintf_r+0x76>
 8010da2:	4653      	mov	r3, sl
 8010da4:	4632      	mov	r2, r6
 8010da6:	4621      	mov	r1, r4
 8010da8:	4640      	mov	r0, r8
 8010daa:	f7ff ff71 	bl	8010c90 <__ssputs_r>
 8010dae:	3001      	adds	r0, #1
 8010db0:	f000 80a4 	beq.w	8010efc <_svfiprintf_r+0x1b8>
 8010db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010db6:	4453      	add	r3, sl
 8010db8:	9309      	str	r3, [sp, #36]	; 0x24
 8010dba:	783b      	ldrb	r3, [r7, #0]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	f000 809d 	beq.w	8010efc <_svfiprintf_r+0x1b8>
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8010dc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010dcc:	9304      	str	r3, [sp, #16]
 8010dce:	9307      	str	r3, [sp, #28]
 8010dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8010dd6:	462f      	mov	r7, r5
 8010dd8:	2205      	movs	r2, #5
 8010dda:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010dde:	4850      	ldr	r0, [pc, #320]	; (8010f20 <_svfiprintf_r+0x1dc>)
 8010de0:	f7ef f9e6 	bl	80001b0 <memchr>
 8010de4:	9b04      	ldr	r3, [sp, #16]
 8010de6:	b9d0      	cbnz	r0, 8010e1e <_svfiprintf_r+0xda>
 8010de8:	06d9      	lsls	r1, r3, #27
 8010dea:	bf44      	itt	mi
 8010dec:	2220      	movmi	r2, #32
 8010dee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010df2:	071a      	lsls	r2, r3, #28
 8010df4:	bf44      	itt	mi
 8010df6:	222b      	movmi	r2, #43	; 0x2b
 8010df8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010dfc:	782a      	ldrb	r2, [r5, #0]
 8010dfe:	2a2a      	cmp	r2, #42	; 0x2a
 8010e00:	d015      	beq.n	8010e2e <_svfiprintf_r+0xea>
 8010e02:	9a07      	ldr	r2, [sp, #28]
 8010e04:	462f      	mov	r7, r5
 8010e06:	2000      	movs	r0, #0
 8010e08:	250a      	movs	r5, #10
 8010e0a:	4639      	mov	r1, r7
 8010e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e10:	3b30      	subs	r3, #48	; 0x30
 8010e12:	2b09      	cmp	r3, #9
 8010e14:	d94d      	bls.n	8010eb2 <_svfiprintf_r+0x16e>
 8010e16:	b1b8      	cbz	r0, 8010e48 <_svfiprintf_r+0x104>
 8010e18:	e00f      	b.n	8010e3a <_svfiprintf_r+0xf6>
 8010e1a:	462f      	mov	r7, r5
 8010e1c:	e7b8      	b.n	8010d90 <_svfiprintf_r+0x4c>
 8010e1e:	4a40      	ldr	r2, [pc, #256]	; (8010f20 <_svfiprintf_r+0x1dc>)
 8010e20:	1a80      	subs	r0, r0, r2
 8010e22:	fa0b f000 	lsl.w	r0, fp, r0
 8010e26:	4318      	orrs	r0, r3
 8010e28:	9004      	str	r0, [sp, #16]
 8010e2a:	463d      	mov	r5, r7
 8010e2c:	e7d3      	b.n	8010dd6 <_svfiprintf_r+0x92>
 8010e2e:	9a03      	ldr	r2, [sp, #12]
 8010e30:	1d11      	adds	r1, r2, #4
 8010e32:	6812      	ldr	r2, [r2, #0]
 8010e34:	9103      	str	r1, [sp, #12]
 8010e36:	2a00      	cmp	r2, #0
 8010e38:	db01      	blt.n	8010e3e <_svfiprintf_r+0xfa>
 8010e3a:	9207      	str	r2, [sp, #28]
 8010e3c:	e004      	b.n	8010e48 <_svfiprintf_r+0x104>
 8010e3e:	4252      	negs	r2, r2
 8010e40:	f043 0302 	orr.w	r3, r3, #2
 8010e44:	9207      	str	r2, [sp, #28]
 8010e46:	9304      	str	r3, [sp, #16]
 8010e48:	783b      	ldrb	r3, [r7, #0]
 8010e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8010e4c:	d10c      	bne.n	8010e68 <_svfiprintf_r+0x124>
 8010e4e:	787b      	ldrb	r3, [r7, #1]
 8010e50:	2b2a      	cmp	r3, #42	; 0x2a
 8010e52:	d133      	bne.n	8010ebc <_svfiprintf_r+0x178>
 8010e54:	9b03      	ldr	r3, [sp, #12]
 8010e56:	1d1a      	adds	r2, r3, #4
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	9203      	str	r2, [sp, #12]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	bfb8      	it	lt
 8010e60:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e64:	3702      	adds	r7, #2
 8010e66:	9305      	str	r3, [sp, #20]
 8010e68:	4d2e      	ldr	r5, [pc, #184]	; (8010f24 <_svfiprintf_r+0x1e0>)
 8010e6a:	7839      	ldrb	r1, [r7, #0]
 8010e6c:	2203      	movs	r2, #3
 8010e6e:	4628      	mov	r0, r5
 8010e70:	f7ef f99e 	bl	80001b0 <memchr>
 8010e74:	b138      	cbz	r0, 8010e86 <_svfiprintf_r+0x142>
 8010e76:	2340      	movs	r3, #64	; 0x40
 8010e78:	1b40      	subs	r0, r0, r5
 8010e7a:	fa03 f000 	lsl.w	r0, r3, r0
 8010e7e:	9b04      	ldr	r3, [sp, #16]
 8010e80:	4303      	orrs	r3, r0
 8010e82:	3701      	adds	r7, #1
 8010e84:	9304      	str	r3, [sp, #16]
 8010e86:	7839      	ldrb	r1, [r7, #0]
 8010e88:	4827      	ldr	r0, [pc, #156]	; (8010f28 <_svfiprintf_r+0x1e4>)
 8010e8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e8e:	2206      	movs	r2, #6
 8010e90:	1c7e      	adds	r6, r7, #1
 8010e92:	f7ef f98d 	bl	80001b0 <memchr>
 8010e96:	2800      	cmp	r0, #0
 8010e98:	d038      	beq.n	8010f0c <_svfiprintf_r+0x1c8>
 8010e9a:	4b24      	ldr	r3, [pc, #144]	; (8010f2c <_svfiprintf_r+0x1e8>)
 8010e9c:	bb13      	cbnz	r3, 8010ee4 <_svfiprintf_r+0x1a0>
 8010e9e:	9b03      	ldr	r3, [sp, #12]
 8010ea0:	3307      	adds	r3, #7
 8010ea2:	f023 0307 	bic.w	r3, r3, #7
 8010ea6:	3308      	adds	r3, #8
 8010ea8:	9303      	str	r3, [sp, #12]
 8010eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010eac:	444b      	add	r3, r9
 8010eae:	9309      	str	r3, [sp, #36]	; 0x24
 8010eb0:	e76d      	b.n	8010d8e <_svfiprintf_r+0x4a>
 8010eb2:	fb05 3202 	mla	r2, r5, r2, r3
 8010eb6:	2001      	movs	r0, #1
 8010eb8:	460f      	mov	r7, r1
 8010eba:	e7a6      	b.n	8010e0a <_svfiprintf_r+0xc6>
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	3701      	adds	r7, #1
 8010ec0:	9305      	str	r3, [sp, #20]
 8010ec2:	4619      	mov	r1, r3
 8010ec4:	250a      	movs	r5, #10
 8010ec6:	4638      	mov	r0, r7
 8010ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ecc:	3a30      	subs	r2, #48	; 0x30
 8010ece:	2a09      	cmp	r2, #9
 8010ed0:	d903      	bls.n	8010eda <_svfiprintf_r+0x196>
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d0c8      	beq.n	8010e68 <_svfiprintf_r+0x124>
 8010ed6:	9105      	str	r1, [sp, #20]
 8010ed8:	e7c6      	b.n	8010e68 <_svfiprintf_r+0x124>
 8010eda:	fb05 2101 	mla	r1, r5, r1, r2
 8010ede:	2301      	movs	r3, #1
 8010ee0:	4607      	mov	r7, r0
 8010ee2:	e7f0      	b.n	8010ec6 <_svfiprintf_r+0x182>
 8010ee4:	ab03      	add	r3, sp, #12
 8010ee6:	9300      	str	r3, [sp, #0]
 8010ee8:	4622      	mov	r2, r4
 8010eea:	4b11      	ldr	r3, [pc, #68]	; (8010f30 <_svfiprintf_r+0x1ec>)
 8010eec:	a904      	add	r1, sp, #16
 8010eee:	4640      	mov	r0, r8
 8010ef0:	f3af 8000 	nop.w
 8010ef4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010ef8:	4681      	mov	r9, r0
 8010efa:	d1d6      	bne.n	8010eaa <_svfiprintf_r+0x166>
 8010efc:	89a3      	ldrh	r3, [r4, #12]
 8010efe:	065b      	lsls	r3, r3, #25
 8010f00:	f53f af35 	bmi.w	8010d6e <_svfiprintf_r+0x2a>
 8010f04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f06:	b01d      	add	sp, #116	; 0x74
 8010f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f0c:	ab03      	add	r3, sp, #12
 8010f0e:	9300      	str	r3, [sp, #0]
 8010f10:	4622      	mov	r2, r4
 8010f12:	4b07      	ldr	r3, [pc, #28]	; (8010f30 <_svfiprintf_r+0x1ec>)
 8010f14:	a904      	add	r1, sp, #16
 8010f16:	4640      	mov	r0, r8
 8010f18:	f000 f9c2 	bl	80112a0 <_printf_i>
 8010f1c:	e7ea      	b.n	8010ef4 <_svfiprintf_r+0x1b0>
 8010f1e:	bf00      	nop
 8010f20:	08012a2c 	.word	0x08012a2c
 8010f24:	08012a32 	.word	0x08012a32
 8010f28:	08012a36 	.word	0x08012a36
 8010f2c:	00000000 	.word	0x00000000
 8010f30:	08010c91 	.word	0x08010c91

08010f34 <__sfputc_r>:
 8010f34:	6893      	ldr	r3, [r2, #8]
 8010f36:	3b01      	subs	r3, #1
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	b410      	push	{r4}
 8010f3c:	6093      	str	r3, [r2, #8]
 8010f3e:	da08      	bge.n	8010f52 <__sfputc_r+0x1e>
 8010f40:	6994      	ldr	r4, [r2, #24]
 8010f42:	42a3      	cmp	r3, r4
 8010f44:	db01      	blt.n	8010f4a <__sfputc_r+0x16>
 8010f46:	290a      	cmp	r1, #10
 8010f48:	d103      	bne.n	8010f52 <__sfputc_r+0x1e>
 8010f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f4e:	f7ff bb59 	b.w	8010604 <__swbuf_r>
 8010f52:	6813      	ldr	r3, [r2, #0]
 8010f54:	1c58      	adds	r0, r3, #1
 8010f56:	6010      	str	r0, [r2, #0]
 8010f58:	7019      	strb	r1, [r3, #0]
 8010f5a:	4608      	mov	r0, r1
 8010f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f60:	4770      	bx	lr

08010f62 <__sfputs_r>:
 8010f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f64:	4606      	mov	r6, r0
 8010f66:	460f      	mov	r7, r1
 8010f68:	4614      	mov	r4, r2
 8010f6a:	18d5      	adds	r5, r2, r3
 8010f6c:	42ac      	cmp	r4, r5
 8010f6e:	d101      	bne.n	8010f74 <__sfputs_r+0x12>
 8010f70:	2000      	movs	r0, #0
 8010f72:	e007      	b.n	8010f84 <__sfputs_r+0x22>
 8010f74:	463a      	mov	r2, r7
 8010f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f7a:	4630      	mov	r0, r6
 8010f7c:	f7ff ffda 	bl	8010f34 <__sfputc_r>
 8010f80:	1c43      	adds	r3, r0, #1
 8010f82:	d1f3      	bne.n	8010f6c <__sfputs_r+0xa>
 8010f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010f88 <_vfiprintf_r>:
 8010f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f8c:	460c      	mov	r4, r1
 8010f8e:	b09d      	sub	sp, #116	; 0x74
 8010f90:	4617      	mov	r7, r2
 8010f92:	461d      	mov	r5, r3
 8010f94:	4606      	mov	r6, r0
 8010f96:	b118      	cbz	r0, 8010fa0 <_vfiprintf_r+0x18>
 8010f98:	6983      	ldr	r3, [r0, #24]
 8010f9a:	b90b      	cbnz	r3, 8010fa0 <_vfiprintf_r+0x18>
 8010f9c:	f7ff fce2 	bl	8010964 <__sinit>
 8010fa0:	4b7c      	ldr	r3, [pc, #496]	; (8011194 <_vfiprintf_r+0x20c>)
 8010fa2:	429c      	cmp	r4, r3
 8010fa4:	d158      	bne.n	8011058 <_vfiprintf_r+0xd0>
 8010fa6:	6874      	ldr	r4, [r6, #4]
 8010fa8:	89a3      	ldrh	r3, [r4, #12]
 8010faa:	0718      	lsls	r0, r3, #28
 8010fac:	d55e      	bpl.n	801106c <_vfiprintf_r+0xe4>
 8010fae:	6923      	ldr	r3, [r4, #16]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d05b      	beq.n	801106c <_vfiprintf_r+0xe4>
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8010fb8:	2320      	movs	r3, #32
 8010fba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010fbe:	2330      	movs	r3, #48	; 0x30
 8010fc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010fc4:	9503      	str	r5, [sp, #12]
 8010fc6:	f04f 0b01 	mov.w	fp, #1
 8010fca:	46b8      	mov	r8, r7
 8010fcc:	4645      	mov	r5, r8
 8010fce:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010fd2:	b10b      	cbz	r3, 8010fd8 <_vfiprintf_r+0x50>
 8010fd4:	2b25      	cmp	r3, #37	; 0x25
 8010fd6:	d154      	bne.n	8011082 <_vfiprintf_r+0xfa>
 8010fd8:	ebb8 0a07 	subs.w	sl, r8, r7
 8010fdc:	d00b      	beq.n	8010ff6 <_vfiprintf_r+0x6e>
 8010fde:	4653      	mov	r3, sl
 8010fe0:	463a      	mov	r2, r7
 8010fe2:	4621      	mov	r1, r4
 8010fe4:	4630      	mov	r0, r6
 8010fe6:	f7ff ffbc 	bl	8010f62 <__sfputs_r>
 8010fea:	3001      	adds	r0, #1
 8010fec:	f000 80c2 	beq.w	8011174 <_vfiprintf_r+0x1ec>
 8010ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ff2:	4453      	add	r3, sl
 8010ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8010ff6:	f898 3000 	ldrb.w	r3, [r8]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	f000 80ba 	beq.w	8011174 <_vfiprintf_r+0x1ec>
 8011000:	2300      	movs	r3, #0
 8011002:	f04f 32ff 	mov.w	r2, #4294967295
 8011006:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801100a:	9304      	str	r3, [sp, #16]
 801100c:	9307      	str	r3, [sp, #28]
 801100e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011012:	931a      	str	r3, [sp, #104]	; 0x68
 8011014:	46a8      	mov	r8, r5
 8011016:	2205      	movs	r2, #5
 8011018:	f818 1b01 	ldrb.w	r1, [r8], #1
 801101c:	485e      	ldr	r0, [pc, #376]	; (8011198 <_vfiprintf_r+0x210>)
 801101e:	f7ef f8c7 	bl	80001b0 <memchr>
 8011022:	9b04      	ldr	r3, [sp, #16]
 8011024:	bb78      	cbnz	r0, 8011086 <_vfiprintf_r+0xfe>
 8011026:	06d9      	lsls	r1, r3, #27
 8011028:	bf44      	itt	mi
 801102a:	2220      	movmi	r2, #32
 801102c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011030:	071a      	lsls	r2, r3, #28
 8011032:	bf44      	itt	mi
 8011034:	222b      	movmi	r2, #43	; 0x2b
 8011036:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801103a:	782a      	ldrb	r2, [r5, #0]
 801103c:	2a2a      	cmp	r2, #42	; 0x2a
 801103e:	d02a      	beq.n	8011096 <_vfiprintf_r+0x10e>
 8011040:	9a07      	ldr	r2, [sp, #28]
 8011042:	46a8      	mov	r8, r5
 8011044:	2000      	movs	r0, #0
 8011046:	250a      	movs	r5, #10
 8011048:	4641      	mov	r1, r8
 801104a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801104e:	3b30      	subs	r3, #48	; 0x30
 8011050:	2b09      	cmp	r3, #9
 8011052:	d969      	bls.n	8011128 <_vfiprintf_r+0x1a0>
 8011054:	b360      	cbz	r0, 80110b0 <_vfiprintf_r+0x128>
 8011056:	e024      	b.n	80110a2 <_vfiprintf_r+0x11a>
 8011058:	4b50      	ldr	r3, [pc, #320]	; (801119c <_vfiprintf_r+0x214>)
 801105a:	429c      	cmp	r4, r3
 801105c:	d101      	bne.n	8011062 <_vfiprintf_r+0xda>
 801105e:	68b4      	ldr	r4, [r6, #8]
 8011060:	e7a2      	b.n	8010fa8 <_vfiprintf_r+0x20>
 8011062:	4b4f      	ldr	r3, [pc, #316]	; (80111a0 <_vfiprintf_r+0x218>)
 8011064:	429c      	cmp	r4, r3
 8011066:	bf08      	it	eq
 8011068:	68f4      	ldreq	r4, [r6, #12]
 801106a:	e79d      	b.n	8010fa8 <_vfiprintf_r+0x20>
 801106c:	4621      	mov	r1, r4
 801106e:	4630      	mov	r0, r6
 8011070:	f7ff fb1a 	bl	80106a8 <__swsetup_r>
 8011074:	2800      	cmp	r0, #0
 8011076:	d09d      	beq.n	8010fb4 <_vfiprintf_r+0x2c>
 8011078:	f04f 30ff 	mov.w	r0, #4294967295
 801107c:	b01d      	add	sp, #116	; 0x74
 801107e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011082:	46a8      	mov	r8, r5
 8011084:	e7a2      	b.n	8010fcc <_vfiprintf_r+0x44>
 8011086:	4a44      	ldr	r2, [pc, #272]	; (8011198 <_vfiprintf_r+0x210>)
 8011088:	1a80      	subs	r0, r0, r2
 801108a:	fa0b f000 	lsl.w	r0, fp, r0
 801108e:	4318      	orrs	r0, r3
 8011090:	9004      	str	r0, [sp, #16]
 8011092:	4645      	mov	r5, r8
 8011094:	e7be      	b.n	8011014 <_vfiprintf_r+0x8c>
 8011096:	9a03      	ldr	r2, [sp, #12]
 8011098:	1d11      	adds	r1, r2, #4
 801109a:	6812      	ldr	r2, [r2, #0]
 801109c:	9103      	str	r1, [sp, #12]
 801109e:	2a00      	cmp	r2, #0
 80110a0:	db01      	blt.n	80110a6 <_vfiprintf_r+0x11e>
 80110a2:	9207      	str	r2, [sp, #28]
 80110a4:	e004      	b.n	80110b0 <_vfiprintf_r+0x128>
 80110a6:	4252      	negs	r2, r2
 80110a8:	f043 0302 	orr.w	r3, r3, #2
 80110ac:	9207      	str	r2, [sp, #28]
 80110ae:	9304      	str	r3, [sp, #16]
 80110b0:	f898 3000 	ldrb.w	r3, [r8]
 80110b4:	2b2e      	cmp	r3, #46	; 0x2e
 80110b6:	d10e      	bne.n	80110d6 <_vfiprintf_r+0x14e>
 80110b8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80110bc:	2b2a      	cmp	r3, #42	; 0x2a
 80110be:	d138      	bne.n	8011132 <_vfiprintf_r+0x1aa>
 80110c0:	9b03      	ldr	r3, [sp, #12]
 80110c2:	1d1a      	adds	r2, r3, #4
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	9203      	str	r2, [sp, #12]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	bfb8      	it	lt
 80110cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80110d0:	f108 0802 	add.w	r8, r8, #2
 80110d4:	9305      	str	r3, [sp, #20]
 80110d6:	4d33      	ldr	r5, [pc, #204]	; (80111a4 <_vfiprintf_r+0x21c>)
 80110d8:	f898 1000 	ldrb.w	r1, [r8]
 80110dc:	2203      	movs	r2, #3
 80110de:	4628      	mov	r0, r5
 80110e0:	f7ef f866 	bl	80001b0 <memchr>
 80110e4:	b140      	cbz	r0, 80110f8 <_vfiprintf_r+0x170>
 80110e6:	2340      	movs	r3, #64	; 0x40
 80110e8:	1b40      	subs	r0, r0, r5
 80110ea:	fa03 f000 	lsl.w	r0, r3, r0
 80110ee:	9b04      	ldr	r3, [sp, #16]
 80110f0:	4303      	orrs	r3, r0
 80110f2:	f108 0801 	add.w	r8, r8, #1
 80110f6:	9304      	str	r3, [sp, #16]
 80110f8:	f898 1000 	ldrb.w	r1, [r8]
 80110fc:	482a      	ldr	r0, [pc, #168]	; (80111a8 <_vfiprintf_r+0x220>)
 80110fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011102:	2206      	movs	r2, #6
 8011104:	f108 0701 	add.w	r7, r8, #1
 8011108:	f7ef f852 	bl	80001b0 <memchr>
 801110c:	2800      	cmp	r0, #0
 801110e:	d037      	beq.n	8011180 <_vfiprintf_r+0x1f8>
 8011110:	4b26      	ldr	r3, [pc, #152]	; (80111ac <_vfiprintf_r+0x224>)
 8011112:	bb1b      	cbnz	r3, 801115c <_vfiprintf_r+0x1d4>
 8011114:	9b03      	ldr	r3, [sp, #12]
 8011116:	3307      	adds	r3, #7
 8011118:	f023 0307 	bic.w	r3, r3, #7
 801111c:	3308      	adds	r3, #8
 801111e:	9303      	str	r3, [sp, #12]
 8011120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011122:	444b      	add	r3, r9
 8011124:	9309      	str	r3, [sp, #36]	; 0x24
 8011126:	e750      	b.n	8010fca <_vfiprintf_r+0x42>
 8011128:	fb05 3202 	mla	r2, r5, r2, r3
 801112c:	2001      	movs	r0, #1
 801112e:	4688      	mov	r8, r1
 8011130:	e78a      	b.n	8011048 <_vfiprintf_r+0xc0>
 8011132:	2300      	movs	r3, #0
 8011134:	f108 0801 	add.w	r8, r8, #1
 8011138:	9305      	str	r3, [sp, #20]
 801113a:	4619      	mov	r1, r3
 801113c:	250a      	movs	r5, #10
 801113e:	4640      	mov	r0, r8
 8011140:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011144:	3a30      	subs	r2, #48	; 0x30
 8011146:	2a09      	cmp	r2, #9
 8011148:	d903      	bls.n	8011152 <_vfiprintf_r+0x1ca>
 801114a:	2b00      	cmp	r3, #0
 801114c:	d0c3      	beq.n	80110d6 <_vfiprintf_r+0x14e>
 801114e:	9105      	str	r1, [sp, #20]
 8011150:	e7c1      	b.n	80110d6 <_vfiprintf_r+0x14e>
 8011152:	fb05 2101 	mla	r1, r5, r1, r2
 8011156:	2301      	movs	r3, #1
 8011158:	4680      	mov	r8, r0
 801115a:	e7f0      	b.n	801113e <_vfiprintf_r+0x1b6>
 801115c:	ab03      	add	r3, sp, #12
 801115e:	9300      	str	r3, [sp, #0]
 8011160:	4622      	mov	r2, r4
 8011162:	4b13      	ldr	r3, [pc, #76]	; (80111b0 <_vfiprintf_r+0x228>)
 8011164:	a904      	add	r1, sp, #16
 8011166:	4630      	mov	r0, r6
 8011168:	f3af 8000 	nop.w
 801116c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011170:	4681      	mov	r9, r0
 8011172:	d1d5      	bne.n	8011120 <_vfiprintf_r+0x198>
 8011174:	89a3      	ldrh	r3, [r4, #12]
 8011176:	065b      	lsls	r3, r3, #25
 8011178:	f53f af7e 	bmi.w	8011078 <_vfiprintf_r+0xf0>
 801117c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801117e:	e77d      	b.n	801107c <_vfiprintf_r+0xf4>
 8011180:	ab03      	add	r3, sp, #12
 8011182:	9300      	str	r3, [sp, #0]
 8011184:	4622      	mov	r2, r4
 8011186:	4b0a      	ldr	r3, [pc, #40]	; (80111b0 <_vfiprintf_r+0x228>)
 8011188:	a904      	add	r1, sp, #16
 801118a:	4630      	mov	r0, r6
 801118c:	f000 f888 	bl	80112a0 <_printf_i>
 8011190:	e7ec      	b.n	801116c <_vfiprintf_r+0x1e4>
 8011192:	bf00      	nop
 8011194:	080129ec 	.word	0x080129ec
 8011198:	08012a2c 	.word	0x08012a2c
 801119c:	08012a0c 	.word	0x08012a0c
 80111a0:	080129cc 	.word	0x080129cc
 80111a4:	08012a32 	.word	0x08012a32
 80111a8:	08012a36 	.word	0x08012a36
 80111ac:	00000000 	.word	0x00000000
 80111b0:	08010f63 	.word	0x08010f63

080111b4 <_printf_common>:
 80111b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111b8:	4691      	mov	r9, r2
 80111ba:	461f      	mov	r7, r3
 80111bc:	688a      	ldr	r2, [r1, #8]
 80111be:	690b      	ldr	r3, [r1, #16]
 80111c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80111c4:	4293      	cmp	r3, r2
 80111c6:	bfb8      	it	lt
 80111c8:	4613      	movlt	r3, r2
 80111ca:	f8c9 3000 	str.w	r3, [r9]
 80111ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80111d2:	4606      	mov	r6, r0
 80111d4:	460c      	mov	r4, r1
 80111d6:	b112      	cbz	r2, 80111de <_printf_common+0x2a>
 80111d8:	3301      	adds	r3, #1
 80111da:	f8c9 3000 	str.w	r3, [r9]
 80111de:	6823      	ldr	r3, [r4, #0]
 80111e0:	0699      	lsls	r1, r3, #26
 80111e2:	bf42      	ittt	mi
 80111e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80111e8:	3302      	addmi	r3, #2
 80111ea:	f8c9 3000 	strmi.w	r3, [r9]
 80111ee:	6825      	ldr	r5, [r4, #0]
 80111f0:	f015 0506 	ands.w	r5, r5, #6
 80111f4:	d107      	bne.n	8011206 <_printf_common+0x52>
 80111f6:	f104 0a19 	add.w	sl, r4, #25
 80111fa:	68e3      	ldr	r3, [r4, #12]
 80111fc:	f8d9 2000 	ldr.w	r2, [r9]
 8011200:	1a9b      	subs	r3, r3, r2
 8011202:	42ab      	cmp	r3, r5
 8011204:	dc28      	bgt.n	8011258 <_printf_common+0xa4>
 8011206:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801120a:	6822      	ldr	r2, [r4, #0]
 801120c:	3300      	adds	r3, #0
 801120e:	bf18      	it	ne
 8011210:	2301      	movne	r3, #1
 8011212:	0692      	lsls	r2, r2, #26
 8011214:	d42d      	bmi.n	8011272 <_printf_common+0xbe>
 8011216:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801121a:	4639      	mov	r1, r7
 801121c:	4630      	mov	r0, r6
 801121e:	47c0      	blx	r8
 8011220:	3001      	adds	r0, #1
 8011222:	d020      	beq.n	8011266 <_printf_common+0xb2>
 8011224:	6823      	ldr	r3, [r4, #0]
 8011226:	68e5      	ldr	r5, [r4, #12]
 8011228:	f8d9 2000 	ldr.w	r2, [r9]
 801122c:	f003 0306 	and.w	r3, r3, #6
 8011230:	2b04      	cmp	r3, #4
 8011232:	bf08      	it	eq
 8011234:	1aad      	subeq	r5, r5, r2
 8011236:	68a3      	ldr	r3, [r4, #8]
 8011238:	6922      	ldr	r2, [r4, #16]
 801123a:	bf0c      	ite	eq
 801123c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011240:	2500      	movne	r5, #0
 8011242:	4293      	cmp	r3, r2
 8011244:	bfc4      	itt	gt
 8011246:	1a9b      	subgt	r3, r3, r2
 8011248:	18ed      	addgt	r5, r5, r3
 801124a:	f04f 0900 	mov.w	r9, #0
 801124e:	341a      	adds	r4, #26
 8011250:	454d      	cmp	r5, r9
 8011252:	d11a      	bne.n	801128a <_printf_common+0xd6>
 8011254:	2000      	movs	r0, #0
 8011256:	e008      	b.n	801126a <_printf_common+0xb6>
 8011258:	2301      	movs	r3, #1
 801125a:	4652      	mov	r2, sl
 801125c:	4639      	mov	r1, r7
 801125e:	4630      	mov	r0, r6
 8011260:	47c0      	blx	r8
 8011262:	3001      	adds	r0, #1
 8011264:	d103      	bne.n	801126e <_printf_common+0xba>
 8011266:	f04f 30ff 	mov.w	r0, #4294967295
 801126a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801126e:	3501      	adds	r5, #1
 8011270:	e7c3      	b.n	80111fa <_printf_common+0x46>
 8011272:	18e1      	adds	r1, r4, r3
 8011274:	1c5a      	adds	r2, r3, #1
 8011276:	2030      	movs	r0, #48	; 0x30
 8011278:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801127c:	4422      	add	r2, r4
 801127e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011282:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011286:	3302      	adds	r3, #2
 8011288:	e7c5      	b.n	8011216 <_printf_common+0x62>
 801128a:	2301      	movs	r3, #1
 801128c:	4622      	mov	r2, r4
 801128e:	4639      	mov	r1, r7
 8011290:	4630      	mov	r0, r6
 8011292:	47c0      	blx	r8
 8011294:	3001      	adds	r0, #1
 8011296:	d0e6      	beq.n	8011266 <_printf_common+0xb2>
 8011298:	f109 0901 	add.w	r9, r9, #1
 801129c:	e7d8      	b.n	8011250 <_printf_common+0x9c>
	...

080112a0 <_printf_i>:
 80112a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80112a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80112a8:	460c      	mov	r4, r1
 80112aa:	7e09      	ldrb	r1, [r1, #24]
 80112ac:	b085      	sub	sp, #20
 80112ae:	296e      	cmp	r1, #110	; 0x6e
 80112b0:	4617      	mov	r7, r2
 80112b2:	4606      	mov	r6, r0
 80112b4:	4698      	mov	r8, r3
 80112b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80112b8:	f000 80b3 	beq.w	8011422 <_printf_i+0x182>
 80112bc:	d822      	bhi.n	8011304 <_printf_i+0x64>
 80112be:	2963      	cmp	r1, #99	; 0x63
 80112c0:	d036      	beq.n	8011330 <_printf_i+0x90>
 80112c2:	d80a      	bhi.n	80112da <_printf_i+0x3a>
 80112c4:	2900      	cmp	r1, #0
 80112c6:	f000 80b9 	beq.w	801143c <_printf_i+0x19c>
 80112ca:	2958      	cmp	r1, #88	; 0x58
 80112cc:	f000 8083 	beq.w	80113d6 <_printf_i+0x136>
 80112d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80112d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80112d8:	e032      	b.n	8011340 <_printf_i+0xa0>
 80112da:	2964      	cmp	r1, #100	; 0x64
 80112dc:	d001      	beq.n	80112e2 <_printf_i+0x42>
 80112de:	2969      	cmp	r1, #105	; 0x69
 80112e0:	d1f6      	bne.n	80112d0 <_printf_i+0x30>
 80112e2:	6820      	ldr	r0, [r4, #0]
 80112e4:	6813      	ldr	r3, [r2, #0]
 80112e6:	0605      	lsls	r5, r0, #24
 80112e8:	f103 0104 	add.w	r1, r3, #4
 80112ec:	d52a      	bpl.n	8011344 <_printf_i+0xa4>
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	6011      	str	r1, [r2, #0]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	da03      	bge.n	80112fe <_printf_i+0x5e>
 80112f6:	222d      	movs	r2, #45	; 0x2d
 80112f8:	425b      	negs	r3, r3
 80112fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80112fe:	486f      	ldr	r0, [pc, #444]	; (80114bc <_printf_i+0x21c>)
 8011300:	220a      	movs	r2, #10
 8011302:	e039      	b.n	8011378 <_printf_i+0xd8>
 8011304:	2973      	cmp	r1, #115	; 0x73
 8011306:	f000 809d 	beq.w	8011444 <_printf_i+0x1a4>
 801130a:	d808      	bhi.n	801131e <_printf_i+0x7e>
 801130c:	296f      	cmp	r1, #111	; 0x6f
 801130e:	d020      	beq.n	8011352 <_printf_i+0xb2>
 8011310:	2970      	cmp	r1, #112	; 0x70
 8011312:	d1dd      	bne.n	80112d0 <_printf_i+0x30>
 8011314:	6823      	ldr	r3, [r4, #0]
 8011316:	f043 0320 	orr.w	r3, r3, #32
 801131a:	6023      	str	r3, [r4, #0]
 801131c:	e003      	b.n	8011326 <_printf_i+0x86>
 801131e:	2975      	cmp	r1, #117	; 0x75
 8011320:	d017      	beq.n	8011352 <_printf_i+0xb2>
 8011322:	2978      	cmp	r1, #120	; 0x78
 8011324:	d1d4      	bne.n	80112d0 <_printf_i+0x30>
 8011326:	2378      	movs	r3, #120	; 0x78
 8011328:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801132c:	4864      	ldr	r0, [pc, #400]	; (80114c0 <_printf_i+0x220>)
 801132e:	e055      	b.n	80113dc <_printf_i+0x13c>
 8011330:	6813      	ldr	r3, [r2, #0]
 8011332:	1d19      	adds	r1, r3, #4
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	6011      	str	r1, [r2, #0]
 8011338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801133c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011340:	2301      	movs	r3, #1
 8011342:	e08c      	b.n	801145e <_printf_i+0x1be>
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	6011      	str	r1, [r2, #0]
 8011348:	f010 0f40 	tst.w	r0, #64	; 0x40
 801134c:	bf18      	it	ne
 801134e:	b21b      	sxthne	r3, r3
 8011350:	e7cf      	b.n	80112f2 <_printf_i+0x52>
 8011352:	6813      	ldr	r3, [r2, #0]
 8011354:	6825      	ldr	r5, [r4, #0]
 8011356:	1d18      	adds	r0, r3, #4
 8011358:	6010      	str	r0, [r2, #0]
 801135a:	0628      	lsls	r0, r5, #24
 801135c:	d501      	bpl.n	8011362 <_printf_i+0xc2>
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	e002      	b.n	8011368 <_printf_i+0xc8>
 8011362:	0668      	lsls	r0, r5, #25
 8011364:	d5fb      	bpl.n	801135e <_printf_i+0xbe>
 8011366:	881b      	ldrh	r3, [r3, #0]
 8011368:	4854      	ldr	r0, [pc, #336]	; (80114bc <_printf_i+0x21c>)
 801136a:	296f      	cmp	r1, #111	; 0x6f
 801136c:	bf14      	ite	ne
 801136e:	220a      	movne	r2, #10
 8011370:	2208      	moveq	r2, #8
 8011372:	2100      	movs	r1, #0
 8011374:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011378:	6865      	ldr	r5, [r4, #4]
 801137a:	60a5      	str	r5, [r4, #8]
 801137c:	2d00      	cmp	r5, #0
 801137e:	f2c0 8095 	blt.w	80114ac <_printf_i+0x20c>
 8011382:	6821      	ldr	r1, [r4, #0]
 8011384:	f021 0104 	bic.w	r1, r1, #4
 8011388:	6021      	str	r1, [r4, #0]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d13d      	bne.n	801140a <_printf_i+0x16a>
 801138e:	2d00      	cmp	r5, #0
 8011390:	f040 808e 	bne.w	80114b0 <_printf_i+0x210>
 8011394:	4665      	mov	r5, ip
 8011396:	2a08      	cmp	r2, #8
 8011398:	d10b      	bne.n	80113b2 <_printf_i+0x112>
 801139a:	6823      	ldr	r3, [r4, #0]
 801139c:	07db      	lsls	r3, r3, #31
 801139e:	d508      	bpl.n	80113b2 <_printf_i+0x112>
 80113a0:	6923      	ldr	r3, [r4, #16]
 80113a2:	6862      	ldr	r2, [r4, #4]
 80113a4:	429a      	cmp	r2, r3
 80113a6:	bfde      	ittt	le
 80113a8:	2330      	movle	r3, #48	; 0x30
 80113aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80113ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80113b2:	ebac 0305 	sub.w	r3, ip, r5
 80113b6:	6123      	str	r3, [r4, #16]
 80113b8:	f8cd 8000 	str.w	r8, [sp]
 80113bc:	463b      	mov	r3, r7
 80113be:	aa03      	add	r2, sp, #12
 80113c0:	4621      	mov	r1, r4
 80113c2:	4630      	mov	r0, r6
 80113c4:	f7ff fef6 	bl	80111b4 <_printf_common>
 80113c8:	3001      	adds	r0, #1
 80113ca:	d14d      	bne.n	8011468 <_printf_i+0x1c8>
 80113cc:	f04f 30ff 	mov.w	r0, #4294967295
 80113d0:	b005      	add	sp, #20
 80113d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113d6:	4839      	ldr	r0, [pc, #228]	; (80114bc <_printf_i+0x21c>)
 80113d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80113dc:	6813      	ldr	r3, [r2, #0]
 80113de:	6821      	ldr	r1, [r4, #0]
 80113e0:	1d1d      	adds	r5, r3, #4
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	6015      	str	r5, [r2, #0]
 80113e6:	060a      	lsls	r2, r1, #24
 80113e8:	d50b      	bpl.n	8011402 <_printf_i+0x162>
 80113ea:	07ca      	lsls	r2, r1, #31
 80113ec:	bf44      	itt	mi
 80113ee:	f041 0120 	orrmi.w	r1, r1, #32
 80113f2:	6021      	strmi	r1, [r4, #0]
 80113f4:	b91b      	cbnz	r3, 80113fe <_printf_i+0x15e>
 80113f6:	6822      	ldr	r2, [r4, #0]
 80113f8:	f022 0220 	bic.w	r2, r2, #32
 80113fc:	6022      	str	r2, [r4, #0]
 80113fe:	2210      	movs	r2, #16
 8011400:	e7b7      	b.n	8011372 <_printf_i+0xd2>
 8011402:	064d      	lsls	r5, r1, #25
 8011404:	bf48      	it	mi
 8011406:	b29b      	uxthmi	r3, r3
 8011408:	e7ef      	b.n	80113ea <_printf_i+0x14a>
 801140a:	4665      	mov	r5, ip
 801140c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011410:	fb02 3311 	mls	r3, r2, r1, r3
 8011414:	5cc3      	ldrb	r3, [r0, r3]
 8011416:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801141a:	460b      	mov	r3, r1
 801141c:	2900      	cmp	r1, #0
 801141e:	d1f5      	bne.n	801140c <_printf_i+0x16c>
 8011420:	e7b9      	b.n	8011396 <_printf_i+0xf6>
 8011422:	6813      	ldr	r3, [r2, #0]
 8011424:	6825      	ldr	r5, [r4, #0]
 8011426:	6961      	ldr	r1, [r4, #20]
 8011428:	1d18      	adds	r0, r3, #4
 801142a:	6010      	str	r0, [r2, #0]
 801142c:	0628      	lsls	r0, r5, #24
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	d501      	bpl.n	8011436 <_printf_i+0x196>
 8011432:	6019      	str	r1, [r3, #0]
 8011434:	e002      	b.n	801143c <_printf_i+0x19c>
 8011436:	066a      	lsls	r2, r5, #25
 8011438:	d5fb      	bpl.n	8011432 <_printf_i+0x192>
 801143a:	8019      	strh	r1, [r3, #0]
 801143c:	2300      	movs	r3, #0
 801143e:	6123      	str	r3, [r4, #16]
 8011440:	4665      	mov	r5, ip
 8011442:	e7b9      	b.n	80113b8 <_printf_i+0x118>
 8011444:	6813      	ldr	r3, [r2, #0]
 8011446:	1d19      	adds	r1, r3, #4
 8011448:	6011      	str	r1, [r2, #0]
 801144a:	681d      	ldr	r5, [r3, #0]
 801144c:	6862      	ldr	r2, [r4, #4]
 801144e:	2100      	movs	r1, #0
 8011450:	4628      	mov	r0, r5
 8011452:	f7ee fead 	bl	80001b0 <memchr>
 8011456:	b108      	cbz	r0, 801145c <_printf_i+0x1bc>
 8011458:	1b40      	subs	r0, r0, r5
 801145a:	6060      	str	r0, [r4, #4]
 801145c:	6863      	ldr	r3, [r4, #4]
 801145e:	6123      	str	r3, [r4, #16]
 8011460:	2300      	movs	r3, #0
 8011462:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011466:	e7a7      	b.n	80113b8 <_printf_i+0x118>
 8011468:	6923      	ldr	r3, [r4, #16]
 801146a:	462a      	mov	r2, r5
 801146c:	4639      	mov	r1, r7
 801146e:	4630      	mov	r0, r6
 8011470:	47c0      	blx	r8
 8011472:	3001      	adds	r0, #1
 8011474:	d0aa      	beq.n	80113cc <_printf_i+0x12c>
 8011476:	6823      	ldr	r3, [r4, #0]
 8011478:	079b      	lsls	r3, r3, #30
 801147a:	d413      	bmi.n	80114a4 <_printf_i+0x204>
 801147c:	68e0      	ldr	r0, [r4, #12]
 801147e:	9b03      	ldr	r3, [sp, #12]
 8011480:	4298      	cmp	r0, r3
 8011482:	bfb8      	it	lt
 8011484:	4618      	movlt	r0, r3
 8011486:	e7a3      	b.n	80113d0 <_printf_i+0x130>
 8011488:	2301      	movs	r3, #1
 801148a:	464a      	mov	r2, r9
 801148c:	4639      	mov	r1, r7
 801148e:	4630      	mov	r0, r6
 8011490:	47c0      	blx	r8
 8011492:	3001      	adds	r0, #1
 8011494:	d09a      	beq.n	80113cc <_printf_i+0x12c>
 8011496:	3501      	adds	r5, #1
 8011498:	68e3      	ldr	r3, [r4, #12]
 801149a:	9a03      	ldr	r2, [sp, #12]
 801149c:	1a9b      	subs	r3, r3, r2
 801149e:	42ab      	cmp	r3, r5
 80114a0:	dcf2      	bgt.n	8011488 <_printf_i+0x1e8>
 80114a2:	e7eb      	b.n	801147c <_printf_i+0x1dc>
 80114a4:	2500      	movs	r5, #0
 80114a6:	f104 0919 	add.w	r9, r4, #25
 80114aa:	e7f5      	b.n	8011498 <_printf_i+0x1f8>
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d1ac      	bne.n	801140a <_printf_i+0x16a>
 80114b0:	7803      	ldrb	r3, [r0, #0]
 80114b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80114b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80114ba:	e76c      	b.n	8011396 <_printf_i+0xf6>
 80114bc:	08012a3d 	.word	0x08012a3d
 80114c0:	08012a4e 	.word	0x08012a4e

080114c4 <_sbrk_r>:
 80114c4:	b538      	push	{r3, r4, r5, lr}
 80114c6:	4c06      	ldr	r4, [pc, #24]	; (80114e0 <_sbrk_r+0x1c>)
 80114c8:	2300      	movs	r3, #0
 80114ca:	4605      	mov	r5, r0
 80114cc:	4608      	mov	r0, r1
 80114ce:	6023      	str	r3, [r4, #0]
 80114d0:	f7f1 fa6c 	bl	80029ac <_sbrk>
 80114d4:	1c43      	adds	r3, r0, #1
 80114d6:	d102      	bne.n	80114de <_sbrk_r+0x1a>
 80114d8:	6823      	ldr	r3, [r4, #0]
 80114da:	b103      	cbz	r3, 80114de <_sbrk_r+0x1a>
 80114dc:	602b      	str	r3, [r5, #0]
 80114de:	bd38      	pop	{r3, r4, r5, pc}
 80114e0:	20006d98 	.word	0x20006d98

080114e4 <__sread>:
 80114e4:	b510      	push	{r4, lr}
 80114e6:	460c      	mov	r4, r1
 80114e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114ec:	f000 f8d6 	bl	801169c <_read_r>
 80114f0:	2800      	cmp	r0, #0
 80114f2:	bfab      	itete	ge
 80114f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80114f6:	89a3      	ldrhlt	r3, [r4, #12]
 80114f8:	181b      	addge	r3, r3, r0
 80114fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80114fe:	bfac      	ite	ge
 8011500:	6563      	strge	r3, [r4, #84]	; 0x54
 8011502:	81a3      	strhlt	r3, [r4, #12]
 8011504:	bd10      	pop	{r4, pc}

08011506 <__swrite>:
 8011506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801150a:	461f      	mov	r7, r3
 801150c:	898b      	ldrh	r3, [r1, #12]
 801150e:	05db      	lsls	r3, r3, #23
 8011510:	4605      	mov	r5, r0
 8011512:	460c      	mov	r4, r1
 8011514:	4616      	mov	r6, r2
 8011516:	d505      	bpl.n	8011524 <__swrite+0x1e>
 8011518:	2302      	movs	r3, #2
 801151a:	2200      	movs	r2, #0
 801151c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011520:	f000 f868 	bl	80115f4 <_lseek_r>
 8011524:	89a3      	ldrh	r3, [r4, #12]
 8011526:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801152a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801152e:	81a3      	strh	r3, [r4, #12]
 8011530:	4632      	mov	r2, r6
 8011532:	463b      	mov	r3, r7
 8011534:	4628      	mov	r0, r5
 8011536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801153a:	f000 b817 	b.w	801156c <_write_r>

0801153e <__sseek>:
 801153e:	b510      	push	{r4, lr}
 8011540:	460c      	mov	r4, r1
 8011542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011546:	f000 f855 	bl	80115f4 <_lseek_r>
 801154a:	1c43      	adds	r3, r0, #1
 801154c:	89a3      	ldrh	r3, [r4, #12]
 801154e:	bf15      	itete	ne
 8011550:	6560      	strne	r0, [r4, #84]	; 0x54
 8011552:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011556:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801155a:	81a3      	strheq	r3, [r4, #12]
 801155c:	bf18      	it	ne
 801155e:	81a3      	strhne	r3, [r4, #12]
 8011560:	bd10      	pop	{r4, pc}

08011562 <__sclose>:
 8011562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011566:	f000 b813 	b.w	8011590 <_close_r>
	...

0801156c <_write_r>:
 801156c:	b538      	push	{r3, r4, r5, lr}
 801156e:	4c07      	ldr	r4, [pc, #28]	; (801158c <_write_r+0x20>)
 8011570:	4605      	mov	r5, r0
 8011572:	4608      	mov	r0, r1
 8011574:	4611      	mov	r1, r2
 8011576:	2200      	movs	r2, #0
 8011578:	6022      	str	r2, [r4, #0]
 801157a:	461a      	mov	r2, r3
 801157c:	f7f8 f8a2 	bl	80096c4 <_write>
 8011580:	1c43      	adds	r3, r0, #1
 8011582:	d102      	bne.n	801158a <_write_r+0x1e>
 8011584:	6823      	ldr	r3, [r4, #0]
 8011586:	b103      	cbz	r3, 801158a <_write_r+0x1e>
 8011588:	602b      	str	r3, [r5, #0]
 801158a:	bd38      	pop	{r3, r4, r5, pc}
 801158c:	20006d98 	.word	0x20006d98

08011590 <_close_r>:
 8011590:	b538      	push	{r3, r4, r5, lr}
 8011592:	4c06      	ldr	r4, [pc, #24]	; (80115ac <_close_r+0x1c>)
 8011594:	2300      	movs	r3, #0
 8011596:	4605      	mov	r5, r0
 8011598:	4608      	mov	r0, r1
 801159a:	6023      	str	r3, [r4, #0]
 801159c:	f7f1 f9d1 	bl	8002942 <_close>
 80115a0:	1c43      	adds	r3, r0, #1
 80115a2:	d102      	bne.n	80115aa <_close_r+0x1a>
 80115a4:	6823      	ldr	r3, [r4, #0]
 80115a6:	b103      	cbz	r3, 80115aa <_close_r+0x1a>
 80115a8:	602b      	str	r3, [r5, #0]
 80115aa:	bd38      	pop	{r3, r4, r5, pc}
 80115ac:	20006d98 	.word	0x20006d98

080115b0 <_fstat_r>:
 80115b0:	b538      	push	{r3, r4, r5, lr}
 80115b2:	4c07      	ldr	r4, [pc, #28]	; (80115d0 <_fstat_r+0x20>)
 80115b4:	2300      	movs	r3, #0
 80115b6:	4605      	mov	r5, r0
 80115b8:	4608      	mov	r0, r1
 80115ba:	4611      	mov	r1, r2
 80115bc:	6023      	str	r3, [r4, #0]
 80115be:	f7f1 f9cc 	bl	800295a <_fstat>
 80115c2:	1c43      	adds	r3, r0, #1
 80115c4:	d102      	bne.n	80115cc <_fstat_r+0x1c>
 80115c6:	6823      	ldr	r3, [r4, #0]
 80115c8:	b103      	cbz	r3, 80115cc <_fstat_r+0x1c>
 80115ca:	602b      	str	r3, [r5, #0]
 80115cc:	bd38      	pop	{r3, r4, r5, pc}
 80115ce:	bf00      	nop
 80115d0:	20006d98 	.word	0x20006d98

080115d4 <_isatty_r>:
 80115d4:	b538      	push	{r3, r4, r5, lr}
 80115d6:	4c06      	ldr	r4, [pc, #24]	; (80115f0 <_isatty_r+0x1c>)
 80115d8:	2300      	movs	r3, #0
 80115da:	4605      	mov	r5, r0
 80115dc:	4608      	mov	r0, r1
 80115de:	6023      	str	r3, [r4, #0]
 80115e0:	f7f1 f9cb 	bl	800297a <_isatty>
 80115e4:	1c43      	adds	r3, r0, #1
 80115e6:	d102      	bne.n	80115ee <_isatty_r+0x1a>
 80115e8:	6823      	ldr	r3, [r4, #0]
 80115ea:	b103      	cbz	r3, 80115ee <_isatty_r+0x1a>
 80115ec:	602b      	str	r3, [r5, #0]
 80115ee:	bd38      	pop	{r3, r4, r5, pc}
 80115f0:	20006d98 	.word	0x20006d98

080115f4 <_lseek_r>:
 80115f4:	b538      	push	{r3, r4, r5, lr}
 80115f6:	4c07      	ldr	r4, [pc, #28]	; (8011614 <_lseek_r+0x20>)
 80115f8:	4605      	mov	r5, r0
 80115fa:	4608      	mov	r0, r1
 80115fc:	4611      	mov	r1, r2
 80115fe:	2200      	movs	r2, #0
 8011600:	6022      	str	r2, [r4, #0]
 8011602:	461a      	mov	r2, r3
 8011604:	f7f1 f9c4 	bl	8002990 <_lseek>
 8011608:	1c43      	adds	r3, r0, #1
 801160a:	d102      	bne.n	8011612 <_lseek_r+0x1e>
 801160c:	6823      	ldr	r3, [r4, #0]
 801160e:	b103      	cbz	r3, 8011612 <_lseek_r+0x1e>
 8011610:	602b      	str	r3, [r5, #0]
 8011612:	bd38      	pop	{r3, r4, r5, pc}
 8011614:	20006d98 	.word	0x20006d98

08011618 <memmove>:
 8011618:	4288      	cmp	r0, r1
 801161a:	b510      	push	{r4, lr}
 801161c:	eb01 0302 	add.w	r3, r1, r2
 8011620:	d807      	bhi.n	8011632 <memmove+0x1a>
 8011622:	1e42      	subs	r2, r0, #1
 8011624:	4299      	cmp	r1, r3
 8011626:	d00a      	beq.n	801163e <memmove+0x26>
 8011628:	f811 4b01 	ldrb.w	r4, [r1], #1
 801162c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011630:	e7f8      	b.n	8011624 <memmove+0xc>
 8011632:	4283      	cmp	r3, r0
 8011634:	d9f5      	bls.n	8011622 <memmove+0xa>
 8011636:	1881      	adds	r1, r0, r2
 8011638:	1ad2      	subs	r2, r2, r3
 801163a:	42d3      	cmn	r3, r2
 801163c:	d100      	bne.n	8011640 <memmove+0x28>
 801163e:	bd10      	pop	{r4, pc}
 8011640:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011644:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011648:	e7f7      	b.n	801163a <memmove+0x22>

0801164a <__malloc_lock>:
 801164a:	4770      	bx	lr

0801164c <__malloc_unlock>:
 801164c:	4770      	bx	lr

0801164e <_realloc_r>:
 801164e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011650:	4607      	mov	r7, r0
 8011652:	4614      	mov	r4, r2
 8011654:	460e      	mov	r6, r1
 8011656:	b921      	cbnz	r1, 8011662 <_realloc_r+0x14>
 8011658:	4611      	mov	r1, r2
 801165a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801165e:	f7ff babd 	b.w	8010bdc <_malloc_r>
 8011662:	b922      	cbnz	r2, 801166e <_realloc_r+0x20>
 8011664:	f7ff fa6c 	bl	8010b40 <_free_r>
 8011668:	4625      	mov	r5, r4
 801166a:	4628      	mov	r0, r5
 801166c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801166e:	f000 f827 	bl	80116c0 <_malloc_usable_size_r>
 8011672:	42a0      	cmp	r0, r4
 8011674:	d20f      	bcs.n	8011696 <_realloc_r+0x48>
 8011676:	4621      	mov	r1, r4
 8011678:	4638      	mov	r0, r7
 801167a:	f7ff faaf 	bl	8010bdc <_malloc_r>
 801167e:	4605      	mov	r5, r0
 8011680:	2800      	cmp	r0, #0
 8011682:	d0f2      	beq.n	801166a <_realloc_r+0x1c>
 8011684:	4631      	mov	r1, r6
 8011686:	4622      	mov	r2, r4
 8011688:	f7fe febe 	bl	8010408 <memcpy>
 801168c:	4631      	mov	r1, r6
 801168e:	4638      	mov	r0, r7
 8011690:	f7ff fa56 	bl	8010b40 <_free_r>
 8011694:	e7e9      	b.n	801166a <_realloc_r+0x1c>
 8011696:	4635      	mov	r5, r6
 8011698:	e7e7      	b.n	801166a <_realloc_r+0x1c>
	...

0801169c <_read_r>:
 801169c:	b538      	push	{r3, r4, r5, lr}
 801169e:	4c07      	ldr	r4, [pc, #28]	; (80116bc <_read_r+0x20>)
 80116a0:	4605      	mov	r5, r0
 80116a2:	4608      	mov	r0, r1
 80116a4:	4611      	mov	r1, r2
 80116a6:	2200      	movs	r2, #0
 80116a8:	6022      	str	r2, [r4, #0]
 80116aa:	461a      	mov	r2, r3
 80116ac:	f7f1 f92c 	bl	8002908 <_read>
 80116b0:	1c43      	adds	r3, r0, #1
 80116b2:	d102      	bne.n	80116ba <_read_r+0x1e>
 80116b4:	6823      	ldr	r3, [r4, #0]
 80116b6:	b103      	cbz	r3, 80116ba <_read_r+0x1e>
 80116b8:	602b      	str	r3, [r5, #0]
 80116ba:	bd38      	pop	{r3, r4, r5, pc}
 80116bc:	20006d98 	.word	0x20006d98

080116c0 <_malloc_usable_size_r>:
 80116c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116c4:	1f18      	subs	r0, r3, #4
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	bfbc      	itt	lt
 80116ca:	580b      	ldrlt	r3, [r1, r0]
 80116cc:	18c0      	addlt	r0, r0, r3
 80116ce:	4770      	bx	lr

080116d0 <_init>:
 80116d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116d2:	bf00      	nop
 80116d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116d6:	bc08      	pop	{r3}
 80116d8:	469e      	mov	lr, r3
 80116da:	4770      	bx	lr

080116dc <_fini>:
 80116dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116de:	bf00      	nop
 80116e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116e2:	bc08      	pop	{r3}
 80116e4:	469e      	mov	lr, r3
 80116e6:	4770      	bx	lr
