
TEST_BLE_OT_CONC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010700  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000784  08010840  08010840  00020840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010fc4  08010fc4  00020fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010fcc  08010fcc  00020fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010fd0  08010fd0  00020fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000004  08010fd4  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000088  08011058  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000002d  20000124  080110f1  00030124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000154  0801111e  00030154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a0  20000168  0801112f  00030168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005c24  20000208  080111cf  00030208  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005e2c  080111cf  00035e2c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 15 MB_MEM1       000001c4  20030028  20030028  00040000  2**2
                  ALLOC
 16 MB_MEM2       00000a87  200301ec  200301ec  00040000  2**2
                  ALLOC
 17 .debug_info   00056df7  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 000098eb  00000000  00000000  0008702f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003870  00000000  00000000  00090920  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00003418  00000000  00000000  00094190  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  000343d5  00000000  00000000  000975a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   00037ff4  00000000  00000000  000cb97d  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00112ce0  00000000  00000000  00103971  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  00216651  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000f040  00000000  00000000  002166cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000208 	.word	0x20000208
 800015c:	00000000 	.word	0x00000000
 8000160:	08010828 	.word	0x08010828

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000020c 	.word	0x2000020c
 800017c:	08010828 	.word	0x08010828

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b972 	b.w	800054c <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9e08      	ldr	r6, [sp, #32]
 8000286:	4604      	mov	r4, r0
 8000288:	4688      	mov	r8, r1
 800028a:	2b00      	cmp	r3, #0
 800028c:	d14b      	bne.n	8000326 <__udivmoddi4+0xa6>
 800028e:	428a      	cmp	r2, r1
 8000290:	4615      	mov	r5, r2
 8000292:	d967      	bls.n	8000364 <__udivmoddi4+0xe4>
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	b14a      	cbz	r2, 80002ae <__udivmoddi4+0x2e>
 800029a:	f1c2 0720 	rsb	r7, r2, #32
 800029e:	fa01 f302 	lsl.w	r3, r1, r2
 80002a2:	fa20 f707 	lsr.w	r7, r0, r7
 80002a6:	4095      	lsls	r5, r2
 80002a8:	ea47 0803 	orr.w	r8, r7, r3
 80002ac:	4094      	lsls	r4, r2
 80002ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b2:	0c23      	lsrs	r3, r4, #16
 80002b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002b8:	fa1f fc85 	uxth.w	ip, r5
 80002bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002c4:	fb07 f10c 	mul.w	r1, r7, ip
 80002c8:	4299      	cmp	r1, r3
 80002ca:	d909      	bls.n	80002e0 <__udivmoddi4+0x60>
 80002cc:	18eb      	adds	r3, r5, r3
 80002ce:	f107 30ff 	add.w	r0, r7, #4294967295
 80002d2:	f080 811b 	bcs.w	800050c <__udivmoddi4+0x28c>
 80002d6:	4299      	cmp	r1, r3
 80002d8:	f240 8118 	bls.w	800050c <__udivmoddi4+0x28c>
 80002dc:	3f02      	subs	r7, #2
 80002de:	442b      	add	r3, r5
 80002e0:	1a5b      	subs	r3, r3, r1
 80002e2:	b2a4      	uxth	r4, r4
 80002e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002f4:	45a4      	cmp	ip, r4
 80002f6:	d909      	bls.n	800030c <__udivmoddi4+0x8c>
 80002f8:	192c      	adds	r4, r5, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	f080 8107 	bcs.w	8000510 <__udivmoddi4+0x290>
 8000302:	45a4      	cmp	ip, r4
 8000304:	f240 8104 	bls.w	8000510 <__udivmoddi4+0x290>
 8000308:	3802      	subs	r0, #2
 800030a:	442c      	add	r4, r5
 800030c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000310:	eba4 040c 	sub.w	r4, r4, ip
 8000314:	2700      	movs	r7, #0
 8000316:	b11e      	cbz	r6, 8000320 <__udivmoddi4+0xa0>
 8000318:	40d4      	lsrs	r4, r2
 800031a:	2300      	movs	r3, #0
 800031c:	e9c6 4300 	strd	r4, r3, [r6]
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0xbe>
 800032a:	2e00      	cmp	r6, #0
 800032c:	f000 80eb 	beq.w	8000506 <__udivmoddi4+0x286>
 8000330:	2700      	movs	r7, #0
 8000332:	e9c6 0100 	strd	r0, r1, [r6]
 8000336:	4638      	mov	r0, r7
 8000338:	4639      	mov	r1, r7
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f783 	clz	r7, r3
 8000342:	2f00      	cmp	r7, #0
 8000344:	d147      	bne.n	80003d6 <__udivmoddi4+0x156>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0xd0>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80fa 	bhi.w	8000544 <__udivmoddi4+0x2c4>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0303 	sbc.w	r3, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	4698      	mov	r8, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d0e0      	beq.n	8000320 <__udivmoddi4+0xa0>
 800035e:	e9c6 4800 	strd	r4, r8, [r6]
 8000362:	e7dd      	b.n	8000320 <__udivmoddi4+0xa0>
 8000364:	b902      	cbnz	r2, 8000368 <__udivmoddi4+0xe8>
 8000366:	deff      	udf	#255	; 0xff
 8000368:	fab2 f282 	clz	r2, r2
 800036c:	2a00      	cmp	r2, #0
 800036e:	f040 808f 	bne.w	8000490 <__udivmoddi4+0x210>
 8000372:	1b49      	subs	r1, r1, r5
 8000374:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000378:	fa1f f885 	uxth.w	r8, r5
 800037c:	2701      	movs	r7, #1
 800037e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fb0e 111c 	mls	r1, lr, ip, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb08 f10c 	mul.w	r1, r8, ip
 8000390:	4299      	cmp	r1, r3
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x124>
 8000394:	18eb      	adds	r3, r5, r3
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x122>
 800039c:	4299      	cmp	r1, r3
 800039e:	f200 80cd 	bhi.w	800053c <__udivmoddi4+0x2bc>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80003b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x14c>
 80003bc:	192c      	adds	r4, r5, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x14a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80b6 	bhi.w	8000536 <__udivmoddi4+0x2b6>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e79f      	b.n	8000316 <__udivmoddi4+0x96>
 80003d6:	f1c7 0c20 	rsb	ip, r7, #32
 80003da:	40bb      	lsls	r3, r7
 80003dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003e4:	fa01 f407 	lsl.w	r4, r1, r7
 80003e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80003f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003f4:	4325      	orrs	r5, r4
 80003f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003fa:	0c2c      	lsrs	r4, r5, #16
 80003fc:	fb08 3319 	mls	r3, r8, r9, r3
 8000400:	fa1f fa8e 	uxth.w	sl, lr
 8000404:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000408:	fb09 f40a 	mul.w	r4, r9, sl
 800040c:	429c      	cmp	r4, r3
 800040e:	fa02 f207 	lsl.w	r2, r2, r7
 8000412:	fa00 f107 	lsl.w	r1, r0, r7
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b0>
 8000418:	eb1e 0303 	adds.w	r3, lr, r3
 800041c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000420:	f080 8087 	bcs.w	8000532 <__udivmoddi4+0x2b2>
 8000424:	429c      	cmp	r4, r3
 8000426:	f240 8084 	bls.w	8000532 <__udivmoddi4+0x2b2>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4473      	add	r3, lr
 8000430:	1b1b      	subs	r3, r3, r4
 8000432:	b2ad      	uxth	r5, r5
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3310 	mls	r3, r8, r0, r3
 800043c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000440:	fb00 fa0a 	mul.w	sl, r0, sl
 8000444:	45a2      	cmp	sl, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1da>
 8000448:	eb1e 0404 	adds.w	r4, lr, r4
 800044c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000450:	d26b      	bcs.n	800052a <__udivmoddi4+0x2aa>
 8000452:	45a2      	cmp	sl, r4
 8000454:	d969      	bls.n	800052a <__udivmoddi4+0x2aa>
 8000456:	3802      	subs	r0, #2
 8000458:	4474      	add	r4, lr
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	fba0 8902 	umull	r8, r9, r0, r2
 8000462:	eba4 040a 	sub.w	r4, r4, sl
 8000466:	454c      	cmp	r4, r9
 8000468:	46c2      	mov	sl, r8
 800046a:	464b      	mov	r3, r9
 800046c:	d354      	bcc.n	8000518 <__udivmoddi4+0x298>
 800046e:	d051      	beq.n	8000514 <__udivmoddi4+0x294>
 8000470:	2e00      	cmp	r6, #0
 8000472:	d069      	beq.n	8000548 <__udivmoddi4+0x2c8>
 8000474:	ebb1 050a 	subs.w	r5, r1, sl
 8000478:	eb64 0403 	sbc.w	r4, r4, r3
 800047c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000480:	40fd      	lsrs	r5, r7
 8000482:	40fc      	lsrs	r4, r7
 8000484:	ea4c 0505 	orr.w	r5, ip, r5
 8000488:	e9c6 5400 	strd	r5, r4, [r6]
 800048c:	2700      	movs	r7, #0
 800048e:	e747      	b.n	8000320 <__udivmoddi4+0xa0>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f703 	lsr.w	r7, r0, r3
 8000498:	4095      	lsls	r5, r2
 800049a:	fa01 f002 	lsl.w	r0, r1, r2
 800049e:	fa21 f303 	lsr.w	r3, r1, r3
 80004a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a6:	4338      	orrs	r0, r7
 80004a8:	0c01      	lsrs	r1, r0, #16
 80004aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ae:	fa1f f885 	uxth.w	r8, r5
 80004b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ba:	fb07 f308 	mul.w	r3, r7, r8
 80004be:	428b      	cmp	r3, r1
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x256>
 80004c6:	1869      	adds	r1, r5, r1
 80004c8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004cc:	d22f      	bcs.n	800052e <__udivmoddi4+0x2ae>
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d92d      	bls.n	800052e <__udivmoddi4+0x2ae>
 80004d2:	3f02      	subs	r7, #2
 80004d4:	4429      	add	r1, r5
 80004d6:	1acb      	subs	r3, r1, r3
 80004d8:	b281      	uxth	r1, r0
 80004da:	fbb3 f0fe 	udiv	r0, r3, lr
 80004de:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e6:	fb00 f308 	mul.w	r3, r0, r8
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x27e>
 80004ee:	1869      	adds	r1, r5, r1
 80004f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f4:	d217      	bcs.n	8000526 <__udivmoddi4+0x2a6>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d915      	bls.n	8000526 <__udivmoddi4+0x2a6>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4429      	add	r1, r5
 80004fe:	1ac9      	subs	r1, r1, r3
 8000500:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000504:	e73b      	b.n	800037e <__udivmoddi4+0xfe>
 8000506:	4637      	mov	r7, r6
 8000508:	4630      	mov	r0, r6
 800050a:	e709      	b.n	8000320 <__udivmoddi4+0xa0>
 800050c:	4607      	mov	r7, r0
 800050e:	e6e7      	b.n	80002e0 <__udivmoddi4+0x60>
 8000510:	4618      	mov	r0, r3
 8000512:	e6fb      	b.n	800030c <__udivmoddi4+0x8c>
 8000514:	4541      	cmp	r1, r8
 8000516:	d2ab      	bcs.n	8000470 <__udivmoddi4+0x1f0>
 8000518:	ebb8 0a02 	subs.w	sl, r8, r2
 800051c:	eb69 020e 	sbc.w	r2, r9, lr
 8000520:	3801      	subs	r0, #1
 8000522:	4613      	mov	r3, r2
 8000524:	e7a4      	b.n	8000470 <__udivmoddi4+0x1f0>
 8000526:	4660      	mov	r0, ip
 8000528:	e7e9      	b.n	80004fe <__udivmoddi4+0x27e>
 800052a:	4618      	mov	r0, r3
 800052c:	e795      	b.n	800045a <__udivmoddi4+0x1da>
 800052e:	4667      	mov	r7, ip
 8000530:	e7d1      	b.n	80004d6 <__udivmoddi4+0x256>
 8000532:	4681      	mov	r9, r0
 8000534:	e77c      	b.n	8000430 <__udivmoddi4+0x1b0>
 8000536:	3802      	subs	r0, #2
 8000538:	442c      	add	r4, r5
 800053a:	e747      	b.n	80003cc <__udivmoddi4+0x14c>
 800053c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000540:	442b      	add	r3, r5
 8000542:	e72f      	b.n	80003a4 <__udivmoddi4+0x124>
 8000544:	4638      	mov	r0, r7
 8000546:	e708      	b.n	800035a <__udivmoddi4+0xda>
 8000548:	4637      	mov	r7, r6
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0xa0>

0800054c <__aeabi_idiv0>:
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <LL_C2_PWR_SetPowerMode+0x28>)
 800055a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800055e:	f023 0207 	bic.w	r2, r3, #7
 8000562:	4905      	ldr	r1, [pc, #20]	; (8000578 <LL_C2_PWR_SetPowerMode+0x28>)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4313      	orrs	r3, r2
 8000568:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	58000400 	.word	0x58000400

0800057c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000586:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800058a:	4905      	ldr	r1, [pc, #20]	; (80005a0 <LL_EXTI_EnableIT_32_63+0x24>)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4313      	orrs	r3, r2
 8000590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	58000800 	.word	0x58000800

080005a4 <LL_C2_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 80005ae:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80005b2:	4905      	ldr	r1, [pc, #20]	; (80005c8 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4313      	orrs	r3, r2
 80005b8:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	58000800 	.word	0x58000800

080005cc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80005d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80005de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	608b      	str	r3, [r1, #8]
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <APPE_Init>:
static void displayConcurrentMode(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80005f8:	f000 f82e 	bl	8000658 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80005fc:	4907      	ldr	r1, [pc, #28]	; (800061c <APPE_Init+0x28>)
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 fe28 	bl	8001254 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  /* initialize debugger module if supported and debug trace if activated */
  Init_Debug();
 8000604:	f000 f818 	bl	8000638 <Init_Debug>

  //TODO: remove displayConcurrentMode() call since just used for debugging
  /* Display Dynamic concurrent mode (BLE and Thread)  */
  displayConcurrentMode();
 8000608:	f000 f80a 	bl	8000620 <displayConcurrentMode>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 800060c:	2101      	movs	r1, #1
 800060e:	2001      	movs	r0, #1
 8000610:	f00e ff4e 	bl	800f4b0 <UTIL_LPM_SetOffMode>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000614:	f000 f82e 	bl	8000674 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000618:	bf00      	nop
}
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20005b7c 	.word	0x20005b7c

08000620 <displayConcurrentMode>:
/* USER CODE BEGIN FD */
//TODO: remove function
static void displayConcurrentMode()
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
    APP_DBG("Dynamic Concurrent Mode BLE/OpenThread starting...");
 8000624:	4a03      	ldr	r2, [pc, #12]	; (8000634 <displayConcurrentMode+0x14>)
 8000626:	2101      	movs	r1, #1
 8000628:	2000      	movs	r0, #0
 800062a:	f001 fc9b 	bl	8001f64 <logApplication>
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	08010858 	.word	0x08010858

08000638 <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug( void )
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 800063c:	f002 f82c 	bl	8002698 <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000640:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000644:	f7ff ff9a 	bl	800057c <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000648:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800064c:	f7ff ffaa 	bl	80005a4 <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000650:	f008 ff7a 	bl	8009548 <DbgTraceInit>
#endif

  return;
 8000654:	bf00      	nop
}
 8000656:	bd80      	pop	{r7, pc}

08000658 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800065c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000660:	f7ff ffb4 	bl	80005cc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000664:	f00e ff12 	bl	800f48c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000668:	2004      	movs	r0, #4
 800066a:	f7ff ff71 	bl	8000550 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800066e:	bf00      	nop
}
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800067a:	f008 f8dd 	bl	8008838 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 800067e:	2000      	movs	r0, #0
 8000680:	f009 fef6 	bl	800a470 <osMutexNew>
 8000684:	4602      	mov	r2, r0
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <appe_Tl_Init+0x70>)
 8000688:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	2001      	movs	r0, #1
 8000690:	f00a f836 	bl	800a700 <osSemaphoreNew>
 8000694:	4602      	mov	r2, r0
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <appe_Tl_Init+0x74>)
 8000698:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 800069a:	4a14      	ldr	r2, [pc, #80]	; (80006ec <appe_Tl_Init+0x78>)
 800069c:	2100      	movs	r1, #0
 800069e:	4814      	ldr	r0, [pc, #80]	; (80006f0 <appe_Tl_Init+0x7c>)
 80006a0:	f009 fd1c 	bl	800a0dc <osThreadNew>
 80006a4:	4602      	mov	r2, r0
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <appe_Tl_Init+0x80>)
 80006a8:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <appe_Tl_Init+0x84>)
 80006ac:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <appe_Tl_Init+0x88>)
 80006b0:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80006b2:	463b      	mov	r3, r7
 80006b4:	4619      	mov	r1, r3
 80006b6:	4812      	ldr	r0, [pc, #72]	; (8000700 <appe_Tl_Init+0x8c>)
 80006b8:	f007 ff84 	bl	80085c4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80006c0:	4b10      	ldr	r3, [pc, #64]	; (8000704 <appe_Tl_Init+0x90>)
 80006c2:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80006c4:	4b10      	ldr	r3, [pc, #64]	; (8000708 <appe_Tl_Init+0x94>)
 80006c6:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80006c8:	f240 533c 	movw	r3, #1340	; 0x53c
 80006cc:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	4618      	mov	r0, r3
 80006d4:	f008 fa6a 	bl	8008bac <TL_MM_Init>

  TL_Enable();
 80006d8:	f008 f8a8 	bl	800882c <TL_Enable>

  return;
 80006dc:	bf00      	nop
}
 80006de:	3720      	adds	r7, #32
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20005b5c 	.word	0x20005b5c
 80006e8:	20005b64 	.word	0x20005b64
 80006ec:	08010d6c 	.word	0x08010d6c
 80006f0:	08000831 	.word	0x08000831
 80006f4:	20005b60 	.word	0x20005b60
 80006f8:	20030728 	.word	0x20030728
 80006fc:	0800070d 	.word	0x0800070d
 8000700:	0800074d 	.word	0x0800074d
 8000704:	20030834 	.word	0x20030834
 8000708:	200301ec 	.word	0x200301ec

0800070c <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d002      	beq.n	8000722 <APPE_SysStatusNot+0x16>
 800071c:	2b01      	cmp	r3, #1
 800071e:	d008      	beq.n	8000732 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8000720:	e00d      	b.n	800073e <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <APPE_SysStatusNot+0x3c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f04f 31ff 	mov.w	r1, #4294967295
 800072a:	4618      	mov	r0, r3
 800072c:	f009 ff3a 	bl	800a5a4 <osMutexAcquire>
      break;
 8000730:	e005      	b.n	800073e <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <APPE_SysStatusNot+0x3c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f009 ff92 	bl	800a660 <osMutexRelease>
      break;
 800073c:	bf00      	nop
  }
  return;
 800073e:	bf00      	nop
}
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20005b5c 	.word	0x20005b5c

0800074c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	330b      	adds	r3, #11
 800075a:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	b29b      	uxth	r3, r3
 8000762:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8000766:	d004      	beq.n	8000772 <APPE_SysUserEvtRx+0x26>
 8000768:	f249 2201 	movw	r2, #37377	; 0x9201
 800076c:	4293      	cmp	r3, r2
 800076e:	d003      	beq.n	8000778 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8000770:	e008      	b.n	8000784 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8000772:	f000 f833 	bl	80007dc <APPE_SysEvtReadyProcessing>
         break;
 8000776:	e005      	b.n	8000784 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	789b      	ldrb	r3, [r3, #2]
 800077c:	4618      	mov	r0, r3
 800077e:	f000 f805 	bl	800078c <APPE_SysEvtError>
         break;
 8000782:	bf00      	nop
  }
  return;
 8000784:	bf00      	nop
}
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b7d      	cmp	r3, #125	; 0x7d
 800079a:	d002      	beq.n	80007a2 <APPE_SysEvtError+0x16>
 800079c:	2b7e      	cmp	r3, #126	; 0x7e
 800079e:	d006      	beq.n	80007ae <APPE_SysEvtError+0x22>
 80007a0:	e00b      	b.n	80007ba <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 80007a2:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <APPE_SysEvtError+0x44>)
 80007a4:	2101      	movs	r1, #1
 80007a6:	2000      	movs	r0, #0
 80007a8:	f001 fbdc 	bl	8001f64 <logApplication>
       break;
 80007ac:	e00c      	b.n	80007c8 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 80007ae:	4a09      	ldr	r2, [pc, #36]	; (80007d4 <APPE_SysEvtError+0x48>)
 80007b0:	2101      	movs	r1, #1
 80007b2:	2000      	movs	r0, #0
 80007b4:	f001 fbd6 	bl	8001f64 <logApplication>
       break;
 80007b8:	e006      	b.n	80007c8 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	4a06      	ldr	r2, [pc, #24]	; (80007d8 <APPE_SysEvtError+0x4c>)
 80007be:	2101      	movs	r1, #1
 80007c0:	2000      	movs	r0, #0
 80007c2:	f001 fbcf 	bl	8001f64 <logApplication>
       break;
 80007c6:	bf00      	nop
  }
  return;
 80007c8:	bf00      	nop
}
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	0801088c 	.word	0x0801088c
 80007d4:	080108b0 	.word	0x080108b0
 80007d8:	080108d0 	.word	0x080108d0

080007dc <APPE_SysEvtReadyProcessing>:
//  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
//  return;
//}

static void APPE_SysEvtReadyProcessing( void )
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 80007e0:	f008 fa58 	bl	8008c94 <TL_TRACES_Init>
   * APP_THREAD_Init_Dyn_1() : Thread Stack Init until it's ready to be configured (default channel, PID, etc...)
   * APP_BLE_Init_Dyn_2()    : Start ADV
   * APP_THREAD_Init_Dyn_2() : Thread Stack configuration (default channel, PID, etc...) to be able to start scanning
   *                           or joining a Thread Network
   */
  APP_DBG("1- Initialisation of BLE Stack...");
 80007e4:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <APPE_SysEvtReadyProcessing+0x44>)
 80007e6:	2101      	movs	r1, #1
 80007e8:	2000      	movs	r0, #0
 80007ea:	f001 fbbb 	bl	8001f64 <logApplication>
  APP_BLE_Init_Dyn_1();
 80007ee:	f00d fc29 	bl	800e044 <APP_BLE_Init_Dyn_1>
  APP_DBG("2- Initialisation of OpenThread Stack. FW info :");
 80007f2:	4a0c      	ldr	r2, [pc, #48]	; (8000824 <APPE_SysEvtReadyProcessing+0x48>)
 80007f4:	2101      	movs	r1, #1
 80007f6:	2000      	movs	r0, #0
 80007f8:	f001 fbb4 	bl	8001f64 <logApplication>
  APP_THREAD_Init_Dyn_1();
 80007fc:	f00e f8fc 	bl	800e9f8 <APP_THREAD_Init_Dyn_1>

  APP_DBG("3- Start BLE ADV...");
 8000800:	4a09      	ldr	r2, [pc, #36]	; (8000828 <APPE_SysEvtReadyProcessing+0x4c>)
 8000802:	2101      	movs	r1, #1
 8000804:	2000      	movs	r0, #0
 8000806:	f001 fbad 	bl	8001f64 <logApplication>
  APP_BLE_Init_Dyn_2();
 800080a:	f00d fc81 	bl	800e110 <APP_BLE_Init_Dyn_2>
  APP_DBG("4- Configure OpenThread (Channel, PANID, IPv6 stack, ...) and Start it...");
 800080e:	4a07      	ldr	r2, [pc, #28]	; (800082c <APPE_SysEvtReadyProcessing+0x50>)
 8000810:	2101      	movs	r1, #1
 8000812:	2000      	movs	r0, #0
 8000814:	f001 fba6 	bl	8001f64 <logApplication>
  APP_THREAD_Init_Dyn_2();
 8000818:	f00e f916 	bl	800ea48 <APP_THREAD_Init_Dyn_2>
  /* Thread stack is initialized, low power mode can be enabled */
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
  UTIL_LPM_SetStopMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
#endif

  return;
 800081c:	bf00      	nop
}
 800081e:	bd80      	pop	{r7, pc}
 8000820:	080108f0 	.word	0x080108f0
 8000824:	08010914 	.word	0x08010914
 8000828:	08010948 	.word	0x08010948
 800082c:	0801095c 	.word	0x0801095c

08000830 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000838:	f04f 32ff 	mov.w	r2, #4294967295
 800083c:	2100      	movs	r1, #0
 800083e:	2001      	movs	r0, #1
 8000840:	f009 fd54 	bl	800a2ec <osThreadFlagsWait>
     shci_user_evt_proc();
 8000844:	f007 feda 	bl	80085fc <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000848:	e7f6      	b.n	8000838 <ShciUserEvtProcess+0x8>
	...

0800084c <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <shci_notify_asynch_evt+0x1c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2101      	movs	r1, #1
 800085a:	4618      	mov	r0, r3
 800085c:	f009 fce4 	bl	800a228 <osThreadFlagsSet>
  return;
 8000860:	bf00      	nop
}
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20005b60 	.word	0x20005b60

0800086c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <shci_cmd_resp_release+0x1c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4618      	mov	r0, r3
 800087a:	f00a f845 	bl	800a908 <osSemaphoreRelease>
  return;
 800087e:	bf00      	nop
}
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20005b64 	.word	0x20005b64

0800088c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <shci_cmd_resp_wait+0x20>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f04f 31ff 	mov.w	r1, #4294967295
 800089c:	4618      	mov	r0, r3
 800089e:	f009 ffcd 	bl	800a83c <osSemaphoreAcquire>
  return;
 80008a2:	bf00      	nop
}
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20005b64 	.word	0x20005b64

080008b0 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
#if(CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	330b      	adds	r3, #11
 80008bc:	1c99      	adds	r1, r3, #2
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	7a9b      	ldrb	r3, [r3, #10]
 80008c2:	3b02      	subs	r3, #2
 80008c4:	461a      	mov	r2, r3
 80008c6:	2001      	movs	r0, #1
 80008c8:	f008 fe64 	bl	8009594 <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f008 f9a9 	bl	8008c24 <TL_MM_EvtDone>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	af00      	add	r7, sp, #0
#ifdef CFG_DEBUG_TRACE_UART
  MX_LPUART1_UART_Init();
 80008de:	f001 fcf3 	bl	80022c8 <MX_LPUART1_UART_Init>
  return;
 80008e2:	bf00      	nop
#endif
}
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b084      	sub	sp, #16
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	60f8      	str	r0, [r7, #12]
 80008ee:	460b      	mov	r3, r1
 80008f0:	607a      	str	r2, [r7, #4]
 80008f2:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80008f4:	897a      	ldrh	r2, [r7, #10]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	68f9      	ldr	r1, [r7, #12]
 80008fa:	2002      	movs	r0, #2
 80008fc:	f000 ff98 	bl	8001830 <HW_UART_Transmit_DMA>

  return;
 8000900:	bf00      	nop
}
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800090c:	4a05      	ldr	r2, [pc, #20]	; (8000924 <MX_FREERTOS_Init+0x1c>)
 800090e:	2100      	movs	r1, #0
 8000910:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_FREERTOS_Init+0x20>)
 8000912:	f009 fbe3 	bl	800a0dc <osThreadNew>
 8000916:	4602      	mov	r2, r0
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <MX_FREERTOS_Init+0x24>)
 800091a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  APPE_Init();
 800091c:	f7ff fe6a 	bl	80005f4 <APPE_Init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	08010d90 	.word	0x08010d90
 8000928:	08000931 	.word	0x08000931
 800092c:	20005b68 	.word	0x20005b68

08000930 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000938:	2001      	movs	r0, #1
 800093a:	f009 fd6b 	bl	800a414 <osDelay>
 800093e:	e7fb      	b.n	8000938 <StartDefaultTask+0x8>

08000940 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800094c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800094e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4313      	orrs	r3, r2
 8000956:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800095c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4013      	ands	r3, r2
 8000962:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000964:	68fb      	ldr	r3, [r7, #12]
}
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000976:	2004      	movs	r0, #4
 8000978:	f7ff ffe2 	bl	8000940 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800097c:	2001      	movs	r0, #1
 800097e:	f7ff ffdf 	bl	8000940 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000982:	2002      	movs	r0, #2
 8000984:	f7ff ffdc 	bl	8000940 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2105      	movs	r1, #5
 800098c:	200e      	movs	r0, #14
 800098e:	f001 ffb4 	bl	80028fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000992:	200e      	movs	r0, #14
 8000994:	f001 ffcb 	bl	800292e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2105      	movs	r1, #5
 800099c:	203a      	movs	r0, #58	; 0x3a
 800099e:	f001 ffac 	bl	80028fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80009a2:	203a      	movs	r0, #58	; 0x3a
 80009a4:	f001 ffc3 	bl	800292e <HAL_NVIC_EnableIRQ>

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4013      	ands	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009e4:	68fb      	ldr	r3, [r7, #12]
}
 80009e6:	bf00      	nop
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2004      	movs	r0, #4
 80009f8:	f7ff ffe2 	bl	80009c0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	2001      	movs	r0, #1
 80009fe:	f7ff ffdf 	bl	80009c0 <LL_AHB2_GRP1_EnableClock>

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <LL_EXTI_EnableIT_0_31>:
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <LL_EXTI_EnableIT_0_31+0x24>)
 8000a12:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000a16:	4905      	ldr	r1, [pc, #20]	; (8000a2c <LL_EXTI_EnableIT_0_31+0x24>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	58000800 	.word	0x58000800

08000a30 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4904      	ldr	r1, [pc, #16]	; (8000a50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	600b      	str	r3, [r1, #0]

}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	58000800 	.word	0x58000800

08000a54 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <ReadRtcSsrValue+0x3c>)
 8000a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <ReadRtcSsrValue+0x3c>)
 8000a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000a6a:	e005      	b.n	8000a78 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <ReadRtcSsrValue+0x3c>)
 8000a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d1f5      	bne.n	8000a6c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000a80:	683b      	ldr	r3, [r7, #0]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40002800 	.word	0x40002800

08000a94 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	460a      	mov	r2, r1
 8000a9e:	71fb      	strb	r3, [r7, #7]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000aa4:	79ba      	ldrb	r2, [r7, #6]
 8000aa6:	491d      	ldr	r1, [pc, #116]	; (8000b1c <LinkTimerAfter+0x88>)
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	4413      	add	r3, r2
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	440b      	add	r3, r1
 8000ab2:	3315      	adds	r3, #21
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d009      	beq.n	8000ad2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000abe:	7bfa      	ldrb	r2, [r7, #15]
 8000ac0:	4916      	ldr	r1, [pc, #88]	; (8000b1c <LinkTimerAfter+0x88>)
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	440b      	add	r3, r1
 8000acc:	3314      	adds	r3, #20
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000ad2:	79fa      	ldrb	r2, [r7, #7]
 8000ad4:	4911      	ldr	r1, [pc, #68]	; (8000b1c <LinkTimerAfter+0x88>)
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	4413      	add	r3, r2
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	440b      	add	r3, r1
 8000ae0:	3315      	adds	r3, #21
 8000ae2:	7bfa      	ldrb	r2, [r7, #15]
 8000ae4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000ae6:	79fa      	ldrb	r2, [r7, #7]
 8000ae8:	490c      	ldr	r1, [pc, #48]	; (8000b1c <LinkTimerAfter+0x88>)
 8000aea:	4613      	mov	r3, r2
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	440b      	add	r3, r1
 8000af4:	3314      	adds	r3, #20
 8000af6:	79ba      	ldrb	r2, [r7, #6]
 8000af8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000afa:	79ba      	ldrb	r2, [r7, #6]
 8000afc:	4907      	ldr	r1, [pc, #28]	; (8000b1c <LinkTimerAfter+0x88>)
 8000afe:	4613      	mov	r3, r2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4413      	add	r3, r2
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	440b      	add	r3, r1
 8000b08:	3315      	adds	r3, #21
 8000b0a:	79fa      	ldrb	r2, [r7, #7]
 8000b0c:	701a      	strb	r2, [r3, #0]

  return;
 8000b0e:	bf00      	nop
}
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000088 	.word	0x20000088

08000b20 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	460a      	mov	r2, r1
 8000b2a:	71fb      	strb	r3, [r7, #7]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000b30:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <LinkTimerBefore+0xb8>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	79ba      	ldrb	r2, [r7, #6]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d032      	beq.n	8000ba2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000b3c:	79ba      	ldrb	r2, [r7, #6]
 8000b3e:	4927      	ldr	r1, [pc, #156]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	440b      	add	r3, r1
 8000b4a:	3314      	adds	r3, #20
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000b50:	7bfa      	ldrb	r2, [r7, #15]
 8000b52:	4922      	ldr	r1, [pc, #136]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	440b      	add	r3, r1
 8000b5e:	3315      	adds	r3, #21
 8000b60:	79fa      	ldrb	r2, [r7, #7]
 8000b62:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b64:	79fa      	ldrb	r2, [r7, #7]
 8000b66:	491d      	ldr	r1, [pc, #116]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b68:	4613      	mov	r3, r2
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	4413      	add	r3, r2
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	440b      	add	r3, r1
 8000b72:	3315      	adds	r3, #21
 8000b74:	79ba      	ldrb	r2, [r7, #6]
 8000b76:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b78:	79fa      	ldrb	r2, [r7, #7]
 8000b7a:	4918      	ldr	r1, [pc, #96]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	4413      	add	r3, r2
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	440b      	add	r3, r1
 8000b86:	3314      	adds	r3, #20
 8000b88:	7bfa      	ldrb	r2, [r7, #15]
 8000b8a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b8c:	79ba      	ldrb	r2, [r7, #6]
 8000b8e:	4913      	ldr	r1, [pc, #76]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b90:	4613      	mov	r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	4413      	add	r3, r2
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	440b      	add	r3, r1
 8000b9a:	3314      	adds	r3, #20
 8000b9c:	79fa      	ldrb	r2, [r7, #7]
 8000b9e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000ba0:	e014      	b.n	8000bcc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000ba2:	79fa      	ldrb	r2, [r7, #7]
 8000ba4:	490d      	ldr	r1, [pc, #52]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	4413      	add	r3, r2
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	440b      	add	r3, r1
 8000bb0:	3315      	adds	r3, #21
 8000bb2:	79ba      	ldrb	r2, [r7, #6]
 8000bb4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000bb6:	79ba      	ldrb	r2, [r7, #6]
 8000bb8:	4908      	ldr	r1, [pc, #32]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000bba:	4613      	mov	r3, r2
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	4413      	add	r3, r2
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	440b      	add	r3, r1
 8000bc4:	3314      	adds	r3, #20
 8000bc6:	79fa      	ldrb	r2, [r7, #7]
 8000bc8:	701a      	strb	r2, [r3, #0]
  return;
 8000bca:	bf00      	nop
}
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000118 	.word	0x20000118
 8000bdc:	20000088 	.word	0x20000088

08000be0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bea:	4b4e      	ldr	r3, [pc, #312]	; (8000d24 <linkTimer+0x144>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b06      	cmp	r3, #6
 8000bf2:	d118      	bne.n	8000c26 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000bf4:	4b4b      	ldr	r3, [pc, #300]	; (8000d24 <linkTimer+0x144>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b4b      	ldr	r3, [pc, #300]	; (8000d28 <linkTimer+0x148>)
 8000bfc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000bfe:	4a49      	ldr	r2, [pc, #292]	; (8000d24 <linkTimer+0x144>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000c04:	79fa      	ldrb	r2, [r7, #7]
 8000c06:	4949      	ldr	r1, [pc, #292]	; (8000d2c <linkTimer+0x14c>)
 8000c08:	4613      	mov	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	440b      	add	r3, r1
 8000c12:	3315      	adds	r3, #21
 8000c14:	2206      	movs	r2, #6
 8000c16:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c18:	4b45      	ldr	r3, [pc, #276]	; (8000d30 <linkTimer+0x150>)
 8000c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c1e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	81fb      	strh	r3, [r7, #14]
 8000c24:	e078      	b.n	8000d18 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000c26:	f000 f909 	bl	8000e3c <ReturnTimeElapsed>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000c2e:	79fa      	ldrb	r2, [r7, #7]
 8000c30:	493e      	ldr	r1, [pc, #248]	; (8000d2c <linkTimer+0x14c>)
 8000c32:	4613      	mov	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	4413      	add	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	440b      	add	r3, r1
 8000c3c:	3308      	adds	r3, #8
 8000c3e:	6819      	ldr	r1, [r3, #0]
 8000c40:	89fb      	ldrh	r3, [r7, #14]
 8000c42:	79fa      	ldrb	r2, [r7, #7]
 8000c44:	4419      	add	r1, r3
 8000c46:	4839      	ldr	r0, [pc, #228]	; (8000d2c <linkTimer+0x14c>)
 8000c48:	4613      	mov	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	4403      	add	r3, r0
 8000c52:	3308      	adds	r3, #8
 8000c54:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000c56:	79fa      	ldrb	r2, [r7, #7]
 8000c58:	4934      	ldr	r1, [pc, #208]	; (8000d2c <linkTimer+0x14c>)
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	440b      	add	r3, r1
 8000c64:	3308      	adds	r3, #8
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <linkTimer+0x144>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	4619      	mov	r1, r3
 8000c72:	4a2e      	ldr	r2, [pc, #184]	; (8000d2c <linkTimer+0x14c>)
 8000c74:	460b      	mov	r3, r1
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	440b      	add	r3, r1
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	4413      	add	r3, r2
 8000c7e:	3308      	adds	r3, #8
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d337      	bcc.n	8000cf8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000c88:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <linkTimer+0x144>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000c8e:	7b7a      	ldrb	r2, [r7, #13]
 8000c90:	4926      	ldr	r1, [pc, #152]	; (8000d2c <linkTimer+0x14c>)
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	3315      	adds	r3, #21
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ca2:	e013      	b.n	8000ccc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000ca4:	7b7a      	ldrb	r2, [r7, #13]
 8000ca6:	4921      	ldr	r1, [pc, #132]	; (8000d2c <linkTimer+0x14c>)
 8000ca8:	4613      	mov	r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	4413      	add	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	440b      	add	r3, r1
 8000cb2:	3315      	adds	r3, #21
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000cb8:	7b7a      	ldrb	r2, [r7, #13]
 8000cba:	491c      	ldr	r1, [pc, #112]	; (8000d2c <linkTimer+0x14c>)
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	440b      	add	r3, r1
 8000cc6:	3315      	adds	r3, #21
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ccc:	7b3b      	ldrb	r3, [r7, #12]
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d00b      	beq.n	8000cea <linkTimer+0x10a>
 8000cd2:	7b3a      	ldrb	r2, [r7, #12]
 8000cd4:	4915      	ldr	r1, [pc, #84]	; (8000d2c <linkTimer+0x14c>)
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	4413      	add	r3, r2
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	440b      	add	r3, r1
 8000ce0:	3308      	adds	r3, #8
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d2dc      	bcs.n	8000ca4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000cea:	7b7a      	ldrb	r2, [r7, #13]
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fecf 	bl	8000a94 <LinkTimerAfter>
 8000cf6:	e00f      	b.n	8000d18 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <linkTimer+0x144>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff0c 	bl	8000b20 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <linkTimer+0x144>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <linkTimer+0x148>)
 8000d10:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <linkTimer+0x144>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000d18:	89fb      	ldrh	r3, [r7, #14]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000118 	.word	0x20000118
 8000d28:	20000119 	.word	0x20000119
 8000d2c:	20000088 	.word	0x20000088
 8000d30:	2000011c 	.word	0x2000011c

08000d34 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	460a      	mov	r2, r1
 8000d3e:	71fb      	strb	r3, [r7, #7]
 8000d40:	4613      	mov	r3, r2
 8000d42:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000d44:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <UnlinkTimer+0xf8>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	79fa      	ldrb	r2, [r7, #7]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d111      	bne.n	8000d74 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d50:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <UnlinkTimer+0xf8>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <UnlinkTimer+0xfc>)
 8000d58:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	4935      	ldr	r1, [pc, #212]	; (8000e34 <UnlinkTimer+0x100>)
 8000d5e:	4613      	mov	r3, r2
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	4413      	add	r3, r2
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	440b      	add	r3, r1
 8000d68:	3315      	adds	r3, #21
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <UnlinkTimer+0xf8>)
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	e03e      	b.n	8000df2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000d74:	79fa      	ldrb	r2, [r7, #7]
 8000d76:	492f      	ldr	r1, [pc, #188]	; (8000e34 <UnlinkTimer+0x100>)
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	440b      	add	r3, r1
 8000d82:	3314      	adds	r3, #20
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000d88:	79fa      	ldrb	r2, [r7, #7]
 8000d8a:	492a      	ldr	r1, [pc, #168]	; (8000e34 <UnlinkTimer+0x100>)
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	3315      	adds	r3, #21
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000d9c:	79f9      	ldrb	r1, [r7, #7]
 8000d9e:	7bfa      	ldrb	r2, [r7, #15]
 8000da0:	4824      	ldr	r0, [pc, #144]	; (8000e34 <UnlinkTimer+0x100>)
 8000da2:	460b      	mov	r3, r1
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	440b      	add	r3, r1
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	4403      	add	r3, r0
 8000dac:	3315      	adds	r3, #21
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2d8      	uxtb	r0, r3
 8000db2:	4920      	ldr	r1, [pc, #128]	; (8000e34 <UnlinkTimer+0x100>)
 8000db4:	4613      	mov	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	4413      	add	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	440b      	add	r3, r1
 8000dbe:	3315      	adds	r3, #21
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000dc4:	7bbb      	ldrb	r3, [r7, #14]
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d013      	beq.n	8000df2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000dca:	79f9      	ldrb	r1, [r7, #7]
 8000dcc:	7bba      	ldrb	r2, [r7, #14]
 8000dce:	4819      	ldr	r0, [pc, #100]	; (8000e34 <UnlinkTimer+0x100>)
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	440b      	add	r3, r1
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	4403      	add	r3, r0
 8000dda:	3314      	adds	r3, #20
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b2d8      	uxtb	r0, r3
 8000de0:	4914      	ldr	r1, [pc, #80]	; (8000e34 <UnlinkTimer+0x100>)
 8000de2:	4613      	mov	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4413      	add	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	440b      	add	r3, r1
 8000dec:	3314      	adds	r3, #20
 8000dee:	4602      	mov	r2, r0
 8000df0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000df2:	79fa      	ldrb	r2, [r7, #7]
 8000df4:	490f      	ldr	r1, [pc, #60]	; (8000e34 <UnlinkTimer+0x100>)
 8000df6:	4613      	mov	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	440b      	add	r3, r1
 8000e00:	330c      	adds	r3, #12
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <UnlinkTimer+0xf8>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b06      	cmp	r3, #6
 8000e0e:	d107      	bne.n	8000e20 <UnlinkTimer+0xec>
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d104      	bne.n	8000e20 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <UnlinkTimer+0x104>)
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
}
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	20000118 	.word	0x20000118
 8000e30:	20000119 	.word	0x20000119
 8000e34:	20000088 	.word	0x20000088
 8000e38:	2000011c 	.word	0x2000011c

08000e3c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <ReturnTimeElapsed+0x70>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4a:	d026      	beq.n	8000e9a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000e4c:	f7ff fe02 	bl	8000a54 <ReadRtcSsrValue>
 8000e50:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <ReturnTimeElapsed+0x70>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d805      	bhi.n	8000e68 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <ReturnTimeElapsed+0x70>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	e00a      	b.n	8000e7e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <ReturnTimeElapsed+0x74>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000e74:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <ReturnTimeElapsed+0x70>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <ReturnTimeElapsed+0x78>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	fb02 f303 	mul.w	r3, r2, r3
 8000e8a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <ReturnTimeElapsed+0x7c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	40d3      	lsrs	r3, r2
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	e001      	b.n	8000e9e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	b29b      	uxth	r3, r3
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2000011c 	.word	0x2000011c
 8000eb0:	2000022a 	.word	0x2000022a
 8000eb4:	20000229 	.word	0x20000229
 8000eb8:	20000228 	.word	0x20000228

08000ebc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d108      	bne.n	8000ede <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ecc:	f7ff fdc2 	bl	8000a54 <ReadRtcSsrValue>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	4b24      	ldr	r3, [pc, #144]	; (8000f64 <RestartWakeupCounter+0xa8>)
 8000ed4:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f001 fd49 	bl	800296e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000edc:	e03e      	b.n	8000f5c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d803      	bhi.n	8000eec <RestartWakeupCounter+0x30>
 8000ee4:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <RestartWakeupCounter+0xac>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d002      	beq.n	8000ef2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000ef2:	bf00      	nop
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <RestartWakeupCounter+0xb0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f7      	beq.n	8000ef4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000f04:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <RestartWakeupCounter+0xb0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <RestartWakeupCounter+0xb0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f18:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <RestartWakeupCounter+0xb4>)
 8000f1c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f20:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000f22:	2003      	movs	r0, #3
 8000f24:	f001 fd31 	bl	800298a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <RestartWakeupCounter+0xb8>)
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	0c1b      	lsrs	r3, r3, #16
 8000f2e:	041b      	lsls	r3, r3, #16
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	4910      	ldr	r1, [pc, #64]	; (8000f74 <RestartWakeupCounter+0xb8>)
 8000f34:	4313      	orrs	r3, r2
 8000f36:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f38:	f7ff fd8c 	bl	8000a54 <ReadRtcSsrValue>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <RestartWakeupCounter+0xa8>)
 8000f40:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <RestartWakeupCounter+0xb0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <RestartWakeupCounter+0xb0>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f54:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000f56:	f3af 8000 	nop.w
  return ;
 8000f5a:	bf00      	nop
}
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000011c 	.word	0x2000011c
 8000f68:	20000228 	.word	0x20000228
 8000f6c:	20000224 	.word	0x20000224
 8000f70:	58000800 	.word	0x58000800
 8000f74:	40002800 	.word	0x40002800

08000f78 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f7e:	4b47      	ldr	r3, [pc, #284]	; (800109c <RescheduleTimerList+0x124>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f8a:	d108      	bne.n	8000f9e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000f8c:	bf00      	nop
 8000f8e:	4b44      	ldr	r3, [pc, #272]	; (80010a0 <RescheduleTimerList+0x128>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	f003 0304 	and.w	r3, r3, #4
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f7      	bne.n	8000f8e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000f9e:	4b40      	ldr	r3, [pc, #256]	; (80010a0 <RescheduleTimerList+0x128>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	4b3e      	ldr	r3, [pc, #248]	; (80010a0 <RescheduleTimerList+0x128>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fb0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000fb2:	4b3c      	ldr	r3, [pc, #240]	; (80010a4 <RescheduleTimerList+0x12c>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000fb8:	7bfa      	ldrb	r2, [r7, #15]
 8000fba:	493b      	ldr	r1, [pc, #236]	; (80010a8 <RescheduleTimerList+0x130>)
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4413      	add	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	440b      	add	r3, r1
 8000fc6:	3308      	adds	r3, #8
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000fcc:	f7ff ff36 	bl	8000e3c <ReturnTimeElapsed>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d205      	bcs.n	8000fe8 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fe0:	4b32      	ldr	r3, [pc, #200]	; (80010ac <RescheduleTimerList+0x134>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	e04d      	b.n	8001084 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	4a31      	ldr	r2, [pc, #196]	; (80010b0 <RescheduleTimerList+0x138>)
 8000fec:	8812      	ldrh	r2, [r2, #0]
 8000fee:	b292      	uxth	r2, r2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d906      	bls.n	8001008 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000ffa:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <RescheduleTimerList+0x138>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001000:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <RescheduleTimerList+0x134>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e03d      	b.n	8001084 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	b29a      	uxth	r2, r3
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001012:	4b26      	ldr	r3, [pc, #152]	; (80010ac <RescheduleTimerList+0x134>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001018:	e034      	b.n	8001084 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	4922      	ldr	r1, [pc, #136]	; (80010a8 <RescheduleTimerList+0x130>)
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	440b      	add	r3, r1
 8001028:	3308      	adds	r3, #8
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	429a      	cmp	r2, r3
 8001030:	d20a      	bcs.n	8001048 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	491c      	ldr	r1, [pc, #112]	; (80010a8 <RescheduleTimerList+0x130>)
 8001036:	4613      	mov	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	440b      	add	r3, r1
 8001040:	3308      	adds	r3, #8
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	e013      	b.n	8001070 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	4917      	ldr	r1, [pc, #92]	; (80010a8 <RescheduleTimerList+0x130>)
 800104c:	4613      	mov	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4413      	add	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	440b      	add	r3, r1
 8001056:	3308      	adds	r3, #8
 8001058:	6819      	ldr	r1, [r3, #0]
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	1ac9      	subs	r1, r1, r3
 8001060:	4811      	ldr	r0, [pc, #68]	; (80010a8 <RescheduleTimerList+0x130>)
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4403      	add	r3, r0
 800106c:	3308      	adds	r3, #8
 800106e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	490d      	ldr	r1, [pc, #52]	; (80010a8 <RescheduleTimerList+0x130>)
 8001074:	4613      	mov	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4413      	add	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	440b      	add	r3, r1
 800107e:	3315      	adds	r3, #21
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	2b06      	cmp	r3, #6
 8001088:	d1c7      	bne.n	800101a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800108a:	89bb      	ldrh	r3, [r7, #12]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff15 	bl	8000ebc <RestartWakeupCounter>

  return ;
 8001092:	bf00      	nop
}
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40002800 	.word	0x40002800
 80010a0:	20000224 	.word	0x20000224
 80010a4:	20000118 	.word	0x20000118
 80010a8:	20000088 	.word	0x20000088
 80010ac:	20000120 	.word	0x20000120
 80010b0:	2000022c 	.word	0x2000022c

080010b4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010ba:	f3ef 8310 	mrs	r3, PRIMASK
 80010be:	617b      	str	r3, [r7, #20]
  return(result);
 80010c0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80010c6:	4b5e      	ldr	r3, [pc, #376]	; (8001240 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	22ca      	movs	r2, #202	; 0xca
 80010ce:	625a      	str	r2, [r3, #36]	; 0x24
 80010d0:	4b5b      	ldr	r3, [pc, #364]	; (8001240 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2253      	movs	r2, #83	; 0x53
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80010da:	4b59      	ldr	r3, [pc, #356]	; (8001240 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	4b57      	ldr	r3, [pc, #348]	; (8001240 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010ec:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80010ee:	4b55      	ldr	r3, [pc, #340]	; (8001244 <HW_TS_RTC_Wakeup_Handler+0x190>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80010f6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010fa:	4953      	ldr	r1, [pc, #332]	; (8001248 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010fc:	4613      	mov	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	440b      	add	r3, r1
 8001106:	330c      	adds	r3, #12
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d170      	bne.n	80011f2 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001110:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001114:	494c      	ldr	r1, [pc, #304]	; (8001248 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	440b      	add	r3, r1
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001124:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001128:	4947      	ldr	r1, [pc, #284]	; (8001248 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	440b      	add	r3, r1
 8001134:	3310      	adds	r3, #16
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800113a:	4b44      	ldr	r3, [pc, #272]	; (800124c <HW_TS_RTC_Wakeup_Handler+0x198>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d04e      	beq.n	80011e2 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001144:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001148:	493f      	ldr	r1, [pc, #252]	; (8001248 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	440b      	add	r3, r1
 8001154:	330d      	adds	r3, #13
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b01      	cmp	r3, #1
 800115c:	d125      	bne.n	80011aa <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800115e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001162:	2101      	movs	r1, #1
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fde5 	bl	8000d34 <UnlinkTimer>
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001174:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001178:	4933      	ldr	r1, [pc, #204]	; (8001248 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	440b      	add	r3, r1
 8001184:	3304      	adds	r3, #4
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fa46 	bl	8001620 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	22ca      	movs	r2, #202	; 0xca
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
 800119e:	4b28      	ldr	r3, [pc, #160]	; (8001240 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2253      	movs	r2, #83	; 0x53
 80011a6:	625a      	str	r2, [r3, #36]	; 0x24
 80011a8:	e013      	b.n	80011d2 <HW_TS_RTC_Wakeup_Handler+0x11e>
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80011b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 f9a7 	bl	800150c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	22ca      	movs	r2, #202	; 0xca
 80011c6:	625a      	str	r2, [r3, #36]	; 0x24
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2253      	movs	r2, #83	; 0x53
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80011d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	4619      	mov	r1, r3
 80011da:	69b8      	ldr	r0, [r7, #24]
 80011dc:	f000 faa6 	bl	800172c <HW_TS_RTC_Int_AppNot>
 80011e0:	e024      	b.n	800122c <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 80011e2:	f7ff fec9 	bl	8000f78 <RescheduleTimerList>
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	f383 8810 	msr	PRIMASK, r3
 80011f0:	e01c      	b.n	800122c <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80011f2:	bf00      	nop
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f7      	beq.n	80011f4 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001218:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800121c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	22ff      	movs	r2, #255	; 0xff
 8001234:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001236:	bf00      	nop
}
 8001238:	3728      	adds	r7, #40	; 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000224 	.word	0x20000224
 8001244:	20000118 	.word	0x20000118
 8001248:	20000088 	.word	0x20000088
 800124c:	20000120 	.word	0x20000120
 8001250:	58000800 	.word	0x58000800

08001254 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001260:	4a64      	ldr	r2, [pc, #400]	; (80013f4 <HW_TS_Init+0x1a0>)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001266:	4b63      	ldr	r3, [pc, #396]	; (80013f4 <HW_TS_Init+0x1a0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	22ca      	movs	r2, #202	; 0xca
 800126e:	625a      	str	r2, [r3, #36]	; 0x24
 8001270:	4b60      	ldr	r3, [pc, #384]	; (80013f4 <HW_TS_Init+0x1a0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2253      	movs	r2, #83	; 0x53
 8001278:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800127a:	4b5f      	ldr	r3, [pc, #380]	; (80013f8 <HW_TS_Init+0x1a4>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	4a5e      	ldr	r2, [pc, #376]	; (80013f8 <HW_TS_Init+0x1a4>)
 8001280:	f043 0320 	orr.w	r3, r3, #32
 8001284:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001286:	4b5c      	ldr	r3, [pc, #368]	; (80013f8 <HW_TS_Init+0x1a4>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	b2db      	uxtb	r3, r3
 8001292:	f1c3 0304 	rsb	r3, r3, #4
 8001296:	b2da      	uxtb	r2, r3
 8001298:	4b58      	ldr	r3, [pc, #352]	; (80013fc <HW_TS_Init+0x1a8>)
 800129a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800129c:	4b56      	ldr	r3, [pc, #344]	; (80013f8 <HW_TS_Init+0x1a4>)
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80012a4:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80012a8:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	fa92 f2a2 	rbit	r2, r2
 80012b0:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d101      	bne.n	80012c0 <HW_TS_Init+0x6c>
  {
    return 32U;
 80012bc:	2220      	movs	r2, #32
 80012be:	e003      	b.n	80012c8 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	fab2 f282 	clz	r2, r2
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	40d3      	lsrs	r3, r2
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	3301      	adds	r3, #1
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	4b4b      	ldr	r3, [pc, #300]	; (8001400 <HW_TS_Init+0x1ac>)
 80012d2:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80012d4:	4b48      	ldr	r3, [pc, #288]	; (80013f8 <HW_TS_Init+0x1a4>)
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012de:	b29b      	uxth	r3, r3
 80012e0:	3301      	adds	r3, #1
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	4b47      	ldr	r3, [pc, #284]	; (8001404 <HW_TS_Init+0x1b0>)
 80012e6:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80012e8:	4b46      	ldr	r3, [pc, #280]	; (8001404 <HW_TS_Init+0x1b0>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	4a44      	ldr	r2, [pc, #272]	; (8001400 <HW_TS_Init+0x1ac>)
 80012f0:	7812      	ldrb	r2, [r2, #0]
 80012f2:	fb02 f303 	mul.w	r3, r2, r3
 80012f6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80012fa:	4a40      	ldr	r2, [pc, #256]	; (80013fc <HW_TS_Init+0x1a8>)
 80012fc:	7812      	ldrb	r2, [r2, #0]
 80012fe:	40d3      	lsrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001308:	4293      	cmp	r3, r2
 800130a:	d904      	bls.n	8001316 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800130c:	4b3e      	ldr	r3, [pc, #248]	; (8001408 <HW_TS_Init+0x1b4>)
 800130e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001312:	801a      	strh	r2, [r3, #0]
 8001314:	e003      	b.n	800131e <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b3b      	ldr	r3, [pc, #236]	; (8001408 <HW_TS_Init+0x1b4>)
 800131c:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800131e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001322:	f7ff fb85 	bl	8000a30 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001326:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800132a:	f7ff fb6d 	bl	8000a08 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d143      	bne.n	80013bc <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001334:	4b35      	ldr	r3, [pc, #212]	; (800140c <HW_TS_Init+0x1b8>)
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800133a:	4b35      	ldr	r3, [pc, #212]	; (8001410 <HW_TS_Init+0x1bc>)
 800133c:	f04f 32ff 	mov.w	r2, #4294967295
 8001340:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001342:	2300      	movs	r3, #0
 8001344:	77fb      	strb	r3, [r7, #31]
 8001346:	e00c      	b.n	8001362 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001348:	7ffa      	ldrb	r2, [r7, #31]
 800134a:	4932      	ldr	r1, [pc, #200]	; (8001414 <HW_TS_Init+0x1c0>)
 800134c:	4613      	mov	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4413      	add	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	440b      	add	r3, r1
 8001356:	330c      	adds	r3, #12
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800135c:	7ffb      	ldrb	r3, [r7, #31]
 800135e:	3301      	adds	r3, #1
 8001360:	77fb      	strb	r3, [r7, #31]
 8001362:	7ffb      	ldrb	r3, [r7, #31]
 8001364:	2b05      	cmp	r3, #5
 8001366:	d9ef      	bls.n	8001348 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001368:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <HW_TS_Init+0x1c4>)
 800136a:	2206      	movs	r2, #6
 800136c:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800136e:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <HW_TS_Init+0x1a0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <HW_TS_Init+0x1a0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001380:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <HW_TS_Init+0x1a0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <HW_TS_Init+0x1a0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001396:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001398:	4b20      	ldr	r3, [pc, #128]	; (800141c <HW_TS_Init+0x1c8>)
 800139a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800139e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80013a0:	2003      	movs	r0, #3
 80013a2:	f001 faf2 	bl	800298a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <HW_TS_Init+0x1a0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HW_TS_Init+0x1a0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	e00a      	b.n	80013d2 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <HW_TS_Init+0x1a0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f001 face 	bl	800296e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HW_TS_Init+0x1a0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	22ff      	movs	r2, #255	; 0xff
 80013da:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80013dc:	2200      	movs	r2, #0
 80013de:	2106      	movs	r1, #6
 80013e0:	2003      	movs	r0, #3
 80013e2:	f001 fa8a 	bl	80028fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013e6:	2003      	movs	r0, #3
 80013e8:	f001 faa1 	bl	800292e <HAL_NVIC_EnableIRQ>

  return;
 80013ec:	bf00      	nop
}
 80013ee:	3720      	adds	r7, #32
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000224 	.word	0x20000224
 80013f8:	40002800 	.word	0x40002800
 80013fc:	20000228 	.word	0x20000228
 8001400:	20000229 	.word	0x20000229
 8001404:	2000022a 	.word	0x2000022a
 8001408:	2000022c 	.word	0x2000022c
 800140c:	20000120 	.word	0x20000120
 8001410:	2000011c 	.word	0x2000011c
 8001414:	20000088 	.word	0x20000088
 8001418:	20000118 	.word	0x20000118
 800141c:	58000800 	.word	0x58000800

08001420 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001420:	b480      	push	{r7}
 8001422:	b08b      	sub	sp, #44	; 0x2c
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	4613      	mov	r3, r2
 800142e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001436:	f3ef 8310 	mrs	r3, PRIMASK
 800143a:	61fb      	str	r3, [r7, #28]
  return(result);
 800143c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800143e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001440:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001442:	e004      	b.n	800144e <HW_TS_Create+0x2e>
  {
    loop++;
 8001444:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001448:	3301      	adds	r3, #1
 800144a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800144e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001452:	2b05      	cmp	r3, #5
 8001454:	d80c      	bhi.n	8001470 <HW_TS_Create+0x50>
 8001456:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800145a:	492b      	ldr	r1, [pc, #172]	; (8001508 <HW_TS_Create+0xe8>)
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	440b      	add	r3, r1
 8001466:	330c      	adds	r3, #12
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1e9      	bne.n	8001444 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001470:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001474:	2b06      	cmp	r3, #6
 8001476:	d037      	beq.n	80014e8 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001478:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800147c:	4922      	ldr	r1, [pc, #136]	; (8001508 <HW_TS_Create+0xe8>)
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	440b      	add	r3, r1
 8001488:	330c      	adds	r3, #12
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001498:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800149c:	491a      	ldr	r1, [pc, #104]	; (8001508 <HW_TS_Create+0xe8>)
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	440b      	add	r3, r1
 80014a8:	3310      	adds	r3, #16
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80014ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014b2:	4915      	ldr	r1, [pc, #84]	; (8001508 <HW_TS_Create+0xe8>)
 80014b4:	4613      	mov	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	440b      	add	r3, r1
 80014be:	330d      	adds	r3, #13
 80014c0:	79fa      	ldrb	r2, [r7, #7]
 80014c2:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80014c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014c8:	490f      	ldr	r1, [pc, #60]	; (8001508 <HW_TS_Create+0xe8>)
 80014ca:	4613      	mov	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	440b      	add	r3, r1
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014de:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014e6:	e007      	b.n	80014f8 <HW_TS_Create+0xd8>
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80014f2:	2301      	movs	r3, #1
 80014f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80014f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	372c      	adds	r7, #44	; 0x2c
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	20000088 	.word	0x20000088

0800150c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001516:	f3ef 8310 	mrs	r3, PRIMASK
 800151a:	60fb      	str	r3, [r7, #12]
  return(result);
 800151c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800151e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001522:	2003      	movs	r0, #3
 8001524:	f001 fa11 	bl	800294a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001528:	4b37      	ldr	r3, [pc, #220]	; (8001608 <HW_TS_Stop+0xfc>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	22ca      	movs	r2, #202	; 0xca
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
 8001532:	4b35      	ldr	r3, [pc, #212]	; (8001608 <HW_TS_Stop+0xfc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2253      	movs	r2, #83	; 0x53
 800153a:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800153c:	79fa      	ldrb	r2, [r7, #7]
 800153e:	4933      	ldr	r1, [pc, #204]	; (800160c <HW_TS_Stop+0x100>)
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	440b      	add	r3, r1
 800154a:	330c      	adds	r3, #12
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d148      	bne.n	80015e6 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fbeb 	bl	8000d34 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800155e:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <HW_TS_Stop+0x104>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001564:	7cfb      	ldrb	r3, [r7, #19]
 8001566:	2b06      	cmp	r3, #6
 8001568:	d135      	bne.n	80015d6 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800156a:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <HW_TS_Stop+0x108>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001576:	d108      	bne.n	800158a <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001578:	bf00      	nop
 800157a:	4b23      	ldr	r3, [pc, #140]	; (8001608 <HW_TS_Stop+0xfc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f7      	bne.n	800157a <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <HW_TS_Stop+0xfc>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <HW_TS_Stop+0xfc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800159c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800159e:	bf00      	nop
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HW_TS_Stop+0xfc>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f7      	beq.n	80015a0 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HW_TS_Stop+0xfc>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <HW_TS_Stop+0xfc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80015c4:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <HW_TS_Stop+0x10c>)
 80015c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80015cc:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80015ce:	2003      	movs	r0, #3
 80015d0:	f001 f9db 	bl	800298a <HAL_NVIC_ClearPendingIRQ>
 80015d4:	e007      	b.n	80015e6 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <HW_TS_Stop+0x110>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	7cfa      	ldrb	r2, [r7, #19]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d001      	beq.n	80015e6 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80015e2:	f7ff fcc9 	bl	8000f78 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <HW_TS_Stop+0xfc>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	22ff      	movs	r2, #255	; 0xff
 80015ee:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015f0:	2003      	movs	r0, #3
 80015f2:	f001 f99c 	bl	800292e <HAL_NVIC_EnableIRQ>
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001600:	bf00      	nop
}
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000224 	.word	0x20000224
 800160c:	20000088 	.word	0x20000088
 8001610:	20000118 	.word	0x20000118
 8001614:	40002800 	.word	0x40002800
 8001618:	58000800 	.word	0x58000800
 800161c:	20000119 	.word	0x20000119

08001620 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800162c:	79fa      	ldrb	r2, [r7, #7]
 800162e:	493b      	ldr	r1, [pc, #236]	; (800171c <HW_TS_Start+0xfc>)
 8001630:	4613      	mov	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4413      	add	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	440b      	add	r3, r1
 800163a:	330c      	adds	r3, #12
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d103      	bne.n	800164c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff60 	bl	800150c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800164c:	f3ef 8310 	mrs	r3, PRIMASK
 8001650:	60fb      	str	r3, [r7, #12]
  return(result);
 8001652:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001654:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001656:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001658:	2003      	movs	r0, #3
 800165a:	f001 f976 	bl	800294a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800165e:	4b30      	ldr	r3, [pc, #192]	; (8001720 <HW_TS_Start+0x100>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	22ca      	movs	r2, #202	; 0xca
 8001666:	625a      	str	r2, [r3, #36]	; 0x24
 8001668:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <HW_TS_Start+0x100>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2253      	movs	r2, #83	; 0x53
 8001670:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001672:	79fa      	ldrb	r2, [r7, #7]
 8001674:	4929      	ldr	r1, [pc, #164]	; (800171c <HW_TS_Start+0xfc>)
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	440b      	add	r3, r1
 8001680:	330c      	adds	r3, #12
 8001682:	2202      	movs	r2, #2
 8001684:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001686:	79fa      	ldrb	r2, [r7, #7]
 8001688:	4924      	ldr	r1, [pc, #144]	; (800171c <HW_TS_Start+0xfc>)
 800168a:	4613      	mov	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	440b      	add	r3, r1
 8001694:	3308      	adds	r3, #8
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800169a:	79fa      	ldrb	r2, [r7, #7]
 800169c:	491f      	ldr	r1, [pc, #124]	; (800171c <HW_TS_Start+0xfc>)
 800169e:	4613      	mov	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	440b      	add	r3, r1
 80016a8:	3304      	adds	r3, #4
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fa95 	bl	8000be0 <linkTimer>
 80016b6:	4603      	mov	r3, r0
 80016b8:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80016ba:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <HW_TS_Start+0x104>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HW_TS_Start+0x108>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	7c7a      	ldrb	r2, [r7, #17]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d002      	beq.n	80016d2 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80016cc:	f7ff fc54 	bl	8000f78 <RescheduleTimerList>
 80016d0:	e013      	b.n	80016fa <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80016d2:	79fa      	ldrb	r2, [r7, #7]
 80016d4:	4911      	ldr	r1, [pc, #68]	; (800171c <HW_TS_Start+0xfc>)
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	3308      	adds	r3, #8
 80016e2:	6819      	ldr	r1, [r3, #0]
 80016e4:	8a7b      	ldrh	r3, [r7, #18]
 80016e6:	79fa      	ldrb	r2, [r7, #7]
 80016e8:	1ac9      	subs	r1, r1, r3
 80016ea:	480c      	ldr	r0, [pc, #48]	; (800171c <HW_TS_Start+0xfc>)
 80016ec:	4613      	mov	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	4403      	add	r3, r0
 80016f6:	3308      	adds	r3, #8
 80016f8:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HW_TS_Start+0x100>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	22ff      	movs	r2, #255	; 0xff
 8001702:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001704:	2003      	movs	r0, #3
 8001706:	f001 f912 	bl	800292e <HAL_NVIC_EnableIRQ>
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001714:	bf00      	nop
}
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000088 	.word	0x20000088
 8001720:	20000224 	.word	0x20000224
 8001724:	20000118 	.word	0x20000118
 8001728:	20000119 	.word	0x20000119

0800172c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	460b      	mov	r3, r1
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4798      	blx	r3

  return;
 800173e:	bf00      	nop
}
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	4603      	mov	r3, r0
 8001754:	73fb      	strb	r3, [r7, #15]
 8001756:	4613      	mov	r3, r2
 8001758:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <HW_UART_Receive_IT+0x1e>
 8001760:	2b02      	cmp	r3, #2
 8001762:	d00d      	beq.n	8001780 <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8001764:	e019      	b.n	800179a <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 8001766:	4a0f      	ldr	r2, [pc, #60]	; (80017a4 <HW_UART_Receive_IT+0x5c>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HW_UART_Receive_IT+0x60>)
 800176e:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <HW_UART_Receive_IT+0x64>)
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	89bb      	ldrh	r3, [r7, #12]
 8001774:	461a      	mov	r2, r3
 8001776:	68b9      	ldr	r1, [r7, #8]
 8001778:	480b      	ldr	r0, [pc, #44]	; (80017a8 <HW_UART_Receive_IT+0x60>)
 800177a:	f003 fffb 	bl	8005774 <HAL_UART_Receive_IT>
            break;
 800177e:	e00c      	b.n	800179a <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 8001780:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <HW_UART_Receive_IT+0x68>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <HW_UART_Receive_IT+0x6c>)
 8001788:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <HW_UART_Receive_IT+0x70>)
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	89bb      	ldrh	r3, [r7, #12]
 800178e:	461a      	mov	r2, r3
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	4808      	ldr	r0, [pc, #32]	; (80017b4 <HW_UART_Receive_IT+0x6c>)
 8001794:	f003 ffee 	bl	8005774 <HAL_UART_Receive_IT>
            break;
 8001798:	bf00      	nop
    }

    return;
 800179a:	bf00      	nop
}
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20005b70 	.word	0x20005b70
 80017a8:	20005cd8 	.word	0x20005cd8
 80017ac:	40013800 	.word	0x40013800
 80017b0:	20005b74 	.word	0x20005b74
 80017b4:	20005bec 	.word	0x20005bec
 80017b8:	40008000 	.word	0x40008000

080017bc <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	4603      	mov	r3, r0
 80017c8:	73fb      	strb	r3, [r7, #15]
 80017ca:	4613      	mov	r3, r2
 80017cc:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d002      	beq.n	80017da <HW_UART_Transmit_IT+0x1e>
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d00d      	beq.n	80017f4 <HW_UART_Transmit_IT+0x38>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80017d8:	e019      	b.n	800180e <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(huart1, USART1);
 80017da:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <HW_UART_Transmit_IT+0x5c>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HW_UART_Transmit_IT+0x60>)
 80017e2:	4a0f      	ldr	r2, [pc, #60]	; (8001820 <HW_UART_Transmit_IT+0x64>)
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	89bb      	ldrh	r3, [r7, #12]
 80017e8:	461a      	mov	r2, r3
 80017ea:	68b9      	ldr	r1, [r7, #8]
 80017ec:	480b      	ldr	r0, [pc, #44]	; (800181c <HW_UART_Transmit_IT+0x60>)
 80017ee:	f003 ff3d 	bl	800566c <HAL_UART_Transmit_IT>
            break;
 80017f2:	e00c      	b.n	800180e <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(hlpuart1, LPUART1);
 80017f4:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <HW_UART_Transmit_IT+0x68>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HW_UART_Transmit_IT+0x6c>)
 80017fc:	4a0b      	ldr	r2, [pc, #44]	; (800182c <HW_UART_Transmit_IT+0x70>)
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	89bb      	ldrh	r3, [r7, #12]
 8001802:	461a      	mov	r2, r3
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	4808      	ldr	r0, [pc, #32]	; (8001828 <HW_UART_Transmit_IT+0x6c>)
 8001808:	f003 ff30 	bl	800566c <HAL_UART_Transmit_IT>
            break;
 800180c:	bf00      	nop
    }

    return;
 800180e:	bf00      	nop
}
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20005b78 	.word	0x20005b78
 800181c:	20005cd8 	.word	0x20005cd8
 8001820:	40013800 	.word	0x40013800
 8001824:	20005b6c 	.word	0x20005b6c
 8001828:	20005bec 	.word	0x20005bec
 800182c:	40008000 	.word	0x40008000

08001830 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	4603      	mov	r3, r0
 800183c:	73fb      	strb	r3, [r7, #15]
 800183e:	4613      	mov	r3, r2
 8001840:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001846:	2300      	movs	r3, #0
 8001848:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d002      	beq.n	8001856 <HW_UART_Transmit_DMA+0x26>
 8001850:	2b02      	cmp	r3, #2
 8001852:	d00f      	beq.n	8001874 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001854:	e01d      	b.n	8001892 <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 8001856:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <HW_UART_Transmit_DMA+0xa4>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 800185c:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <HW_UART_Transmit_DMA+0xa8>)
 800185e:	4a1f      	ldr	r2, [pc, #124]	; (80018dc <HW_UART_Transmit_DMA+0xac>)
 8001860:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001862:	89bb      	ldrh	r3, [r7, #12]
 8001864:	461a      	mov	r2, r3
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	481b      	ldr	r0, [pc, #108]	; (80018d8 <HW_UART_Transmit_DMA+0xa8>)
 800186a:	f004 f85b 	bl	8005924 <HAL_UART_Transmit_DMA>
 800186e:	4603      	mov	r3, r0
 8001870:	75fb      	strb	r3, [r7, #23]
            break;
 8001872:	e00e      	b.n	8001892 <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 8001874:	4a1a      	ldr	r2, [pc, #104]	; (80018e0 <HW_UART_Transmit_DMA+0xb0>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HW_UART_Transmit_DMA+0xb4>)
 800187c:	4a1a      	ldr	r2, [pc, #104]	; (80018e8 <HW_UART_Transmit_DMA+0xb8>)
 800187e:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8001880:	89bb      	ldrh	r3, [r7, #12]
 8001882:	461a      	mov	r2, r3
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	4817      	ldr	r0, [pc, #92]	; (80018e4 <HW_UART_Transmit_DMA+0xb4>)
 8001888:	f004 f84c 	bl	8005924 <HAL_UART_Transmit_DMA>
 800188c:	4603      	mov	r3, r0
 800188e:	75fb      	strb	r3, [r7, #23]
            break;
 8001890:	bf00      	nop
    }

    switch (hal_status)
 8001892:	7dfb      	ldrb	r3, [r7, #23]
 8001894:	2b03      	cmp	r3, #3
 8001896:	d817      	bhi.n	80018c8 <HW_UART_Transmit_DMA+0x98>
 8001898:	a201      	add	r2, pc, #4	; (adr r2, 80018a0 <HW_UART_Transmit_DMA+0x70>)
 800189a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189e:	bf00      	nop
 80018a0:	080018b1 	.word	0x080018b1
 80018a4:	080018b7 	.word	0x080018b7
 80018a8:	080018bd 	.word	0x080018bd
 80018ac:	080018c3 	.word	0x080018c3
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80018b0:	2300      	movs	r3, #0
 80018b2:	75bb      	strb	r3, [r7, #22]
            break;
 80018b4:	e009      	b.n	80018ca <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80018b6:	2301      	movs	r3, #1
 80018b8:	75bb      	strb	r3, [r7, #22]
            break;
 80018ba:	e006      	b.n	80018ca <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80018bc:	2302      	movs	r3, #2
 80018be:	75bb      	strb	r3, [r7, #22]
            break;
 80018c0:	e003      	b.n	80018ca <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80018c2:	2303      	movs	r3, #3
 80018c4:	75bb      	strb	r3, [r7, #22]
            break;
 80018c6:	e000      	b.n	80018ca <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 80018c8:	bf00      	nop
    }

    return hw_status;
 80018ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20005b78 	.word	0x20005b78
 80018d8:	20005cd8 	.word	0x20005cd8
 80018dc:	40013800 	.word	0x40013800
 80018e0:	20005b6c 	.word	0x20005b6c
 80018e4:	20005bec 	.word	0x20005bec
 80018e8:	40008000 	.word	0x40008000

080018ec <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0e      	ldr	r2, [pc, #56]	; (8001934 <HAL_UART_RxCpltCallback+0x48>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00b      	beq.n	8001916 <HAL_UART_RxCpltCallback+0x2a>
 80018fe:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <HAL_UART_RxCpltCallback+0x4c>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d000      	beq.n	8001906 <HAL_UART_RxCpltCallback+0x1a>
            }
            break;
#endif

        default:
            break;
 8001904:	e012      	b.n	800192c <HAL_UART_RxCpltCallback+0x40>
            if(HW_huart1RxCb)
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <HAL_UART_RxCpltCallback+0x50>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00b      	beq.n	8001926 <HAL_UART_RxCpltCallback+0x3a>
                HW_huart1RxCb();
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_UART_RxCpltCallback+0x50>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4798      	blx	r3
            break;
 8001914:	e007      	b.n	8001926 <HAL_UART_RxCpltCallback+0x3a>
            if(HW_hlpuart1RxCb)
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_UART_RxCpltCallback+0x54>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <HAL_UART_RxCpltCallback+0x3e>
                HW_hlpuart1RxCb();
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_UART_RxCpltCallback+0x54>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4798      	blx	r3
            break;
 8001924:	e001      	b.n	800192a <HAL_UART_RxCpltCallback+0x3e>
            break;
 8001926:	bf00      	nop
 8001928:	e000      	b.n	800192c <HAL_UART_RxCpltCallback+0x40>
            break;
 800192a:	bf00      	nop
    }

    return;
 800192c:	bf00      	nop
}
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40008000 	.word	0x40008000
 8001938:	40013800 	.word	0x40013800
 800193c:	20005b70 	.word	0x20005b70
 8001940:	20005b74 	.word	0x20005b74

08001944 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0e      	ldr	r2, [pc, #56]	; (800198c <HAL_UART_TxCpltCallback+0x48>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d00b      	beq.n	800196e <HAL_UART_TxCpltCallback+0x2a>
 8001956:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <HAL_UART_TxCpltCallback+0x4c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d000      	beq.n	800195e <HAL_UART_TxCpltCallback+0x1a>
            }
            break;
#endif

        default:
            break;
 800195c:	e012      	b.n	8001984 <HAL_UART_TxCpltCallback+0x40>
            if(HW_huart1TxCb)
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_UART_TxCpltCallback+0x50>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00b      	beq.n	800197e <HAL_UART_TxCpltCallback+0x3a>
                HW_huart1TxCb();
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_UART_TxCpltCallback+0x50>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4798      	blx	r3
            break;
 800196c:	e007      	b.n	800197e <HAL_UART_TxCpltCallback+0x3a>
            if(HW_hlpuart1TxCb)
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_UART_TxCpltCallback+0x54>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <HAL_UART_TxCpltCallback+0x3e>
                HW_hlpuart1TxCb();
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_UART_TxCpltCallback+0x54>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4798      	blx	r3
            break;
 800197c:	e001      	b.n	8001982 <HAL_UART_TxCpltCallback+0x3e>
            break;
 800197e:	bf00      	nop
 8001980:	e000      	b.n	8001984 <HAL_UART_TxCpltCallback+0x40>
            break;
 8001982:	bf00      	nop
    }

    return;
 8001984:	bf00      	nop
}
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40008000 	.word	0x40008000
 8001990:	40013800 	.word	0x40013800
 8001994:	20005b78 	.word	0x20005b78
 8001998:	20005b6c 	.word	0x20005b6c

0800199c <LL_RCC_LSE_SetDriveCapability>:
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80019a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ac:	f023 0218 	bic.w	r2, r3, #24
 80019b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019cc:	f000 fe18 	bl	8002600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019d0:	f000 f814 	bl	80019fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019d4:	f7ff f80d 	bl	80009f2 <MX_GPIO_Init>
  MX_DMA_Init();
 80019d8:	f7fe ffcb 	bl	8000972 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80019dc:	f000 fc74 	bl	80022c8 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80019e0:	f000 f8d4 	bl	8001b8c <MX_RTC_Init>
  MX_USART1_UART_Init();
 80019e4:	f000 fcbc 	bl	8002360 <MX_USART1_UART_Init>
  MX_RF_Init();
 80019e8:	f000 f89e 	bl	8001b28 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80019ec:	f008 fb0c 	bl	800a008 <osKernelInitialize>
  MX_FREERTOS_Init();
 80019f0:	f7fe ff8a 	bl	8000908 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80019f4:	f008 fb3c 	bl	800a070 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <main+0x30>
	...

080019fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b0ae      	sub	sp, #184	; 0xb8
 8001a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a06:	2248      	movs	r2, #72	; 0x48
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f00d fdb3 	bl	800f576 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
 8001a20:	615a      	str	r2, [r3, #20]
 8001a22:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2250      	movs	r2, #80	; 0x50
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f00d fda3 	bl	800f576 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a30:	f001 fc22 	bl	8003278 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a34:	2000      	movs	r0, #0
 8001a36:	f7ff ffb1 	bl	800199c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a3a:	4b2f      	ldr	r3, [pc, #188]	; (8001af8 <SystemClock_Config+0xfc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a42:	4a2d      	ldr	r2, [pc, #180]	; (8001af8 <SystemClock_Config+0xfc>)
 8001a44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <SystemClock_Config+0xfc>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001a56:	2307      	movs	r3, #7
 8001a58:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a5e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a60:	2301      	movs	r3, #1
 8001a62:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a68:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a6a:	2340      	movs	r3, #64	; 0x40
 8001a6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f001 ff9c 	bl	80039b8 <HAL_RCC_OscConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001a86:	f000 f84b 	bl	8001b20 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001a8a:	236f      	movs	r3, #111	; 0x6f
 8001a8c:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a92:	2300      	movs	r3, #0
 8001a94:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a96:	2300      	movs	r3, #0
 8001a98:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001aa6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001aaa:	2101      	movs	r1, #1
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 fb0f 	bl	80040d0 <HAL_RCC_ClockConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ab8:	f000 f832 	bl	8001b20 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001abc:	f643 0303 	movw	r3, #14339	; 0x3803
 8001ac0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001aca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ace:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8001ad0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ad4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001ada:	2310      	movs	r3, #16
 8001adc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f002 ff66 	bl	80049b2 <HAL_RCCEx_PeriphCLKConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001aec:	f000 f818 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001af0:	bf00      	nop
 8001af2:	37b8      	adds	r7, #184	; 0xb8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	58000400 	.word	0x58000400

08001afc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d101      	bne.n	8001b12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b0e:	f000 fd97 	bl	8002640 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40014800 	.word	0x40014800

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <Error_Handler+0x6>

08001b28 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
}
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <MX_RTC_Init+0x4c>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <MX_RTC_Init+0x50>)
 8001b94:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <MX_RTC_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <MX_RTC_Init+0x4c>)
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <MX_RTC_Init+0x4c>)
 8001ba4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001ba8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <MX_RTC_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MX_RTC_Init+0x4c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <MX_RTC_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <MX_RTC_Init+0x4c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_RTC_Init+0x4c>)
 8001bc4:	f003 f97b 	bl	8004ebe <HAL_RTC_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001bce:	f7ff ffa7 	bl	8001b20 <Error_Handler>
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20005b7c 	.word	0x20005b7c
 8001bdc:	40002800 	.word	0x40002800

08001be0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <HAL_RTC_MspInit+0x28>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d105      	bne.n	8001bfe <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bf2:	f7ff ffa0 	bl	8001b36 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001bf6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001bfa:	f7ff ffad 	bl	8001b58 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40002800 	.word	0x40002800

08001c0c <LL_AHB3_GRP1_EnableClock>:
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c30:	68fb      	ldr	r3, [r7, #12]
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001c42:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001c46:	f7ff ffe1 	bl	8001c0c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	210f      	movs	r1, #15
 8001c4e:	f06f 0001 	mvn.w	r0, #1
 8001c52:	f000 fe52 	bl	80028fa <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2105      	movs	r1, #5
 8001c5a:	202e      	movs	r0, #46	; 0x2e
 8001c5c:	f000 fe4d 	bl	80028fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001c60:	202e      	movs	r0, #46	; 0x2e
 8001c62:	f000 fe64 	bl	800292e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	210f      	movs	r1, #15
 8001c6a:	202c      	movs	r0, #44	; 0x2c
 8001c6c:	f000 fe45 	bl	80028fa <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8001c70:	2200      	movs	r2, #0
 8001c72:	210f      	movs	r1, #15
 8001c74:	202d      	movs	r0, #45	; 0x2d
 8001c76:	f000 fe40 	bl	80028fa <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b085      	sub	sp, #20
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08c      	sub	sp, #48	; 0x30
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	201a      	movs	r0, #26
 8001cc6:	f000 fe18 	bl	80028fa <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001cca:	201a      	movs	r0, #26
 8001ccc:	f000 fe2f 	bl	800292e <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001cd0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001cd4:	f7ff ffd3 	bl	8001c7e <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cd8:	f107 0208 	add.w	r2, r7, #8
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f002 fbde 	bl	80044a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ce8:	f002 fbc6 	bl	8004478 <HAL_RCC_GetPCLK2Freq>
 8001cec:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf0:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <HAL_InitTick+0x8c>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	0c9b      	lsrs	r3, r3, #18
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001cfc:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <HAL_InitTick+0x90>)
 8001cfe:	4a11      	ldr	r2, [pc, #68]	; (8001d44 <HAL_InitTick+0x94>)
 8001d00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_InitTick+0x90>)
 8001d04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d08:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001d0a:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <HAL_InitTick+0x90>)
 8001d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_InitTick+0x90>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <HAL_InitTick+0x90>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001d1c:	4808      	ldr	r0, [pc, #32]	; (8001d40 <HAL_InitTick+0x90>)
 8001d1e:	f003 f9bc 	bl	800509a <HAL_TIM_Base_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d104      	bne.n	8001d32 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001d28:	4805      	ldr	r0, [pc, #20]	; (8001d40 <HAL_InitTick+0x90>)
 8001d2a:	f003 fa17 	bl	800515c <HAL_TIM_Base_Start_IT>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	e000      	b.n	8001d34 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3730      	adds	r7, #48	; 0x30
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	431bde83 	.word	0x431bde83
 8001d40:	20005ba0 	.word	0x20005ba0
 8001d44:	40014800 	.word	0x40014800

08001d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <NMI_Handler+0x4>

08001d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <HardFault_Handler+0x4>

08001d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <MemManage_Handler+0x4>

08001d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d5e:	e7fe      	b.n	8001d5e <BusFault_Handler+0x4>

08001d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <UsageFault_Handler+0x4>

08001d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <DMA1_Channel4_IRQHandler+0x10>)
 8001d7a:	f000 ff97 	bl	8002cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20005d64 	.word	0x20005d64

08001d88 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001d8e:	f003 fa33 	bl	80051f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20005ba0 	.word	0x20005ba0

08001d9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <USART1_IRQHandler+0x10>)
 8001da2:	f003 fe3f 	bl	8005a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20005cd8 	.word	0x20005cd8

08001db0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <LPUART1_IRQHandler+0x10>)
 8001db6:	f003 fe35 	bl	8005a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20005bec 	.word	0x20005bec

08001dc4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001dc8:	f001 fa32 	bl	8003230 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <DMA2_Channel4_IRQHandler+0x10>)
 8001dd6:	f000 ff69 	bl	8002cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20005c78 	.word	0x20005c78

08001de4 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8001de8:	f7ff f964 	bl	80010b4 <HW_TS_RTC_Wakeup_Handler>
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <IPCC_C1_TX_IRQHandler>:
void IPCC_C1_TX_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8001df4:	f00d f9b6 	bl	800f164 <HW_IPCC_Tx_Handler>
  return;
 8001df8:	bf00      	nop
}
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8001e00:	f00d f956 	bl	800f0b0 <HW_IPCC_Rx_Handler>
  return;
 8001e04:	bf00      	nop
}
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <logRegion>:
 *
 * @returns  String with a log level color value.
 */
static inline uint16_t logRegion(char *aLogString, uint16_t aMaxSize,
        appliLogRegion_t aLogRegion)
{
 8001e08:	b5b0      	push	{r4, r5, r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
 8001e14:	4613      	mov	r3, r2
 8001e16:	707b      	strb	r3, [r7, #1]
  char logRegionString[30U];

  switch (aLogRegion)
 8001e18:	787b      	ldrb	r3, [r7, #1]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d83e      	bhi.n	8001e9e <logRegion+0x96>
 8001e20:	a201      	add	r2, pc, #4	; (adr r2, 8001e28 <logRegion+0x20>)
 8001e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e26:	bf00      	nop
 8001e28:	08001e3d 	.word	0x08001e3d
 8001e2c:	08001e51 	.word	0x08001e51
 8001e30:	08001e65 	.word	0x08001e65
 8001e34:	08001e77 	.word	0x08001e77
 8001e38:	08001e8b 	.word	0x08001e8b
  {
    case APPLI_LOG_REGION_GENERAL:
      strcpy(logRegionString, "[M4 APPLICATION]");
 8001e3c:	f107 0308 	add.w	r3, r7, #8
 8001e40:	4a22      	ldr	r2, [pc, #136]	; (8001ecc <logRegion+0xc4>)
 8001e42:	461c      	mov	r4, r3
 8001e44:	4615      	mov	r5, r2
 8001e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e4a:	682b      	ldr	r3, [r5, #0]
 8001e4c:	7023      	strb	r3, [r4, #0]
      break;
 8001e4e:	e02f      	b.n	8001eb0 <logRegion+0xa8>
    case APPLI_LOG_REGION_OPENTHREAD_API:
      strcpy(logRegionString, "[M4 OPENTHREAD API]");
 8001e50:	f107 0308 	add.w	r3, r7, #8
 8001e54:	4a1e      	ldr	r2, [pc, #120]	; (8001ed0 <logRegion+0xc8>)
 8001e56:	461c      	mov	r4, r3
 8001e58:	4615      	mov	r5, r2
 8001e5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e5e:	682b      	ldr	r3, [r5, #0]
 8001e60:	6023      	str	r3, [r4, #0]
      break;
 8001e62:	e025      	b.n	8001eb0 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_LINK:
      strcpy(logRegionString, "[M4 LINK API]");
 8001e64:	f107 0308 	add.w	r3, r7, #8
 8001e68:	4a1a      	ldr	r2, [pc, #104]	; (8001ed4 <logRegion+0xcc>)
 8001e6a:	461c      	mov	r4, r3
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e70:	c407      	stmia	r4!, {r0, r1, r2}
 8001e72:	8023      	strh	r3, [r4, #0]
      break;
 8001e74:	e01c      	b.n	8001eb0 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_INSTANCE:
      strcpy(logRegionString, "[M4 INSTANCE API]");
 8001e76:	f107 0308 	add.w	r3, r7, #8
 8001e7a:	4a17      	ldr	r2, [pc, #92]	; (8001ed8 <logRegion+0xd0>)
 8001e7c:	461c      	mov	r4, r3
 8001e7e:	4615      	mov	r5, r2
 8001e80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e84:	682b      	ldr	r3, [r5, #0]
 8001e86:	8023      	strh	r3, [r4, #0]
      break;
 8001e88:	e012      	b.n	8001eb0 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_MESSAGE:
      strcpy(logRegionString, "[M4 MESSAGE API]");
 8001e8a:	f107 0308 	add.w	r3, r7, #8
 8001e8e:	4a13      	ldr	r2, [pc, #76]	; (8001edc <logRegion+0xd4>)
 8001e90:	461c      	mov	r4, r3
 8001e92:	4615      	mov	r5, r2
 8001e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e98:	682b      	ldr	r3, [r5, #0]
 8001e9a:	7023      	strb	r3, [r4, #0]
      break;
 8001e9c:	e008      	b.n	8001eb0 <logRegion+0xa8>
    default:
      strcpy(logRegionString, "[M4]");
 8001e9e:	f107 0308 	add.w	r3, r7, #8
 8001ea2:	4a0f      	ldr	r2, [pc, #60]	; (8001ee0 <logRegion+0xd8>)
 8001ea4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ea8:	6018      	str	r0, [r3, #0]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	7019      	strb	r1, [r3, #0]
      break;
 8001eae:	bf00      	nop
  }

  return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 8001eb0:	8879      	ldrh	r1, [r7, #2]
 8001eb2:	f107 0308 	add.w	r3, r7, #8
 8001eb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <logRegion+0xdc>)
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f00d fbe1 	bl	800f680 <sniprintf>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	b29b      	uxth	r3, r3
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3728      	adds	r7, #40	; 0x28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	080109b4 	.word	0x080109b4
 8001ed0:	080109c8 	.word	0x080109c8
 8001ed4:	080109dc 	.word	0x080109dc
 8001ed8:	080109ec 	.word	0x080109ec
 8001edc:	08010a00 	.word	0x08010a00
 8001ee0:	08010a14 	.word	0x08010a14
 8001ee4:	08010a1c 	.word	0x08010a1c

08001ee8 <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d005      	beq.n	8001f04 <levelToString+0x1c>
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d005      	beq.n	8001f08 <levelToString+0x20>
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d105      	bne.n	8001f0c <levelToString+0x24>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <levelToString+0x34>)
 8001f02:	e004      	b.n	8001f0e <levelToString+0x26>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <levelToString+0x38>)
 8001f06:	e002      	b.n	8001f0e <levelToString+0x26>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <levelToString+0x3c>)
 8001f0a:	e000      	b.n	8001f0e <levelToString+0x26>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <levelToString+0x40>)
  }
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	08010a20 	.word	0x08010a20
 8001f20:	08010a28 	.word	0x08010a28
 8001f24:	08010a30 	.word	0x08010a30
 8001f28:	08010a38 	.word	0x08010a38

08001f2c <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 8001f2c:	b590      	push	{r4, r7, lr}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 8001f3c:	887c      	ldrh	r4, [r7, #2]
 8001f3e:	787b      	ldrb	r3, [r7, #1]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ffd1 	bl	8001ee8 <levelToString>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <logLevel+0x34>)
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f00d fb97 	bl	800f680 <sniprintf>
 8001f52:	4603      	mov	r3, r0
 8001f54:	b29b      	uxth	r3, r3
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd90      	pop	{r4, r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	08010a40 	.word	0x08010a40

08001f64 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8001f64:	b40c      	push	{r2, r3}
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b0c4      	sub	sp, #272	; 0x110
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	1dfb      	adds	r3, r7, #7
 8001f70:	701a      	strb	r2, [r3, #0]
 8001f72:	1dbb      	adds	r3, r7, #6
 8001f74:	460a      	mov	r2, r1
 8001f76:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8001f7e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001f82:	f107 020c 	add.w	r2, r7, #12
 8001f86:	18d0      	adds	r0, r2, r3
 8001f88:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001f8c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001f90:	b299      	uxth	r1, r3
 8001f92:	1dfb      	adds	r3, r7, #7
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	f7ff ffc8 	bl	8001f2c <logLevel>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8001faa:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001fae:	f107 020c 	add.w	r2, r7, #12
 8001fb2:	18d0      	adds	r0, r2, r3
 8001fb4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001fb8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001fbc:	b299      	uxth	r1, r3
 8001fbe:	1dbb      	adds	r3, r7, #6
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	f7ff ff20 	bl	8001e08 <logRegion>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogRegion);
#endif

  /* Parse user string */
  va_list paramList;
  va_start(paramList, aFormat);
 8001fd6:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001fda:	f107 0308 	add.w	r3, r7, #8
 8001fde:	601a      	str	r2, [r3, #0]
  length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8001fe0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001fe4:	f107 020c 	add.w	r2, r7, #12
 8001fe8:	18d0      	adds	r0, r2, r3
 8001fea:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001fee:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8001ff2:	f107 0308 	add.w	r3, r7, #8
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ffc:	f00d fba0 	bl	800f740 <vsniprintf>
 8002000:	4603      	mov	r3, r0
 8002002:	b29a      	uxth	r2, r3
 8002004:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002008:	4413      	add	r3, r2
 800200a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aFormat, paramList);
  logString[length++] = '\r';
 800200e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8002018:	461a      	mov	r2, r3
 800201a:	f107 030c 	add.w	r3, r7, #12
 800201e:	210d      	movs	r1, #13
 8002020:	5499      	strb	r1, [r3, r2]
  logString[length++] = '\n';
 8002022:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 800202c:	461a      	mov	r2, r3
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	210a      	movs	r1, #10
 8002034:	5499      	strb	r1, [r3, r2]
  logString[length++] = 0;
 8002036:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8002040:	461a      	mov	r2, r3
 8002042:	f107 030c 	add.w	r3, r7, #12
 8002046:	2100      	movs	r1, #0
 8002048:	5499      	strb	r1, [r3, r2]
  va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 800204a:	1dfb      	adds	r3, r7, #7
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b03      	cmp	r3, #3
 8002050:	d805      	bhi.n	800205e <logApplication+0xfa>
  {
    printf("%s", logString);
 8002052:	f107 030c 	add.w	r3, r7, #12
 8002056:	4619      	mov	r1, r3
 8002058:	4805      	ldr	r0, [pc, #20]	; (8002070 <logApplication+0x10c>)
 800205a:	f00d fa95 	bl	800f588 <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 800205e:	bf00      	nop
 8002060:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002064:	46bd      	mov	sp, r7
 8002066:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800206a:	b002      	add	sp, #8
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	08010a40 	.word	0x08010a40

08002074 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	e00a      	b.n	800209c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002086:	f3af 8000 	nop.w
 800208a:	4601      	mov	r1, r0
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	60ba      	str	r2, [r7, #8]
 8002092:	b2ca      	uxtb	r2, r1
 8002094:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	3301      	adds	r3, #1
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	dbf0      	blt.n	8002086 <_read+0x12>
	}

return len;
 80020a4:	687b      	ldr	r3, [r7, #4]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <_close>:
	}
	return len;
}

int _close(int file)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
	return -1;
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020d6:	605a      	str	r2, [r3, #4]
	return 0;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <_isatty>:

int _isatty(int file)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
	return 1;
 80020ee:	2301      	movs	r3, #1
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
	return 0;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002120:	4a14      	ldr	r2, [pc, #80]	; (8002174 <_sbrk+0x5c>)
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <_sbrk+0x60>)
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d102      	bne.n	800213a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <_sbrk+0x64>)
 8002136:	4a12      	ldr	r2, [pc, #72]	; (8002180 <_sbrk+0x68>)
 8002138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800213a:	4b10      	ldr	r3, [pc, #64]	; (800217c <_sbrk+0x64>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	429a      	cmp	r2, r3
 8002146:	d207      	bcs.n	8002158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002148:	f00d f9e0 	bl	800f50c <__errno>
 800214c:	4602      	mov	r2, r0
 800214e:	230c      	movs	r3, #12
 8002150:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002152:	f04f 33ff 	mov.w	r3, #4294967295
 8002156:	e009      	b.n	800216c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <_sbrk+0x64>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800215e:	4b07      	ldr	r3, [pc, #28]	; (800217c <_sbrk+0x64>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	4a05      	ldr	r2, [pc, #20]	; (800217c <_sbrk+0x64>)
 8002168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800216a:	68fb      	ldr	r3, [r7, #12]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20030000 	.word	0x20030000
 8002178:	00000400 	.word	0x00000400
 800217c:	20000230 	.word	0x20000230
 8002180:	20005e30 	.word	0x20005e30

08002184 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002188:	4b26      	ldr	r3, [pc, #152]	; (8002224 <SystemInit+0xa0>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800218e:	4b25      	ldr	r3, [pc, #148]	; (8002224 <SystemInit+0xa0>)
 8002190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002194:	4a23      	ldr	r2, [pc, #140]	; (8002224 <SystemInit+0xa0>)
 8002196:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800219a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800219e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80021ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80021b6:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80021b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021c2:	4b19      	ldr	r3, [pc, #100]	; (8002228 <SystemInit+0xa4>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80021c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021d4:	f023 0305 	bic.w	r3, r3, #5
 80021d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80021dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80021f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f4:	4a0d      	ldr	r2, [pc, #52]	; (800222c <SystemInit+0xa8>)
 80021f6:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80021f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fc:	4a0b      	ldr	r2, [pc, #44]	; (800222c <SystemInit+0xa8>)
 80021fe:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800220a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800220e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000ed00 	.word	0xe000ed00
 8002228:	faf6fefb 	.word	0xfaf6fefb
 800222c:	22041000 	.word	0x22041000

08002230 <LL_AHB2_GRP1_EnableClock>:
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800223e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4313      	orrs	r3, r2
 8002246:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4013      	ands	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002254:	68fb      	ldr	r3, [r7, #12]
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <LL_APB1_GRP2_EnableClock>:
{
 8002262:	b480      	push	{r7}
 8002264:	b085      	sub	sp, #20
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800226a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002270:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4313      	orrs	r3, r2
 8002278:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800227a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4013      	ands	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002286:	68fb      	ldr	r3, [r7, #12]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_APB2_GRP1_EnableClock>:
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800229c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4013      	ands	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022b8:	68fb      	ldr	r3, [r7, #12]
}
 80022ba:	bf00      	nop
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 80022cc:	4b22      	ldr	r3, [pc, #136]	; (8002358 <MX_LPUART1_UART_Init+0x90>)
 80022ce:	4a23      	ldr	r2, [pc, #140]	; (800235c <MX_LPUART1_UART_Init+0x94>)
 80022d0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80022d2:	4b21      	ldr	r3, [pc, #132]	; (8002358 <MX_LPUART1_UART_Init+0x90>)
 80022d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022d8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022da:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <MX_LPUART1_UART_Init+0x90>)
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80022e0:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <MX_LPUART1_UART_Init+0x90>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80022e6:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <MX_LPUART1_UART_Init+0x90>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80022ec:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <MX_LPUART1_UART_Init+0x90>)
 80022ee:	220c      	movs	r2, #12
 80022f0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f2:	4b19      	ldr	r3, [pc, #100]	; (8002358 <MX_LPUART1_UART_Init+0x90>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022f8:	4b17      	ldr	r3, [pc, #92]	; (8002358 <MX_LPUART1_UART_Init+0x90>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <MX_LPUART1_UART_Init+0x90>)
 8002300:	2200      	movs	r2, #0
 8002302:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <MX_LPUART1_UART_Init+0x90>)
 8002306:	2200      	movs	r2, #0
 8002308:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800230a:	4b13      	ldr	r3, [pc, #76]	; (8002358 <MX_LPUART1_UART_Init+0x90>)
 800230c:	2200      	movs	r2, #0
 800230e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002310:	4811      	ldr	r0, [pc, #68]	; (8002358 <MX_LPUART1_UART_Init+0x90>)
 8002312:	f003 f95b 	bl	80055cc <HAL_UART_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800231c:	f7ff fc00 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002320:	2100      	movs	r1, #0
 8002322:	480d      	ldr	r0, [pc, #52]	; (8002358 <MX_LPUART1_UART_Init+0x90>)
 8002324:	f004 fc95 	bl	8006c52 <HAL_UARTEx_SetTxFifoThreshold>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800232e:	f7ff fbf7 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002332:	2100      	movs	r1, #0
 8002334:	4808      	ldr	r0, [pc, #32]	; (8002358 <MX_LPUART1_UART_Init+0x90>)
 8002336:	f004 fcca 	bl	8006cce <HAL_UARTEx_SetRxFifoThreshold>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002340:	f7ff fbee 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002344:	4804      	ldr	r0, [pc, #16]	; (8002358 <MX_LPUART1_UART_Init+0x90>)
 8002346:	f004 fc4b 	bl	8006be0 <HAL_UARTEx_DisableFifoMode>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002350:	f7ff fbe6 	bl	8001b20 <Error_Handler>
  }

}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20005bec 	.word	0x20005bec
 800235c:	40008000 	.word	0x40008000

08002360 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002364:	4b23      	ldr	r3, [pc, #140]	; (80023f4 <MX_USART1_UART_Init+0x94>)
 8002366:	4a24      	ldr	r2, [pc, #144]	; (80023f8 <MX_USART1_UART_Init+0x98>)
 8002368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <MX_USART1_UART_Init+0x94>)
 800236c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <MX_USART1_UART_Init+0x94>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002378:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <MX_USART1_UART_Init+0x94>)
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800237e:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <MX_USART1_UART_Init+0x94>)
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002384:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <MX_USART1_UART_Init+0x94>)
 8002386:	220c      	movs	r2, #12
 8002388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800238a:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <MX_USART1_UART_Init+0x94>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002390:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <MX_USART1_UART_Init+0x94>)
 8002392:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002396:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002398:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <MX_USART1_UART_Init+0x94>)
 800239a:	2200      	movs	r2, #0
 800239c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <MX_USART1_UART_Init+0x94>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <MX_USART1_UART_Init+0x94>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023aa:	4812      	ldr	r0, [pc, #72]	; (80023f4 <MX_USART1_UART_Init+0x94>)
 80023ac:	f003 f90e 	bl	80055cc <HAL_UART_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80023b6:	f7ff fbb3 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023ba:	2100      	movs	r1, #0
 80023bc:	480d      	ldr	r0, [pc, #52]	; (80023f4 <MX_USART1_UART_Init+0x94>)
 80023be:	f004 fc48 	bl	8006c52 <HAL_UARTEx_SetTxFifoThreshold>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80023c8:	f7ff fbaa 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023cc:	2100      	movs	r1, #0
 80023ce:	4809      	ldr	r0, [pc, #36]	; (80023f4 <MX_USART1_UART_Init+0x94>)
 80023d0:	f004 fc7d 	bl	8006cce <HAL_UARTEx_SetRxFifoThreshold>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80023da:	f7ff fba1 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80023de:	4805      	ldr	r0, [pc, #20]	; (80023f4 <MX_USART1_UART_Init+0x94>)
 80023e0:	f004 fbfe 	bl	8006be0 <HAL_UARTEx_DisableFifoMode>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80023ea:	f7ff fb99 	bl	8001b20 <Error_Handler>
  }

}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20005cd8 	.word	0x20005cd8
 80023f8:	40013800 	.word	0x40013800

080023fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a4f      	ldr	r2, [pc, #316]	; (8002558 <HAL_UART_MspInit+0x15c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d148      	bne.n	80024b0 <HAL_UART_MspInit+0xb4>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800241e:	2001      	movs	r0, #1
 8002420:	f7ff ff1f 	bl	8002262 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002424:	2001      	movs	r0, #1
 8002426:	f7ff ff03 	bl	8002230 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800242a:	230c      	movs	r3, #12
 800242c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242e:	2302      	movs	r3, #2
 8002430:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800243a:	2308      	movs	r3, #8
 800243c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243e:	f107 030c 	add.w	r3, r7, #12
 8002442:	4619      	mov	r1, r3
 8002444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002448:	f000 fd82 	bl	8002f50 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 800244c:	4b43      	ldr	r3, [pc, #268]	; (800255c <HAL_UART_MspInit+0x160>)
 800244e:	4a44      	ldr	r2, [pc, #272]	; (8002560 <HAL_UART_MspInit+0x164>)
 8002450:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002452:	4b42      	ldr	r3, [pc, #264]	; (800255c <HAL_UART_MspInit+0x160>)
 8002454:	2211      	movs	r2, #17
 8002456:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002458:	4b40      	ldr	r3, [pc, #256]	; (800255c <HAL_UART_MspInit+0x160>)
 800245a:	2210      	movs	r2, #16
 800245c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800245e:	4b3f      	ldr	r3, [pc, #252]	; (800255c <HAL_UART_MspInit+0x160>)
 8002460:	2200      	movs	r2, #0
 8002462:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002464:	4b3d      	ldr	r3, [pc, #244]	; (800255c <HAL_UART_MspInit+0x160>)
 8002466:	2280      	movs	r2, #128	; 0x80
 8002468:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800246a:	4b3c      	ldr	r3, [pc, #240]	; (800255c <HAL_UART_MspInit+0x160>)
 800246c:	2200      	movs	r2, #0
 800246e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002470:	4b3a      	ldr	r3, [pc, #232]	; (800255c <HAL_UART_MspInit+0x160>)
 8002472:	2200      	movs	r2, #0
 8002474:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002476:	4b39      	ldr	r3, [pc, #228]	; (800255c <HAL_UART_MspInit+0x160>)
 8002478:	2200      	movs	r2, #0
 800247a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800247c:	4b37      	ldr	r3, [pc, #220]	; (800255c <HAL_UART_MspInit+0x160>)
 800247e:	2200      	movs	r2, #0
 8002480:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002482:	4836      	ldr	r0, [pc, #216]	; (800255c <HAL_UART_MspInit+0x160>)
 8002484:	f000 fa90 	bl	80029a8 <HAL_DMA_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 800248e:	f7ff fb47 	bl	8001b20 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a31      	ldr	r2, [pc, #196]	; (800255c <HAL_UART_MspInit+0x160>)
 8002496:	675a      	str	r2, [r3, #116]	; 0x74
 8002498:	4a30      	ldr	r2, [pc, #192]	; (800255c <HAL_UART_MspInit+0x160>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2105      	movs	r1, #5
 80024a2:	2025      	movs	r0, #37	; 0x25
 80024a4:	f000 fa29 	bl	80028fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80024a8:	2025      	movs	r0, #37	; 0x25
 80024aa:	f000 fa40 	bl	800292e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024ae:	e04e      	b.n	800254e <HAL_UART_MspInit+0x152>
  else if(uartHandle->Instance==USART1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a2b      	ldr	r2, [pc, #172]	; (8002564 <HAL_UART_MspInit+0x168>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d149      	bne.n	800254e <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART1_CLK_ENABLE();
 80024ba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024be:	f7ff fee9 	bl	8002294 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	2001      	movs	r0, #1
 80024c4:	f7ff feb4 	bl	8002230 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2302      	movs	r3, #2
 80024d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024da:	2307      	movs	r3, #7
 80024dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024de:	f107 030c 	add.w	r3, r7, #12
 80024e2:	4619      	mov	r1, r3
 80024e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e8:	f000 fd32 	bl	8002f50 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 80024ec:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <HAL_UART_MspInit+0x16c>)
 80024ee:	4a1f      	ldr	r2, [pc, #124]	; (800256c <HAL_UART_MspInit+0x170>)
 80024f0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80024f2:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <HAL_UART_MspInit+0x16c>)
 80024f4:	220f      	movs	r2, #15
 80024f6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024f8:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <HAL_UART_MspInit+0x16c>)
 80024fa:	2210      	movs	r2, #16
 80024fc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024fe:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <HAL_UART_MspInit+0x16c>)
 8002500:	2200      	movs	r2, #0
 8002502:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002504:	4b18      	ldr	r3, [pc, #96]	; (8002568 <HAL_UART_MspInit+0x16c>)
 8002506:	2280      	movs	r2, #128	; 0x80
 8002508:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800250a:	4b17      	ldr	r3, [pc, #92]	; (8002568 <HAL_UART_MspInit+0x16c>)
 800250c:	2200      	movs	r2, #0
 800250e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002510:	4b15      	ldr	r3, [pc, #84]	; (8002568 <HAL_UART_MspInit+0x16c>)
 8002512:	2200      	movs	r2, #0
 8002514:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <HAL_UART_MspInit+0x16c>)
 8002518:	2200      	movs	r2, #0
 800251a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_UART_MspInit+0x16c>)
 800251e:	2200      	movs	r2, #0
 8002520:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002522:	4811      	ldr	r0, [pc, #68]	; (8002568 <HAL_UART_MspInit+0x16c>)
 8002524:	f000 fa40 	bl	80029a8 <HAL_DMA_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_UART_MspInit+0x136>
      Error_Handler();
 800252e:	f7ff faf7 	bl	8001b20 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a0c      	ldr	r2, [pc, #48]	; (8002568 <HAL_UART_MspInit+0x16c>)
 8002536:	675a      	str	r2, [r3, #116]	; 0x74
 8002538:	4a0b      	ldr	r2, [pc, #44]	; (8002568 <HAL_UART_MspInit+0x16c>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800253e:	2200      	movs	r2, #0
 8002540:	2105      	movs	r1, #5
 8002542:	2024      	movs	r0, #36	; 0x24
 8002544:	f000 f9d9 	bl	80028fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002548:	2024      	movs	r0, #36	; 0x24
 800254a:	f000 f9f0 	bl	800292e <HAL_NVIC_EnableIRQ>
}
 800254e:	bf00      	nop
 8002550:	3720      	adds	r7, #32
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40008000 	.word	0x40008000
 800255c:	20005d64 	.word	0x20005d64
 8002560:	40020044 	.word	0x40020044
 8002564:	40013800 	.word	0x40013800
 8002568:	20005c78 	.word	0x20005c78
 800256c:	40020444 	.word	0x40020444

08002570 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002570:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002572:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002574:	3304      	adds	r3, #4

08002576 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002576:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002578:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800257a:	d3f9      	bcc.n	8002570 <CopyDataInit>
  bx lr
 800257c:	4770      	bx	lr

0800257e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800257e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002580:	3004      	adds	r0, #4

08002582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002582:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002584:	d3fb      	bcc.n	800257e <FillZerobss>
  bx lr
 8002586:	4770      	bx	lr

08002588 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002588:	480c      	ldr	r0, [pc, #48]	; (80025bc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800258a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800258c:	f7ff fdfa 	bl	8002184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002590:	480b      	ldr	r0, [pc, #44]	; (80025c0 <LoopForever+0x8>)
 8002592:	490c      	ldr	r1, [pc, #48]	; (80025c4 <LoopForever+0xc>)
 8002594:	4a0c      	ldr	r2, [pc, #48]	; (80025c8 <LoopForever+0x10>)
 8002596:	2300      	movs	r3, #0
 8002598:	f7ff ffed 	bl	8002576 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800259c:	480b      	ldr	r0, [pc, #44]	; (80025cc <LoopForever+0x14>)
 800259e:	490c      	ldr	r1, [pc, #48]	; (80025d0 <LoopForever+0x18>)
 80025a0:	2300      	movs	r3, #0
 80025a2:	f7ff ffee 	bl	8002582 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80025a6:	480b      	ldr	r0, [pc, #44]	; (80025d4 <LoopForever+0x1c>)
 80025a8:	490b      	ldr	r1, [pc, #44]	; (80025d8 <LoopForever+0x20>)
 80025aa:	2300      	movs	r3, #0
 80025ac:	f7ff ffe9 	bl	8002582 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025b0:	f00c ffb2 	bl	800f518 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80025b4:	f7ff fa08 	bl	80019c8 <main>

080025b8 <LoopForever>:

LoopForever:
  b LoopForever
 80025b8:	e7fe      	b.n	80025b8 <LoopForever>
 80025ba:	0000      	.short	0x0000
  ldr   r0, =_estack
 80025bc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80025c0:	20000004 	.word	0x20000004
 80025c4:	20000088 	.word	0x20000088
 80025c8:	08010fd4 	.word	0x08010fd4
  INIT_BSS _sbss, _ebss
 80025cc:	20000208 	.word	0x20000208
 80025d0:	20005e2c 	.word	0x20005e2c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80025d4:	200301ec 	.word	0x200301ec
 80025d8:	20030c73 	.word	0x20030c73

080025dc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025dc:	e7fe      	b.n	80025dc <ADC1_IRQHandler>
	...

080025e0 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4a04      	ldr	r2, [pc, #16]	; (80025fc <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6053      	str	r3, [r2, #4]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e0042000 	.word	0xe0042000

08002600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <HAL_Init+0x3c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a0b      	ldr	r2, [pc, #44]	; (800263c <HAL_Init+0x3c>)
 8002610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002614:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002616:	2003      	movs	r0, #3
 8002618:	f000 f964 	bl	80028e4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800261c:	2000      	movs	r0, #0
 800261e:	f7ff fb47 	bl	8001cb0 <HAL_InitTick>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	71fb      	strb	r3, [r7, #7]
 800262c:	e001      	b.n	8002632 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800262e:	f7ff fb06 	bl	8001c3e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002632:	79fb      	ldrb	r3, [r7, #7]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	58004000 	.word	0x58004000

08002640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_IncTick+0x20>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_IncTick+0x24>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4413      	add	r3, r2
 8002650:	4a04      	ldr	r2, [pc, #16]	; (8002664 <HAL_IncTick+0x24>)
 8002652:	6013      	str	r3, [r2, #0]
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	2000000c 	.word	0x2000000c
 8002664:	20005dc4 	.word	0x20005dc4

08002668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return uwTick;
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <HAL_GetTick+0x14>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20005dc4 	.word	0x20005dc4

08002680 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <HAL_GetTickPrio+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000008 	.word	0x20000008

08002698 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800269c:	f7ff ffa0 	bl	80025e0 <LL_DBGMCU_EnableDBGSleepMode>
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026c0:	4013      	ands	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d6:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	60d3      	str	r3, [r2, #12]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <__NVIC_GetPriorityGrouping+0x18>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	f003 0307 	and.w	r3, r3, #7
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	2b00      	cmp	r3, #0
 8002718:	db0b      	blt.n	8002732 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	4907      	ldr	r1, [pc, #28]	; (8002740 <__NVIC_EnableIRQ+0x38>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	2001      	movs	r0, #1
 800272a:	fa00 f202 	lsl.w	r2, r0, r2
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000e100 	.word	0xe000e100

08002744 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	2b00      	cmp	r3, #0
 8002754:	db10      	blt.n	8002778 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	f003 021f 	and.w	r2, r3, #31
 800275c:	4909      	ldr	r1, [pc, #36]	; (8002784 <__NVIC_DisableIRQ+0x40>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	2001      	movs	r0, #1
 8002766:	fa00 f202 	lsl.w	r2, r0, r2
 800276a:	3320      	adds	r3, #32
 800276c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002770:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002774:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000e100 	.word	0xe000e100

08002788 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	2b00      	cmp	r3, #0
 8002798:	db0c      	blt.n	80027b4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	f003 021f 	and.w	r2, r3, #31
 80027a0:	4907      	ldr	r1, [pc, #28]	; (80027c0 <__NVIC_SetPendingIRQ+0x38>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	2001      	movs	r0, #1
 80027aa:	fa00 f202 	lsl.w	r2, r0, r2
 80027ae:	3340      	adds	r3, #64	; 0x40
 80027b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000e100 	.word	0xe000e100

080027c4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	db0c      	blt.n	80027f0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	f003 021f 	and.w	r2, r3, #31
 80027dc:	4907      	ldr	r1, [pc, #28]	; (80027fc <__NVIC_ClearPendingIRQ+0x38>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2001      	movs	r0, #1
 80027e6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ea:	3360      	adds	r3, #96	; 0x60
 80027ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000e100 	.word	0xe000e100

08002800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	6039      	str	r1, [r7, #0]
 800280a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002810:	2b00      	cmp	r3, #0
 8002812:	db0a      	blt.n	800282a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	b2da      	uxtb	r2, r3
 8002818:	490c      	ldr	r1, [pc, #48]	; (800284c <__NVIC_SetPriority+0x4c>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	0112      	lsls	r2, r2, #4
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	440b      	add	r3, r1
 8002824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002828:	e00a      	b.n	8002840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	4908      	ldr	r1, [pc, #32]	; (8002850 <__NVIC_SetPriority+0x50>)
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	3b04      	subs	r3, #4
 8002838:	0112      	lsls	r2, r2, #4
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	440b      	add	r3, r1
 800283e:	761a      	strb	r2, [r3, #24]
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000e100 	.word	0xe000e100
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002854:	b480      	push	{r7}
 8002856:	b089      	sub	sp, #36	; 0x24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f1c3 0307 	rsb	r3, r3, #7
 800286e:	2b04      	cmp	r3, #4
 8002870:	bf28      	it	cs
 8002872:	2304      	movcs	r3, #4
 8002874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3304      	adds	r3, #4
 800287a:	2b06      	cmp	r3, #6
 800287c:	d902      	bls.n	8002884 <NVIC_EncodePriority+0x30>
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3b03      	subs	r3, #3
 8002882:	e000      	b.n	8002886 <NVIC_EncodePriority+0x32>
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002888:	f04f 32ff 	mov.w	r2, #4294967295
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43da      	mvns	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	401a      	ands	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800289c:	f04f 31ff 	mov.w	r1, #4294967295
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	43d9      	mvns	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	4313      	orrs	r3, r2
         );
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3724      	adds	r7, #36	; 0x24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80028c0:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <__NVIC_SystemReset+0x20>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80028cc:	4903      	ldr	r1, [pc, #12]	; (80028dc <__NVIC_SystemReset+0x20>)
 80028ce:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <__NVIC_SystemReset+0x24>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60cb      	str	r3, [r1, #12]
 80028d4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <__NVIC_SystemReset+0x1c>
 80028dc:	e000ed00 	.word	0xe000ed00
 80028e0:	05fa0004 	.word	0x05fa0004

080028e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff fed9 	bl	80026a4 <__NVIC_SetPriorityGrouping>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002908:	f7ff fef0 	bl	80026ec <__NVIC_GetPriorityGrouping>
 800290c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	6978      	ldr	r0, [r7, #20]
 8002914:	f7ff ff9e 	bl	8002854 <NVIC_EncodePriority>
 8002918:	4602      	mov	r2, r0
 800291a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff6d 	bl	8002800 <__NVIC_SetPriority>
}
 8002926:	bf00      	nop
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fee3 	bl	8002708 <__NVIC_EnableIRQ>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fef3 	bl	8002744 <__NVIC_DisableIRQ>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800296a:	f7ff ffa7 	bl	80028bc <__NVIC_SystemReset>

0800296e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	4603      	mov	r3, r0
 8002976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff03 	bl	8002788 <__NVIC_SetPendingIRQ>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff13 	bl	80027c4 <__NVIC_ClearPendingIRQ>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e08e      	b.n	8002ad8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	4b47      	ldr	r3, [pc, #284]	; (8002ae0 <HAL_DMA_Init+0x138>)
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d80f      	bhi.n	80029e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	4b45      	ldr	r3, [pc, #276]	; (8002ae4 <HAL_DMA_Init+0x13c>)
 80029ce:	4413      	add	r3, r2
 80029d0:	4a45      	ldr	r2, [pc, #276]	; (8002ae8 <HAL_DMA_Init+0x140>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	091b      	lsrs	r3, r3, #4
 80029d8:	009a      	lsls	r2, r3, #2
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a42      	ldr	r2, [pc, #264]	; (8002aec <HAL_DMA_Init+0x144>)
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40
 80029e4:	e00e      	b.n	8002a04 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	4b40      	ldr	r3, [pc, #256]	; (8002af0 <HAL_DMA_Init+0x148>)
 80029ee:	4413      	add	r3, r2
 80029f0:	4a3d      	ldr	r2, [pc, #244]	; (8002ae8 <HAL_DMA_Init+0x140>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	009a      	lsls	r2, r3, #2
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a3c      	ldr	r2, [pc, #240]	; (8002af4 <HAL_DMA_Init+0x14c>)
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fa16 	bl	8002e88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a64:	d102      	bne.n	8002a6c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a74:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002a78:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a82:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d010      	beq.n	8002aae <HAL_DMA_Init+0x106>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d80c      	bhi.n	8002aae <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 fa35 	bl	8002f04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002aaa:	605a      	str	r2, [r3, #4]
 8002aac:	e008      	b.n	8002ac0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40020407 	.word	0x40020407
 8002ae4:	bffdfff8 	.word	0xbffdfff8
 8002ae8:	cccccccd 	.word	0xcccccccd
 8002aec:	40020000 	.word	0x40020000
 8002af0:	bffdfbf8 	.word	0xbffdfbf8
 8002af4:	40020400 	.word	0x40020400

08002af8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_DMA_Start_IT+0x20>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e066      	b.n	8002be6 <HAL_DMA_Start_IT+0xee>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d155      	bne.n	8002bd8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0201 	bic.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f95a 	bl	8002e0a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d008      	beq.n	8002b70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 020e 	orr.w	r2, r2, #14
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	e00f      	b.n	8002b90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0204 	bic.w	r2, r2, #4
 8002b7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 020a 	orr.w	r2, r2, #10
 8002b8e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d007      	beq.n	8002bae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0201 	orr.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e005      	b.n	8002be4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002be0:	2302      	movs	r3, #2
 8002be2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b084      	sub	sp, #16
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d005      	beq.n	8002c12 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2204      	movs	r2, #4
 8002c0a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	73fb      	strb	r3, [r7, #15]
 8002c10:	e047      	b.n	8002ca2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 020e 	bic.w	r2, r2, #14
 8002c20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0201 	bic.w	r2, r2, #1
 8002c30:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	f003 021c 	and.w	r2, r3, #28
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	2101      	movs	r1, #1
 8002c50:	fa01 f202 	lsl.w	r2, r1, r2
 8002c54:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c5e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00c      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c80:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	4798      	blx	r3
    }
  }
  return status;
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc8:	f003 031c 	and.w	r3, r3, #28
 8002ccc:	2204      	movs	r2, #4
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d026      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x7a>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d021      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d107      	bne.n	8002d00 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0204 	bic.w	r2, r2, #4
 8002cfe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d04:	f003 021c 	and.w	r2, r3, #28
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	2104      	movs	r1, #4
 8002d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d12:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d071      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002d24:	e06c      	b.n	8002e00 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f003 031c 	and.w	r3, r3, #28
 8002d2e:	2202      	movs	r2, #2
 8002d30:	409a      	lsls	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d02e      	beq.n	8002d98 <HAL_DMA_IRQHandler+0xec>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d029      	beq.n	8002d98 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0320 	and.w	r3, r3, #32
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10b      	bne.n	8002d6a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 020a 	bic.w	r2, r2, #10
 8002d60:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	f003 021c 	and.w	r2, r3, #28
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	2102      	movs	r1, #2
 8002d78:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d038      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002d96:	e033      	b.n	8002e00 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	f003 031c 	and.w	r3, r3, #28
 8002da0:	2208      	movs	r2, #8
 8002da2:	409a      	lsls	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d02a      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x156>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d025      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 020e 	bic.w	r2, r2, #14
 8002dc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	f003 021c 	and.w	r2, r3, #28
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d004      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop
}
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b085      	sub	sp, #20
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
 8002e16:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e20:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d004      	beq.n	8002e34 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e32:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e38:	f003 021c 	and.w	r2, r3, #28
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	2101      	movs	r1, #1
 8002e42:	fa01 f202 	lsl.w	r2, r1, r2
 8002e46:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b10      	cmp	r3, #16
 8002e56:	d108      	bne.n	8002e6a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e68:	e007      	b.n	8002e7a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	60da      	str	r2, [r3, #12]
}
 8002e7a:	bf00      	nop
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
	...

08002e88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d80a      	bhi.n	8002eb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea0:	089b      	lsrs	r3, r3, #2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ea8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6493      	str	r3, [r2, #72]	; 0x48
 8002eb0:	e007      	b.n	8002ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	009a      	lsls	r2, r3, #2
 8002eba:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002ebc:	4413      	add	r3, r2
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	3b08      	subs	r3, #8
 8002eca:	4a0c      	ldr	r2, [pc, #48]	; (8002efc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002ed8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	40020407 	.word	0x40020407
 8002ef8:	4002081c 	.word	0x4002081c
 8002efc:	cccccccd 	.word	0xcccccccd
 8002f00:	40020880 	.word	0x40020880

08002f04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f14:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	461a      	mov	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002f28:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2201      	movs	r2, #1
 8002f34:	409a      	lsls	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	1000823f 	.word	0x1000823f
 8002f4c:	40020940 	.word	0x40020940

08002f50 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5e:	e14c      	b.n	80031fa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	2101      	movs	r1, #1
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 813e 	beq.w	80031f4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d00b      	beq.n	8002f98 <HAL_GPIO_Init+0x48>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d007      	beq.n	8002f98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f8c:	2b11      	cmp	r3, #17
 8002f8e:	d003      	beq.n	8002f98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b12      	cmp	r3, #18
 8002f96:	d130      	bne.n	8002ffa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4013      	ands	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fce:	2201      	movs	r2, #1
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	091b      	lsrs	r3, r3, #4
 8002fe4:	f003 0201 	and.w	r2, r3, #1
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	2203      	movs	r2, #3
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4013      	ands	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0xea>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b12      	cmp	r3, #18
 8003038:	d123      	bne.n	8003082 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	08da      	lsrs	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3208      	adds	r2, #8
 8003042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003046:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	220f      	movs	r2, #15
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4013      	ands	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	08da      	lsrs	r2, r3, #3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3208      	adds	r2, #8
 800307c:	6939      	ldr	r1, [r7, #16]
 800307e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	2203      	movs	r2, #3
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4013      	ands	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 0203 	and.w	r2, r3, #3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 8098 	beq.w	80031f4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80030c4:	4a54      	ldr	r2, [pc, #336]	; (8003218 <HAL_GPIO_Init+0x2c8>)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	089b      	lsrs	r3, r3, #2
 80030ca:	3302      	adds	r3, #2
 80030cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	220f      	movs	r2, #15
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030ee:	d019      	beq.n	8003124 <HAL_GPIO_Init+0x1d4>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a4a      	ldr	r2, [pc, #296]	; (800321c <HAL_GPIO_Init+0x2cc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d013      	beq.n	8003120 <HAL_GPIO_Init+0x1d0>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a49      	ldr	r2, [pc, #292]	; (8003220 <HAL_GPIO_Init+0x2d0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00d      	beq.n	800311c <HAL_GPIO_Init+0x1cc>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a48      	ldr	r2, [pc, #288]	; (8003224 <HAL_GPIO_Init+0x2d4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d007      	beq.n	8003118 <HAL_GPIO_Init+0x1c8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a47      	ldr	r2, [pc, #284]	; (8003228 <HAL_GPIO_Init+0x2d8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d101      	bne.n	8003114 <HAL_GPIO_Init+0x1c4>
 8003110:	2304      	movs	r3, #4
 8003112:	e008      	b.n	8003126 <HAL_GPIO_Init+0x1d6>
 8003114:	2307      	movs	r3, #7
 8003116:	e006      	b.n	8003126 <HAL_GPIO_Init+0x1d6>
 8003118:	2303      	movs	r3, #3
 800311a:	e004      	b.n	8003126 <HAL_GPIO_Init+0x1d6>
 800311c:	2302      	movs	r3, #2
 800311e:	e002      	b.n	8003126 <HAL_GPIO_Init+0x1d6>
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <HAL_GPIO_Init+0x1d6>
 8003124:	2300      	movs	r3, #0
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	f002 0203 	and.w	r2, r2, #3
 800312c:	0092      	lsls	r2, r2, #2
 800312e:	4093      	lsls	r3, r2
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003136:	4938      	ldr	r1, [pc, #224]	; (8003218 <HAL_GPIO_Init+0x2c8>)
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	089b      	lsrs	r3, r3, #2
 800313c:	3302      	adds	r3, #2
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003144:	4b39      	ldr	r3, [pc, #228]	; (800322c <HAL_GPIO_Init+0x2dc>)
 8003146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800314a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	43db      	mvns	r3, r3
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4013      	ands	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800316a:	4a30      	ldr	r2, [pc, #192]	; (800322c <HAL_GPIO_Init+0x2dc>)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003172:	4b2e      	ldr	r3, [pc, #184]	; (800322c <HAL_GPIO_Init+0x2dc>)
 8003174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	43db      	mvns	r3, r3
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4013      	ands	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003198:	4a24      	ldr	r2, [pc, #144]	; (800322c <HAL_GPIO_Init+0x2dc>)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031a0:	4b22      	ldr	r3, [pc, #136]	; (800322c <HAL_GPIO_Init+0x2dc>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031c4:	4a19      	ldr	r2, [pc, #100]	; (800322c <HAL_GPIO_Init+0x2dc>)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80031ca:	4b18      	ldr	r3, [pc, #96]	; (800322c <HAL_GPIO_Init+0x2dc>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4013      	ands	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031ee:	4a0f      	ldr	r2, [pc, #60]	; (800322c <HAL_GPIO_Init+0x2dc>)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	3301      	adds	r3, #1
 80031f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	f47f aeab 	bne.w	8002f60 <HAL_GPIO_Init+0x10>
  }
}
 800320a:	bf00      	nop
 800320c:	371c      	adds	r7, #28
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40010000 	.word	0x40010000
 800321c:	48000400 	.word	0x48000400
 8003220:	48000800 	.word	0x48000800
 8003224:	48000c00 	.word	0x48000c00
 8003228:	48001000 	.word	0x48001000
 800322c:	58000800 	.word	0x58000800

08003230 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003236:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <HAL_HSEM_IRQHandler+0x30>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800323c:	4b08      	ldr	r3, [pc, #32]	; (8003260 <HAL_HSEM_IRQHandler+0x30>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	43db      	mvns	r3, r3
 8003244:	4906      	ldr	r1, [pc, #24]	; (8003260 <HAL_HSEM_IRQHandler+0x30>)
 8003246:	4013      	ands	r3, r2
 8003248:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800324a:	4a05      	ldr	r2, [pc, #20]	; (8003260 <HAL_HSEM_IRQHandler+0x30>)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f807 	bl	8003264 <HAL_HSEM_FreeCallback>
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	58001500 	.word	0x58001500

08003264 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a04      	ldr	r2, [pc, #16]	; (8003294 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003286:	6013      	str	r3, [r2, #0]
}
 8003288:	bf00      	nop
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	58000400 	.word	0x58000400

08003298 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	58000400 	.word	0x58000400

080032b4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80032b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c6:	d101      	bne.n	80032cc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <LL_RCC_HSE_Enable>:
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80032dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ea:	6013      	str	r3, [r2, #0]
}
 80032ec:	bf00      	nop
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <LL_RCC_HSE_Disable>:
{
 80032f6:	b480      	push	{r7}
 80032f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80032fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003308:	6013      	str	r3, [r2, #0]
}
 800330a:	bf00      	nop
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <LL_RCC_HSE_IsReady>:
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003326:	d101      	bne.n	800332c <LL_RCC_HSE_IsReady+0x18>
 8003328:	2301      	movs	r3, #1
 800332a:	e000      	b.n	800332e <LL_RCC_HSE_IsReady+0x1a>
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <LL_RCC_HSI_Enable>:
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800333c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334a:	6013      	str	r3, [r2, #0]
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <LL_RCC_HSI_Disable>:
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800335a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003368:	6013      	str	r3, [r2, #0]
}
 800336a:	bf00      	nop
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <LL_RCC_HSI_IsReady>:
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003386:	d101      	bne.n	800338c <LL_RCC_HSI_IsReady+0x18>
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <LL_RCC_HSI_IsReady+0x1a>
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80033a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	061b      	lsls	r3, r3, #24
 80033ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033b2:	4313      	orrs	r3, r2
 80033b4:	604b      	str	r3, [r1, #4]
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <LL_RCC_HSI48_Enable>:
{
 80033c2:	b480      	push	{r7}
 80033c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80033c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <LL_RCC_HSI48_Disable>:
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80033e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033f4:	f023 0301 	bic.w	r3, r3, #1
 80033f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80033fc:	bf00      	nop
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <LL_RCC_HSI48_IsReady>:
{
 8003406:	b480      	push	{r7}
 8003408:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800340a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b02      	cmp	r3, #2
 8003418:	d101      	bne.n	800341e <LL_RCC_HSI48_IsReady+0x18>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <LL_RCC_HSI48_IsReady+0x1a>
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <LL_RCC_LSE_Enable>:
{
 800342a:	b480      	push	{r7}
 800342c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800342e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003436:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003442:	bf00      	nop
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <LL_RCC_LSE_Disable>:
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003458:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800345c:	f023 0301 	bic.w	r3, r3, #1
 8003460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <LL_RCC_LSE_EnableBypass>:
{
 800346e:	b480      	push	{r7}
 8003470:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800347e:	f043 0304 	orr.w	r3, r3, #4
 8003482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003486:	bf00      	nop
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <LL_RCC_LSE_DisableBypass>:
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034a0:	f023 0304 	bic.w	r3, r3, #4
 80034a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80034a8:	bf00      	nop
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <LL_RCC_LSE_IsReady>:
{
 80034b2:	b480      	push	{r7}
 80034b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80034b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d101      	bne.n	80034ca <LL_RCC_LSE_IsReady+0x18>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <LL_RCC_LSE_IsReady+0x1a>
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <LL_RCC_LSI1_Enable>:
{
 80034d6:	b480      	push	{r7}
 80034d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80034da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80034ee:	bf00      	nop
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <LL_RCC_LSI1_Disable>:
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80034fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003504:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003510:	bf00      	nop
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <LL_RCC_LSI1_IsReady>:
{
 800351a:	b480      	push	{r7}
 800351c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800351e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b02      	cmp	r3, #2
 800352c:	d101      	bne.n	8003532 <LL_RCC_LSI1_IsReady+0x18>
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <LL_RCC_LSI1_IsReady+0x1a>
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <LL_RCC_LSI2_Enable>:
{
 800353e:	b480      	push	{r7}
 8003540:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800354a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800354e:	f043 0304 	orr.w	r3, r3, #4
 8003552:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003556:	bf00      	nop
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <LL_RCC_LSI2_Disable>:
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800356c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003570:	f023 0304 	bic.w	r3, r3, #4
 8003574:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003578:	bf00      	nop
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <LL_RCC_LSI2_IsReady>:
{
 8003582:	b480      	push	{r7}
 8003584:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b08      	cmp	r3, #8
 8003594:	d101      	bne.n	800359a <LL_RCC_LSI2_IsReady+0x18>
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <LL_RCC_LSI2_IsReady+0x1a>
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <LL_RCC_LSI2_SetTrimming>:
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80035ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	021b      	lsls	r3, r3, #8
 80035be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <LL_RCC_MSI_Enable>:
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80035d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	6013      	str	r3, [r2, #0]
}
 80035e8:	bf00      	nop
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <LL_RCC_MSI_Disable>:
{
 80035f2:	b480      	push	{r7}
 80035f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80035f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003600:	f023 0301 	bic.w	r3, r3, #1
 8003604:	6013      	str	r3, [r2, #0]
}
 8003606:	bf00      	nop
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <LL_RCC_MSI_IsReady>:
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b02      	cmp	r3, #2
 8003620:	d101      	bne.n	8003626 <LL_RCC_MSI_IsReady+0x16>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <LL_RCC_MSI_IsReady+0x18>
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <LL_RCC_MSI_SetRange>:
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800363a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003644:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4313      	orrs	r3, r2
 800364c:	600b      	str	r3, [r1, #0]
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <LL_RCC_MSI_GetRange>:
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800366a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2bb0      	cmp	r3, #176	; 0xb0
 8003670:	d901      	bls.n	8003676 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003672:	23b0      	movs	r3, #176	; 0xb0
 8003674:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003676:	687b      	ldr	r3, [r7, #4]
}
 8003678:	4618      	mov	r0, r3
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800368c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <LL_RCC_SetSysClkSource>:
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80036b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f023 0203 	bic.w	r2, r3, #3
 80036c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	608b      	str	r3, [r1, #8]
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <LL_RCC_GetSysClkSource>:
{
 80036d6:	b480      	push	{r7}
 80036d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80036da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 030c 	and.w	r3, r3, #12
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <LL_RCC_SetAHBPrescaler>:
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80036f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003700:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800371e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003722:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003726:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800372a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <LL_RCC_SetAHB4Prescaler>:
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800374a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003752:	f023 020f 	bic.w	r2, r3, #15
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <LL_RCC_SetAPB1Prescaler>:
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003782:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4313      	orrs	r3, r2
 800378a:	608b      	str	r3, [r1, #8]
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <LL_RCC_SetAPB2Prescaler>:
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80037a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	608b      	str	r3, [r1, #8]
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <LL_RCC_GetAHBPrescaler>:
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80037c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <LL_C2_RCC_GetAHBPrescaler>:
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80037dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80037e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <LL_RCC_GetAHB4Prescaler>:
{
 80037f2:	b480      	push	{r7}
 80037f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80037f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <LL_RCC_GetAPB1Prescaler>:
{
 800380e:	b480      	push	{r7}
 8003810:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800381c:	4618      	mov	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <LL_RCC_GetAPB2Prescaler>:
{
 8003826:	b480      	push	{r7}
 8003828:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800382a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003834:	4618      	mov	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800383e:	b480      	push	{r7}
 8003840:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800384c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003850:	6013      	str	r3, [r2, #0]
}
 8003852:	bf00      	nop
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800386a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800386e:	6013      	str	r3, [r2, #0]
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800387a:	b480      	push	{r7}
 800387c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800387e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003888:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800388c:	d101      	bne.n	8003892 <LL_RCC_PLL_IsReady+0x18>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <LL_RCC_PLL_IsReady+0x1a>
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800389e:	b480      	push	{r7}
 80038a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80038a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80038bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80038d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80038de:	4618      	mov	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80038ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f003 0303 	and.w	r3, r3, #3
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003912:	d101      	bne.n	8003918 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800392c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003934:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003938:	d101      	bne.n	800393e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800394a:	b480      	push	{r7}
 800394c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800394e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003952:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395e:	d101      	bne.n	8003964 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003982:	d101      	bne.n	8003988 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039a6:	d101      	bne.n	80039ac <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b08d      	sub	sp, #52	; 0x34
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e37e      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0320 	and.w	r3, r3, #32
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 8092 	beq.w	8003afc <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039d8:	f7ff fe7d 	bl	80036d6 <LL_RCC_GetSysClkSource>
 80039dc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039de:	f7ff ff83 	bl	80038e8 <LL_RCC_PLL_GetMainSource>
 80039e2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80039e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_RCC_OscConfig+0x3e>
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	2b0c      	cmp	r3, #12
 80039ee:	d14c      	bne.n	8003a8a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80039f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d149      	bne.n	8003a8a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039f6:	f7ff fe0b 	bl	8003610 <LL_RCC_MSI_IsReady>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_RCC_OscConfig+0x54>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e35d      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003a10:	f7ff fe23 	bl	800365a <LL_RCC_MSI_GetRange>
 8003a14:	4603      	mov	r3, r0
 8003a16:	429c      	cmp	r4, r3
 8003a18:	d914      	bls.n	8003a44 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fd72 	bl	8004508 <RCC_SetFlashLatencyFromMSIRange>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e34c      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fdfd 	bl	8003632 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff fe21 	bl	8003684 <LL_RCC_MSI_SetCalibTrimming>
 8003a42:	e013      	b.n	8003a6c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff fdf2 	bl	8003632 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff fe16 	bl	8003684 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fd53 	bl	8004508 <RCC_SetFlashLatencyFromMSIRange>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e32d      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003a6c:	f000 fcda 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4bb3      	ldr	r3, [pc, #716]	; (8003d40 <HAL_RCC_OscConfig+0x388>)
 8003a74:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a76:	4bb3      	ldr	r3, [pc, #716]	; (8003d44 <HAL_RCC_OscConfig+0x38c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fe f918 	bl	8001cb0 <HAL_InitTick>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d039      	beq.n	8003afa <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e31e      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01e      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a92:	f7ff fd9f 	bl	80035d4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a96:	f7fe fde7 	bl	8002668 <HAL_GetTick>
 8003a9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a9e:	f7fe fde3 	bl	8002668 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e30b      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003ab0:	f7ff fdae 	bl	8003610 <LL_RCC_MSI_IsReady>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0f1      	beq.n	8003a9e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fdb7 	bl	8003632 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff fddb 	bl	8003684 <LL_RCC_MSI_SetCalibTrimming>
 8003ace:	e015      	b.n	8003afc <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ad0:	f7ff fd8f 	bl	80035f2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ad4:	f7fe fdc8 	bl	8002668 <HAL_GetTick>
 8003ad8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003adc:	f7fe fdc4 	bl	8002668 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e2ec      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003aee:	f7ff fd8f 	bl	8003610 <LL_RCC_MSI_IsReady>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f1      	bne.n	8003adc <HAL_RCC_OscConfig+0x124>
 8003af8:	e000      	b.n	8003afc <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003afa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d04e      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b08:	f7ff fde5 	bl	80036d6 <LL_RCC_GetSysClkSource>
 8003b0c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b0e:	f7ff feeb 	bl	80038e8 <LL_RCC_PLL_GetMainSource>
 8003b12:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d005      	beq.n	8003b26 <HAL_RCC_OscConfig+0x16e>
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	2b0c      	cmp	r3, #12
 8003b1e:	d10d      	bne.n	8003b3c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d10a      	bne.n	8003b3c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b26:	f7ff fbf5 	bl	8003314 <LL_RCC_HSE_IsReady>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d039      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x1ec>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d135      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e2c5      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b44:	d102      	bne.n	8003b4c <HAL_RCC_OscConfig+0x194>
 8003b46:	f7ff fbc7 	bl	80032d8 <LL_RCC_HSE_Enable>
 8003b4a:	e001      	b.n	8003b50 <HAL_RCC_OscConfig+0x198>
 8003b4c:	f7ff fbd3 	bl	80032f6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d012      	beq.n	8003b7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fe fd86 	bl	8002668 <HAL_GetTick>
 8003b5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b60:	f7fe fd82 	bl	8002668 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	; 0x64
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e2aa      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003b72:	f7ff fbcf 	bl	8003314 <LL_RCC_HSE_IsReady>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f1      	beq.n	8003b60 <HAL_RCC_OscConfig+0x1a8>
 8003b7c:	e013      	b.n	8003ba6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7e:	f7fe fd73 	bl	8002668 <HAL_GetTick>
 8003b82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b86:	f7fe fd6f 	bl	8002668 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b64      	cmp	r3, #100	; 0x64
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e297      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003b98:	f7ff fbbc 	bl	8003314 <LL_RCC_HSE_IsReady>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f1      	bne.n	8003b86 <HAL_RCC_OscConfig+0x1ce>
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d051      	beq.n	8003c56 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bb2:	f7ff fd90 	bl	80036d6 <LL_RCC_GetSysClkSource>
 8003bb6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bb8:	f7ff fe96 	bl	80038e8 <LL_RCC_PLL_GetMainSource>
 8003bbc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d005      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x218>
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b0c      	cmp	r3, #12
 8003bc8:	d113      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d110      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bd0:	f7ff fbd0 	bl	8003374 <LL_RCC_HSI_IsReady>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <HAL_RCC_OscConfig+0x22e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e270      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff fbd4 	bl	8003398 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bf0:	e031      	b.n	8003c56 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d019      	beq.n	8003c2e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bfa:	f7ff fb9d 	bl	8003338 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfe:	f7fe fd33 	bl	8002668 <HAL_GetTick>
 8003c02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c06:	f7fe fd2f 	bl	8002668 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e257      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003c18:	f7ff fbac 	bl	8003374 <LL_RCC_HSI_IsReady>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f1      	beq.n	8003c06 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff fbb6 	bl	8003398 <LL_RCC_HSI_SetCalibTrimming>
 8003c2c:	e013      	b.n	8003c56 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c2e:	f7ff fb92 	bl	8003356 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7fe fd19 	bl	8002668 <HAL_GetTick>
 8003c36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c3a:	f7fe fd15 	bl	8002668 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e23d      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003c4c:	f7ff fb92 	bl	8003374 <LL_RCC_HSI_IsReady>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f1      	bne.n	8003c3a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80a3 	beq.w	8003db6 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d076      	beq.n	8003d66 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d046      	beq.n	8003d12 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003c84:	f7ff fc49 	bl	800351a <LL_RCC_LSI1_IsReady>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d113      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003c8e:	f7ff fc22 	bl	80034d6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c92:	f7fe fce9 	bl	8002668 <HAL_GetTick>
 8003c96:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003c9a:	f7fe fce5 	bl	8002668 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e20d      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003cac:	f7ff fc35 	bl	800351a <LL_RCC_LSI1_IsReady>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f1      	beq.n	8003c9a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003cb6:	f7ff fc42 	bl	800353e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cba:	f7fe fcd5 	bl	8002668 <HAL_GetTick>
 8003cbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003cc2:	f7fe fcd1 	bl	8002668 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e1f9      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003cd4:	f7ff fc55 	bl	8003582 <LL_RCC_LSI2_IsReady>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f1      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff fc5f 	bl	80035a6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003ce8:	f7ff fc06 	bl	80034f8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fe fcbc 	bl	8002668 <HAL_GetTick>
 8003cf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003cf4:	f7fe fcb8 	bl	8002668 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e1e0      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003d06:	f7ff fc08 	bl	800351a <LL_RCC_LSI1_IsReady>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1f1      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x33c>
 8003d10:	e051      	b.n	8003db6 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003d12:	f7ff fbe0 	bl	80034d6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d16:	f7fe fca7 	bl	8002668 <HAL_GetTick>
 8003d1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003d1e:	f7fe fca3 	bl	8002668 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e1cb      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003d30:	f7ff fbf3 	bl	800351a <LL_RCC_LSI1_IsReady>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f1      	beq.n	8003d1e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003d3a:	f7ff fc11 	bl	8003560 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003d3e:	e00c      	b.n	8003d5a <HAL_RCC_OscConfig+0x3a2>
 8003d40:	20000004 	.word	0x20000004
 8003d44:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003d48:	f7fe fc8e 	bl	8002668 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e1b6      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003d5a:	f7ff fc12 	bl	8003582 <LL_RCC_LSI2_IsReady>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1f1      	bne.n	8003d48 <HAL_RCC_OscConfig+0x390>
 8003d64:	e027      	b.n	8003db6 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003d66:	f7ff fbfb 	bl	8003560 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6a:	f7fe fc7d 	bl	8002668 <HAL_GetTick>
 8003d6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003d72:	f7fe fc79 	bl	8002668 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e1a1      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003d84:	f7ff fbfd 	bl	8003582 <LL_RCC_LSI2_IsReady>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f1      	bne.n	8003d72 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003d8e:	f7ff fbb3 	bl	80034f8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d92:	f7fe fc69 	bl	8002668 <HAL_GetTick>
 8003d96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003d9a:	f7fe fc65 	bl	8002668 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e18d      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003dac:	f7ff fbb5 	bl	800351a <LL_RCC_LSI1_IsReady>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f1      	bne.n	8003d9a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d05b      	beq.n	8003e7a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc2:	4bb5      	ldr	r3, [pc, #724]	; (8004098 <HAL_RCC_OscConfig+0x6e0>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d114      	bne.n	8003df8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003dce:	f7ff fa53 	bl	8003278 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd2:	f7fe fc49 	bl	8002668 <HAL_GetTick>
 8003dd6:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dda:	f7fe fc45 	bl	8002668 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e16d      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dec:	4baa      	ldr	r3, [pc, #680]	; (8004098 <HAL_RCC_OscConfig+0x6e0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d102      	bne.n	8003e06 <HAL_RCC_OscConfig+0x44e>
 8003e00:	f7ff fb13 	bl	800342a <LL_RCC_LSE_Enable>
 8003e04:	e00c      	b.n	8003e20 <HAL_RCC_OscConfig+0x468>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b05      	cmp	r3, #5
 8003e0c:	d104      	bne.n	8003e18 <HAL_RCC_OscConfig+0x460>
 8003e0e:	f7ff fb2e 	bl	800346e <LL_RCC_LSE_EnableBypass>
 8003e12:	f7ff fb0a 	bl	800342a <LL_RCC_LSE_Enable>
 8003e16:	e003      	b.n	8003e20 <HAL_RCC_OscConfig+0x468>
 8003e18:	f7ff fb18 	bl	800344c <LL_RCC_LSE_Disable>
 8003e1c:	f7ff fb38 	bl	8003490 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d014      	beq.n	8003e52 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fe fc1e 	bl	8002668 <HAL_GetTick>
 8003e2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e30:	f7fe fc1a 	bl	8002668 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e140      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003e46:	f7ff fb34 	bl	80034b2 <LL_RCC_LSE_IsReady>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0ef      	beq.n	8003e30 <HAL_RCC_OscConfig+0x478>
 8003e50:	e013      	b.n	8003e7a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e52:	f7fe fc09 	bl	8002668 <HAL_GetTick>
 8003e56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003e58:	e00a      	b.n	8003e70 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5a:	f7fe fc05 	bl	8002668 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e12b      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003e70:	f7ff fb1f 	bl	80034b2 <LL_RCC_LSE_IsReady>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1ef      	bne.n	8003e5a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d02c      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d014      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e8e:	f7ff fa98 	bl	80033c2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e92:	f7fe fbe9 	bl	8002668 <HAL_GetTick>
 8003e96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e9a:	f7fe fbe5 	bl	8002668 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e10d      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003eac:	f7ff faab 	bl	8003406 <LL_RCC_HSI48_IsReady>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f1      	beq.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
 8003eb6:	e013      	b.n	8003ee0 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003eb8:	f7ff fa94 	bl	80033e4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebc:	f7fe fbd4 	bl	8002668 <HAL_GetTick>
 8003ec0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ec4:	f7fe fbd0 	bl	8002668 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e0f8      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003ed6:	f7ff fa96 	bl	8003406 <LL_RCC_HSI48_IsReady>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f1      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80ee 	beq.w	80040c6 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eea:	f7ff fbf4 	bl	80036d6 <LL_RCC_GetSysClkSource>
 8003eee:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	f040 80af 	bne.w	8004060 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f003 0203 	and.w	r2, r3, #3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d123      	bne.n	8003f58 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d11c      	bne.n	8003f58 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	0a1b      	lsrs	r3, r3, #8
 8003f22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d114      	bne.n	8003f58 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d10d      	bne.n	8003f58 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d106      	bne.n	8003f58 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d05d      	beq.n	8004014 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	2b0c      	cmp	r3, #12
 8003f5c:	d058      	beq.n	8004010 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0ab      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f70:	f7ff fc74 	bl	800385c <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f74:	f7fe fb78 	bl	8002668 <HAL_GetTick>
 8003f78:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fe fb74 	bl	8002668 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e09c      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ef      	bne.n	8003f7c <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	4b3e      	ldr	r3, [pc, #248]	; (800409c <HAL_RCC_OscConfig+0x6e4>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fae:	4311      	orrs	r1, r2
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fb4:	0212      	lsls	r2, r2, #8
 8003fb6:	4311      	orrs	r1, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fbc:	4311      	orrs	r1, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fc2:	4311      	orrs	r1, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fd2:	f7ff fc34 	bl	800383e <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fe6:	f7fe fb3f 	bl	8002668 <HAL_GetTick>
 8003fea:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fee:	f7fe fb3b 	bl	8002668 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e063      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0ef      	beq.n	8003fee <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800400e:	e05a      	b.n	80040c6 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e059      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d151      	bne.n	80040c6 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004022:	f7ff fc0c 	bl	800383e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004034:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004036:	f7fe fb17 	bl	8002668 <HAL_GetTick>
 800403a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403e:	f7fe fb13 	bl	8002668 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e03b      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0ef      	beq.n	800403e <HAL_RCC_OscConfig+0x686>
 800405e:	e032      	b.n	80040c6 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b0c      	cmp	r3, #12
 8004064:	d02d      	beq.n	80040c2 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004066:	f7ff fbf9 	bl	800385c <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800406a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004074:	f023 0303 	bic.w	r3, r3, #3
 8004078:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800407a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004084:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408e:	f7fe faeb 	bl	8002668 <HAL_GetTick>
 8004092:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004094:	e00d      	b.n	80040b2 <HAL_RCC_OscConfig+0x6fa>
 8004096:	bf00      	nop
 8004098:	58000400 	.word	0x58000400
 800409c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a0:	f7fe fae2 	bl	8002668 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e00a      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1ef      	bne.n	80040a0 <HAL_RCC_OscConfig+0x6e8>
 80040c0:	e001      	b.n	80040c6 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3734      	adds	r7, #52	; 0x34
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd90      	pop	{r4, r7, pc}

080040d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e12d      	b.n	8004340 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040e4:	4b98      	ldr	r3, [pc, #608]	; (8004348 <HAL_RCC_ClockConfig+0x278>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d91b      	bls.n	800412a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f2:	4b95      	ldr	r3, [pc, #596]	; (8004348 <HAL_RCC_ClockConfig+0x278>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f023 0207 	bic.w	r2, r3, #7
 80040fa:	4993      	ldr	r1, [pc, #588]	; (8004348 <HAL_RCC_ClockConfig+0x278>)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	4313      	orrs	r3, r2
 8004100:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004102:	f7fe fab1 	bl	8002668 <HAL_GetTick>
 8004106:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004108:	e008      	b.n	800411c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800410a:	f7fe faad 	bl	8002668 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e111      	b.n	8004340 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411c:	4b8a      	ldr	r3, [pc, #552]	; (8004348 <HAL_RCC_ClockConfig+0x278>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d1ef      	bne.n	800410a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d016      	beq.n	8004164 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff fad7 	bl	80036ee <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004140:	f7fe fa92 	bl	8002668 <HAL_GetTick>
 8004144:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004146:	e008      	b.n	800415a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004148:	f7fe fa8e 	bl	8002668 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e0f2      	b.n	8004340 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800415a:	f7ff fbd1 	bl	8003900 <LL_RCC_IsActiveFlag_HPRE>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f1      	beq.n	8004148 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b00      	cmp	r3, #0
 800416e:	d016      	beq.n	800419e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff face 	bl	8003716 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800417a:	f7fe fa75 	bl	8002668 <HAL_GetTick>
 800417e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004180:	e008      	b.n	8004194 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004182:	f7fe fa71 	bl	8002668 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e0d5      	b.n	8004340 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004194:	f7ff fbc6 	bl	8003924 <LL_RCC_IsActiveFlag_C2HPRE>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f1      	beq.n	8004182 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d016      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fac7 	bl	8003742 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80041b4:	f7fe fa58 	bl	8002668 <HAL_GetTick>
 80041b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80041bc:	f7fe fa54 	bl	8002668 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e0b8      	b.n	8004340 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80041ce:	f7ff fbbc 	bl	800394a <LL_RCC_IsActiveFlag_SHDHPRE>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0f1      	beq.n	80041bc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d016      	beq.n	8004212 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff fac1 	bl	8003770 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80041ee:	f7fe fa3b 	bl	8002668 <HAL_GetTick>
 80041f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80041f6:	f7fe fa37 	bl	8002668 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e09b      	b.n	8004340 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004208:	f7ff fbb2 	bl	8003970 <LL_RCC_IsActiveFlag_PPRE1>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f1      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d017      	beq.n	800424e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff fab7 	bl	8003798 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800422a:	f7fe fa1d 	bl	8002668 <HAL_GetTick>
 800422e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004230:	e008      	b.n	8004244 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004232:	f7fe fa19 	bl	8002668 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e07d      	b.n	8004340 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004244:	f7ff fba6 	bl	8003994 <LL_RCC_IsActiveFlag_PPRE2>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f1      	beq.n	8004232 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d043      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d106      	bne.n	8004270 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004262:	f7ff f857 	bl	8003314 <LL_RCC_HSE_IsReady>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d11e      	bne.n	80042aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e067      	b.n	8004340 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b03      	cmp	r3, #3
 8004276:	d106      	bne.n	8004286 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004278:	f7ff faff 	bl	800387a <LL_RCC_PLL_IsReady>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d113      	bne.n	80042aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e05c      	b.n	8004340 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800428e:	f7ff f9bf 	bl	8003610 <LL_RCC_MSI_IsReady>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d108      	bne.n	80042aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e051      	b.n	8004340 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800429c:	f7ff f86a 	bl	8003374 <LL_RCC_HSI_IsReady>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e04a      	b.n	8004340 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff f9fd 	bl	80036ae <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b4:	f7fe f9d8 	bl	8002668 <HAL_GetTick>
 80042b8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042bc:	f7fe f9d4 	bl	8002668 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e036      	b.n	8004340 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	f7ff fa00 	bl	80036d6 <LL_RCC_GetSysClkSource>
 80042d6:	4602      	mov	r2, r0
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	429a      	cmp	r2, r3
 80042e0:	d1ec      	bne.n	80042bc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042e2:	4b19      	ldr	r3, [pc, #100]	; (8004348 <HAL_RCC_ClockConfig+0x278>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d21b      	bcs.n	8004328 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f0:	4b15      	ldr	r3, [pc, #84]	; (8004348 <HAL_RCC_ClockConfig+0x278>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f023 0207 	bic.w	r2, r3, #7
 80042f8:	4913      	ldr	r1, [pc, #76]	; (8004348 <HAL_RCC_ClockConfig+0x278>)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004300:	f7fe f9b2 	bl	8002668 <HAL_GetTick>
 8004304:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004306:	e008      	b.n	800431a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004308:	f7fe f9ae 	bl	8002668 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e012      	b.n	8004340 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <HAL_RCC_ClockConfig+0x278>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d1ef      	bne.n	8004308 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004328:	f000 f87c 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b07      	ldr	r3, [pc, #28]	; (800434c <HAL_RCC_ClockConfig+0x27c>)
 8004330:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004332:	f7fe f9a5 	bl	8002680 <HAL_GetTickPrio>
 8004336:	4603      	mov	r3, r0
 8004338:	4618      	mov	r0, r3
 800433a:	f7fd fcb9 	bl	8001cb0 <HAL_InitTick>
 800433e:	4603      	mov	r3, r0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	58004000 	.word	0x58004000
 800434c:	20000004 	.word	0x20000004

08004350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004350:	b590      	push	{r4, r7, lr}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004356:	f7ff f9be 	bl	80036d6 <LL_RCC_GetSysClkSource>
 800435a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004362:	f7ff f97a 	bl	800365a <LL_RCC_MSI_GetRange>
 8004366:	4603      	mov	r3, r0
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	4a2a      	ldr	r2, [pc, #168]	; (8004418 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	e04a      	b.n	800440e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b04      	cmp	r3, #4
 800437c:	d102      	bne.n	8004384 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800437e:	4b27      	ldr	r3, [pc, #156]	; (800441c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	e044      	b.n	800440e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b08      	cmp	r3, #8
 8004388:	d10a      	bne.n	80043a0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800438a:	f7fe ff93 	bl	80032b4 <LL_RCC_HSE_IsEnabledDiv2>
 800438e:	4603      	mov	r3, r0
 8004390:	2b01      	cmp	r3, #1
 8004392:	d102      	bne.n	800439a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004394:	4b21      	ldr	r3, [pc, #132]	; (800441c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	e039      	b.n	800440e <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800439a:	4b21      	ldr	r3, [pc, #132]	; (8004420 <HAL_RCC_GetSysClockFreq+0xd0>)
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	e036      	b.n	800440e <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80043a0:	f7ff faa2 	bl	80038e8 <LL_RCC_PLL_GetMainSource>
 80043a4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d002      	beq.n	80043b2 <HAL_RCC_GetSysClockFreq+0x62>
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d003      	beq.n	80043b8 <HAL_RCC_GetSysClockFreq+0x68>
 80043b0:	e00d      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80043b2:	4b1a      	ldr	r3, [pc, #104]	; (800441c <HAL_RCC_GetSysClockFreq+0xcc>)
 80043b4:	60bb      	str	r3, [r7, #8]
        break;
 80043b6:	e015      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80043b8:	f7fe ff7c 	bl	80032b4 <LL_RCC_HSE_IsEnabledDiv2>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d102      	bne.n	80043c8 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80043c2:	4b16      	ldr	r3, [pc, #88]	; (800441c <HAL_RCC_GetSysClockFreq+0xcc>)
 80043c4:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80043c6:	e00d      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 80043c8:	4b15      	ldr	r3, [pc, #84]	; (8004420 <HAL_RCC_GetSysClockFreq+0xd0>)
 80043ca:	60bb      	str	r3, [r7, #8]
        break;
 80043cc:	e00a      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80043ce:	f7ff f944 	bl	800365a <LL_RCC_MSI_GetRange>
 80043d2:	4603      	mov	r3, r0
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	4a0f      	ldr	r2, [pc, #60]	; (8004418 <HAL_RCC_GetSysClockFreq+0xc8>)
 80043dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043e0:	60bb      	str	r3, [r7, #8]
        break;
 80043e2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80043e4:	f7ff fa5b 	bl	800389e <LL_RCC_PLL_GetN>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	fb03 f402 	mul.w	r4, r3, r2
 80043f0:	f7ff fa6e 	bl	80038d0 <LL_RCC_PLL_GetDivider>
 80043f4:	4603      	mov	r3, r0
 80043f6:	091b      	lsrs	r3, r3, #4
 80043f8:	3301      	adds	r3, #1
 80043fa:	fbb4 f4f3 	udiv	r4, r4, r3
 80043fe:	f7ff fa5b 	bl	80038b8 <LL_RCC_PLL_GetR>
 8004402:	4603      	mov	r3, r0
 8004404:	0f5b      	lsrs	r3, r3, #29
 8004406:	3301      	adds	r3, #1
 8004408:	fbb4 f3f3 	udiv	r3, r4, r3
 800440c:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800440e:	68fb      	ldr	r3, [r7, #12]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	bd90      	pop	{r4, r7, pc}
 8004418:	08010e14 	.word	0x08010e14
 800441c:	00f42400 	.word	0x00f42400
 8004420:	01e84800 	.word	0x01e84800

08004424 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004424:	b598      	push	{r3, r4, r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004428:	f7ff ff92 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 800442c:	4604      	mov	r4, r0
 800442e:	f7ff f9c7 	bl	80037c0 <LL_RCC_GetAHBPrescaler>
 8004432:	4603      	mov	r3, r0
 8004434:	091b      	lsrs	r3, r3, #4
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	4a03      	ldr	r2, [pc, #12]	; (8004448 <HAL_RCC_GetHCLKFreq+0x24>)
 800443c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004440:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004444:	4618      	mov	r0, r3
 8004446:	bd98      	pop	{r3, r4, r7, pc}
 8004448:	08010db4 	.word	0x08010db4

0800444c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800444c:	b598      	push	{r3, r4, r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004450:	f7ff ffe8 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 8004454:	4604      	mov	r4, r0
 8004456:	f7ff f9da 	bl	800380e <LL_RCC_GetAPB1Prescaler>
 800445a:	4603      	mov	r3, r0
 800445c:	0a1b      	lsrs	r3, r3, #8
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	4a04      	ldr	r2, [pc, #16]	; (8004474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004468:	f003 031f 	and.w	r3, r3, #31
 800446c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004470:	4618      	mov	r0, r3
 8004472:	bd98      	pop	{r3, r4, r7, pc}
 8004474:	08010df4 	.word	0x08010df4

08004478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004478:	b598      	push	{r3, r4, r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800447c:	f7ff ffd2 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 8004480:	4604      	mov	r4, r0
 8004482:	f7ff f9d0 	bl	8003826 <LL_RCC_GetAPB2Prescaler>
 8004486:	4603      	mov	r3, r0
 8004488:	0adb      	lsrs	r3, r3, #11
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	fa24 f303 	lsr.w	r3, r4, r3
}
 800449c:	4618      	mov	r0, r3
 800449e:	bd98      	pop	{r3, r4, r7, pc}
 80044a0:	08010df4 	.word	0x08010df4

080044a4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	226f      	movs	r2, #111	; 0x6f
 80044b2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80044b4:	f7ff f90f 	bl	80036d6 <LL_RCC_GetSysClkSource>
 80044b8:	4602      	mov	r2, r0
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80044be:	f7ff f97f 	bl	80037c0 <LL_RCC_GetAHBPrescaler>
 80044c2:	4602      	mov	r2, r0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80044c8:	f7ff f9a1 	bl	800380e <LL_RCC_GetAPB1Prescaler>
 80044cc:	4602      	mov	r2, r0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80044d2:	f7ff f9a8 	bl	8003826 <LL_RCC_GetAPB2Prescaler>
 80044d6:	4602      	mov	r2, r0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80044dc:	f7ff f97c 	bl	80037d8 <LL_C2_RCC_GetAHBPrescaler>
 80044e0:	4602      	mov	r2, r0
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80044e6:	f7ff f984 	bl	80037f2 <LL_RCC_GetAHB4Prescaler>
 80044ea:	4602      	mov	r2, r0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80044f0:	4b04      	ldr	r3, [pc, #16]	; (8004504 <HAL_RCC_GetClockConfig+0x60>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0207 	and.w	r2, r3, #7
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	601a      	str	r2, [r3, #0]
}
 80044fc:	bf00      	nop
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	58004000 	.word	0x58004000

08004508 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004508:	b590      	push	{r4, r7, lr}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2bb0      	cmp	r3, #176	; 0xb0
 8004514:	d903      	bls.n	800451e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004516:	4b15      	ldr	r3, [pc, #84]	; (800456c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	e007      	b.n	800452e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	4a11      	ldr	r2, [pc, #68]	; (800456c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800452c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800452e:	f7ff f960 	bl	80037f2 <LL_RCC_GetAHB4Prescaler>
 8004532:	4603      	mov	r3, r0
 8004534:	091b      	lsrs	r3, r3, #4
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	4a0d      	ldr	r2, [pc, #52]	; (8004570 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800453c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	fbb2 f3f3 	udiv	r3, r2, r3
 8004546:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4a0a      	ldr	r2, [pc, #40]	; (8004574 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	0c9c      	lsrs	r4, r3, #18
 8004552:	f7fe fea1 	bl	8003298 <HAL_PWREx_GetVoltageRange>
 8004556:	4603      	mov	r3, r0
 8004558:	4619      	mov	r1, r3
 800455a:	4620      	mov	r0, r4
 800455c:	f000 f80c 	bl	8004578 <RCC_SetFlashLatency>
 8004560:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	bd90      	pop	{r4, r7, pc}
 800456a:	bf00      	nop
 800456c:	08010e14 	.word	0x08010e14
 8004570:	08010db4 	.word	0x08010db4
 8004574:	431bde83 	.word	0x431bde83

08004578 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004578:	b590      	push	{r4, r7, lr}
 800457a:	b093      	sub	sp, #76	; 0x4c
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004582:	4b39      	ldr	r3, [pc, #228]	; (8004668 <RCC_SetFlashLatency+0xf0>)
 8004584:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004588:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800458a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800458e:	4a37      	ldr	r2, [pc, #220]	; (800466c <RCC_SetFlashLatency+0xf4>)
 8004590:	f107 031c 	add.w	r3, r7, #28
 8004594:	ca07      	ldmia	r2, {r0, r1, r2}
 8004596:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800459a:	4b35      	ldr	r3, [pc, #212]	; (8004670 <RCC_SetFlashLatency+0xf8>)
 800459c:	f107 040c 	add.w	r4, r7, #12
 80045a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80045a6:	2300      	movs	r3, #0
 80045a8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045b0:	d11c      	bne.n	80045ec <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80045b2:	2300      	movs	r3, #0
 80045b4:	643b      	str	r3, [r7, #64]	; 0x40
 80045b6:	e015      	b.n	80045e4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80045b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045c0:	4413      	add	r3, r2
 80045c2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d808      	bhi.n	80045de <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80045cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045d4:	4413      	add	r3, r2
 80045d6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80045da:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80045dc:	e022      	b.n	8004624 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80045de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e0:	3301      	adds	r3, #1
 80045e2:	643b      	str	r3, [r7, #64]	; 0x40
 80045e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d9e6      	bls.n	80045b8 <RCC_SetFlashLatency+0x40>
 80045ea:	e01b      	b.n	8004624 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80045ec:	2300      	movs	r3, #0
 80045ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045f0:	e015      	b.n	800461e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80045f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045fa:	4413      	add	r3, r2
 80045fc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	429a      	cmp	r2, r3
 8004604:	d808      	bhi.n	8004618 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800460e:	4413      	add	r3, r2
 8004610:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004614:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004616:	e005      	b.n	8004624 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800461a:	3301      	adds	r3, #1
 800461c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800461e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004620:	2b02      	cmp	r3, #2
 8004622:	d9e6      	bls.n	80045f2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004624:	4b13      	ldr	r3, [pc, #76]	; (8004674 <RCC_SetFlashLatency+0xfc>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f023 0207 	bic.w	r2, r3, #7
 800462c:	4911      	ldr	r1, [pc, #68]	; (8004674 <RCC_SetFlashLatency+0xfc>)
 800462e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004630:	4313      	orrs	r3, r2
 8004632:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004634:	f7fe f818 	bl	8002668 <HAL_GetTick>
 8004638:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800463a:	e008      	b.n	800464e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800463c:	f7fe f814 	bl	8002668 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e007      	b.n	800465e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800464e:	4b09      	ldr	r3, [pc, #36]	; (8004674 <RCC_SetFlashLatency+0xfc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004658:	429a      	cmp	r2, r3
 800465a:	d1ef      	bne.n	800463c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	374c      	adds	r7, #76	; 0x4c
 8004662:	46bd      	mov	sp, r7
 8004664:	bd90      	pop	{r4, r7, pc}
 8004666:	bf00      	nop
 8004668:	08010a44 	.word	0x08010a44
 800466c:	08010a54 	.word	0x08010a54
 8004670:	08010a60 	.word	0x08010a60
 8004674:	58004000 	.word	0x58004000

08004678 <LL_RCC_LSE_IsEnabled>:
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800467c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <LL_RCC_LSE_IsEnabled+0x18>
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <LL_RCC_LSE_IsEnabled+0x1a>
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <LL_RCC_LSE_IsReady>:
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80046a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d101      	bne.n	80046b4 <LL_RCC_LSE_IsReady+0x18>
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <LL_RCC_LSE_IsReady+0x1a>
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <LL_RCC_SetRFWKPClockSource>:
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80046c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <LL_RCC_SetSMPSClockSource>:
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80046f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	f023 0203 	bic.w	r2, r3, #3
 80046fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4313      	orrs	r3, r2
 8004706:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <LL_RCC_SetSMPSPrescaler>:
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800471c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004726:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4313      	orrs	r3, r2
 800472e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <LL_RCC_SetUSARTClockSource>:
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474c:	f023 0203 	bic.w	r2, r3, #3
 8004750:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <LL_RCC_SetLPUARTClockSource>:
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004778:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800477c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <LL_RCC_SetI2CClockSource>:
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800479c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	091b      	lsrs	r3, r3, #4
 80047a8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80047ac:	43db      	mvns	r3, r3
 80047ae:	401a      	ands	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80047b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <LL_RCC_SetLPTIMClockSource>:
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80047d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	0c1b      	lsrs	r3, r3, #16
 80047e2:	041b      	lsls	r3, r3, #16
 80047e4:	43db      	mvns	r3, r3
 80047e6:	401a      	ands	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	041b      	lsls	r3, r3, #16
 80047ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <LL_RCC_SetSAIClockSource>:
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800480a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004812:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004816:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <LL_RCC_SetRNGClockSource>:
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800483a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <LL_RCC_SetCLK48ClockSource>:
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800486e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <LL_RCC_SetUSBClockSource>:
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b082      	sub	sp, #8
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7ff ffe3 	bl	800485a <LL_RCC_SetCLK48ClockSource>
}
 8004894:	bf00      	nop
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <LL_RCC_SetADCClockSource>:
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80048a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <LL_RCC_SetRTCClockSource>:
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80048d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <LL_RCC_GetRTCClockSource>:
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80048f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004900:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004904:	4618      	mov	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <LL_RCC_ForceBackupDomainReset>:
{
 800490e:	b480      	push	{r7}
 8004910:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800491e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004922:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004926:	bf00      	nop
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004948:	bf00      	nop
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <LL_RCC_PLLSAI1_Enable>:
{
 8004952:	b480      	push	{r7}
 8004954:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004960:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004964:	6013      	str	r3, [r2, #0]
}
 8004966:	bf00      	nop
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <LL_RCC_PLLSAI1_Disable>:
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800497e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004982:	6013      	str	r3, [r2, #0]
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <LL_RCC_PLLSAI1_IsReady>:
{
 800498e:	b480      	push	{r7}
 8004990:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800499c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049a0:	d101      	bne.n	80049a6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b088      	sub	sp, #32
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80049ba:	2300      	movs	r3, #0
 80049bc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80049be:	2300      	movs	r3, #0
 80049c0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d033      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049d6:	d00c      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80049d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049dc:	d802      	bhi.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d010      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80049e2:	e017      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80049e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049e8:	d017      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x68>
 80049ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049ee:	d016      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80049f0:	e010      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80049f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a00:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004a02:	e00d      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3304      	adds	r3, #4
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 f947 	bl	8004c9c <RCCEx_PLLSAI1_ConfigNP>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004a12:	e005      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	77fb      	strb	r3, [r7, #31]
        break;
 8004a18:	e002      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8004a1a:	bf00      	nop
 8004a1c:	e000      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8004a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a20:	7ffb      	ldrb	r3, [r7, #31]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d105      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff fee9 	bl	8004802 <LL_RCC_SetSAIClockSource>
 8004a30:	e001      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a32:	7ffb      	ldrb	r3, [r7, #31]
 8004a34:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d046      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004a42:	f7ff ff57 	bl	80048f4 <LL_RCC_GetRTCClockSource>
 8004a46:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d03c      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004a52:	f7fe fc11 	bl	8003278 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d105      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff ff31 	bl	80048c8 <LL_RCC_SetRTCClockSource>
 8004a66:	e02e      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a70:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004a72:	f7ff ff4c 	bl	800490e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004a76:	f7ff ff5b 	bl	8004930 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	4313      	orrs	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004a92:	f7ff fdf1 	bl	8004678 <LL_RCC_LSE_IsEnabled>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d114      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a9c:	f7fd fde4 	bl	8002668 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004aa2:	e00b      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa4:	f7fd fde0 	bl	8002668 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d902      	bls.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	77fb      	strb	r3, [r7, #31]
              break;
 8004aba:	e004      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004abc:	f7ff fdee 	bl	800469c <LL_RCC_LSE_IsReady>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d1ee      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004ac6:	7ffb      	ldrb	r3, [r7, #31]
 8004ac8:	77bb      	strb	r3, [r7, #30]
 8004aca:	e001      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004acc:	7ffb      	ldrb	r3, [r7, #31]
 8004ace:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d004      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff fe2b 	bl	800473c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d004      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff fe36 	bl	8004768 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d004      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff fe5e 	bl	80047ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d004      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fe53 	bl	80047ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d004      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff fe2b 	bl	8004794 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d004      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff fe20 	bl	8004794 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d022      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fe8e 	bl	8004886 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b72:	d107      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b82:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b8c:	d10b      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3304      	adds	r3, #4
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 f8dd 	bl	8004d52 <RCCEx_PLLSAI1_ConfigNQ>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004b9c:	7ffb      	ldrb	r3, [r7, #31]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8004ba2:	7ffb      	ldrb	r3, [r7, #31]
 8004ba4:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d02b      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bba:	d008      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bc4:	d003      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d105      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff fe2b 	bl	800482e <LL_RCC_SetRNGClockSource>
 8004bd8:	e00a      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	2000      	movs	r0, #0
 8004be6:	f7ff fe22 	bl	800482e <LL_RCC_SetRNGClockSource>
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7ff fe35 	bl	800485a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c08:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d022      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff fe3e 	bl	800489c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c28:	d107      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c38:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c42:	d10b      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 f8dd 	bl	8004e08 <RCCEx_PLLSAI1_ConfigNR>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004c52:	7ffb      	ldrb	r3, [r7, #31]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8004c58:	7ffb      	ldrb	r3, [r7, #31]
 8004c5a:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d004      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff fd27 	bl	80046c0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d009      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff fd46 	bl	8004714 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff fd2d 	bl	80046ec <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8004c92:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3720      	adds	r7, #32
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004ca8:	f7ff fe62 	bl	8004970 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004cac:	f7fd fcdc 	bl	8002668 <HAL_GetTick>
 8004cb0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004cb2:	e009      	b.n	8004cc8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cb4:	f7fd fcd8 	bl	8002668 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d902      	bls.n	8004cc8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc6:	e004      	b.n	8004cd2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004cc8:	f7ff fe61 	bl	800498e <LL_RCC_PLLSAI1_IsReady>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f0      	bne.n	8004cb4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d137      	bne.n	8004d48 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cec:	4313      	orrs	r3, r2
 8004cee:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d02:	4313      	orrs	r3, r2
 8004d04:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004d06:	f7ff fe24 	bl	8004952 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d0a:	f7fd fcad 	bl	8002668 <HAL_GetTick>
 8004d0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004d10:	e009      	b.n	8004d26 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d12:	f7fd fca9 	bl	8002668 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d902      	bls.n	8004d26 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	73fb      	strb	r3, [r7, #15]
        break;
 8004d24:	e004      	b.n	8004d30 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004d26:	f7ff fe32 	bl	800498e <LL_RCC_PLLSAI1_IsReady>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d1f0      	bne.n	8004d12 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d108      	bne.n	8004d48 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d44:	4313      	orrs	r3, r2
 8004d46:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004d5e:	f7ff fe07 	bl	8004970 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004d62:	f7fd fc81 	bl	8002668 <HAL_GetTick>
 8004d66:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004d68:	e009      	b.n	8004d7e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d6a:	f7fd fc7d 	bl	8002668 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d902      	bls.n	8004d7e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d7c:	e004      	b.n	8004d88 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004d7e:	f7ff fe06 	bl	800498e <LL_RCC_PLLSAI1_IsReady>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f0      	bne.n	8004d6a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d137      	bne.n	8004dfe <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004da2:	4313      	orrs	r3, r2
 8004da4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004db8:	4313      	orrs	r3, r2
 8004dba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004dbc:	f7ff fdc9 	bl	8004952 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc0:	f7fd fc52 	bl	8002668 <HAL_GetTick>
 8004dc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004dc6:	e009      	b.n	8004ddc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dc8:	f7fd fc4e 	bl	8002668 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d902      	bls.n	8004ddc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	73fb      	strb	r3, [r7, #15]
        break;
 8004dda:	e004      	b.n	8004de6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004ddc:	f7ff fdd7 	bl	800498e <LL_RCC_PLLSAI1_IsReady>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d1f0      	bne.n	8004dc8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d108      	bne.n	8004dfe <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df0:	691a      	ldr	r2, [r3, #16]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e10:	2300      	movs	r3, #0
 8004e12:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004e14:	f7ff fdac 	bl	8004970 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e18:	f7fd fc26 	bl	8002668 <HAL_GetTick>
 8004e1c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004e1e:	e009      	b.n	8004e34 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e20:	f7fd fc22 	bl	8002668 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d902      	bls.n	8004e34 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	73fb      	strb	r3, [r7, #15]
      break;
 8004e32:	e004      	b.n	8004e3e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004e34:	f7ff fdab 	bl	800498e <LL_RCC_PLLSAI1_IsReady>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f0      	bne.n	8004e20 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d137      	bne.n	8004eb4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	021b      	lsls	r3, r3, #8
 8004e54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004e72:	f7ff fd6e 	bl	8004952 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e76:	f7fd fbf7 	bl	8002668 <HAL_GetTick>
 8004e7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004e7c:	e009      	b.n	8004e92 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e7e:	f7fd fbf3 	bl	8002668 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d902      	bls.n	8004e92 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	73fb      	strb	r3, [r7, #15]
        break;
 8004e90:	e004      	b.n	8004e9c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004e92:	f7ff fd7c 	bl	800498e <LL_RCC_PLLSAI1_IsReady>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d1f0      	bne.n	8004e7e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d108      	bne.n	8004eb4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e090      	b.n	8004ff2 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d106      	bne.n	8004eea <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7fc fe7b 	bl	8001be0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2202      	movs	r2, #2
 8004eee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	22ca      	movs	r2, #202	; 0xca
 8004ef8:	625a      	str	r2, [r3, #36]	; 0x24
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2253      	movs	r2, #83	; 0x53
 8004f00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f89f 	bl	8005046 <RTC_EnterInitMode>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d009      	beq.n	8004f22 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	22ff      	movs	r2, #255	; 0xff
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2204      	movs	r2, #4
 8004f1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e067      	b.n	8004ff2 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6812      	ldr	r2, [r2, #0]
 8004f2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f34:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6899      	ldr	r1, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	68d2      	ldr	r2, [r2, #12]
 8004f5c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6919      	ldr	r1, [r3, #16]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	041a      	lsls	r2, r3, #16
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f80:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0203 	bic.w	r2, r2, #3
 8004f90:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 0320 	and.w	r3, r3, #32
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d113      	bne.n	8004fe0 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f81e 	bl	8004ffa <HAL_RTC_WaitForSynchro>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00d      	beq.n	8004fe0 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	22ff      	movs	r2, #255	; 0xff
 8004fca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2204      	movs	r2, #4
 8004fd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e008      	b.n	8004ff2 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	22ff      	movs	r2, #255	; 0xff
 8004fe6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
  }
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005010:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005012:	f7fd fb29 	bl	8002668 <HAL_GetTick>
 8005016:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005018:	e009      	b.n	800502e <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800501a:	f7fd fb25 	bl	8002668 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005028:	d901      	bls.n	800502e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e007      	b.n	800503e <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0ee      	beq.n	800501a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005058:	2b00      	cmp	r3, #0
 800505a:	d119      	bne.n	8005090 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f04f 32ff 	mov.w	r2, #4294967295
 8005064:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005066:	f7fd faff 	bl	8002668 <HAL_GetTick>
 800506a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800506c:	e009      	b.n	8005082 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800506e:	f7fd fafb 	bl	8002668 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800507c:	d901      	bls.n	8005082 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e007      	b.n	8005092 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0ee      	beq.n	800506e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e049      	b.n	8005140 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d106      	bne.n	80050c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f841 	bl	8005148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2202      	movs	r2, #2
 80050ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3304      	adds	r3, #4
 80050d6:	4619      	mov	r1, r3
 80050d8:	4610      	mov	r0, r2
 80050da:	f000 f9d5 	bl	8005488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b01      	cmp	r3, #1
 800516e:	d001      	beq.n	8005174 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e036      	b.n	80051e2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a17      	ldr	r2, [pc, #92]	; (80051f0 <HAL_TIM_Base_Start_IT+0x94>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d004      	beq.n	80051a0 <HAL_TIM_Base_Start_IT+0x44>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519e:	d115      	bne.n	80051cc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	4b13      	ldr	r3, [pc, #76]	; (80051f4 <HAL_TIM_Base_Start_IT+0x98>)
 80051a8:	4013      	ands	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b06      	cmp	r3, #6
 80051b0:	d015      	beq.n	80051de <HAL_TIM_Base_Start_IT+0x82>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b8:	d011      	beq.n	80051de <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0201 	orr.w	r2, r2, #1
 80051c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ca:	e008      	b.n	80051de <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0201 	orr.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	e000      	b.n	80051e0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40012c00 	.word	0x40012c00
 80051f4:	00010007 	.word	0x00010007

080051f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b02      	cmp	r3, #2
 800520c:	d122      	bne.n	8005254 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b02      	cmp	r3, #2
 800521a:	d11b      	bne.n	8005254 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f06f 0202 	mvn.w	r2, #2
 8005224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f905 	bl	800544a <HAL_TIM_IC_CaptureCallback>
 8005240:	e005      	b.n	800524e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f8f7 	bl	8005436 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f908 	bl	800545e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2b04      	cmp	r3, #4
 8005260:	d122      	bne.n	80052a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b04      	cmp	r3, #4
 800526e:	d11b      	bne.n	80052a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0204 	mvn.w	r2, #4
 8005278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2202      	movs	r2, #2
 800527e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f8db 	bl	800544a <HAL_TIM_IC_CaptureCallback>
 8005294:	e005      	b.n	80052a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f8cd 	bl	8005436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f8de 	bl	800545e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b08      	cmp	r3, #8
 80052b4:	d122      	bne.n	80052fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 0308 	and.w	r3, r3, #8
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d11b      	bne.n	80052fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0208 	mvn.w	r2, #8
 80052cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2204      	movs	r2, #4
 80052d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f8b1 	bl	800544a <HAL_TIM_IC_CaptureCallback>
 80052e8:	e005      	b.n	80052f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f8a3 	bl	8005436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f8b4 	bl	800545e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0310 	and.w	r3, r3, #16
 8005306:	2b10      	cmp	r3, #16
 8005308:	d122      	bne.n	8005350 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f003 0310 	and.w	r3, r3, #16
 8005314:	2b10      	cmp	r3, #16
 8005316:	d11b      	bne.n	8005350 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0210 	mvn.w	r2, #16
 8005320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2208      	movs	r2, #8
 8005326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f887 	bl	800544a <HAL_TIM_IC_CaptureCallback>
 800533c:	e005      	b.n	800534a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f879 	bl	8005436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f88a 	bl	800545e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b01      	cmp	r3, #1
 800535c:	d10e      	bne.n	800537c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b01      	cmp	r3, #1
 800536a:	d107      	bne.n	800537c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0201 	mvn.w	r2, #1
 8005374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fc fbc0 	bl	8001afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005386:	2b80      	cmp	r3, #128	; 0x80
 8005388:	d10e      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005394:	2b80      	cmp	r3, #128	; 0x80
 8005396:	d107      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f8de 	bl	8005564 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b6:	d10e      	bne.n	80053d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c2:	2b80      	cmp	r3, #128	; 0x80
 80053c4:	d107      	bne.n	80053d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f8d1 	bl	8005578 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e0:	2b40      	cmp	r3, #64	; 0x40
 80053e2:	d10e      	bne.n	8005402 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ee:	2b40      	cmp	r3, #64	; 0x40
 80053f0:	d107      	bne.n	8005402 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f838 	bl	8005472 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b20      	cmp	r3, #32
 800540e:	d10e      	bne.n	800542e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b20      	cmp	r3, #32
 800541c:	d107      	bne.n	800542e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f06f 0220 	mvn.w	r2, #32
 8005426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f891 	bl	8005550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
	...

08005488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a2a      	ldr	r2, [pc, #168]	; (8005544 <TIM_Base_SetConfig+0xbc>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_Base_SetConfig+0x20>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a6:	d108      	bne.n	80054ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a21      	ldr	r2, [pc, #132]	; (8005544 <TIM_Base_SetConfig+0xbc>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00b      	beq.n	80054da <TIM_Base_SetConfig+0x52>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c8:	d007      	beq.n	80054da <TIM_Base_SetConfig+0x52>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a1e      	ldr	r2, [pc, #120]	; (8005548 <TIM_Base_SetConfig+0xc0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d003      	beq.n	80054da <TIM_Base_SetConfig+0x52>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a1d      	ldr	r2, [pc, #116]	; (800554c <TIM_Base_SetConfig+0xc4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d108      	bne.n	80054ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a0c      	ldr	r2, [pc, #48]	; (8005544 <TIM_Base_SetConfig+0xbc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d007      	beq.n	8005528 <TIM_Base_SetConfig+0xa0>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a0b      	ldr	r2, [pc, #44]	; (8005548 <TIM_Base_SetConfig+0xc0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d003      	beq.n	8005528 <TIM_Base_SetConfig+0xa0>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a0a      	ldr	r2, [pc, #40]	; (800554c <TIM_Base_SetConfig+0xc4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d103      	bne.n	8005530 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	691a      	ldr	r2, [r3, #16]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	615a      	str	r2, [r3, #20]
}
 8005536:	bf00      	nop
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40012c00 	.word	0x40012c00
 8005548:	40014400 	.word	0x40014400
 800554c:	40014800 	.word	0x40014800

08005550 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <LL_RCC_GetUSARTClockSource>:
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005598:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4013      	ands	r3, r2
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <LL_RCC_GetLPUARTClockSource>:
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80055b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4013      	ands	r3, r2
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e042      	b.n	8005664 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d106      	bne.n	80055f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7fc ff03 	bl	80023fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2224      	movs	r2, #36	; 0x24
 80055fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0201 	bic.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fb9c 	bl	8005d4c <UART_SetConfig>
 8005614:	4603      	mov	r3, r0
 8005616:	2b01      	cmp	r3, #1
 8005618:	d101      	bne.n	800561e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e022      	b.n	8005664 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fd9e 	bl	8006168 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800563a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800564a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0201 	orr.w	r2, r2, #1
 800565a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fe25 	bl	80062ac <UART_CheckIdleState>
 8005662:	4603      	mov	r3, r0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	4613      	mov	r3, r2
 8005678:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005680:	2b20      	cmp	r3, #32
 8005682:	d168      	bne.n	8005756 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <HAL_UART_Transmit_IT+0x24>
 800568a:	88fb      	ldrh	r3, [r7, #6]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e061      	b.n	8005758 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800569a:	2b01      	cmp	r3, #1
 800569c:	d101      	bne.n	80056a2 <HAL_UART_Transmit_IT+0x36>
 800569e:	2302      	movs	r3, #2
 80056a0:	e05a      	b.n	8005758 <HAL_UART_Transmit_IT+0xec>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	88fa      	ldrh	r2, [r7, #6]
 80056b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	88fa      	ldrh	r2, [r7, #6]
 80056bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2221      	movs	r2, #33	; 0x21
 80056d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056de:	d11c      	bne.n	800571a <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e8:	d107      	bne.n	80056fa <HAL_UART_Transmit_IT+0x8e>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d103      	bne.n	80056fa <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4a1b      	ldr	r2, [pc, #108]	; (8005764 <HAL_UART_Transmit_IT+0xf8>)
 80056f6:	671a      	str	r2, [r3, #112]	; 0x70
 80056f8:	e002      	b.n	8005700 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4a1a      	ldr	r2, [pc, #104]	; (8005768 <HAL_UART_Transmit_IT+0xfc>)
 80056fe:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005716:	609a      	str	r2, [r3, #8]
 8005718:	e01b      	b.n	8005752 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005722:	d107      	bne.n	8005734 <HAL_UART_Transmit_IT+0xc8>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d103      	bne.n	8005734 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4a0f      	ldr	r2, [pc, #60]	; (800576c <HAL_UART_Transmit_IT+0x100>)
 8005730:	671a      	str	r2, [r3, #112]	; 0x70
 8005732:	e002      	b.n	800573a <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4a0e      	ldr	r2, [pc, #56]	; (8005770 <HAL_UART_Transmit_IT+0x104>)
 8005738:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005750:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	e000      	b.n	8005758 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8005756:	2302      	movs	r3, #2
  }
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	08006767 	.word	0x08006767
 8005768:	080066cd 	.word	0x080066cd
 800576c:	0800664f 	.word	0x0800664f
 8005770:	080065db 	.word	0x080065db

08005774 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	4613      	mov	r3, r2
 8005780:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005788:	2b20      	cmp	r3, #32
 800578a:	f040 80bc 	bne.w	8005906 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <HAL_UART_Receive_IT+0x26>
 8005794:	88fb      	ldrh	r3, [r7, #6]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e0b4      	b.n	8005908 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d101      	bne.n	80057ac <HAL_UART_Receive_IT+0x38>
 80057a8:	2302      	movs	r3, #2
 80057aa:	e0ad      	b.n	8005908 <HAL_UART_Receive_IT+0x194>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	88fa      	ldrh	r2, [r7, #6]
 80057be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	88fa      	ldrh	r2, [r7, #6]
 80057c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d8:	d10e      	bne.n	80057f8 <HAL_UART_Receive_IT+0x84>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d105      	bne.n	80057ee <HAL_UART_Receive_IT+0x7a>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80057e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057ec:	e02d      	b.n	800584a <HAL_UART_Receive_IT+0xd6>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	22ff      	movs	r2, #255	; 0xff
 80057f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057f6:	e028      	b.n	800584a <HAL_UART_Receive_IT+0xd6>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10d      	bne.n	800581c <HAL_UART_Receive_IT+0xa8>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d104      	bne.n	8005812 <HAL_UART_Receive_IT+0x9e>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	22ff      	movs	r2, #255	; 0xff
 800580c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005810:	e01b      	b.n	800584a <HAL_UART_Receive_IT+0xd6>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	227f      	movs	r2, #127	; 0x7f
 8005816:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800581a:	e016      	b.n	800584a <HAL_UART_Receive_IT+0xd6>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005824:	d10d      	bne.n	8005842 <HAL_UART_Receive_IT+0xce>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d104      	bne.n	8005838 <HAL_UART_Receive_IT+0xc4>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	227f      	movs	r2, #127	; 0x7f
 8005832:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005836:	e008      	b.n	800584a <HAL_UART_Receive_IT+0xd6>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	223f      	movs	r2, #63	; 0x3f
 800583c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005840:	e003      	b.n	800584a <HAL_UART_Receive_IT+0xd6>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2222      	movs	r2, #34	; 0x22
 8005856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0201 	orr.w	r2, r2, #1
 8005868:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800586e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005872:	d12a      	bne.n	80058ca <HAL_UART_Receive_IT+0x156>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800587a:	88fa      	ldrh	r2, [r7, #6]
 800587c:	429a      	cmp	r2, r3
 800587e:	d324      	bcc.n	80058ca <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005888:	d107      	bne.n	800589a <HAL_UART_Receive_IT+0x126>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d103      	bne.n	800589a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <HAL_UART_Receive_IT+0x1a0>)
 8005896:	66da      	str	r2, [r3, #108]	; 0x6c
 8005898:	e002      	b.n	80058a0 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4a1e      	ldr	r2, [pc, #120]	; (8005918 <HAL_UART_Receive_IT+0x1a4>)
 800589e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058b6:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80058c6:	609a      	str	r2, [r3, #8]
 80058c8:	e01b      	b.n	8005902 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d2:	d107      	bne.n	80058e4 <HAL_UART_Receive_IT+0x170>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d103      	bne.n	80058e4 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4a0f      	ldr	r2, [pc, #60]	; (800591c <HAL_UART_Receive_IT+0x1a8>)
 80058e0:	66da      	str	r2, [r3, #108]	; 0x6c
 80058e2:	e002      	b.n	80058ea <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4a0e      	ldr	r2, [pc, #56]	; (8005920 <HAL_UART_Receive_IT+0x1ac>)
 80058e8:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005900:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	e000      	b.n	8005908 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8005906:	2302      	movs	r3, #2
  }
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	08006a9d 	.word	0x08006a9d
 8005918:	08006995 	.word	0x08006995
 800591c:	080068e9 	.word	0x080068e9
 8005920:	0800683f 	.word	0x0800683f

08005924 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	4613      	mov	r3, r2
 8005930:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005938:	2b20      	cmp	r3, #32
 800593a:	d168      	bne.n	8005a0e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d002      	beq.n	8005948 <HAL_UART_Transmit_DMA+0x24>
 8005942:	88fb      	ldrh	r3, [r7, #6]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e061      	b.n	8005a10 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005952:	2b01      	cmp	r3, #1
 8005954:	d101      	bne.n	800595a <HAL_UART_Transmit_DMA+0x36>
 8005956:	2302      	movs	r3, #2
 8005958:	e05a      	b.n	8005a10 <HAL_UART_Transmit_DMA+0xec>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	88fa      	ldrh	r2, [r7, #6]
 800596c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	88fa      	ldrh	r2, [r7, #6]
 8005974:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2221      	movs	r2, #33	; 0x21
 8005984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800598c:	2b00      	cmp	r3, #0
 800598e:	d02c      	beq.n	80059ea <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005994:	4a20      	ldr	r2, [pc, #128]	; (8005a18 <HAL_UART_Transmit_DMA+0xf4>)
 8005996:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800599c:	4a1f      	ldr	r2, [pc, #124]	; (8005a1c <HAL_UART_Transmit_DMA+0xf8>)
 800599e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a4:	4a1e      	ldr	r2, [pc, #120]	; (8005a20 <HAL_UART_Transmit_DMA+0xfc>)
 80059a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ac:	2200      	movs	r2, #0
 80059ae:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b8:	4619      	mov	r1, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3328      	adds	r3, #40	; 0x28
 80059c0:	461a      	mov	r2, r3
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	f7fd f898 	bl	8002af8 <HAL_DMA_Start_IT>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00d      	beq.n	80059ea <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2210      	movs	r2, #16
 80059d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e012      	b.n	8005a10 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2240      	movs	r2, #64	; 0x40
 80059f0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a08:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e000      	b.n	8005a10 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8005a0e:	2302      	movs	r3, #2
  }
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	080064bf 	.word	0x080064bf
 8005a1c:	08006513 	.word	0x08006513
 8005a20:	0800652f 	.word	0x0800652f

08005a24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a44:	69fa      	ldr	r2, [r7, #28]
 8005a46:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d118      	bne.n	8005a86 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d013      	beq.n	8005a86 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	f003 0320 	and.w	r3, r3, #32
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d104      	bne.n	8005a72 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d009      	beq.n	8005a86 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 8145 	beq.w	8005d06 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	4798      	blx	r3
      }
      return;
 8005a84:	e13f      	b.n	8005d06 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 80e8 	beq.w	8005c5e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4ba1      	ldr	r3, [pc, #644]	; (8005d18 <HAL_UART_IRQHandler+0x2f4>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d105      	bne.n	8005aa4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	4ba0      	ldr	r3, [pc, #640]	; (8005d1c <HAL_UART_IRQHandler+0x2f8>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 80dd 	beq.w	8005c5e <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d010      	beq.n	8005ad0 <HAL_UART_IRQHandler+0xac>
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00b      	beq.n	8005ad0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2201      	movs	r2, #1
 8005abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac6:	f043 0201 	orr.w	r2, r3, #1
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d010      	beq.n	8005afc <HAL_UART_IRQHandler+0xd8>
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00b      	beq.n	8005afc <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2202      	movs	r2, #2
 8005aea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af2:	f043 0204 	orr.w	r2, r3, #4
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f003 0304 	and.w	r3, r3, #4
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d010      	beq.n	8005b28 <HAL_UART_IRQHandler+0x104>
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00b      	beq.n	8005b28 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2204      	movs	r2, #4
 8005b16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1e:	f043 0202 	orr.w	r2, r3, #2
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d015      	beq.n	8005b5e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	f003 0320 	and.w	r3, r3, #32
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d104      	bne.n	8005b46 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	4b76      	ldr	r3, [pc, #472]	; (8005d18 <HAL_UART_IRQHandler+0x2f4>)
 8005b40:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00b      	beq.n	8005b5e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2208      	movs	r2, #8
 8005b4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b54:	f043 0208 	orr.w	r2, r3, #8
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d011      	beq.n	8005b8c <HAL_UART_IRQHandler+0x168>
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00c      	beq.n	8005b8c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b82:	f043 0220 	orr.w	r2, r3, #32
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 80b9 	beq.w	8005d0a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d011      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	f003 0320 	and.w	r3, r3, #32
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d104      	bne.n	8005bb6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d007      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bcc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd8:	2b40      	cmp	r3, #64	; 0x40
 8005bda:	d004      	beq.n	8005be6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d031      	beq.n	8005c4a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fc46 	bl	8006478 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf6:	2b40      	cmp	r3, #64	; 0x40
 8005bf8:	d123      	bne.n	8005c42 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c08:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d013      	beq.n	8005c3a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c16:	4a42      	ldr	r2, [pc, #264]	; (8005d20 <HAL_UART_IRQHandler+0x2fc>)
 8005c18:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fc ffe5 	bl	8002bee <HAL_DMA_Abort_IT>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d017      	beq.n	8005c5a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005c34:	4610      	mov	r0, r2
 8005c36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c38:	e00f      	b.n	8005c5a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f87c 	bl	8005d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c40:	e00b      	b.n	8005c5a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f878 	bl	8005d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c48:	e007      	b.n	8005c5a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f874 	bl	8005d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005c58:	e057      	b.n	8005d0a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c5a:	bf00      	nop
    return;
 8005c5c:	e055      	b.n	8005d0a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00d      	beq.n	8005c84 <HAL_UART_IRQHandler+0x260>
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d008      	beq.n	8005c84 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 ff91 	bl	8006ba4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c82:	e045      	b.n	8005d10 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d012      	beq.n	8005cb4 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d104      	bne.n	8005ca2 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d008      	beq.n	8005cb4 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d031      	beq.n	8005d0e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	4798      	blx	r3
    }
    return;
 8005cb2:	e02c      	b.n	8005d0e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d008      	beq.n	8005cd0 <HAL_UART_IRQHandler+0x2ac>
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fd9e 	bl	800680a <UART_EndTransmit_IT>
    return;
 8005cce:	e01f      	b.n	8005d10 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d008      	beq.n	8005cec <HAL_UART_IRQHandler+0x2c8>
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 ff71 	bl	8006bcc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cea:	e011      	b.n	8005d10 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00c      	beq.n	8005d10 <HAL_UART_IRQHandler+0x2ec>
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	da09      	bge.n	8005d10 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 ff5b 	bl	8006bb8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d02:	bf00      	nop
 8005d04:	e004      	b.n	8005d10 <HAL_UART_IRQHandler+0x2ec>
      return;
 8005d06:	bf00      	nop
 8005d08:	e002      	b.n	8005d10 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005d0a:	bf00      	nop
 8005d0c:	e000      	b.n	8005d10 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005d0e:	bf00      	nop
  }
}
 8005d10:	3720      	adds	r7, #32
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	10000001 	.word	0x10000001
 8005d1c:	04000120 	.word	0x04000120
 8005d20:	080065af 	.word	0x080065af

08005d24 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d4c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005d50:	b088      	sub	sp, #32
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	4ba4      	ldr	r3, [pc, #656]	; (8006014 <UART_SetConfig+0x2c8>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6812      	ldr	r2, [r2, #0]
 8005d8a:	69f9      	ldr	r1, [r7, #28]
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a99      	ldr	r2, [pc, #612]	; (8006018 <UART_SetConfig+0x2cc>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d004      	beq.n	8005dc0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005dca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6812      	ldr	r2, [r2, #0]
 8005dd2:	69f9      	ldr	r1, [r7, #28]
 8005dd4:	430b      	orrs	r3, r1
 8005dd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dde:	f023 010f 	bic.w	r1, r3, #15
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a8a      	ldr	r2, [pc, #552]	; (800601c <UART_SetConfig+0x2d0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d121      	bne.n	8005e3c <UART_SetConfig+0xf0>
 8005df8:	2003      	movs	r0, #3
 8005dfa:	f7ff fbc7 	bl	800558c <LL_RCC_GetUSARTClockSource>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b03      	cmp	r3, #3
 8005e02:	d817      	bhi.n	8005e34 <UART_SetConfig+0xe8>
 8005e04:	a201      	add	r2, pc, #4	; (adr r2, 8005e0c <UART_SetConfig+0xc0>)
 8005e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0a:	bf00      	nop
 8005e0c:	08005e1d 	.word	0x08005e1d
 8005e10:	08005e29 	.word	0x08005e29
 8005e14:	08005e23 	.word	0x08005e23
 8005e18:	08005e2f 	.word	0x08005e2f
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	76fb      	strb	r3, [r7, #27]
 8005e20:	e038      	b.n	8005e94 <UART_SetConfig+0x148>
 8005e22:	2302      	movs	r3, #2
 8005e24:	76fb      	strb	r3, [r7, #27]
 8005e26:	e035      	b.n	8005e94 <UART_SetConfig+0x148>
 8005e28:	2304      	movs	r3, #4
 8005e2a:	76fb      	strb	r3, [r7, #27]
 8005e2c:	e032      	b.n	8005e94 <UART_SetConfig+0x148>
 8005e2e:	2308      	movs	r3, #8
 8005e30:	76fb      	strb	r3, [r7, #27]
 8005e32:	e02f      	b.n	8005e94 <UART_SetConfig+0x148>
 8005e34:	2310      	movs	r3, #16
 8005e36:	76fb      	strb	r3, [r7, #27]
 8005e38:	bf00      	nop
 8005e3a:	e02b      	b.n	8005e94 <UART_SetConfig+0x148>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a75      	ldr	r2, [pc, #468]	; (8006018 <UART_SetConfig+0x2cc>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d124      	bne.n	8005e90 <UART_SetConfig+0x144>
 8005e46:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005e4a:	f7ff fbaf 	bl	80055ac <LL_RCC_GetLPUARTClockSource>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e54:	d012      	beq.n	8005e7c <UART_SetConfig+0x130>
 8005e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e5a:	d802      	bhi.n	8005e62 <UART_SetConfig+0x116>
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d007      	beq.n	8005e70 <UART_SetConfig+0x124>
 8005e60:	e012      	b.n	8005e88 <UART_SetConfig+0x13c>
 8005e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e66:	d006      	beq.n	8005e76 <UART_SetConfig+0x12a>
 8005e68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e6c:	d009      	beq.n	8005e82 <UART_SetConfig+0x136>
 8005e6e:	e00b      	b.n	8005e88 <UART_SetConfig+0x13c>
 8005e70:	2300      	movs	r3, #0
 8005e72:	76fb      	strb	r3, [r7, #27]
 8005e74:	e00e      	b.n	8005e94 <UART_SetConfig+0x148>
 8005e76:	2302      	movs	r3, #2
 8005e78:	76fb      	strb	r3, [r7, #27]
 8005e7a:	e00b      	b.n	8005e94 <UART_SetConfig+0x148>
 8005e7c:	2304      	movs	r3, #4
 8005e7e:	76fb      	strb	r3, [r7, #27]
 8005e80:	e008      	b.n	8005e94 <UART_SetConfig+0x148>
 8005e82:	2308      	movs	r3, #8
 8005e84:	76fb      	strb	r3, [r7, #27]
 8005e86:	e005      	b.n	8005e94 <UART_SetConfig+0x148>
 8005e88:	2310      	movs	r3, #16
 8005e8a:	76fb      	strb	r3, [r7, #27]
 8005e8c:	bf00      	nop
 8005e8e:	e001      	b.n	8005e94 <UART_SetConfig+0x148>
 8005e90:	2310      	movs	r3, #16
 8005e92:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a5f      	ldr	r2, [pc, #380]	; (8006018 <UART_SetConfig+0x2cc>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	f040 808e 	bne.w	8005fbc <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ea0:	7efb      	ldrb	r3, [r7, #27]
 8005ea2:	2b08      	cmp	r3, #8
 8005ea4:	d823      	bhi.n	8005eee <UART_SetConfig+0x1a2>
 8005ea6:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <UART_SetConfig+0x160>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005ed1 	.word	0x08005ed1
 8005eb0:	08005eef 	.word	0x08005eef
 8005eb4:	08005ed9 	.word	0x08005ed9
 8005eb8:	08005eef 	.word	0x08005eef
 8005ebc:	08005edf 	.word	0x08005edf
 8005ec0:	08005eef 	.word	0x08005eef
 8005ec4:	08005eef 	.word	0x08005eef
 8005ec8:	08005eef 	.word	0x08005eef
 8005ecc:	08005ee7 	.word	0x08005ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ed0:	f7fe fabc 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 8005ed4:	6178      	str	r0, [r7, #20]
        break;
 8005ed6:	e00f      	b.n	8005ef8 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed8:	4b51      	ldr	r3, [pc, #324]	; (8006020 <UART_SetConfig+0x2d4>)
 8005eda:	617b      	str	r3, [r7, #20]
        break;
 8005edc:	e00c      	b.n	8005ef8 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ede:	f7fe fa37 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 8005ee2:	6178      	str	r0, [r7, #20]
        break;
 8005ee4:	e008      	b.n	8005ef8 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eea:	617b      	str	r3, [r7, #20]
        break;
 8005eec:	e004      	b.n	8005ef8 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	76bb      	strb	r3, [r7, #26]
        break;
 8005ef6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 811c 	beq.w	8006138 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	4a47      	ldr	r2, [pc, #284]	; (8006024 <UART_SetConfig+0x2d8>)
 8005f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f12:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	4413      	add	r3, r2
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d305      	bcc.n	8005f30 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d902      	bls.n	8005f36 <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	76bb      	strb	r3, [r7, #26]
 8005f34:	e100      	b.n	8006138 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f04f 0100 	mov.w	r1, #0
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	4a38      	ldr	r2, [pc, #224]	; (8006024 <UART_SetConfig+0x2d8>)
 8005f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	f04f 0400 	mov.w	r4, #0
 8005f4e:	461a      	mov	r2, r3
 8005f50:	4623      	mov	r3, r4
 8005f52:	f7fa f97d 	bl	8000250 <__aeabi_uldivmod>
 8005f56:	4603      	mov	r3, r0
 8005f58:	460c      	mov	r4, r1
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4622      	mov	r2, r4
 8005f5e:	f04f 0300 	mov.w	r3, #0
 8005f62:	f04f 0400 	mov.w	r4, #0
 8005f66:	0214      	lsls	r4, r2, #8
 8005f68:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005f6c:	020b      	lsls	r3, r1, #8
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6852      	ldr	r2, [r2, #4]
 8005f72:	0852      	lsrs	r2, r2, #1
 8005f74:	4611      	mov	r1, r2
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	eb13 0b01 	adds.w	fp, r3, r1
 8005f7e:	eb44 0c02 	adc.w	ip, r4, r2
 8005f82:	4658      	mov	r0, fp
 8005f84:	4661      	mov	r1, ip
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f04f 0400 	mov.w	r4, #0
 8005f8e:	461a      	mov	r2, r3
 8005f90:	4623      	mov	r3, r4
 8005f92:	f7fa f95d 	bl	8000250 <__aeabi_uldivmod>
 8005f96:	4603      	mov	r3, r0
 8005f98:	460c      	mov	r4, r1
 8005f9a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fa2:	d308      	bcc.n	8005fb6 <UART_SetConfig+0x26a>
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005faa:	d204      	bcs.n	8005fb6 <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	60da      	str	r2, [r3, #12]
 8005fb4:	e0c0      	b.n	8006138 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	76bb      	strb	r3, [r7, #26]
 8005fba:	e0bd      	b.n	8006138 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fc4:	d169      	bne.n	800609a <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005fc6:	7efb      	ldrb	r3, [r7, #27]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	2b07      	cmp	r3, #7
 8005fcc:	d82c      	bhi.n	8006028 <UART_SetConfig+0x2dc>
 8005fce:	a201      	add	r2, pc, #4	; (adr r2, 8005fd4 <UART_SetConfig+0x288>)
 8005fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd4:	08005ff5 	.word	0x08005ff5
 8005fd8:	08005ffd 	.word	0x08005ffd
 8005fdc:	08006029 	.word	0x08006029
 8005fe0:	08006003 	.word	0x08006003
 8005fe4:	08006029 	.word	0x08006029
 8005fe8:	08006029 	.word	0x08006029
 8005fec:	08006029 	.word	0x08006029
 8005ff0:	0800600b 	.word	0x0800600b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ff4:	f7fe fa40 	bl	8004478 <HAL_RCC_GetPCLK2Freq>
 8005ff8:	6178      	str	r0, [r7, #20]
        break;
 8005ffa:	e01a      	b.n	8006032 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ffc:	4b08      	ldr	r3, [pc, #32]	; (8006020 <UART_SetConfig+0x2d4>)
 8005ffe:	617b      	str	r3, [r7, #20]
        break;
 8006000:	e017      	b.n	8006032 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006002:	f7fe f9a5 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 8006006:	6178      	str	r0, [r7, #20]
        break;
 8006008:	e013      	b.n	8006032 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800600a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800600e:	617b      	str	r3, [r7, #20]
        break;
 8006010:	e00f      	b.n	8006032 <UART_SetConfig+0x2e6>
 8006012:	bf00      	nop
 8006014:	cfff69f3 	.word	0xcfff69f3
 8006018:	40008000 	.word	0x40008000
 800601c:	40013800 	.word	0x40013800
 8006020:	00f42400 	.word	0x00f42400
 8006024:	08010e54 	.word	0x08010e54
      default:
        pclk = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	76bb      	strb	r3, [r7, #26]
        break;
 8006030:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d07f      	beq.n	8006138 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	4a48      	ldr	r2, [pc, #288]	; (8006160 <UART_SetConfig+0x414>)
 800603e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006042:	461a      	mov	r2, r3
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	fbb3 f3f2 	udiv	r3, r3, r2
 800604a:	005a      	lsls	r2, r3, #1
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	085b      	lsrs	r3, r3, #1
 8006052:	441a      	add	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	fbb2 f3f3 	udiv	r3, r2, r3
 800605c:	b29b      	uxth	r3, r3
 800605e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2b0f      	cmp	r3, #15
 8006064:	d916      	bls.n	8006094 <UART_SetConfig+0x348>
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800606c:	d212      	bcs.n	8006094 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	b29b      	uxth	r3, r3
 8006072:	f023 030f 	bic.w	r3, r3, #15
 8006076:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	085b      	lsrs	r3, r3, #1
 800607c:	b29b      	uxth	r3, r3
 800607e:	f003 0307 	and.w	r3, r3, #7
 8006082:	b29a      	uxth	r2, r3
 8006084:	89fb      	ldrh	r3, [r7, #14]
 8006086:	4313      	orrs	r3, r2
 8006088:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	89fa      	ldrh	r2, [r7, #14]
 8006090:	60da      	str	r2, [r3, #12]
 8006092:	e051      	b.n	8006138 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	76bb      	strb	r3, [r7, #26]
 8006098:	e04e      	b.n	8006138 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800609a:	7efb      	ldrb	r3, [r7, #27]
 800609c:	3b01      	subs	r3, #1
 800609e:	2b07      	cmp	r3, #7
 80060a0:	d821      	bhi.n	80060e6 <UART_SetConfig+0x39a>
 80060a2:	a201      	add	r2, pc, #4	; (adr r2, 80060a8 <UART_SetConfig+0x35c>)
 80060a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a8:	080060c9 	.word	0x080060c9
 80060ac:	080060d1 	.word	0x080060d1
 80060b0:	080060e7 	.word	0x080060e7
 80060b4:	080060d7 	.word	0x080060d7
 80060b8:	080060e7 	.word	0x080060e7
 80060bc:	080060e7 	.word	0x080060e7
 80060c0:	080060e7 	.word	0x080060e7
 80060c4:	080060df 	.word	0x080060df
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060c8:	f7fe f9d6 	bl	8004478 <HAL_RCC_GetPCLK2Freq>
 80060cc:	6178      	str	r0, [r7, #20]
        break;
 80060ce:	e00f      	b.n	80060f0 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060d0:	4b24      	ldr	r3, [pc, #144]	; (8006164 <UART_SetConfig+0x418>)
 80060d2:	617b      	str	r3, [r7, #20]
        break;
 80060d4:	e00c      	b.n	80060f0 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060d6:	f7fe f93b 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 80060da:	6178      	str	r0, [r7, #20]
        break;
 80060dc:	e008      	b.n	80060f0 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060e2:	617b      	str	r3, [r7, #20]
        break;
 80060e4:	e004      	b.n	80060f0 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	76bb      	strb	r3, [r7, #26]
        break;
 80060ee:	bf00      	nop
    }

    if (pclk != 0U)
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d020      	beq.n	8006138 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	4a19      	ldr	r2, [pc, #100]	; (8006160 <UART_SetConfig+0x414>)
 80060fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006100:	461a      	mov	r2, r3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	fbb3 f2f2 	udiv	r2, r3, r2
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	441a      	add	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	fbb2 f3f3 	udiv	r3, r2, r3
 8006118:	b29b      	uxth	r3, r3
 800611a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	2b0f      	cmp	r3, #15
 8006120:	d908      	bls.n	8006134 <UART_SetConfig+0x3e8>
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006128:	d204      	bcs.n	8006134 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	60da      	str	r2, [r3, #12]
 8006132:	e001      	b.n	8006138 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006154:	7ebb      	ldrb	r3, [r7, #26]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3720      	adds	r7, #32
 800615a:	46bd      	mov	sp, r7
 800615c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006160:	08010e54 	.word	0x08010e54
 8006164:	00f42400 	.word	0x00f42400

08006168 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00a      	beq.n	8006192 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00a      	beq.n	80061d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fc:	f003 0310 	and.w	r3, r3, #16
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00a      	beq.n	800621a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00a      	beq.n	800623c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006244:	2b00      	cmp	r3, #0
 8006246:	d01a      	beq.n	800627e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006266:	d10a      	bne.n	800627e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	605a      	str	r2, [r3, #4]
  }
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80062bc:	f7fc f9d4 	bl	8002668 <HAL_GetTick>
 80062c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0308 	and.w	r3, r3, #8
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d10e      	bne.n	80062ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f82c 	bl	800633c <UART_WaitOnFlagUntilTimeout>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e022      	b.n	8006334 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	d10e      	bne.n	800631a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f816 	bl	800633c <UART_WaitOnFlagUntilTimeout>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e00c      	b.n	8006334 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2220      	movs	r2, #32
 800631e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2220      	movs	r2, #32
 8006326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	603b      	str	r3, [r7, #0]
 8006348:	4613      	mov	r3, r2
 800634a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800634c:	e062      	b.n	8006414 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006354:	d05e      	beq.n	8006414 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006356:	f7fc f987 	bl	8002668 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	429a      	cmp	r2, r3
 8006364:	d302      	bcc.n	800636c <UART_WaitOnFlagUntilTimeout+0x30>
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d11d      	bne.n	80063a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800637a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689a      	ldr	r2, [r3, #8]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0201 	bic.w	r2, r2, #1
 800638a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2220      	movs	r2, #32
 8006390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e045      	b.n	8006434 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0304 	and.w	r3, r3, #4
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d02e      	beq.n	8006414 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063c4:	d126      	bne.n	8006414 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063ce:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063de:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0201 	bic.w	r2, r2, #1
 80063ee:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2220      	movs	r2, #32
 80063fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2220      	movs	r2, #32
 8006404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e00f      	b.n	8006434 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	69da      	ldr	r2, [r3, #28]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	4013      	ands	r3, r2
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	429a      	cmp	r2, r3
 8006422:	bf0c      	ite	eq
 8006424:	2301      	moveq	r3, #1
 8006426:	2300      	movne	r3, #0
 8006428:	b2db      	uxtb	r3, r3
 800642a:	461a      	mov	r2, r3
 800642c:	79fb      	ldrb	r3, [r7, #7]
 800642e:	429a      	cmp	r2, r3
 8006430:	d08d      	beq.n	800634e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006452:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006462:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2220      	movs	r2, #32
 8006468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800648e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6812      	ldr	r2, [r2, #0]
 800649a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800649e:	f023 0301 	bic.w	r3, r3, #1
 80064a2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2220      	movs	r2, #32
 80064a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80064b2:	bf00      	nop
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ca:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0320 	and.w	r3, r3, #32
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d114      	bne.n	8006504 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064f0:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006500:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006502:	e002      	b.n	800650a <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f7fb fa1d 	bl	8001944 <HAL_UART_TxCpltCallback>
}
 800650a:	bf00      	nop
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b084      	sub	sp, #16
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f7ff fbff 	bl	8005d24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006526:	bf00      	nop
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b086      	sub	sp, #24
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006542:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800654a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006556:	2b80      	cmp	r3, #128	; 0x80
 8006558:	d109      	bne.n	800656e <UART_DMAError+0x40>
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	2b21      	cmp	r3, #33	; 0x21
 800655e:	d106      	bne.n	800656e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2200      	movs	r2, #0
 8006564:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006568:	6978      	ldr	r0, [r7, #20]
 800656a:	f7ff ff67 	bl	800643c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006578:	2b40      	cmp	r3, #64	; 0x40
 800657a:	d109      	bne.n	8006590 <UART_DMAError+0x62>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b22      	cmp	r3, #34	; 0x22
 8006580:	d106      	bne.n	8006590 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2200      	movs	r2, #0
 8006586:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800658a:	6978      	ldr	r0, [r7, #20]
 800658c:	f7ff ff74 	bl	8006478 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006596:	f043 0210 	orr.w	r2, r3, #16
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065a0:	6978      	ldr	r0, [r7, #20]
 80065a2:	f7ff fbc9 	bl	8005d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065a6:	bf00      	nop
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f7ff fbb3 	bl	8005d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065d2:	bf00      	nop
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065da:	b480      	push	{r7}
 80065dc:	b083      	sub	sp, #12
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065e8:	2b21      	cmp	r3, #33	; 0x21
 80065ea:	d12a      	bne.n	8006642 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d110      	bne.n	800661a <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006606:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006616:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006618:	e013      	b.n	8006642 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661e:	781a      	ldrb	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006636:	b29b      	uxth	r3, r3
 8006638:	3b01      	subs	r3, #1
 800663a:	b29a      	uxth	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800664e:	b480      	push	{r7}
 8006650:	b085      	sub	sp, #20
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800665c:	2b21      	cmp	r3, #33	; 0x21
 800665e:	d12f      	bne.n	80066c0 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006666:	b29b      	uxth	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d110      	bne.n	800668e <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800667a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800668a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800668c:	e018      	b.n	80066c0 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006692:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	461a      	mov	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066a2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a8:	1c9a      	adds	r2, r3, #2
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	3b01      	subs	r3, #1
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80066c0:	bf00      	nop
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066da:	2b21      	cmp	r3, #33	; 0x21
 80066dc:	d13d      	bne.n	800675a <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80066e4:	81fb      	strh	r3, [r7, #14]
 80066e6:	e035      	b.n	8006754 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d111      	bne.n	8006718 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689a      	ldr	r2, [r3, #8]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006702:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006712:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006714:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8006716:	e020      	b.n	800675a <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006722:	2b00      	cmp	r3, #0
 8006724:	d013      	beq.n	800674e <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800672a:	781a      	ldrb	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006742:	b29b      	uxth	r3, r3
 8006744:	3b01      	subs	r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800674e:	89fb      	ldrh	r3, [r7, #14]
 8006750:	3b01      	subs	r3, #1
 8006752:	81fb      	strh	r3, [r7, #14]
 8006754:	89fb      	ldrh	r3, [r7, #14]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1c6      	bne.n	80066e8 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800675a:	bf00      	nop
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006766:	b480      	push	{r7}
 8006768:	b085      	sub	sp, #20
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006774:	2b21      	cmp	r3, #33	; 0x21
 8006776:	d142      	bne.n	80067fe <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800677e:	81fb      	strh	r3, [r7, #14]
 8006780:	e03a      	b.n	80067f8 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d111      	bne.n	80067b2 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800679c:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ac:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80067ae:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 80067b0:	e025      	b.n	80067fe <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d018      	beq.n	80067f2 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c4:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	461a      	mov	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067d4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067da:	1c9a      	adds	r2, r3, #2
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80067f2:	89fb      	ldrh	r3, [r7, #14]
 80067f4:	3b01      	subs	r3, #1
 80067f6:	81fb      	strh	r3, [r7, #14]
 80067f8:	89fb      	ldrh	r3, [r7, #14]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1c1      	bne.n	8006782 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 80067fe:	bf00      	nop
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b082      	sub	sp, #8
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006820:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2220      	movs	r2, #32
 8006826:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7fb f887 	bl	8001944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800684c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006854:	2b22      	cmp	r3, #34	; 0x22
 8006856:	d13b      	bne.n	80068d0 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006860:	89bb      	ldrh	r3, [r7, #12]
 8006862:	b2d9      	uxtb	r1, r3
 8006864:	89fb      	ldrh	r3, [r7, #14]
 8006866:	b2da      	uxtb	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800686c:	400a      	ands	r2, r1
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006882:	b29b      	uxth	r3, r3
 8006884:	3b01      	subs	r3, #1
 8006886:	b29a      	uxth	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d122      	bne.n	80068e0 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80068a8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 0201 	bic.w	r2, r2, #1
 80068b8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2220      	movs	r2, #32
 80068be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f7fb f80f 	bl	80018ec <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068ce:	e007      	b.n	80068e0 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	699a      	ldr	r2, [r3, #24]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0208 	orr.w	r2, r2, #8
 80068de:	619a      	str	r2, [r3, #24]
}
 80068e0:	bf00      	nop
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80068f6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068fe:	2b22      	cmp	r3, #34	; 0x22
 8006900:	d13b      	bne.n	800697a <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800690e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006910:	89ba      	ldrh	r2, [r7, #12]
 8006912:	89fb      	ldrh	r3, [r7, #14]
 8006914:	4013      	ands	r3, r2
 8006916:	b29a      	uxth	r2, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006920:	1c9a      	adds	r2, r3, #2
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800692c:	b29b      	uxth	r3, r3
 800692e:	3b01      	subs	r3, #1
 8006930:	b29a      	uxth	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800693e:	b29b      	uxth	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d122      	bne.n	800698a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006952:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689a      	ldr	r2, [r3, #8]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f022 0201 	bic.w	r2, r2, #1
 8006962:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2220      	movs	r2, #32
 8006968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fa ffba 	bl	80018ec <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006978:	e007      	b.n	800698a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	699a      	ldr	r2, [r3, #24]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f042 0208 	orr.w	r2, r2, #8
 8006988:	619a      	str	r2, [r3, #24]
}
 800698a:	bf00      	nop
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80069a2:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069aa:	2b22      	cmp	r3, #34	; 0x22
 80069ac:	d168      	bne.n	8006a80 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80069b4:	81fb      	strh	r3, [r7, #14]
 80069b6:	e03f      	b.n	8006a38 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069c0:	893b      	ldrh	r3, [r7, #8]
 80069c2:	b2d9      	uxtb	r1, r3
 80069c4:	89bb      	ldrh	r3, [r7, #12]
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069cc:	400a      	ands	r2, r1
 80069ce:	b2d2      	uxtb	r2, r2
 80069d0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	3b01      	subs	r3, #1
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d11b      	bne.n	8006a32 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a08:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6812      	ldr	r2, [r2, #0]
 8006a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a18:	f023 0301 	bic.w	r3, r3, #1
 8006a1c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7fa ff5d 	bl	80018ec <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006a32:	89fb      	ldrh	r3, [r7, #14]
 8006a34:	3b01      	subs	r3, #1
 8006a36:	81fb      	strh	r3, [r7, #14]
 8006a38:	89fb      	ldrh	r3, [r7, #14]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1bc      	bne.n	80069b8 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a44:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006a46:	897b      	ldrh	r3, [r7, #10]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d021      	beq.n	8006a90 <UART_RxISR_8BIT_FIFOEN+0xfc>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a52:	897a      	ldrh	r2, [r7, #10]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d21b      	bcs.n	8006a90 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689a      	ldr	r2, [r3, #8]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006a66:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a0b      	ldr	r2, [pc, #44]	; (8006a98 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8006a6c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f042 0220 	orr.w	r2, r2, #32
 8006a7c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a7e:	e007      	b.n	8006a90 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	699a      	ldr	r2, [r3, #24]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0208 	orr.w	r2, r2, #8
 8006a8e:	619a      	str	r2, [r3, #24]
}
 8006a90:	bf00      	nop
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	0800683f 	.word	0x0800683f

08006a9c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006aaa:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ab2:	2b22      	cmp	r3, #34	; 0x22
 8006ab4:	d168      	bne.n	8006b88 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006abc:	82fb      	strh	r3, [r7, #22]
 8006abe:	e03f      	b.n	8006b40 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006acc:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006ace:	8a3a      	ldrh	r2, [r7, #16]
 8006ad0:	8abb      	ldrh	r3, [r7, #20]
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ade:	1c9a      	adds	r2, r3, #2
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	3b01      	subs	r3, #1
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d11b      	bne.n	8006b3a <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b10:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	6812      	ldr	r2, [r2, #0]
 8006b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b20:	f023 0301 	bic.w	r3, r3, #1
 8006b24:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7fa fed9 	bl	80018ec <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006b3a:	8afb      	ldrh	r3, [r7, #22]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	82fb      	strh	r3, [r7, #22]
 8006b40:	8afb      	ldrh	r3, [r7, #22]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1bc      	bne.n	8006ac0 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b4c:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006b4e:	8a7b      	ldrh	r3, [r7, #18]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d021      	beq.n	8006b98 <UART_RxISR_16BIT_FIFOEN+0xfc>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b5a:	8a7a      	ldrh	r2, [r7, #18]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d21b      	bcs.n	8006b98 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006b6e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a0b      	ldr	r2, [pc, #44]	; (8006ba0 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8006b74:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f042 0220 	orr.w	r2, r2, #32
 8006b84:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b86:	e007      	b.n	8006b98 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699a      	ldr	r2, [r3, #24]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0208 	orr.w	r2, r2, #8
 8006b96:	619a      	str	r2, [r3, #24]
}
 8006b98:	bf00      	nop
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	080068e9 	.word	0x080068e9

08006ba4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d101      	bne.n	8006bf6 <HAL_UARTEx_DisableFifoMode+0x16>
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	e027      	b.n	8006c46 <HAL_UARTEx_DisableFifoMode+0x66>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2224      	movs	r2, #36	; 0x24
 8006c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0201 	bic.w	r2, r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b084      	sub	sp, #16
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
 8006c5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d101      	bne.n	8006c6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c66:	2302      	movs	r3, #2
 8006c68:	e02d      	b.n	8006cc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2224      	movs	r2, #36	; 0x24
 8006c76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0201 	bic.w	r2, r2, #1
 8006c90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f850 	bl	8006d4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e02d      	b.n	8006d42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2224      	movs	r2, #36	; 0x24
 8006cf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f022 0201 	bic.w	r2, r2, #1
 8006d0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f812 	bl	8006d4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2220      	movs	r2, #32
 8006d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b089      	sub	sp, #36	; 0x24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006d54:	4a2f      	ldr	r2, [pc, #188]	; (8006e14 <UARTEx_SetNbDataToProcess+0xc8>)
 8006d56:	f107 0314 	add.w	r3, r7, #20
 8006d5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d5e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006d62:	4a2d      	ldr	r2, [pc, #180]	; (8006e18 <UARTEx_SetNbDataToProcess+0xcc>)
 8006d64:	f107 030c 	add.w	r3, r7, #12
 8006d68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d6c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d108      	bne.n	8006d8a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d88:	e03d      	b.n	8006e06 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d8a:	2308      	movs	r3, #8
 8006d8c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d8e:	2308      	movs	r3, #8
 8006d90:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	0e5b      	lsrs	r3, r3, #25
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	0f5b      	lsrs	r3, r3, #29
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	f003 0307 	and.w	r3, r3, #7
 8006db0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006db2:	7fbb      	ldrb	r3, [r7, #30]
 8006db4:	7f3a      	ldrb	r2, [r7, #28]
 8006db6:	f107 0120 	add.w	r1, r7, #32
 8006dba:	440a      	add	r2, r1
 8006dbc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006dc0:	fb02 f303 	mul.w	r3, r2, r3
 8006dc4:	7f3a      	ldrb	r2, [r7, #28]
 8006dc6:	f107 0120 	add.w	r1, r7, #32
 8006dca:	440a      	add	r2, r1
 8006dcc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006dd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006ddc:	7ffb      	ldrb	r3, [r7, #31]
 8006dde:	7f7a      	ldrb	r2, [r7, #29]
 8006de0:	f107 0120 	add.w	r1, r7, #32
 8006de4:	440a      	add	r2, r1
 8006de6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006dea:	fb02 f303 	mul.w	r3, r2, r3
 8006dee:	7f7a      	ldrb	r2, [r7, #29]
 8006df0:	f107 0120 	add.w	r1, r7, #32
 8006df4:	440a      	add	r2, r1
 8006df6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006dfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e06:	bf00      	nop
 8006e08:	3724      	adds	r7, #36	; 0x24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	08010a70 	.word	0x08010a70
 8006e18:	08010a78 	.word	0x08010a78

08006e1c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b088      	sub	sp, #32
 8006e20:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006e22:	2300      	movs	r3, #0
 8006e24:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006e26:	f107 0308 	add.w	r3, r7, #8
 8006e2a:	2218      	movs	r2, #24
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 fedd 	bl	8007bee <Osal_MemSet>
  rq.ogf = 0x3f;
 8006e34:	233f      	movs	r3, #63	; 0x3f
 8006e36:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006e38:	2381      	movs	r3, #129	; 0x81
 8006e3a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006e3c:	1dfb      	adds	r3, r7, #7
 8006e3e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006e40:	2301      	movs	r3, #1
 8006e42:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e44:	f107 0308 	add.w	r3, r7, #8
 8006e48:	2100      	movs	r1, #0
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f001 fa8e 	bl	800836c <hci_send_req>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	da01      	bge.n	8006e5a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006e56:	23ff      	movs	r3, #255	; 0xff
 8006e58:	e000      	b.n	8006e5c <aci_gap_set_non_discoverable+0x40>
  return status;
 8006e5a:	79fb      	ldrb	r3, [r7, #7]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3720      	adds	r7, #32
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8006e64:	b5b0      	push	{r4, r5, r7, lr}
 8006e66:	b0ce      	sub	sp, #312	; 0x138
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	4605      	mov	r5, r0
 8006e6c:	460c      	mov	r4, r1
 8006e6e:	4610      	mov	r0, r2
 8006e70:	4619      	mov	r1, r3
 8006e72:	1dfb      	adds	r3, r7, #7
 8006e74:	462a      	mov	r2, r5
 8006e76:	701a      	strb	r2, [r3, #0]
 8006e78:	1d3b      	adds	r3, r7, #4
 8006e7a:	4622      	mov	r2, r4
 8006e7c:	801a      	strh	r2, [r3, #0]
 8006e7e:	1cbb      	adds	r3, r7, #2
 8006e80:	4602      	mov	r2, r0
 8006e82:	801a      	strh	r2, [r3, #0]
 8006e84:	1dbb      	adds	r3, r7, #6
 8006e86:	460a      	mov	r2, r1
 8006e88:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006e8a:	f107 0310 	add.w	r3, r7, #16
 8006e8e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006e92:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006e96:	3308      	adds	r3, #8
 8006e98:	f107 0210 	add.w	r2, r7, #16
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006ea2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006ea6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006eaa:	4413      	add	r3, r2
 8006eac:	3309      	adds	r3, #9
 8006eae:	f107 0210 	add.w	r2, r7, #16
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006eb8:	f107 030f 	add.w	r3, r7, #15
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006ec6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006eca:	1dfa      	adds	r2, r7, #7
 8006ecc:	7812      	ldrb	r2, [r2, #0]
 8006ece:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006ed0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006eda:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ede:	1d3a      	adds	r2, r7, #4
 8006ee0:	8812      	ldrh	r2, [r2, #0]
 8006ee2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006ee6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006eea:	3302      	adds	r3, #2
 8006eec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006ef0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ef4:	1cba      	adds	r2, r7, #2
 8006ef6:	8812      	ldrh	r2, [r2, #0]
 8006ef8:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006efc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f00:	3302      	adds	r3, #2
 8006f02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006f06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f0a:	1dba      	adds	r2, r7, #6
 8006f0c:	7812      	ldrb	r2, [r2, #0]
 8006f0e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006f10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f14:	3301      	adds	r3, #1
 8006f16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006f1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f1e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006f22:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006f24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f28:	3301      	adds	r3, #1
 8006f2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8006f2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f32:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006f36:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006f38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006f42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f46:	3308      	adds	r3, #8
 8006f48:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006f4c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 fe3c 	bl	8007bce <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006f56:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006f5a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006f5e:	4413      	add	r3, r2
 8006f60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006f64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006f68:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006f6c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006f6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f72:	3301      	adds	r3, #1
 8006f74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006f78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006f82:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 fe21 	bl	8007bce <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006f8c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006f90:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006f94:	4413      	add	r3, r2
 8006f96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8006f9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f9e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8006fa2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006fa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fa8:	3302      	adds	r3, #2
 8006faa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8006fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fb2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8006fb6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006fb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fbc:	3302      	adds	r3, #2
 8006fbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006fc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006fc6:	2218      	movs	r2, #24
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 fe0f 	bl	8007bee <Osal_MemSet>
  rq.ogf = 0x3f;
 8006fd0:	233f      	movs	r3, #63	; 0x3f
 8006fd2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8006fd6:	2383      	movs	r3, #131	; 0x83
 8006fd8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006fdc:	f107 0310 	add.w	r3, r7, #16
 8006fe0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006fe4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fe8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006fec:	f107 030f 	add.w	r3, r7, #15
 8006ff0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006ffa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ffe:	2100      	movs	r1, #0
 8007000:	4618      	mov	r0, r3
 8007002:	f001 f9b3 	bl	800836c <hci_send_req>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	da01      	bge.n	8007010 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800700c:	23ff      	movs	r3, #255	; 0xff
 800700e:	e002      	b.n	8007016 <aci_gap_set_discoverable+0x1b2>
  return status;
 8007010:	f107 030f 	add.w	r3, r7, #15
 8007014:	781b      	ldrb	r3, [r3, #0]
}
 8007016:	4618      	mov	r0, r3
 8007018:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800701c:	46bd      	mov	sp, r7
 800701e:	bdb0      	pop	{r4, r5, r7, pc}

08007020 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b0cc      	sub	sp, #304	; 0x130
 8007024:	af00      	add	r7, sp, #0
 8007026:	4602      	mov	r2, r0
 8007028:	1dfb      	adds	r3, r7, #7
 800702a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800702c:	f107 0310 	add.w	r3, r7, #16
 8007030:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007034:	f107 030f 	add.w	r3, r7, #15
 8007038:	2200      	movs	r2, #0
 800703a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800703c:	2300      	movs	r3, #0
 800703e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8007042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007046:	1dfa      	adds	r2, r7, #7
 8007048:	7812      	ldrb	r2, [r2, #0]
 800704a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800704c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007050:	3301      	adds	r3, #1
 8007052:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007056:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800705a:	2218      	movs	r2, #24
 800705c:	2100      	movs	r1, #0
 800705e:	4618      	mov	r0, r3
 8007060:	f000 fdc5 	bl	8007bee <Osal_MemSet>
  rq.ogf = 0x3f;
 8007064:	233f      	movs	r3, #63	; 0x3f
 8007066:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800706a:	2385      	movs	r3, #133	; 0x85
 800706c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007070:	f107 0310 	add.w	r3, r7, #16
 8007074:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007078:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800707c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007080:	f107 030f 	add.w	r3, r7, #15
 8007084:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007088:	2301      	movs	r3, #1
 800708a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800708e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007092:	2100      	movs	r1, #0
 8007094:	4618      	mov	r0, r3
 8007096:	f001 f969 	bl	800836c <hci_send_req>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	da01      	bge.n	80070a4 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 80070a0:	23ff      	movs	r3, #255	; 0xff
 80070a2:	e002      	b.n	80070aa <aci_gap_set_io_capability+0x8a>
  return status;
 80070a4:	f107 030f 	add.w	r3, r7, #15
 80070a8:	781b      	ldrb	r3, [r3, #0]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80070b4:	b5b0      	push	{r4, r5, r7, lr}
 80070b6:	b0cc      	sub	sp, #304	; 0x130
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	4605      	mov	r5, r0
 80070bc:	460c      	mov	r4, r1
 80070be:	4610      	mov	r0, r2
 80070c0:	4619      	mov	r1, r3
 80070c2:	1dfb      	adds	r3, r7, #7
 80070c4:	462a      	mov	r2, r5
 80070c6:	701a      	strb	r2, [r3, #0]
 80070c8:	1dbb      	adds	r3, r7, #6
 80070ca:	4622      	mov	r2, r4
 80070cc:	701a      	strb	r2, [r3, #0]
 80070ce:	1d7b      	adds	r3, r7, #5
 80070d0:	4602      	mov	r2, r0
 80070d2:	701a      	strb	r2, [r3, #0]
 80070d4:	1d3b      	adds	r3, r7, #4
 80070d6:	460a      	mov	r2, r1
 80070d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80070da:	f107 0310 	add.w	r3, r7, #16
 80070de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80070e2:	f107 030f 	add.w	r3, r7, #15
 80070e6:	2200      	movs	r2, #0
 80070e8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80070ea:	2300      	movs	r3, #0
 80070ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80070f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070f4:	1dfa      	adds	r2, r7, #7
 80070f6:	7812      	ldrb	r2, [r2, #0]
 80070f8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80070fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070fe:	3301      	adds	r3, #1
 8007100:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007108:	1dba      	adds	r2, r7, #6
 800710a:	7812      	ldrb	r2, [r2, #0]
 800710c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800710e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007112:	3301      	adds	r3, #1
 8007114:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007118:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800711c:	1d7a      	adds	r2, r7, #5
 800711e:	7812      	ldrb	r2, [r2, #0]
 8007120:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007122:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007126:	3301      	adds	r3, #1
 8007128:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800712c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007130:	1d3a      	adds	r2, r7, #4
 8007132:	7812      	ldrb	r2, [r2, #0]
 8007134:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007136:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800713a:	3301      	adds	r3, #1
 800713c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007144:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007148:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800714a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800714e:	3301      	adds	r3, #1
 8007150:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8007154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007158:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800715c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800715e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007162:	3301      	adds	r3, #1
 8007164:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800716c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007170:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007172:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007176:	3301      	adds	r3, #1
 8007178:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800717c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007180:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007184:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007188:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800718c:	3304      	adds	r3, #4
 800718e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007196:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800719a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800719c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071a0:	3301      	adds	r3, #1
 80071a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80071aa:	2218      	movs	r2, #24
 80071ac:	2100      	movs	r1, #0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fd1d 	bl	8007bee <Osal_MemSet>
  rq.ogf = 0x3f;
 80071b4:	233f      	movs	r3, #63	; 0x3f
 80071b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80071ba:	2386      	movs	r3, #134	; 0x86
 80071bc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80071c0:	f107 0310 	add.w	r3, r7, #16
 80071c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80071c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80071d0:	f107 030f 	add.w	r3, r7, #15
 80071d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80071d8:	2301      	movs	r3, #1
 80071da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80071de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80071e2:	2100      	movs	r1, #0
 80071e4:	4618      	mov	r0, r3
 80071e6:	f001 f8c1 	bl	800836c <hci_send_req>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	da01      	bge.n	80071f4 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 80071f0:	23ff      	movs	r3, #255	; 0xff
 80071f2:	e002      	b.n	80071fa <aci_gap_set_authentication_requirement+0x146>
  return status;
 80071f4:	f107 030f 	add.w	r3, r7, #15
 80071f8:	781b      	ldrb	r3, [r3, #0]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007200:	46bd      	mov	sp, r7
 8007202:	bdb0      	pop	{r4, r5, r7, pc}

08007204 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007204:	b590      	push	{r4, r7, lr}
 8007206:	b0cd      	sub	sp, #308	; 0x134
 8007208:	af00      	add	r7, sp, #0
 800720a:	4604      	mov	r4, r0
 800720c:	4608      	mov	r0, r1
 800720e:	4611      	mov	r1, r2
 8007210:	463a      	mov	r2, r7
 8007212:	6013      	str	r3, [r2, #0]
 8007214:	1dfb      	adds	r3, r7, #7
 8007216:	4622      	mov	r2, r4
 8007218:	701a      	strb	r2, [r3, #0]
 800721a:	1dbb      	adds	r3, r7, #6
 800721c:	4602      	mov	r2, r0
 800721e:	701a      	strb	r2, [r3, #0]
 8007220:	1d7b      	adds	r3, r7, #5
 8007222:	460a      	mov	r2, r1
 8007224:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007226:	f107 0310 	add.w	r3, r7, #16
 800722a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800722e:	f107 0308 	add.w	r3, r7, #8
 8007232:	2207      	movs	r2, #7
 8007234:	2100      	movs	r1, #0
 8007236:	4618      	mov	r0, r3
 8007238:	f000 fcd9 	bl	8007bee <Osal_MemSet>
  int index_input = 0;
 800723c:	2300      	movs	r3, #0
 800723e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007242:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007246:	1dfa      	adds	r2, r7, #7
 8007248:	7812      	ldrb	r2, [r2, #0]
 800724a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800724c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007250:	3301      	adds	r3, #1
 8007252:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8007256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800725a:	1dba      	adds	r2, r7, #6
 800725c:	7812      	ldrb	r2, [r2, #0]
 800725e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007260:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007264:	3301      	adds	r3, #1
 8007266:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800726a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800726e:	1d7a      	adds	r2, r7, #5
 8007270:	7812      	ldrb	r2, [r2, #0]
 8007272:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007274:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007278:	3301      	adds	r3, #1
 800727a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800727e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007282:	2218      	movs	r2, #24
 8007284:	2100      	movs	r1, #0
 8007286:	4618      	mov	r0, r3
 8007288:	f000 fcb1 	bl	8007bee <Osal_MemSet>
  rq.ogf = 0x3f;
 800728c:	233f      	movs	r3, #63	; 0x3f
 800728e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8007292:	238a      	movs	r3, #138	; 0x8a
 8007294:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007298:	f107 0310 	add.w	r3, r7, #16
 800729c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80072a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80072a8:	f107 0308 	add.w	r3, r7, #8
 80072ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80072b0:	2307      	movs	r3, #7
 80072b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80072b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80072ba:	2100      	movs	r1, #0
 80072bc:	4618      	mov	r0, r3
 80072be:	f001 f855 	bl	800836c <hci_send_req>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	da01      	bge.n	80072cc <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 80072c8:	23ff      	movs	r3, #255	; 0xff
 80072ca:	e021      	b.n	8007310 <aci_gap_init+0x10c>
  if ( resp.Status )
 80072cc:	f107 0308 	add.w	r3, r7, #8
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <aci_gap_init+0xda>
    return resp.Status;
 80072d6:	f107 0308 	add.w	r3, r7, #8
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	e018      	b.n	8007310 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 80072de:	f107 0308 	add.w	r3, r7, #8
 80072e2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	463b      	mov	r3, r7
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80072ee:	f107 0308 	add.w	r3, r7, #8
 80072f2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80072fc:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80072fe:	f107 0308 	add.w	r3, r7, #8
 8007302:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007306:	b29a      	uxth	r2, r3
 8007308:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800730c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007316:	46bd      	mov	sp, r7
 8007318:	bd90      	pop	{r4, r7, pc}

0800731a <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b0cc      	sub	sp, #304	; 0x130
 800731e:	af00      	add	r7, sp, #0
 8007320:	4602      	mov	r2, r0
 8007322:	463b      	mov	r3, r7
 8007324:	6019      	str	r1, [r3, #0]
 8007326:	1dfb      	adds	r3, r7, #7
 8007328:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800732a:	f107 0310 	add.w	r3, r7, #16
 800732e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007332:	f107 030f 	add.w	r3, r7, #15
 8007336:	2200      	movs	r2, #0
 8007338:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800733a:	2300      	movs	r3, #0
 800733c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8007340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007344:	1dfa      	adds	r2, r7, #7
 8007346:	7812      	ldrb	r2, [r2, #0]
 8007348:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800734a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800734e:	3301      	adds	r3, #1
 8007350:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8007354:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007358:	1c58      	adds	r0, r3, #1
 800735a:	1dfb      	adds	r3, r7, #7
 800735c:	781a      	ldrb	r2, [r3, #0]
 800735e:	463b      	mov	r3, r7
 8007360:	6819      	ldr	r1, [r3, #0]
 8007362:	f000 fc34 	bl	8007bce <Osal_MemCpy>
  index_input += AdvDataLen;
 8007366:	1dfb      	adds	r3, r7, #7
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800736e:	4413      	add	r3, r2
 8007370:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007374:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007378:	2218      	movs	r2, #24
 800737a:	2100      	movs	r1, #0
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fc36 	bl	8007bee <Osal_MemSet>
  rq.ogf = 0x3f;
 8007382:	233f      	movs	r3, #63	; 0x3f
 8007384:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007388:	238e      	movs	r3, #142	; 0x8e
 800738a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800738e:	f107 0310 	add.w	r3, r7, #16
 8007392:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007396:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800739a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800739e:	f107 030f 	add.w	r3, r7, #15
 80073a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80073a6:	2301      	movs	r3, #1
 80073a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073b0:	2100      	movs	r1, #0
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 ffda 	bl	800836c <hci_send_req>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	da01      	bge.n	80073c2 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 80073be:	23ff      	movs	r3, #255	; 0xff
 80073c0:	e002      	b.n	80073c8 <aci_gap_update_adv_data+0xae>
  return status;
 80073c2:	f107 030f 	add.w	r3, r7, #15
 80073c6:	781b      	ldrb	r3, [r3, #0]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b088      	sub	sp, #32
 80073d6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80073d8:	2300      	movs	r3, #0
 80073da:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80073dc:	f107 0308 	add.w	r3, r7, #8
 80073e0:	2218      	movs	r2, #24
 80073e2:	2100      	movs	r1, #0
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 fc02 	bl	8007bee <Osal_MemSet>
  rq.ogf = 0x3f;
 80073ea:	233f      	movs	r3, #63	; 0x3f
 80073ec:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80073ee:	2392      	movs	r3, #146	; 0x92
 80073f0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80073f2:	1dfb      	adds	r3, r7, #7
 80073f4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80073f6:	2301      	movs	r3, #1
 80073f8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073fa:	f107 0308 	add.w	r3, r7, #8
 80073fe:	2100      	movs	r1, #0
 8007400:	4618      	mov	r0, r3
 8007402:	f000 ffb3 	bl	800836c <hci_send_req>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	da01      	bge.n	8007410 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800740c:	23ff      	movs	r3, #255	; 0xff
 800740e:	e000      	b.n	8007412 <aci_gap_configure_whitelist+0x40>
  return status;
 8007410:	79fb      	ldrb	r3, [r7, #7]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3720      	adds	r7, #32
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b088      	sub	sp, #32
 800741e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007420:	2300      	movs	r3, #0
 8007422:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007424:	f107 0308 	add.w	r3, r7, #8
 8007428:	2218      	movs	r2, #24
 800742a:	2100      	movs	r1, #0
 800742c:	4618      	mov	r0, r3
 800742e:	f000 fbde 	bl	8007bee <Osal_MemSet>
  rq.ogf = 0x3f;
 8007432:	233f      	movs	r3, #63	; 0x3f
 8007434:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8007436:	f240 1301 	movw	r3, #257	; 0x101
 800743a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800743c:	1dfb      	adds	r3, r7, #7
 800743e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007440:	2301      	movs	r3, #1
 8007442:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007444:	f107 0308 	add.w	r3, r7, #8
 8007448:	2100      	movs	r1, #0
 800744a:	4618      	mov	r0, r3
 800744c:	f000 ff8e 	bl	800836c <hci_send_req>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	da01      	bge.n	800745a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8007456:	23ff      	movs	r3, #255	; 0xff
 8007458:	e000      	b.n	800745c <aci_gatt_init+0x42>
  return status;
 800745a:	79fb      	ldrb	r3, [r7, #7]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3720      	adds	r7, #32
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8007464:	b590      	push	{r4, r7, lr}
 8007466:	b0cf      	sub	sp, #316	; 0x13c
 8007468:	af00      	add	r7, sp, #0
 800746a:	4604      	mov	r4, r0
 800746c:	4638      	mov	r0, r7
 800746e:	6001      	str	r1, [r0, #0]
 8007470:	4610      	mov	r0, r2
 8007472:	4619      	mov	r1, r3
 8007474:	1dfb      	adds	r3, r7, #7
 8007476:	4622      	mov	r2, r4
 8007478:	701a      	strb	r2, [r3, #0]
 800747a:	1dbb      	adds	r3, r7, #6
 800747c:	4602      	mov	r2, r0
 800747e:	701a      	strb	r2, [r3, #0]
 8007480:	1d7b      	adds	r3, r7, #5
 8007482:	460a      	mov	r2, r1
 8007484:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007486:	f107 0310 	add.w	r3, r7, #16
 800748a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800748e:	1dfb      	adds	r3, r7, #7
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d007      	beq.n	80074a6 <aci_gatt_add_service+0x42>
 8007496:	1dfb      	adds	r3, r7, #7
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	2b02      	cmp	r3, #2
 800749c:	d101      	bne.n	80074a2 <aci_gatt_add_service+0x3e>
 800749e:	2311      	movs	r3, #17
 80074a0:	e002      	b.n	80074a8 <aci_gatt_add_service+0x44>
 80074a2:	2301      	movs	r3, #1
 80074a4:	e000      	b.n	80074a8 <aci_gatt_add_service+0x44>
 80074a6:	2303      	movs	r3, #3
 80074a8:	f107 0210 	add.w	r2, r7, #16
 80074ac:	4413      	add	r3, r2
 80074ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80074b2:	f107 030c 	add.w	r3, r7, #12
 80074b6:	2203      	movs	r2, #3
 80074b8:	2100      	movs	r1, #0
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 fb97 	bl	8007bee <Osal_MemSet>
  int index_input = 0;
 80074c0:	2300      	movs	r3, #0
 80074c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80074c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80074ca:	1dfa      	adds	r2, r7, #7
 80074cc:	7812      	ldrb	r2, [r2, #0]
 80074ce:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80074d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074d4:	3301      	adds	r3, #1
 80074d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80074da:	1dfb      	adds	r3, r7, #7
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d002      	beq.n	80074e8 <aci_gatt_add_service+0x84>
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d004      	beq.n	80074f0 <aci_gatt_add_service+0x8c>
 80074e6:	e007      	b.n	80074f8 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 80074e8:	2302      	movs	r3, #2
 80074ea:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80074ee:	e005      	b.n	80074fc <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 80074f0:	2310      	movs	r3, #16
 80074f2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80074f6:	e001      	b.n	80074fc <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 80074f8:	2347      	movs	r3, #71	; 0x47
 80074fa:	e05d      	b.n	80075b8 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80074fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007500:	1c58      	adds	r0, r3, #1
 8007502:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8007506:	463b      	mov	r3, r7
 8007508:	6819      	ldr	r1, [r3, #0]
 800750a:	f000 fb60 	bl	8007bce <Osal_MemCpy>
    index_input += size;
 800750e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8007512:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007516:	4413      	add	r3, r2
 8007518:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800751c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007520:	1dba      	adds	r2, r7, #6
 8007522:	7812      	ldrb	r2, [r2, #0]
 8007524:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007526:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800752a:	3301      	adds	r3, #1
 800752c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8007530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007534:	1d7a      	adds	r2, r7, #5
 8007536:	7812      	ldrb	r2, [r2, #0]
 8007538:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800753a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800753e:	3301      	adds	r3, #1
 8007540:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007544:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007548:	2218      	movs	r2, #24
 800754a:	2100      	movs	r1, #0
 800754c:	4618      	mov	r0, r3
 800754e:	f000 fb4e 	bl	8007bee <Osal_MemSet>
  rq.ogf = 0x3f;
 8007552:	233f      	movs	r3, #63	; 0x3f
 8007554:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8007558:	f44f 7381 	mov.w	r3, #258	; 0x102
 800755c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007560:	f107 0310 	add.w	r3, r7, #16
 8007564:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007568:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800756c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007570:	f107 030c 	add.w	r3, r7, #12
 8007574:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007578:	2303      	movs	r3, #3
 800757a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800757e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007582:	2100      	movs	r1, #0
 8007584:	4618      	mov	r0, r3
 8007586:	f000 fef1 	bl	800836c <hci_send_req>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	da01      	bge.n	8007594 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8007590:	23ff      	movs	r3, #255	; 0xff
 8007592:	e011      	b.n	80075b8 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8007594:	f107 030c 	add.w	r3, r7, #12
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <aci_gatt_add_service+0x142>
    return resp.Status;
 800759e:	f107 030c 	add.w	r3, r7, #12
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	e008      	b.n	80075b8 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 80075a6:	f107 030c 	add.w	r3, r7, #12
 80075aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80075b4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd90      	pop	{r4, r7, pc}

080075c2 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80075c2:	b590      	push	{r4, r7, lr}
 80075c4:	b0d1      	sub	sp, #324	; 0x144
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	4604      	mov	r4, r0
 80075ca:	4608      	mov	r0, r1
 80075cc:	f107 0108 	add.w	r1, r7, #8
 80075d0:	600a      	str	r2, [r1, #0]
 80075d2:	4619      	mov	r1, r3
 80075d4:	f107 030e 	add.w	r3, r7, #14
 80075d8:	4622      	mov	r2, r4
 80075da:	801a      	strh	r2, [r3, #0]
 80075dc:	f107 030d 	add.w	r3, r7, #13
 80075e0:	4602      	mov	r2, r0
 80075e2:	701a      	strb	r2, [r3, #0]
 80075e4:	1dbb      	adds	r3, r7, #6
 80075e6:	460a      	mov	r2, r1
 80075e8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80075ea:	f107 0318 	add.w	r3, r7, #24
 80075ee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80075f2:	f107 030d 	add.w	r3, r7, #13
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d008      	beq.n	800760e <aci_gatt_add_char+0x4c>
 80075fc:	f107 030d 	add.w	r3, r7, #13
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2b02      	cmp	r3, #2
 8007604:	d101      	bne.n	800760a <aci_gatt_add_char+0x48>
 8007606:	2313      	movs	r3, #19
 8007608:	e002      	b.n	8007610 <aci_gatt_add_char+0x4e>
 800760a:	2303      	movs	r3, #3
 800760c:	e000      	b.n	8007610 <aci_gatt_add_char+0x4e>
 800760e:	2305      	movs	r3, #5
 8007610:	f107 0218 	add.w	r2, r7, #24
 8007614:	4413      	add	r3, r2
 8007616:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800761a:	f107 0314 	add.w	r3, r7, #20
 800761e:	2203      	movs	r2, #3
 8007620:	2100      	movs	r1, #0
 8007622:	4618      	mov	r0, r3
 8007624:	f000 fae3 	bl	8007bee <Osal_MemSet>
  int index_input = 0;
 8007628:	2300      	movs	r3, #0
 800762a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800762e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007632:	f107 020e 	add.w	r2, r7, #14
 8007636:	8812      	ldrh	r2, [r2, #0]
 8007638:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800763a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800763e:	3302      	adds	r3, #2
 8007640:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007644:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007648:	f107 020d 	add.w	r2, r7, #13
 800764c:	7812      	ldrb	r2, [r2, #0]
 800764e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007650:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007654:	3301      	adds	r3, #1
 8007656:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800765a:	f107 030d 	add.w	r3, r7, #13
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d002      	beq.n	800766a <aci_gatt_add_char+0xa8>
 8007664:	2b02      	cmp	r3, #2
 8007666:	d004      	beq.n	8007672 <aci_gatt_add_char+0xb0>
 8007668:	e007      	b.n	800767a <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800766a:	2302      	movs	r3, #2
 800766c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007670:	e005      	b.n	800767e <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8007672:	2310      	movs	r3, #16
 8007674:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007678:	e001      	b.n	800767e <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800767a:	2347      	movs	r3, #71	; 0x47
 800767c:	e086      	b.n	800778c <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800767e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007682:	1cd8      	adds	r0, r3, #3
 8007684:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8007688:	f107 0308 	add.w	r3, r7, #8
 800768c:	6819      	ldr	r1, [r3, #0]
 800768e:	f000 fa9e 	bl	8007bce <Osal_MemCpy>
    index_input += size;
 8007692:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8007696:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800769a:	4413      	add	r3, r2
 800769c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80076a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80076a4:	1dba      	adds	r2, r7, #6
 80076a6:	8812      	ldrh	r2, [r2, #0]
 80076a8:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80076aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80076ae:	3302      	adds	r3, #2
 80076b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80076b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80076b8:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80076bc:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80076be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80076c2:	3301      	adds	r3, #1
 80076c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80076c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80076cc:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80076d0:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80076d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80076d6:	3301      	adds	r3, #1
 80076d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80076dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80076e0:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80076e4:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80076e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80076ea:	3301      	adds	r3, #1
 80076ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80076f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80076f4:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80076f8:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80076fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80076fe:	3301      	adds	r3, #1
 8007700:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007704:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007708:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800770c:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800770e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007712:	3301      	adds	r3, #1
 8007714:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007718:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800771c:	2218      	movs	r2, #24
 800771e:	2100      	movs	r1, #0
 8007720:	4618      	mov	r0, r3
 8007722:	f000 fa64 	bl	8007bee <Osal_MemSet>
  rq.ogf = 0x3f;
 8007726:	233f      	movs	r3, #63	; 0x3f
 8007728:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800772c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007730:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007734:	f107 0318 	add.w	r3, r7, #24
 8007738:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800773c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007740:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007744:	f107 0314 	add.w	r3, r7, #20
 8007748:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800774c:	2303      	movs	r3, #3
 800774e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007752:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007756:	2100      	movs	r1, #0
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fe07 	bl	800836c <hci_send_req>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	da01      	bge.n	8007768 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8007764:	23ff      	movs	r3, #255	; 0xff
 8007766:	e011      	b.n	800778c <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8007768:	f107 0314 	add.w	r3, r7, #20
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8007772:	f107 0314 	add.w	r3, r7, #20
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	e008      	b.n	800778c <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 800777a:	f107 0314 	add.w	r3, r7, #20
 800777e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007782:	b29a      	uxth	r2, r3
 8007784:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007788:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007792:	46bd      	mov	sp, r7
 8007794:	bd90      	pop	{r4, r7, pc}

08007796 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007796:	b5b0      	push	{r4, r5, r7, lr}
 8007798:	b0cc      	sub	sp, #304	; 0x130
 800779a:	af00      	add	r7, sp, #0
 800779c:	4605      	mov	r5, r0
 800779e:	460c      	mov	r4, r1
 80077a0:	4610      	mov	r0, r2
 80077a2:	4619      	mov	r1, r3
 80077a4:	1dbb      	adds	r3, r7, #6
 80077a6:	462a      	mov	r2, r5
 80077a8:	801a      	strh	r2, [r3, #0]
 80077aa:	1d3b      	adds	r3, r7, #4
 80077ac:	4622      	mov	r2, r4
 80077ae:	801a      	strh	r2, [r3, #0]
 80077b0:	1cfb      	adds	r3, r7, #3
 80077b2:	4602      	mov	r2, r0
 80077b4:	701a      	strb	r2, [r3, #0]
 80077b6:	1cbb      	adds	r3, r7, #2
 80077b8:	460a      	mov	r2, r1
 80077ba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80077bc:	f107 0310 	add.w	r3, r7, #16
 80077c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80077c4:	f107 030f 	add.w	r3, r7, #15
 80077c8:	2200      	movs	r2, #0
 80077ca:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80077cc:	2300      	movs	r3, #0
 80077ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80077d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077d6:	1dba      	adds	r2, r7, #6
 80077d8:	8812      	ldrh	r2, [r2, #0]
 80077da:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80077dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077e0:	3302      	adds	r3, #2
 80077e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80077e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ea:	1d3a      	adds	r2, r7, #4
 80077ec:	8812      	ldrh	r2, [r2, #0]
 80077ee:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80077f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077f4:	3302      	adds	r3, #2
 80077f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80077fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077fe:	1cfa      	adds	r2, r7, #3
 8007800:	7812      	ldrb	r2, [r2, #0]
 8007802:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007804:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007808:	3301      	adds	r3, #1
 800780a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800780e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007812:	1cba      	adds	r2, r7, #2
 8007814:	7812      	ldrb	r2, [r2, #0]
 8007816:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007818:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800781c:	3301      	adds	r3, #1
 800781e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007826:	1d98      	adds	r0, r3, #6
 8007828:	1cbb      	adds	r3, r7, #2
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	461a      	mov	r2, r3
 800782e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007832:	f000 f9cc 	bl	8007bce <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007836:	1cbb      	adds	r3, r7, #2
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800783e:	4413      	add	r3, r2
 8007840:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007844:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007848:	2218      	movs	r2, #24
 800784a:	2100      	movs	r1, #0
 800784c:	4618      	mov	r0, r3
 800784e:	f000 f9ce 	bl	8007bee <Osal_MemSet>
  rq.ogf = 0x3f;
 8007852:	233f      	movs	r3, #63	; 0x3f
 8007854:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8007858:	f44f 7383 	mov.w	r3, #262	; 0x106
 800785c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007860:	f107 0310 	add.w	r3, r7, #16
 8007864:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007868:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800786c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007870:	f107 030f 	add.w	r3, r7, #15
 8007874:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007878:	2301      	movs	r3, #1
 800787a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800787e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007882:	2100      	movs	r1, #0
 8007884:	4618      	mov	r0, r3
 8007886:	f000 fd71 	bl	800836c <hci_send_req>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	da01      	bge.n	8007894 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8007890:	23ff      	movs	r3, #255	; 0xff
 8007892:	e002      	b.n	800789a <aci_gatt_update_char_value+0x104>
  return status;
 8007894:	f107 030f 	add.w	r3, r7, #15
 8007898:	781b      	ldrb	r3, [r3, #0]
}
 800789a:	4618      	mov	r0, r3
 800789c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bdb0      	pop	{r4, r5, r7, pc}

080078a4 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b0cc      	sub	sp, #304	; 0x130
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	463b      	mov	r3, r7
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	1dfb      	adds	r3, r7, #7
 80078b0:	4602      	mov	r2, r0
 80078b2:	701a      	strb	r2, [r3, #0]
 80078b4:	1dbb      	adds	r3, r7, #6
 80078b6:	460a      	mov	r2, r1
 80078b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80078ba:	f107 0310 	add.w	r3, r7, #16
 80078be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80078c2:	f107 030f 	add.w	r3, r7, #15
 80078c6:	2200      	movs	r2, #0
 80078c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80078ca:	2300      	movs	r3, #0
 80078cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80078d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d4:	1dfa      	adds	r2, r7, #7
 80078d6:	7812      	ldrb	r2, [r2, #0]
 80078d8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80078da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078de:	3301      	adds	r3, #1
 80078e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80078e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078e8:	1dba      	adds	r2, r7, #6
 80078ea:	7812      	ldrb	r2, [r2, #0]
 80078ec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80078ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078f2:	3301      	adds	r3, #1
 80078f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80078f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078fc:	1c98      	adds	r0, r3, #2
 80078fe:	1dbb      	adds	r3, r7, #6
 8007900:	781a      	ldrb	r2, [r3, #0]
 8007902:	463b      	mov	r3, r7
 8007904:	6819      	ldr	r1, [r3, #0]
 8007906:	f000 f962 	bl	8007bce <Osal_MemCpy>
  index_input += Length;
 800790a:	1dbb      	adds	r3, r7, #6
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007912:	4413      	add	r3, r2
 8007914:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007918:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800791c:	2218      	movs	r2, #24
 800791e:	2100      	movs	r1, #0
 8007920:	4618      	mov	r0, r3
 8007922:	f000 f964 	bl	8007bee <Osal_MemSet>
  rq.ogf = 0x3f;
 8007926:	233f      	movs	r3, #63	; 0x3f
 8007928:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800792c:	230c      	movs	r3, #12
 800792e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007932:	f107 0310 	add.w	r3, r7, #16
 8007936:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800793a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800793e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007942:	f107 030f 	add.w	r3, r7, #15
 8007946:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800794a:	2301      	movs	r3, #1
 800794c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007950:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007954:	2100      	movs	r1, #0
 8007956:	4618      	mov	r0, r3
 8007958:	f000 fd08 	bl	800836c <hci_send_req>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	da01      	bge.n	8007966 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8007962:	23ff      	movs	r3, #255	; 0xff
 8007964:	e002      	b.n	800796c <aci_hal_write_config_data+0xc8>
  return status;
 8007966:	f107 030f 	add.w	r3, r7, #15
 800796a:	781b      	ldrb	r3, [r3, #0]
}
 800796c:	4618      	mov	r0, r3
 800796e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b0cc      	sub	sp, #304	; 0x130
 800797a:	af00      	add	r7, sp, #0
 800797c:	4602      	mov	r2, r0
 800797e:	1dfb      	adds	r3, r7, #7
 8007980:	701a      	strb	r2, [r3, #0]
 8007982:	1dbb      	adds	r3, r7, #6
 8007984:	460a      	mov	r2, r1
 8007986:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007988:	f107 0310 	add.w	r3, r7, #16
 800798c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007990:	f107 030f 	add.w	r3, r7, #15
 8007994:	2200      	movs	r2, #0
 8007996:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007998:	2300      	movs	r3, #0
 800799a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800799e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079a2:	1dfa      	adds	r2, r7, #7
 80079a4:	7812      	ldrb	r2, [r2, #0]
 80079a6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80079a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079ac:	3301      	adds	r3, #1
 80079ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80079b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b6:	1dba      	adds	r2, r7, #6
 80079b8:	7812      	ldrb	r2, [r2, #0]
 80079ba:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80079bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079c0:	3301      	adds	r3, #1
 80079c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80079c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079ca:	2218      	movs	r2, #24
 80079cc:	2100      	movs	r1, #0
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 f90d 	bl	8007bee <Osal_MemSet>
  rq.ogf = 0x3f;
 80079d4:	233f      	movs	r3, #63	; 0x3f
 80079d6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80079da:	230f      	movs	r3, #15
 80079dc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80079e0:	f107 0310 	add.w	r3, r7, #16
 80079e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80079e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80079f0:	f107 030f 	add.w	r3, r7, #15
 80079f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80079f8:	2301      	movs	r3, #1
 80079fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a02:	2100      	movs	r1, #0
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 fcb1 	bl	800836c <hci_send_req>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	da01      	bge.n	8007a14 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8007a10:	23ff      	movs	r3, #255	; 0xff
 8007a12:	e002      	b.n	8007a1a <aci_hal_set_tx_power_level+0xa4>
  return status;
 8007a14:	f107 030f 	add.w	r3, r7, #15
 8007a18:	781b      	ldrb	r3, [r3, #0]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b0cc      	sub	sp, #304	; 0x130
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	1dbb      	adds	r3, r7, #6
 8007a2e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007a30:	f107 0310 	add.w	r3, r7, #16
 8007a34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007a38:	f107 030f 	add.w	r3, r7, #15
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007a40:	2300      	movs	r3, #0
 8007a42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a4a:	1dba      	adds	r2, r7, #6
 8007a4c:	8812      	ldrh	r2, [r2, #0]
 8007a4e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007a50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a54:	3302      	adds	r3, #2
 8007a56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a5e:	2218      	movs	r2, #24
 8007a60:	2100      	movs	r1, #0
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 f8c3 	bl	8007bee <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a68:	233f      	movs	r3, #63	; 0x3f
 8007a6a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8007a6e:	2318      	movs	r3, #24
 8007a70:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007a74:	f107 0310 	add.w	r3, r7, #16
 8007a78:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007a7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007a84:	f107 030f 	add.w	r3, r7, #15
 8007a88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a96:	2100      	movs	r1, #0
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f000 fc67 	bl	800836c <hci_send_req>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	da01      	bge.n	8007aa8 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8007aa4:	23ff      	movs	r3, #255	; 0xff
 8007aa6:	e002      	b.n	8007aae <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8007aa8:	f107 030f 	add.w	r3, r7, #15
 8007aac:	781b      	ldrb	r3, [r3, #0]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b088      	sub	sp, #32
 8007abc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ac2:	f107 0308 	add.w	r3, r7, #8
 8007ac6:	2218      	movs	r2, #24
 8007ac8:	2100      	movs	r1, #0
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 f88f 	bl	8007bee <Osal_MemSet>
  rq.ogf = 0x03;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007ad8:	1dfb      	adds	r3, r7, #7
 8007ada:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007adc:	2301      	movs	r3, #1
 8007ade:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ae0:	f107 0308 	add.w	r3, r7, #8
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 fc40 	bl	800836c <hci_send_req>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	da01      	bge.n	8007af6 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007af2:	23ff      	movs	r3, #255	; 0xff
 8007af4:	e000      	b.n	8007af8 <hci_reset+0x40>
  return status;
 8007af6:	79fb      	ldrb	r3, [r7, #7]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3720      	adds	r7, #32
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007b00:	b590      	push	{r4, r7, lr}
 8007b02:	b0cd      	sub	sp, #308	; 0x134
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4604      	mov	r4, r0
 8007b08:	4608      	mov	r0, r1
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	1dfb      	adds	r3, r7, #7
 8007b0e:	4622      	mov	r2, r4
 8007b10:	701a      	strb	r2, [r3, #0]
 8007b12:	1dbb      	adds	r3, r7, #6
 8007b14:	4602      	mov	r2, r0
 8007b16:	701a      	strb	r2, [r3, #0]
 8007b18:	1d7b      	adds	r3, r7, #5
 8007b1a:	460a      	mov	r2, r1
 8007b1c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007b1e:	f107 0310 	add.w	r3, r7, #16
 8007b22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007b26:	f107 030f 	add.w	r3, r7, #15
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b38:	1dfa      	adds	r2, r7, #7
 8007b3a:	7812      	ldrb	r2, [r2, #0]
 8007b3c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007b3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b42:	3301      	adds	r3, #1
 8007b44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b4c:	1dba      	adds	r2, r7, #6
 8007b4e:	7812      	ldrb	r2, [r2, #0]
 8007b50:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007b52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b56:	3301      	adds	r3, #1
 8007b58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007b5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b60:	1d7a      	adds	r2, r7, #5
 8007b62:	7812      	ldrb	r2, [r2, #0]
 8007b64:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007b66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b74:	2218      	movs	r2, #24
 8007b76:	2100      	movs	r1, #0
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 f838 	bl	8007bee <Osal_MemSet>
  rq.ogf = 0x08;
 8007b7e:	2308      	movs	r3, #8
 8007b80:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8007b84:	2331      	movs	r3, #49	; 0x31
 8007b86:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007b8a:	f107 0310 	add.w	r3, r7, #16
 8007b8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007b92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007b9a:	f107 030f 	add.w	r3, r7, #15
 8007b9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ba8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bac:	2100      	movs	r1, #0
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 fbdc 	bl	800836c <hci_send_req>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	da01      	bge.n	8007bbe <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8007bba:	23ff      	movs	r3, #255	; 0xff
 8007bbc:	e002      	b.n	8007bc4 <hci_le_set_default_phy+0xc4>
  return status;
 8007bbe:	f107 030f 	add.w	r3, r7, #15
 8007bc2:	781b      	ldrb	r3, [r3, #0]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd90      	pop	{r4, r7, pc}

08007bce <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b084      	sub	sp, #16
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	60f8      	str	r0, [r7, #12]
 8007bd6:	60b9      	str	r1, [r7, #8]
 8007bd8:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	68b9      	ldr	r1, [r7, #8]
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f007 fcbe 	bl	800f560 <memcpy>
 8007be4:	4603      	mov	r3, r0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	60f8      	str	r0, [r7, #12]
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	68b9      	ldr	r1, [r7, #8]
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f007 fcb9 	bl	800f576 <memset>
 8007c04:	4603      	mov	r3, r0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
	...

08007c10 <DIS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DIS_Init(void)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af02      	add	r7, sp, #8
  uint16_t uuid;
  tBleStatus hciCmdResult;

  memset ( &DIS_Context, 0, sizeof(DIS_Context_t) );
 8007c16:	2202      	movs	r2, #2
 8007c18:	2100      	movs	r1, #0
 8007c1a:	480a      	ldr	r0, [pc, #40]	; (8007c44 <DIS_Init+0x34>)
 8007c1c:	f007 fcab 	bl	800f576 <memset>
   */

  /**
   *  Add Device Information Service
   */
  uuid = DEVICE_INFORMATION_SERVICE_UUID;
 8007c20:	f641 030a 	movw	r3, #6154	; 0x180a
 8007c24:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 8007c26:	1d39      	adds	r1, r7, #4
 8007c28:	4b06      	ldr	r3, [pc, #24]	; (8007c44 <DIS_Init+0x34>)
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	2201      	movs	r2, #1
 8007c30:	2001      	movs	r0, #1
 8007c32:	f7ff fc17 	bl	8007464 <aci_gatt_add_service>
 8007c36:	4603      	mov	r3, r0
 8007c38:	71fb      	strb	r3, [r7, #7]
    BLE_DBG_DIS_MSG ("FAILED to add PNP ID Characteristic, Error: %02X !!\n", 
                hciCmdResult);
  }
#endif
      
  return;
 8007c3a:	bf00      	nop
}
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	20000124 	.word	0x20000124

08007c48 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b08a      	sub	sp, #40	; 0x28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8007c50:	2300      	movs	r3, #0
 8007c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2bff      	cmp	r3, #255	; 0xff
 8007c62:	d000      	beq.n	8007c66 <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8007c64:	e04d      	b.n	8007d02 <PeerToPeer_Event_Handler+0xba>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	3302      	adds	r3, #2
 8007c6a:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	461a      	mov	r2, r3
 8007c74:	f640 4301 	movw	r3, #3073	; 0xc01
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d000      	beq.n	8007c7e <PeerToPeer_Event_Handler+0x36>
          break;
 8007c7c:	e040      	b.n	8007d00 <PeerToPeer_Event_Handler+0xb8>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	3302      	adds	r3, #2
 8007c82:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	885b      	ldrh	r3, [r3, #2]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	4b20      	ldr	r3, [pc, #128]	; (8007d10 <PeerToPeer_Event_Handler+0xc8>)
 8007c8e:	889b      	ldrh	r3, [r3, #4]
 8007c90:	3302      	adds	r3, #2
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d118      	bne.n	8007cc8 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 8007c96:	2301      	movs	r3, #1
 8007c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	7a1b      	ldrb	r3, [r3, #8]
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d007      	beq.n	8007cb8 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8007cac:	f107 0308 	add.w	r3, r7, #8
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f007 f86d 	bl	800ed90 <P2PS_STM_App_Notification>
        break;
 8007cb6:	e022      	b.n	8007cfe <PeerToPeer_Event_Handler+0xb6>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8007cbc:	f107 0308 	add.w	r3, r7, #8
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f007 f865 	bl	800ed90 <P2PS_STM_App_Notification>
        break;
 8007cc6:	e01a      	b.n	8007cfe <PeerToPeer_Event_Handler+0xb6>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	885b      	ldrh	r3, [r3, #2]
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	461a      	mov	r2, r3
 8007cd0:	4b0f      	ldr	r3, [pc, #60]	; (8007d10 <PeerToPeer_Event_Handler+0xc8>)
 8007cd2:	885b      	ldrh	r3, [r3, #2]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d111      	bne.n	8007cfe <PeerToPeer_Event_Handler+0xb6>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 8007cda:	480e      	ldr	r0, [pc, #56]	; (8007d14 <PeerToPeer_Event_Handler+0xcc>)
 8007cdc:	f007 fcc8 	bl	800f670 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	88db      	ldrh	r3, [r3, #6]
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8007cf4:	f107 0308 	add.w	r3, r7, #8
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f007 f849 	bl	800ed90 <P2PS_STM_App_Notification>
        break;
 8007cfe:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 8007d00:	bf00      	nop
  }

  return(return_value);
 8007d02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8007d06:	4618      	mov	r0, r3
 8007d08:	3728      	adds	r7, #40	; 0x28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	20000128 	.word	0x20000128
 8007d14:	08010a80 	.word	0x08010a80

08007d18 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b08a      	sub	sp, #40	; 0x28
 8007d1c:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8007d1e:	484a      	ldr	r0, [pc, #296]	; (8007e48 <P2PS_STM_Init+0x130>)
 8007d20:	f000 f92a 	bl	8007f78 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8007d24:	238f      	movs	r3, #143	; 0x8f
 8007d26:	703b      	strb	r3, [r7, #0]
 8007d28:	23e5      	movs	r3, #229	; 0xe5
 8007d2a:	707b      	strb	r3, [r7, #1]
 8007d2c:	23b3      	movs	r3, #179	; 0xb3
 8007d2e:	70bb      	strb	r3, [r7, #2]
 8007d30:	23d5      	movs	r3, #213	; 0xd5
 8007d32:	70fb      	strb	r3, [r7, #3]
 8007d34:	232e      	movs	r3, #46	; 0x2e
 8007d36:	713b      	strb	r3, [r7, #4]
 8007d38:	237f      	movs	r3, #127	; 0x7f
 8007d3a:	717b      	strb	r3, [r7, #5]
 8007d3c:	234a      	movs	r3, #74	; 0x4a
 8007d3e:	71bb      	strb	r3, [r7, #6]
 8007d40:	2398      	movs	r3, #152	; 0x98
 8007d42:	71fb      	strb	r3, [r7, #7]
 8007d44:	232a      	movs	r3, #42	; 0x2a
 8007d46:	723b      	strb	r3, [r7, #8]
 8007d48:	2348      	movs	r3, #72	; 0x48
 8007d4a:	727b      	strb	r3, [r7, #9]
 8007d4c:	237a      	movs	r3, #122	; 0x7a
 8007d4e:	72bb      	strb	r3, [r7, #10]
 8007d50:	23cc      	movs	r3, #204	; 0xcc
 8007d52:	72fb      	strb	r3, [r7, #11]
 8007d54:	2340      	movs	r3, #64	; 0x40
 8007d56:	733b      	strb	r3, [r7, #12]
 8007d58:	23fe      	movs	r3, #254	; 0xfe
 8007d5a:	737b      	strb	r3, [r7, #13]
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	73bb      	strb	r3, [r7, #14]
 8007d60:	2300      	movs	r3, #0
 8007d62:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8007d64:	4639      	mov	r1, r7
 8007d66:	4b39      	ldr	r3, [pc, #228]	; (8007e4c <P2PS_STM_Init+0x134>)
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	2308      	movs	r3, #8
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	2002      	movs	r0, #2
 8007d70:	f7ff fb78 	bl	8007464 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8007d74:	2319      	movs	r3, #25
 8007d76:	703b      	strb	r3, [r7, #0]
 8007d78:	23ed      	movs	r3, #237	; 0xed
 8007d7a:	707b      	strb	r3, [r7, #1]
 8007d7c:	2382      	movs	r3, #130	; 0x82
 8007d7e:	70bb      	strb	r3, [r7, #2]
 8007d80:	23ae      	movs	r3, #174	; 0xae
 8007d82:	70fb      	strb	r3, [r7, #3]
 8007d84:	23ed      	movs	r3, #237	; 0xed
 8007d86:	713b      	strb	r3, [r7, #4]
 8007d88:	2321      	movs	r3, #33	; 0x21
 8007d8a:	717b      	strb	r3, [r7, #5]
 8007d8c:	234c      	movs	r3, #76	; 0x4c
 8007d8e:	71bb      	strb	r3, [r7, #6]
 8007d90:	239d      	movs	r3, #157	; 0x9d
 8007d92:	71fb      	strb	r3, [r7, #7]
 8007d94:	2341      	movs	r3, #65	; 0x41
 8007d96:	723b      	strb	r3, [r7, #8]
 8007d98:	2345      	movs	r3, #69	; 0x45
 8007d9a:	727b      	strb	r3, [r7, #9]
 8007d9c:	2322      	movs	r3, #34	; 0x22
 8007d9e:	72bb      	strb	r3, [r7, #10]
 8007da0:	238e      	movs	r3, #142	; 0x8e
 8007da2:	72fb      	strb	r3, [r7, #11]
 8007da4:	2341      	movs	r3, #65	; 0x41
 8007da6:	733b      	strb	r3, [r7, #12]
 8007da8:	23fe      	movs	r3, #254	; 0xfe
 8007daa:	737b      	strb	r3, [r7, #13]
 8007dac:	2300      	movs	r3, #0
 8007dae:	73bb      	strb	r3, [r7, #14]
 8007db0:	2300      	movs	r3, #0
 8007db2:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8007db4:	4b25      	ldr	r3, [pc, #148]	; (8007e4c <P2PS_STM_Init+0x134>)
 8007db6:	8818      	ldrh	r0, [r3, #0]
 8007db8:	463a      	mov	r2, r7
 8007dba:	4b25      	ldr	r3, [pc, #148]	; (8007e50 <P2PS_STM_Init+0x138>)
 8007dbc:	9305      	str	r3, [sp, #20]
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	9304      	str	r3, [sp, #16]
 8007dc2:	230a      	movs	r3, #10
 8007dc4:	9303      	str	r3, [sp, #12]
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	9302      	str	r3, [sp, #8]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	2306      	movs	r3, #6
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	2102      	movs	r1, #2
 8007dd6:	f7ff fbf4 	bl	80075c2 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8007dda:	2319      	movs	r3, #25
 8007ddc:	703b      	strb	r3, [r7, #0]
 8007dde:	23ed      	movs	r3, #237	; 0xed
 8007de0:	707b      	strb	r3, [r7, #1]
 8007de2:	2382      	movs	r3, #130	; 0x82
 8007de4:	70bb      	strb	r3, [r7, #2]
 8007de6:	23ae      	movs	r3, #174	; 0xae
 8007de8:	70fb      	strb	r3, [r7, #3]
 8007dea:	23ed      	movs	r3, #237	; 0xed
 8007dec:	713b      	strb	r3, [r7, #4]
 8007dee:	2321      	movs	r3, #33	; 0x21
 8007df0:	717b      	strb	r3, [r7, #5]
 8007df2:	234c      	movs	r3, #76	; 0x4c
 8007df4:	71bb      	strb	r3, [r7, #6]
 8007df6:	239d      	movs	r3, #157	; 0x9d
 8007df8:	71fb      	strb	r3, [r7, #7]
 8007dfa:	2341      	movs	r3, #65	; 0x41
 8007dfc:	723b      	strb	r3, [r7, #8]
 8007dfe:	2345      	movs	r3, #69	; 0x45
 8007e00:	727b      	strb	r3, [r7, #9]
 8007e02:	2322      	movs	r3, #34	; 0x22
 8007e04:	72bb      	strb	r3, [r7, #10]
 8007e06:	238e      	movs	r3, #142	; 0x8e
 8007e08:	72fb      	strb	r3, [r7, #11]
 8007e0a:	2342      	movs	r3, #66	; 0x42
 8007e0c:	733b      	strb	r3, [r7, #12]
 8007e0e:	23fe      	movs	r3, #254	; 0xfe
 8007e10:	737b      	strb	r3, [r7, #13]
 8007e12:	2300      	movs	r3, #0
 8007e14:	73bb      	strb	r3, [r7, #14]
 8007e16:	2300      	movs	r3, #0
 8007e18:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8007e1a:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <P2PS_STM_Init+0x134>)
 8007e1c:	8818      	ldrh	r0, [r3, #0]
 8007e1e:	463a      	mov	r2, r7
 8007e20:	4b0c      	ldr	r3, [pc, #48]	; (8007e54 <P2PS_STM_Init+0x13c>)
 8007e22:	9305      	str	r3, [sp, #20]
 8007e24:	2301      	movs	r3, #1
 8007e26:	9304      	str	r3, [sp, #16]
 8007e28:	230a      	movs	r3, #10
 8007e2a:	9303      	str	r3, [sp, #12]
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	9302      	str	r3, [sp, #8]
 8007e30:	2300      	movs	r3, #0
 8007e32:	9301      	str	r3, [sp, #4]
 8007e34:	2310      	movs	r3, #16
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	2302      	movs	r3, #2
 8007e3a:	2102      	movs	r1, #2
 8007e3c:	f7ff fbc1 	bl	80075c2 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8007e40:	bf00      	nop
}
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	08007c49 	.word	0x08007c49
 8007e4c:	20000128 	.word	0x20000128
 8007e50:	2000012a 	.word	0x2000012a
 8007e54:	2000012c 	.word	0x2000012c

08007e58 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	af00      	add	r7, sp, #0
  return;
 8007e5c:	bf00      	nop
}
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8007e66:	b480      	push	{r7}
 8007e68:	af00      	add	r7, sp, #0
  return;
 8007e6a:	bf00      	nop
}
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <EDS_STM_Init>:
__weak void DIS_Init( void )
{
  return;
}
__weak void EDS_STM_Init( void )
{
 8007e74:	b480      	push	{r7}
 8007e76:	af00      	add	r7, sp, #0
  return;
 8007e78:	bf00      	nop
}
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8007e82:	b480      	push	{r7}
 8007e84:	af00      	add	r7, sp, #0
  return;
 8007e86:	bf00      	nop
}
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <HRS_Init>:
__weak void HRS_Init( void )
{
 8007e90:	b480      	push	{r7}
 8007e92:	af00      	add	r7, sp, #0
  return;
 8007e94:	bf00      	nop
}
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <HTS_Init>:
__weak void HTS_Init( void )
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	af00      	add	r7, sp, #0
  return;
 8007ea2:	bf00      	nop
}
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <IAS_Init>:
__weak void IAS_Init( void )
{
 8007eac:	b480      	push	{r7}
 8007eae:	af00      	add	r7, sp, #0
  return;
 8007eb0:	bf00      	nop
}
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <LLS_Init>:
__weak void LLS_Init( void )
{
 8007eba:	b480      	push	{r7}
 8007ebc:	af00      	add	r7, sp, #0
  return;
 8007ebe:	bf00      	nop
}
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <MOTENV_STM_Init>:
__weak void TPS_Init( void )
{
  return;
}
__weak void MOTENV_STM_Init( void )
{
 8007ec8:	b480      	push	{r7}
 8007eca:	af00      	add	r7, sp, #0
  return;
 8007ecc:	bf00      	nop
}
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	af00      	add	r7, sp, #0
  return;
 8007eda:	bf00      	nop
}
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <MESH_Init>:
__weak void MESH_Init( void )
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	af00      	add	r7, sp, #0
  return;
 8007ee8:	bf00      	nop
}
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	af00      	add	r7, sp, #0
  return;
 8007ef6:	bf00      	nop
}
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8007f00:	b480      	push	{r7}
 8007f02:	af00      	add	r7, sp, #0
  return;
 8007f04:	bf00      	nop
}
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
	...

08007f10 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007f14:	4b04      	ldr	r3, [pc, #16]	; (8007f28 <SVCCTL_Init+0x18>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007f1a:	4b04      	ldr	r3, [pc, #16]	; (8007f2c <SVCCTL_Init+0x1c>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007f20:	f000 f806 	bl	8007f30 <SVCCTL_SvcInit>

  return;
 8007f24:	bf00      	nop
}
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	20000130 	.word	0x20000130
 8007f2c:	20000138 	.word	0x20000138

08007f30 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	af00      	add	r7, sp, #0
  BLS_Init();
 8007f34:	f7ff ff90 	bl	8007e58 <BLS_Init>

  CRS_STM_Init();
 8007f38:	f7ff ff95 	bl	8007e66 <CRS_STM_Init>

  DIS_Init();
 8007f3c:	f7ff fe68 	bl	8007c10 <DIS_Init>

  EDS_STM_Init();
 8007f40:	f7ff ff98 	bl	8007e74 <EDS_STM_Init>

  HIDS_Init();
 8007f44:	f7ff ff9d 	bl	8007e82 <HIDS_Init>

  HRS_Init();
 8007f48:	f7ff ffa2 	bl	8007e90 <HRS_Init>

  HTS_Init();
 8007f4c:	f7ff ffa7 	bl	8007e9e <HTS_Init>

  IAS_Init();
 8007f50:	f7ff ffac 	bl	8007eac <IAS_Init>

  LLS_Init();
 8007f54:	f7ff ffb1 	bl	8007eba <LLS_Init>

  TPS_Init();
 8007f58:	f000 f87a 	bl	8008050 <TPS_Init>

  MOTENV_STM_Init();
 8007f5c:	f7ff ffb4 	bl	8007ec8 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007f60:	f7ff feda 	bl	8007d18 <P2PS_STM_Init>

  OTAS_STM_Init();
 8007f64:	f7ff ffb7 	bl	8007ed6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007f68:	f7ff ffc3 	bl	8007ef2 <BVOPUS_STM_Init>

  MESH_Init();
 8007f6c:	f7ff ffba 	bl	8007ee4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007f70:	f7ff ffc6 	bl	8007f00 <SVCCTL_InitCustomSvc>
  
  return;
 8007f74:	bf00      	nop
}
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007f80:	4b09      	ldr	r3, [pc, #36]	; (8007fa8 <SVCCTL_RegisterSvcHandler+0x30>)
 8007f82:	791b      	ldrb	r3, [r3, #4]
 8007f84:	4619      	mov	r1, r3
 8007f86:	4a08      	ldr	r2, [pc, #32]	; (8007fa8 <SVCCTL_RegisterSvcHandler+0x30>)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007f8e:	4b06      	ldr	r3, [pc, #24]	; (8007fa8 <SVCCTL_RegisterSvcHandler+0x30>)
 8007f90:	791b      	ldrb	r3, [r3, #4]
 8007f92:	3301      	adds	r3, #1
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	4b04      	ldr	r3, [pc, #16]	; (8007fa8 <SVCCTL_RegisterSvcHandler+0x30>)
 8007f98:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007f9a:	bf00      	nop
}
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	20000130 	.word	0x20000130

08007fac <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	2bff      	cmp	r3, #255	; 0xff
 8007fc4:	d000      	beq.n	8007fc8 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8007fc6:	e025      	b.n	8008014 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	3302      	adds	r3, #2
 8007fcc:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	881b      	ldrh	r3, [r3, #0]
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007fd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fdc:	d000      	beq.n	8007fe0 <SVCCTL_UserEvtRx+0x34>
          break;
 8007fde:	e018      	b.n	8008012 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	757b      	strb	r3, [r7, #21]
 8007fe4:	e00d      	b.n	8008002 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007fe6:	7d7b      	ldrb	r3, [r7, #21]
 8007fe8:	4a18      	ldr	r2, [pc, #96]	; (800804c <SVCCTL_UserEvtRx+0xa0>)
 8007fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	4798      	blx	r3
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d108      	bne.n	800800e <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007ffc:	7d7b      	ldrb	r3, [r7, #21]
 8007ffe:	3301      	adds	r3, #1
 8008000:	757b      	strb	r3, [r7, #21]
 8008002:	4b12      	ldr	r3, [pc, #72]	; (800804c <SVCCTL_UserEvtRx+0xa0>)
 8008004:	791b      	ldrb	r3, [r3, #4]
 8008006:	7d7a      	ldrb	r2, [r7, #21]
 8008008:	429a      	cmp	r2, r3
 800800a:	d3ec      	bcc.n	8007fe6 <SVCCTL_UserEvtRx+0x3a>
          break;
 800800c:	e000      	b.n	8008010 <SVCCTL_UserEvtRx+0x64>
              break;
 800800e:	bf00      	nop
          break;
 8008010:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 8008012:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8008014:	7dfb      	ldrb	r3, [r7, #23]
 8008016:	2b01      	cmp	r3, #1
 8008018:	d009      	beq.n	800802e <SVCCTL_UserEvtRx+0x82>
 800801a:	2b02      	cmp	r3, #2
 800801c:	d00a      	beq.n	8008034 <SVCCTL_UserEvtRx+0x88>
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10b      	bne.n	800803a <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f006 f890 	bl	800e148 <SVCCTL_App_Notification>
 8008028:	4603      	mov	r3, r0
 800802a:	75bb      	strb	r3, [r7, #22]
      break;
 800802c:	e008      	b.n	8008040 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800802e:	2301      	movs	r3, #1
 8008030:	75bb      	strb	r3, [r7, #22]
      break;
 8008032:	e005      	b.n	8008040 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8008034:	2300      	movs	r3, #0
 8008036:	75bb      	strb	r3, [r7, #22]
      break;
 8008038:	e002      	b.n	8008040 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800803a:	2301      	movs	r3, #1
 800803c:	75bb      	strb	r3, [r7, #22]
      break;
 800803e:	bf00      	nop
  }

  return (return_status);
 8008040:	7dbb      	ldrb	r3, [r7, #22]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	20000130 	.word	0x20000130

08008050 <TPS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void TPS_Init(void)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult = BLE_STATUS_SUCCESS;
 8008056:	2300      	movs	r3, #0
 8008058:	71fb      	strb	r3, [r7, #7]
   *
   * Max_Attribute_Records = 2*no_of_char + 1
   * service_max_attribute_record = 1 for Tx Power service +
   *                                2 for Tx Power Level measurement characteristic +
   */
  uuid = TX_POWER_SERVICE_UUID;
 800805a:	f641 0304 	movw	r3, #6148	; 0x1804
 800805e:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 8008060:	1d39      	adds	r1, r7, #4
 8008062:	4b12      	ldr	r3, [pc, #72]	; (80080ac <TPS_Init+0x5c>)
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	2303      	movs	r3, #3
 8008068:	2201      	movs	r2, #1
 800806a:	2001      	movs	r0, #1
 800806c:	f7ff f9fa 	bl	8007464 <aci_gatt_add_service>
 8008070:	4603      	mov	r3, r0
 8008072:	71fb      	strb	r3, [r7, #7]
  }
  
  /**
   *  Add Tx Power Level Characteristic
   */
  uuid = TX_POWER_LEVEL_CHARACTERISTIC_UUID;
 8008074:	f642 2307 	movw	r3, #10759	; 0x2a07
 8008078:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(TPS_Context.SvcHdle,
 800807a:	4b0c      	ldr	r3, [pc, #48]	; (80080ac <TPS_Init+0x5c>)
 800807c:	8818      	ldrh	r0, [r3, #0]
 800807e:	1d3a      	adds	r2, r7, #4
 8008080:	4b0b      	ldr	r3, [pc, #44]	; (80080b0 <TPS_Init+0x60>)
 8008082:	9305      	str	r3, [sp, #20]
 8008084:	2301      	movs	r3, #1
 8008086:	9304      	str	r3, [sp, #16]
 8008088:	230a      	movs	r3, #10
 800808a:	9303      	str	r3, [sp, #12]
 800808c:	2300      	movs	r3, #0
 800808e:	9302      	str	r3, [sp, #8]
 8008090:	2300      	movs	r3, #0
 8008092:	9301      	str	r3, [sp, #4]
 8008094:	2302      	movs	r3, #2
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	2301      	movs	r3, #1
 800809a:	2101      	movs	r1, #1
 800809c:	f7ff fa91 	bl	80075c2 <aci_gatt_add_char>
 80080a0:	4603      	mov	r3, r0
 80080a2:	71fb      	strb	r3, [r7, #7]
  {
    BLE_DBG_TPS_MSG ("FAILED to add Tx Power Level Characteristic, Error: %02X !!\n", 
                        hciCmdResult);
  }

  return;
 80080a4:	bf00      	nop
}
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	2000013c 	.word	0x2000013c
 80080b0:	2000013e 	.word	0x2000013e

080080b4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b088      	sub	sp, #32
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80080bc:	f107 030c 	add.w	r3, r7, #12
 80080c0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	2121      	movs	r1, #33	; 0x21
 80080cc:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80080d0:	f000 fae2 	bl	8008698 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	330b      	adds	r3, #11
 80080d8:	78db      	ldrb	r3, [r3, #3]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3720      	adds	r7, #32
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <SHCI_C2_THREAD_Init>:

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b086      	sub	sp, #24
 80080e6:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80080e8:	1d3b      	adds	r3, r7, #4
 80080ea:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	2200      	movs	r2, #0
 80080f0:	2100      	movs	r1, #0
 80080f2:	f64f 4067 	movw	r0, #64615	; 0xfc67
 80080f6:	f000 facf 	bl	8008698 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	330b      	adds	r3, #11
 80080fe:	78db      	ldrb	r3, [r3, #3]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3718      	adds	r7, #24
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b088      	sub	sp, #32
 800810c:	af00      	add	r7, sp, #0
 800810e:	4603      	mov	r3, r0
 8008110:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008112:	f107 030c 	add.w	r3, r7, #12
 8008116:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8008118:	79fb      	ldrb	r3, [r7, #7]
 800811a:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 800811c:	f107 020c 	add.w	r2, r7, #12
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	2101      	movs	r1, #1
 8008124:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 8008128:	f000 fab6 	bl	8008698 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	330b      	adds	r3, #11
 8008130:	78db      	ldrb	r3, [r3, #3]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3720      	adds	r7, #32
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800813c:	b480      	push	{r7}
 800813e:	b08b      	sub	sp, #44	; 0x2c
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8008144:	2300      	movs	r3, #0
 8008146:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8008148:	2300      	movs	r3, #0
 800814a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800814c:	2300      	movs	r3, #0
 800814e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8008154:	2300      	movs	r3, #0
 8008156:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8008158:	2300      	movs	r3, #0
 800815a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800815c:	2300      	movs	r3, #0
 800815e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8008160:	2300      	movs	r3, #0
 8008162:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8008164:	4b4a      	ldr	r3, [pc, #296]	; (8008290 <SHCI_GetWirelessFwInfo+0x154>)
 8008166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008168:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800816c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008176:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a44      	ldr	r2, [pc, #272]	; (8008294 <SHCI_GetWirelessFwInfo+0x158>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d10f      	bne.n	80081a8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	695b      	ldr	r3, [r3, #20]
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	69db      	ldr	r3, [r3, #28]
 8008198:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	617b      	str	r3, [r7, #20]
 80081a6:	e01a      	b.n	80081de <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */

    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80081b0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80081b4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	0e1b      	lsrs	r3, r3, #24
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80081e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ea:	0c1b      	lsrs	r3, r3, #16
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	0a1b      	lsrs	r3, r3, #8
 80081f6:	b2da      	uxtb	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	091b      	lsrs	r3, r3, #4
 8008200:	b2db      	uxtb	r3, r3
 8008202:	f003 030f 	and.w	r3, r3, #15
 8008206:	b2da      	uxtb	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820e:	b2db      	uxtb	r3, r3
 8008210:	f003 030f 	and.w	r3, r3, #15
 8008214:	b2da      	uxtb	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	0e1b      	lsrs	r3, r3, #24
 800821e:	b2da      	uxtb	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	0c1b      	lsrs	r3, r3, #16
 8008228:	b2da      	uxtb	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	0a1b      	lsrs	r3, r3, #8
 8008232:	b2da      	uxtb	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	b2da      	uxtb	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	b2da      	uxtb	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	0e1b      	lsrs	r3, r3, #24
 800824c:	b2da      	uxtb	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	0c1b      	lsrs	r3, r3, #16
 8008256:	b2da      	uxtb	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	0a1b      	lsrs	r3, r3, #8
 8008260:	b2da      	uxtb	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	0e1b      	lsrs	r3, r3, #24
 800826a:	b2da      	uxtb	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	0c1b      	lsrs	r3, r3, #16
 8008274:	b2da      	uxtb	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	b2da      	uxtb	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	372c      	adds	r7, #44	; 0x2c
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	58004000 	.word	0x58004000
 8008294:	a94656b9 	.word	0xa94656b9

08008298 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	4a08      	ldr	r2, [pc, #32]	; (80082c8 <hci_init+0x30>)
 80082a8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80082aa:	4a08      	ldr	r2, [pc, #32]	; (80082cc <hci_init+0x34>)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80082b0:	4806      	ldr	r0, [pc, #24]	; (80082cc <hci_init+0x34>)
 80082b2:	f000 f973 	bl	800859c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 f8d4 	bl	8008468 <TlInit>

  return;
 80082c0:	bf00      	nop
}
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	2000025c 	.word	0x2000025c
 80082cc:	20000234 	.word	0x20000234

080082d0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80082d6:	4822      	ldr	r0, [pc, #136]	; (8008360 <hci_user_evt_proc+0x90>)
 80082d8:	f001 f9e8 	bl	80096ac <LST_is_empty>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d12b      	bne.n	800833a <hci_user_evt_proc+0x6a>
 80082e2:	4b20      	ldr	r3, [pc, #128]	; (8008364 <hci_user_evt_proc+0x94>)
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d027      	beq.n	800833a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80082ea:	f107 030c 	add.w	r3, r7, #12
 80082ee:	4619      	mov	r1, r3
 80082f0:	481b      	ldr	r0, [pc, #108]	; (8008360 <hci_user_evt_proc+0x90>)
 80082f2:	f001 fa62 	bl	80097ba <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80082f6:	4b1c      	ldr	r3, [pc, #112]	; (8008368 <hci_user_evt_proc+0x98>)
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00c      	beq.n	8008318 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008302:	2301      	movs	r3, #1
 8008304:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008306:	4b18      	ldr	r3, [pc, #96]	; (8008368 <hci_user_evt_proc+0x98>)
 8008308:	69db      	ldr	r3, [r3, #28]
 800830a:	1d3a      	adds	r2, r7, #4
 800830c:	4610      	mov	r0, r2
 800830e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008310:	793a      	ldrb	r2, [r7, #4]
 8008312:	4b14      	ldr	r3, [pc, #80]	; (8008364 <hci_user_evt_proc+0x94>)
 8008314:	701a      	strb	r2, [r3, #0]
 8008316:	e002      	b.n	800831e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008318:	4b12      	ldr	r3, [pc, #72]	; (8008364 <hci_user_evt_proc+0x94>)
 800831a:	2201      	movs	r2, #1
 800831c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800831e:	4b11      	ldr	r3, [pc, #68]	; (8008364 <hci_user_evt_proc+0x94>)
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d004      	beq.n	8008330 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4618      	mov	r0, r3
 800832a:	f000 fc7b 	bl	8008c24 <TL_MM_EvtDone>
 800832e:	e004      	b.n	800833a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	4619      	mov	r1, r3
 8008334:	480a      	ldr	r0, [pc, #40]	; (8008360 <hci_user_evt_proc+0x90>)
 8008336:	f001 f9d9 	bl	80096ec <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800833a:	4809      	ldr	r0, [pc, #36]	; (8008360 <hci_user_evt_proc+0x90>)
 800833c:	f001 f9b6 	bl	80096ac <LST_is_empty>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d107      	bne.n	8008356 <hci_user_evt_proc+0x86>
 8008346:	4b07      	ldr	r3, [pc, #28]	; (8008364 <hci_user_evt_proc+0x94>)
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d003      	beq.n	8008356 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800834e:	4804      	ldr	r0, [pc, #16]	; (8008360 <hci_user_evt_proc+0x90>)
 8008350:	f006 f960 	bl	800e614 <hci_notify_asynch_evt>
  }


  return;
 8008354:	bf00      	nop
 8008356:	bf00      	nop
}
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	20000144 	.word	0x20000144
 8008364:	20000150 	.word	0x20000150
 8008368:	20000234 	.word	0x20000234

0800836c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b088      	sub	sp, #32
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008378:	2000      	movs	r0, #0
 800837a:	f000 f8cb 	bl	8008514 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800837e:	2300      	movs	r3, #0
 8008380:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	885b      	ldrh	r3, [r3, #2]
 8008386:	b21b      	sxth	r3, r3
 8008388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800838c:	b21a      	sxth	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	029b      	lsls	r3, r3, #10
 8008394:	b21b      	sxth	r3, r3
 8008396:	4313      	orrs	r3, r2
 8008398:	b21b      	sxth	r3, r3
 800839a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	b2d9      	uxtb	r1, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	689a      	ldr	r2, [r3, #8]
 80083a6:	8bbb      	ldrh	r3, [r7, #28]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 f88d 	bl	80084c8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80083ae:	e04e      	b.n	800844e <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80083b0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80083b4:	f006 f94e 	bl	800e654 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80083b8:	e043      	b.n	8008442 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80083ba:	f107 030c 	add.w	r3, r7, #12
 80083be:	4619      	mov	r1, r3
 80083c0:	4828      	ldr	r0, [pc, #160]	; (8008464 <hci_send_req+0xf8>)
 80083c2:	f001 f9fa 	bl	80097ba <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	7a5b      	ldrb	r3, [r3, #9]
 80083ca:	2b0f      	cmp	r3, #15
 80083cc:	d114      	bne.n	80083f8 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	330b      	adds	r3, #11
 80083d2:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	885b      	ldrh	r3, [r3, #2]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	8bba      	ldrh	r2, [r7, #28]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d104      	bne.n	80083ea <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	7812      	ldrb	r2, [r2, #0]
 80083e8:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	785b      	ldrb	r3, [r3, #1]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d027      	beq.n	8008442 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80083f2:	2301      	movs	r3, #1
 80083f4:	77fb      	strb	r3, [r7, #31]
 80083f6:	e024      	b.n	8008442 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	330b      	adds	r3, #11
 80083fc:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008404:	b29b      	uxth	r3, r3
 8008406:	8bba      	ldrh	r2, [r7, #28]
 8008408:	429a      	cmp	r2, r3
 800840a:	d114      	bne.n	8008436 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	7a9b      	ldrb	r3, [r3, #10]
 8008410:	3b03      	subs	r3, #3
 8008412:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	695a      	ldr	r2, [r3, #20]
 8008418:	7dfb      	ldrb	r3, [r7, #23]
 800841a:	429a      	cmp	r2, r3
 800841c:	bfa8      	it	ge
 800841e:	461a      	movge	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6918      	ldr	r0, [r3, #16]
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	1cd9      	adds	r1, r3, #3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	461a      	mov	r2, r3
 8008432:	f007 f895 	bl	800f560 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800843e:	2301      	movs	r3, #1
 8008440:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008442:	4808      	ldr	r0, [pc, #32]	; (8008464 <hci_send_req+0xf8>)
 8008444:	f001 f932 	bl	80096ac <LST_is_empty>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d0b5      	beq.n	80083ba <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800844e:	7ffb      	ldrb	r3, [r7, #31]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d0ad      	beq.n	80083b0 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008454:	2001      	movs	r0, #1
 8008456:	f000 f85d 	bl	8008514 <NotifyCmdStatus>

  return 0;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3720      	adds	r7, #32
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	20000254 	.word	0x20000254

08008468 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008470:	480f      	ldr	r0, [pc, #60]	; (80084b0 <TlInit+0x48>)
 8008472:	f001 f90b 	bl	800968c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8008476:	4a0f      	ldr	r2, [pc, #60]	; (80084b4 <TlInit+0x4c>)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800847c:	480e      	ldr	r0, [pc, #56]	; (80084b8 <TlInit+0x50>)
 800847e:	f001 f905 	bl	800968c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008482:	4b0e      	ldr	r3, [pc, #56]	; (80084bc <TlInit+0x54>)
 8008484:	2201      	movs	r2, #1
 8008486:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008488:	4b0d      	ldr	r3, [pc, #52]	; (80084c0 <TlInit+0x58>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00a      	beq.n	80084a6 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008494:	4b0b      	ldr	r3, [pc, #44]	; (80084c4 <TlInit+0x5c>)
 8008496:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008498:	4b09      	ldr	r3, [pc, #36]	; (80084c0 <TlInit+0x58>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f107 0208 	add.w	r2, r7, #8
 80084a0:	4610      	mov	r0, r2
 80084a2:	4798      	blx	r3
  }

  return;
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop
}
 80084a8:	3718      	adds	r7, #24
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20000254 	.word	0x20000254
 80084b4:	2000014c 	.word	0x2000014c
 80084b8:	20000144 	.word	0x20000144
 80084bc:	20000150 	.word	0x20000150
 80084c0:	20000234 	.word	0x20000234
 80084c4:	08008555 	.word	0x08008555

080084c8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	4603      	mov	r3, r0
 80084d0:	603a      	str	r2, [r7, #0]
 80084d2:	80fb      	strh	r3, [r7, #6]
 80084d4:	460b      	mov	r3, r1
 80084d6:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80084d8:	4b0c      	ldr	r3, [pc, #48]	; (800850c <SendCmd+0x44>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	88fa      	ldrh	r2, [r7, #6]
 80084de:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80084e2:	4b0a      	ldr	r3, [pc, #40]	; (800850c <SendCmd+0x44>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	797a      	ldrb	r2, [r7, #5]
 80084e8:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80084ea:	4b08      	ldr	r3, [pc, #32]	; (800850c <SendCmd+0x44>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	330c      	adds	r3, #12
 80084f0:	797a      	ldrb	r2, [r7, #5]
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f007 f833 	bl	800f560 <memcpy>

  hciContext.io.Send(0,0);
 80084fa:	4b05      	ldr	r3, [pc, #20]	; (8008510 <SendCmd+0x48>)
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	2100      	movs	r1, #0
 8008500:	2000      	movs	r0, #0
 8008502:	4798      	blx	r3

  return;
 8008504:	bf00      	nop
}
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	2000014c 	.word	0x2000014c
 8008510:	20000234 	.word	0x20000234

08008514 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800851e:	79fb      	ldrb	r3, [r7, #7]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d108      	bne.n	8008536 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008524:	4b0a      	ldr	r3, [pc, #40]	; (8008550 <NotifyCmdStatus+0x3c>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00d      	beq.n	8008548 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800852c:	4b08      	ldr	r3, [pc, #32]	; (8008550 <NotifyCmdStatus+0x3c>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2000      	movs	r0, #0
 8008532:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008534:	e008      	b.n	8008548 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8008536:	4b06      	ldr	r3, [pc, #24]	; (8008550 <NotifyCmdStatus+0x3c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d004      	beq.n	8008548 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800853e:	4b04      	ldr	r3, [pc, #16]	; (8008550 <NotifyCmdStatus+0x3c>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2001      	movs	r0, #1
 8008544:	4798      	blx	r3
  return;
 8008546:	bf00      	nop
 8008548:	bf00      	nop
}
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	2000025c 	.word	0x2000025c

08008554 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	7a5b      	ldrb	r3, [r3, #9]
 8008560:	2b0f      	cmp	r3, #15
 8008562:	d003      	beq.n	800856c <TlEvtReceived+0x18>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	7a5b      	ldrb	r3, [r3, #9]
 8008568:	2b0e      	cmp	r3, #14
 800856a:	d107      	bne.n	800857c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800856c:	6879      	ldr	r1, [r7, #4]
 800856e:	4809      	ldr	r0, [pc, #36]	; (8008594 <TlEvtReceived+0x40>)
 8008570:	f001 f8e0 	bl	8009734 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008574:	2000      	movs	r0, #0
 8008576:	f006 f85d 	bl	800e634 <hci_cmd_resp_release>
 800857a:	e006      	b.n	800858a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800857c:	6879      	ldr	r1, [r7, #4]
 800857e:	4806      	ldr	r0, [pc, #24]	; (8008598 <TlEvtReceived+0x44>)
 8008580:	f001 f8d8 	bl	8009734 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008584:	4804      	ldr	r0, [pc, #16]	; (8008598 <TlEvtReceived+0x44>)
 8008586:	f006 f845 	bl	800e614 <hci_notify_asynch_evt>
  }

  return;
 800858a:	bf00      	nop
}
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	20000254 	.word	0x20000254
 8008598:	20000144 	.word	0x20000144

0800859c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a05      	ldr	r2, [pc, #20]	; (80085bc <hci_register_io_bus+0x20>)
 80085a8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a04      	ldr	r2, [pc, #16]	; (80085c0 <hci_register_io_bus+0x24>)
 80085ae:	611a      	str	r2, [r3, #16]

  return;
 80085b0:	bf00      	nop
}
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	080088ad 	.word	0x080088ad
 80085c0:	08008915 	.word	0x08008915

080085c4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	4a08      	ldr	r2, [pc, #32]	; (80085f4 <shci_init+0x30>)
 80085d4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80085d6:	4a08      	ldr	r2, [pc, #32]	; (80085f8 <shci_init+0x34>)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80085dc:	4806      	ldr	r0, [pc, #24]	; (80085f8 <shci_init+0x34>)
 80085de:	f000 f911 	bl	8008804 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 f894 	bl	8008714 <TlInit>

  return;
 80085ec:	bf00      	nop
}
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	20000280 	.word	0x20000280
 80085f8:	20000260 	.word	0x20000260

080085fc <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008602:	4822      	ldr	r0, [pc, #136]	; (800868c <shci_user_evt_proc+0x90>)
 8008604:	f001 f852 	bl	80096ac <LST_is_empty>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d12b      	bne.n	8008666 <shci_user_evt_proc+0x6a>
 800860e:	4b20      	ldr	r3, [pc, #128]	; (8008690 <shci_user_evt_proc+0x94>)
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d027      	beq.n	8008666 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008616:	f107 030c 	add.w	r3, r7, #12
 800861a:	4619      	mov	r1, r3
 800861c:	481b      	ldr	r0, [pc, #108]	; (800868c <shci_user_evt_proc+0x90>)
 800861e:	f001 f8cc 	bl	80097ba <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8008622:	4b1c      	ldr	r3, [pc, #112]	; (8008694 <shci_user_evt_proc+0x98>)
 8008624:	69db      	ldr	r3, [r3, #28]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00c      	beq.n	8008644 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800862e:	2301      	movs	r3, #1
 8008630:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008632:	4b18      	ldr	r3, [pc, #96]	; (8008694 <shci_user_evt_proc+0x98>)
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	1d3a      	adds	r2, r7, #4
 8008638:	4610      	mov	r0, r2
 800863a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800863c:	793a      	ldrb	r2, [r7, #4]
 800863e:	4b14      	ldr	r3, [pc, #80]	; (8008690 <shci_user_evt_proc+0x94>)
 8008640:	701a      	strb	r2, [r3, #0]
 8008642:	e002      	b.n	800864a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008644:	4b12      	ldr	r3, [pc, #72]	; (8008690 <shci_user_evt_proc+0x94>)
 8008646:	2201      	movs	r2, #1
 8008648:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800864a:	4b11      	ldr	r3, [pc, #68]	; (8008690 <shci_user_evt_proc+0x94>)
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d004      	beq.n	800865c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	4618      	mov	r0, r3
 8008656:	f000 fae5 	bl	8008c24 <TL_MM_EvtDone>
 800865a:	e004      	b.n	8008666 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4619      	mov	r1, r3
 8008660:	480a      	ldr	r0, [pc, #40]	; (800868c <shci_user_evt_proc+0x90>)
 8008662:	f001 f843 	bl	80096ec <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008666:	4809      	ldr	r0, [pc, #36]	; (800868c <shci_user_evt_proc+0x90>)
 8008668:	f001 f820 	bl	80096ac <LST_is_empty>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d107      	bne.n	8008682 <shci_user_evt_proc+0x86>
 8008672:	4b07      	ldr	r3, [pc, #28]	; (8008690 <shci_user_evt_proc+0x94>)
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800867a:	4804      	ldr	r0, [pc, #16]	; (800868c <shci_user_evt_proc+0x90>)
 800867c:	f7f8 f8e6 	bl	800084c <shci_notify_asynch_evt>
  }


  return;
 8008680:	bf00      	nop
 8008682:	bf00      	nop
}
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	20000154 	.word	0x20000154
 8008690:	20000164 	.word	0x20000164
 8008694:	20000260 	.word	0x20000260

08008698 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	60ba      	str	r2, [r7, #8]
 80086a0:	607b      	str	r3, [r7, #4]
 80086a2:	4603      	mov	r3, r0
 80086a4:	81fb      	strh	r3, [r7, #14]
 80086a6:	460b      	mov	r3, r1
 80086a8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80086aa:	2000      	movs	r0, #0
 80086ac:	f000 f864 	bl	8008778 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80086b0:	4b16      	ldr	r3, [pc, #88]	; (800870c <shci_send+0x74>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	89fa      	ldrh	r2, [r7, #14]
 80086b6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80086ba:	4b14      	ldr	r3, [pc, #80]	; (800870c <shci_send+0x74>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	7b7a      	ldrb	r2, [r7, #13]
 80086c0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80086c2:	4b12      	ldr	r3, [pc, #72]	; (800870c <shci_send+0x74>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	330c      	adds	r3, #12
 80086c8:	7b7a      	ldrb	r2, [r7, #13]
 80086ca:	68b9      	ldr	r1, [r7, #8]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f006 ff47 	bl	800f560 <memcpy>

  shciContext.io.Send(0,0);
 80086d2:	4b0f      	ldr	r3, [pc, #60]	; (8008710 <shci_send+0x78>)
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	2100      	movs	r1, #0
 80086d8:	2000      	movs	r0, #0
 80086da:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80086dc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80086e0:	f7f8 f8d4 	bl	800088c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f103 0008 	add.w	r0, r3, #8
 80086ea:	4b08      	ldr	r3, [pc, #32]	; (800870c <shci_send+0x74>)
 80086ec:	6819      	ldr	r1, [r3, #0]
 80086ee:	4b07      	ldr	r3, [pc, #28]	; (800870c <shci_send+0x74>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	789b      	ldrb	r3, [r3, #2]
 80086f4:	3303      	adds	r3, #3
 80086f6:	461a      	mov	r2, r3
 80086f8:	f006 ff32 	bl	800f560 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80086fc:	2001      	movs	r0, #1
 80086fe:	f000 f83b 	bl	8008778 <Cmd_SetStatus>

  return;
 8008702:	bf00      	nop
}
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	20000160 	.word	0x20000160
 8008710:	20000260 	.word	0x20000260

08008714 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800871c:	4a10      	ldr	r2, [pc, #64]	; (8008760 <TlInit+0x4c>)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8008722:	4810      	ldr	r0, [pc, #64]	; (8008764 <TlInit+0x50>)
 8008724:	f000 ffb2 	bl	800968c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008728:	2001      	movs	r0, #1
 800872a:	f000 f825 	bl	8008778 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800872e:	4b0e      	ldr	r3, [pc, #56]	; (8008768 <TlInit+0x54>)
 8008730:	2201      	movs	r2, #1
 8008732:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8008734:	4b0d      	ldr	r3, [pc, #52]	; (800876c <TlInit+0x58>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00c      	beq.n	8008756 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8008740:	4b0b      	ldr	r3, [pc, #44]	; (8008770 <TlInit+0x5c>)
 8008742:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008744:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <TlInit+0x60>)
 8008746:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008748:	4b08      	ldr	r3, [pc, #32]	; (800876c <TlInit+0x58>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f107 020c 	add.w	r2, r7, #12
 8008750:	4610      	mov	r0, r2
 8008752:	4798      	blx	r3
  }

  return;
 8008754:	bf00      	nop
 8008756:	bf00      	nop
}
 8008758:	3718      	adds	r7, #24
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	20000160 	.word	0x20000160
 8008764:	20000154 	.word	0x20000154
 8008768:	20000164 	.word	0x20000164
 800876c:	20000260 	.word	0x20000260
 8008770:	080087c9 	.word	0x080087c9
 8008774:	080087e1 	.word	0x080087e1

08008778 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	4603      	mov	r3, r0
 8008780:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8008782:	79fb      	ldrb	r3, [r7, #7]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10b      	bne.n	80087a0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008788:	4b0d      	ldr	r3, [pc, #52]	; (80087c0 <Cmd_SetStatus+0x48>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d003      	beq.n	8008798 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008790:	4b0b      	ldr	r3, [pc, #44]	; (80087c0 <Cmd_SetStatus+0x48>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2000      	movs	r0, #0
 8008796:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008798:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <Cmd_SetStatus+0x4c>)
 800879a:	2200      	movs	r2, #0
 800879c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800879e:	e00b      	b.n	80087b8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80087a0:	4b08      	ldr	r3, [pc, #32]	; (80087c4 <Cmd_SetStatus+0x4c>)
 80087a2:	2201      	movs	r2, #1
 80087a4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80087a6:	4b06      	ldr	r3, [pc, #24]	; (80087c0 <Cmd_SetStatus+0x48>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d004      	beq.n	80087b8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80087ae:	4b04      	ldr	r3, [pc, #16]	; (80087c0 <Cmd_SetStatus+0x48>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2001      	movs	r0, #1
 80087b4:	4798      	blx	r3
  return;
 80087b6:	bf00      	nop
 80087b8:	bf00      	nop
}
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	20000280 	.word	0x20000280
 80087c4:	2000015c 	.word	0x2000015c

080087c8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80087d0:	2000      	movs	r0, #0
 80087d2:	f7f8 f84b 	bl	800086c <shci_cmd_resp_release>

  return;
 80087d6:	bf00      	nop
}
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
	...

080087e0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80087e8:	6879      	ldr	r1, [r7, #4]
 80087ea:	4805      	ldr	r0, [pc, #20]	; (8008800 <TlUserEvtReceived+0x20>)
 80087ec:	f000 ffa2 	bl	8009734 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80087f0:	4803      	ldr	r0, [pc, #12]	; (8008800 <TlUserEvtReceived+0x20>)
 80087f2:	f7f8 f82b 	bl	800084c <shci_notify_asynch_evt>

  return;
 80087f6:	bf00      	nop
}
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	20000154 	.word	0x20000154

08008804 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a05      	ldr	r2, [pc, #20]	; (8008824 <shci_register_io_bus+0x20>)
 8008810:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a04      	ldr	r2, [pc, #16]	; (8008828 <shci_register_io_bus+0x24>)
 8008816:	611a      	str	r2, [r3, #16]

  return;
 8008818:	bf00      	nop
}
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr
 8008824:	080089c1 	.word	0x080089c1
 8008828:	08008a15 	.word	0x08008a15

0800882c <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008830:	f006 fcf4 	bl	800f21c <HW_IPCC_Enable>

  return;
 8008834:	bf00      	nop
}
 8008836:	bd80      	pop	{r7, pc}

08008838 <TL_Init>:


void TL_Init( void )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800883c:	4b10      	ldr	r3, [pc, #64]	; (8008880 <TL_Init+0x48>)
 800883e:	4a11      	ldr	r2, [pc, #68]	; (8008884 <TL_Init+0x4c>)
 8008840:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8008842:	4b0f      	ldr	r3, [pc, #60]	; (8008880 <TL_Init+0x48>)
 8008844:	4a10      	ldr	r2, [pc, #64]	; (8008888 <TL_Init+0x50>)
 8008846:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008848:	4b0d      	ldr	r3, [pc, #52]	; (8008880 <TL_Init+0x48>)
 800884a:	4a10      	ldr	r2, [pc, #64]	; (800888c <TL_Init+0x54>)
 800884c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800884e:	4b0c      	ldr	r3, [pc, #48]	; (8008880 <TL_Init+0x48>)
 8008850:	4a0f      	ldr	r2, [pc, #60]	; (8008890 <TL_Init+0x58>)
 8008852:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 8008854:	4b0a      	ldr	r3, [pc, #40]	; (8008880 <TL_Init+0x48>)
 8008856:	4a0f      	ldr	r2, [pc, #60]	; (8008894 <TL_Init+0x5c>)
 8008858:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800885a:	4b09      	ldr	r3, [pc, #36]	; (8008880 <TL_Init+0x48>)
 800885c:	4a0e      	ldr	r2, [pc, #56]	; (8008898 <TL_Init+0x60>)
 800885e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008860:	4b07      	ldr	r3, [pc, #28]	; (8008880 <TL_Init+0x48>)
 8008862:	4a0e      	ldr	r2, [pc, #56]	; (800889c <TL_Init+0x64>)
 8008864:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008866:	4b06      	ldr	r3, [pc, #24]	; (8008880 <TL_Init+0x48>)
 8008868:	4a0d      	ldr	r2, [pc, #52]	; (80088a0 <TL_Init+0x68>)
 800886a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800886c:	4b04      	ldr	r3, [pc, #16]	; (8008880 <TL_Init+0x48>)
 800886e:	4a0d      	ldr	r2, [pc, #52]	; (80088a4 <TL_Init+0x6c>)
 8008870:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8008872:	4b03      	ldr	r3, [pc, #12]	; (8008880 <TL_Init+0x48>)
 8008874:	4a0c      	ldr	r2, [pc, #48]	; (80088a8 <TL_Init+0x70>)
 8008876:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008878:	f006 fce4 	bl	800f244 <HW_IPCC_Init>

  return;
 800887c:	bf00      	nop
}
 800887e:	bd80      	pop	{r7, pc}
 8008880:	20030000 	.word	0x20030000
 8008884:	20030028 	.word	0x20030028
 8008888:	20030048 	.word	0x20030048
 800888c:	20030058 	.word	0x20030058
 8008890:	20030064 	.word	0x20030064
 8008894:	2003006c 	.word	0x2003006c
 8008898:	20030074 	.word	0x20030074
 800889c:	2003007c 	.word	0x2003007c
 80088a0:	20030098 	.word	0x20030098
 80088a4:	2003009c 	.word	0x2003009c
 80088a8:	200300a8 	.word	0x200300a8

080088ac <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80088b8:	4811      	ldr	r0, [pc, #68]	; (8008900 <TL_BLE_Init+0x54>)
 80088ba:	f000 fee7 	bl	800968c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80088be:	4b11      	ldr	r3, [pc, #68]	; (8008904 <TL_BLE_Init+0x58>)
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	689a      	ldr	r2, [r3, #8]
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	68da      	ldr	r2, [r3, #12]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	4a0c      	ldr	r2, [pc, #48]	; (8008908 <TL_BLE_Init+0x5c>)
 80088d8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	4a08      	ldr	r2, [pc, #32]	; (8008900 <TL_BLE_Init+0x54>)
 80088de:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80088e0:	f006 fcc6 	bl	800f270 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a08      	ldr	r2, [pc, #32]	; (800890c <TL_BLE_Init+0x60>)
 80088ea:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	4a07      	ldr	r2, [pc, #28]	; (8008910 <TL_BLE_Init+0x64>)
 80088f2:	6013      	str	r3, [r2, #0]

  return 0;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	200300c4 	.word	0x200300c4
 8008904:	20030000 	.word	0x20030000
 8008908:	20030940 	.word	0x20030940
 800890c:	2000028c 	.word	0x2000028c
 8008910:	20000290 	.word	0x20000290

08008914 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	460b      	mov	r3, r1
 800891e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008920:	4b09      	ldr	r3, [pc, #36]	; (8008948 <TL_BLE_SendCmd+0x34>)
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2201      	movs	r2, #1
 8008928:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800892a:	4b07      	ldr	r3, [pc, #28]	; (8008948 <TL_BLE_SendCmd+0x34>)
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4619      	mov	r1, r3
 8008932:	2001      	movs	r0, #1
 8008934:	f000 f9da 	bl	8008cec <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008938:	f006 fca4 	bl	800f284 <HW_IPCC_BLE_SendCmd>

  return 0;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	20030000 	.word	0x20030000

0800894c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8008952:	e01c      	b.n	800898e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008954:	1d3b      	adds	r3, r7, #4
 8008956:	4619      	mov	r1, r3
 8008958:	4812      	ldr	r0, [pc, #72]	; (80089a4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800895a:	f000 ff2e 	bl	80097ba <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	7a5b      	ldrb	r3, [r3, #9]
 8008962:	2b0f      	cmp	r3, #15
 8008964:	d003      	beq.n	800896e <HW_IPCC_BLE_RxEvtNot+0x22>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	7a5b      	ldrb	r3, [r3, #9]
 800896a:	2b0e      	cmp	r3, #14
 800896c:	d105      	bne.n	800897a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4619      	mov	r1, r3
 8008972:	2002      	movs	r0, #2
 8008974:	f000 f9ba 	bl	8008cec <OutputDbgTrace>
 8008978:	e004      	b.n	8008984 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4619      	mov	r1, r3
 800897e:	2003      	movs	r0, #3
 8008980:	f000 f9b4 	bl	8008cec <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008984:	4b08      	ldr	r3, [pc, #32]	; (80089a8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	4610      	mov	r0, r2
 800898c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800898e:	4805      	ldr	r0, [pc, #20]	; (80089a4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008990:	f000 fe8c 	bl	80096ac <LST_is_empty>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0dc      	beq.n	8008954 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800899a:	bf00      	nop
}
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	200300c4 	.word	0x200300c4
 80089a8:	2000028c 	.word	0x2000028c

080089ac <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80089b0:	4b02      	ldr	r3, [pc, #8]	; (80089bc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4798      	blx	r3

  return;
 80089b6:	bf00      	nop
}
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	20000290 	.word	0x20000290

080089c0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80089cc:	480d      	ldr	r0, [pc, #52]	; (8008a04 <TL_SYS_Init+0x44>)
 80089ce:	f000 fe5d 	bl	800968c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80089d2:	4b0d      	ldr	r3, [pc, #52]	; (8008a08 <TL_SYS_Init+0x48>)
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	689a      	ldr	r2, [r3, #8]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	4a08      	ldr	r2, [pc, #32]	; (8008a04 <TL_SYS_Init+0x44>)
 80089e4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80089e6:	f006 fc6f 	bl	800f2c8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a07      	ldr	r2, [pc, #28]	; (8008a0c <TL_SYS_Init+0x4c>)
 80089f0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	4a06      	ldr	r2, [pc, #24]	; (8008a10 <TL_SYS_Init+0x50>)
 80089f8:	6013      	str	r3, [r2, #0]

  return 0;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	200300cc 	.word	0x200300cc
 8008a08:	20030000 	.word	0x20030000
 8008a0c:	20000294 	.word	0x20000294
 8008a10:	20000298 	.word	0x20000298

08008a14 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008a20:	4b09      	ldr	r3, [pc, #36]	; (8008a48 <TL_SYS_SendCmd+0x34>)
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2210      	movs	r2, #16
 8008a28:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008a2a:	4b07      	ldr	r3, [pc, #28]	; (8008a48 <TL_SYS_SendCmd+0x34>)
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4619      	mov	r1, r3
 8008a32:	2004      	movs	r0, #4
 8008a34:	f000 f95a 	bl	8008cec <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008a38:	f006 fc50 	bl	800f2dc <HW_IPCC_SYS_SendCmd>

  return 0;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	20030000 	.word	0x20030000

08008a4c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008a50:	4b07      	ldr	r3, [pc, #28]	; (8008a70 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4619      	mov	r1, r3
 8008a58:	2005      	movs	r0, #5
 8008a5a:	f000 f947 	bl	8008cec <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008a5e:	4b05      	ldr	r3, [pc, #20]	; (8008a74 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a03      	ldr	r2, [pc, #12]	; (8008a70 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008a64:	68d2      	ldr	r2, [r2, #12]
 8008a66:	6812      	ldr	r2, [r2, #0]
 8008a68:	4610      	mov	r0, r2
 8008a6a:	4798      	blx	r3

  return;
 8008a6c:	bf00      	nop
}
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	20030000 	.word	0x20030000
 8008a74:	20000294 	.word	0x20000294

08008a78 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008a7e:	e00e      	b.n	8008a9e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008a80:	1d3b      	adds	r3, r7, #4
 8008a82:	4619      	mov	r1, r3
 8008a84:	480b      	ldr	r0, [pc, #44]	; (8008ab4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008a86:	f000 fe98 	bl	80097ba <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	2006      	movs	r0, #6
 8008a90:	f000 f92c 	bl	8008cec <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008a94:	4b08      	ldr	r3, [pc, #32]	; (8008ab8 <HW_IPCC_SYS_EvtNot+0x40>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008a9e:	4805      	ldr	r0, [pc, #20]	; (8008ab4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008aa0:	f000 fe04 	bl	80096ac <LST_is_empty>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d0ea      	beq.n	8008a80 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008aaa:	bf00      	nop
}
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	200300cc 	.word	0x200300cc
 8008ab8:	20000298 	.word	0x20000298

08008abc <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8008ac4:	4b0a      	ldr	r3, [pc, #40]	; (8008af0 <TL_THREAD_Init+0x34>)
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685a      	ldr	r2, [r3, #4]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	689a      	ldr	r2, [r3, #8]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 8008ae2:	f006 fc21 	bl	800f328 <HW_IPCC_THREAD_Init>

  return;
 8008ae6:	bf00      	nop
}
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	20030000 	.word	0x20030000

08008af4 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8008af8:	4b04      	ldr	r3, [pc, #16]	; (8008b0c <TL_OT_SendCmd+0x18>)
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	2208      	movs	r2, #8
 8008b00:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 8008b02:	f006 fc1f 	bl	800f344 <HW_IPCC_OT_SendCmd>

  return;
 8008b06:	bf00      	nop
}
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	20030000 	.word	0x20030000

08008b10 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 8008b14:	4b04      	ldr	r3, [pc, #16]	; (8008b28 <TL_CLI_SendCmd+0x18>)
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	220a      	movs	r2, #10
 8008b1c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 8008b1e:	f006 fc1f 	bl	800f360 <HW_IPCC_CLI_SendCmd>

  return;
 8008b22:	bf00      	nop
}
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20030000 	.word	0x20030000

08008b2c <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8008b30:	4b04      	ldr	r3, [pc, #16]	; (8008b44 <TL_THREAD_SendAck+0x18>)
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	220d      	movs	r2, #13
 8008b38:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 8008b3a:	f006 fc1b 	bl	800f374 <HW_IPCC_THREAD_SendAck>

  return;
 8008b3e:	bf00      	nop
}
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	20030000 	.word	0x20030000

08008b48 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8008b4c:	4b04      	ldr	r3, [pc, #16]	; (8008b60 <TL_THREAD_CliSendAck+0x18>)
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	220d      	movs	r2, #13
 8008b54:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 8008b56:	f006 fc1b 	bl	800f390 <HW_IPCC_THREAD_CliSendAck>

  return;
 8008b5a:	bf00      	nop
}
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	20030000 	.word	0x20030000

08008b64 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8008b68:	4b03      	ldr	r3, [pc, #12]	; (8008b78 <HW_IPCC_OT_CmdEvtNot+0x14>)
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f005 ffc8 	bl	800eb04 <TL_OT_CmdEvtReceived>

  return;
 8008b74:	bf00      	nop
}
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	20030000 	.word	0x20030000

08008b7c <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 8008b80:	4b03      	ldr	r3, [pc, #12]	; (8008b90 <HW_IPCC_THREAD_EvtNot+0x14>)
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f005 ffc6 	bl	800eb18 <TL_THREAD_NotReceived>

  return;
 8008b8c:	bf00      	nop
}
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	20030000 	.word	0x20030000

08008b94 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 8008b98:	4b03      	ldr	r3, [pc, #12]	; (8008ba8 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f006 f8a8 	bl	800ecf4 <TL_THREAD_CliNotReceived>

  return;
 8008ba4:	bf00      	nop
}
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	20030000 	.word	0x20030000

08008bac <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008bb4:	4817      	ldr	r0, [pc, #92]	; (8008c14 <TL_MM_Init+0x68>)
 8008bb6:	f000 fd69 	bl	800968c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008bba:	4817      	ldr	r0, [pc, #92]	; (8008c18 <TL_MM_Init+0x6c>)
 8008bbc:	f000 fd66 	bl	800968c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008bc0:	4b16      	ldr	r3, [pc, #88]	; (8008c1c <TL_MM_Init+0x70>)
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	4a16      	ldr	r2, [pc, #88]	; (8008c20 <TL_MM_Init+0x74>)
 8008bc6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008bc8:	4b15      	ldr	r3, [pc, #84]	; (8008c20 <TL_MM_Init+0x74>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	6892      	ldr	r2, [r2, #8]
 8008bd0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008bd2:	4b13      	ldr	r3, [pc, #76]	; (8008c20 <TL_MM_Init+0x74>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	68d2      	ldr	r2, [r2, #12]
 8008bda:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008bdc:	4b10      	ldr	r3, [pc, #64]	; (8008c20 <TL_MM_Init+0x74>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a0c      	ldr	r2, [pc, #48]	; (8008c14 <TL_MM_Init+0x68>)
 8008be2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008be4:	4b0e      	ldr	r3, [pc, #56]	; (8008c20 <TL_MM_Init+0x74>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	6812      	ldr	r2, [r2, #0]
 8008bec:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008bee:	4b0c      	ldr	r3, [pc, #48]	; (8008c20 <TL_MM_Init+0x74>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	6852      	ldr	r2, [r2, #4]
 8008bf6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008bf8:	4b09      	ldr	r3, [pc, #36]	; (8008c20 <TL_MM_Init+0x74>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	6912      	ldr	r2, [r2, #16]
 8008c00:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008c02:	4b07      	ldr	r3, [pc, #28]	; (8008c20 <TL_MM_Init+0x74>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	6952      	ldr	r2, [r2, #20]
 8008c0a:	619a      	str	r2, [r3, #24]

  return;
 8008c0c:	bf00      	nop
}
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	200300b4 	.word	0x200300b4
 8008c18:	20000284 	.word	0x20000284
 8008c1c:	20030000 	.word	0x20030000
 8008c20:	2000029c 	.word	0x2000029c

08008c24 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008c2c:	6879      	ldr	r1, [r7, #4]
 8008c2e:	4807      	ldr	r0, [pc, #28]	; (8008c4c <TL_MM_EvtDone+0x28>)
 8008c30:	f000 fd80 	bl	8009734 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008c34:	6879      	ldr	r1, [r7, #4]
 8008c36:	2000      	movs	r0, #0
 8008c38:	f000 f858 	bl	8008cec <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008c3c:	4804      	ldr	r0, [pc, #16]	; (8008c50 <TL_MM_EvtDone+0x2c>)
 8008c3e:	f006 fbd9 	bl	800f3f4 <HW_IPCC_MM_SendFreeBuf>

  return;
 8008c42:	bf00      	nop
}
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20000284 	.word	0x20000284
 8008c50:	08008c55 	.word	0x08008c55

08008c54 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008c5a:	e00c      	b.n	8008c76 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008c5c:	1d3b      	adds	r3, r7, #4
 8008c5e:	4619      	mov	r1, r3
 8008c60:	480a      	ldr	r0, [pc, #40]	; (8008c8c <SendFreeBuf+0x38>)
 8008c62:	f000 fdaa 	bl	80097ba <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008c66:	4b0a      	ldr	r3, [pc, #40]	; (8008c90 <SendFreeBuf+0x3c>)
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	4611      	mov	r1, r2
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 fd5f 	bl	8009734 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008c76:	4805      	ldr	r0, [pc, #20]	; (8008c8c <SendFreeBuf+0x38>)
 8008c78:	f000 fd18 	bl	80096ac <LST_is_empty>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d0ec      	beq.n	8008c5c <SendFreeBuf+0x8>
  }

  return;
 8008c82:	bf00      	nop
}
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	20000284 	.word	0x20000284
 8008c90:	20030000 	.word	0x20030000

08008c94 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008c98:	4805      	ldr	r0, [pc, #20]	; (8008cb0 <TL_TRACES_Init+0x1c>)
 8008c9a:	f000 fcf7 	bl	800968c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008c9e:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <TL_TRACES_Init+0x20>)
 8008ca0:	695b      	ldr	r3, [r3, #20]
 8008ca2:	4a03      	ldr	r2, [pc, #12]	; (8008cb0 <TL_TRACES_Init+0x1c>)
 8008ca4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008ca6:	f006 fbdb 	bl	800f460 <HW_IPCC_TRACES_Init>

  return;
 8008caa:	bf00      	nop
}
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	200300bc 	.word	0x200300bc
 8008cb4:	20030000 	.word	0x20030000

08008cb8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008cbe:	e008      	b.n	8008cd2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008cc0:	1d3b      	adds	r3, r7, #4
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	4808      	ldr	r0, [pc, #32]	; (8008ce8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008cc6:	f000 fd78 	bl	80097ba <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7f7 fdef 	bl	80008b0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008cd2:	4805      	ldr	r0, [pc, #20]	; (8008ce8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008cd4:	f000 fcea 	bl	80096ac <LST_is_empty>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d0f0      	beq.n	8008cc0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008cde:	bf00      	nop
}
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	200300bc 	.word	0x200300bc

08008cec <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	6039      	str	r1, [r7, #0]
 8008cf6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008cf8:	79fb      	ldrb	r3, [r7, #7]
 8008cfa:	2b06      	cmp	r3, #6
 8008cfc:	d849      	bhi.n	8008d92 <OutputDbgTrace+0xa6>
 8008cfe:	a201      	add	r2, pc, #4	; (adr r2, 8008d04 <OutputDbgTrace+0x18>)
 8008d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d04:	08008d21 	.word	0x08008d21
 8008d08:	08008d43 	.word	0x08008d43
 8008d0c:	08008d49 	.word	0x08008d49
 8008d10:	08008d63 	.word	0x08008d63
 8008d14:	08008d6f 	.word	0x08008d6f
 8008d18:	08008d75 	.word	0x08008d75
 8008d1c:	08008d87 	.word	0x08008d87
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	7a5b      	ldrb	r3, [r3, #9]
 8008d28:	2b0f      	cmp	r3, #15
 8008d2a:	d004      	beq.n	8008d36 <OutputDbgTrace+0x4a>
 8008d2c:	2bff      	cmp	r3, #255	; 0xff
 8008d2e:	d004      	beq.n	8008d3a <OutputDbgTrace+0x4e>
 8008d30:	2b0e      	cmp	r3, #14
 8008d32:	d004      	beq.n	8008d3e <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008d34:	e004      	b.n	8008d40 <OutputDbgTrace+0x54>
          break;
 8008d36:	bf00      	nop
 8008d38:	e02c      	b.n	8008d94 <OutputDbgTrace+0xa8>
          break;
 8008d3a:	bf00      	nop
 8008d3c:	e02a      	b.n	8008d94 <OutputDbgTrace+0xa8>
          break;
 8008d3e:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008d40:	e028      	b.n	8008d94 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008d46:	e025      	b.n	8008d94 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	7a5b      	ldrb	r3, [r3, #9]
 8008d50:	2b0e      	cmp	r3, #14
 8008d52:	d002      	beq.n	8008d5a <OutputDbgTrace+0x6e>
 8008d54:	2b0f      	cmp	r3, #15
 8008d56:	d002      	beq.n	8008d5e <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008d58:	e002      	b.n	8008d60 <OutputDbgTrace+0x74>
          break;
 8008d5a:	bf00      	nop
 8008d5c:	e01a      	b.n	8008d94 <OutputDbgTrace+0xa8>
          break;
 8008d5e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008d60:	e018      	b.n	8008d94 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	7a5b      	ldrb	r3, [r3, #9]
 8008d6a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008d6c:	e012      	b.n	8008d94 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008d72:	e00f      	b.n	8008d94 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	7a5b      	ldrb	r3, [r3, #9]
 8008d7c:	2b0e      	cmp	r3, #14
 8008d7e:	d000      	beq.n	8008d82 <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008d80:	e000      	b.n	8008d84 <OutputDbgTrace+0x98>
          break;
 8008d82:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008d84:	e006      	b.n	8008d94 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	7a5b      	ldrb	r3, [r3, #9]
 8008d8e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008d90:	e000      	b.n	8008d94 <OutputDbgTrace+0xa8>

    default:
      break;
 8008d92:	bf00      	nop
  }

  return;
 8008d94:	bf00      	nop
}
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 8008da6:	f005 fec7 	bl	800eb38 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008daa:	f005 fe63 	bl	800ea74 <THREAD_Get_OTCmdPayloadBuffer>
 8008dae:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f062 026b 	orn	r2, r2, #107	; 0x6b
 8008db8:	701a      	strb	r2, [r3, #0]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	705a      	strb	r2, [r3, #1]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	709a      	strb	r2, [r3, #2]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	711a      	strb	r2, [r3, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	715a      	strb	r2, [r3, #5]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	719a      	strb	r2, [r3, #6]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8008dd8:	f005 fe70 	bl	800eabc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008ddc:	f005 fe56 	bl	800ea8c <THREAD_Get_OTCmdRspPayloadBuffer>
 8008de0:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	689b      	ldr	r3, [r3, #8]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b084      	sub	sp, #16
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8008df6:	f005 fe9f 	bl	800eb38 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008dfa:	f005 fe3b 	bl	800ea74 <THREAD_Get_OTCmdPayloadBuffer>
 8008dfe:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f062 0269 	orn	r2, r2, #105	; 0x69
 8008e08:	701a      	strb	r2, [r3, #0]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	705a      	strb	r2, [r3, #1]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	709a      	strb	r2, [r3, #2]
 8008e12:	2200      	movs	r2, #0
 8008e14:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	711a      	strb	r2, [r3, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	715a      	strb	r2, [r3, #5]
 8008e20:	2200      	movs	r2, #0
 8008e22:	719a      	strb	r2, [r3, #6]
 8008e24:	2200      	movs	r2, #0
 8008e26:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8008e28:	f005 fe48 	bl	800eabc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008e2c:	f005 fe2e 	bl	800ea8c <THREAD_Get_OTCmdRspPayloadBuffer>
 8008e30:	60f8      	str	r0, [r7, #12]
}
 8008e32:	bf00      	nop
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
	...

08008e3c <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b086      	sub	sp, #24
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8008e48:	f005 fe76 	bl	800eb38 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 8008e4c:	4a15      	ldr	r2, [pc, #84]	; (8008ea4 <otSetStateChangedCallback+0x68>)
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008e52:	f005 fe0f 	bl	800ea74 <THREAD_Get_OTCmdPayloadBuffer>
 8008e56:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f062 0268 	orn	r2, r2, #104	; 0x68
 8008e60:	701a      	strb	r2, [r3, #0]
 8008e62:	2200      	movs	r2, #0
 8008e64:	705a      	strb	r2, [r3, #1]
 8008e66:	2200      	movs	r2, #0
 8008e68:	709a      	strb	r2, [r3, #2]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f042 0201 	orr.w	r2, r2, #1
 8008e76:	711a      	strb	r2, [r3, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	715a      	strb	r2, [r3, #5]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	719a      	strb	r2, [r3, #6]
 8008e80:	2200      	movs	r2, #0
 8008e82:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8008e8a:	f005 fe17 	bl	800eabc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008e8e:	f005 fdfd 	bl	800ea8c <THREAD_Get_OTCmdRspPayloadBuffer>
 8008e92:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	b2db      	uxtb	r3, r3
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3718      	adds	r7, #24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	200002a0 	.word	0x200002a0

08008ea8 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8008eb0:	f005 fe42 	bl	800eb38 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008eb4:	f005 fdde 	bl	800ea74 <THREAD_Get_OTCmdPayloadBuffer>
 8008eb8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f062 0264 	orn	r2, r2, #100	; 0x64
 8008ec2:	701a      	strb	r2, [r3, #0]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	705a      	strb	r2, [r3, #1]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	709a      	strb	r2, [r3, #2]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	711a      	strb	r2, [r3, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	715a      	strb	r2, [r3, #5]
 8008eda:	2200      	movs	r2, #0
 8008edc:	719a      	strb	r2, [r3, #6]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8008ee2:	f005 fdeb 	bl	800eabc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008ee6:	f005 fdd1 	bl	800ea8c <THREAD_Get_OTCmdRspPayloadBuffer>
 8008eea:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	b2db      	uxtb	r3, r3
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b084      	sub	sp, #16
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	460b      	mov	r3, r1
 8008f04:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8008f06:	f005 fe17 	bl	800eb38 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008f0a:	f005 fdb3 	bl	800ea74 <THREAD_Get_OTCmdPayloadBuffer>
 8008f0e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8008f18:	701a      	strb	r2, [r3, #0]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	705a      	strb	r2, [r3, #1]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	709a      	strb	r2, [r3, #2]
 8008f22:	2200      	movs	r2, #0
 8008f24:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f042 0201 	orr.w	r2, r2, #1
 8008f2e:	711a      	strb	r2, [r3, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	715a      	strb	r2, [r3, #5]
 8008f34:	2200      	movs	r2, #0
 8008f36:	719a      	strb	r2, [r3, #6]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8008f3c:	78fa      	ldrb	r2, [r7, #3]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008f42:	f005 fdbb 	bl	800eabc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008f46:	f005 fda1 	bl	800ea8c <THREAD_Get_OTCmdRspPayloadBuffer>
 8008f4a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	b2db      	uxtb	r3, r3
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b084      	sub	sp, #16
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
 8008f62:	460b      	mov	r3, r1
 8008f64:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8008f66:	f005 fde7 	bl	800eb38 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008f6a:	f005 fd83 	bl	800ea74 <THREAD_Get_OTCmdPayloadBuffer>
 8008f6e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f042 0208 	orr.w	r2, r2, #8
 8008f78:	701a      	strb	r2, [r3, #0]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	705a      	strb	r2, [r3, #1]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	709a      	strb	r2, [r3, #2]
 8008f82:	2200      	movs	r2, #0
 8008f84:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f042 0201 	orr.w	r2, r2, #1
 8008f8e:	711a      	strb	r2, [r3, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	715a      	strb	r2, [r3, #5]
 8008f94:	2200      	movs	r2, #0
 8008f96:	719a      	strb	r2, [r3, #6]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 8008f9c:	78fa      	ldrb	r2, [r7, #3]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008fa2:	f005 fd8b 	bl	800eabc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008fa6:	f005 fd71 	bl	800ea8c <THREAD_Get_OTCmdRspPayloadBuffer>
 8008faa:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	b2db      	uxtb	r3, r3
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 8008fc6:	f005 fdb7 	bl	800eb38 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008fca:	f005 fd53 	bl	800ea74 <THREAD_Get_OTCmdPayloadBuffer>
 8008fce:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f042 020f 	orr.w	r2, r2, #15
 8008fd8:	701a      	strb	r2, [r3, #0]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	705a      	strb	r2, [r3, #1]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	709a      	strb	r2, [r3, #2]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f042 0201 	orr.w	r2, r2, #1
 8008fee:	711a      	strb	r2, [r3, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	715a      	strb	r2, [r3, #5]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	719a      	strb	r2, [r3, #6]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 8008ffc:	887a      	ldrh	r2, [r7, #2]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009002:	f005 fd5b 	bl	800eabc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009006:	f005 fd41 	bl	800ea8c <THREAD_Get_OTCmdRspPayloadBuffer>
 800900a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	b2db      	uxtb	r3, r3
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
	...

0800901c <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800901c:	b5b0      	push	{r4, r5, r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	71fb      	strb	r3, [r7, #7]


    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 8009026:	f005 fd3d 	bl	800eaa4 <THREAD_Get_NotificationPayloadBuffer>
 800902a:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3b01      	subs	r3, #1
 8009032:	2b17      	cmp	r3, #23
 8009034:	f200 81c3 	bhi.w	80093be <OpenThread_CallBack_Processing+0x3a2>
 8009038:	a201      	add	r2, pc, #4	; (adr r2, 8009040 <OpenThread_CallBack_Processing+0x24>)
 800903a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903e:	bf00      	nop
 8009040:	080090a1 	.word	0x080090a1
 8009044:	080090bd 	.word	0x080090bd
 8009048:	08009121 	.word	0x08009121
 800904c:	08009169 	.word	0x08009169
 8009050:	08009175 	.word	0x08009175
 8009054:	08009193 	.word	0x08009193
 8009058:	080091b1 	.word	0x080091b1
 800905c:	080091cf 	.word	0x080091cf
 8009060:	080091ed 	.word	0x080091ed
 8009064:	0800920b 	.word	0x0800920b
 8009068:	0800922d 	.word	0x0800922d
 800906c:	0800924b 	.word	0x0800924b
 8009070:	080093bf 	.word	0x080093bf
 8009074:	08009271 	.word	0x08009271
 8009078:	080092a5 	.word	0x080092a5
 800907c:	080092cd 	.word	0x080092cd
 8009080:	080092eb 	.word	0x080092eb
 8009084:	08009359 	.word	0x08009359
 8009088:	08009381 	.word	0x08009381
 800908c:	080093bf 	.word	0x080093bf
 8009090:	0800939f 	.word	0x0800939f
 8009094:	080093bf 	.word	0x080093bf
 8009098:	080093bf 	.word	0x080093bf
 800909c:	080090f9 	.word	0x080090f9
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 80090a0:	4b9b      	ldr	r3, [pc, #620]	; (8009310 <OpenThread_CallBack_Processing+0x2f4>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f000 818d 	beq.w	80093c4 <OpenThread_CallBack_Processing+0x3a8>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 80090aa:	4b99      	ldr	r3, [pc, #612]	; (8009310 <OpenThread_CallBack_Processing+0x2f4>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 80090b2:	683a      	ldr	r2, [r7, #0]
 80090b4:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 80090b6:	4611      	mov	r1, r2
 80090b8:	4798      	blx	r3
        }
        break;
 80090ba:	e183      	b.n	80093c4 <OpenThread_CallBack_Processing+0x3a8>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        mySTCoapContext = (STCoapSpecificRequestContextType * ) p_notification->Data[0];
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	461a      	mov	r2, r3
 80090c2:	4b94      	ldr	r3, [pc, #592]	; (8009314 <OpenThread_CallBack_Processing+0x2f8>)
 80090c4:	601a      	str	r2, [r3, #0]
        coapRequestHandlerCb = mySTCoapContext->mHandler;
 80090c6:	4b93      	ldr	r3, [pc, #588]	; (8009314 <OpenThread_CallBack_Processing+0x2f8>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	4a92      	ldr	r2, [pc, #584]	; (8009318 <OpenThread_CallBack_Processing+0x2fc>)
 80090ce:	6013      	str	r3, [r2, #0]
        if (coapRequestHandlerCb != NULL)
 80090d0:	4b91      	ldr	r3, [pc, #580]	; (8009318 <OpenThread_CallBack_Processing+0x2fc>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f000 8177 	beq.w	80093c8 <OpenThread_CallBack_Processing+0x3ac>
        {
            coapRequestHandlerCb(mySTCoapContext->mContext,
 80090da:	4b8f      	ldr	r3, [pc, #572]	; (8009318 <OpenThread_CallBack_Processing+0x2fc>)
 80090dc:	681c      	ldr	r4, [r3, #0]
 80090de:	4b8d      	ldr	r3, [pc, #564]	; (8009314 <OpenThread_CallBack_Processing+0x2f8>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	6818      	ldr	r0, [r3, #0]
                                (otCoapHeader *) p_notification->Data[1],
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 80090e8:	4619      	mov	r1, r3
                                (otMessage *) p_notification->Data[2],
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	691b      	ldr	r3, [r3, #16]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 80090ee:	461a      	mov	r2, r3
                                (otMessageInfo *) p_notification->Data[3]);
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	695b      	ldr	r3, [r3, #20]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 80090f4:	47a0      	blx	r4
        }
        break;
 80090f6:	e167      	b.n	80093c8 <OpenThread_CallBack_Processing+0x3ac>
    case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
        if (defaultCoapRequestHandlerCb != NULL)
 80090f8:	4b88      	ldr	r3, [pc, #544]	; (800931c <OpenThread_CallBack_Processing+0x300>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 8165 	beq.w	80093cc <OpenThread_CallBack_Processing+0x3b0>
        {
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8009102:	4b86      	ldr	r3, [pc, #536]	; (800931c <OpenThread_CallBack_Processing+0x300>)
 8009104:	681c      	ldr	r4, [r3, #0]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	4618      	mov	r0, r3
                    (otCoapHeader *) p_notification->Data[1],
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	68db      	ldr	r3, [r3, #12]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8009110:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	691b      	ldr	r3, [r3, #16]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8009116:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3]);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	695b      	ldr	r3, [r3, #20]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800911c:	47a0      	blx	r4
        }
        break;
 800911e:	e155      	b.n	80093cc <OpenThread_CallBack_Processing+0x3b0>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER: 
        mySTCoapResponseContext = (STCoapSpecificResponseContextType * ) p_notification->Data[0];
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	461a      	mov	r2, r3
 8009126:	4b7e      	ldr	r3, [pc, #504]	; (8009320 <OpenThread_CallBack_Processing+0x304>)
 8009128:	601a      	str	r2, [r3, #0]
        coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800912a:	4b7d      	ldr	r3, [pc, #500]	; (8009320 <OpenThread_CallBack_Processing+0x304>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	4a7c      	ldr	r2, [pc, #496]	; (8009324 <OpenThread_CallBack_Processing+0x308>)
 8009132:	6013      	str	r3, [r2, #0]
        if (coapResponseHandlerCb != NULL)
 8009134:	4b7b      	ldr	r3, [pc, #492]	; (8009324 <OpenThread_CallBack_Processing+0x308>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 8149 	beq.w	80093d0 <OpenThread_CallBack_Processing+0x3b4>
        {
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800913e:	4b79      	ldr	r3, [pc, #484]	; (8009324 <OpenThread_CallBack_Processing+0x308>)
 8009140:	681c      	ldr	r4, [r3, #0]
 8009142:	4b77      	ldr	r3, [pc, #476]	; (8009320 <OpenThread_CallBack_Processing+0x304>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6818      	ldr	r0, [r3, #0]
                    (otCoapHeader *) p_notification->Data[1],
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	68db      	ldr	r3, [r3, #12]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800914c:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8009152:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3],
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8009158:	461d      	mov	r5, r3
                    (otError) p_notification->Data[4]);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800915e:	b2db      	uxtb	r3, r3
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	462b      	mov	r3, r5
 8009164:	47a0      	blx	r4
        }
        break;
 8009166:	e133      	b.n	80093d0 <OpenThread_CallBack_Processing+0x3b4>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 8009168:	2001      	movs	r0, #1
 800916a:	f7fe ffcd 	bl	8008108 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 800916e:	f7f9 fbfa 	bl	8002966 <HAL_NVIC_SystemReset>
        break;
 8009172:	e14c      	b.n	800940e <OpenThread_CallBack_Processing+0x3f2>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 8009174:	4b6c      	ldr	r3, [pc, #432]	; (8009328 <OpenThread_CallBack_Processing+0x30c>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 812b 	beq.w	80093d4 <OpenThread_CallBack_Processing+0x3b8>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800917e:	4b6a      	ldr	r3, [pc, #424]	; (8009328 <OpenThread_CallBack_Processing+0x30c>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	6892      	ldr	r2, [r2, #8]
 8009186:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8009188:	683a      	ldr	r2, [r7, #0]
 800918a:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800918c:	4611      	mov	r1, r2
 800918e:	4798      	blx	r3
        }
        break;
 8009190:	e120      	b.n	80093d4 <OpenThread_CallBack_Processing+0x3b8>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 8009192:	4b66      	ldr	r3, [pc, #408]	; (800932c <OpenThread_CallBack_Processing+0x310>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 811e 	beq.w	80093d8 <OpenThread_CallBack_Processing+0x3bc>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800919c:	4b63      	ldr	r3, [pc, #396]	; (800932c <OpenThread_CallBack_Processing+0x310>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	6892      	ldr	r2, [r2, #8]
 80091a4:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 80091a6:	683a      	ldr	r2, [r7, #0]
 80091a8:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 80091aa:	2000      	movs	r0, #0
 80091ac:	4798      	blx	r3
        }
        break;
 80091ae:	e113      	b.n	80093d8 <OpenThread_CallBack_Processing+0x3bc>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 80091b0:	4b5f      	ldr	r3, [pc, #380]	; (8009330 <OpenThread_CallBack_Processing+0x314>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 8111 	beq.w	80093dc <OpenThread_CallBack_Processing+0x3c0>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 80091ba:	4b5d      	ldr	r3, [pc, #372]	; (8009330 <OpenThread_CallBack_Processing+0x314>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	683a      	ldr	r2, [r7, #0]
 80091c0:	6892      	ldr	r2, [r2, #8]
 80091c2:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 80091c8:	4611      	mov	r1, r2
 80091ca:	4798      	blx	r3
        }
        break;
 80091cc:	e106      	b.n	80093dc <OpenThread_CallBack_Processing+0x3c0>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 80091ce:	4b59      	ldr	r3, [pc, #356]	; (8009334 <OpenThread_CallBack_Processing+0x318>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 8104 	beq.w	80093e0 <OpenThread_CallBack_Processing+0x3c4>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 80091d8:	4b56      	ldr	r3, [pc, #344]	; (8009334 <OpenThread_CallBack_Processing+0x318>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	6892      	ldr	r2, [r2, #8]
 80091e0:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 80091e6:	4611      	mov	r1, r2
 80091e8:	4798      	blx	r3
        }
        break;
 80091ea:	e0f9      	b.n	80093e0 <OpenThread_CallBack_Processing+0x3c4>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 80091ec:	4b52      	ldr	r3, [pc, #328]	; (8009338 <OpenThread_CallBack_Processing+0x31c>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 80f7 	beq.w	80093e4 <OpenThread_CallBack_Processing+0x3c8>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 80091f6:	4b50      	ldr	r3, [pc, #320]	; (8009338 <OpenThread_CallBack_Processing+0x31c>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	6892      	ldr	r2, [r2, #8]
 80091fe:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8009200:	683a      	ldr	r2, [r7, #0]
 8009202:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8009204:	4611      	mov	r1, r2
 8009206:	4798      	blx	r3
        }
        break;
 8009208:	e0ec      	b.n	80093e4 <OpenThread_CallBack_Processing+0x3c8>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 800920a:	4b4c      	ldr	r3, [pc, #304]	; (800933c <OpenThread_CallBack_Processing+0x320>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	f000 80ea 	beq.w	80093e8 <OpenThread_CallBack_Processing+0x3cc>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8009214:	4b49      	ldr	r3, [pc, #292]	; (800933c <OpenThread_CallBack_Processing+0x320>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	683a      	ldr	r2, [r7, #0]
 800921a:	6892      	ldr	r2, [r2, #8]
 800921c:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8009222:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 8009224:	683a      	ldr	r2, [r7, #0]
 8009226:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8009228:	4798      	blx	r3
        }
        break;
 800922a:	e0dd      	b.n	80093e8 <OpenThread_CallBack_Processing+0x3cc>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 800922c:	4b44      	ldr	r3, [pc, #272]	; (8009340 <OpenThread_CallBack_Processing+0x324>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 80db 	beq.w	80093ec <OpenThread_CallBack_Processing+0x3d0>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 8009236:	4b42      	ldr	r3, [pc, #264]	; (8009340 <OpenThread_CallBack_Processing+0x324>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	6892      	ldr	r2, [r2, #8]
 800923e:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 8009244:	4611      	mov	r1, r2
 8009246:	4798      	blx	r3
        }
        break;
 8009248:	e0d0      	b.n	80093ec <OpenThread_CallBack_Processing+0x3d0>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 800924a:	4b3e      	ldr	r3, [pc, #248]	; (8009344 <OpenThread_CallBack_Processing+0x328>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	f000 80ce 	beq.w	80093f0 <OpenThread_CallBack_Processing+0x3d4>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8009254:	4b3b      	ldr	r3, [pc, #236]	; (8009344 <OpenThread_CallBack_Processing+0x328>)
 8009256:	681c      	ldr	r4, [r3, #0]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8009260:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8009266:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800926c:	47a0      	blx	r4
        }
        break;
 800926e:	e0bf      	b.n	80093f0 <OpenThread_CallBack_Processing+0x3d4>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 8009270:	4b35      	ldr	r3, [pc, #212]	; (8009348 <OpenThread_CallBack_Processing+0x32c>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	f000 80bd 	beq.w	80093f4 <OpenThread_CallBack_Processing+0x3d8>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800927a:	4b33      	ldr	r3, [pc, #204]	; (8009348 <OpenThread_CallBack_Processing+0x32c>)
 800927c:	681c      	ldr	r4, [r3, #0]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8009288:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800928e:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8009298:	b2db      	uxtb	r3, r3
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	4613      	mov	r3, r2
 800929e:	462a      	mov	r2, r5
 80092a0:	47a0      	blx	r4
        }
        break;
 80092a2:	e0a7      	b.n	80093f4 <OpenThread_CallBack_Processing+0x3d8>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 80092a4:	4b29      	ldr	r3, [pc, #164]	; (800934c <OpenThread_CallBack_Processing+0x330>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f000 80a5 	beq.w	80093f8 <OpenThread_CallBack_Processing+0x3dc>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80092ae:	4b27      	ldr	r3, [pc, #156]	; (800934c <OpenThread_CallBack_Processing+0x330>)
 80092b0:	681c      	ldr	r4, [r3, #0]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80092bc:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80092c2:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80092c8:	47a0      	blx	r4
        }
        break;
 80092ca:	e095      	b.n	80093f8 <OpenThread_CallBack_Processing+0x3dc>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 80092cc:	4b20      	ldr	r3, [pc, #128]	; (8009350 <OpenThread_CallBack_Processing+0x334>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f000 8093 	beq.w	80093fc <OpenThread_CallBack_Processing+0x3e0>
        {
            otJoinerCb((otError) p_notification->Data[0],
 80092d6:	4b1e      	ldr	r3, [pc, #120]	; (8009350 <OpenThread_CallBack_Processing+0x334>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	6892      	ldr	r2, [r2, #8]
 80092de:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 80092e4:	4611      	mov	r1, r2
 80092e6:	4798      	blx	r3
        }
        break;
 80092e8:	e088      	b.n	80093fc <OpenThread_CallBack_Processing+0x3e0>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 80092ea:	4b1a      	ldr	r3, [pc, #104]	; (8009354 <OpenThread_CallBack_Processing+0x338>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f000 8086 	beq.w	8009400 <OpenThread_CallBack_Processing+0x3e4>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 80092f4:	4b17      	ldr	r3, [pc, #92]	; (8009354 <OpenThread_CallBack_Processing+0x338>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	6892      	ldr	r2, [r2, #8]
 80092fc:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8009302:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 8009304:	683a      	ldr	r2, [r7, #0]
 8009306:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8009308:	b2d2      	uxtb	r2, r2
 800930a:	4798      	blx	r3
        }
        break;
 800930c:	e078      	b.n	8009400 <OpenThread_CallBack_Processing+0x3e4>
 800930e:	bf00      	nop
 8009310:	200002a0 	.word	0x200002a0
 8009314:	20005dcc 	.word	0x20005dcc
 8009318:	200002e0 	.word	0x200002e0
 800931c:	200002e4 	.word	0x200002e4
 8009320:	20005dc8 	.word	0x20005dc8
 8009324:	200002e8 	.word	0x200002e8
 8009328:	200002a8 	.word	0x200002a8
 800932c:	200002a4 	.word	0x200002a4
 8009330:	200002ac 	.word	0x200002ac
 8009334:	200002b0 	.word	0x200002b0
 8009338:	200002b4 	.word	0x200002b4
 800933c:	200002b8 	.word	0x200002b8
 8009340:	200002bc 	.word	0x200002bc
 8009344:	200002c0 	.word	0x200002c0
 8009348:	200002c4 	.word	0x200002c4
 800934c:	200002c8 	.word	0x200002c8
 8009350:	200002cc 	.word	0x200002cc
 8009354:	200002d0 	.word	0x200002d0
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 8009358:	4b30      	ldr	r3, [pc, #192]	; (800941c <OpenThread_CallBack_Processing+0x400>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d051      	beq.n	8009404 <OpenThread_CallBack_Processing+0x3e8>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8009360:	4b2e      	ldr	r3, [pc, #184]	; (800941c <OpenThread_CallBack_Processing+0x400>)
 8009362:	681c      	ldr	r4, [r3, #0]
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800936e:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8009374:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800937a:	b2db      	uxtb	r3, r3
 800937c:	47a0      	blx	r4
        }
        break;
 800937e:	e041      	b.n	8009404 <OpenThread_CallBack_Processing+0x3e8>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 8009380:	4b27      	ldr	r3, [pc, #156]	; (8009420 <OpenThread_CallBack_Processing+0x404>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d03f      	beq.n	8009408 <OpenThread_CallBack_Processing+0x3ec>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8009388:	4b25      	ldr	r3, [pc, #148]	; (8009420 <OpenThread_CallBack_Processing+0x404>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	6892      	ldr	r2, [r2, #8]
 8009390:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8009396:	b252      	sxtb	r2, r2
 8009398:	4611      	mov	r1, r2
 800939a:	4798      	blx	r3
        }
        break;
 800939c:	e034      	b.n	8009408 <OpenThread_CallBack_Processing+0x3ec>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 800939e:	4b21      	ldr	r3, [pc, #132]	; (8009424 <OpenThread_CallBack_Processing+0x408>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d032      	beq.n	800940c <OpenThread_CallBack_Processing+0x3f0>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 80093a6:	4b1f      	ldr	r3, [pc, #124]	; (8009424 <OpenThread_CallBack_Processing+0x408>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	6892      	ldr	r2, [r2, #8]
 80093ae:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 80093b4:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 80093ba:	4798      	blx	r3
        }
        break;
 80093bc:	e026      	b.n	800940c <OpenThread_CallBack_Processing+0x3f0>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	71fb      	strb	r3, [r7, #7]
        break;
 80093c2:	e024      	b.n	800940e <OpenThread_CallBack_Processing+0x3f2>
        break;
 80093c4:	bf00      	nop
 80093c6:	e022      	b.n	800940e <OpenThread_CallBack_Processing+0x3f2>
        break;
 80093c8:	bf00      	nop
 80093ca:	e020      	b.n	800940e <OpenThread_CallBack_Processing+0x3f2>
        break;
 80093cc:	bf00      	nop
 80093ce:	e01e      	b.n	800940e <OpenThread_CallBack_Processing+0x3f2>
        break;
 80093d0:	bf00      	nop
 80093d2:	e01c      	b.n	800940e <OpenThread_CallBack_Processing+0x3f2>
        break;
 80093d4:	bf00      	nop
 80093d6:	e01a      	b.n	800940e <OpenThread_CallBack_Processing+0x3f2>
        break;
 80093d8:	bf00      	nop
 80093da:	e018      	b.n	800940e <OpenThread_CallBack_Processing+0x3f2>
        break;
 80093dc:	bf00      	nop
 80093de:	e016      	b.n	800940e <OpenThread_CallBack_Processing+0x3f2>
        break;
 80093e0:	bf00      	nop
 80093e2:	e014      	b.n	800940e <OpenThread_CallBack_Processing+0x3f2>
        break;
 80093e4:	bf00      	nop
 80093e6:	e012      	b.n	800940e <OpenThread_CallBack_Processing+0x3f2>
        break;
 80093e8:	bf00      	nop
 80093ea:	e010      	b.n	800940e <OpenThread_CallBack_Processing+0x3f2>
        break;
 80093ec:	bf00      	nop
 80093ee:	e00e      	b.n	800940e <OpenThread_CallBack_Processing+0x3f2>
        break;
 80093f0:	bf00      	nop
 80093f2:	e00c      	b.n	800940e <OpenThread_CallBack_Processing+0x3f2>
        break;
 80093f4:	bf00      	nop
 80093f6:	e00a      	b.n	800940e <OpenThread_CallBack_Processing+0x3f2>
        break;
 80093f8:	bf00      	nop
 80093fa:	e008      	b.n	800940e <OpenThread_CallBack_Processing+0x3f2>
        break;
 80093fc:	bf00      	nop
 80093fe:	e006      	b.n	800940e <OpenThread_CallBack_Processing+0x3f2>
        break;
 8009400:	bf00      	nop
 8009402:	e004      	b.n	800940e <OpenThread_CallBack_Processing+0x3f2>
        break;
 8009404:	bf00      	nop
 8009406:	e002      	b.n	800940e <OpenThread_CallBack_Processing+0x3f2>
        break;
 8009408:	bf00      	nop
 800940a:	e000      	b.n	800940e <OpenThread_CallBack_Processing+0x3f2>
        break;
 800940c:	bf00      	nop
    }

    TL_THREAD_SendAck();
 800940e:	f7ff fb8d 	bl	8008b2c <TL_THREAD_SendAck>
    return status;
 8009412:	79fb      	ldrb	r3, [r7, #7]

}
 8009414:	4618      	mov	r0, r3
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bdb0      	pop	{r4, r5, r7, pc}
 800941c:	200002d4 	.word	0x200002d4
 8009420:	200002d8 	.word	0x200002d8
 8009424:	200002dc 	.word	0x200002dc

08009428 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	460b      	mov	r3, r1
 8009432:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8009434:	f005 fb80 	bl	800eb38 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009438:	f005 fb1c 	bl	800ea74 <THREAD_Get_OTCmdPayloadBuffer>
 800943c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2200      	movs	r2, #0
 8009442:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 8009446:	701a      	strb	r2, [r3, #0]
 8009448:	2200      	movs	r2, #0
 800944a:	705a      	strb	r2, [r3, #1]
 800944c:	2200      	movs	r2, #0
 800944e:	709a      	strb	r2, [r3, #2]
 8009450:	2200      	movs	r2, #0
 8009452:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2200      	movs	r2, #0
 8009458:	f042 0201 	orr.w	r2, r2, #1
 800945c:	711a      	strb	r2, [r3, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	715a      	strb	r2, [r3, #5]
 8009462:	2200      	movs	r2, #0
 8009464:	719a      	strb	r2, [r3, #6]
 8009466:	2200      	movs	r2, #0
 8009468:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800946a:	78fa      	ldrb	r2, [r7, #3]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009470:	f005 fb24 	bl	800eabc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009474:	f005 fb0a 	bl	800ea8c <THREAD_Get_OTCmdRspPayloadBuffer>
 8009478:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	b2db      	uxtb	r3, r3
}
 8009480:	4618      	mov	r0, r3
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8009490:	f005 fb52 	bl	800eb38 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009494:	f005 faee 	bl	800ea74 <THREAD_Get_OTCmdPayloadBuffer>
 8009498:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 80094a2:	701a      	strb	r2, [r3, #0]
 80094a4:	2200      	movs	r2, #0
 80094a6:	705a      	strb	r2, [r3, #1]
 80094a8:	2200      	movs	r2, #0
 80094aa:	709a      	strb	r2, [r3, #2]
 80094ac:	2200      	movs	r2, #0
 80094ae:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	711a      	strb	r2, [r3, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	715a      	strb	r2, [r3, #5]
 80094ba:	2200      	movs	r2, #0
 80094bc:	719a      	strb	r2, [r3, #6]
 80094be:	2200      	movs	r2, #0
 80094c0:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80094c2:	f005 fafb 	bl	800eabc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80094c6:	f005 fae1 	bl	800ea8c <THREAD_Get_OTCmdRspPayloadBuffer>
 80094ca:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	b2db      	uxtb	r3, r3
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
	...

080094dc <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094e2:	f3ef 8310 	mrs	r3, PRIMASK
 80094e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80094e8:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 80094ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80094ec:	b672      	cpsid	i

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 80094ee:	1cbb      	adds	r3, r7, #2
 80094f0:	4619      	mov	r1, r3
 80094f2:	4812      	ldr	r0, [pc, #72]	; (800953c <DbgTrace_TxCpltCallback+0x60>)
 80094f4:	f000 fbd7 	bl	8009ca6 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 80094f8:	1cbb      	adds	r3, r7, #2
 80094fa:	4619      	mov	r1, r3
 80094fc:	480f      	ldr	r0, [pc, #60]	; (800953c <DbgTrace_TxCpltCallback+0x60>)
 80094fe:	f000 fcc6 	bl	8009e8e <CircularQueue_Sense>
 8009502:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00b      	beq.n	8009522 <DbgTrace_TxCpltCallback+0x46>
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8009514:	887b      	ldrh	r3, [r7, #2]
 8009516:	4a0a      	ldr	r2, [pc, #40]	; (8009540 <DbgTrace_TxCpltCallback+0x64>)
 8009518:	4619      	mov	r1, r3
 800951a:	6938      	ldr	r0, [r7, #16]
 800951c:	f7f7 f9e3 	bl	80008e6 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8009520:	e007      	b.n	8009532 <DbgTrace_TxCpltCallback+0x56>
    DbgTracePeripheralReady = SET;
 8009522:	4b08      	ldr	r3, [pc, #32]	; (8009544 <DbgTrace_TxCpltCallback+0x68>)
 8009524:	2201      	movs	r2, #1
 8009526:	701a      	strb	r2, [r3, #0]
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	607b      	str	r3, [r7, #4]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f383 8810 	msr	PRIMASK, r3
}
 8009532:	bf00      	nop
 8009534:	3718      	adds	r7, #24
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	200002ec 	.word	0x200002ec
 8009540:	080094dd 	.word	0x080094dd
 8009544:	2000000d 	.word	0x2000000d

08009548 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800954e:	f7f7 f9c4 	bl	80008da <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8009552:	2302      	movs	r3, #2
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	2300      	movs	r3, #0
 8009558:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800955c:	4903      	ldr	r1, [pc, #12]	; (800956c <DbgTraceInit+0x24>)
 800955e:	4804      	ldr	r0, [pc, #16]	; (8009570 <DbgTraceInit+0x28>)
 8009560:	f000 f948 	bl	80097f4 <CircularQueue_Init>
#endif 
#endif
  return;
 8009564:	bf00      	nop
}
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	2000030c 	.word	0x2000030c
 8009570:	200002ec 	.word	0x200002ec

08009574 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	68b9      	ldr	r1, [r7, #8]
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f000 f805 	bl	8009594 <DbgTraceWrite>
 800958a:	4603      	mov	r3, r0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b08a      	sub	sp, #40	; 0x28
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 80095a0:	2300      	movs	r3, #0
 80095a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095a4:	f3ef 8310 	mrs	r3, PRIMASK
 80095a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80095aa:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 80095ac:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b4:	d102      	bne.n	80095bc <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 80095b6:	2300      	movs	r3, #0
 80095b8:	627b      	str	r3, [r7, #36]	; 0x24
 80095ba:	e034      	b.n	8009626 <DbgTraceWrite+0x92>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d006      	beq.n	80095d0 <DbgTraceWrite+0x3c>
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d003      	beq.n	80095d0 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 80095c8:	f04f 33ff 	mov.w	r3, #4294967295
 80095cc:	627b      	str	r3, [r7, #36]	; 0x24
 80095ce:	e02a      	b.n	8009626 <DbgTraceWrite+0x92>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d027      	beq.n	8009626 <DbgTraceWrite+0x92>
  {
    chars_written = bufSize;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80095da:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	b29a      	uxth	r2, r3
 80095e0:	2301      	movs	r3, #1
 80095e2:	68b9      	ldr	r1, [r7, #8]
 80095e4:	4812      	ldr	r0, [pc, #72]	; (8009630 <DbgTraceWrite+0x9c>)
 80095e6:	f000 f937 	bl	8009858 <CircularQueue_Add>
 80095ea:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d014      	beq.n	800961c <DbgTraceWrite+0x88>
 80095f2:	4b10      	ldr	r3, [pc, #64]	; (8009634 <DbgTraceWrite+0xa0>)
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00f      	beq.n	800961c <DbgTraceWrite+0x88>
    {
      DbgTracePeripheralReady = RESET;
 80095fc:	4b0d      	ldr	r3, [pc, #52]	; (8009634 <DbgTraceWrite+0xa0>)
 80095fe:	2200      	movs	r2, #0
 8009600:	701a      	strb	r2, [r3, #0]
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f383 8810 	msr	PRIMASK, r3
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	b29b      	uxth	r3, r3
 8009610:	4a09      	ldr	r2, [pc, #36]	; (8009638 <DbgTraceWrite+0xa4>)
 8009612:	4619      	mov	r1, r3
 8009614:	69f8      	ldr	r0, [r7, #28]
 8009616:	f7f7 f966 	bl	80008e6 <DbgOutputTraces>
 800961a:	e004      	b.n	8009626 <DbgTraceWrite+0x92>
 800961c:	6a3b      	ldr	r3, [r7, #32]
 800961e:	613b      	str	r3, [r7, #16]
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	f383 8810 	msr	PRIMASK, r3
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8009626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009628:	4618      	mov	r0, r3
 800962a:	3728      	adds	r7, #40	; 0x28
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	200002ec 	.word	0x200002ec
 8009634:	2000000d 	.word	0x2000000d
 8009638:	080094dd 	.word	0x080094dd

0800963c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	4603      	mov	r3, r0
 8009644:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009646:	4b0f      	ldr	r3, [pc, #60]	; (8009684 <OTP_Read+0x48>)
 8009648:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800964a:	e002      	b.n	8009652 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	3b08      	subs	r3, #8
 8009650:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3307      	adds	r3, #7
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	79fa      	ldrb	r2, [r7, #7]
 800965a:	429a      	cmp	r2, r3
 800965c:	d003      	beq.n	8009666 <OTP_Read+0x2a>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	4a09      	ldr	r2, [pc, #36]	; (8009688 <OTP_Read+0x4c>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d1f2      	bne.n	800964c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	3307      	adds	r3, #7
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	79fa      	ldrb	r2, [r7, #7]
 800966e:	429a      	cmp	r2, r3
 8009670:	d001      	beq.n	8009676 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009672:	2300      	movs	r3, #0
 8009674:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009676:	68fb      	ldr	r3, [r7, #12]
}
 8009678:	4618      	mov	r0, r3
 800967a:	3714      	adds	r7, #20
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	1fff73f8 	.word	0x1fff73f8
 8009688:	1fff7000 	.word	0x1fff7000

0800968c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	605a      	str	r2, [r3, #4]
}
 80096a0:	bf00      	nop
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b087      	sub	sp, #28
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096b4:	f3ef 8310 	mrs	r3, PRIMASK
 80096b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80096ba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80096bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80096be:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d102      	bne.n	80096d0 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 80096ca:	2301      	movs	r3, #1
 80096cc:	75fb      	strb	r3, [r7, #23]
 80096ce:	e001      	b.n	80096d4 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 80096d0:	2300      	movs	r3, #0
 80096d2:	75fb      	strb	r3, [r7, #23]
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80096de:	7dfb      	ldrb	r3, [r7, #23]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	371c      	adds	r7, #28
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b087      	sub	sp, #28
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096f6:	f3ef 8310 	mrs	r3, PRIMASK
 80096fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80096fc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80096fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009700:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	683a      	ldr	r2, [r7, #0]
 8009714:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	683a      	ldr	r2, [r7, #0]
 800971c:	605a      	str	r2, [r3, #4]
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009728:	bf00      	nop
 800972a:	371c      	adds	r7, #28
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8009734:	b480      	push	{r7}
 8009736:	b087      	sub	sp, #28
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800973e:	f3ef 8310 	mrs	r3, PRIMASK
 8009742:	60fb      	str	r3, [r7, #12]
  return(result);
 8009744:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009746:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009748:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685a      	ldr	r2, [r3, #4]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	683a      	ldr	r2, [r7, #0]
 8009764:	601a      	str	r2, [r3, #0]
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009770:	bf00      	nop
 8009772:	371c      	adds	r7, #28
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800977c:	b480      	push	{r7}
 800977e:	b087      	sub	sp, #28
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009784:	f3ef 8310 	mrs	r3, PRIMASK
 8009788:	60fb      	str	r3, [r7, #12]
  return(result);
 800978a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800978c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800978e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	6812      	ldr	r2, [r2, #0]
 8009798:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	6852      	ldr	r2, [r2, #4]
 80097a2:	605a      	str	r2, [r3, #4]
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80097ae:	bf00      	nop
 80097b0:	371c      	adds	r7, #28
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b086      	sub	sp, #24
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097c4:	f3ef 8310 	mrs	r3, PRIMASK
 80097c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80097ca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80097cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80097ce:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4618      	mov	r0, r3
 80097de:	f7ff ffcd 	bl	800977c <LST_remove_node>
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80097ec:	bf00      	nop
 80097ee:	3718      	adds	r7, #24
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	607a      	str	r2, [r7, #4]
 8009800:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2200      	movs	r2, #0
 800981e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	887a      	ldrh	r2, [r7, #2]
 800982a:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	7e3a      	ldrb	r2, [r7, #24]
 8009830:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8009832:	7e3b      	ldrb	r3, [r7, #24]
 8009834:	f003 0302 	and.w	r3, r3, #2
 8009838:	2b00      	cmp	r3, #0
 800983a:	d006      	beq.n	800984a <CircularQueue_Init+0x56>
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	891b      	ldrh	r3, [r3, #8]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d002      	beq.n	800984a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8009844:	f04f 33ff 	mov.w	r3, #4294967295
 8009848:	e000      	b.n	800984c <CircularQueue_Init+0x58>
  }
  return 0;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	3714      	adds	r7, #20
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b08e      	sub	sp, #56	; 0x38
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	603b      	str	r3, [r7, #0]
 8009864:	4613      	mov	r3, r2
 8009866:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8009868:	2300      	movs	r3, #0
 800986a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800986c:	2300      	movs	r3, #0
 800986e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 8009870:	2300      	movs	r3, #0
 8009872:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8009874:	2300      	movs	r3, #0
 8009876:	62bb      	str	r3, [r7, #40]	; 0x28
 8009878:	2300      	movs	r3, #0
 800987a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800987c:	2300      	movs	r3, #0
 800987e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8009880:	2300      	movs	r3, #0
 8009882:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	891b      	ldrh	r3, [r3, #8]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d101      	bne.n	8009890 <CircularQueue_Add+0x38>
 800988c:	2302      	movs	r3, #2
 800988e:	e000      	b.n	8009892 <CircularQueue_Add+0x3a>
 8009890:	2300      	movs	r3, #0
 8009892:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	695b      	ldr	r3, [r3, #20]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d02a      	beq.n	80098f2 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	891b      	ldrh	r3, [r3, #8]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d123      	bne.n	80098ec <CircularQueue_Add+0x94>
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	4413      	add	r3, r2
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6819      	ldr	r1, [r3, #0]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	1c58      	adds	r0, r3, #1
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	4298      	cmp	r0, r3
 80098c2:	d306      	bcc.n	80098d2 <CircularQueue_Add+0x7a>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6918      	ldr	r0, [r3, #16]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	1ac3      	subs	r3, r0, r3
 80098ce:	3301      	adds	r3, #1
 80098d0:	e002      	b.n	80098d8 <CircularQueue_Add+0x80>
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	3301      	adds	r3, #1
 80098d8:	440b      	add	r3, r1
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	b29b      	uxth	r3, r3
 80098de:	021b      	lsls	r3, r3, #8
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	4413      	add	r3, r2
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	3302      	adds	r3, #2
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	e001      	b.n	80098f0 <CircularQueue_Add+0x98>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	891b      	ldrh	r3, [r3, #8]
 80098f0:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	891b      	ldrh	r3, [r3, #8]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d002      	beq.n	8009900 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	891b      	ldrh	r3, [r3, #8]
 80098fe:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	691a      	ldr	r2, [r3, #16]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	429a      	cmp	r2, r3
 800990a:	d307      	bcc.n	800991c <CircularQueue_Add+0xc4>
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6919      	ldr	r1, [r3, #16]
 8009914:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009916:	440b      	add	r3, r1
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	e000      	b.n	800991e <CircularQueue_Add+0xc6>
 800991c:	2300      	movs	r3, #0
 800991e:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8009920:	88fa      	ldrh	r2, [r7, #6]
 8009922:	7ffb      	ldrb	r3, [r7, #31]
 8009924:	4413      	add	r3, r2
 8009926:	461a      	mov	r2, r3
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	fb03 f302 	mul.w	r3, r3, r2
 800992e:	69ba      	ldr	r2, [r7, #24]
 8009930:	429a      	cmp	r2, r3
 8009932:	d80b      	bhi.n	800994c <CircularQueue_Add+0xf4>
 8009934:	88fa      	ldrh	r2, [r7, #6]
 8009936:	7ffb      	ldrb	r3, [r7, #31]
 8009938:	4413      	add	r3, r2
 800993a:	461a      	mov	r2, r3
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009942:	fb02 f201 	mul.w	r2, r2, r1
 8009946:	1a9b      	subs	r3, r3, r2
 8009948:	b2db      	uxtb	r3, r3
 800994a:	e000      	b.n	800994e <CircularQueue_Add+0xf6>
 800994c:	2300      	movs	r3, #0
 800994e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8009950:	7dfa      	ldrb	r2, [r7, #23]
 8009952:	7ffb      	ldrb	r3, [r7, #31]
 8009954:	429a      	cmp	r2, r3
 8009956:	bf8c      	ite	hi
 8009958:	2301      	movhi	r3, #1
 800995a:	2300      	movls	r3, #0
 800995c:	b2db      	uxtb	r3, r3
 800995e:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8009960:	7fbb      	ldrb	r3, [r7, #30]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d008      	beq.n	8009978 <CircularQueue_Add+0x120>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	7f1b      	ldrb	r3, [r3, #28]
 800996a:	f003 0301 	and.w	r3, r3, #1
 800996e:	2b00      	cmp	r3, #0
 8009970:	d002      	beq.n	8009978 <CircularQueue_Add+0x120>
 8009972:	7dfb      	ldrb	r3, [r7, #23]
 8009974:	b29b      	uxth	r3, r3
 8009976:	e000      	b.n	800997a <CircularQueue_Add+0x122>
 8009978:	8bbb      	ldrh	r3, [r7, #28]
 800997a:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800997c:	7fbb      	ldrb	r3, [r7, #30]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d008      	beq.n	8009994 <CircularQueue_Add+0x13c>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	7f1b      	ldrb	r3, [r3, #28]
 8009986:	f003 0302 	and.w	r3, r3, #2
 800998a:	2b00      	cmp	r3, #0
 800998c:	d002      	beq.n	8009994 <CircularQueue_Add+0x13c>
 800998e:	7ffb      	ldrb	r3, [r7, #31]
 8009990:	b29b      	uxth	r3, r3
 8009992:	e000      	b.n	8009996 <CircularQueue_Add+0x13e>
 8009994:	8bbb      	ldrh	r3, [r7, #28]
 8009996:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8009998:	88fb      	ldrh	r3, [r7, #6]
 800999a:	2b00      	cmp	r3, #0
 800999c:	f000 817e 	beq.w	8009c9c <CircularQueue_Add+0x444>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	695a      	ldr	r2, [r3, #20]
 80099a4:	88f9      	ldrh	r1, [r7, #6]
 80099a6:	7ffb      	ldrb	r3, [r7, #31]
 80099a8:	440b      	add	r3, r1
 80099aa:	4619      	mov	r1, r3
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	fb03 f301 	mul.w	r3, r3, r1
 80099b2:	441a      	add	r2, r3
 80099b4:	8bbb      	ldrh	r3, [r7, #28]
 80099b6:	441a      	add	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	429a      	cmp	r2, r3
 80099be:	f200 816d 	bhi.w	8009c9c <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 80099c2:	2300      	movs	r3, #0
 80099c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099c6:	e14a      	b.n	8009c5e <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	691a      	ldr	r2, [r3, #16]
 80099cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80099ce:	441a      	add	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d307      	bcc.n	80099e8 <CircularQueue_Add+0x190>
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	691a      	ldr	r2, [r3, #16]
 80099dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80099de:	441a      	add	r2, r3
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	e003      	b.n	80099f0 <CircularQueue_Add+0x198>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	691a      	ldr	r2, [r3, #16]
 80099ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80099ee:	4413      	add	r3, r2
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	891b      	ldrh	r3, [r3, #8]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d130      	bne.n	8009a64 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a08:	1c59      	adds	r1, r3, #1
 8009a0a:	6339      	str	r1, [r7, #48]	; 0x30
 8009a0c:	4413      	add	r3, r2
 8009a0e:	88fa      	ldrh	r2, [r7, #6]
 8009a10:	b2d2      	uxtb	r2, r2
 8009a12:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d304      	bcc.n	8009a28 <CircularQueue_Add+0x1d0>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	e000      	b.n	8009a2a <CircularQueue_Add+0x1d2>
 8009a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2a:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8009a2c:	88fb      	ldrh	r3, [r7, #6]
 8009a2e:	0a1b      	lsrs	r3, r3, #8
 8009a30:	b298      	uxth	r0, r3
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a38:	1c59      	adds	r1, r3, #1
 8009a3a:	6339      	str	r1, [r7, #48]	; 0x30
 8009a3c:	4413      	add	r3, r2
 8009a3e:	b2c2      	uxtb	r2, r0
 8009a40:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d304      	bcc.n	8009a56 <CircularQueue_Add+0x1fe>
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a52:	1ad3      	subs	r3, r2, r3
 8009a54:	e000      	b.n	8009a58 <CircularQueue_Add+0x200>
 8009a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a58:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	1c9a      	adds	r2, r3, #2
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8009a64:	88fa      	ldrh	r2, [r7, #6]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6859      	ldr	r1, [r3, #4]
 8009a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6c:	1acb      	subs	r3, r1, r3
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	bf28      	it	cs
 8009a72:	4613      	movcs	r3, r2
 8009a74:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8009a76:	88fb      	ldrh	r3, [r7, #6]
 8009a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d007      	beq.n	8009a8e <CircularQueue_Add+0x236>
 8009a7e:	88fb      	ldrh	r3, [r7, #6]
 8009a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d225      	bcs.n	8009ad2 <CircularQueue_Add+0x27a>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	7f1b      	ldrb	r3, [r3, #28]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d121      	bne.n	8009ad2 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a94:	18d0      	adds	r0, r2, r3
 8009a96:	88fb      	ldrh	r3, [r7, #6]
 8009a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a9a:	fb02 f303 	mul.w	r3, r2, r3
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	f005 fd5b 	bl	800f560 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	695a      	ldr	r2, [r3, #20]
 8009aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab0:	441a      	add	r2, r3
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8009aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abc:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8009abe:	88fa      	ldrh	r2, [r7, #6]
 8009ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8009ac6:	7ffb      	ldrb	r3, [r7, #31]
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	88fb      	ldrh	r3, [r7, #6]
 8009acc:	4413      	add	r3, r2
 8009ace:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009ad0:	e0a4      	b.n	8009c1c <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8009ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f000 80a1 	beq.w	8009c1c <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	7f1b      	ldrb	r3, [r3, #28]
 8009ade:	f003 0301 	and.w	r3, r3, #1
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d03a      	beq.n	8009b5c <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	891b      	ldrh	r3, [r3, #8]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10d      	bne.n	8009b0a <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af4:	3b02      	subs	r3, #2
 8009af6:	4413      	add	r3, r2
 8009af8:	22ff      	movs	r2, #255	; 0xff
 8009afa:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b02:	3b01      	subs	r3, #1
 8009b04:	4413      	add	r3, r2
 8009b06:	22ff      	movs	r2, #255	; 0xff
 8009b08:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	695a      	ldr	r2, [r3, #20]
 8009b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b10:	441a      	add	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8009b1a:	88fb      	ldrh	r3, [r7, #6]
 8009b1c:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8009b1e:	2300      	movs	r3, #0
 8009b20:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	891b      	ldrh	r3, [r3, #8]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d16f      	bne.n	8009c0a <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b30:	1c59      	adds	r1, r3, #1
 8009b32:	6339      	str	r1, [r7, #48]	; 0x30
 8009b34:	4413      	add	r3, r2
 8009b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b38:	b2d2      	uxtb	r2, r2
 8009b3a:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3e:	0a18      	lsrs	r0, r3, #8
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b46:	1c59      	adds	r1, r3, #1
 8009b48:	6339      	str	r1, [r7, #48]	; 0x30
 8009b4a:	4413      	add	r3, r2
 8009b4c:	b2c2      	uxtb	r2, r0
 8009b4e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	695b      	ldr	r3, [r3, #20]
 8009b54:	1c9a      	adds	r2, r3, #2
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	615a      	str	r2, [r3, #20]
 8009b5a:	e056      	b.n	8009c0a <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	7f1b      	ldrb	r3, [r3, #28]
 8009b60:	f003 0302 	and.w	r3, r3, #2
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d050      	beq.n	8009c0a <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	891b      	ldrh	r3, [r3, #8]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d14a      	bne.n	8009c06 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b76:	3b02      	subs	r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b7c:	b2d2      	uxtb	r2, r2
 8009b7e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b82:	0a19      	lsrs	r1, r3, #8
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	4413      	add	r3, r2
 8009b8e:	b2ca      	uxtb	r2, r1
 8009b90:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b98:	18d0      	adds	r0, r2, r3
 8009b9a:	88fb      	ldrh	r3, [r7, #6]
 8009b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b9e:	fb02 f303 	mul.w	r3, r2, r3
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ba8:	4619      	mov	r1, r3
 8009baa:	f005 fcd9 	bl	800f560 <memcpy>
             q->byteCount += NbBytesToCopy; 
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	695a      	ldr	r2, [r3, #20]
 8009bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb4:	441a      	add	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8009bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbc:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8009bbe:	88fa      	ldrh	r2, [r7, #6]
 8009bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	1c5a      	adds	r2, r3, #1
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bda:	1c59      	adds	r1, r3, #1
 8009bdc:	6339      	str	r1, [r7, #48]	; 0x30
 8009bde:	4413      	add	r3, r2
 8009be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009be2:	b2d2      	uxtb	r2, r2
 8009be4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be8:	0a18      	lsrs	r0, r3, #8
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf0:	1c59      	adds	r1, r3, #1
 8009bf2:	6339      	str	r1, [r7, #48]	; 0x30
 8009bf4:	4413      	add	r3, r2
 8009bf6:	b2c2      	uxtb	r2, r0
 8009bf8:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	695b      	ldr	r3, [r3, #20]
 8009bfe:	1c9a      	adds	r2, r3, #2
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	615a      	str	r2, [r3, #20]
 8009c04:	e001      	b.n	8009c0a <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8009c06:	2300      	movs	r3, #0
 8009c08:	e049      	b.n	8009c9e <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8009c0a:	7ffb      	ldrb	r3, [r7, #31]
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	4413      	add	r3, r2
 8009c14:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 8009c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d015      	beq.n	8009c4e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c28:	18d0      	adds	r0, r2, r3
 8009c2a:	88fb      	ldrh	r3, [r7, #6]
 8009c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c2e:	fb02 f203 	mul.w	r2, r2, r3
 8009c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c34:	4413      	add	r3, r2
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	4413      	add	r3, r2
 8009c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	f005 fc8f 	bl	800f560 <memcpy>
        q->byteCount += NbBytesToCopy;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	695a      	ldr	r2, [r3, #20]
 8009c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c48:	441a      	add	r2, r3
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	1c5a      	adds	r2, r3, #1
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8009c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	f4ff aeb0 	bcc.w	80099c8 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6919      	ldr	r1, [r3, #16]
 8009c70:	7ffb      	ldrb	r3, [r7, #31]
 8009c72:	4419      	add	r1, r3
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	4299      	cmp	r1, r3
 8009c7a:	d307      	bcc.n	8009c8c <CircularQueue_Add+0x434>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6919      	ldr	r1, [r3, #16]
 8009c80:	7ffb      	ldrb	r3, [r7, #31]
 8009c82:	4419      	add	r1, r3
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	1acb      	subs	r3, r1, r3
 8009c8a:	e003      	b.n	8009c94 <CircularQueue_Add+0x43c>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6919      	ldr	r1, [r3, #16]
 8009c90:	7ffb      	ldrb	r3, [r7, #31]
 8009c92:	440b      	add	r3, r1
 8009c94:	4413      	add	r3, r2
 8009c96:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8009c98:	6a3b      	ldr	r3, [r7, #32]
 8009c9a:	e000      	b.n	8009c9e <CircularQueue_Add+0x446>
    return NULL;
 8009c9c:	2300      	movs	r3, #0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3738      	adds	r7, #56	; 0x38
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8009ca6:	b480      	push	{r7}
 8009ca8:	b085      	sub	sp, #20
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	891b      	ldrh	r3, [r3, #8]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d101      	bne.n	8009cc4 <CircularQueue_Remove+0x1e>
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	e000      	b.n	8009cc6 <CircularQueue_Remove+0x20>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f000 80d4 	beq.w	8009e80 <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	891b      	ldrh	r3, [r3, #8]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d121      	bne.n	8009d24 <CircularQueue_Remove+0x7e>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	4413      	add	r3, r2
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6819      	ldr	r1, [r3, #0]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	1c58      	adds	r0, r3, #1
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	4298      	cmp	r0, r3
 8009cfe:	d306      	bcc.n	8009d0e <CircularQueue_Remove+0x68>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	68d8      	ldr	r0, [r3, #12]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	1ac3      	subs	r3, r0, r3
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	e002      	b.n	8009d14 <CircularQueue_Remove+0x6e>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	3301      	adds	r3, #1
 8009d14:	440b      	add	r3, r1
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	021b      	lsls	r3, r3, #8
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	4413      	add	r3, r2
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	e001      	b.n	8009d28 <CircularQueue_Remove+0x82>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	891b      	ldrh	r3, [r3, #8]
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	7f1b      	ldrb	r3, [r3, #28]
 8009d30:	f003 0301 	and.w	r3, r3, #1
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d059      	beq.n	8009dec <CircularQueue_Remove+0x146>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	7f1b      	ldrb	r3, [r3, #28]
 8009d3c:	f003 0302 	and.w	r3, r3, #2
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d153      	bne.n	8009dec <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	881b      	ldrh	r3, [r3, #0]
 8009d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d103      	bne.n	8009d58 <CircularQueue_Remove+0xb2>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	891b      	ldrh	r3, [r3, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d012      	beq.n	8009d7e <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	68da      	ldr	r2, [r3, #12]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d943      	bls.n	8009dec <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	891b      	ldrh	r3, [r3, #8]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d03f      	beq.n	8009dec <CircularQueue_Remove+0x146>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	685a      	ldr	r2, [r3, #4]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	8912      	ldrh	r2, [r2, #8]
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d236      	bcs.n	8009dec <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	695a      	ldr	r2, [r3, #20]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	68d9      	ldr	r1, [r3, #12]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	1acb      	subs	r3, r1, r3
 8009d8c:	441a      	add	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	891b      	ldrh	r3, [r3, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d121      	bne.n	8009de4 <CircularQueue_Remove+0x13e>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	4413      	add	r3, r2
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6819      	ldr	r1, [r3, #0]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	1c58      	adds	r0, r3, #1
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	4298      	cmp	r0, r3
 8009dbe:	d306      	bcc.n	8009dce <CircularQueue_Remove+0x128>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	68d8      	ldr	r0, [r3, #12]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	1ac3      	subs	r3, r0, r3
 8009dca:	3301      	adds	r3, #1
 8009dcc:	e002      	b.n	8009dd4 <CircularQueue_Remove+0x12e>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	440b      	add	r3, r1
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	021b      	lsls	r3, r3, #8
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	4413      	add	r3, r2
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	e001      	b.n	8009de8 <CircularQueue_Remove+0x142>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	891b      	ldrh	r3, [r3, #8]
 8009de8:	683a      	ldr	r2, [r7, #0]
 8009dea:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	68d9      	ldr	r1, [r3, #12]
 8009df4:	7afb      	ldrb	r3, [r7, #11]
 8009df6:	4419      	add	r1, r3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	4299      	cmp	r1, r3
 8009dfe:	d307      	bcc.n	8009e10 <CircularQueue_Remove+0x16a>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	68d9      	ldr	r1, [r3, #12]
 8009e04:	7afb      	ldrb	r3, [r7, #11]
 8009e06:	4419      	add	r1, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	1acb      	subs	r3, r1, r3
 8009e0e:	e003      	b.n	8009e18 <CircularQueue_Remove+0x172>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	68d9      	ldr	r1, [r3, #12]
 8009e14:	7afb      	ldrb	r3, [r7, #11]
 8009e16:	440b      	add	r3, r1
 8009e18:	4413      	add	r3, r2
 8009e1a:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	695b      	ldr	r3, [r3, #20]
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	8812      	ldrh	r2, [r2, #0]
 8009e24:	4611      	mov	r1, r2
 8009e26:	7afa      	ldrb	r2, [r7, #11]
 8009e28:	440a      	add	r2, r1
 8009e2a:	1a9a      	subs	r2, r3, r2
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d01e      	beq.n	8009e76 <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	683a      	ldr	r2, [r7, #0]
 8009e3e:	8812      	ldrh	r2, [r2, #0]
 8009e40:	441a      	add	r2, r3
 8009e42:	7afb      	ldrb	r3, [r7, #11]
 8009e44:	441a      	add	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d30a      	bcc.n	8009e64 <CircularQueue_Remove+0x1be>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	683a      	ldr	r2, [r7, #0]
 8009e54:	8812      	ldrh	r2, [r2, #0]
 8009e56:	441a      	add	r2, r3
 8009e58:	7afb      	ldrb	r3, [r7, #11]
 8009e5a:	441a      	add	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	e006      	b.n	8009e72 <CircularQueue_Remove+0x1cc>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	683a      	ldr	r2, [r7, #0]
 8009e6a:	8812      	ldrh	r2, [r2, #0]
 8009e6c:	441a      	add	r2, r3
 8009e6e:	7afb      	ldrb	r3, [r7, #11]
 8009e70:	4413      	add	r3, r2
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	1e5a      	subs	r2, r3, #1
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 8009e80:	68fb      	ldr	r3, [r7, #12]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b087      	sub	sp, #28
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	891b      	ldrh	r3, [r3, #8]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d101      	bne.n	8009eac <CircularQueue_Sense+0x1e>
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	e000      	b.n	8009eae <CircularQueue_Sense+0x20>
 8009eac:	2300      	movs	r3, #0
 8009eae:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	695b      	ldr	r3, [r3, #20]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 8093 	beq.w	8009fea <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	891b      	ldrh	r3, [r3, #8]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d121      	bne.n	8009f16 <CircularQueue_Sense+0x88>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	4413      	add	r3, r2
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6819      	ldr	r1, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	1c58      	adds	r0, r3, #1
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	4298      	cmp	r0, r3
 8009ef0:	d306      	bcc.n	8009f00 <CircularQueue_Sense+0x72>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	68d8      	ldr	r0, [r3, #12]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	1ac3      	subs	r3, r0, r3
 8009efc:	3301      	adds	r3, #1
 8009efe:	e002      	b.n	8009f06 <CircularQueue_Sense+0x78>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	3301      	adds	r3, #1
 8009f06:	440b      	add	r3, r1
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	021b      	lsls	r3, r3, #8
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	4413      	add	r3, r2
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	e001      	b.n	8009f1a <CircularQueue_Sense+0x8c>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	891b      	ldrh	r3, [r3, #8]
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	7f1b      	ldrb	r3, [r3, #28]
 8009f22:	f003 0301 	and.w	r3, r3, #1
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d04a      	beq.n	8009fc0 <CircularQueue_Sense+0x132>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	7f1b      	ldrb	r3, [r3, #28]
 8009f2e:	f003 0302 	and.w	r3, r3, #2
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d144      	bne.n	8009fc0 <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	881b      	ldrh	r3, [r3, #0]
 8009f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d103      	bne.n	8009f4a <CircularQueue_Sense+0xbc>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	891b      	ldrh	r3, [r3, #8]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d012      	beq.n	8009f70 <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	68da      	ldr	r2, [r3, #12]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d934      	bls.n	8009fc0 <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	891b      	ldrh	r3, [r3, #8]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d030      	beq.n	8009fc0 <CircularQueue_Sense+0x132>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	685a      	ldr	r2, [r3, #4]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	8912      	ldrh	r2, [r2, #8]
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d227      	bcs.n	8009fc0 <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8009f70:	2300      	movs	r3, #0
 8009f72:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	891b      	ldrh	r3, [r3, #8]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d11d      	bne.n	8009fb8 <CircularQueue_Sense+0x12a>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	4413      	add	r3, r2
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6819      	ldr	r1, [r3, #0]
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	1c58      	adds	r0, r3, #1
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	4298      	cmp	r0, r3
 8009f96:	d305      	bcc.n	8009fa4 <CircularQueue_Sense+0x116>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	6938      	ldr	r0, [r7, #16]
 8009f9e:	1ac3      	subs	r3, r0, r3
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	e001      	b.n	8009fa8 <CircularQueue_Sense+0x11a>
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	440b      	add	r3, r1
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	021b      	lsls	r3, r3, #8
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	4413      	add	r3, r2
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	e001      	b.n	8009fbc <CircularQueue_Sense+0x12e>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	891b      	ldrh	r3, [r3, #8]
 8009fbc:	683a      	ldr	r2, [r7, #0]
 8009fbe:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	7bf9      	ldrb	r1, [r7, #15]
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	4419      	add	r1, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	4299      	cmp	r1, r3
 8009fd0:	d306      	bcc.n	8009fe0 <CircularQueue_Sense+0x152>
 8009fd2:	7bf9      	ldrb	r1, [r7, #15]
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	4419      	add	r1, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	1acb      	subs	r3, r1, r3
 8009fde:	e002      	b.n	8009fe6 <CircularQueue_Sense+0x158>
 8009fe0:	7bf9      	ldrb	r1, [r7, #15]
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	440b      	add	r3, r1
 8009fe6:	4413      	add	r3, r2
 8009fe8:	617b      	str	r3, [r7, #20]
  }
  return x;
 8009fea:	697b      	ldr	r3, [r7, #20]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	371c      	adds	r7, #28
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009ff8:	b480      	push	{r7}
 8009ffa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009ffc:	bf00      	nop
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
	...

0800a008 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a00e:	f3ef 8305 	mrs	r3, IPSR
 800a012:	60bb      	str	r3, [r7, #8]
  return(result);
 800a014:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a016:	2b00      	cmp	r3, #0
 800a018:	d10f      	bne.n	800a03a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a01a:	f3ef 8310 	mrs	r3, PRIMASK
 800a01e:	607b      	str	r3, [r7, #4]
  return(result);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d105      	bne.n	800a032 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a026:	f3ef 8311 	mrs	r3, BASEPRI
 800a02a:	603b      	str	r3, [r7, #0]
  return(result);
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d007      	beq.n	800a042 <osKernelInitialize+0x3a>
 800a032:	4b0e      	ldr	r3, [pc, #56]	; (800a06c <osKernelInitialize+0x64>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b02      	cmp	r3, #2
 800a038:	d103      	bne.n	800a042 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a03a:	f06f 0305 	mvn.w	r3, #5
 800a03e:	60fb      	str	r3, [r7, #12]
 800a040:	e00c      	b.n	800a05c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a042:	4b0a      	ldr	r3, [pc, #40]	; (800a06c <osKernelInitialize+0x64>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d105      	bne.n	800a056 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a04a:	4b08      	ldr	r3, [pc, #32]	; (800a06c <osKernelInitialize+0x64>)
 800a04c:	2201      	movs	r2, #1
 800a04e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a050:	2300      	movs	r3, #0
 800a052:	60fb      	str	r3, [r7, #12]
 800a054:	e002      	b.n	800a05c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a056:	f04f 33ff 	mov.w	r3, #4294967295
 800a05a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a05c:	68fb      	ldr	r3, [r7, #12]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3714      	adds	r7, #20
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	2000130c 	.word	0x2000130c

0800a070 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a076:	f3ef 8305 	mrs	r3, IPSR
 800a07a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a07c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10f      	bne.n	800a0a2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a082:	f3ef 8310 	mrs	r3, PRIMASK
 800a086:	607b      	str	r3, [r7, #4]
  return(result);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d105      	bne.n	800a09a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a08e:	f3ef 8311 	mrs	r3, BASEPRI
 800a092:	603b      	str	r3, [r7, #0]
  return(result);
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d007      	beq.n	800a0aa <osKernelStart+0x3a>
 800a09a:	4b0f      	ldr	r3, [pc, #60]	; (800a0d8 <osKernelStart+0x68>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d103      	bne.n	800a0aa <osKernelStart+0x3a>
    stat = osErrorISR;
 800a0a2:	f06f 0305 	mvn.w	r3, #5
 800a0a6:	60fb      	str	r3, [r7, #12]
 800a0a8:	e010      	b.n	800a0cc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a0aa:	4b0b      	ldr	r3, [pc, #44]	; (800a0d8 <osKernelStart+0x68>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d109      	bne.n	800a0c6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a0b2:	f7ff ffa1 	bl	8009ff8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a0b6:	4b08      	ldr	r3, [pc, #32]	; (800a0d8 <osKernelStart+0x68>)
 800a0b8:	2202      	movs	r2, #2
 800a0ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a0bc:	f001 ffd8 	bl	800c070 <vTaskStartScheduler>
      stat = osOK;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	60fb      	str	r3, [r7, #12]
 800a0c4:	e002      	b.n	800a0cc <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a0c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	2000130c 	.word	0x2000130c

0800a0dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b090      	sub	sp, #64	; 0x40
 800a0e0:	af04      	add	r7, sp, #16
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0ec:	f3ef 8305 	mrs	r3, IPSR
 800a0f0:	61fb      	str	r3, [r7, #28]
  return(result);
 800a0f2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f040 8090 	bne.w	800a21a <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a0fe:	61bb      	str	r3, [r7, #24]
  return(result);
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d105      	bne.n	800a112 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a106:	f3ef 8311 	mrs	r3, BASEPRI
 800a10a:	617b      	str	r3, [r7, #20]
  return(result);
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <osThreadNew+0x3e>
 800a112:	4b44      	ldr	r3, [pc, #272]	; (800a224 <osThreadNew+0x148>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2b02      	cmp	r3, #2
 800a118:	d07f      	beq.n	800a21a <osThreadNew+0x13e>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d07c      	beq.n	800a21a <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800a120:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a124:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a126:	2318      	movs	r3, #24
 800a128:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a12a:	2300      	movs	r3, #0
 800a12c:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a12e:	f04f 33ff 	mov.w	r3, #4294967295
 800a132:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d045      	beq.n	800a1c6 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d002      	beq.n	800a148 <osThreadNew+0x6c>
        name = attr->name;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	699b      	ldr	r3, [r3, #24]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d002      	beq.n	800a156 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	699b      	ldr	r3, [r3, #24]
 800a154:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d008      	beq.n	800a16e <osThreadNew+0x92>
 800a15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15e:	2b38      	cmp	r3, #56	; 0x38
 800a160:	d805      	bhi.n	800a16e <osThreadNew+0x92>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	f003 0301 	and.w	r3, r3, #1
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d001      	beq.n	800a172 <osThreadNew+0x96>
        return (NULL);
 800a16e:	2300      	movs	r3, #0
 800a170:	e054      	b.n	800a21c <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	695b      	ldr	r3, [r3, #20]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d003      	beq.n	800a182 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	695b      	ldr	r3, [r3, #20]
 800a17e:	089b      	lsrs	r3, r3, #2
 800a180:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00e      	beq.n	800a1a8 <osThreadNew+0xcc>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	2b5b      	cmp	r3, #91	; 0x5b
 800a190:	d90a      	bls.n	800a1a8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a196:	2b00      	cmp	r3, #0
 800a198:	d006      	beq.n	800a1a8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	695b      	ldr	r3, [r3, #20]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d002      	beq.n	800a1a8 <osThreadNew+0xcc>
        mem = 1;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	623b      	str	r3, [r7, #32]
 800a1a6:	e010      	b.n	800a1ca <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10c      	bne.n	800a1ca <osThreadNew+0xee>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d108      	bne.n	800a1ca <osThreadNew+0xee>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d104      	bne.n	800a1ca <osThreadNew+0xee>
          mem = 0;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	623b      	str	r3, [r7, #32]
 800a1c4:	e001      	b.n	800a1ca <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d110      	bne.n	800a1f2 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1d8:	9202      	str	r2, [sp, #8]
 800a1da:	9301      	str	r3, [sp, #4]
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f001 fd70 	bl	800bccc <xTaskCreateStatic>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	613b      	str	r3, [r7, #16]
 800a1f0:	e013      	b.n	800a21a <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800a1f2:	6a3b      	ldr	r3, [r7, #32]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d110      	bne.n	800a21a <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	f107 0310 	add.w	r3, r7, #16
 800a200:	9301      	str	r3, [sp, #4]
 800a202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f001 fdb8 	bl	800bd80 <xTaskCreate>
 800a210:	4603      	mov	r3, r0
 800a212:	2b01      	cmp	r3, #1
 800a214:	d001      	beq.n	800a21a <osThreadNew+0x13e>
          hTask = NULL;
 800a216:	2300      	movs	r3, #0
 800a218:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a21a:	693b      	ldr	r3, [r7, #16]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3730      	adds	r7, #48	; 0x30
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	2000130c 	.word	0x2000130c

0800a228 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800a228:	b580      	push	{r7, lr}
 800a22a:	b08a      	sub	sp, #40	; 0x28
 800a22c:	af02      	add	r7, sp, #8
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d002      	beq.n	800a242 <osThreadFlagsSet+0x1a>
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	da03      	bge.n	800a24a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800a242:	f06f 0303 	mvn.w	r3, #3
 800a246:	60fb      	str	r3, [r7, #12]
 800a248:	e046      	b.n	800a2d8 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800a24a:	f04f 33ff 	mov.w	r3, #4294967295
 800a24e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a250:	f3ef 8305 	mrs	r3, IPSR
 800a254:	61bb      	str	r3, [r7, #24]
  return(result);
 800a256:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10f      	bne.n	800a27c <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a25c:	f3ef 8310 	mrs	r3, PRIMASK
 800a260:	617b      	str	r3, [r7, #20]
  return(result);
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d105      	bne.n	800a274 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a268:	f3ef 8311 	mrs	r3, BASEPRI
 800a26c:	613b      	str	r3, [r7, #16]
  return(result);
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d024      	beq.n	800a2be <osThreadFlagsSet+0x96>
 800a274:	4b1b      	ldr	r3, [pc, #108]	; (800a2e4 <osThreadFlagsSet+0xbc>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d120      	bne.n	800a2be <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800a27c:	2300      	movs	r3, #0
 800a27e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800a280:	f107 0308 	add.w	r3, r7, #8
 800a284:	9300      	str	r3, [sp, #0]
 800a286:	2300      	movs	r3, #0
 800a288:	2201      	movs	r2, #1
 800a28a:	6839      	ldr	r1, [r7, #0]
 800a28c:	69f8      	ldr	r0, [r7, #28]
 800a28e:	f002 fe2b 	bl	800cee8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800a292:	f107 020c 	add.w	r2, r7, #12
 800a296:	2300      	movs	r3, #0
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	4613      	mov	r3, r2
 800a29c:	2200      	movs	r2, #0
 800a29e:	2100      	movs	r1, #0
 800a2a0:	69f8      	ldr	r0, [r7, #28]
 800a2a2:	f002 fe21 	bl	800cee8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d015      	beq.n	800a2d8 <osThreadFlagsSet+0xb0>
 800a2ac:	4b0e      	ldr	r3, [pc, #56]	; (800a2e8 <osThreadFlagsSet+0xc0>)
 800a2ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2b2:	601a      	str	r2, [r3, #0]
 800a2b4:	f3bf 8f4f 	dsb	sy
 800a2b8:	f3bf 8f6f 	isb	sy
 800a2bc:	e00c      	b.n	800a2d8 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800a2be:	2300      	movs	r3, #0
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	69f8      	ldr	r0, [r7, #28]
 800a2c6:	f002 fd59 	bl	800cd7c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800a2ca:	f107 030c 	add.w	r3, r7, #12
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	69f8      	ldr	r0, [r7, #28]
 800a2d4:	f002 fd52 	bl	800cd7c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3720      	adds	r7, #32
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	2000130c 	.word	0x2000130c
 800a2e8:	e000ed04 	.word	0xe000ed04

0800a2ec <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b08e      	sub	sp, #56	; 0x38
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2f8:	f3ef 8305 	mrs	r3, IPSR
 800a2fc:	61fb      	str	r3, [r7, #28]
  return(result);
 800a2fe:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800a300:	2b00      	cmp	r3, #0
 800a302:	d10f      	bne.n	800a324 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a304:	f3ef 8310 	mrs	r3, PRIMASK
 800a308:	61bb      	str	r3, [r7, #24]
  return(result);
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d105      	bne.n	800a31c <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a310:	f3ef 8311 	mrs	r3, BASEPRI
 800a314:	617b      	str	r3, [r7, #20]
  return(result);
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d007      	beq.n	800a32c <osThreadFlagsWait+0x40>
 800a31c:	4b3c      	ldr	r3, [pc, #240]	; (800a410 <osThreadFlagsWait+0x124>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b02      	cmp	r3, #2
 800a322:	d103      	bne.n	800a32c <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800a324:	f06f 0305 	mvn.w	r3, #5
 800a328:	637b      	str	r3, [r7, #52]	; 0x34
 800a32a:	e06b      	b.n	800a404 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	da03      	bge.n	800a33a <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800a332:	f06f 0303 	mvn.w	r3, #3
 800a336:	637b      	str	r3, [r7, #52]	; 0x34
 800a338:	e064      	b.n	800a404 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	f003 0302 	and.w	r3, r3, #2
 800a340:	2b00      	cmp	r3, #0
 800a342:	d002      	beq.n	800a34a <osThreadFlagsWait+0x5e>
      clear = 0U;
 800a344:	2300      	movs	r3, #0
 800a346:	633b      	str	r3, [r7, #48]	; 0x30
 800a348:	e001      	b.n	800a34e <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800a34e:	2300      	movs	r3, #0
 800a350:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800a356:	f001 ffd1 	bl	800c2fc <xTaskGetTickCount>
 800a35a:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800a35c:	f107 0210 	add.w	r2, r7, #16
 800a360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a362:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a364:	2000      	movs	r0, #0
 800a366:	f002 fcaf 	bl	800ccc8 <xTaskNotifyWait>
 800a36a:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d137      	bne.n	800a3e2 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800a372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	4013      	ands	r3, r2
 800a378:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a37e:	4313      	orrs	r3, r2
 800a380:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	f003 0301 	and.w	r3, r3, #1
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d00c      	beq.n	800a3a6 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a390:	4013      	ands	r3, r2
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	429a      	cmp	r2, r3
 800a396:	d032      	beq.n	800a3fe <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d10f      	bne.n	800a3be <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800a39e:	f06f 0302 	mvn.w	r3, #2
 800a3a2:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800a3a4:	e02e      	b.n	800a404 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3aa:	4013      	ands	r3, r2
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d128      	bne.n	800a402 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d103      	bne.n	800a3be <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800a3b6:	f06f 0302 	mvn.w	r3, #2
 800a3ba:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800a3bc:	e022      	b.n	800a404 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800a3be:	f001 ff9d 	bl	800c2fc <xTaskGetTickCount>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800a3ca:	6a3a      	ldr	r2, [r7, #32]
 800a3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d902      	bls.n	800a3d8 <osThreadFlagsWait+0xec>
          tout  = 0;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3d6:	e00e      	b.n	800a3f6 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800a3d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3da:	6a3b      	ldr	r3, [r7, #32]
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3e0:	e009      	b.n	800a3f6 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d103      	bne.n	800a3f0 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800a3e8:	f06f 0302 	mvn.w	r3, #2
 800a3ec:	637b      	str	r3, [r7, #52]	; 0x34
 800a3ee:	e002      	b.n	800a3f6 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800a3f0:	f06f 0301 	mvn.w	r3, #1
 800a3f4:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1af      	bne.n	800a35c <osThreadFlagsWait+0x70>
 800a3fc:	e002      	b.n	800a404 <osThreadFlagsWait+0x118>
            break;
 800a3fe:	bf00      	nop
 800a400:	e000      	b.n	800a404 <osThreadFlagsWait+0x118>
            break;
 800a402:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800a404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a406:	4618      	mov	r0, r3
 800a408:	3738      	adds	r7, #56	; 0x38
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	2000130c 	.word	0x2000130c

0800a414 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800a414:	b580      	push	{r7, lr}
 800a416:	b086      	sub	sp, #24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a41c:	f3ef 8305 	mrs	r3, IPSR
 800a420:	613b      	str	r3, [r7, #16]
  return(result);
 800a422:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10f      	bne.n	800a448 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a428:	f3ef 8310 	mrs	r3, PRIMASK
 800a42c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d105      	bne.n	800a440 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a434:	f3ef 8311 	mrs	r3, BASEPRI
 800a438:	60bb      	str	r3, [r7, #8]
  return(result);
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d007      	beq.n	800a450 <osDelay+0x3c>
 800a440:	4b0a      	ldr	r3, [pc, #40]	; (800a46c <osDelay+0x58>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b02      	cmp	r3, #2
 800a446:	d103      	bne.n	800a450 <osDelay+0x3c>
    stat = osErrorISR;
 800a448:	f06f 0305 	mvn.w	r3, #5
 800a44c:	617b      	str	r3, [r7, #20]
 800a44e:	e007      	b.n	800a460 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a450:	2300      	movs	r3, #0
 800a452:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d002      	beq.n	800a460 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f001 fdd4 	bl	800c008 <vTaskDelay>
    }
  }

  return (stat);
 800a460:	697b      	ldr	r3, [r7, #20]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3718      	adds	r7, #24
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	2000130c 	.word	0x2000130c

0800a470 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a470:	b580      	push	{r7, lr}
 800a472:	b08a      	sub	sp, #40	; 0x28
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a478:	2300      	movs	r3, #0
 800a47a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a47c:	f3ef 8305 	mrs	r3, IPSR
 800a480:	613b      	str	r3, [r7, #16]
  return(result);
 800a482:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800a484:	2b00      	cmp	r3, #0
 800a486:	f040 8085 	bne.w	800a594 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a48a:	f3ef 8310 	mrs	r3, PRIMASK
 800a48e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d105      	bne.n	800a4a2 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a496:	f3ef 8311 	mrs	r3, BASEPRI
 800a49a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d003      	beq.n	800a4aa <osMutexNew+0x3a>
 800a4a2:	4b3f      	ldr	r3, [pc, #252]	; (800a5a0 <osMutexNew+0x130>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	d074      	beq.n	800a594 <osMutexNew+0x124>
    if (attr != NULL) {
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d003      	beq.n	800a4b8 <osMutexNew+0x48>
      type = attr->attr_bits;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	623b      	str	r3, [r7, #32]
 800a4b6:	e001      	b.n	800a4bc <osMutexNew+0x4c>
    } else {
      type = 0U;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a4bc:	6a3b      	ldr	r3, [r7, #32]
 800a4be:	f003 0301 	and.w	r3, r3, #1
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d002      	beq.n	800a4cc <osMutexNew+0x5c>
      rmtx = 1U;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	61fb      	str	r3, [r7, #28]
 800a4ca:	e001      	b.n	800a4d0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a4d0:	6a3b      	ldr	r3, [r7, #32]
 800a4d2:	f003 0308 	and.w	r3, r3, #8
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d15c      	bne.n	800a594 <osMutexNew+0x124>
      mem = -1;
 800a4da:	f04f 33ff 	mov.w	r3, #4294967295
 800a4de:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d015      	beq.n	800a512 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d006      	beq.n	800a4fc <osMutexNew+0x8c>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	2b4f      	cmp	r3, #79	; 0x4f
 800a4f4:	d902      	bls.n	800a4fc <osMutexNew+0x8c>
          mem = 1;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	61bb      	str	r3, [r7, #24]
 800a4fa:	e00c      	b.n	800a516 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d108      	bne.n	800a516 <osMutexNew+0xa6>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d104      	bne.n	800a516 <osMutexNew+0xa6>
            mem = 0;
 800a50c:	2300      	movs	r3, #0
 800a50e:	61bb      	str	r3, [r7, #24]
 800a510:	e001      	b.n	800a516 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800a512:	2300      	movs	r3, #0
 800a514:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d112      	bne.n	800a542 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d007      	beq.n	800a532 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	4619      	mov	r1, r3
 800a528:	2004      	movs	r0, #4
 800a52a:	f000 fc9c 	bl	800ae66 <xQueueCreateMutexStatic>
 800a52e:	6278      	str	r0, [r7, #36]	; 0x24
 800a530:	e016      	b.n	800a560 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	4619      	mov	r1, r3
 800a538:	2001      	movs	r0, #1
 800a53a:	f000 fc94 	bl	800ae66 <xQueueCreateMutexStatic>
 800a53e:	6278      	str	r0, [r7, #36]	; 0x24
 800a540:	e00e      	b.n	800a560 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d10b      	bne.n	800a560 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d004      	beq.n	800a558 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800a54e:	2004      	movs	r0, #4
 800a550:	f000 fc71 	bl	800ae36 <xQueueCreateMutex>
 800a554:	6278      	str	r0, [r7, #36]	; 0x24
 800a556:	e003      	b.n	800a560 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800a558:	2001      	movs	r0, #1
 800a55a:	f000 fc6c 	bl	800ae36 <xQueueCreateMutex>
 800a55e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00c      	beq.n	800a580 <osMutexNew+0x110>
        if (attr != NULL) {
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d003      	beq.n	800a574 <osMutexNew+0x104>
          name = attr->name;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	617b      	str	r3, [r7, #20]
 800a572:	e001      	b.n	800a578 <osMutexNew+0x108>
        } else {
          name = NULL;
 800a574:	2300      	movs	r3, #0
 800a576:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800a578:	6979      	ldr	r1, [r7, #20]
 800a57a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a57c:	f001 fb20 	bl	800bbc0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a582:	2b00      	cmp	r3, #0
 800a584:	d006      	beq.n	800a594 <osMutexNew+0x124>
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d003      	beq.n	800a594 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58e:	f043 0301 	orr.w	r3, r3, #1
 800a592:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a596:	4618      	mov	r0, r3
 800a598:	3728      	adds	r7, #40	; 0x28
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	2000130c 	.word	0x2000130c

0800a5a4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b088      	sub	sp, #32
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f023 0301 	bic.w	r3, r3, #1
 800a5b4:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f003 0301 	and.w	r3, r3, #1
 800a5bc:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5c2:	f3ef 8305 	mrs	r3, IPSR
 800a5c6:	613b      	str	r3, [r7, #16]
  return(result);
 800a5c8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d10f      	bne.n	800a5ee <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5ce:	f3ef 8310 	mrs	r3, PRIMASK
 800a5d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d105      	bne.n	800a5e6 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a5da:	f3ef 8311 	mrs	r3, BASEPRI
 800a5de:	60bb      	str	r3, [r7, #8]
  return(result);
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d007      	beq.n	800a5f6 <osMutexAcquire+0x52>
 800a5e6:	4b1d      	ldr	r3, [pc, #116]	; (800a65c <osMutexAcquire+0xb8>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d103      	bne.n	800a5f6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800a5ee:	f06f 0305 	mvn.w	r3, #5
 800a5f2:	61fb      	str	r3, [r7, #28]
 800a5f4:	e02c      	b.n	800a650 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d103      	bne.n	800a604 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800a5fc:	f06f 0303 	mvn.w	r3, #3
 800a600:	61fb      	str	r3, [r7, #28]
 800a602:	e025      	b.n	800a650 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d011      	beq.n	800a62e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a60a:	6839      	ldr	r1, [r7, #0]
 800a60c:	69b8      	ldr	r0, [r7, #24]
 800a60e:	f000 fc78 	bl	800af02 <xQueueTakeMutexRecursive>
 800a612:	4603      	mov	r3, r0
 800a614:	2b01      	cmp	r3, #1
 800a616:	d01b      	beq.n	800a650 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d003      	beq.n	800a626 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800a61e:	f06f 0301 	mvn.w	r3, #1
 800a622:	61fb      	str	r3, [r7, #28]
 800a624:	e014      	b.n	800a650 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800a626:	f06f 0302 	mvn.w	r3, #2
 800a62a:	61fb      	str	r3, [r7, #28]
 800a62c:	e010      	b.n	800a650 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	69b8      	ldr	r0, [r7, #24]
 800a632:	f000 fff5 	bl	800b620 <xQueueSemaphoreTake>
 800a636:	4603      	mov	r3, r0
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d009      	beq.n	800a650 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d003      	beq.n	800a64a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800a642:	f06f 0301 	mvn.w	r3, #1
 800a646:	61fb      	str	r3, [r7, #28]
 800a648:	e002      	b.n	800a650 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800a64a:	f06f 0302 	mvn.w	r3, #2
 800a64e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a650:	69fb      	ldr	r3, [r7, #28]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3720      	adds	r7, #32
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	2000130c 	.word	0x2000130c

0800a660 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a660:	b580      	push	{r7, lr}
 800a662:	b088      	sub	sp, #32
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f023 0301 	bic.w	r3, r3, #1
 800a66e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800a678:	2300      	movs	r3, #0
 800a67a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a67c:	f3ef 8305 	mrs	r3, IPSR
 800a680:	613b      	str	r3, [r7, #16]
  return(result);
 800a682:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10f      	bne.n	800a6a8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a688:	f3ef 8310 	mrs	r3, PRIMASK
 800a68c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d105      	bne.n	800a6a0 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a694:	f3ef 8311 	mrs	r3, BASEPRI
 800a698:	60bb      	str	r3, [r7, #8]
  return(result);
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d007      	beq.n	800a6b0 <osMutexRelease+0x50>
 800a6a0:	4b16      	ldr	r3, [pc, #88]	; (800a6fc <osMutexRelease+0x9c>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2b02      	cmp	r3, #2
 800a6a6:	d103      	bne.n	800a6b0 <osMutexRelease+0x50>
    stat = osErrorISR;
 800a6a8:	f06f 0305 	mvn.w	r3, #5
 800a6ac:	61fb      	str	r3, [r7, #28]
 800a6ae:	e01f      	b.n	800a6f0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d103      	bne.n	800a6be <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800a6b6:	f06f 0303 	mvn.w	r3, #3
 800a6ba:	61fb      	str	r3, [r7, #28]
 800a6bc:	e018      	b.n	800a6f0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d009      	beq.n	800a6d8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a6c4:	69b8      	ldr	r0, [r7, #24]
 800a6c6:	f000 fbe9 	bl	800ae9c <xQueueGiveMutexRecursive>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d00f      	beq.n	800a6f0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800a6d0:	f06f 0302 	mvn.w	r3, #2
 800a6d4:	61fb      	str	r3, [r7, #28]
 800a6d6:	e00b      	b.n	800a6f0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a6d8:	2300      	movs	r3, #0
 800a6da:	2200      	movs	r2, #0
 800a6dc:	2100      	movs	r1, #0
 800a6de:	69b8      	ldr	r0, [r7, #24]
 800a6e0:	f000 fcaa 	bl	800b038 <xQueueGenericSend>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d002      	beq.n	800a6f0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800a6ea:	f06f 0302 	mvn.w	r3, #2
 800a6ee:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800a6f0:	69fb      	ldr	r3, [r7, #28]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3720      	adds	r7, #32
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	2000130c 	.word	0x2000130c

0800a700 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a700:	b580      	push	{r7, lr}
 800a702:	b08c      	sub	sp, #48	; 0x30
 800a704:	af02      	add	r7, sp, #8
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a70c:	2300      	movs	r3, #0
 800a70e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a710:	f3ef 8305 	mrs	r3, IPSR
 800a714:	61bb      	str	r3, [r7, #24]
  return(result);
 800a716:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f040 8087 	bne.w	800a82c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a71e:	f3ef 8310 	mrs	r3, PRIMASK
 800a722:	617b      	str	r3, [r7, #20]
  return(result);
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d105      	bne.n	800a736 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a72a:	f3ef 8311 	mrs	r3, BASEPRI
 800a72e:	613b      	str	r3, [r7, #16]
  return(result);
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d003      	beq.n	800a73e <osSemaphoreNew+0x3e>
 800a736:	4b40      	ldr	r3, [pc, #256]	; (800a838 <osSemaphoreNew+0x138>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d076      	beq.n	800a82c <osSemaphoreNew+0x12c>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d073      	beq.n	800a82c <osSemaphoreNew+0x12c>
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d86f      	bhi.n	800a82c <osSemaphoreNew+0x12c>
    mem = -1;
 800a74c:	f04f 33ff 	mov.w	r3, #4294967295
 800a750:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d015      	beq.n	800a784 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d006      	beq.n	800a76e <osSemaphoreNew+0x6e>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	2b4f      	cmp	r3, #79	; 0x4f
 800a766:	d902      	bls.n	800a76e <osSemaphoreNew+0x6e>
        mem = 1;
 800a768:	2301      	movs	r3, #1
 800a76a:	623b      	str	r3, [r7, #32]
 800a76c:	e00c      	b.n	800a788 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d108      	bne.n	800a788 <osSemaphoreNew+0x88>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d104      	bne.n	800a788 <osSemaphoreNew+0x88>
          mem = 0;
 800a77e:	2300      	movs	r3, #0
 800a780:	623b      	str	r3, [r7, #32]
 800a782:	e001      	b.n	800a788 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800a784:	2300      	movs	r3, #0
 800a786:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800a788:	6a3b      	ldr	r3, [r7, #32]
 800a78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a78e:	d04d      	beq.n	800a82c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2b01      	cmp	r3, #1
 800a794:	d129      	bne.n	800a7ea <osSemaphoreNew+0xea>
        if (mem == 1) {
 800a796:	6a3b      	ldr	r3, [r7, #32]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d10b      	bne.n	800a7b4 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	689a      	ldr	r2, [r3, #8]
 800a7a0:	2303      	movs	r3, #3
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	2001      	movs	r0, #1
 800a7ac:	f000 fa54 	bl	800ac58 <xQueueGenericCreateStatic>
 800a7b0:	6278      	str	r0, [r7, #36]	; 0x24
 800a7b2:	e005      	b.n	800a7c0 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800a7b4:	2203      	movs	r2, #3
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	2001      	movs	r0, #1
 800a7ba:	f000 fac0 	bl	800ad3e <xQueueGenericCreate>
 800a7be:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d022      	beq.n	800a80c <osSemaphoreNew+0x10c>
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d01f      	beq.n	800a80c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7d4:	f000 fc30 	bl	800b038 <xQueueGenericSend>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d016      	beq.n	800a80c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800a7de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7e0:	f001 f8a3 	bl	800b92a <vQueueDelete>
            hSemaphore = NULL;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	627b      	str	r3, [r7, #36]	; 0x24
 800a7e8:	e010      	b.n	800a80c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800a7ea:	6a3b      	ldr	r3, [r7, #32]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d108      	bne.n	800a802 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	68b9      	ldr	r1, [r7, #8]
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f000 fbb7 	bl	800af6c <xQueueCreateCountingSemaphoreStatic>
 800a7fe:	6278      	str	r0, [r7, #36]	; 0x24
 800a800:	e004      	b.n	800a80c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a802:	68b9      	ldr	r1, [r7, #8]
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f000 fbe6 	bl	800afd6 <xQueueCreateCountingSemaphore>
 800a80a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00c      	beq.n	800a82c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d003      	beq.n	800a820 <osSemaphoreNew+0x120>
          name = attr->name;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	61fb      	str	r3, [r7, #28]
 800a81e:	e001      	b.n	800a824 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800a820:	2300      	movs	r3, #0
 800a822:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a824:	69f9      	ldr	r1, [r7, #28]
 800a826:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a828:	f001 f9ca 	bl	800bbc0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3728      	adds	r7, #40	; 0x28
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	2000130c 	.word	0x2000130c

0800a83c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b088      	sub	sp, #32
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a84a:	2300      	movs	r3, #0
 800a84c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d103      	bne.n	800a85c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a854:	f06f 0303 	mvn.w	r3, #3
 800a858:	61fb      	str	r3, [r7, #28]
 800a85a:	e04b      	b.n	800a8f4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a85c:	f3ef 8305 	mrs	r3, IPSR
 800a860:	617b      	str	r3, [r7, #20]
  return(result);
 800a862:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10f      	bne.n	800a888 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a868:	f3ef 8310 	mrs	r3, PRIMASK
 800a86c:	613b      	str	r3, [r7, #16]
  return(result);
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d105      	bne.n	800a880 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a874:	f3ef 8311 	mrs	r3, BASEPRI
 800a878:	60fb      	str	r3, [r7, #12]
  return(result);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d026      	beq.n	800a8ce <osSemaphoreAcquire+0x92>
 800a880:	4b1f      	ldr	r3, [pc, #124]	; (800a900 <osSemaphoreAcquire+0xc4>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	2b02      	cmp	r3, #2
 800a886:	d122      	bne.n	800a8ce <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d003      	beq.n	800a896 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800a88e:	f06f 0303 	mvn.w	r3, #3
 800a892:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a894:	e02d      	b.n	800a8f2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800a896:	2300      	movs	r3, #0
 800a898:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a89a:	f107 0308 	add.w	r3, r7, #8
 800a89e:	461a      	mov	r2, r3
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	69b8      	ldr	r0, [r7, #24]
 800a8a4:	f000 ffc4 	bl	800b830 <xQueueReceiveFromISR>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d003      	beq.n	800a8b6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800a8ae:	f06f 0302 	mvn.w	r3, #2
 800a8b2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a8b4:	e01d      	b.n	800a8f2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d01a      	beq.n	800a8f2 <osSemaphoreAcquire+0xb6>
 800a8bc:	4b11      	ldr	r3, [pc, #68]	; (800a904 <osSemaphoreAcquire+0xc8>)
 800a8be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8c2:	601a      	str	r2, [r3, #0]
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800a8cc:	e011      	b.n	800a8f2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a8ce:	6839      	ldr	r1, [r7, #0]
 800a8d0:	69b8      	ldr	r0, [r7, #24]
 800a8d2:	f000 fea5 	bl	800b620 <xQueueSemaphoreTake>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d00b      	beq.n	800a8f4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d003      	beq.n	800a8ea <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800a8e2:	f06f 0301 	mvn.w	r3, #1
 800a8e6:	61fb      	str	r3, [r7, #28]
 800a8e8:	e004      	b.n	800a8f4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800a8ea:	f06f 0302 	mvn.w	r3, #2
 800a8ee:	61fb      	str	r3, [r7, #28]
 800a8f0:	e000      	b.n	800a8f4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800a8f2:	bf00      	nop
      }
    }
  }

  return (stat);
 800a8f4:	69fb      	ldr	r3, [r7, #28]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3720      	adds	r7, #32
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	2000130c 	.word	0x2000130c
 800a904:	e000ed04 	.word	0xe000ed04

0800a908 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a908:	b580      	push	{r7, lr}
 800a90a:	b088      	sub	sp, #32
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a914:	2300      	movs	r3, #0
 800a916:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d103      	bne.n	800a926 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a91e:	f06f 0303 	mvn.w	r3, #3
 800a922:	61fb      	str	r3, [r7, #28]
 800a924:	e03e      	b.n	800a9a4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a926:	f3ef 8305 	mrs	r3, IPSR
 800a92a:	617b      	str	r3, [r7, #20]
  return(result);
 800a92c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10f      	bne.n	800a952 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a932:	f3ef 8310 	mrs	r3, PRIMASK
 800a936:	613b      	str	r3, [r7, #16]
  return(result);
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d105      	bne.n	800a94a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a93e:	f3ef 8311 	mrs	r3, BASEPRI
 800a942:	60fb      	str	r3, [r7, #12]
  return(result);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d01e      	beq.n	800a988 <osSemaphoreRelease+0x80>
 800a94a:	4b19      	ldr	r3, [pc, #100]	; (800a9b0 <osSemaphoreRelease+0xa8>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2b02      	cmp	r3, #2
 800a950:	d11a      	bne.n	800a988 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800a952:	2300      	movs	r3, #0
 800a954:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a956:	f107 0308 	add.w	r3, r7, #8
 800a95a:	4619      	mov	r1, r3
 800a95c:	69b8      	ldr	r0, [r7, #24]
 800a95e:	f000 fcf9 	bl	800b354 <xQueueGiveFromISR>
 800a962:	4603      	mov	r3, r0
 800a964:	2b01      	cmp	r3, #1
 800a966:	d003      	beq.n	800a970 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800a968:	f06f 0302 	mvn.w	r3, #2
 800a96c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a96e:	e018      	b.n	800a9a2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d015      	beq.n	800a9a2 <osSemaphoreRelease+0x9a>
 800a976:	4b0f      	ldr	r3, [pc, #60]	; (800a9b4 <osSemaphoreRelease+0xac>)
 800a978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a97c:	601a      	str	r2, [r3, #0]
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a986:	e00c      	b.n	800a9a2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a988:	2300      	movs	r3, #0
 800a98a:	2200      	movs	r2, #0
 800a98c:	2100      	movs	r1, #0
 800a98e:	69b8      	ldr	r0, [r7, #24]
 800a990:	f000 fb52 	bl	800b038 <xQueueGenericSend>
 800a994:	4603      	mov	r3, r0
 800a996:	2b01      	cmp	r3, #1
 800a998:	d004      	beq.n	800a9a4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800a99a:	f06f 0302 	mvn.w	r3, #2
 800a99e:	61fb      	str	r3, [r7, #28]
 800a9a0:	e000      	b.n	800a9a4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a9a2:	bf00      	nop
    }
  }

  return (stat);
 800a9a4:	69fb      	ldr	r3, [r7, #28]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3720      	adds	r7, #32
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	2000130c 	.word	0x2000130c
 800a9b4:	e000ed04 	.word	0xe000ed04

0800a9b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	4a07      	ldr	r2, [pc, #28]	; (800a9e4 <vApplicationGetIdleTaskMemory+0x2c>)
 800a9c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	4a06      	ldr	r2, [pc, #24]	; (800a9e8 <vApplicationGetIdleTaskMemory+0x30>)
 800a9ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9d6:	601a      	str	r2, [r3, #0]
}
 800a9d8:	bf00      	nop
 800a9da:	3714      	adds	r7, #20
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr
 800a9e4:	20001310 	.word	0x20001310
 800a9e8:	2000136c 	.word	0x2000136c

0800a9ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	4a07      	ldr	r2, [pc, #28]	; (800aa18 <vApplicationGetTimerTaskMemory+0x2c>)
 800a9fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	4a06      	ldr	r2, [pc, #24]	; (800aa1c <vApplicationGetTimerTaskMemory+0x30>)
 800aa02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa0a:	601a      	str	r2, [r3, #0]
}
 800aa0c:	bf00      	nop
 800aa0e:	3714      	adds	r7, #20
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr
 800aa18:	20001b6c 	.word	0x20001b6c
 800aa1c:	20001bc8 	.word	0x20001bc8

0800aa20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f103 0208 	add.w	r2, r3, #8
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f04f 32ff 	mov.w	r2, #4294967295
 800aa38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f103 0208 	add.w	r2, r3, #8
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f103 0208 	add.w	r2, r3, #8
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa6e:	bf00      	nop
 800aa70:	370c      	adds	r7, #12
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr

0800aa7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa7a:	b480      	push	{r7}
 800aa7c:	b085      	sub	sp, #20
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
 800aa82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	689a      	ldr	r2, [r3, #8]
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	683a      	ldr	r2, [r7, #0]
 800aaa4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	1c5a      	adds	r2, r3, #1
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	601a      	str	r2, [r3, #0]
}
 800aab6:	bf00      	nop
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aac2:	b480      	push	{r7}
 800aac4:	b085      	sub	sp, #20
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
 800aaca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad8:	d103      	bne.n	800aae2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	691b      	ldr	r3, [r3, #16]
 800aade:	60fb      	str	r3, [r7, #12]
 800aae0:	e00c      	b.n	800aafc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	3308      	adds	r3, #8
 800aae6:	60fb      	str	r3, [r7, #12]
 800aae8:	e002      	b.n	800aaf0 <vListInsert+0x2e>
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	60fb      	str	r3, [r7, #12]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d2f6      	bcs.n	800aaea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	685a      	ldr	r2, [r3, #4]
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	683a      	ldr	r2, [r7, #0]
 800ab0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	68fa      	ldr	r2, [r7, #12]
 800ab10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	683a      	ldr	r2, [r7, #0]
 800ab16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	1c5a      	adds	r2, r3, #1
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	601a      	str	r2, [r3, #0]
}
 800ab28:	bf00      	nop
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ab34:	b480      	push	{r7}
 800ab36:	b085      	sub	sp, #20
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	6892      	ldr	r2, [r2, #8]
 800ab4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	6852      	ldr	r2, [r2, #4]
 800ab54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d103      	bne.n	800ab68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	689a      	ldr	r2, [r3, #8]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	1e5a      	subs	r2, r3, #1
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3714      	adds	r7, #20
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d109      	bne.n	800abb0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ab9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	60bb      	str	r3, [r7, #8]
 800abae:	e7fe      	b.n	800abae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800abb0:	f002 ff34 	bl	800da1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abbc:	68f9      	ldr	r1, [r7, #12]
 800abbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abc0:	fb01 f303 	mul.w	r3, r1, r3
 800abc4:	441a      	add	r2, r3
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe0:	3b01      	subs	r3, #1
 800abe2:	68f9      	ldr	r1, [r7, #12]
 800abe4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abe6:	fb01 f303 	mul.w	r3, r1, r3
 800abea:	441a      	add	r2, r3
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	22ff      	movs	r2, #255	; 0xff
 800abf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	22ff      	movs	r2, #255	; 0xff
 800abfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d114      	bne.n	800ac30 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d01a      	beq.n	800ac44 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	3310      	adds	r3, #16
 800ac12:	4618      	mov	r0, r3
 800ac14:	f001 fce4 	bl	800c5e0 <xTaskRemoveFromEventList>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d012      	beq.n	800ac44 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac1e:	4b0d      	ldr	r3, [pc, #52]	; (800ac54 <xQueueGenericReset+0xcc>)
 800ac20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac24:	601a      	str	r2, [r3, #0]
 800ac26:	f3bf 8f4f 	dsb	sy
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	e009      	b.n	800ac44 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	3310      	adds	r3, #16
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7ff fef3 	bl	800aa20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	3324      	adds	r3, #36	; 0x24
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7ff feee 	bl	800aa20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac44:	f002 ff18 	bl	800da78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac48:	2301      	movs	r3, #1
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	e000ed04 	.word	0xe000ed04

0800ac58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b08e      	sub	sp, #56	; 0x38
 800ac5c:	af02      	add	r7, sp, #8
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
 800ac64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d109      	bne.n	800ac80 <xQueueGenericCreateStatic+0x28>
 800ac6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac7e:	e7fe      	b.n	800ac7e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d109      	bne.n	800ac9a <xQueueGenericCreateStatic+0x42>
 800ac86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8a:	f383 8811 	msr	BASEPRI, r3
 800ac8e:	f3bf 8f6f 	isb	sy
 800ac92:	f3bf 8f4f 	dsb	sy
 800ac96:	627b      	str	r3, [r7, #36]	; 0x24
 800ac98:	e7fe      	b.n	800ac98 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d002      	beq.n	800aca6 <xQueueGenericCreateStatic+0x4e>
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d001      	beq.n	800acaa <xQueueGenericCreateStatic+0x52>
 800aca6:	2301      	movs	r3, #1
 800aca8:	e000      	b.n	800acac <xQueueGenericCreateStatic+0x54>
 800acaa:	2300      	movs	r3, #0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d109      	bne.n	800acc4 <xQueueGenericCreateStatic+0x6c>
 800acb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb4:	f383 8811 	msr	BASEPRI, r3
 800acb8:	f3bf 8f6f 	isb	sy
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	623b      	str	r3, [r7, #32]
 800acc2:	e7fe      	b.n	800acc2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d102      	bne.n	800acd0 <xQueueGenericCreateStatic+0x78>
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d101      	bne.n	800acd4 <xQueueGenericCreateStatic+0x7c>
 800acd0:	2301      	movs	r3, #1
 800acd2:	e000      	b.n	800acd6 <xQueueGenericCreateStatic+0x7e>
 800acd4:	2300      	movs	r3, #0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d109      	bne.n	800acee <xQueueGenericCreateStatic+0x96>
 800acda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	61fb      	str	r3, [r7, #28]
 800acec:	e7fe      	b.n	800acec <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800acee:	2350      	movs	r3, #80	; 0x50
 800acf0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	2b50      	cmp	r3, #80	; 0x50
 800acf6:	d009      	beq.n	800ad0c <xQueueGenericCreateStatic+0xb4>
 800acf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfc:	f383 8811 	msr	BASEPRI, r3
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	61bb      	str	r3, [r7, #24]
 800ad0a:	e7fe      	b.n	800ad0a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad0c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ad12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00d      	beq.n	800ad34 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad20:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ad24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad26:	9300      	str	r3, [sp, #0]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	68b9      	ldr	r1, [r7, #8]
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f000 f844 	bl	800adbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3730      	adds	r7, #48	; 0x30
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b08a      	sub	sp, #40	; 0x28
 800ad42:	af02      	add	r7, sp, #8
 800ad44:	60f8      	str	r0, [r7, #12]
 800ad46:	60b9      	str	r1, [r7, #8]
 800ad48:	4613      	mov	r3, r2
 800ad4a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d109      	bne.n	800ad66 <xQueueGenericCreate+0x28>
 800ad52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad56:	f383 8811 	msr	BASEPRI, r3
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	613b      	str	r3, [r7, #16]
 800ad64:	e7fe      	b.n	800ad64 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d102      	bne.n	800ad72 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	61fb      	str	r3, [r7, #28]
 800ad70:	e004      	b.n	800ad7c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	68ba      	ldr	r2, [r7, #8]
 800ad76:	fb02 f303 	mul.w	r3, r2, r3
 800ad7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	3350      	adds	r3, #80	; 0x50
 800ad80:	4618      	mov	r0, r3
 800ad82:	f002 ff65 	bl	800dc50 <pvPortMalloc>
 800ad86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d011      	beq.n	800adb2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	3350      	adds	r3, #80	; 0x50
 800ad96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ada0:	79fa      	ldrb	r2, [r7, #7]
 800ada2:	69bb      	ldr	r3, [r7, #24]
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	4613      	mov	r3, r2
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	68b9      	ldr	r1, [r7, #8]
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f000 f805 	bl	800adbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800adb2:	69bb      	ldr	r3, [r7, #24]
	}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3720      	adds	r7, #32
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	607a      	str	r2, [r7, #4]
 800adc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d103      	bne.n	800add8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	69ba      	ldr	r2, [r7, #24]
 800add4:	601a      	str	r2, [r3, #0]
 800add6:	e002      	b.n	800adde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	68ba      	ldr	r2, [r7, #8]
 800ade8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800adea:	2101      	movs	r1, #1
 800adec:	69b8      	ldr	r0, [r7, #24]
 800adee:	f7ff fecb 	bl	800ab88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	78fa      	ldrb	r2, [r7, #3]
 800adf6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800adfa:	bf00      	nop
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b082      	sub	sp, #8
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00e      	beq.n	800ae2e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ae22:	2300      	movs	r3, #0
 800ae24:	2200      	movs	r2, #0
 800ae26:	2100      	movs	r1, #0
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 f905 	bl	800b038 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ae2e:	bf00      	nop
 800ae30:	3708      	adds	r7, #8
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b086      	sub	sp, #24
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ae40:	2301      	movs	r3, #1
 800ae42:	617b      	str	r3, [r7, #20]
 800ae44:	2300      	movs	r3, #0
 800ae46:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ae48:	79fb      	ldrb	r3, [r7, #7]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	6939      	ldr	r1, [r7, #16]
 800ae4e:	6978      	ldr	r0, [r7, #20]
 800ae50:	f7ff ff75 	bl	800ad3e <xQueueGenericCreate>
 800ae54:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f7ff ffd3 	bl	800ae02 <prvInitialiseMutex>

		return xNewQueue;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
	}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3718      	adds	r7, #24
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b088      	sub	sp, #32
 800ae6a:	af02      	add	r7, sp, #8
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	6039      	str	r1, [r7, #0]
 800ae70:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ae72:	2301      	movs	r3, #1
 800ae74:	617b      	str	r3, [r7, #20]
 800ae76:	2300      	movs	r3, #0
 800ae78:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ae7a:	79fb      	ldrb	r3, [r7, #7]
 800ae7c:	9300      	str	r3, [sp, #0]
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	2200      	movs	r2, #0
 800ae82:	6939      	ldr	r1, [r7, #16]
 800ae84:	6978      	ldr	r0, [r7, #20]
 800ae86:	f7ff fee7 	bl	800ac58 <xQueueGenericCreateStatic>
 800ae8a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f7ff ffb8 	bl	800ae02 <prvInitialiseMutex>

		return xNewQueue;
 800ae92:	68fb      	ldr	r3, [r7, #12]
	}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3718      	adds	r7, #24
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ae9c:	b590      	push	{r4, r7, lr}
 800ae9e:	b087      	sub	sp, #28
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d109      	bne.n	800aec2 <xQueueGiveMutexRecursive+0x26>
 800aeae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb2:	f383 8811 	msr	BASEPRI, r3
 800aeb6:	f3bf 8f6f 	isb	sy
 800aeba:	f3bf 8f4f 	dsb	sy
 800aebe:	60fb      	str	r3, [r7, #12]
 800aec0:	e7fe      	b.n	800aec0 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	689c      	ldr	r4, [r3, #8]
 800aec6:	f001 fd69 	bl	800c99c <xTaskGetCurrentTaskHandle>
 800aeca:	4603      	mov	r3, r0
 800aecc:	429c      	cmp	r4, r3
 800aece:	d111      	bne.n	800aef4 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	1e5a      	subs	r2, r3, #1
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d105      	bne.n	800aeee <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800aee2:	2300      	movs	r3, #0
 800aee4:	2200      	movs	r2, #0
 800aee6:	2100      	movs	r1, #0
 800aee8:	6938      	ldr	r0, [r7, #16]
 800aeea:	f000 f8a5 	bl	800b038 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800aeee:	2301      	movs	r3, #1
 800aef0:	617b      	str	r3, [r7, #20]
 800aef2:	e001      	b.n	800aef8 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800aef4:	2300      	movs	r3, #0
 800aef6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800aef8:	697b      	ldr	r3, [r7, #20]
	}
 800aefa:	4618      	mov	r0, r3
 800aefc:	371c      	adds	r7, #28
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd90      	pop	{r4, r7, pc}

0800af02 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800af02:	b590      	push	{r4, r7, lr}
 800af04:	b087      	sub	sp, #28
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
 800af0a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d109      	bne.n	800af2a <xQueueTakeMutexRecursive+0x28>
 800af16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1a:	f383 8811 	msr	BASEPRI, r3
 800af1e:	f3bf 8f6f 	isb	sy
 800af22:	f3bf 8f4f 	dsb	sy
 800af26:	60fb      	str	r3, [r7, #12]
 800af28:	e7fe      	b.n	800af28 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	689c      	ldr	r4, [r3, #8]
 800af2e:	f001 fd35 	bl	800c99c <xTaskGetCurrentTaskHandle>
 800af32:	4603      	mov	r3, r0
 800af34:	429c      	cmp	r4, r3
 800af36:	d107      	bne.n	800af48 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	1c5a      	adds	r2, r3, #1
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800af42:	2301      	movs	r3, #1
 800af44:	617b      	str	r3, [r7, #20]
 800af46:	e00c      	b.n	800af62 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800af48:	6839      	ldr	r1, [r7, #0]
 800af4a:	6938      	ldr	r0, [r7, #16]
 800af4c:	f000 fb68 	bl	800b620 <xQueueSemaphoreTake>
 800af50:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d004      	beq.n	800af62 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	1c5a      	adds	r2, r3, #1
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800af62:	697b      	ldr	r3, [r7, #20]
	}
 800af64:	4618      	mov	r0, r3
 800af66:	371c      	adds	r7, #28
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd90      	pop	{r4, r7, pc}

0800af6c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b08a      	sub	sp, #40	; 0x28
 800af70:	af02      	add	r7, sp, #8
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d109      	bne.n	800af92 <xQueueCreateCountingSemaphoreStatic+0x26>
 800af7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af82:	f383 8811 	msr	BASEPRI, r3
 800af86:	f3bf 8f6f 	isb	sy
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	61bb      	str	r3, [r7, #24]
 800af90:	e7fe      	b.n	800af90 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800af92:	68ba      	ldr	r2, [r7, #8]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	429a      	cmp	r2, r3
 800af98:	d909      	bls.n	800afae <xQueueCreateCountingSemaphoreStatic+0x42>
 800af9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9e:	f383 8811 	msr	BASEPRI, r3
 800afa2:	f3bf 8f6f 	isb	sy
 800afa6:	f3bf 8f4f 	dsb	sy
 800afaa:	617b      	str	r3, [r7, #20]
 800afac:	e7fe      	b.n	800afac <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800afae:	2302      	movs	r3, #2
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	2100      	movs	r1, #0
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f7ff fe4d 	bl	800ac58 <xQueueGenericCreateStatic>
 800afbe:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d002      	beq.n	800afcc <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	68ba      	ldr	r2, [r7, #8]
 800afca:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800afcc:	69fb      	ldr	r3, [r7, #28]
	}
 800afce:	4618      	mov	r0, r3
 800afd0:	3720      	adds	r7, #32
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b086      	sub	sp, #24
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
 800afde:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d109      	bne.n	800affa <xQueueCreateCountingSemaphore+0x24>
 800afe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afea:	f383 8811 	msr	BASEPRI, r3
 800afee:	f3bf 8f6f 	isb	sy
 800aff2:	f3bf 8f4f 	dsb	sy
 800aff6:	613b      	str	r3, [r7, #16]
 800aff8:	e7fe      	b.n	800aff8 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800affa:	683a      	ldr	r2, [r7, #0]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	429a      	cmp	r2, r3
 800b000:	d909      	bls.n	800b016 <xQueueCreateCountingSemaphore+0x40>
 800b002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b006:	f383 8811 	msr	BASEPRI, r3
 800b00a:	f3bf 8f6f 	isb	sy
 800b00e:	f3bf 8f4f 	dsb	sy
 800b012:	60fb      	str	r3, [r7, #12]
 800b014:	e7fe      	b.n	800b014 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b016:	2202      	movs	r2, #2
 800b018:	2100      	movs	r1, #0
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f7ff fe8f 	bl	800ad3e <xQueueGenericCreate>
 800b020:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d002      	beq.n	800b02e <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	683a      	ldr	r2, [r7, #0]
 800b02c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b02e:	697b      	ldr	r3, [r7, #20]
	}
 800b030:	4618      	mov	r0, r3
 800b032:	3718      	adds	r7, #24
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b08e      	sub	sp, #56	; 0x38
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
 800b044:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b046:	2300      	movs	r3, #0
 800b048:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b050:	2b00      	cmp	r3, #0
 800b052:	d109      	bne.n	800b068 <xQueueGenericSend+0x30>
 800b054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b058:	f383 8811 	msr	BASEPRI, r3
 800b05c:	f3bf 8f6f 	isb	sy
 800b060:	f3bf 8f4f 	dsb	sy
 800b064:	62bb      	str	r3, [r7, #40]	; 0x28
 800b066:	e7fe      	b.n	800b066 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d103      	bne.n	800b076 <xQueueGenericSend+0x3e>
 800b06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b072:	2b00      	cmp	r3, #0
 800b074:	d101      	bne.n	800b07a <xQueueGenericSend+0x42>
 800b076:	2301      	movs	r3, #1
 800b078:	e000      	b.n	800b07c <xQueueGenericSend+0x44>
 800b07a:	2300      	movs	r3, #0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d109      	bne.n	800b094 <xQueueGenericSend+0x5c>
 800b080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b084:	f383 8811 	msr	BASEPRI, r3
 800b088:	f3bf 8f6f 	isb	sy
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	627b      	str	r3, [r7, #36]	; 0x24
 800b092:	e7fe      	b.n	800b092 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	2b02      	cmp	r3, #2
 800b098:	d103      	bne.n	800b0a2 <xQueueGenericSend+0x6a>
 800b09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d101      	bne.n	800b0a6 <xQueueGenericSend+0x6e>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e000      	b.n	800b0a8 <xQueueGenericSend+0x70>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d109      	bne.n	800b0c0 <xQueueGenericSend+0x88>
 800b0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b0:	f383 8811 	msr	BASEPRI, r3
 800b0b4:	f3bf 8f6f 	isb	sy
 800b0b8:	f3bf 8f4f 	dsb	sy
 800b0bc:	623b      	str	r3, [r7, #32]
 800b0be:	e7fe      	b.n	800b0be <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0c0:	f001 fc7c 	bl	800c9bc <xTaskGetSchedulerState>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d102      	bne.n	800b0d0 <xQueueGenericSend+0x98>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d101      	bne.n	800b0d4 <xQueueGenericSend+0x9c>
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	e000      	b.n	800b0d6 <xQueueGenericSend+0x9e>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d109      	bne.n	800b0ee <xQueueGenericSend+0xb6>
 800b0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0de:	f383 8811 	msr	BASEPRI, r3
 800b0e2:	f3bf 8f6f 	isb	sy
 800b0e6:	f3bf 8f4f 	dsb	sy
 800b0ea:	61fb      	str	r3, [r7, #28]
 800b0ec:	e7fe      	b.n	800b0ec <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0ee:	f002 fc95 	bl	800da1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d302      	bcc.n	800b104 <xQueueGenericSend+0xcc>
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	2b02      	cmp	r3, #2
 800b102:	d129      	bne.n	800b158 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b104:	683a      	ldr	r2, [r7, #0]
 800b106:	68b9      	ldr	r1, [r7, #8]
 800b108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b10a:	f000 fc48 	bl	800b99e <prvCopyDataToQueue>
 800b10e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b114:	2b00      	cmp	r3, #0
 800b116:	d010      	beq.n	800b13a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11a:	3324      	adds	r3, #36	; 0x24
 800b11c:	4618      	mov	r0, r3
 800b11e:	f001 fa5f 	bl	800c5e0 <xTaskRemoveFromEventList>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d013      	beq.n	800b150 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b128:	4b3f      	ldr	r3, [pc, #252]	; (800b228 <xQueueGenericSend+0x1f0>)
 800b12a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b12e:	601a      	str	r2, [r3, #0]
 800b130:	f3bf 8f4f 	dsb	sy
 800b134:	f3bf 8f6f 	isb	sy
 800b138:	e00a      	b.n	800b150 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d007      	beq.n	800b150 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b140:	4b39      	ldr	r3, [pc, #228]	; (800b228 <xQueueGenericSend+0x1f0>)
 800b142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b146:	601a      	str	r2, [r3, #0]
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b150:	f002 fc92 	bl	800da78 <vPortExitCritical>
				return pdPASS;
 800b154:	2301      	movs	r3, #1
 800b156:	e063      	b.n	800b220 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d103      	bne.n	800b166 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b15e:	f002 fc8b 	bl	800da78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b162:	2300      	movs	r3, #0
 800b164:	e05c      	b.n	800b220 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d106      	bne.n	800b17a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b16c:	f107 0314 	add.w	r3, r7, #20
 800b170:	4618      	mov	r0, r3
 800b172:	f001 fa99 	bl	800c6a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b176:	2301      	movs	r3, #1
 800b178:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b17a:	f002 fc7d 	bl	800da78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b17e:	f000 ffdb 	bl	800c138 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b182:	f002 fc4b 	bl	800da1c <vPortEnterCritical>
 800b186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b18c:	b25b      	sxtb	r3, r3
 800b18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b192:	d103      	bne.n	800b19c <xQueueGenericSend+0x164>
 800b194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b196:	2200      	movs	r2, #0
 800b198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1a2:	b25b      	sxtb	r3, r3
 800b1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a8:	d103      	bne.n	800b1b2 <xQueueGenericSend+0x17a>
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1b2:	f002 fc61 	bl	800da78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1b6:	1d3a      	adds	r2, r7, #4
 800b1b8:	f107 0314 	add.w	r3, r7, #20
 800b1bc:	4611      	mov	r1, r2
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f001 fa88 	bl	800c6d4 <xTaskCheckForTimeOut>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d124      	bne.n	800b214 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b1ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1cc:	f000 fcdf 	bl	800bb8e <prvIsQueueFull>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d018      	beq.n	800b208 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d8:	3310      	adds	r3, #16
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	4611      	mov	r1, r2
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f001 f9b0 	bl	800c544 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b1e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1e6:	f000 fc6a 	bl	800babe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b1ea:	f000 ffeb 	bl	800c1c4 <xTaskResumeAll>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f47f af7c 	bne.w	800b0ee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800b1f6:	4b0c      	ldr	r3, [pc, #48]	; (800b228 <xQueueGenericSend+0x1f0>)
 800b1f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1fc:	601a      	str	r2, [r3, #0]
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	e772      	b.n	800b0ee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b20a:	f000 fc58 	bl	800babe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b20e:	f000 ffd9 	bl	800c1c4 <xTaskResumeAll>
 800b212:	e76c      	b.n	800b0ee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b216:	f000 fc52 	bl	800babe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b21a:	f000 ffd3 	bl	800c1c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b21e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b220:	4618      	mov	r0, r3
 800b222:	3738      	adds	r7, #56	; 0x38
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	e000ed04 	.word	0xe000ed04

0800b22c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b08e      	sub	sp, #56	; 0x38
 800b230:	af00      	add	r7, sp, #0
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	60b9      	str	r1, [r7, #8]
 800b236:	607a      	str	r2, [r7, #4]
 800b238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b240:	2b00      	cmp	r3, #0
 800b242:	d109      	bne.n	800b258 <xQueueGenericSendFromISR+0x2c>
 800b244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b248:	f383 8811 	msr	BASEPRI, r3
 800b24c:	f3bf 8f6f 	isb	sy
 800b250:	f3bf 8f4f 	dsb	sy
 800b254:	627b      	str	r3, [r7, #36]	; 0x24
 800b256:	e7fe      	b.n	800b256 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d103      	bne.n	800b266 <xQueueGenericSendFromISR+0x3a>
 800b25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b262:	2b00      	cmp	r3, #0
 800b264:	d101      	bne.n	800b26a <xQueueGenericSendFromISR+0x3e>
 800b266:	2301      	movs	r3, #1
 800b268:	e000      	b.n	800b26c <xQueueGenericSendFromISR+0x40>
 800b26a:	2300      	movs	r3, #0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d109      	bne.n	800b284 <xQueueGenericSendFromISR+0x58>
 800b270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	623b      	str	r3, [r7, #32]
 800b282:	e7fe      	b.n	800b282 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	2b02      	cmp	r3, #2
 800b288:	d103      	bne.n	800b292 <xQueueGenericSendFromISR+0x66>
 800b28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b28e:	2b01      	cmp	r3, #1
 800b290:	d101      	bne.n	800b296 <xQueueGenericSendFromISR+0x6a>
 800b292:	2301      	movs	r3, #1
 800b294:	e000      	b.n	800b298 <xQueueGenericSendFromISR+0x6c>
 800b296:	2300      	movs	r3, #0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d109      	bne.n	800b2b0 <xQueueGenericSendFromISR+0x84>
 800b29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a0:	f383 8811 	msr	BASEPRI, r3
 800b2a4:	f3bf 8f6f 	isb	sy
 800b2a8:	f3bf 8f4f 	dsb	sy
 800b2ac:	61fb      	str	r3, [r7, #28]
 800b2ae:	e7fe      	b.n	800b2ae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b2b0:	f002 fc90 	bl	800dbd4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b2b4:	f3ef 8211 	mrs	r2, BASEPRI
 800b2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2bc:	f383 8811 	msr	BASEPRI, r3
 800b2c0:	f3bf 8f6f 	isb	sy
 800b2c4:	f3bf 8f4f 	dsb	sy
 800b2c8:	61ba      	str	r2, [r7, #24]
 800b2ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b2cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d302      	bcc.n	800b2e2 <xQueueGenericSendFromISR+0xb6>
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	2b02      	cmp	r3, #2
 800b2e0:	d12c      	bne.n	800b33c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b2ec:	683a      	ldr	r2, [r7, #0]
 800b2ee:	68b9      	ldr	r1, [r7, #8]
 800b2f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2f2:	f000 fb54 	bl	800b99e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b2f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2fe:	d112      	bne.n	800b326 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b304:	2b00      	cmp	r3, #0
 800b306:	d016      	beq.n	800b336 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30a:	3324      	adds	r3, #36	; 0x24
 800b30c:	4618      	mov	r0, r3
 800b30e:	f001 f967 	bl	800c5e0 <xTaskRemoveFromEventList>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d00e      	beq.n	800b336 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00b      	beq.n	800b336 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2201      	movs	r2, #1
 800b322:	601a      	str	r2, [r3, #0]
 800b324:	e007      	b.n	800b336 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b326:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b32a:	3301      	adds	r3, #1
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	b25a      	sxtb	r2, r3
 800b330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b336:	2301      	movs	r3, #1
 800b338:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b33a:	e001      	b.n	800b340 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b33c:	2300      	movs	r3, #0
 800b33e:	637b      	str	r3, [r7, #52]	; 0x34
 800b340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b342:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3738      	adds	r7, #56	; 0x38
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b08e      	sub	sp, #56	; 0x38
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b364:	2b00      	cmp	r3, #0
 800b366:	d109      	bne.n	800b37c <xQueueGiveFromISR+0x28>
	__asm volatile
 800b368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36c:	f383 8811 	msr	BASEPRI, r3
 800b370:	f3bf 8f6f 	isb	sy
 800b374:	f3bf 8f4f 	dsb	sy
 800b378:	623b      	str	r3, [r7, #32]
 800b37a:	e7fe      	b.n	800b37a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b380:	2b00      	cmp	r3, #0
 800b382:	d009      	beq.n	800b398 <xQueueGiveFromISR+0x44>
 800b384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b388:	f383 8811 	msr	BASEPRI, r3
 800b38c:	f3bf 8f6f 	isb	sy
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	61fb      	str	r3, [r7, #28]
 800b396:	e7fe      	b.n	800b396 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d103      	bne.n	800b3a8 <xQueueGiveFromISR+0x54>
 800b3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d101      	bne.n	800b3ac <xQueueGiveFromISR+0x58>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e000      	b.n	800b3ae <xQueueGiveFromISR+0x5a>
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d109      	bne.n	800b3c6 <xQueueGiveFromISR+0x72>
 800b3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b6:	f383 8811 	msr	BASEPRI, r3
 800b3ba:	f3bf 8f6f 	isb	sy
 800b3be:	f3bf 8f4f 	dsb	sy
 800b3c2:	61bb      	str	r3, [r7, #24]
 800b3c4:	e7fe      	b.n	800b3c4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b3c6:	f002 fc05 	bl	800dbd4 <vPortValidateInterruptPriority>
	__asm volatile
 800b3ca:	f3ef 8211 	mrs	r2, BASEPRI
 800b3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d2:	f383 8811 	msr	BASEPRI, r3
 800b3d6:	f3bf 8f6f 	isb	sy
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	617a      	str	r2, [r7, #20]
 800b3e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b3e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d22b      	bcs.n	800b44e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b402:	1c5a      	adds	r2, r3, #1
 800b404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b406:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b408:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b410:	d112      	bne.n	800b438 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b416:	2b00      	cmp	r3, #0
 800b418:	d016      	beq.n	800b448 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41c:	3324      	adds	r3, #36	; 0x24
 800b41e:	4618      	mov	r0, r3
 800b420:	f001 f8de 	bl	800c5e0 <xTaskRemoveFromEventList>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00e      	beq.n	800b448 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00b      	beq.n	800b448 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	2201      	movs	r2, #1
 800b434:	601a      	str	r2, [r3, #0]
 800b436:	e007      	b.n	800b448 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b43c:	3301      	adds	r3, #1
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	b25a      	sxtb	r2, r3
 800b442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b448:	2301      	movs	r3, #1
 800b44a:	637b      	str	r3, [r7, #52]	; 0x34
 800b44c:	e001      	b.n	800b452 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b44e:	2300      	movs	r3, #0
 800b450:	637b      	str	r3, [r7, #52]	; 0x34
 800b452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b454:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3738      	adds	r7, #56	; 0x38
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
	...

0800b468 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b08c      	sub	sp, #48	; 0x30
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b474:	2300      	movs	r3, #0
 800b476:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d109      	bne.n	800b496 <xQueueReceive+0x2e>
	__asm volatile
 800b482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b486:	f383 8811 	msr	BASEPRI, r3
 800b48a:	f3bf 8f6f 	isb	sy
 800b48e:	f3bf 8f4f 	dsb	sy
 800b492:	623b      	str	r3, [r7, #32]
 800b494:	e7fe      	b.n	800b494 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d103      	bne.n	800b4a4 <xQueueReceive+0x3c>
 800b49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d101      	bne.n	800b4a8 <xQueueReceive+0x40>
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	e000      	b.n	800b4aa <xQueueReceive+0x42>
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d109      	bne.n	800b4c2 <xQueueReceive+0x5a>
 800b4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b2:	f383 8811 	msr	BASEPRI, r3
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	61fb      	str	r3, [r7, #28]
 800b4c0:	e7fe      	b.n	800b4c0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4c2:	f001 fa7b 	bl	800c9bc <xTaskGetSchedulerState>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d102      	bne.n	800b4d2 <xQueueReceive+0x6a>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d101      	bne.n	800b4d6 <xQueueReceive+0x6e>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e000      	b.n	800b4d8 <xQueueReceive+0x70>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d109      	bne.n	800b4f0 <xQueueReceive+0x88>
 800b4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e0:	f383 8811 	msr	BASEPRI, r3
 800b4e4:	f3bf 8f6f 	isb	sy
 800b4e8:	f3bf 8f4f 	dsb	sy
 800b4ec:	61bb      	str	r3, [r7, #24]
 800b4ee:	e7fe      	b.n	800b4ee <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4f0:	f002 fa94 	bl	800da1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d01f      	beq.n	800b540 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b500:	68b9      	ldr	r1, [r7, #8]
 800b502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b504:	f000 fab5 	bl	800ba72 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50a:	1e5a      	subs	r2, r3, #1
 800b50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b512:	691b      	ldr	r3, [r3, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d00f      	beq.n	800b538 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51a:	3310      	adds	r3, #16
 800b51c:	4618      	mov	r0, r3
 800b51e:	f001 f85f 	bl	800c5e0 <xTaskRemoveFromEventList>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d007      	beq.n	800b538 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b528:	4b3c      	ldr	r3, [pc, #240]	; (800b61c <xQueueReceive+0x1b4>)
 800b52a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b52e:	601a      	str	r2, [r3, #0]
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b538:	f002 fa9e 	bl	800da78 <vPortExitCritical>
				return pdPASS;
 800b53c:	2301      	movs	r3, #1
 800b53e:	e069      	b.n	800b614 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d103      	bne.n	800b54e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b546:	f002 fa97 	bl	800da78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b54a:	2300      	movs	r3, #0
 800b54c:	e062      	b.n	800b614 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b550:	2b00      	cmp	r3, #0
 800b552:	d106      	bne.n	800b562 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b554:	f107 0310 	add.w	r3, r7, #16
 800b558:	4618      	mov	r0, r3
 800b55a:	f001 f8a5 	bl	800c6a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b55e:	2301      	movs	r3, #1
 800b560:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b562:	f002 fa89 	bl	800da78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b566:	f000 fde7 	bl	800c138 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b56a:	f002 fa57 	bl	800da1c <vPortEnterCritical>
 800b56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b570:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b574:	b25b      	sxtb	r3, r3
 800b576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b57a:	d103      	bne.n	800b584 <xQueueReceive+0x11c>
 800b57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57e:	2200      	movs	r2, #0
 800b580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b586:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b58a:	b25b      	sxtb	r3, r3
 800b58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b590:	d103      	bne.n	800b59a <xQueueReceive+0x132>
 800b592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b594:	2200      	movs	r2, #0
 800b596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b59a:	f002 fa6d 	bl	800da78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b59e:	1d3a      	adds	r2, r7, #4
 800b5a0:	f107 0310 	add.w	r3, r7, #16
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f001 f894 	bl	800c6d4 <xTaskCheckForTimeOut>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d123      	bne.n	800b5fa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5b4:	f000 fad5 	bl	800bb62 <prvIsQueueEmpty>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d017      	beq.n	800b5ee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c0:	3324      	adds	r3, #36	; 0x24
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	4611      	mov	r1, r2
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f000 ffbc 	bl	800c544 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b5cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5ce:	f000 fa76 	bl	800babe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b5d2:	f000 fdf7 	bl	800c1c4 <xTaskResumeAll>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d189      	bne.n	800b4f0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800b5dc:	4b0f      	ldr	r3, [pc, #60]	; (800b61c <xQueueReceive+0x1b4>)
 800b5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5e2:	601a      	str	r2, [r3, #0]
 800b5e4:	f3bf 8f4f 	dsb	sy
 800b5e8:	f3bf 8f6f 	isb	sy
 800b5ec:	e780      	b.n	800b4f0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b5ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5f0:	f000 fa65 	bl	800babe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5f4:	f000 fde6 	bl	800c1c4 <xTaskResumeAll>
 800b5f8:	e77a      	b.n	800b4f0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b5fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5fc:	f000 fa5f 	bl	800babe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b600:	f000 fde0 	bl	800c1c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b606:	f000 faac 	bl	800bb62 <prvIsQueueEmpty>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f43f af6f 	beq.w	800b4f0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b612:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b614:	4618      	mov	r0, r3
 800b616:	3730      	adds	r7, #48	; 0x30
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	e000ed04 	.word	0xe000ed04

0800b620 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b08e      	sub	sp, #56	; 0x38
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b62a:	2300      	movs	r3, #0
 800b62c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b632:	2300      	movs	r3, #0
 800b634:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d109      	bne.n	800b650 <xQueueSemaphoreTake+0x30>
 800b63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b640:	f383 8811 	msr	BASEPRI, r3
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	623b      	str	r3, [r7, #32]
 800b64e:	e7fe      	b.n	800b64e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b654:	2b00      	cmp	r3, #0
 800b656:	d009      	beq.n	800b66c <xQueueSemaphoreTake+0x4c>
 800b658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65c:	f383 8811 	msr	BASEPRI, r3
 800b660:	f3bf 8f6f 	isb	sy
 800b664:	f3bf 8f4f 	dsb	sy
 800b668:	61fb      	str	r3, [r7, #28]
 800b66a:	e7fe      	b.n	800b66a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b66c:	f001 f9a6 	bl	800c9bc <xTaskGetSchedulerState>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d102      	bne.n	800b67c <xQueueSemaphoreTake+0x5c>
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d101      	bne.n	800b680 <xQueueSemaphoreTake+0x60>
 800b67c:	2301      	movs	r3, #1
 800b67e:	e000      	b.n	800b682 <xQueueSemaphoreTake+0x62>
 800b680:	2300      	movs	r3, #0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d109      	bne.n	800b69a <xQueueSemaphoreTake+0x7a>
 800b686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68a:	f383 8811 	msr	BASEPRI, r3
 800b68e:	f3bf 8f6f 	isb	sy
 800b692:	f3bf 8f4f 	dsb	sy
 800b696:	61bb      	str	r3, [r7, #24]
 800b698:	e7fe      	b.n	800b698 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b69a:	f002 f9bf 	bl	800da1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d024      	beq.n	800b6f4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ac:	1e5a      	subs	r2, r3, #1
 800b6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d104      	bne.n	800b6c4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b6ba:	f001 faf1 	bl	800cca0 <pvTaskIncrementMutexHeldCount>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c6:	691b      	ldr	r3, [r3, #16]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00f      	beq.n	800b6ec <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ce:	3310      	adds	r3, #16
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f000 ff85 	bl	800c5e0 <xTaskRemoveFromEventList>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d007      	beq.n	800b6ec <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b6dc:	4b53      	ldr	r3, [pc, #332]	; (800b82c <xQueueSemaphoreTake+0x20c>)
 800b6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6e2:	601a      	str	r2, [r3, #0]
 800b6e4:	f3bf 8f4f 	dsb	sy
 800b6e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b6ec:	f002 f9c4 	bl	800da78 <vPortExitCritical>
				return pdPASS;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e096      	b.n	800b822 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d110      	bne.n	800b71c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d009      	beq.n	800b714 <xQueueSemaphoreTake+0xf4>
 800b700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b704:	f383 8811 	msr	BASEPRI, r3
 800b708:	f3bf 8f6f 	isb	sy
 800b70c:	f3bf 8f4f 	dsb	sy
 800b710:	617b      	str	r3, [r7, #20]
 800b712:	e7fe      	b.n	800b712 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b714:	f002 f9b0 	bl	800da78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b718:	2300      	movs	r3, #0
 800b71a:	e082      	b.n	800b822 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d106      	bne.n	800b730 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b722:	f107 030c 	add.w	r3, r7, #12
 800b726:	4618      	mov	r0, r3
 800b728:	f000 ffbe 	bl	800c6a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b72c:	2301      	movs	r3, #1
 800b72e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b730:	f002 f9a2 	bl	800da78 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b734:	f000 fd00 	bl	800c138 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b738:	f002 f970 	bl	800da1c <vPortEnterCritical>
 800b73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b73e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b742:	b25b      	sxtb	r3, r3
 800b744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b748:	d103      	bne.n	800b752 <xQueueSemaphoreTake+0x132>
 800b74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b74c:	2200      	movs	r2, #0
 800b74e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b758:	b25b      	sxtb	r3, r3
 800b75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b75e:	d103      	bne.n	800b768 <xQueueSemaphoreTake+0x148>
 800b760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b762:	2200      	movs	r2, #0
 800b764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b768:	f002 f986 	bl	800da78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b76c:	463a      	mov	r2, r7
 800b76e:	f107 030c 	add.w	r3, r7, #12
 800b772:	4611      	mov	r1, r2
 800b774:	4618      	mov	r0, r3
 800b776:	f000 ffad 	bl	800c6d4 <xTaskCheckForTimeOut>
 800b77a:	4603      	mov	r3, r0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d132      	bne.n	800b7e6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b780:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b782:	f000 f9ee 	bl	800bb62 <prvIsQueueEmpty>
 800b786:	4603      	mov	r3, r0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d026      	beq.n	800b7da <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d109      	bne.n	800b7a8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800b794:	f002 f942 	bl	800da1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	4618      	mov	r0, r3
 800b79e:	f001 f92b 	bl	800c9f8 <xTaskPriorityInherit>
 800b7a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b7a4:	f002 f968 	bl	800da78 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7aa:	3324      	adds	r3, #36	; 0x24
 800b7ac:	683a      	ldr	r2, [r7, #0]
 800b7ae:	4611      	mov	r1, r2
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f000 fec7 	bl	800c544 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b7b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7b8:	f000 f981 	bl	800babe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b7bc:	f000 fd02 	bl	800c1c4 <xTaskResumeAll>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	f47f af69 	bne.w	800b69a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800b7c8:	4b18      	ldr	r3, [pc, #96]	; (800b82c <xQueueSemaphoreTake+0x20c>)
 800b7ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7ce:	601a      	str	r2, [r3, #0]
 800b7d0:	f3bf 8f4f 	dsb	sy
 800b7d4:	f3bf 8f6f 	isb	sy
 800b7d8:	e75f      	b.n	800b69a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b7da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7dc:	f000 f96f 	bl	800babe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b7e0:	f000 fcf0 	bl	800c1c4 <xTaskResumeAll>
 800b7e4:	e759      	b.n	800b69a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b7e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7e8:	f000 f969 	bl	800babe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7ec:	f000 fcea 	bl	800c1c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b7f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7f2:	f000 f9b6 	bl	800bb62 <prvIsQueueEmpty>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	f43f af4e 	beq.w	800b69a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00d      	beq.n	800b820 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800b804:	f002 f90a 	bl	800da1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b808:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b80a:	f000 f8b0 	bl	800b96e <prvGetDisinheritPriorityAfterTimeout>
 800b80e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b816:	4618      	mov	r0, r3
 800b818:	f001 f9c2 	bl	800cba0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b81c:	f002 f92c 	bl	800da78 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b820:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b822:	4618      	mov	r0, r3
 800b824:	3738      	adds	r7, #56	; 0x38
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	e000ed04 	.word	0xe000ed04

0800b830 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b08e      	sub	sp, #56	; 0x38
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b842:	2b00      	cmp	r3, #0
 800b844:	d109      	bne.n	800b85a <xQueueReceiveFromISR+0x2a>
 800b846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84a:	f383 8811 	msr	BASEPRI, r3
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	f3bf 8f4f 	dsb	sy
 800b856:	623b      	str	r3, [r7, #32]
 800b858:	e7fe      	b.n	800b858 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d103      	bne.n	800b868 <xQueueReceiveFromISR+0x38>
 800b860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b864:	2b00      	cmp	r3, #0
 800b866:	d101      	bne.n	800b86c <xQueueReceiveFromISR+0x3c>
 800b868:	2301      	movs	r3, #1
 800b86a:	e000      	b.n	800b86e <xQueueReceiveFromISR+0x3e>
 800b86c:	2300      	movs	r3, #0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d109      	bne.n	800b886 <xQueueReceiveFromISR+0x56>
 800b872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b876:	f383 8811 	msr	BASEPRI, r3
 800b87a:	f3bf 8f6f 	isb	sy
 800b87e:	f3bf 8f4f 	dsb	sy
 800b882:	61fb      	str	r3, [r7, #28]
 800b884:	e7fe      	b.n	800b884 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b886:	f002 f9a5 	bl	800dbd4 <vPortValidateInterruptPriority>
	__asm volatile
 800b88a:	f3ef 8211 	mrs	r2, BASEPRI
 800b88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b892:	f383 8811 	msr	BASEPRI, r3
 800b896:	f3bf 8f6f 	isb	sy
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	61ba      	str	r2, [r7, #24]
 800b8a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b8a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b8a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d02f      	beq.n	800b912 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b8bc:	68b9      	ldr	r1, [r7, #8]
 800b8be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8c0:	f000 f8d7 	bl	800ba72 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c6:	1e5a      	subs	r2, r3, #1
 800b8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b8cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8d4:	d112      	bne.n	800b8fc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d016      	beq.n	800b90c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e0:	3310      	adds	r3, #16
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f000 fe7c 	bl	800c5e0 <xTaskRemoveFromEventList>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00e      	beq.n	800b90c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00b      	beq.n	800b90c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	601a      	str	r2, [r3, #0]
 800b8fa:	e007      	b.n	800b90c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b8fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b900:	3301      	adds	r3, #1
 800b902:	b2db      	uxtb	r3, r3
 800b904:	b25a      	sxtb	r2, r3
 800b906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b90c:	2301      	movs	r3, #1
 800b90e:	637b      	str	r3, [r7, #52]	; 0x34
 800b910:	e001      	b.n	800b916 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800b912:	2300      	movs	r3, #0
 800b914:	637b      	str	r3, [r7, #52]	; 0x34
 800b916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b918:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b922:	4618      	mov	r0, r3
 800b924:	3738      	adds	r7, #56	; 0x38
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b084      	sub	sp, #16
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d109      	bne.n	800b950 <vQueueDelete+0x26>
	__asm volatile
 800b93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b940:	f383 8811 	msr	BASEPRI, r3
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	60bb      	str	r3, [r7, #8]
 800b94e:	e7fe      	b.n	800b94e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f000 f95d 	bl	800bc10 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d102      	bne.n	800b966 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f002 fa37 	bl	800ddd4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b966:	bf00      	nop
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b96e:	b480      	push	{r7}
 800b970:	b085      	sub	sp, #20
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d006      	beq.n	800b98c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b988:	60fb      	str	r3, [r7, #12]
 800b98a:	e001      	b.n	800b990 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b98c:	2300      	movs	r3, #0
 800b98e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b990:	68fb      	ldr	r3, [r7, #12]
	}
 800b992:	4618      	mov	r0, r3
 800b994:	3714      	adds	r7, #20
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b99e:	b580      	push	{r7, lr}
 800b9a0:	b086      	sub	sp, #24
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	60f8      	str	r0, [r7, #12]
 800b9a6:	60b9      	str	r1, [r7, #8]
 800b9a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d10d      	bne.n	800b9d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d14d      	bne.n	800ba60 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	689b      	ldr	r3, [r3, #8]
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f001 f87d 	bl	800cac8 <xTaskPriorityDisinherit>
 800b9ce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	609a      	str	r2, [r3, #8]
 800b9d6:	e043      	b.n	800ba60 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d119      	bne.n	800ba12 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6858      	ldr	r0, [r3, #4]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	68b9      	ldr	r1, [r7, #8]
 800b9ea:	f003 fdb9 	bl	800f560 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	685a      	ldr	r2, [r3, #4]
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f6:	441a      	add	r2, r3
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	685a      	ldr	r2, [r3, #4]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d32b      	bcc.n	800ba60 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	605a      	str	r2, [r3, #4]
 800ba10:	e026      	b.n	800ba60 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	68d8      	ldr	r0, [r3, #12]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	68b9      	ldr	r1, [r7, #8]
 800ba1e:	f003 fd9f 	bl	800f560 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	68da      	ldr	r2, [r3, #12]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba2a:	425b      	negs	r3, r3
 800ba2c:	441a      	add	r2, r3
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	68da      	ldr	r2, [r3, #12]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d207      	bcs.n	800ba4e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	689a      	ldr	r2, [r3, #8]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba46:	425b      	negs	r3, r3
 800ba48:	441a      	add	r2, r3
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2b02      	cmp	r3, #2
 800ba52:	d105      	bne.n	800ba60 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d002      	beq.n	800ba60 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	3b01      	subs	r3, #1
 800ba5e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	1c5a      	adds	r2, r3, #1
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ba68:	697b      	ldr	r3, [r7, #20]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3718      	adds	r7, #24
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b082      	sub	sp, #8
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d018      	beq.n	800bab6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	68da      	ldr	r2, [r3, #12]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba8c:	441a      	add	r2, r3
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	68da      	ldr	r2, [r3, #12]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d303      	bcc.n	800baa6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	68d9      	ldr	r1, [r3, #12]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baae:	461a      	mov	r2, r3
 800bab0:	6838      	ldr	r0, [r7, #0]
 800bab2:	f003 fd55 	bl	800f560 <memcpy>
	}
}
 800bab6:	bf00      	nop
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b084      	sub	sp, #16
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bac6:	f001 ffa9 	bl	800da1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bad0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bad2:	e011      	b.n	800baf8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d012      	beq.n	800bb02 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	3324      	adds	r3, #36	; 0x24
 800bae0:	4618      	mov	r0, r3
 800bae2:	f000 fd7d 	bl	800c5e0 <xTaskRemoveFromEventList>
 800bae6:	4603      	mov	r3, r0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d001      	beq.n	800baf0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800baec:	f000 fe52 	bl	800c794 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
 800baf2:	3b01      	subs	r3, #1
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800baf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	dce9      	bgt.n	800bad4 <prvUnlockQueue+0x16>
 800bb00:	e000      	b.n	800bb04 <prvUnlockQueue+0x46>
					break;
 800bb02:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	22ff      	movs	r2, #255	; 0xff
 800bb08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bb0c:	f001 ffb4 	bl	800da78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bb10:	f001 ff84 	bl	800da1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb1a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb1c:	e011      	b.n	800bb42 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	691b      	ldr	r3, [r3, #16]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d012      	beq.n	800bb4c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	3310      	adds	r3, #16
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f000 fd58 	bl	800c5e0 <xTaskRemoveFromEventList>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d001      	beq.n	800bb3a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bb36:	f000 fe2d 	bl	800c794 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bb3a:	7bbb      	ldrb	r3, [r7, #14]
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	dce9      	bgt.n	800bb1e <prvUnlockQueue+0x60>
 800bb4a:	e000      	b.n	800bb4e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bb4c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	22ff      	movs	r2, #255	; 0xff
 800bb52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bb56:	f001 ff8f 	bl	800da78 <vPortExitCritical>
}
 800bb5a:	bf00      	nop
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b084      	sub	sp, #16
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb6a:	f001 ff57 	bl	800da1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d102      	bne.n	800bb7c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bb76:	2301      	movs	r3, #1
 800bb78:	60fb      	str	r3, [r7, #12]
 800bb7a:	e001      	b.n	800bb80 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb80:	f001 ff7a 	bl	800da78 <vPortExitCritical>

	return xReturn;
 800bb84:	68fb      	ldr	r3, [r7, #12]
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3710      	adds	r7, #16
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}

0800bb8e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b084      	sub	sp, #16
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb96:	f001 ff41 	bl	800da1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d102      	bne.n	800bbac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bba6:	2301      	movs	r3, #1
 800bba8:	60fb      	str	r3, [r7, #12]
 800bbaa:	e001      	b.n	800bbb0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bbac:	2300      	movs	r3, #0
 800bbae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bbb0:	f001 ff62 	bl	800da78 <vPortExitCritical>

	return xReturn;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
	...

0800bbc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bbca:	2300      	movs	r3, #0
 800bbcc:	60fb      	str	r3, [r7, #12]
 800bbce:	e014      	b.n	800bbfa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bbd0:	4a0e      	ldr	r2, [pc, #56]	; (800bc0c <vQueueAddToRegistry+0x4c>)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d10b      	bne.n	800bbf4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bbdc:	490b      	ldr	r1, [pc, #44]	; (800bc0c <vQueueAddToRegistry+0x4c>)
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	683a      	ldr	r2, [r7, #0]
 800bbe2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bbe6:	4a09      	ldr	r2, [pc, #36]	; (800bc0c <vQueueAddToRegistry+0x4c>)
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	00db      	lsls	r3, r3, #3
 800bbec:	4413      	add	r3, r2
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bbf2:	e005      	b.n	800bc00 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	60fb      	str	r3, [r7, #12]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2b07      	cmp	r3, #7
 800bbfe:	d9e7      	bls.n	800bbd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bc00:	bf00      	nop
 800bc02:	3714      	adds	r7, #20
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr
 800bc0c:	20005dd0 	.word	0x20005dd0

0800bc10 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc18:	2300      	movs	r3, #0
 800bc1a:	60fb      	str	r3, [r7, #12]
 800bc1c:	e016      	b.n	800bc4c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bc1e:	4a10      	ldr	r2, [pc, #64]	; (800bc60 <vQueueUnregisterQueue+0x50>)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	00db      	lsls	r3, r3, #3
 800bc24:	4413      	add	r3, r2
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d10b      	bne.n	800bc46 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bc2e:	4a0c      	ldr	r2, [pc, #48]	; (800bc60 <vQueueUnregisterQueue+0x50>)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2100      	movs	r1, #0
 800bc34:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bc38:	4a09      	ldr	r2, [pc, #36]	; (800bc60 <vQueueUnregisterQueue+0x50>)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	00db      	lsls	r3, r3, #3
 800bc3e:	4413      	add	r3, r2
 800bc40:	2200      	movs	r2, #0
 800bc42:	605a      	str	r2, [r3, #4]
				break;
 800bc44:	e005      	b.n	800bc52 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	60fb      	str	r3, [r7, #12]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2b07      	cmp	r3, #7
 800bc50:	d9e5      	bls.n	800bc1e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bc52:	bf00      	nop
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	20005dd0 	.word	0x20005dd0

0800bc64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b086      	sub	sp, #24
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bc74:	f001 fed2 	bl	800da1c <vPortEnterCritical>
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc7e:	b25b      	sxtb	r3, r3
 800bc80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc84:	d103      	bne.n	800bc8e <vQueueWaitForMessageRestricted+0x2a>
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc94:	b25b      	sxtb	r3, r3
 800bc96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc9a:	d103      	bne.n	800bca4 <vQueueWaitForMessageRestricted+0x40>
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bca4:	f001 fee8 	bl	800da78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d106      	bne.n	800bcbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	3324      	adds	r3, #36	; 0x24
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	68b9      	ldr	r1, [r7, #8]
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f000 fc67 	bl	800c58c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bcbe:	6978      	ldr	r0, [r7, #20]
 800bcc0:	f7ff fefd 	bl	800babe <prvUnlockQueue>
	}
 800bcc4:	bf00      	nop
 800bcc6:	3718      	adds	r7, #24
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b08e      	sub	sp, #56	; 0x38
 800bcd0:	af04      	add	r7, sp, #16
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
 800bcd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bcda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d109      	bne.n	800bcf4 <xTaskCreateStatic+0x28>
 800bce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	623b      	str	r3, [r7, #32]
 800bcf2:	e7fe      	b.n	800bcf2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800bcf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d109      	bne.n	800bd0e <xTaskCreateStatic+0x42>
 800bcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfe:	f383 8811 	msr	BASEPRI, r3
 800bd02:	f3bf 8f6f 	isb	sy
 800bd06:	f3bf 8f4f 	dsb	sy
 800bd0a:	61fb      	str	r3, [r7, #28]
 800bd0c:	e7fe      	b.n	800bd0c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bd0e:	235c      	movs	r3, #92	; 0x5c
 800bd10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	2b5c      	cmp	r3, #92	; 0x5c
 800bd16:	d009      	beq.n	800bd2c <xTaskCreateStatic+0x60>
 800bd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd1c:	f383 8811 	msr	BASEPRI, r3
 800bd20:	f3bf 8f6f 	isb	sy
 800bd24:	f3bf 8f4f 	dsb	sy
 800bd28:	61bb      	str	r3, [r7, #24]
 800bd2a:	e7fe      	b.n	800bd2a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bd2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d01e      	beq.n	800bd72 <xTaskCreateStatic+0xa6>
 800bd34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d01b      	beq.n	800bd72 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd42:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd46:	2202      	movs	r2, #2
 800bd48:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	9303      	str	r3, [sp, #12]
 800bd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd52:	9302      	str	r3, [sp, #8]
 800bd54:	f107 0314 	add.w	r3, r7, #20
 800bd58:	9301      	str	r3, [sp, #4]
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5c:	9300      	str	r3, [sp, #0]
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	68b9      	ldr	r1, [r7, #8]
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f000 f850 	bl	800be0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd6c:	f000 f8dc 	bl	800bf28 <prvAddNewTaskToReadyList>
 800bd70:	e001      	b.n	800bd76 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800bd72:	2300      	movs	r3, #0
 800bd74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bd76:	697b      	ldr	r3, [r7, #20]
	}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3728      	adds	r7, #40	; 0x28
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b08c      	sub	sp, #48	; 0x30
 800bd84:	af04      	add	r7, sp, #16
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	603b      	str	r3, [r7, #0]
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bd90:	88fb      	ldrh	r3, [r7, #6]
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	4618      	mov	r0, r3
 800bd96:	f001 ff5b 	bl	800dc50 <pvPortMalloc>
 800bd9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00e      	beq.n	800bdc0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bda2:	205c      	movs	r0, #92	; 0x5c
 800bda4:	f001 ff54 	bl	800dc50 <pvPortMalloc>
 800bda8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bdaa:	69fb      	ldr	r3, [r7, #28]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d003      	beq.n	800bdb8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	697a      	ldr	r2, [r7, #20]
 800bdb4:	631a      	str	r2, [r3, #48]	; 0x30
 800bdb6:	e005      	b.n	800bdc4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bdb8:	6978      	ldr	r0, [r7, #20]
 800bdba:	f002 f80b 	bl	800ddd4 <vPortFree>
 800bdbe:	e001      	b.n	800bdc4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d017      	beq.n	800bdfa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bdd2:	88fa      	ldrh	r2, [r7, #6]
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	9303      	str	r3, [sp, #12]
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	9302      	str	r3, [sp, #8]
 800bddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdde:	9301      	str	r3, [sp, #4]
 800bde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde2:	9300      	str	r3, [sp, #0]
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	68b9      	ldr	r1, [r7, #8]
 800bde8:	68f8      	ldr	r0, [r7, #12]
 800bdea:	f000 f80e 	bl	800be0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bdee:	69f8      	ldr	r0, [r7, #28]
 800bdf0:	f000 f89a 	bl	800bf28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	61bb      	str	r3, [r7, #24]
 800bdf8:	e002      	b.n	800be00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bdfa:	f04f 33ff 	mov.w	r3, #4294967295
 800bdfe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800be00:	69bb      	ldr	r3, [r7, #24]
	}
 800be02:	4618      	mov	r0, r3
 800be04:	3720      	adds	r7, #32
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800be0a:	b580      	push	{r7, lr}
 800be0c:	b088      	sub	sp, #32
 800be0e:	af00      	add	r7, sp, #0
 800be10:	60f8      	str	r0, [r7, #12]
 800be12:	60b9      	str	r1, [r7, #8]
 800be14:	607a      	str	r2, [r7, #4]
 800be16:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800be18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	461a      	mov	r2, r3
 800be22:	21a5      	movs	r1, #165	; 0xa5
 800be24:	f003 fba7 	bl	800f576 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800be28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800be32:	3b01      	subs	r3, #1
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	4413      	add	r3, r2
 800be38:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	f023 0307 	bic.w	r3, r3, #7
 800be40:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	f003 0307 	and.w	r3, r3, #7
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d009      	beq.n	800be60 <prvInitialiseNewTask+0x56>
 800be4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be50:	f383 8811 	msr	BASEPRI, r3
 800be54:	f3bf 8f6f 	isb	sy
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	617b      	str	r3, [r7, #20]
 800be5e:	e7fe      	b.n	800be5e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d01f      	beq.n	800bea6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be66:	2300      	movs	r3, #0
 800be68:	61fb      	str	r3, [r7, #28]
 800be6a:	e012      	b.n	800be92 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800be6c:	68ba      	ldr	r2, [r7, #8]
 800be6e:	69fb      	ldr	r3, [r7, #28]
 800be70:	4413      	add	r3, r2
 800be72:	7819      	ldrb	r1, [r3, #0]
 800be74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	4413      	add	r3, r2
 800be7a:	3334      	adds	r3, #52	; 0x34
 800be7c:	460a      	mov	r2, r1
 800be7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800be80:	68ba      	ldr	r2, [r7, #8]
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	4413      	add	r3, r2
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d006      	beq.n	800be9a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	3301      	adds	r3, #1
 800be90:	61fb      	str	r3, [r7, #28]
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	2b0f      	cmp	r3, #15
 800be96:	d9e9      	bls.n	800be6c <prvInitialiseNewTask+0x62>
 800be98:	e000      	b.n	800be9c <prvInitialiseNewTask+0x92>
			{
				break;
 800be9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800be9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9e:	2200      	movs	r2, #0
 800bea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bea4:	e003      	b.n	800beae <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea8:	2200      	movs	r2, #0
 800beaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800beae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb0:	2b37      	cmp	r3, #55	; 0x37
 800beb2:	d901      	bls.n	800beb8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800beb4:	2337      	movs	r3, #55	; 0x37
 800beb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800beb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bebc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bec2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec6:	2200      	movs	r2, #0
 800bec8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800beca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800becc:	3304      	adds	r3, #4
 800bece:	4618      	mov	r0, r3
 800bed0:	f7fe fdc6 	bl	800aa60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed6:	3318      	adds	r3, #24
 800bed8:	4618      	mov	r0, r3
 800beda:	f7fe fdc1 	bl	800aa60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bee2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800beea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800beee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bef2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef6:	2200      	movs	r2, #0
 800bef8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800befa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befc:	2200      	movs	r2, #0
 800befe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bf02:	683a      	ldr	r2, [r7, #0]
 800bf04:	68f9      	ldr	r1, [r7, #12]
 800bf06:	69b8      	ldr	r0, [r7, #24]
 800bf08:	f001 fc60 	bl	800d7cc <pxPortInitialiseStack>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bf12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d002      	beq.n	800bf1e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bf18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf1e:	bf00      	nop
 800bf20:	3720      	adds	r7, #32
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
	...

0800bf28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bf30:	f001 fd74 	bl	800da1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bf34:	4b2d      	ldr	r3, [pc, #180]	; (800bfec <prvAddNewTaskToReadyList+0xc4>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	3301      	adds	r3, #1
 800bf3a:	4a2c      	ldr	r2, [pc, #176]	; (800bfec <prvAddNewTaskToReadyList+0xc4>)
 800bf3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bf3e:	4b2c      	ldr	r3, [pc, #176]	; (800bff0 <prvAddNewTaskToReadyList+0xc8>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d109      	bne.n	800bf5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bf46:	4a2a      	ldr	r2, [pc, #168]	; (800bff0 <prvAddNewTaskToReadyList+0xc8>)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bf4c:	4b27      	ldr	r3, [pc, #156]	; (800bfec <prvAddNewTaskToReadyList+0xc4>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d110      	bne.n	800bf76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bf54:	f000 fc68 	bl	800c828 <prvInitialiseTaskLists>
 800bf58:	e00d      	b.n	800bf76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bf5a:	4b26      	ldr	r3, [pc, #152]	; (800bff4 <prvAddNewTaskToReadyList+0xcc>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d109      	bne.n	800bf76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bf62:	4b23      	ldr	r3, [pc, #140]	; (800bff0 <prvAddNewTaskToReadyList+0xc8>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d802      	bhi.n	800bf76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bf70:	4a1f      	ldr	r2, [pc, #124]	; (800bff0 <prvAddNewTaskToReadyList+0xc8>)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bf76:	4b20      	ldr	r3, [pc, #128]	; (800bff8 <prvAddNewTaskToReadyList+0xd0>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	4a1e      	ldr	r2, [pc, #120]	; (800bff8 <prvAddNewTaskToReadyList+0xd0>)
 800bf7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bf80:	4b1d      	ldr	r3, [pc, #116]	; (800bff8 <prvAddNewTaskToReadyList+0xd0>)
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf8c:	4b1b      	ldr	r3, [pc, #108]	; (800bffc <prvAddNewTaskToReadyList+0xd4>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d903      	bls.n	800bf9c <prvAddNewTaskToReadyList+0x74>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf98:	4a18      	ldr	r2, [pc, #96]	; (800bffc <prvAddNewTaskToReadyList+0xd4>)
 800bf9a:	6013      	str	r3, [r2, #0]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	4413      	add	r3, r2
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	4a15      	ldr	r2, [pc, #84]	; (800c000 <prvAddNewTaskToReadyList+0xd8>)
 800bfaa:	441a      	add	r2, r3
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	3304      	adds	r3, #4
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	4610      	mov	r0, r2
 800bfb4:	f7fe fd61 	bl	800aa7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bfb8:	f001 fd5e 	bl	800da78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bfbc:	4b0d      	ldr	r3, [pc, #52]	; (800bff4 <prvAddNewTaskToReadyList+0xcc>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d00e      	beq.n	800bfe2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bfc4:	4b0a      	ldr	r3, [pc, #40]	; (800bff0 <prvAddNewTaskToReadyList+0xc8>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d207      	bcs.n	800bfe2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bfd2:	4b0c      	ldr	r3, [pc, #48]	; (800c004 <prvAddNewTaskToReadyList+0xdc>)
 800bfd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfd8:	601a      	str	r2, [r3, #0]
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfe2:	bf00      	nop
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	2000309c 	.word	0x2000309c
 800bff0:	20002bc8 	.word	0x20002bc8
 800bff4:	200030a8 	.word	0x200030a8
 800bff8:	200030b8 	.word	0x200030b8
 800bffc:	200030a4 	.word	0x200030a4
 800c000:	20002bcc 	.word	0x20002bcc
 800c004:	e000ed04 	.word	0xe000ed04

0800c008 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c010:	2300      	movs	r3, #0
 800c012:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d016      	beq.n	800c048 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c01a:	4b13      	ldr	r3, [pc, #76]	; (800c068 <vTaskDelay+0x60>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d009      	beq.n	800c036 <vTaskDelay+0x2e>
 800c022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c026:	f383 8811 	msr	BASEPRI, r3
 800c02a:	f3bf 8f6f 	isb	sy
 800c02e:	f3bf 8f4f 	dsb	sy
 800c032:	60bb      	str	r3, [r7, #8]
 800c034:	e7fe      	b.n	800c034 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800c036:	f000 f87f 	bl	800c138 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c03a:	2100      	movs	r1, #0
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f001 f82b 	bl	800d098 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c042:	f000 f8bf 	bl	800c1c4 <xTaskResumeAll>
 800c046:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d107      	bne.n	800c05e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800c04e:	4b07      	ldr	r3, [pc, #28]	; (800c06c <vTaskDelay+0x64>)
 800c050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c054:	601a      	str	r2, [r3, #0]
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c05e:	bf00      	nop
 800c060:	3710      	adds	r7, #16
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	200030c4 	.word	0x200030c4
 800c06c:	e000ed04 	.word	0xe000ed04

0800c070 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b08a      	sub	sp, #40	; 0x28
 800c074:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c076:	2300      	movs	r3, #0
 800c078:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c07a:	2300      	movs	r3, #0
 800c07c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c07e:	463a      	mov	r2, r7
 800c080:	1d39      	adds	r1, r7, #4
 800c082:	f107 0308 	add.w	r3, r7, #8
 800c086:	4618      	mov	r0, r3
 800c088:	f7fe fc96 	bl	800a9b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c08c:	6839      	ldr	r1, [r7, #0]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	68ba      	ldr	r2, [r7, #8]
 800c092:	9202      	str	r2, [sp, #8]
 800c094:	9301      	str	r3, [sp, #4]
 800c096:	2300      	movs	r3, #0
 800c098:	9300      	str	r3, [sp, #0]
 800c09a:	2300      	movs	r3, #0
 800c09c:	460a      	mov	r2, r1
 800c09e:	4920      	ldr	r1, [pc, #128]	; (800c120 <vTaskStartScheduler+0xb0>)
 800c0a0:	4820      	ldr	r0, [pc, #128]	; (800c124 <vTaskStartScheduler+0xb4>)
 800c0a2:	f7ff fe13 	bl	800bccc <xTaskCreateStatic>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	4b1f      	ldr	r3, [pc, #124]	; (800c128 <vTaskStartScheduler+0xb8>)
 800c0aa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c0ac:	4b1e      	ldr	r3, [pc, #120]	; (800c128 <vTaskStartScheduler+0xb8>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d002      	beq.n	800c0ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	617b      	str	r3, [r7, #20]
 800c0b8:	e001      	b.n	800c0be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	d102      	bne.n	800c0ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c0c4:	f001 f83c 	bl	800d140 <xTimerCreateTimerTask>
 800c0c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d115      	bne.n	800c0fc <vTaskStartScheduler+0x8c>
 800c0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d4:	f383 8811 	msr	BASEPRI, r3
 800c0d8:	f3bf 8f6f 	isb	sy
 800c0dc:	f3bf 8f4f 	dsb	sy
 800c0e0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c0e2:	4b12      	ldr	r3, [pc, #72]	; (800c12c <vTaskStartScheduler+0xbc>)
 800c0e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c0ea:	4b11      	ldr	r3, [pc, #68]	; (800c130 <vTaskStartScheduler+0xc0>)
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c0f0:	4b10      	ldr	r3, [pc, #64]	; (800c134 <vTaskStartScheduler+0xc4>)
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c0f6:	f001 fbf3 	bl	800d8e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c0fa:	e00d      	b.n	800c118 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c102:	d109      	bne.n	800c118 <vTaskStartScheduler+0xa8>
 800c104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c108:	f383 8811 	msr	BASEPRI, r3
 800c10c:	f3bf 8f6f 	isb	sy
 800c110:	f3bf 8f4f 	dsb	sy
 800c114:	60fb      	str	r3, [r7, #12]
 800c116:	e7fe      	b.n	800c116 <vTaskStartScheduler+0xa6>
}
 800c118:	bf00      	nop
 800c11a:	3718      	adds	r7, #24
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	08010aa8 	.word	0x08010aa8
 800c124:	0800c7ad 	.word	0x0800c7ad
 800c128:	200030c0 	.word	0x200030c0
 800c12c:	200030bc 	.word	0x200030bc
 800c130:	200030a8 	.word	0x200030a8
 800c134:	200030a0 	.word	0x200030a0

0800c138 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c138:	b480      	push	{r7}
 800c13a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c13c:	4b04      	ldr	r3, [pc, #16]	; (800c150 <vTaskSuspendAll+0x18>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	3301      	adds	r3, #1
 800c142:	4a03      	ldr	r2, [pc, #12]	; (800c150 <vTaskSuspendAll+0x18>)
 800c144:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c146:	bf00      	nop
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr
 800c150:	200030c4 	.word	0x200030c4

0800c154 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800c15a:	2300      	movs	r3, #0
 800c15c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800c15e:	4b14      	ldr	r3, [pc, #80]	; (800c1b0 <prvGetExpectedIdleTime+0x5c>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d001      	beq.n	800c16a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800c166:	2301      	movs	r3, #1
 800c168:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800c16a:	4b12      	ldr	r3, [pc, #72]	; (800c1b4 <prvGetExpectedIdleTime+0x60>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c170:	2b00      	cmp	r3, #0
 800c172:	d002      	beq.n	800c17a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800c174:	2300      	movs	r3, #0
 800c176:	607b      	str	r3, [r7, #4]
 800c178:	e012      	b.n	800c1a0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800c17a:	4b0f      	ldr	r3, [pc, #60]	; (800c1b8 <prvGetExpectedIdleTime+0x64>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d902      	bls.n	800c188 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800c182:	2300      	movs	r3, #0
 800c184:	607b      	str	r3, [r7, #4]
 800c186:	e00b      	b.n	800c1a0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d002      	beq.n	800c194 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800c18e:	2300      	movs	r3, #0
 800c190:	607b      	str	r3, [r7, #4]
 800c192:	e005      	b.n	800c1a0 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800c194:	4b09      	ldr	r3, [pc, #36]	; (800c1bc <prvGetExpectedIdleTime+0x68>)
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	4b09      	ldr	r3, [pc, #36]	; (800c1c0 <prvGetExpectedIdleTime+0x6c>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	1ad3      	subs	r3, r2, r3
 800c19e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800c1a0:	687b      	ldr	r3, [r7, #4]
	}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	370c      	adds	r7, #12
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	200030a4 	.word	0x200030a4
 800c1b4:	20002bc8 	.word	0x20002bc8
 800c1b8:	20002bcc 	.word	0x20002bcc
 800c1bc:	200030bc 	.word	0x200030bc
 800c1c0:	200030a0 	.word	0x200030a0

0800c1c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c1d2:	4b41      	ldr	r3, [pc, #260]	; (800c2d8 <xTaskResumeAll+0x114>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d109      	bne.n	800c1ee <xTaskResumeAll+0x2a>
 800c1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1de:	f383 8811 	msr	BASEPRI, r3
 800c1e2:	f3bf 8f6f 	isb	sy
 800c1e6:	f3bf 8f4f 	dsb	sy
 800c1ea:	603b      	str	r3, [r7, #0]
 800c1ec:	e7fe      	b.n	800c1ec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c1ee:	f001 fc15 	bl	800da1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c1f2:	4b39      	ldr	r3, [pc, #228]	; (800c2d8 <xTaskResumeAll+0x114>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	4a37      	ldr	r2, [pc, #220]	; (800c2d8 <xTaskResumeAll+0x114>)
 800c1fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1fc:	4b36      	ldr	r3, [pc, #216]	; (800c2d8 <xTaskResumeAll+0x114>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d162      	bne.n	800c2ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c204:	4b35      	ldr	r3, [pc, #212]	; (800c2dc <xTaskResumeAll+0x118>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d05e      	beq.n	800c2ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c20c:	e02f      	b.n	800c26e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c20e:	4b34      	ldr	r3, [pc, #208]	; (800c2e0 <xTaskResumeAll+0x11c>)
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	3318      	adds	r3, #24
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7fe fc8a 	bl	800ab34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	3304      	adds	r3, #4
 800c224:	4618      	mov	r0, r3
 800c226:	f7fe fc85 	bl	800ab34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c22e:	4b2d      	ldr	r3, [pc, #180]	; (800c2e4 <xTaskResumeAll+0x120>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	429a      	cmp	r2, r3
 800c234:	d903      	bls.n	800c23e <xTaskResumeAll+0x7a>
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c23a:	4a2a      	ldr	r2, [pc, #168]	; (800c2e4 <xTaskResumeAll+0x120>)
 800c23c:	6013      	str	r3, [r2, #0]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c242:	4613      	mov	r3, r2
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	4413      	add	r3, r2
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	4a27      	ldr	r2, [pc, #156]	; (800c2e8 <xTaskResumeAll+0x124>)
 800c24c:	441a      	add	r2, r3
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	3304      	adds	r3, #4
 800c252:	4619      	mov	r1, r3
 800c254:	4610      	mov	r0, r2
 800c256:	f7fe fc10 	bl	800aa7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c25e:	4b23      	ldr	r3, [pc, #140]	; (800c2ec <xTaskResumeAll+0x128>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c264:	429a      	cmp	r2, r3
 800c266:	d302      	bcc.n	800c26e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c268:	4b21      	ldr	r3, [pc, #132]	; (800c2f0 <xTaskResumeAll+0x12c>)
 800c26a:	2201      	movs	r2, #1
 800c26c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c26e:	4b1c      	ldr	r3, [pc, #112]	; (800c2e0 <xTaskResumeAll+0x11c>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d1cb      	bne.n	800c20e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d001      	beq.n	800c280 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c27c:	f000 fb6e 	bl	800c95c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c280:	4b1c      	ldr	r3, [pc, #112]	; (800c2f4 <xTaskResumeAll+0x130>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d010      	beq.n	800c2ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c28c:	f000 f846 	bl	800c31c <xTaskIncrementTick>
 800c290:	4603      	mov	r3, r0
 800c292:	2b00      	cmp	r3, #0
 800c294:	d002      	beq.n	800c29c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c296:	4b16      	ldr	r3, [pc, #88]	; (800c2f0 <xTaskResumeAll+0x12c>)
 800c298:	2201      	movs	r2, #1
 800c29a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	3b01      	subs	r3, #1
 800c2a0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1f1      	bne.n	800c28c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800c2a8:	4b12      	ldr	r3, [pc, #72]	; (800c2f4 <xTaskResumeAll+0x130>)
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c2ae:	4b10      	ldr	r3, [pc, #64]	; (800c2f0 <xTaskResumeAll+0x12c>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d009      	beq.n	800c2ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c2ba:	4b0f      	ldr	r3, [pc, #60]	; (800c2f8 <xTaskResumeAll+0x134>)
 800c2bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2c0:	601a      	str	r2, [r3, #0]
 800c2c2:	f3bf 8f4f 	dsb	sy
 800c2c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2ca:	f001 fbd5 	bl	800da78 <vPortExitCritical>

	return xAlreadyYielded;
 800c2ce:	68bb      	ldr	r3, [r7, #8]
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3710      	adds	r7, #16
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}
 800c2d8:	200030c4 	.word	0x200030c4
 800c2dc:	2000309c 	.word	0x2000309c
 800c2e0:	2000305c 	.word	0x2000305c
 800c2e4:	200030a4 	.word	0x200030a4
 800c2e8:	20002bcc 	.word	0x20002bcc
 800c2ec:	20002bc8 	.word	0x20002bc8
 800c2f0:	200030b0 	.word	0x200030b0
 800c2f4:	200030ac 	.word	0x200030ac
 800c2f8:	e000ed04 	.word	0xe000ed04

0800c2fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c302:	4b05      	ldr	r3, [pc, #20]	; (800c318 <xTaskGetTickCount+0x1c>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c308:	687b      	ldr	r3, [r7, #4]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	370c      	adds	r7, #12
 800c30e:	46bd      	mov	sp, r7
 800c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c314:	4770      	bx	lr
 800c316:	bf00      	nop
 800c318:	200030a0 	.word	0x200030a0

0800c31c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c322:	2300      	movs	r3, #0
 800c324:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c326:	4b4e      	ldr	r3, [pc, #312]	; (800c460 <xTaskIncrementTick+0x144>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	f040 8088 	bne.w	800c440 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c330:	4b4c      	ldr	r3, [pc, #304]	; (800c464 <xTaskIncrementTick+0x148>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	3301      	adds	r3, #1
 800c336:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c338:	4a4a      	ldr	r2, [pc, #296]	; (800c464 <xTaskIncrementTick+0x148>)
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d11f      	bne.n	800c384 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800c344:	4b48      	ldr	r3, [pc, #288]	; (800c468 <xTaskIncrementTick+0x14c>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d009      	beq.n	800c362 <xTaskIncrementTick+0x46>
 800c34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	603b      	str	r3, [r7, #0]
 800c360:	e7fe      	b.n	800c360 <xTaskIncrementTick+0x44>
 800c362:	4b41      	ldr	r3, [pc, #260]	; (800c468 <xTaskIncrementTick+0x14c>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	60fb      	str	r3, [r7, #12]
 800c368:	4b40      	ldr	r3, [pc, #256]	; (800c46c <xTaskIncrementTick+0x150>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a3e      	ldr	r2, [pc, #248]	; (800c468 <xTaskIncrementTick+0x14c>)
 800c36e:	6013      	str	r3, [r2, #0]
 800c370:	4a3e      	ldr	r2, [pc, #248]	; (800c46c <xTaskIncrementTick+0x150>)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	6013      	str	r3, [r2, #0]
 800c376:	4b3e      	ldr	r3, [pc, #248]	; (800c470 <xTaskIncrementTick+0x154>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	3301      	adds	r3, #1
 800c37c:	4a3c      	ldr	r2, [pc, #240]	; (800c470 <xTaskIncrementTick+0x154>)
 800c37e:	6013      	str	r3, [r2, #0]
 800c380:	f000 faec 	bl	800c95c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c384:	4b3b      	ldr	r3, [pc, #236]	; (800c474 <xTaskIncrementTick+0x158>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	693a      	ldr	r2, [r7, #16]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d349      	bcc.n	800c422 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c38e:	4b36      	ldr	r3, [pc, #216]	; (800c468 <xTaskIncrementTick+0x14c>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d104      	bne.n	800c3a2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c398:	4b36      	ldr	r3, [pc, #216]	; (800c474 <xTaskIncrementTick+0x158>)
 800c39a:	f04f 32ff 	mov.w	r2, #4294967295
 800c39e:	601a      	str	r2, [r3, #0]
					break;
 800c3a0:	e03f      	b.n	800c422 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3a2:	4b31      	ldr	r3, [pc, #196]	; (800c468 <xTaskIncrementTick+0x14c>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c3b2:	693a      	ldr	r2, [r7, #16]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d203      	bcs.n	800c3c2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c3ba:	4a2e      	ldr	r2, [pc, #184]	; (800c474 <xTaskIncrementTick+0x158>)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c3c0:	e02f      	b.n	800c422 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	3304      	adds	r3, #4
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7fe fbb4 	bl	800ab34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d004      	beq.n	800c3de <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	3318      	adds	r3, #24
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7fe fbab 	bl	800ab34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3e2:	4b25      	ldr	r3, [pc, #148]	; (800c478 <xTaskIncrementTick+0x15c>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d903      	bls.n	800c3f2 <xTaskIncrementTick+0xd6>
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ee:	4a22      	ldr	r2, [pc, #136]	; (800c478 <xTaskIncrementTick+0x15c>)
 800c3f0:	6013      	str	r3, [r2, #0]
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	4413      	add	r3, r2
 800c3fc:	009b      	lsls	r3, r3, #2
 800c3fe:	4a1f      	ldr	r2, [pc, #124]	; (800c47c <xTaskIncrementTick+0x160>)
 800c400:	441a      	add	r2, r3
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	3304      	adds	r3, #4
 800c406:	4619      	mov	r1, r3
 800c408:	4610      	mov	r0, r2
 800c40a:	f7fe fb36 	bl	800aa7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c412:	4b1b      	ldr	r3, [pc, #108]	; (800c480 <xTaskIncrementTick+0x164>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c418:	429a      	cmp	r2, r3
 800c41a:	d3b8      	bcc.n	800c38e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800c41c:	2301      	movs	r3, #1
 800c41e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c420:	e7b5      	b.n	800c38e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c422:	4b17      	ldr	r3, [pc, #92]	; (800c480 <xTaskIncrementTick+0x164>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c428:	4914      	ldr	r1, [pc, #80]	; (800c47c <xTaskIncrementTick+0x160>)
 800c42a:	4613      	mov	r3, r2
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	4413      	add	r3, r2
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	440b      	add	r3, r1
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2b01      	cmp	r3, #1
 800c438:	d907      	bls.n	800c44a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800c43a:	2301      	movs	r3, #1
 800c43c:	617b      	str	r3, [r7, #20]
 800c43e:	e004      	b.n	800c44a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c440:	4b10      	ldr	r3, [pc, #64]	; (800c484 <xTaskIncrementTick+0x168>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	3301      	adds	r3, #1
 800c446:	4a0f      	ldr	r2, [pc, #60]	; (800c484 <xTaskIncrementTick+0x168>)
 800c448:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c44a:	4b0f      	ldr	r3, [pc, #60]	; (800c488 <xTaskIncrementTick+0x16c>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d001      	beq.n	800c456 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800c452:	2301      	movs	r3, #1
 800c454:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c456:	697b      	ldr	r3, [r7, #20]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3718      	adds	r7, #24
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	200030c4 	.word	0x200030c4
 800c464:	200030a0 	.word	0x200030a0
 800c468:	20003054 	.word	0x20003054
 800c46c:	20003058 	.word	0x20003058
 800c470:	200030b4 	.word	0x200030b4
 800c474:	200030bc 	.word	0x200030bc
 800c478:	200030a4 	.word	0x200030a4
 800c47c:	20002bcc 	.word	0x20002bcc
 800c480:	20002bc8 	.word	0x20002bc8
 800c484:	200030ac 	.word	0x200030ac
 800c488:	200030b0 	.word	0x200030b0

0800c48c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c492:	4b27      	ldr	r3, [pc, #156]	; (800c530 <vTaskSwitchContext+0xa4>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d003      	beq.n	800c4a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c49a:	4b26      	ldr	r3, [pc, #152]	; (800c534 <vTaskSwitchContext+0xa8>)
 800c49c:	2201      	movs	r2, #1
 800c49e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c4a0:	e040      	b.n	800c524 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800c4a2:	4b24      	ldr	r3, [pc, #144]	; (800c534 <vTaskSwitchContext+0xa8>)
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4a8:	4b23      	ldr	r3, [pc, #140]	; (800c538 <vTaskSwitchContext+0xac>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	60fb      	str	r3, [r7, #12]
 800c4ae:	e00f      	b.n	800c4d0 <vTaskSwitchContext+0x44>
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d109      	bne.n	800c4ca <vTaskSwitchContext+0x3e>
 800c4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ba:	f383 8811 	msr	BASEPRI, r3
 800c4be:	f3bf 8f6f 	isb	sy
 800c4c2:	f3bf 8f4f 	dsb	sy
 800c4c6:	607b      	str	r3, [r7, #4]
 800c4c8:	e7fe      	b.n	800c4c8 <vTaskSwitchContext+0x3c>
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	60fb      	str	r3, [r7, #12]
 800c4d0:	491a      	ldr	r1, [pc, #104]	; (800c53c <vTaskSwitchContext+0xb0>)
 800c4d2:	68fa      	ldr	r2, [r7, #12]
 800c4d4:	4613      	mov	r3, r2
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	4413      	add	r3, r2
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	440b      	add	r3, r1
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d0e5      	beq.n	800c4b0 <vTaskSwitchContext+0x24>
 800c4e4:	68fa      	ldr	r2, [r7, #12]
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	009b      	lsls	r3, r3, #2
 800c4ea:	4413      	add	r3, r2
 800c4ec:	009b      	lsls	r3, r3, #2
 800c4ee:	4a13      	ldr	r2, [pc, #76]	; (800c53c <vTaskSwitchContext+0xb0>)
 800c4f0:	4413      	add	r3, r2
 800c4f2:	60bb      	str	r3, [r7, #8]
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	685a      	ldr	r2, [r3, #4]
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	605a      	str	r2, [r3, #4]
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	685a      	ldr	r2, [r3, #4]
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	3308      	adds	r3, #8
 800c506:	429a      	cmp	r2, r3
 800c508:	d104      	bne.n	800c514 <vTaskSwitchContext+0x88>
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	685a      	ldr	r2, [r3, #4]
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	605a      	str	r2, [r3, #4]
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	4a09      	ldr	r2, [pc, #36]	; (800c540 <vTaskSwitchContext+0xb4>)
 800c51c:	6013      	str	r3, [r2, #0]
 800c51e:	4a06      	ldr	r2, [pc, #24]	; (800c538 <vTaskSwitchContext+0xac>)
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	6013      	str	r3, [r2, #0]
}
 800c524:	bf00      	nop
 800c526:	3714      	adds	r7, #20
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr
 800c530:	200030c4 	.word	0x200030c4
 800c534:	200030b0 	.word	0x200030b0
 800c538:	200030a4 	.word	0x200030a4
 800c53c:	20002bcc 	.word	0x20002bcc
 800c540:	20002bc8 	.word	0x20002bc8

0800c544 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d109      	bne.n	800c568 <vTaskPlaceOnEventList+0x24>
 800c554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c558:	f383 8811 	msr	BASEPRI, r3
 800c55c:	f3bf 8f6f 	isb	sy
 800c560:	f3bf 8f4f 	dsb	sy
 800c564:	60fb      	str	r3, [r7, #12]
 800c566:	e7fe      	b.n	800c566 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c568:	4b07      	ldr	r3, [pc, #28]	; (800c588 <vTaskPlaceOnEventList+0x44>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	3318      	adds	r3, #24
 800c56e:	4619      	mov	r1, r3
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f7fe faa6 	bl	800aac2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c576:	2101      	movs	r1, #1
 800c578:	6838      	ldr	r0, [r7, #0]
 800c57a:	f000 fd8d 	bl	800d098 <prvAddCurrentTaskToDelayedList>
}
 800c57e:	bf00      	nop
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	20002bc8 	.word	0x20002bc8

0800c58c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b086      	sub	sp, #24
 800c590:	af00      	add	r7, sp, #0
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d109      	bne.n	800c5b2 <vTaskPlaceOnEventListRestricted+0x26>
 800c59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a2:	f383 8811 	msr	BASEPRI, r3
 800c5a6:	f3bf 8f6f 	isb	sy
 800c5aa:	f3bf 8f4f 	dsb	sy
 800c5ae:	617b      	str	r3, [r7, #20]
 800c5b0:	e7fe      	b.n	800c5b0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c5b2:	4b0a      	ldr	r3, [pc, #40]	; (800c5dc <vTaskPlaceOnEventListRestricted+0x50>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	3318      	adds	r3, #24
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	68f8      	ldr	r0, [r7, #12]
 800c5bc:	f7fe fa5d 	bl	800aa7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d002      	beq.n	800c5cc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800c5c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c5cc:	6879      	ldr	r1, [r7, #4]
 800c5ce:	68b8      	ldr	r0, [r7, #8]
 800c5d0:	f000 fd62 	bl	800d098 <prvAddCurrentTaskToDelayedList>
	}
 800c5d4:	bf00      	nop
 800c5d6:	3718      	adds	r7, #24
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	20002bc8 	.word	0x20002bc8

0800c5e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b086      	sub	sp, #24
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	68db      	ldr	r3, [r3, #12]
 800c5ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d109      	bne.n	800c60a <xTaskRemoveFromEventList+0x2a>
 800c5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fa:	f383 8811 	msr	BASEPRI, r3
 800c5fe:	f3bf 8f6f 	isb	sy
 800c602:	f3bf 8f4f 	dsb	sy
 800c606:	60fb      	str	r3, [r7, #12]
 800c608:	e7fe      	b.n	800c608 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	3318      	adds	r3, #24
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fe fa90 	bl	800ab34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c614:	4b1e      	ldr	r3, [pc, #120]	; (800c690 <xTaskRemoveFromEventList+0xb0>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d11f      	bne.n	800c65c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	3304      	adds	r3, #4
 800c620:	4618      	mov	r0, r3
 800c622:	f7fe fa87 	bl	800ab34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c62a:	4b1a      	ldr	r3, [pc, #104]	; (800c694 <xTaskRemoveFromEventList+0xb4>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d903      	bls.n	800c63a <xTaskRemoveFromEventList+0x5a>
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c636:	4a17      	ldr	r2, [pc, #92]	; (800c694 <xTaskRemoveFromEventList+0xb4>)
 800c638:	6013      	str	r3, [r2, #0]
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c63e:	4613      	mov	r3, r2
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	4413      	add	r3, r2
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	4a14      	ldr	r2, [pc, #80]	; (800c698 <xTaskRemoveFromEventList+0xb8>)
 800c648:	441a      	add	r2, r3
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	3304      	adds	r3, #4
 800c64e:	4619      	mov	r1, r3
 800c650:	4610      	mov	r0, r2
 800c652:	f7fe fa12 	bl	800aa7a <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800c656:	f000 f981 	bl	800c95c <prvResetNextTaskUnblockTime>
 800c65a:	e005      	b.n	800c668 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	3318      	adds	r3, #24
 800c660:	4619      	mov	r1, r3
 800c662:	480e      	ldr	r0, [pc, #56]	; (800c69c <xTaskRemoveFromEventList+0xbc>)
 800c664:	f7fe fa09 	bl	800aa7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c66c:	4b0c      	ldr	r3, [pc, #48]	; (800c6a0 <xTaskRemoveFromEventList+0xc0>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c672:	429a      	cmp	r2, r3
 800c674:	d905      	bls.n	800c682 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c676:	2301      	movs	r3, #1
 800c678:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c67a:	4b0a      	ldr	r3, [pc, #40]	; (800c6a4 <xTaskRemoveFromEventList+0xc4>)
 800c67c:	2201      	movs	r2, #1
 800c67e:	601a      	str	r2, [r3, #0]
 800c680:	e001      	b.n	800c686 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c682:	2300      	movs	r3, #0
 800c684:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c686:	697b      	ldr	r3, [r7, #20]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3718      	adds	r7, #24
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	200030c4 	.word	0x200030c4
 800c694:	200030a4 	.word	0x200030a4
 800c698:	20002bcc 	.word	0x20002bcc
 800c69c:	2000305c 	.word	0x2000305c
 800c6a0:	20002bc8 	.word	0x20002bc8
 800c6a4:	200030b0 	.word	0x200030b0

0800c6a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b083      	sub	sp, #12
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c6b0:	4b06      	ldr	r3, [pc, #24]	; (800c6cc <vTaskInternalSetTimeOutState+0x24>)
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c6b8:	4b05      	ldr	r3, [pc, #20]	; (800c6d0 <vTaskInternalSetTimeOutState+0x28>)
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	605a      	str	r2, [r3, #4]
}
 800c6c0:	bf00      	nop
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr
 800c6cc:	200030b4 	.word	0x200030b4
 800c6d0:	200030a0 	.word	0x200030a0

0800c6d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b088      	sub	sp, #32
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d109      	bne.n	800c6f8 <xTaskCheckForTimeOut+0x24>
 800c6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e8:	f383 8811 	msr	BASEPRI, r3
 800c6ec:	f3bf 8f6f 	isb	sy
 800c6f0:	f3bf 8f4f 	dsb	sy
 800c6f4:	613b      	str	r3, [r7, #16]
 800c6f6:	e7fe      	b.n	800c6f6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d109      	bne.n	800c712 <xTaskCheckForTimeOut+0x3e>
 800c6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c702:	f383 8811 	msr	BASEPRI, r3
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	60fb      	str	r3, [r7, #12]
 800c710:	e7fe      	b.n	800c710 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800c712:	f001 f983 	bl	800da1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c716:	4b1d      	ldr	r3, [pc, #116]	; (800c78c <xTaskCheckForTimeOut+0xb8>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	69ba      	ldr	r2, [r7, #24]
 800c722:	1ad3      	subs	r3, r2, r3
 800c724:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c72e:	d102      	bne.n	800c736 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c730:	2300      	movs	r3, #0
 800c732:	61fb      	str	r3, [r7, #28]
 800c734:	e023      	b.n	800c77e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	4b15      	ldr	r3, [pc, #84]	; (800c790 <xTaskCheckForTimeOut+0xbc>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d007      	beq.n	800c752 <xTaskCheckForTimeOut+0x7e>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	69ba      	ldr	r2, [r7, #24]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d302      	bcc.n	800c752 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c74c:	2301      	movs	r3, #1
 800c74e:	61fb      	str	r3, [r7, #28]
 800c750:	e015      	b.n	800c77e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	697a      	ldr	r2, [r7, #20]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d20b      	bcs.n	800c774 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	1ad2      	subs	r2, r2, r3
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f7ff ff9d 	bl	800c6a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c76e:	2300      	movs	r3, #0
 800c770:	61fb      	str	r3, [r7, #28]
 800c772:	e004      	b.n	800c77e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	2200      	movs	r2, #0
 800c778:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c77a:	2301      	movs	r3, #1
 800c77c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c77e:	f001 f97b 	bl	800da78 <vPortExitCritical>

	return xReturn;
 800c782:	69fb      	ldr	r3, [r7, #28]
}
 800c784:	4618      	mov	r0, r3
 800c786:	3720      	adds	r7, #32
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	200030a0 	.word	0x200030a0
 800c790:	200030b4 	.word	0x200030b4

0800c794 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c794:	b480      	push	{r7}
 800c796:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c798:	4b03      	ldr	r3, [pc, #12]	; (800c7a8 <vTaskMissedYield+0x14>)
 800c79a:	2201      	movs	r2, #1
 800c79c:	601a      	str	r2, [r3, #0]
}
 800c79e:	bf00      	nop
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr
 800c7a8:	200030b0 	.word	0x200030b0

0800c7ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c7b4:	f000 f878 	bl	800c8a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c7b8:	4b17      	ldr	r3, [pc, #92]	; (800c818 <prvIdleTask+0x6c>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d907      	bls.n	800c7d0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800c7c0:	4b16      	ldr	r3, [pc, #88]	; (800c81c <prvIdleTask+0x70>)
 800c7c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7c6:	601a      	str	r2, [r3, #0]
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800c7d0:	f7ff fcc0 	bl	800c154 <prvGetExpectedIdleTime>
 800c7d4:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d9eb      	bls.n	800c7b4 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800c7dc:	f7ff fcac 	bl	800c138 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800c7e0:	4b0f      	ldr	r3, [pc, #60]	; (800c820 <prvIdleTask+0x74>)
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	4b0f      	ldr	r3, [pc, #60]	; (800c824 <prvIdleTask+0x78>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d209      	bcs.n	800c800 <prvIdleTask+0x54>
 800c7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f0:	f383 8811 	msr	BASEPRI, r3
 800c7f4:	f3bf 8f6f 	isb	sy
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	60bb      	str	r3, [r7, #8]
 800c7fe:	e7fe      	b.n	800c7fe <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800c800:	f7ff fca8 	bl	800c154 <prvGetExpectedIdleTime>
 800c804:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d902      	bls.n	800c812 <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f7f4 f8cd 	bl	80009ac <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800c812:	f7ff fcd7 	bl	800c1c4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800c816:	e7cd      	b.n	800c7b4 <prvIdleTask+0x8>
 800c818:	20002bcc 	.word	0x20002bcc
 800c81c:	e000ed04 	.word	0xe000ed04
 800c820:	200030bc 	.word	0x200030bc
 800c824:	200030a0 	.word	0x200030a0

0800c828 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c82e:	2300      	movs	r3, #0
 800c830:	607b      	str	r3, [r7, #4]
 800c832:	e00c      	b.n	800c84e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	4613      	mov	r3, r2
 800c838:	009b      	lsls	r3, r3, #2
 800c83a:	4413      	add	r3, r2
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	4a12      	ldr	r2, [pc, #72]	; (800c888 <prvInitialiseTaskLists+0x60>)
 800c840:	4413      	add	r3, r2
 800c842:	4618      	mov	r0, r3
 800c844:	f7fe f8ec 	bl	800aa20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	3301      	adds	r3, #1
 800c84c:	607b      	str	r3, [r7, #4]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2b37      	cmp	r3, #55	; 0x37
 800c852:	d9ef      	bls.n	800c834 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c854:	480d      	ldr	r0, [pc, #52]	; (800c88c <prvInitialiseTaskLists+0x64>)
 800c856:	f7fe f8e3 	bl	800aa20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c85a:	480d      	ldr	r0, [pc, #52]	; (800c890 <prvInitialiseTaskLists+0x68>)
 800c85c:	f7fe f8e0 	bl	800aa20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c860:	480c      	ldr	r0, [pc, #48]	; (800c894 <prvInitialiseTaskLists+0x6c>)
 800c862:	f7fe f8dd 	bl	800aa20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c866:	480c      	ldr	r0, [pc, #48]	; (800c898 <prvInitialiseTaskLists+0x70>)
 800c868:	f7fe f8da 	bl	800aa20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c86c:	480b      	ldr	r0, [pc, #44]	; (800c89c <prvInitialiseTaskLists+0x74>)
 800c86e:	f7fe f8d7 	bl	800aa20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c872:	4b0b      	ldr	r3, [pc, #44]	; (800c8a0 <prvInitialiseTaskLists+0x78>)
 800c874:	4a05      	ldr	r2, [pc, #20]	; (800c88c <prvInitialiseTaskLists+0x64>)
 800c876:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c878:	4b0a      	ldr	r3, [pc, #40]	; (800c8a4 <prvInitialiseTaskLists+0x7c>)
 800c87a:	4a05      	ldr	r2, [pc, #20]	; (800c890 <prvInitialiseTaskLists+0x68>)
 800c87c:	601a      	str	r2, [r3, #0]
}
 800c87e:	bf00      	nop
 800c880:	3708      	adds	r7, #8
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	20002bcc 	.word	0x20002bcc
 800c88c:	2000302c 	.word	0x2000302c
 800c890:	20003040 	.word	0x20003040
 800c894:	2000305c 	.word	0x2000305c
 800c898:	20003070 	.word	0x20003070
 800c89c:	20003088 	.word	0x20003088
 800c8a0:	20003054 	.word	0x20003054
 800c8a4:	20003058 	.word	0x20003058

0800c8a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c8ae:	e019      	b.n	800c8e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c8b0:	f001 f8b4 	bl	800da1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8b4:	4b0f      	ldr	r3, [pc, #60]	; (800c8f4 <prvCheckTasksWaitingTermination+0x4c>)
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	68db      	ldr	r3, [r3, #12]
 800c8ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	3304      	adds	r3, #4
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7fe f937 	bl	800ab34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c8c6:	4b0c      	ldr	r3, [pc, #48]	; (800c8f8 <prvCheckTasksWaitingTermination+0x50>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	3b01      	subs	r3, #1
 800c8cc:	4a0a      	ldr	r2, [pc, #40]	; (800c8f8 <prvCheckTasksWaitingTermination+0x50>)
 800c8ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c8d0:	4b0a      	ldr	r3, [pc, #40]	; (800c8fc <prvCheckTasksWaitingTermination+0x54>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	3b01      	subs	r3, #1
 800c8d6:	4a09      	ldr	r2, [pc, #36]	; (800c8fc <prvCheckTasksWaitingTermination+0x54>)
 800c8d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c8da:	f001 f8cd 	bl	800da78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 f80e 	bl	800c900 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c8e4:	4b05      	ldr	r3, [pc, #20]	; (800c8fc <prvCheckTasksWaitingTermination+0x54>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d1e1      	bne.n	800c8b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c8ec:	bf00      	nop
 800c8ee:	3708      	adds	r7, #8
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}
 800c8f4:	20003070 	.word	0x20003070
 800c8f8:	2000309c 	.word	0x2000309c
 800c8fc:	20003084 	.word	0x20003084

0800c900 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d108      	bne.n	800c924 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c916:	4618      	mov	r0, r3
 800c918:	f001 fa5c 	bl	800ddd4 <vPortFree>
				vPortFree( pxTCB );
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f001 fa59 	bl	800ddd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c922:	e017      	b.n	800c954 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d103      	bne.n	800c936 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f001 fa50 	bl	800ddd4 <vPortFree>
	}
 800c934:	e00e      	b.n	800c954 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c93c:	2b02      	cmp	r3, #2
 800c93e:	d009      	beq.n	800c954 <prvDeleteTCB+0x54>
 800c940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c944:	f383 8811 	msr	BASEPRI, r3
 800c948:	f3bf 8f6f 	isb	sy
 800c94c:	f3bf 8f4f 	dsb	sy
 800c950:	60fb      	str	r3, [r7, #12]
 800c952:	e7fe      	b.n	800c952 <prvDeleteTCB+0x52>
	}
 800c954:	bf00      	nop
 800c956:	3710      	adds	r7, #16
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c962:	4b0c      	ldr	r3, [pc, #48]	; (800c994 <prvResetNextTaskUnblockTime+0x38>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d104      	bne.n	800c976 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c96c:	4b0a      	ldr	r3, [pc, #40]	; (800c998 <prvResetNextTaskUnblockTime+0x3c>)
 800c96e:	f04f 32ff 	mov.w	r2, #4294967295
 800c972:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c974:	e008      	b.n	800c988 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c976:	4b07      	ldr	r3, [pc, #28]	; (800c994 <prvResetNextTaskUnblockTime+0x38>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	4a04      	ldr	r2, [pc, #16]	; (800c998 <prvResetNextTaskUnblockTime+0x3c>)
 800c986:	6013      	str	r3, [r2, #0]
}
 800c988:	bf00      	nop
 800c98a:	370c      	adds	r7, #12
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr
 800c994:	20003054 	.word	0x20003054
 800c998:	200030bc 	.word	0x200030bc

0800c99c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c9a2:	4b05      	ldr	r3, [pc, #20]	; (800c9b8 <xTaskGetCurrentTaskHandle+0x1c>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c9a8:	687b      	ldr	r3, [r7, #4]
	}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	370c      	adds	r7, #12
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr
 800c9b6:	bf00      	nop
 800c9b8:	20002bc8 	.word	0x20002bc8

0800c9bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c9c2:	4b0b      	ldr	r3, [pc, #44]	; (800c9f0 <xTaskGetSchedulerState+0x34>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d102      	bne.n	800c9d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	607b      	str	r3, [r7, #4]
 800c9ce:	e008      	b.n	800c9e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9d0:	4b08      	ldr	r3, [pc, #32]	; (800c9f4 <xTaskGetSchedulerState+0x38>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d102      	bne.n	800c9de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c9d8:	2302      	movs	r3, #2
 800c9da:	607b      	str	r3, [r7, #4]
 800c9dc:	e001      	b.n	800c9e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c9e2:	687b      	ldr	r3, [r7, #4]
	}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr
 800c9f0:	200030a8 	.word	0x200030a8
 800c9f4:	200030c4 	.word	0x200030c4

0800c9f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ca04:	2300      	movs	r3, #0
 800ca06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d051      	beq.n	800cab2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca12:	4b2a      	ldr	r3, [pc, #168]	; (800cabc <xTaskPriorityInherit+0xc4>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d241      	bcs.n	800caa0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	699b      	ldr	r3, [r3, #24]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	db06      	blt.n	800ca32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca24:	4b25      	ldr	r3, [pc, #148]	; (800cabc <xTaskPriorityInherit+0xc4>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	6959      	ldr	r1, [r3, #20]
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	4413      	add	r3, r2
 800ca40:	009b      	lsls	r3, r3, #2
 800ca42:	4a1f      	ldr	r2, [pc, #124]	; (800cac0 <xTaskPriorityInherit+0xc8>)
 800ca44:	4413      	add	r3, r2
 800ca46:	4299      	cmp	r1, r3
 800ca48:	d122      	bne.n	800ca90 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7fe f870 	bl	800ab34 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ca54:	4b19      	ldr	r3, [pc, #100]	; (800cabc <xTaskPriorityInherit+0xc4>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca62:	4b18      	ldr	r3, [pc, #96]	; (800cac4 <xTaskPriorityInherit+0xcc>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d903      	bls.n	800ca72 <xTaskPriorityInherit+0x7a>
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca6e:	4a15      	ldr	r2, [pc, #84]	; (800cac4 <xTaskPriorityInherit+0xcc>)
 800ca70:	6013      	str	r3, [r2, #0]
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca76:	4613      	mov	r3, r2
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	4413      	add	r3, r2
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	4a10      	ldr	r2, [pc, #64]	; (800cac0 <xTaskPriorityInherit+0xc8>)
 800ca80:	441a      	add	r2, r3
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	3304      	adds	r3, #4
 800ca86:	4619      	mov	r1, r3
 800ca88:	4610      	mov	r0, r2
 800ca8a:	f7fd fff6 	bl	800aa7a <vListInsertEnd>
 800ca8e:	e004      	b.n	800ca9a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ca90:	4b0a      	ldr	r3, [pc, #40]	; (800cabc <xTaskPriorityInherit+0xc4>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	60fb      	str	r3, [r7, #12]
 800ca9e:	e008      	b.n	800cab2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800caa4:	4b05      	ldr	r3, [pc, #20]	; (800cabc <xTaskPriorityInherit+0xc4>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caaa:	429a      	cmp	r2, r3
 800caac:	d201      	bcs.n	800cab2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800caae:	2301      	movs	r3, #1
 800cab0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cab2:	68fb      	ldr	r3, [r7, #12]
	}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	20002bc8 	.word	0x20002bc8
 800cac0:	20002bcc 	.word	0x20002bcc
 800cac4:	200030a4 	.word	0x200030a4

0800cac8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b086      	sub	sp, #24
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cad4:	2300      	movs	r3, #0
 800cad6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d054      	beq.n	800cb88 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cade:	4b2d      	ldr	r3, [pc, #180]	; (800cb94 <xTaskPriorityDisinherit+0xcc>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	693a      	ldr	r2, [r7, #16]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d009      	beq.n	800cafc <xTaskPriorityDisinherit+0x34>
 800cae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caec:	f383 8811 	msr	BASEPRI, r3
 800caf0:	f3bf 8f6f 	isb	sy
 800caf4:	f3bf 8f4f 	dsb	sy
 800caf8:	60fb      	str	r3, [r7, #12]
 800cafa:	e7fe      	b.n	800cafa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d109      	bne.n	800cb18 <xTaskPriorityDisinherit+0x50>
 800cb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb08:	f383 8811 	msr	BASEPRI, r3
 800cb0c:	f3bf 8f6f 	isb	sy
 800cb10:	f3bf 8f4f 	dsb	sy
 800cb14:	60bb      	str	r3, [r7, #8]
 800cb16:	e7fe      	b.n	800cb16 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb1c:	1e5a      	subs	r2, r3, #1
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d02c      	beq.n	800cb88 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d128      	bne.n	800cb88 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	3304      	adds	r3, #4
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7fd fffa 	bl	800ab34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb58:	4b0f      	ldr	r3, [pc, #60]	; (800cb98 <xTaskPriorityDisinherit+0xd0>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d903      	bls.n	800cb68 <xTaskPriorityDisinherit+0xa0>
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb64:	4a0c      	ldr	r2, [pc, #48]	; (800cb98 <xTaskPriorityDisinherit+0xd0>)
 800cb66:	6013      	str	r3, [r2, #0]
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb6c:	4613      	mov	r3, r2
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	4413      	add	r3, r2
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	4a09      	ldr	r2, [pc, #36]	; (800cb9c <xTaskPriorityDisinherit+0xd4>)
 800cb76:	441a      	add	r2, r3
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	3304      	adds	r3, #4
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	4610      	mov	r0, r2
 800cb80:	f7fd ff7b 	bl	800aa7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cb84:	2301      	movs	r3, #1
 800cb86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb88:	697b      	ldr	r3, [r7, #20]
	}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3718      	adds	r7, #24
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	20002bc8 	.word	0x20002bc8
 800cb98:	200030a4 	.word	0x200030a4
 800cb9c:	20002bcc 	.word	0x20002bcc

0800cba0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b088      	sub	sp, #32
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cbae:	2301      	movs	r3, #1
 800cbb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d068      	beq.n	800cc8a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cbb8:	69bb      	ldr	r3, [r7, #24]
 800cbba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d109      	bne.n	800cbd4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800cbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc4:	f383 8811 	msr	BASEPRI, r3
 800cbc8:	f3bf 8f6f 	isb	sy
 800cbcc:	f3bf 8f4f 	dsb	sy
 800cbd0:	60fb      	str	r3, [r7, #12]
 800cbd2:	e7fe      	b.n	800cbd2 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbd8:	683a      	ldr	r2, [r7, #0]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d902      	bls.n	800cbe4 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	61fb      	str	r3, [r7, #28]
 800cbe2:	e002      	b.n	800cbea <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cbe4:	69bb      	ldr	r3, [r7, #24]
 800cbe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbe8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbee:	69fa      	ldr	r2, [r7, #28]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d04a      	beq.n	800cc8a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbf8:	697a      	ldr	r2, [r7, #20]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d145      	bne.n	800cc8a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cbfe:	4b25      	ldr	r3, [pc, #148]	; (800cc94 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	69ba      	ldr	r2, [r7, #24]
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d109      	bne.n	800cc1c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800cc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0c:	f383 8811 	msr	BASEPRI, r3
 800cc10:	f3bf 8f6f 	isb	sy
 800cc14:	f3bf 8f4f 	dsb	sy
 800cc18:	60bb      	str	r3, [r7, #8]
 800cc1a:	e7fe      	b.n	800cc1a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cc1c:	69bb      	ldr	r3, [r7, #24]
 800cc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	69fa      	ldr	r2, [r7, #28]
 800cc26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cc28:	69bb      	ldr	r3, [r7, #24]
 800cc2a:	699b      	ldr	r3, [r3, #24]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	db04      	blt.n	800cc3a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cc36:	69bb      	ldr	r3, [r7, #24]
 800cc38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cc3a:	69bb      	ldr	r3, [r7, #24]
 800cc3c:	6959      	ldr	r1, [r3, #20]
 800cc3e:	693a      	ldr	r2, [r7, #16]
 800cc40:	4613      	mov	r3, r2
 800cc42:	009b      	lsls	r3, r3, #2
 800cc44:	4413      	add	r3, r2
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	4a13      	ldr	r2, [pc, #76]	; (800cc98 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800cc4a:	4413      	add	r3, r2
 800cc4c:	4299      	cmp	r1, r3
 800cc4e:	d11c      	bne.n	800cc8a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	3304      	adds	r3, #4
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7fd ff6d 	bl	800ab34 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc5e:	4b0f      	ldr	r3, [pc, #60]	; (800cc9c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d903      	bls.n	800cc6e <vTaskPriorityDisinheritAfterTimeout+0xce>
 800cc66:	69bb      	ldr	r3, [r7, #24]
 800cc68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc6a:	4a0c      	ldr	r2, [pc, #48]	; (800cc9c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800cc6c:	6013      	str	r3, [r2, #0]
 800cc6e:	69bb      	ldr	r3, [r7, #24]
 800cc70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc72:	4613      	mov	r3, r2
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	4413      	add	r3, r2
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	4a07      	ldr	r2, [pc, #28]	; (800cc98 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800cc7c:	441a      	add	r2, r3
 800cc7e:	69bb      	ldr	r3, [r7, #24]
 800cc80:	3304      	adds	r3, #4
 800cc82:	4619      	mov	r1, r3
 800cc84:	4610      	mov	r0, r2
 800cc86:	f7fd fef8 	bl	800aa7a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc8a:	bf00      	nop
 800cc8c:	3720      	adds	r7, #32
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	20002bc8 	.word	0x20002bc8
 800cc98:	20002bcc 	.word	0x20002bcc
 800cc9c:	200030a4 	.word	0x200030a4

0800cca0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cca0:	b480      	push	{r7}
 800cca2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cca4:	4b07      	ldr	r3, [pc, #28]	; (800ccc4 <pvTaskIncrementMutexHeldCount+0x24>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d004      	beq.n	800ccb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ccac:	4b05      	ldr	r3, [pc, #20]	; (800ccc4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ccb2:	3201      	adds	r2, #1
 800ccb4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ccb6:	4b03      	ldr	r3, [pc, #12]	; (800ccc4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
	}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr
 800ccc4:	20002bc8 	.word	0x20002bc8

0800ccc8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b086      	sub	sp, #24
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
 800ccd4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ccd6:	f000 fea1 	bl	800da1c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ccda:	4b26      	ldr	r3, [pc, #152]	; (800cd74 <xTaskNotifyWait+0xac>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	2b02      	cmp	r3, #2
 800cce6:	d01a      	beq.n	800cd1e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800cce8:	4b22      	ldr	r3, [pc, #136]	; (800cd74 <xTaskNotifyWait+0xac>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ccee:	68fa      	ldr	r2, [r7, #12]
 800ccf0:	43d2      	mvns	r2, r2
 800ccf2:	400a      	ands	r2, r1
 800ccf4:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ccf6:	4b1f      	ldr	r3, [pc, #124]	; (800cd74 <xTaskNotifyWait+0xac>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d00b      	beq.n	800cd1e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd06:	2101      	movs	r1, #1
 800cd08:	6838      	ldr	r0, [r7, #0]
 800cd0a:	f000 f9c5 	bl	800d098 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800cd0e:	4b1a      	ldr	r3, [pc, #104]	; (800cd78 <xTaskNotifyWait+0xb0>)
 800cd10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd14:	601a      	str	r2, [r3, #0]
 800cd16:	f3bf 8f4f 	dsb	sy
 800cd1a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cd1e:	f000 feab 	bl	800da78 <vPortExitCritical>

		taskENTER_CRITICAL();
 800cd22:	f000 fe7b 	bl	800da1c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d004      	beq.n	800cd36 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800cd2c:	4b11      	ldr	r3, [pc, #68]	; (800cd74 <xTaskNotifyWait+0xac>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800cd36:	4b0f      	ldr	r3, [pc, #60]	; (800cd74 <xTaskNotifyWait+0xac>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	2b02      	cmp	r3, #2
 800cd42:	d002      	beq.n	800cd4a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800cd44:	2300      	movs	r3, #0
 800cd46:	617b      	str	r3, [r7, #20]
 800cd48:	e008      	b.n	800cd5c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800cd4a:	4b0a      	ldr	r3, [pc, #40]	; (800cd74 <xTaskNotifyWait+0xac>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cd50:	68ba      	ldr	r2, [r7, #8]
 800cd52:	43d2      	mvns	r2, r2
 800cd54:	400a      	ands	r2, r1
 800cd56:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd5c:	4b05      	ldr	r3, [pc, #20]	; (800cd74 <xTaskNotifyWait+0xac>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2200      	movs	r2, #0
 800cd62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800cd66:	f000 fe87 	bl	800da78 <vPortExitCritical>

		return xReturn;
 800cd6a:	697b      	ldr	r3, [r7, #20]
	}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3718      	adds	r7, #24
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	20002bc8 	.word	0x20002bc8
 800cd78:	e000ed04 	.word	0xe000ed04

0800cd7c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b08a      	sub	sp, #40	; 0x28
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	603b      	str	r3, [r7, #0]
 800cd88:	4613      	mov	r3, r2
 800cd8a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d109      	bne.n	800cdaa <xTaskGenericNotify+0x2e>
 800cd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd9a:	f383 8811 	msr	BASEPRI, r3
 800cd9e:	f3bf 8f6f 	isb	sy
 800cda2:	f3bf 8f4f 	dsb	sy
 800cda6:	61bb      	str	r3, [r7, #24]
 800cda8:	e7fe      	b.n	800cda8 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800cdae:	f000 fe35 	bl	800da1c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d003      	beq.n	800cdc0 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cdb8:	6a3b      	ldr	r3, [r7, #32]
 800cdba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cdc0:	6a3b      	ldr	r3, [r7, #32]
 800cdc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800cdc6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cdc8:	6a3b      	ldr	r3, [r7, #32]
 800cdca:	2202      	movs	r2, #2
 800cdcc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800cdd0:	79fb      	ldrb	r3, [r7, #7]
 800cdd2:	2b04      	cmp	r3, #4
 800cdd4:	d827      	bhi.n	800ce26 <xTaskGenericNotify+0xaa>
 800cdd6:	a201      	add	r2, pc, #4	; (adr r2, 800cddc <xTaskGenericNotify+0x60>)
 800cdd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cddc:	0800ce45 	.word	0x0800ce45
 800cde0:	0800cdf1 	.word	0x0800cdf1
 800cde4:	0800cdff 	.word	0x0800cdff
 800cde8:	0800ce0b 	.word	0x0800ce0b
 800cdec:	0800ce13 	.word	0x0800ce13
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800cdf0:	6a3b      	ldr	r3, [r7, #32]
 800cdf2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	431a      	orrs	r2, r3
 800cdf8:	6a3b      	ldr	r3, [r7, #32]
 800cdfa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800cdfc:	e025      	b.n	800ce4a <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800cdfe:	6a3b      	ldr	r3, [r7, #32]
 800ce00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce02:	1c5a      	adds	r2, r3, #1
 800ce04:	6a3b      	ldr	r3, [r7, #32]
 800ce06:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ce08:	e01f      	b.n	800ce4a <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ce0a:	6a3b      	ldr	r3, [r7, #32]
 800ce0c:	68ba      	ldr	r2, [r7, #8]
 800ce0e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ce10:	e01b      	b.n	800ce4a <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ce12:	7ffb      	ldrb	r3, [r7, #31]
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	d003      	beq.n	800ce20 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ce18:	6a3b      	ldr	r3, [r7, #32]
 800ce1a:	68ba      	ldr	r2, [r7, #8]
 800ce1c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ce1e:	e014      	b.n	800ce4a <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 800ce20:	2300      	movs	r3, #0
 800ce22:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800ce24:	e011      	b.n	800ce4a <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ce26:	6a3b      	ldr	r3, [r7, #32]
 800ce28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce2e:	d00b      	beq.n	800ce48 <xTaskGenericNotify+0xcc>
 800ce30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce34:	f383 8811 	msr	BASEPRI, r3
 800ce38:	f3bf 8f6f 	isb	sy
 800ce3c:	f3bf 8f4f 	dsb	sy
 800ce40:	617b      	str	r3, [r7, #20]
 800ce42:	e7fe      	b.n	800ce42 <xTaskGenericNotify+0xc6>
					break;
 800ce44:	bf00      	nop
 800ce46:	e000      	b.n	800ce4a <xTaskGenericNotify+0xce>

					break;
 800ce48:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ce4a:	7ffb      	ldrb	r3, [r7, #31]
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d13b      	bne.n	800cec8 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce50:	6a3b      	ldr	r3, [r7, #32]
 800ce52:	3304      	adds	r3, #4
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7fd fe6d 	bl	800ab34 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ce5a:	6a3b      	ldr	r3, [r7, #32]
 800ce5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce5e:	4b1e      	ldr	r3, [pc, #120]	; (800ced8 <xTaskGenericNotify+0x15c>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d903      	bls.n	800ce6e <xTaskGenericNotify+0xf2>
 800ce66:	6a3b      	ldr	r3, [r7, #32]
 800ce68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce6a:	4a1b      	ldr	r2, [pc, #108]	; (800ced8 <xTaskGenericNotify+0x15c>)
 800ce6c:	6013      	str	r3, [r2, #0]
 800ce6e:	6a3b      	ldr	r3, [r7, #32]
 800ce70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce72:	4613      	mov	r3, r2
 800ce74:	009b      	lsls	r3, r3, #2
 800ce76:	4413      	add	r3, r2
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	4a18      	ldr	r2, [pc, #96]	; (800cedc <xTaskGenericNotify+0x160>)
 800ce7c:	441a      	add	r2, r3
 800ce7e:	6a3b      	ldr	r3, [r7, #32]
 800ce80:	3304      	adds	r3, #4
 800ce82:	4619      	mov	r1, r3
 800ce84:	4610      	mov	r0, r2
 800ce86:	f7fd fdf8 	bl	800aa7a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ce8a:	6a3b      	ldr	r3, [r7, #32]
 800ce8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d009      	beq.n	800cea6 <xTaskGenericNotify+0x12a>
 800ce92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce96:	f383 8811 	msr	BASEPRI, r3
 800ce9a:	f3bf 8f6f 	isb	sy
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	613b      	str	r3, [r7, #16]
 800cea4:	e7fe      	b.n	800cea4 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 800cea6:	f7ff fd59 	bl	800c95c <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ceaa:	6a3b      	ldr	r3, [r7, #32]
 800ceac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceae:	4b0c      	ldr	r3, [pc, #48]	; (800cee0 <xTaskGenericNotify+0x164>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d907      	bls.n	800cec8 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800ceb8:	4b0a      	ldr	r3, [pc, #40]	; (800cee4 <xTaskGenericNotify+0x168>)
 800ceba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cebe:	601a      	str	r2, [r3, #0]
 800cec0:	f3bf 8f4f 	dsb	sy
 800cec4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cec8:	f000 fdd6 	bl	800da78 <vPortExitCritical>

		return xReturn;
 800cecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800cece:	4618      	mov	r0, r3
 800ced0:	3728      	adds	r7, #40	; 0x28
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	200030a4 	.word	0x200030a4
 800cedc:	20002bcc 	.word	0x20002bcc
 800cee0:	20002bc8 	.word	0x20002bc8
 800cee4:	e000ed04 	.word	0xe000ed04

0800cee8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b08e      	sub	sp, #56	; 0x38
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	603b      	str	r3, [r7, #0]
 800cef4:	4613      	mov	r3, r2
 800cef6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800cef8:	2301      	movs	r3, #1
 800cefa:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d109      	bne.n	800cf16 <xTaskGenericNotifyFromISR+0x2e>
 800cf02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf06:	f383 8811 	msr	BASEPRI, r3
 800cf0a:	f3bf 8f6f 	isb	sy
 800cf0e:	f3bf 8f4f 	dsb	sy
 800cf12:	627b      	str	r3, [r7, #36]	; 0x24
 800cf14:	e7fe      	b.n	800cf14 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf16:	f000 fe5d 	bl	800dbd4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800cf1e:	f3ef 8211 	mrs	r2, BASEPRI
 800cf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf26:	f383 8811 	msr	BASEPRI, r3
 800cf2a:	f3bf 8f6f 	isb	sy
 800cf2e:	f3bf 8f4f 	dsb	sy
 800cf32:	623a      	str	r2, [r7, #32]
 800cf34:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800cf36:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf38:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d003      	beq.n	800cf48 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cf40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cf48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf4a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800cf4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf54:	2202      	movs	r2, #2
 800cf56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800cf5a:	79fb      	ldrb	r3, [r7, #7]
 800cf5c:	2b04      	cmp	r3, #4
 800cf5e:	d829      	bhi.n	800cfb4 <xTaskGenericNotifyFromISR+0xcc>
 800cf60:	a201      	add	r2, pc, #4	; (adr r2, 800cf68 <xTaskGenericNotifyFromISR+0x80>)
 800cf62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf66:	bf00      	nop
 800cf68:	0800cfd3 	.word	0x0800cfd3
 800cf6c:	0800cf7d 	.word	0x0800cf7d
 800cf70:	0800cf8b 	.word	0x0800cf8b
 800cf74:	0800cf97 	.word	0x0800cf97
 800cf78:	0800cf9f 	.word	0x0800cf9f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	431a      	orrs	r2, r3
 800cf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf86:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800cf88:	e026      	b.n	800cfd8 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800cf8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf8e:	1c5a      	adds	r2, r3, #1
 800cf90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf92:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800cf94:	e020      	b.n	800cfd8 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800cf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf98:	68ba      	ldr	r2, [r7, #8]
 800cf9a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800cf9c:	e01c      	b.n	800cfd8 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800cf9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cfa2:	2b02      	cmp	r3, #2
 800cfa4:	d003      	beq.n	800cfae <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800cfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa8:	68ba      	ldr	r2, [r7, #8]
 800cfaa:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cfac:	e014      	b.n	800cfd8 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800cfb2:	e011      	b.n	800cfd8 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800cfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfbc:	d00b      	beq.n	800cfd6 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	61bb      	str	r3, [r7, #24]
 800cfd0:	e7fe      	b.n	800cfd0 <xTaskGenericNotifyFromISR+0xe8>
					break;
 800cfd2:	bf00      	nop
 800cfd4:	e000      	b.n	800cfd8 <xTaskGenericNotifyFromISR+0xf0>
					break;
 800cfd6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cfd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d145      	bne.n	800d06c <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d009      	beq.n	800cffc <xTaskGenericNotifyFromISR+0x114>
 800cfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfec:	f383 8811 	msr	BASEPRI, r3
 800cff0:	f3bf 8f6f 	isb	sy
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	617b      	str	r3, [r7, #20]
 800cffa:	e7fe      	b.n	800cffa <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cffc:	4b20      	ldr	r3, [pc, #128]	; (800d080 <xTaskGenericNotifyFromISR+0x198>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d11d      	bne.n	800d040 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d006:	3304      	adds	r3, #4
 800d008:	4618      	mov	r0, r3
 800d00a:	f7fd fd93 	bl	800ab34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d012:	4b1c      	ldr	r3, [pc, #112]	; (800d084 <xTaskGenericNotifyFromISR+0x19c>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	429a      	cmp	r2, r3
 800d018:	d903      	bls.n	800d022 <xTaskGenericNotifyFromISR+0x13a>
 800d01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d01e:	4a19      	ldr	r2, [pc, #100]	; (800d084 <xTaskGenericNotifyFromISR+0x19c>)
 800d020:	6013      	str	r3, [r2, #0]
 800d022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d026:	4613      	mov	r3, r2
 800d028:	009b      	lsls	r3, r3, #2
 800d02a:	4413      	add	r3, r2
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	4a16      	ldr	r2, [pc, #88]	; (800d088 <xTaskGenericNotifyFromISR+0x1a0>)
 800d030:	441a      	add	r2, r3
 800d032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d034:	3304      	adds	r3, #4
 800d036:	4619      	mov	r1, r3
 800d038:	4610      	mov	r0, r2
 800d03a:	f7fd fd1e 	bl	800aa7a <vListInsertEnd>
 800d03e:	e005      	b.n	800d04c <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d042:	3318      	adds	r3, #24
 800d044:	4619      	mov	r1, r3
 800d046:	4811      	ldr	r0, [pc, #68]	; (800d08c <xTaskGenericNotifyFromISR+0x1a4>)
 800d048:	f7fd fd17 	bl	800aa7a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d050:	4b0f      	ldr	r3, [pc, #60]	; (800d090 <xTaskGenericNotifyFromISR+0x1a8>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d056:	429a      	cmp	r2, r3
 800d058:	d908      	bls.n	800d06c <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d05a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d002      	beq.n	800d066 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d062:	2201      	movs	r2, #1
 800d064:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d066:	4b0b      	ldr	r3, [pc, #44]	; (800d094 <xTaskGenericNotifyFromISR+0x1ac>)
 800d068:	2201      	movs	r2, #1
 800d06a:	601a      	str	r2, [r3, #0]
 800d06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800d076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800d078:	4618      	mov	r0, r3
 800d07a:	3738      	adds	r7, #56	; 0x38
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}
 800d080:	200030c4 	.word	0x200030c4
 800d084:	200030a4 	.word	0x200030a4
 800d088:	20002bcc 	.word	0x20002bcc
 800d08c:	2000305c 	.word	0x2000305c
 800d090:	20002bc8 	.word	0x20002bc8
 800d094:	200030b0 	.word	0x200030b0

0800d098 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d0a2:	4b21      	ldr	r3, [pc, #132]	; (800d128 <prvAddCurrentTaskToDelayedList+0x90>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0a8:	4b20      	ldr	r3, [pc, #128]	; (800d12c <prvAddCurrentTaskToDelayedList+0x94>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	3304      	adds	r3, #4
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7fd fd40 	bl	800ab34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ba:	d10a      	bne.n	800d0d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d007      	beq.n	800d0d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0c2:	4b1a      	ldr	r3, [pc, #104]	; (800d12c <prvAddCurrentTaskToDelayedList+0x94>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	3304      	adds	r3, #4
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	4819      	ldr	r0, [pc, #100]	; (800d130 <prvAddCurrentTaskToDelayedList+0x98>)
 800d0cc:	f7fd fcd5 	bl	800aa7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d0d0:	e026      	b.n	800d120 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d0d2:	68fa      	ldr	r2, [r7, #12]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	4413      	add	r3, r2
 800d0d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d0da:	4b14      	ldr	r3, [pc, #80]	; (800d12c <prvAddCurrentTaskToDelayedList+0x94>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	68ba      	ldr	r2, [r7, #8]
 800d0e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d0e2:	68ba      	ldr	r2, [r7, #8]
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d209      	bcs.n	800d0fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0ea:	4b12      	ldr	r3, [pc, #72]	; (800d134 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	4b0f      	ldr	r3, [pc, #60]	; (800d12c <prvAddCurrentTaskToDelayedList+0x94>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	3304      	adds	r3, #4
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	4610      	mov	r0, r2
 800d0f8:	f7fd fce3 	bl	800aac2 <vListInsert>
}
 800d0fc:	e010      	b.n	800d120 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0fe:	4b0e      	ldr	r3, [pc, #56]	; (800d138 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	4b0a      	ldr	r3, [pc, #40]	; (800d12c <prvAddCurrentTaskToDelayedList+0x94>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	3304      	adds	r3, #4
 800d108:	4619      	mov	r1, r3
 800d10a:	4610      	mov	r0, r2
 800d10c:	f7fd fcd9 	bl	800aac2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d110:	4b0a      	ldr	r3, [pc, #40]	; (800d13c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	68ba      	ldr	r2, [r7, #8]
 800d116:	429a      	cmp	r2, r3
 800d118:	d202      	bcs.n	800d120 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d11a:	4a08      	ldr	r2, [pc, #32]	; (800d13c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	6013      	str	r3, [r2, #0]
}
 800d120:	bf00      	nop
 800d122:	3710      	adds	r7, #16
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	200030a0 	.word	0x200030a0
 800d12c:	20002bc8 	.word	0x20002bc8
 800d130:	20003088 	.word	0x20003088
 800d134:	20003058 	.word	0x20003058
 800d138:	20003054 	.word	0x20003054
 800d13c:	200030bc 	.word	0x200030bc

0800d140 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b08a      	sub	sp, #40	; 0x28
 800d144:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d146:	2300      	movs	r3, #0
 800d148:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d14a:	f000 faff 	bl	800d74c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d14e:	4b1c      	ldr	r3, [pc, #112]	; (800d1c0 <xTimerCreateTimerTask+0x80>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d021      	beq.n	800d19a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d156:	2300      	movs	r3, #0
 800d158:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d15a:	2300      	movs	r3, #0
 800d15c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d15e:	1d3a      	adds	r2, r7, #4
 800d160:	f107 0108 	add.w	r1, r7, #8
 800d164:	f107 030c 	add.w	r3, r7, #12
 800d168:	4618      	mov	r0, r3
 800d16a:	f7fd fc3f 	bl	800a9ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d16e:	6879      	ldr	r1, [r7, #4]
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	68fa      	ldr	r2, [r7, #12]
 800d174:	9202      	str	r2, [sp, #8]
 800d176:	9301      	str	r3, [sp, #4]
 800d178:	2302      	movs	r3, #2
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	2300      	movs	r3, #0
 800d17e:	460a      	mov	r2, r1
 800d180:	4910      	ldr	r1, [pc, #64]	; (800d1c4 <xTimerCreateTimerTask+0x84>)
 800d182:	4811      	ldr	r0, [pc, #68]	; (800d1c8 <xTimerCreateTimerTask+0x88>)
 800d184:	f7fe fda2 	bl	800bccc <xTaskCreateStatic>
 800d188:	4602      	mov	r2, r0
 800d18a:	4b10      	ldr	r3, [pc, #64]	; (800d1cc <xTimerCreateTimerTask+0x8c>)
 800d18c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d18e:	4b0f      	ldr	r3, [pc, #60]	; (800d1cc <xTimerCreateTimerTask+0x8c>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d001      	beq.n	800d19a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d196:	2301      	movs	r3, #1
 800d198:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d109      	bne.n	800d1b4 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800d1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a4:	f383 8811 	msr	BASEPRI, r3
 800d1a8:	f3bf 8f6f 	isb	sy
 800d1ac:	f3bf 8f4f 	dsb	sy
 800d1b0:	613b      	str	r3, [r7, #16]
 800d1b2:	e7fe      	b.n	800d1b2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800d1b4:	697b      	ldr	r3, [r7, #20]
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3718      	adds	r7, #24
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	200030f8 	.word	0x200030f8
 800d1c4:	08010ab0 	.word	0x08010ab0
 800d1c8:	0800d301 	.word	0x0800d301
 800d1cc:	200030fc 	.word	0x200030fc

0800d1d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b08a      	sub	sp, #40	; 0x28
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	60f8      	str	r0, [r7, #12]
 800d1d8:	60b9      	str	r1, [r7, #8]
 800d1da:	607a      	str	r2, [r7, #4]
 800d1dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d109      	bne.n	800d1fc <xTimerGenericCommand+0x2c>
 800d1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ec:	f383 8811 	msr	BASEPRI, r3
 800d1f0:	f3bf 8f6f 	isb	sy
 800d1f4:	f3bf 8f4f 	dsb	sy
 800d1f8:	623b      	str	r3, [r7, #32]
 800d1fa:	e7fe      	b.n	800d1fa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d1fc:	4b19      	ldr	r3, [pc, #100]	; (800d264 <xTimerGenericCommand+0x94>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d02a      	beq.n	800d25a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	2b05      	cmp	r3, #5
 800d214:	dc18      	bgt.n	800d248 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d216:	f7ff fbd1 	bl	800c9bc <xTaskGetSchedulerState>
 800d21a:	4603      	mov	r3, r0
 800d21c:	2b02      	cmp	r3, #2
 800d21e:	d109      	bne.n	800d234 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d220:	4b10      	ldr	r3, [pc, #64]	; (800d264 <xTimerGenericCommand+0x94>)
 800d222:	6818      	ldr	r0, [r3, #0]
 800d224:	f107 0110 	add.w	r1, r7, #16
 800d228:	2300      	movs	r3, #0
 800d22a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d22c:	f7fd ff04 	bl	800b038 <xQueueGenericSend>
 800d230:	6278      	str	r0, [r7, #36]	; 0x24
 800d232:	e012      	b.n	800d25a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d234:	4b0b      	ldr	r3, [pc, #44]	; (800d264 <xTimerGenericCommand+0x94>)
 800d236:	6818      	ldr	r0, [r3, #0]
 800d238:	f107 0110 	add.w	r1, r7, #16
 800d23c:	2300      	movs	r3, #0
 800d23e:	2200      	movs	r2, #0
 800d240:	f7fd fefa 	bl	800b038 <xQueueGenericSend>
 800d244:	6278      	str	r0, [r7, #36]	; 0x24
 800d246:	e008      	b.n	800d25a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d248:	4b06      	ldr	r3, [pc, #24]	; (800d264 <xTimerGenericCommand+0x94>)
 800d24a:	6818      	ldr	r0, [r3, #0]
 800d24c:	f107 0110 	add.w	r1, r7, #16
 800d250:	2300      	movs	r3, #0
 800d252:	683a      	ldr	r2, [r7, #0]
 800d254:	f7fd ffea 	bl	800b22c <xQueueGenericSendFromISR>
 800d258:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3728      	adds	r7, #40	; 0x28
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}
 800d264:	200030f8 	.word	0x200030f8

0800d268 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b088      	sub	sp, #32
 800d26c:	af02      	add	r7, sp, #8
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d272:	4b22      	ldr	r3, [pc, #136]	; (800d2fc <prvProcessExpiredTimer+0x94>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	68db      	ldr	r3, [r3, #12]
 800d27a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	3304      	adds	r3, #4
 800d280:	4618      	mov	r0, r3
 800d282:	f7fd fc57 	bl	800ab34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d28c:	f003 0304 	and.w	r3, r3, #4
 800d290:	2b00      	cmp	r3, #0
 800d292:	d021      	beq.n	800d2d8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	699a      	ldr	r2, [r3, #24]
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	18d1      	adds	r1, r2, r3
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	683a      	ldr	r2, [r7, #0]
 800d2a0:	6978      	ldr	r0, [r7, #20]
 800d2a2:	f000 f8d1 	bl	800d448 <prvInsertTimerInActiveList>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d01e      	beq.n	800d2ea <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	9300      	str	r3, [sp, #0]
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	2100      	movs	r1, #0
 800d2b6:	6978      	ldr	r0, [r7, #20]
 800d2b8:	f7ff ff8a 	bl	800d1d0 <xTimerGenericCommand>
 800d2bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d112      	bne.n	800d2ea <prvProcessExpiredTimer+0x82>
 800d2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c8:	f383 8811 	msr	BASEPRI, r3
 800d2cc:	f3bf 8f6f 	isb	sy
 800d2d0:	f3bf 8f4f 	dsb	sy
 800d2d4:	60fb      	str	r3, [r7, #12]
 800d2d6:	e7fe      	b.n	800d2d6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2de:	f023 0301 	bic.w	r3, r3, #1
 800d2e2:	b2da      	uxtb	r2, r3
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	6a1b      	ldr	r3, [r3, #32]
 800d2ee:	6978      	ldr	r0, [r7, #20]
 800d2f0:	4798      	blx	r3
}
 800d2f2:	bf00      	nop
 800d2f4:	3718      	adds	r7, #24
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	200030f0 	.word	0x200030f0

0800d300 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d308:	f107 0308 	add.w	r3, r7, #8
 800d30c:	4618      	mov	r0, r3
 800d30e:	f000 f857 	bl	800d3c0 <prvGetNextExpireTime>
 800d312:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	4619      	mov	r1, r3
 800d318:	68f8      	ldr	r0, [r7, #12]
 800d31a:	f000 f803 	bl	800d324 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d31e:	f000 f8d5 	bl	800d4cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d322:	e7f1      	b.n	800d308 <prvTimerTask+0x8>

0800d324 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b084      	sub	sp, #16
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d32e:	f7fe ff03 	bl	800c138 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d332:	f107 0308 	add.w	r3, r7, #8
 800d336:	4618      	mov	r0, r3
 800d338:	f000 f866 	bl	800d408 <prvSampleTimeNow>
 800d33c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d130      	bne.n	800d3a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d10a      	bne.n	800d360 <prvProcessTimerOrBlockTask+0x3c>
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d806      	bhi.n	800d360 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d352:	f7fe ff37 	bl	800c1c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d356:	68f9      	ldr	r1, [r7, #12]
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f7ff ff85 	bl	800d268 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d35e:	e024      	b.n	800d3aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d008      	beq.n	800d378 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d366:	4b13      	ldr	r3, [pc, #76]	; (800d3b4 <prvProcessTimerOrBlockTask+0x90>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d101      	bne.n	800d374 <prvProcessTimerOrBlockTask+0x50>
 800d370:	2301      	movs	r3, #1
 800d372:	e000      	b.n	800d376 <prvProcessTimerOrBlockTask+0x52>
 800d374:	2300      	movs	r3, #0
 800d376:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d378:	4b0f      	ldr	r3, [pc, #60]	; (800d3b8 <prvProcessTimerOrBlockTask+0x94>)
 800d37a:	6818      	ldr	r0, [r3, #0]
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	1ad3      	subs	r3, r2, r3
 800d382:	683a      	ldr	r2, [r7, #0]
 800d384:	4619      	mov	r1, r3
 800d386:	f7fe fc6d 	bl	800bc64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d38a:	f7fe ff1b 	bl	800c1c4 <xTaskResumeAll>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d10a      	bne.n	800d3aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d394:	4b09      	ldr	r3, [pc, #36]	; (800d3bc <prvProcessTimerOrBlockTask+0x98>)
 800d396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d39a:	601a      	str	r2, [r3, #0]
 800d39c:	f3bf 8f4f 	dsb	sy
 800d3a0:	f3bf 8f6f 	isb	sy
}
 800d3a4:	e001      	b.n	800d3aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d3a6:	f7fe ff0d 	bl	800c1c4 <xTaskResumeAll>
}
 800d3aa:	bf00      	nop
 800d3ac:	3710      	adds	r7, #16
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	200030f4 	.word	0x200030f4
 800d3b8:	200030f8 	.word	0x200030f8
 800d3bc:	e000ed04 	.word	0xe000ed04

0800d3c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b085      	sub	sp, #20
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d3c8:	4b0e      	ldr	r3, [pc, #56]	; (800d404 <prvGetNextExpireTime+0x44>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d101      	bne.n	800d3d6 <prvGetNextExpireTime+0x16>
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	e000      	b.n	800d3d8 <prvGetNextExpireTime+0x18>
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d105      	bne.n	800d3f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d3e4:	4b07      	ldr	r3, [pc, #28]	; (800d404 <prvGetNextExpireTime+0x44>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	68db      	ldr	r3, [r3, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	60fb      	str	r3, [r7, #12]
 800d3ee:	e001      	b.n	800d3f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3714      	adds	r7, #20
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr
 800d402:	bf00      	nop
 800d404:	200030f0 	.word	0x200030f0

0800d408 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b084      	sub	sp, #16
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d410:	f7fe ff74 	bl	800c2fc <xTaskGetTickCount>
 800d414:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d416:	4b0b      	ldr	r3, [pc, #44]	; (800d444 <prvSampleTimeNow+0x3c>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	68fa      	ldr	r2, [r7, #12]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d205      	bcs.n	800d42c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d420:	f000 f930 	bl	800d684 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2201      	movs	r2, #1
 800d428:	601a      	str	r2, [r3, #0]
 800d42a:	e002      	b.n	800d432 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2200      	movs	r2, #0
 800d430:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d432:	4a04      	ldr	r2, [pc, #16]	; (800d444 <prvSampleTimeNow+0x3c>)
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d438:	68fb      	ldr	r3, [r7, #12]
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3710      	adds	r7, #16
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	20003100 	.word	0x20003100

0800d448 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b086      	sub	sp, #24
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	607a      	str	r2, [r7, #4]
 800d454:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d456:	2300      	movs	r3, #0
 800d458:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	68ba      	ldr	r2, [r7, #8]
 800d45e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	68fa      	ldr	r2, [r7, #12]
 800d464:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d466:	68ba      	ldr	r2, [r7, #8]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d812      	bhi.n	800d494 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	1ad2      	subs	r2, r2, r3
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	699b      	ldr	r3, [r3, #24]
 800d478:	429a      	cmp	r2, r3
 800d47a:	d302      	bcc.n	800d482 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d47c:	2301      	movs	r3, #1
 800d47e:	617b      	str	r3, [r7, #20]
 800d480:	e01b      	b.n	800d4ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d482:	4b10      	ldr	r3, [pc, #64]	; (800d4c4 <prvInsertTimerInActiveList+0x7c>)
 800d484:	681a      	ldr	r2, [r3, #0]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	3304      	adds	r3, #4
 800d48a:	4619      	mov	r1, r3
 800d48c:	4610      	mov	r0, r2
 800d48e:	f7fd fb18 	bl	800aac2 <vListInsert>
 800d492:	e012      	b.n	800d4ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d206      	bcs.n	800d4aa <prvInsertTimerInActiveList+0x62>
 800d49c:	68ba      	ldr	r2, [r7, #8]
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d302      	bcc.n	800d4aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	617b      	str	r3, [r7, #20]
 800d4a8:	e007      	b.n	800d4ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d4aa:	4b07      	ldr	r3, [pc, #28]	; (800d4c8 <prvInsertTimerInActiveList+0x80>)
 800d4ac:	681a      	ldr	r2, [r3, #0]
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	3304      	adds	r3, #4
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	4610      	mov	r0, r2
 800d4b6:	f7fd fb04 	bl	800aac2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d4ba:	697b      	ldr	r3, [r7, #20]
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	3718      	adds	r7, #24
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}
 800d4c4:	200030f4 	.word	0x200030f4
 800d4c8:	200030f0 	.word	0x200030f0

0800d4cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b08e      	sub	sp, #56	; 0x38
 800d4d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d4d2:	e0c6      	b.n	800d662 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	da17      	bge.n	800d50a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d4da:	1d3b      	adds	r3, r7, #4
 800d4dc:	3304      	adds	r3, #4
 800d4de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d109      	bne.n	800d4fa <prvProcessReceivedCommands+0x2e>
 800d4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ea:	f383 8811 	msr	BASEPRI, r3
 800d4ee:	f3bf 8f6f 	isb	sy
 800d4f2:	f3bf 8f4f 	dsb	sy
 800d4f6:	61fb      	str	r3, [r7, #28]
 800d4f8:	e7fe      	b.n	800d4f8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d500:	6850      	ldr	r0, [r2, #4]
 800d502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d504:	6892      	ldr	r2, [r2, #8]
 800d506:	4611      	mov	r1, r2
 800d508:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	f2c0 80a7 	blt.w	800d660 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d518:	695b      	ldr	r3, [r3, #20]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d004      	beq.n	800d528 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d520:	3304      	adds	r3, #4
 800d522:	4618      	mov	r0, r3
 800d524:	f7fd fb06 	bl	800ab34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d528:	463b      	mov	r3, r7
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7ff ff6c 	bl	800d408 <prvSampleTimeNow>
 800d530:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2b09      	cmp	r3, #9
 800d536:	f200 8094 	bhi.w	800d662 <prvProcessReceivedCommands+0x196>
 800d53a:	a201      	add	r2, pc, #4	; (adr r2, 800d540 <prvProcessReceivedCommands+0x74>)
 800d53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d540:	0800d569 	.word	0x0800d569
 800d544:	0800d569 	.word	0x0800d569
 800d548:	0800d569 	.word	0x0800d569
 800d54c:	0800d5db 	.word	0x0800d5db
 800d550:	0800d5ef 	.word	0x0800d5ef
 800d554:	0800d637 	.word	0x0800d637
 800d558:	0800d569 	.word	0x0800d569
 800d55c:	0800d569 	.word	0x0800d569
 800d560:	0800d5db 	.word	0x0800d5db
 800d564:	0800d5ef 	.word	0x0800d5ef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d56a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d56e:	f043 0301 	orr.w	r3, r3, #1
 800d572:	b2da      	uxtb	r2, r3
 800d574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d576:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d57a:	68ba      	ldr	r2, [r7, #8]
 800d57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57e:	699b      	ldr	r3, [r3, #24]
 800d580:	18d1      	adds	r1, r2, r3
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d588:	f7ff ff5e 	bl	800d448 <prvInsertTimerInActiveList>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d067      	beq.n	800d662 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d594:	6a1b      	ldr	r3, [r3, #32]
 800d596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d598:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5a0:	f003 0304 	and.w	r3, r3, #4
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d05c      	beq.n	800d662 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d5a8:	68ba      	ldr	r2, [r7, #8]
 800d5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ac:	699b      	ldr	r3, [r3, #24]
 800d5ae:	441a      	add	r2, r3
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	9300      	str	r3, [sp, #0]
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	2100      	movs	r1, #0
 800d5b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5ba:	f7ff fe09 	bl	800d1d0 <xTimerGenericCommand>
 800d5be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d5c0:	6a3b      	ldr	r3, [r7, #32]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d14d      	bne.n	800d662 <prvProcessReceivedCommands+0x196>
 800d5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ca:	f383 8811 	msr	BASEPRI, r3
 800d5ce:	f3bf 8f6f 	isb	sy
 800d5d2:	f3bf 8f4f 	dsb	sy
 800d5d6:	61bb      	str	r3, [r7, #24]
 800d5d8:	e7fe      	b.n	800d5d8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5e0:	f023 0301 	bic.w	r3, r3, #1
 800d5e4:	b2da      	uxtb	r2, r3
 800d5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d5ec:	e039      	b.n	800d662 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5f4:	f043 0301 	orr.w	r3, r3, #1
 800d5f8:	b2da      	uxtb	r2, r3
 800d5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d600:	68ba      	ldr	r2, [r7, #8]
 800d602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d604:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d608:	699b      	ldr	r3, [r3, #24]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d109      	bne.n	800d622 <prvProcessReceivedCommands+0x156>
 800d60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d612:	f383 8811 	msr	BASEPRI, r3
 800d616:	f3bf 8f6f 	isb	sy
 800d61a:	f3bf 8f4f 	dsb	sy
 800d61e:	617b      	str	r3, [r7, #20]
 800d620:	e7fe      	b.n	800d620 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d624:	699a      	ldr	r2, [r3, #24]
 800d626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d628:	18d1      	adds	r1, r2, r3
 800d62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d62e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d630:	f7ff ff0a 	bl	800d448 <prvInsertTimerInActiveList>
					break;
 800d634:	e015      	b.n	800d662 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d638:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d63c:	f003 0302 	and.w	r3, r3, #2
 800d640:	2b00      	cmp	r3, #0
 800d642:	d103      	bne.n	800d64c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800d644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d646:	f000 fbc5 	bl	800ddd4 <vPortFree>
 800d64a:	e00a      	b.n	800d662 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d64e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d652:	f023 0301 	bic.w	r3, r3, #1
 800d656:	b2da      	uxtb	r2, r3
 800d658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d65e:	e000      	b.n	800d662 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d660:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d662:	4b07      	ldr	r3, [pc, #28]	; (800d680 <prvProcessReceivedCommands+0x1b4>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	1d39      	adds	r1, r7, #4
 800d668:	2200      	movs	r2, #0
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7fd fefc 	bl	800b468 <xQueueReceive>
 800d670:	4603      	mov	r3, r0
 800d672:	2b00      	cmp	r3, #0
 800d674:	f47f af2e 	bne.w	800d4d4 <prvProcessReceivedCommands+0x8>
	}
}
 800d678:	bf00      	nop
 800d67a:	3730      	adds	r7, #48	; 0x30
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	200030f8 	.word	0x200030f8

0800d684 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b088      	sub	sp, #32
 800d688:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d68a:	e047      	b.n	800d71c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d68c:	4b2d      	ldr	r3, [pc, #180]	; (800d744 <prvSwitchTimerLists+0xc0>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	68db      	ldr	r3, [r3, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d696:	4b2b      	ldr	r3, [pc, #172]	; (800d744 <prvSwitchTimerLists+0xc0>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	68db      	ldr	r3, [r3, #12]
 800d69e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	3304      	adds	r3, #4
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7fd fa45 	bl	800ab34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	6a1b      	ldr	r3, [r3, #32]
 800d6ae:	68f8      	ldr	r0, [r7, #12]
 800d6b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6b8:	f003 0304 	and.w	r3, r3, #4
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d02d      	beq.n	800d71c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	699b      	ldr	r3, [r3, #24]
 800d6c4:	693a      	ldr	r2, [r7, #16]
 800d6c6:	4413      	add	r3, r2
 800d6c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d6ca:	68ba      	ldr	r2, [r7, #8]
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d90e      	bls.n	800d6f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	68ba      	ldr	r2, [r7, #8]
 800d6d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	68fa      	ldr	r2, [r7, #12]
 800d6dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d6de:	4b19      	ldr	r3, [pc, #100]	; (800d744 <prvSwitchTimerLists+0xc0>)
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	3304      	adds	r3, #4
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	4610      	mov	r0, r2
 800d6ea:	f7fd f9ea 	bl	800aac2 <vListInsert>
 800d6ee:	e015      	b.n	800d71c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	9300      	str	r3, [sp, #0]
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	693a      	ldr	r2, [r7, #16]
 800d6f8:	2100      	movs	r1, #0
 800d6fa:	68f8      	ldr	r0, [r7, #12]
 800d6fc:	f7ff fd68 	bl	800d1d0 <xTimerGenericCommand>
 800d700:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d109      	bne.n	800d71c <prvSwitchTimerLists+0x98>
 800d708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70c:	f383 8811 	msr	BASEPRI, r3
 800d710:	f3bf 8f6f 	isb	sy
 800d714:	f3bf 8f4f 	dsb	sy
 800d718:	603b      	str	r3, [r7, #0]
 800d71a:	e7fe      	b.n	800d71a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d71c:	4b09      	ldr	r3, [pc, #36]	; (800d744 <prvSwitchTimerLists+0xc0>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d1b2      	bne.n	800d68c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d726:	4b07      	ldr	r3, [pc, #28]	; (800d744 <prvSwitchTimerLists+0xc0>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d72c:	4b06      	ldr	r3, [pc, #24]	; (800d748 <prvSwitchTimerLists+0xc4>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a04      	ldr	r2, [pc, #16]	; (800d744 <prvSwitchTimerLists+0xc0>)
 800d732:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d734:	4a04      	ldr	r2, [pc, #16]	; (800d748 <prvSwitchTimerLists+0xc4>)
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	6013      	str	r3, [r2, #0]
}
 800d73a:	bf00      	nop
 800d73c:	3718      	adds	r7, #24
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	200030f0 	.word	0x200030f0
 800d748:	200030f4 	.word	0x200030f4

0800d74c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d752:	f000 f963 	bl	800da1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d756:	4b15      	ldr	r3, [pc, #84]	; (800d7ac <prvCheckForValidListAndQueue+0x60>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d120      	bne.n	800d7a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d75e:	4814      	ldr	r0, [pc, #80]	; (800d7b0 <prvCheckForValidListAndQueue+0x64>)
 800d760:	f7fd f95e 	bl	800aa20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d764:	4813      	ldr	r0, [pc, #76]	; (800d7b4 <prvCheckForValidListAndQueue+0x68>)
 800d766:	f7fd f95b 	bl	800aa20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d76a:	4b13      	ldr	r3, [pc, #76]	; (800d7b8 <prvCheckForValidListAndQueue+0x6c>)
 800d76c:	4a10      	ldr	r2, [pc, #64]	; (800d7b0 <prvCheckForValidListAndQueue+0x64>)
 800d76e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d770:	4b12      	ldr	r3, [pc, #72]	; (800d7bc <prvCheckForValidListAndQueue+0x70>)
 800d772:	4a10      	ldr	r2, [pc, #64]	; (800d7b4 <prvCheckForValidListAndQueue+0x68>)
 800d774:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d776:	2300      	movs	r3, #0
 800d778:	9300      	str	r3, [sp, #0]
 800d77a:	4b11      	ldr	r3, [pc, #68]	; (800d7c0 <prvCheckForValidListAndQueue+0x74>)
 800d77c:	4a11      	ldr	r2, [pc, #68]	; (800d7c4 <prvCheckForValidListAndQueue+0x78>)
 800d77e:	2110      	movs	r1, #16
 800d780:	200a      	movs	r0, #10
 800d782:	f7fd fa69 	bl	800ac58 <xQueueGenericCreateStatic>
 800d786:	4602      	mov	r2, r0
 800d788:	4b08      	ldr	r3, [pc, #32]	; (800d7ac <prvCheckForValidListAndQueue+0x60>)
 800d78a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d78c:	4b07      	ldr	r3, [pc, #28]	; (800d7ac <prvCheckForValidListAndQueue+0x60>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d005      	beq.n	800d7a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d794:	4b05      	ldr	r3, [pc, #20]	; (800d7ac <prvCheckForValidListAndQueue+0x60>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	490b      	ldr	r1, [pc, #44]	; (800d7c8 <prvCheckForValidListAndQueue+0x7c>)
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7fe fa10 	bl	800bbc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d7a0:	f000 f96a 	bl	800da78 <vPortExitCritical>
}
 800d7a4:	bf00      	nop
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	200030f8 	.word	0x200030f8
 800d7b0:	200030c8 	.word	0x200030c8
 800d7b4:	200030dc 	.word	0x200030dc
 800d7b8:	200030f0 	.word	0x200030f0
 800d7bc:	200030f4 	.word	0x200030f4
 800d7c0:	200031a4 	.word	0x200031a4
 800d7c4:	20003104 	.word	0x20003104
 800d7c8:	08010ab8 	.word	0x08010ab8

0800d7cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b085      	sub	sp, #20
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	60b9      	str	r1, [r7, #8]
 800d7d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	3b04      	subs	r3, #4
 800d7dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d7e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	3b04      	subs	r3, #4
 800d7ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	f023 0201 	bic.w	r2, r3, #1
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	3b04      	subs	r3, #4
 800d7fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d7fc:	4a0c      	ldr	r2, [pc, #48]	; (800d830 <pxPortInitialiseStack+0x64>)
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	3b14      	subs	r3, #20
 800d806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d808:	687a      	ldr	r2, [r7, #4]
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	3b04      	subs	r3, #4
 800d812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f06f 0202 	mvn.w	r2, #2
 800d81a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	3b20      	subs	r3, #32
 800d820:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d822:	68fb      	ldr	r3, [r7, #12]
}
 800d824:	4618      	mov	r0, r3
 800d826:	3714      	adds	r7, #20
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr
 800d830:	0800d835 	.word	0x0800d835

0800d834 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d834:	b480      	push	{r7}
 800d836:	b085      	sub	sp, #20
 800d838:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d83a:	2300      	movs	r3, #0
 800d83c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d83e:	4b11      	ldr	r3, [pc, #68]	; (800d884 <prvTaskExitError+0x50>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d846:	d009      	beq.n	800d85c <prvTaskExitError+0x28>
 800d848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d84c:	f383 8811 	msr	BASEPRI, r3
 800d850:	f3bf 8f6f 	isb	sy
 800d854:	f3bf 8f4f 	dsb	sy
 800d858:	60fb      	str	r3, [r7, #12]
 800d85a:	e7fe      	b.n	800d85a <prvTaskExitError+0x26>
 800d85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d860:	f383 8811 	msr	BASEPRI, r3
 800d864:	f3bf 8f6f 	isb	sy
 800d868:	f3bf 8f4f 	dsb	sy
 800d86c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d86e:	bf00      	nop
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d0fc      	beq.n	800d870 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d876:	bf00      	nop
 800d878:	3714      	adds	r7, #20
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
 800d882:	bf00      	nop
 800d884:	20000010 	.word	0x20000010
	...

0800d890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d890:	4b07      	ldr	r3, [pc, #28]	; (800d8b0 <pxCurrentTCBConst2>)
 800d892:	6819      	ldr	r1, [r3, #0]
 800d894:	6808      	ldr	r0, [r1, #0]
 800d896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d89a:	f380 8809 	msr	PSP, r0
 800d89e:	f3bf 8f6f 	isb	sy
 800d8a2:	f04f 0000 	mov.w	r0, #0
 800d8a6:	f380 8811 	msr	BASEPRI, r0
 800d8aa:	4770      	bx	lr
 800d8ac:	f3af 8000 	nop.w

0800d8b0 <pxCurrentTCBConst2>:
 800d8b0:	20002bc8 	.word	0x20002bc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d8b4:	bf00      	nop
 800d8b6:	bf00      	nop

0800d8b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d8b8:	4808      	ldr	r0, [pc, #32]	; (800d8dc <prvPortStartFirstTask+0x24>)
 800d8ba:	6800      	ldr	r0, [r0, #0]
 800d8bc:	6800      	ldr	r0, [r0, #0]
 800d8be:	f380 8808 	msr	MSP, r0
 800d8c2:	f04f 0000 	mov.w	r0, #0
 800d8c6:	f380 8814 	msr	CONTROL, r0
 800d8ca:	b662      	cpsie	i
 800d8cc:	b661      	cpsie	f
 800d8ce:	f3bf 8f4f 	dsb	sy
 800d8d2:	f3bf 8f6f 	isb	sy
 800d8d6:	df00      	svc	0
 800d8d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d8da:	bf00      	nop
 800d8dc:	e000ed08 	.word	0xe000ed08

0800d8e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b086      	sub	sp, #24
 800d8e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d8e6:	4b44      	ldr	r3, [pc, #272]	; (800d9f8 <xPortStartScheduler+0x118>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4a44      	ldr	r2, [pc, #272]	; (800d9fc <xPortStartScheduler+0x11c>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d109      	bne.n	800d904 <xPortStartScheduler+0x24>
 800d8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f4:	f383 8811 	msr	BASEPRI, r3
 800d8f8:	f3bf 8f6f 	isb	sy
 800d8fc:	f3bf 8f4f 	dsb	sy
 800d900:	613b      	str	r3, [r7, #16]
 800d902:	e7fe      	b.n	800d902 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d904:	4b3c      	ldr	r3, [pc, #240]	; (800d9f8 <xPortStartScheduler+0x118>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4a3d      	ldr	r2, [pc, #244]	; (800da00 <xPortStartScheduler+0x120>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d109      	bne.n	800d922 <xPortStartScheduler+0x42>
 800d90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d912:	f383 8811 	msr	BASEPRI, r3
 800d916:	f3bf 8f6f 	isb	sy
 800d91a:	f3bf 8f4f 	dsb	sy
 800d91e:	60fb      	str	r3, [r7, #12]
 800d920:	e7fe      	b.n	800d920 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d922:	4b38      	ldr	r3, [pc, #224]	; (800da04 <xPortStartScheduler+0x124>)
 800d924:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	b2db      	uxtb	r3, r3
 800d92c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	22ff      	movs	r2, #255	; 0xff
 800d932:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d93c:	78fb      	ldrb	r3, [r7, #3]
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d944:	b2da      	uxtb	r2, r3
 800d946:	4b30      	ldr	r3, [pc, #192]	; (800da08 <xPortStartScheduler+0x128>)
 800d948:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d94a:	4b30      	ldr	r3, [pc, #192]	; (800da0c <xPortStartScheduler+0x12c>)
 800d94c:	2207      	movs	r2, #7
 800d94e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d950:	e009      	b.n	800d966 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800d952:	4b2e      	ldr	r3, [pc, #184]	; (800da0c <xPortStartScheduler+0x12c>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	3b01      	subs	r3, #1
 800d958:	4a2c      	ldr	r2, [pc, #176]	; (800da0c <xPortStartScheduler+0x12c>)
 800d95a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d95c:	78fb      	ldrb	r3, [r7, #3]
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	005b      	lsls	r3, r3, #1
 800d962:	b2db      	uxtb	r3, r3
 800d964:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d966:	78fb      	ldrb	r3, [r7, #3]
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d96e:	2b80      	cmp	r3, #128	; 0x80
 800d970:	d0ef      	beq.n	800d952 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d972:	4b26      	ldr	r3, [pc, #152]	; (800da0c <xPortStartScheduler+0x12c>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f1c3 0307 	rsb	r3, r3, #7
 800d97a:	2b04      	cmp	r3, #4
 800d97c:	d009      	beq.n	800d992 <xPortStartScheduler+0xb2>
 800d97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d982:	f383 8811 	msr	BASEPRI, r3
 800d986:	f3bf 8f6f 	isb	sy
 800d98a:	f3bf 8f4f 	dsb	sy
 800d98e:	60bb      	str	r3, [r7, #8]
 800d990:	e7fe      	b.n	800d990 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d992:	4b1e      	ldr	r3, [pc, #120]	; (800da0c <xPortStartScheduler+0x12c>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	021b      	lsls	r3, r3, #8
 800d998:	4a1c      	ldr	r2, [pc, #112]	; (800da0c <xPortStartScheduler+0x12c>)
 800d99a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d99c:	4b1b      	ldr	r3, [pc, #108]	; (800da0c <xPortStartScheduler+0x12c>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d9a4:	4a19      	ldr	r2, [pc, #100]	; (800da0c <xPortStartScheduler+0x12c>)
 800d9a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d9b0:	4b17      	ldr	r3, [pc, #92]	; (800da10 <xPortStartScheduler+0x130>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4a16      	ldr	r2, [pc, #88]	; (800da10 <xPortStartScheduler+0x130>)
 800d9b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d9ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d9bc:	4b14      	ldr	r3, [pc, #80]	; (800da10 <xPortStartScheduler+0x130>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	4a13      	ldr	r2, [pc, #76]	; (800da10 <xPortStartScheduler+0x130>)
 800d9c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d9c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d9c8:	f000 f8d6 	bl	800db78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d9cc:	4b11      	ldr	r3, [pc, #68]	; (800da14 <xPortStartScheduler+0x134>)
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d9d2:	f000 f8f5 	bl	800dbc0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d9d6:	4b10      	ldr	r3, [pc, #64]	; (800da18 <xPortStartScheduler+0x138>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	4a0f      	ldr	r2, [pc, #60]	; (800da18 <xPortStartScheduler+0x138>)
 800d9dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d9e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d9e2:	f7ff ff69 	bl	800d8b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d9e6:	f7fe fd51 	bl	800c48c <vTaskSwitchContext>
	prvTaskExitError();
 800d9ea:	f7ff ff23 	bl	800d834 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d9ee:	2300      	movs	r3, #0
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3718      	adds	r7, #24
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	e000ed00 	.word	0xe000ed00
 800d9fc:	410fc271 	.word	0x410fc271
 800da00:	410fc270 	.word	0x410fc270
 800da04:	e000e400 	.word	0xe000e400
 800da08:	200031f4 	.word	0x200031f4
 800da0c:	200031f8 	.word	0x200031f8
 800da10:	e000ed20 	.word	0xe000ed20
 800da14:	20000010 	.word	0x20000010
 800da18:	e000ef34 	.word	0xe000ef34

0800da1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
 800da22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da26:	f383 8811 	msr	BASEPRI, r3
 800da2a:	f3bf 8f6f 	isb	sy
 800da2e:	f3bf 8f4f 	dsb	sy
 800da32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800da34:	4b0e      	ldr	r3, [pc, #56]	; (800da70 <vPortEnterCritical+0x54>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	3301      	adds	r3, #1
 800da3a:	4a0d      	ldr	r2, [pc, #52]	; (800da70 <vPortEnterCritical+0x54>)
 800da3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800da3e:	4b0c      	ldr	r3, [pc, #48]	; (800da70 <vPortEnterCritical+0x54>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	2b01      	cmp	r3, #1
 800da44:	d10e      	bne.n	800da64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800da46:	4b0b      	ldr	r3, [pc, #44]	; (800da74 <vPortEnterCritical+0x58>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d009      	beq.n	800da64 <vPortEnterCritical+0x48>
 800da50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da54:	f383 8811 	msr	BASEPRI, r3
 800da58:	f3bf 8f6f 	isb	sy
 800da5c:	f3bf 8f4f 	dsb	sy
 800da60:	603b      	str	r3, [r7, #0]
 800da62:	e7fe      	b.n	800da62 <vPortEnterCritical+0x46>
	}
}
 800da64:	bf00      	nop
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr
 800da70:	20000010 	.word	0x20000010
 800da74:	e000ed04 	.word	0xe000ed04

0800da78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800da7e:	4b11      	ldr	r3, [pc, #68]	; (800dac4 <vPortExitCritical+0x4c>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d109      	bne.n	800da9a <vPortExitCritical+0x22>
 800da86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8a:	f383 8811 	msr	BASEPRI, r3
 800da8e:	f3bf 8f6f 	isb	sy
 800da92:	f3bf 8f4f 	dsb	sy
 800da96:	607b      	str	r3, [r7, #4]
 800da98:	e7fe      	b.n	800da98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800da9a:	4b0a      	ldr	r3, [pc, #40]	; (800dac4 <vPortExitCritical+0x4c>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	3b01      	subs	r3, #1
 800daa0:	4a08      	ldr	r2, [pc, #32]	; (800dac4 <vPortExitCritical+0x4c>)
 800daa2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800daa4:	4b07      	ldr	r3, [pc, #28]	; (800dac4 <vPortExitCritical+0x4c>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d104      	bne.n	800dab6 <vPortExitCritical+0x3e>
 800daac:	2300      	movs	r3, #0
 800daae:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800dab6:	bf00      	nop
 800dab8:	370c      	adds	r7, #12
 800daba:	46bd      	mov	sp, r7
 800dabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac0:	4770      	bx	lr
 800dac2:	bf00      	nop
 800dac4:	20000010 	.word	0x20000010
	...

0800dad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dad0:	f3ef 8009 	mrs	r0, PSP
 800dad4:	f3bf 8f6f 	isb	sy
 800dad8:	4b15      	ldr	r3, [pc, #84]	; (800db30 <pxCurrentTCBConst>)
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	f01e 0f10 	tst.w	lr, #16
 800dae0:	bf08      	it	eq
 800dae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daea:	6010      	str	r0, [r2, #0]
 800daec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800daf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800daf4:	f380 8811 	msr	BASEPRI, r0
 800daf8:	f3bf 8f4f 	dsb	sy
 800dafc:	f3bf 8f6f 	isb	sy
 800db00:	f7fe fcc4 	bl	800c48c <vTaskSwitchContext>
 800db04:	f04f 0000 	mov.w	r0, #0
 800db08:	f380 8811 	msr	BASEPRI, r0
 800db0c:	bc09      	pop	{r0, r3}
 800db0e:	6819      	ldr	r1, [r3, #0]
 800db10:	6808      	ldr	r0, [r1, #0]
 800db12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db16:	f01e 0f10 	tst.w	lr, #16
 800db1a:	bf08      	it	eq
 800db1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800db20:	f380 8809 	msr	PSP, r0
 800db24:	f3bf 8f6f 	isb	sy
 800db28:	4770      	bx	lr
 800db2a:	bf00      	nop
 800db2c:	f3af 8000 	nop.w

0800db30 <pxCurrentTCBConst>:
 800db30:	20002bc8 	.word	0x20002bc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800db34:	bf00      	nop
 800db36:	bf00      	nop

0800db38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
	__asm volatile
 800db3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db42:	f383 8811 	msr	BASEPRI, r3
 800db46:	f3bf 8f6f 	isb	sy
 800db4a:	f3bf 8f4f 	dsb	sy
 800db4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800db50:	f7fe fbe4 	bl	800c31c <xTaskIncrementTick>
 800db54:	4603      	mov	r3, r0
 800db56:	2b00      	cmp	r3, #0
 800db58:	d003      	beq.n	800db62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800db5a:	4b06      	ldr	r3, [pc, #24]	; (800db74 <SysTick_Handler+0x3c>)
 800db5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db60:	601a      	str	r2, [r3, #0]
 800db62:	2300      	movs	r3, #0
 800db64:	603b      	str	r3, [r7, #0]
	__asm volatile
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800db6c:	bf00      	nop
 800db6e:	3708      	adds	r7, #8
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}
 800db74:	e000ed04 	.word	0xe000ed04

0800db78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800db78:	b480      	push	{r7}
 800db7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800db7c:	4b0b      	ldr	r3, [pc, #44]	; (800dbac <vPortSetupTimerInterrupt+0x34>)
 800db7e:	2200      	movs	r2, #0
 800db80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800db82:	4b0b      	ldr	r3, [pc, #44]	; (800dbb0 <vPortSetupTimerInterrupt+0x38>)
 800db84:	2200      	movs	r2, #0
 800db86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800db88:	4b0a      	ldr	r3, [pc, #40]	; (800dbb4 <vPortSetupTimerInterrupt+0x3c>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a0a      	ldr	r2, [pc, #40]	; (800dbb8 <vPortSetupTimerInterrupt+0x40>)
 800db8e:	fba2 2303 	umull	r2, r3, r2, r3
 800db92:	099b      	lsrs	r3, r3, #6
 800db94:	4a09      	ldr	r2, [pc, #36]	; (800dbbc <vPortSetupTimerInterrupt+0x44>)
 800db96:	3b01      	subs	r3, #1
 800db98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800db9a:	4b04      	ldr	r3, [pc, #16]	; (800dbac <vPortSetupTimerInterrupt+0x34>)
 800db9c:	2207      	movs	r2, #7
 800db9e:	601a      	str	r2, [r3, #0]
}
 800dba0:	bf00      	nop
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr
 800dbaa:	bf00      	nop
 800dbac:	e000e010 	.word	0xe000e010
 800dbb0:	e000e018 	.word	0xe000e018
 800dbb4:	20000004 	.word	0x20000004
 800dbb8:	10624dd3 	.word	0x10624dd3
 800dbbc:	e000e014 	.word	0xe000e014

0800dbc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dbc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dbd0 <vPortEnableVFP+0x10>
 800dbc4:	6801      	ldr	r1, [r0, #0]
 800dbc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dbca:	6001      	str	r1, [r0, #0]
 800dbcc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dbce:	bf00      	nop
 800dbd0:	e000ed88 	.word	0xe000ed88

0800dbd4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b085      	sub	sp, #20
 800dbd8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dbda:	f3ef 8305 	mrs	r3, IPSR
 800dbde:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2b0f      	cmp	r3, #15
 800dbe4:	d913      	bls.n	800dc0e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dbe6:	4a16      	ldr	r2, [pc, #88]	; (800dc40 <vPortValidateInterruptPriority+0x6c>)
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	4413      	add	r3, r2
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dbf0:	4b14      	ldr	r3, [pc, #80]	; (800dc44 <vPortValidateInterruptPriority+0x70>)
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	7afa      	ldrb	r2, [r7, #11]
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d209      	bcs.n	800dc0e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800dbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfe:	f383 8811 	msr	BASEPRI, r3
 800dc02:	f3bf 8f6f 	isb	sy
 800dc06:	f3bf 8f4f 	dsb	sy
 800dc0a:	607b      	str	r3, [r7, #4]
 800dc0c:	e7fe      	b.n	800dc0c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dc0e:	4b0e      	ldr	r3, [pc, #56]	; (800dc48 <vPortValidateInterruptPriority+0x74>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dc16:	4b0d      	ldr	r3, [pc, #52]	; (800dc4c <vPortValidateInterruptPriority+0x78>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d909      	bls.n	800dc32 <vPortValidateInterruptPriority+0x5e>
 800dc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc22:	f383 8811 	msr	BASEPRI, r3
 800dc26:	f3bf 8f6f 	isb	sy
 800dc2a:	f3bf 8f4f 	dsb	sy
 800dc2e:	603b      	str	r3, [r7, #0]
 800dc30:	e7fe      	b.n	800dc30 <vPortValidateInterruptPriority+0x5c>
	}
 800dc32:	bf00      	nop
 800dc34:	3714      	adds	r7, #20
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr
 800dc3e:	bf00      	nop
 800dc40:	e000e3f0 	.word	0xe000e3f0
 800dc44:	200031f4 	.word	0x200031f4
 800dc48:	e000ed0c 	.word	0xe000ed0c
 800dc4c:	200031f8 	.word	0x200031f8

0800dc50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b08a      	sub	sp, #40	; 0x28
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dc5c:	f7fe fa6c 	bl	800c138 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dc60:	4b57      	ldr	r3, [pc, #348]	; (800ddc0 <pvPortMalloc+0x170>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d101      	bne.n	800dc6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dc68:	f000 f90c 	bl	800de84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dc6c:	4b55      	ldr	r3, [pc, #340]	; (800ddc4 <pvPortMalloc+0x174>)
 800dc6e:	681a      	ldr	r2, [r3, #0]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	4013      	ands	r3, r2
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	f040 808c 	bne.w	800dd92 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d01c      	beq.n	800dcba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800dc80:	2208      	movs	r2, #8
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	4413      	add	r3, r2
 800dc86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f003 0307 	and.w	r3, r3, #7
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d013      	beq.n	800dcba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f023 0307 	bic.w	r3, r3, #7
 800dc98:	3308      	adds	r3, #8
 800dc9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f003 0307 	and.w	r3, r3, #7
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d009      	beq.n	800dcba <pvPortMalloc+0x6a>
 800dca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcaa:	f383 8811 	msr	BASEPRI, r3
 800dcae:	f3bf 8f6f 	isb	sy
 800dcb2:	f3bf 8f4f 	dsb	sy
 800dcb6:	617b      	str	r3, [r7, #20]
 800dcb8:	e7fe      	b.n	800dcb8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d068      	beq.n	800dd92 <pvPortMalloc+0x142>
 800dcc0:	4b41      	ldr	r3, [pc, #260]	; (800ddc8 <pvPortMalloc+0x178>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	687a      	ldr	r2, [r7, #4]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d863      	bhi.n	800dd92 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dcca:	4b40      	ldr	r3, [pc, #256]	; (800ddcc <pvPortMalloc+0x17c>)
 800dccc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dcce:	4b3f      	ldr	r3, [pc, #252]	; (800ddcc <pvPortMalloc+0x17c>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dcd4:	e004      	b.n	800dce0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800dcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d903      	bls.n	800dcf2 <pvPortMalloc+0xa2>
 800dcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1f1      	bne.n	800dcd6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dcf2:	4b33      	ldr	r3, [pc, #204]	; (800ddc0 <pvPortMalloc+0x170>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d04a      	beq.n	800dd92 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dcfc:	6a3b      	ldr	r3, [r7, #32]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2208      	movs	r2, #8
 800dd02:	4413      	add	r3, r2
 800dd04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	6a3b      	ldr	r3, [r7, #32]
 800dd0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd10:	685a      	ldr	r2, [r3, #4]
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	1ad2      	subs	r2, r2, r3
 800dd16:	2308      	movs	r3, #8
 800dd18:	005b      	lsls	r3, r3, #1
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	d91e      	bls.n	800dd5c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dd1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	4413      	add	r3, r2
 800dd24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd26:	69bb      	ldr	r3, [r7, #24]
 800dd28:	f003 0307 	and.w	r3, r3, #7
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d009      	beq.n	800dd44 <pvPortMalloc+0xf4>
 800dd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd34:	f383 8811 	msr	BASEPRI, r3
 800dd38:	f3bf 8f6f 	isb	sy
 800dd3c:	f3bf 8f4f 	dsb	sy
 800dd40:	613b      	str	r3, [r7, #16]
 800dd42:	e7fe      	b.n	800dd42 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd46:	685a      	ldr	r2, [r3, #4]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	1ad2      	subs	r2, r2, r3
 800dd4c:	69bb      	ldr	r3, [r7, #24]
 800dd4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dd56:	69b8      	ldr	r0, [r7, #24]
 800dd58:	f000 f8f6 	bl	800df48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dd5c:	4b1a      	ldr	r3, [pc, #104]	; (800ddc8 <pvPortMalloc+0x178>)
 800dd5e:	681a      	ldr	r2, [r3, #0]
 800dd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd62:	685b      	ldr	r3, [r3, #4]
 800dd64:	1ad3      	subs	r3, r2, r3
 800dd66:	4a18      	ldr	r2, [pc, #96]	; (800ddc8 <pvPortMalloc+0x178>)
 800dd68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dd6a:	4b17      	ldr	r3, [pc, #92]	; (800ddc8 <pvPortMalloc+0x178>)
 800dd6c:	681a      	ldr	r2, [r3, #0]
 800dd6e:	4b18      	ldr	r3, [pc, #96]	; (800ddd0 <pvPortMalloc+0x180>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	429a      	cmp	r2, r3
 800dd74:	d203      	bcs.n	800dd7e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dd76:	4b14      	ldr	r3, [pc, #80]	; (800ddc8 <pvPortMalloc+0x178>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4a15      	ldr	r2, [pc, #84]	; (800ddd0 <pvPortMalloc+0x180>)
 800dd7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd80:	685a      	ldr	r2, [r3, #4]
 800dd82:	4b10      	ldr	r3, [pc, #64]	; (800ddc4 <pvPortMalloc+0x174>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	431a      	orrs	r2, r3
 800dd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd8e:	2200      	movs	r2, #0
 800dd90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dd92:	f7fe fa17 	bl	800c1c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd96:	69fb      	ldr	r3, [r7, #28]
 800dd98:	f003 0307 	and.w	r3, r3, #7
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d009      	beq.n	800ddb4 <pvPortMalloc+0x164>
 800dda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda4:	f383 8811 	msr	BASEPRI, r3
 800dda8:	f3bf 8f6f 	isb	sy
 800ddac:	f3bf 8f4f 	dsb	sy
 800ddb0:	60fb      	str	r3, [r7, #12]
 800ddb2:	e7fe      	b.n	800ddb2 <pvPortMalloc+0x162>
	return pvReturn;
 800ddb4:	69fb      	ldr	r3, [r7, #28]
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3728      	adds	r7, #40	; 0x28
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	20005914 	.word	0x20005914
 800ddc4:	20005920 	.word	0x20005920
 800ddc8:	20005918 	.word	0x20005918
 800ddcc:	2000590c 	.word	0x2000590c
 800ddd0:	2000591c 	.word	0x2000591c

0800ddd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b086      	sub	sp, #24
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d046      	beq.n	800de74 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dde6:	2308      	movs	r3, #8
 800dde8:	425b      	negs	r3, r3
 800ddea:	697a      	ldr	r2, [r7, #20]
 800ddec:	4413      	add	r3, r2
 800ddee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ddf0:	697b      	ldr	r3, [r7, #20]
 800ddf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	685a      	ldr	r2, [r3, #4]
 800ddf8:	4b20      	ldr	r3, [pc, #128]	; (800de7c <vPortFree+0xa8>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4013      	ands	r3, r2
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d109      	bne.n	800de16 <vPortFree+0x42>
 800de02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de06:	f383 8811 	msr	BASEPRI, r3
 800de0a:	f3bf 8f6f 	isb	sy
 800de0e:	f3bf 8f4f 	dsb	sy
 800de12:	60fb      	str	r3, [r7, #12]
 800de14:	e7fe      	b.n	800de14 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d009      	beq.n	800de32 <vPortFree+0x5e>
 800de1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de22:	f383 8811 	msr	BASEPRI, r3
 800de26:	f3bf 8f6f 	isb	sy
 800de2a:	f3bf 8f4f 	dsb	sy
 800de2e:	60bb      	str	r3, [r7, #8]
 800de30:	e7fe      	b.n	800de30 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	685a      	ldr	r2, [r3, #4]
 800de36:	4b11      	ldr	r3, [pc, #68]	; (800de7c <vPortFree+0xa8>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4013      	ands	r3, r2
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d019      	beq.n	800de74 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d115      	bne.n	800de74 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	685a      	ldr	r2, [r3, #4]
 800de4c:	4b0b      	ldr	r3, [pc, #44]	; (800de7c <vPortFree+0xa8>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	43db      	mvns	r3, r3
 800de52:	401a      	ands	r2, r3
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800de58:	f7fe f96e 	bl	800c138 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	685a      	ldr	r2, [r3, #4]
 800de60:	4b07      	ldr	r3, [pc, #28]	; (800de80 <vPortFree+0xac>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4413      	add	r3, r2
 800de66:	4a06      	ldr	r2, [pc, #24]	; (800de80 <vPortFree+0xac>)
 800de68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800de6a:	6938      	ldr	r0, [r7, #16]
 800de6c:	f000 f86c 	bl	800df48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800de70:	f7fe f9a8 	bl	800c1c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800de74:	bf00      	nop
 800de76:	3718      	adds	r7, #24
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	20005920 	.word	0x20005920
 800de80:	20005918 	.word	0x20005918

0800de84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800de84:	b480      	push	{r7}
 800de86:	b085      	sub	sp, #20
 800de88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800de8a:	f242 7310 	movw	r3, #10000	; 0x2710
 800de8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800de90:	4b27      	ldr	r3, [pc, #156]	; (800df30 <prvHeapInit+0xac>)
 800de92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f003 0307 	and.w	r3, r3, #7
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d00c      	beq.n	800deb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	3307      	adds	r3, #7
 800dea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f023 0307 	bic.w	r3, r3, #7
 800deaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800deac:	68ba      	ldr	r2, [r7, #8]
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	1ad3      	subs	r3, r2, r3
 800deb2:	4a1f      	ldr	r2, [pc, #124]	; (800df30 <prvHeapInit+0xac>)
 800deb4:	4413      	add	r3, r2
 800deb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800debc:	4a1d      	ldr	r2, [pc, #116]	; (800df34 <prvHeapInit+0xb0>)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dec2:	4b1c      	ldr	r3, [pc, #112]	; (800df34 <prvHeapInit+0xb0>)
 800dec4:	2200      	movs	r2, #0
 800dec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	68ba      	ldr	r2, [r7, #8]
 800decc:	4413      	add	r3, r2
 800dece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ded0:	2208      	movs	r2, #8
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	1a9b      	subs	r3, r3, r2
 800ded6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f023 0307 	bic.w	r3, r3, #7
 800dede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	4a15      	ldr	r2, [pc, #84]	; (800df38 <prvHeapInit+0xb4>)
 800dee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dee6:	4b14      	ldr	r3, [pc, #80]	; (800df38 <prvHeapInit+0xb4>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	2200      	movs	r2, #0
 800deec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800deee:	4b12      	ldr	r3, [pc, #72]	; (800df38 <prvHeapInit+0xb4>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2200      	movs	r2, #0
 800def4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	68fa      	ldr	r2, [r7, #12]
 800defe:	1ad2      	subs	r2, r2, r3
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800df04:	4b0c      	ldr	r3, [pc, #48]	; (800df38 <prvHeapInit+0xb4>)
 800df06:	681a      	ldr	r2, [r3, #0]
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	4a0a      	ldr	r2, [pc, #40]	; (800df3c <prvHeapInit+0xb8>)
 800df12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	685b      	ldr	r3, [r3, #4]
 800df18:	4a09      	ldr	r2, [pc, #36]	; (800df40 <prvHeapInit+0xbc>)
 800df1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800df1c:	4b09      	ldr	r3, [pc, #36]	; (800df44 <prvHeapInit+0xc0>)
 800df1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800df22:	601a      	str	r2, [r3, #0]
}
 800df24:	bf00      	nop
 800df26:	3714      	adds	r7, #20
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr
 800df30:	200031fc 	.word	0x200031fc
 800df34:	2000590c 	.word	0x2000590c
 800df38:	20005914 	.word	0x20005914
 800df3c:	2000591c 	.word	0x2000591c
 800df40:	20005918 	.word	0x20005918
 800df44:	20005920 	.word	0x20005920

0800df48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800df48:	b480      	push	{r7}
 800df4a:	b085      	sub	sp, #20
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800df50:	4b28      	ldr	r3, [pc, #160]	; (800dff4 <prvInsertBlockIntoFreeList+0xac>)
 800df52:	60fb      	str	r3, [r7, #12]
 800df54:	e002      	b.n	800df5c <prvInsertBlockIntoFreeList+0x14>
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	60fb      	str	r3, [r7, #12]
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	687a      	ldr	r2, [r7, #4]
 800df62:	429a      	cmp	r2, r3
 800df64:	d8f7      	bhi.n	800df56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	68ba      	ldr	r2, [r7, #8]
 800df70:	4413      	add	r3, r2
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	429a      	cmp	r2, r3
 800df76:	d108      	bne.n	800df8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	685a      	ldr	r2, [r3, #4]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	441a      	add	r2, r3
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	68ba      	ldr	r2, [r7, #8]
 800df94:	441a      	add	r2, r3
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d118      	bne.n	800dfd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681a      	ldr	r2, [r3, #0]
 800dfa2:	4b15      	ldr	r3, [pc, #84]	; (800dff8 <prvInsertBlockIntoFreeList+0xb0>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d00d      	beq.n	800dfc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	685a      	ldr	r2, [r3, #4]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	441a      	add	r2, r3
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	601a      	str	r2, [r3, #0]
 800dfc4:	e008      	b.n	800dfd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dfc6:	4b0c      	ldr	r3, [pc, #48]	; (800dff8 <prvInsertBlockIntoFreeList+0xb0>)
 800dfc8:	681a      	ldr	r2, [r3, #0]
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	601a      	str	r2, [r3, #0]
 800dfce:	e003      	b.n	800dfd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dfd8:	68fa      	ldr	r2, [r7, #12]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d002      	beq.n	800dfe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	687a      	ldr	r2, [r7, #4]
 800dfe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dfe6:	bf00      	nop
 800dfe8:	3714      	adds	r7, #20
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr
 800dff2:	bf00      	nop
 800dff4:	2000590c 	.word	0x2000590c
 800dff8:	20005914 	.word	0x20005914

0800dffc <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800dffc:	b480      	push	{r7}
 800dffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800e000:	4b03      	ldr	r3, [pc, #12]	; (800e010 <LL_FLASH_GetUDN+0x14>)
 800e002:	681b      	ldr	r3, [r3, #0]
}
 800e004:	4618      	mov	r0, r3
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr
 800e00e:	bf00      	nop
 800e010:	1fff7580 	.word	0x1fff7580

0800e014 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800e014:	b480      	push	{r7}
 800e016:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800e018:	4b03      	ldr	r3, [pc, #12]	; (800e028 <LL_FLASH_GetDeviceID+0x14>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	b2db      	uxtb	r3, r3
}
 800e01e:	4618      	mov	r0, r3
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr
 800e028:	1fff7584 	.word	0x1fff7584

0800e02c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800e02c:	b480      	push	{r7}
 800e02e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800e030:	4b03      	ldr	r3, [pc, #12]	; (800e040 <LL_FLASH_GetSTCompanyID+0x14>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	0a1b      	lsrs	r3, r3, #8
}
 800e036:	4618      	mov	r0, r3
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr
 800e040:	1fff7584 	.word	0x1fff7584

0800e044 <APP_BLE_Init_Dyn_1>:
static void HciUserEvtProcess(void *argument);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init_Dyn_1( void )
{
 800e044:	b5b0      	push	{r4, r5, r7, lr}
 800e046:	b08c      	sub	sp, #48	; 0x30
 800e048:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800e04a:	4b25      	ldr	r3, [pc, #148]	; (800e0e0 <APP_BLE_Init_Dyn_1+0x9c>)
 800e04c:	463c      	mov	r4, r7
 800e04e:	461d      	mov	r5, r3
 800e050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e058:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e05c:	c407      	stmia	r4!, {r0, r1, r2}
 800e05e:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800e060:	f000 f90a 	bl	800e278 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800e064:	2101      	movs	r1, #1
 800e066:	2004      	movs	r0, #4
 800e068:	f001 fa22 	bl	800f4b0 <UTIL_LPM_SetOffMode>
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  HciUserEvtProcessId = osThreadNew(HciUserEvtProcess, NULL, &HciUserEvtProcess_attr);
 800e06c:	4a1d      	ldr	r2, [pc, #116]	; (800e0e4 <APP_BLE_Init_Dyn_1+0xa0>)
 800e06e:	2100      	movs	r1, #0
 800e070:	481d      	ldr	r0, [pc, #116]	; (800e0e8 <APP_BLE_Init_Dyn_1+0xa4>)
 800e072:	f7fc f833 	bl	800a0dc <osThreadNew>
 800e076:	4602      	mov	r2, r0
 800e078:	4b1c      	ldr	r3, [pc, #112]	; (800e0ec <APP_BLE_Init_Dyn_1+0xa8>)
 800e07a:	601a      	str	r2, [r3, #0]
//  SHCI_C2_BLE_Init( &ble_init_cmd_packet );

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800e07c:	463b      	mov	r3, r7
 800e07e:	4618      	mov	r0, r3
 800e080:	f7fa f818 	bl	80080b4 <SHCI_C2_BLE_Init>
 800e084:	4603      	mov	r3, r0
 800e086:	2b00      	cmp	r3, #0
 800e088:	d001      	beq.n	800e08e <APP_BLE_Init_Dyn_1+0x4a>
  {
    Error_Handler();
 800e08a:	f7f3 fd49 	bl	8001b20 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800e08e:	f000 f909 	bl	800e2a4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800e092:	f7f9 ff3d 	bl	8007f10 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800e096:	4b16      	ldr	r3, [pc, #88]	; (800e0f0 <APP_BLE_Init_Dyn_1+0xac>)
 800e098:	2200      	movs	r2, #0
 800e09a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 800e09e:	4b14      	ldr	r3, [pc, #80]	; (800e0f0 <APP_BLE_Init_Dyn_1+0xac>)
 800e0a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0a4:	84da      	strh	r2, [r3, #38]	; 0x26
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);

  /**
   * From here, all initialization are BLE application specific
   */
  AdvUpdateProcessId = osThreadNew(AdvUpdateProcess, NULL, &AdvUpdateProcess_attr);
 800e0a6:	4a13      	ldr	r2, [pc, #76]	; (800e0f4 <APP_BLE_Init_Dyn_1+0xb0>)
 800e0a8:	2100      	movs	r1, #0
 800e0aa:	4813      	ldr	r0, [pc, #76]	; (800e0f8 <APP_BLE_Init_Dyn_1+0xb4>)
 800e0ac:	f7fc f816 	bl	800a0dc <osThreadNew>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	4b12      	ldr	r3, [pc, #72]	; (800e0fc <APP_BLE_Init_Dyn_1+0xb8>)
 800e0b4:	601a      	str	r2, [r3, #0]
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)  
    manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)  
  aci_hal_set_radio_activity_mask(0x0006);
 800e0b6:	2006      	movs	r0, #6
 800e0b8:	f7f9 fcb4 	bl	8007a24 <aci_hal_set_radio_activity_mask>
#endif  
  
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
  index_con_int = 0; 
 800e0bc:	4b10      	ldr	r3, [pc, #64]	; (800e100 <APP_BLE_Init_Dyn_1+0xbc>)
 800e0be:	2200      	movs	r2, #0
 800e0c0:	701a      	strb	r2, [r3, #0]
  mutex = 1; 
 800e0c2:	4b10      	ldr	r3, [pc, #64]	; (800e104 <APP_BLE_Init_Dyn_1+0xc0>)
 800e0c4:	2201      	movs	r2, #1
 800e0c6:	701a      	strb	r2, [r3, #0]

  //TODO: ripped from heartbeat. I think this sends the manufacturer information to the connecting device
  /**
   * Initialize DIS Application
   */
  DISAPP_Init();
 800e0c8:	f000 fe58 	bl	800ed7c <DISAPP_Init>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
#endif
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800e0cc:	4b0e      	ldr	r3, [pc, #56]	; (800e108 <APP_BLE_Init_Dyn_1+0xc4>)
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	490e      	ldr	r1, [pc, #56]	; (800e10c <APP_BLE_Init_Dyn_1+0xc8>)
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	f7f3 f9a4 	bl	8001420 <HW_TS_Create>
  return;
 800e0d8:	bf00      	nop
}
 800e0da:	3730      	adds	r7, #48	; 0x30
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bdb0      	pop	{r4, r5, r7, pc}
 800e0e0:	08010aec 	.word	0x08010aec
 800e0e4:	08010ec0 	.word	0x08010ec0
 800e0e8:	0800e5ed 	.word	0x0800e5ed
 800e0ec:	20005e14 	.word	0x20005e14
 800e0f0:	20000168 	.word	0x20000168
 800e0f4:	08010e9c 	.word	0x08010e9c
 800e0f8:	0800e5c5 	.word	0x0800e5c5
 800e0fc:	20005e24 	.word	0x20005e24
 800e100:	20005e1d 	.word	0x20005e1d
 800e104:	20005e1c 	.word	0x20005e1c
 800e108:	0800e607 	.word	0x0800e607
 800e10c:	200001fa 	.word	0x200001fa

0800e110 <APP_BLE_Init_Dyn_2>:

void APP_BLE_Init_Dyn_2( void ) {
 800e110:	b580      	push	{r7, lr}
 800e112:	af00      	add	r7, sp, #0
  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL; //TODO: the heartbeat example uses: AD_TYPE_16_BIT_SERV_UUID
 800e114:	4b09      	ldr	r3, [pc, #36]	; (800e13c <APP_BLE_Init_Dyn_2+0x2c>)
 800e116:	2200      	movs	r2, #0
 800e118:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800e11c:	4b07      	ldr	r3, [pc, #28]	; (800e13c <APP_BLE_Init_Dyn_2+0x2c>)
 800e11e:	2200      	movs	r2, #0
 800e120:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800e124:	4b06      	ldr	r3, [pc, #24]	; (800e140 <APP_BLE_Init_Dyn_2+0x30>)
 800e126:	2280      	movs	r2, #128	; 0x80
 800e128:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800e12a:	4b06      	ldr	r3, [pc, #24]	; (800e144 <APP_BLE_Init_Dyn_2+0x34>)
 800e12c:	22a0      	movs	r2, #160	; 0xa0
 800e12e:	801a      	strh	r2, [r3, #0]
   * Start to Advertise to be connected by P2P Client
   */
#ifndef DYNAMIC_MODE
   Adv_Request(APP_BLE_FAST_ADV);
#else
   Adv_Request(APP_BLE_LP_ADV);
 800e130:	2002      	movs	r0, #2
 800e132:	f000 f991 	bl	800e458 <Adv_Request>
#endif
/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 800e136:	bf00      	nop
}
 800e138:	bd80      	pop	{r7, pc}
 800e13a:	bf00      	nop
 800e13c:	20000168 	.word	0x20000168
 800e140:	200001fc 	.word	0x200001fc
 800e144:	200001fe 	.word	0x200001fe

0800e148 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b088      	sub	sp, #32
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	3301      	adds	r3, #1
 800e154:	61fb      	str	r3, [r7, #28]

  switch (event_pckt->evt)
 800e156:	69fb      	ldr	r3, [r7, #28]
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	2b3e      	cmp	r3, #62	; 0x3e
 800e15c:	d024      	beq.n	800e1a8 <SVCCTL_App_Notification+0x60>
 800e15e:	2bff      	cmp	r3, #255	; 0xff
 800e160:	d060      	beq.n	800e224 <SVCCTL_App_Notification+0xdc>
 800e162:	2b05      	cmp	r3, #5
 800e164:	d000      	beq.n	800e168 <SVCCTL_App_Notification+0x20>

        default:
        /* USER CODE BEGIN ECODE_DEFAULT*/

        /* USER CODE END ECODE_DEFAULT*/
          break;
 800e166:	e07b      	b.n	800e260 <SVCCTL_App_Notification+0x118>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	3302      	adds	r3, #2
 800e16c:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e174:	b29a      	uxth	r2, r3
 800e176:	4b3d      	ldr	r3, [pc, #244]	; (800e26c <SVCCTL_App_Notification+0x124>)
 800e178:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d106      	bne.n	800e18c <SVCCTL_App_Notification+0x44>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800e17e:	4b3b      	ldr	r3, [pc, #236]	; (800e26c <SVCCTL_App_Notification+0x124>)
 800e180:	2200      	movs	r2, #0
 800e182:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800e184:	4b39      	ldr	r3, [pc, #228]	; (800e26c <SVCCTL_App_Notification+0x124>)
 800e186:	2200      	movs	r2, #0
 800e188:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
       Adv_Request(APP_BLE_FAST_ADV);
 800e18c:	2001      	movs	r0, #1
 800e18e:	f000 f963 	bl	800e458 <Adv_Request>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800e192:	4b37      	ldr	r3, [pc, #220]	; (800e270 <SVCCTL_App_Notification+0x128>)
 800e194:	2201      	movs	r2, #1
 800e196:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800e198:	4b34      	ldr	r3, [pc, #208]	; (800e26c <SVCCTL_App_Notification+0x124>)
 800e19a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800e19c:	4b34      	ldr	r3, [pc, #208]	; (800e270 <SVCCTL_App_Notification+0x128>)
 800e19e:	805a      	strh	r2, [r3, #2]
        P2PS_APP_Notification(&handleNotification);
 800e1a0:	4833      	ldr	r0, [pc, #204]	; (800e270 <SVCCTL_App_Notification+0x128>)
 800e1a2:	f000 fe41 	bl	800ee28 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 800e1a6:	e05b      	b.n	800e260 <SVCCTL_App_Notification+0x118>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800e1a8:	69fb      	ldr	r3, [r7, #28]
 800e1aa:	3302      	adds	r3, #2
 800e1ac:	617b      	str	r3, [r7, #20]
      switch (meta_evt->subevent)
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	781b      	ldrb	r3, [r3, #0]
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d002      	beq.n	800e1bc <SVCCTL_App_Notification+0x74>
 800e1b6:	2b03      	cmp	r3, #3
 800e1b8:	d032      	beq.n	800e220 <SVCCTL_App_Notification+0xd8>
          break;
 800e1ba:	e032      	b.n	800e222 <SVCCTL_App_Notification+0xda>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	3301      	adds	r3, #1
 800e1c0:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800e1c2:	4b2a      	ldr	r3, [pc, #168]	; (800e26c <SVCCTL_App_Notification+0x124>)
 800e1c4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f7f3 f99f 	bl	800150c <HW_TS_Stop>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800e1ce:	4b27      	ldr	r3, [pc, #156]	; (800e26c <SVCCTL_App_Notification+0x124>)
 800e1d0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800e1d4:	2b04      	cmp	r3, #4
 800e1d6:	d104      	bne.n	800e1e2 <SVCCTL_App_Notification+0x9a>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800e1d8:	4b24      	ldr	r3, [pc, #144]	; (800e26c <SVCCTL_App_Notification+0x124>)
 800e1da:	2206      	movs	r2, #6
 800e1dc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800e1e0:	e003      	b.n	800e1ea <SVCCTL_App_Notification+0xa2>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800e1e2:	4b22      	ldr	r3, [pc, #136]	; (800e26c <SVCCTL_App_Notification+0x124>)
 800e1e4:	2205      	movs	r2, #5
 800e1e6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                connection_complete_event->Connection_Handle;
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e1f0:	b29a      	uxth	r2, r3
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 800e1f2:	4b1e      	ldr	r3, [pc, #120]	; (800e26c <SVCCTL_App_Notification+0x124>)
 800e1f4:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800e1f6:	4b1e      	ldr	r3, [pc, #120]	; (800e270 <SVCCTL_App_Notification+0x128>)
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800e1fc:	4b1b      	ldr	r3, [pc, #108]	; (800e26c <SVCCTL_App_Notification+0x124>)
 800e1fe:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800e200:	4b1b      	ldr	r3, [pc, #108]	; (800e270 <SVCCTL_App_Notification+0x128>)
 800e202:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800e204:	481a      	ldr	r0, [pc, #104]	; (800e270 <SVCCTL_App_Notification+0x128>)
 800e206:	f000 fe0f 	bl	800ee28 <P2PS_APP_Notification>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800e20a:	4b19      	ldr	r3, [pc, #100]	; (800e270 <SVCCTL_App_Notification+0x128>)
 800e20c:	2200      	movs	r2, #0
 800e20e:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800e210:	4b16      	ldr	r3, [pc, #88]	; (800e26c <SVCCTL_App_Notification+0x124>)
 800e212:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800e214:	4b16      	ldr	r3, [pc, #88]	; (800e270 <SVCCTL_App_Notification+0x128>)
 800e216:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800e218:	4815      	ldr	r0, [pc, #84]	; (800e270 <SVCCTL_App_Notification+0x128>)
 800e21a:	f000 fe05 	bl	800ee28 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800e21e:	e000      	b.n	800e222 <SVCCTL_App_Notification+0xda>
          break;
 800e220:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800e222:	e01d      	b.n	800e260 <SVCCTL_App_Notification+0x118>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800e224:	69fb      	ldr	r3, [r7, #28]
 800e226:	3302      	adds	r3, #2
 800e228:	61bb      	str	r3, [r7, #24]
      switch (blue_evt->ecode)
 800e22a:	69bb      	ldr	r3, [r7, #24]
 800e22c:	881b      	ldrh	r3, [r3, #0]
 800e22e:	b29b      	uxth	r3, r3
 800e230:	f240 4207 	movw	r2, #1031	; 0x407
 800e234:	4293      	cmp	r3, r2
 800e236:	d011      	beq.n	800e25c <SVCCTL_App_Notification+0x114>
 800e238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e23c:	d002      	beq.n	800e244 <SVCCTL_App_Notification+0xfc>
 800e23e:	2b04      	cmp	r3, #4
 800e240:	d004      	beq.n	800e24c <SVCCTL_App_Notification+0x104>
      break; /* EVT_VENDOR */
 800e242:	e00c      	b.n	800e25e <SVCCTL_App_Notification+0x116>
          mutex = 1;
 800e244:	4b0b      	ldr	r3, [pc, #44]	; (800e274 <SVCCTL_App_Notification+0x12c>)
 800e246:	2201      	movs	r2, #1
 800e248:	701a      	strb	r2, [r3, #0]
      break;
 800e24a:	e008      	b.n	800e25e <SVCCTL_App_Notification+0x116>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 800e24c:	4b07      	ldr	r3, [pc, #28]	; (800e26c <SVCCTL_App_Notification+0x124>)
 800e24e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800e252:	210a      	movs	r1, #10
 800e254:	4618      	mov	r0, r3
 800e256:	f7f3 f9e3 	bl	8001620 <HW_TS_Start>
        break; /* RADIO_ACTIVITY_EVENT */
 800e25a:	e000      	b.n	800e25e <SVCCTL_App_Notification+0x116>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800e25c:	bf00      	nop
      break; /* EVT_VENDOR */
 800e25e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800e260:	2301      	movs	r3, #1
}
 800e262:	4618      	mov	r0, r3
 800e264:	3720      	adds	r7, #32
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	20000168 	.word	0x20000168
 800e270:	20005e18 	.word	0x20005e18
 800e274:	20005e1c 	.word	0x20005e1c

0800e278 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800e27e:	4b06      	ldr	r3, [pc, #24]	; (800e298 <Ble_Tl_Init+0x20>)
 800e280:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800e282:	4b06      	ldr	r3, [pc, #24]	; (800e29c <Ble_Tl_Init+0x24>)
 800e284:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800e286:	463b      	mov	r3, r7
 800e288:	4619      	mov	r1, r3
 800e28a:	4805      	ldr	r0, [pc, #20]	; (800e2a0 <Ble_Tl_Init+0x28>)
 800e28c:	f7fa f804 	bl	8008298 <hci_init>

  return;
 800e290:	bf00      	nop
}
 800e292:	3708      	adds	r7, #8
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	200300d4 	.word	0x200300d4
 800e29c:	0800e6b1 	.word	0x0800e6b1
 800e2a0:	0800e679 	.word	0x0800e679

0800e2a4 <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 800e2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2a6:	b091      	sub	sp, #68	; 0x44
 800e2a8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800e2ae:	f7f9 fc03 	bl	8007ab8 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800e2b2:	f000 f943 	bl	800e53c <BleGetBdAddress>
 800e2b6:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800e2b8:	6a3a      	ldr	r2, [r7, #32]
 800e2ba:	2106      	movs	r1, #6
 800e2bc:	2000      	movs	r0, #0
 800e2be:	f7f9 faf1 	bl	80078a4 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800e2c2:	6a3b      	ldr	r3, [r7, #32]
 800e2c4:	795a      	ldrb	r2, [r3, #5]
 800e2c6:	4b5e      	ldr	r3, [pc, #376]	; (800e440 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800e2c8:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800e2ca:	6a3b      	ldr	r3, [r7, #32]
 800e2cc:	791a      	ldrb	r2, [r3, #4]
 800e2ce:	4b5c      	ldr	r3, [pc, #368]	; (800e440 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800e2d0:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800e2d2:	6a3b      	ldr	r3, [r7, #32]
 800e2d4:	78da      	ldrb	r2, [r3, #3]
 800e2d6:	4b5a      	ldr	r3, [pc, #360]	; (800e440 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800e2d8:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800e2da:	6a3b      	ldr	r3, [r7, #32]
 800e2dc:	789a      	ldrb	r2, [r3, #2]
 800e2de:	4b58      	ldr	r3, [pc, #352]	; (800e440 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800e2e0:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800e2e2:	6a3b      	ldr	r3, [r7, #32]
 800e2e4:	785a      	ldrb	r2, [r3, #1]
 800e2e6:	4b56      	ldr	r3, [pc, #344]	; (800e440 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800e2e8:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800e2ea:	6a3b      	ldr	r3, [r7, #32]
 800e2ec:	781a      	ldrb	r2, [r3, #0]
 800e2ee:	4b54      	ldr	r3, [pc, #336]	; (800e440 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800e2f0:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800e2f2:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800e2f6:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800e2f8:	f7ff fe80 	bl	800dffc <LL_FLASH_GetUDN>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800e300:	f107 0308 	add.w	r3, r7, #8
 800e304:	461a      	mov	r2, r3
 800e306:	2106      	movs	r1, #6
 800e308:	202e      	movs	r0, #46	; 0x2e
 800e30a:	f7f9 facb 	bl	80078a4 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800e30e:	4a4d      	ldr	r2, [pc, #308]	; (800e444 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 800e310:	2110      	movs	r1, #16
 800e312:	2018      	movs	r0, #24
 800e314:	f7f9 fac6 	bl	80078a4 <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800e318:	4a4b      	ldr	r2, [pc, #300]	; (800e448 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800e31a:	2110      	movs	r1, #16
 800e31c:	2008      	movs	r0, #8
 800e31e:	f7f9 fac1 	bl	80078a4 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800e322:	2118      	movs	r1, #24
 800e324:	2001      	movs	r0, #1
 800e326:	f7f9 fb26 	bl	8007976 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800e32a:	f7f9 f876 	bl	800741a <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800e32e:	2300      	movs	r3, #0
 800e330:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800e332:	7ffb      	ldrb	r3, [r7, #31]
 800e334:	f043 0301 	orr.w	r3, r3, #1
 800e338:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800e33a:	7ffb      	ldrb	r3, [r7, #31]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d01e      	beq.n	800e37e <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "STM32WB";
 800e340:	4b42      	ldr	r3, [pc, #264]	; (800e44c <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 800e342:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 800e344:	f107 0216 	add.w	r2, r7, #22
 800e348:	7ff8      	ldrb	r0, [r7, #31]
 800e34a:	f107 0312 	add.w	r3, r7, #18
 800e34e:	9301      	str	r3, [sp, #4]
 800e350:	f107 0314 	add.w	r3, r7, #20
 800e354:	9300      	str	r3, [sp, #0]
 800e356:	4613      	mov	r3, r2
 800e358:	2207      	movs	r2, #7
 800e35a:	2100      	movs	r1, #0
 800e35c:	f7f8 ff52 	bl	8007204 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800e360:	8afc      	ldrh	r4, [r7, #22]
 800e362:	8abd      	ldrh	r5, [r7, #20]
 800e364:	69b8      	ldr	r0, [r7, #24]
 800e366:	f7f1 ff15 	bl	8000194 <strlen>
 800e36a:	4603      	mov	r3, r0
 800e36c:	b2da      	uxtb	r2, r3
 800e36e:	69bb      	ldr	r3, [r7, #24]
 800e370:	9300      	str	r3, [sp, #0]
 800e372:	4613      	mov	r3, r2
 800e374:	2200      	movs	r2, #0
 800e376:	4629      	mov	r1, r5
 800e378:	4620      	mov	r0, r4
 800e37a:	f7f9 fa0c 	bl	8007796 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800e37e:	8af8      	ldrh	r0, [r7, #22]
 800e380:	8a79      	ldrh	r1, [r7, #18]
 800e382:	1d3b      	adds	r3, r7, #4
 800e384:	9300      	str	r3, [sp, #0]
 800e386:	2302      	movs	r3, #2
 800e388:	2200      	movs	r2, #0
 800e38a:	f7f9 fa04 	bl	8007796 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 800e38e:	2202      	movs	r2, #2
 800e390:	2102      	movs	r1, #2
 800e392:	2000      	movs	r0, #0
 800e394:	f7f9 fbb4 	bl	8007b00 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800e398:	4b2d      	ldr	r3, [pc, #180]	; (800e450 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e39a:	2200      	movs	r2, #0
 800e39c:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800e39e:	4b2c      	ldr	r3, [pc, #176]	; (800e450 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e3a0:	781b      	ldrb	r3, [r3, #0]
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7f8 fe3c 	bl	8007020 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800e3a8:	4b29      	ldr	r3, [pc, #164]	; (800e450 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800e3ae:	4b28      	ldr	r3, [pc, #160]	; (800e450 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 800e3b4:	4b26      	ldr	r3, [pc, #152]	; (800e450 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e3b6:	2208      	movs	r2, #8
 800e3b8:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800e3ba:	4b25      	ldr	r3, [pc, #148]	; (800e450 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e3bc:	2210      	movs	r2, #16
 800e3be:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 800e3c0:	4b23      	ldr	r3, [pc, #140]	; (800e450 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 800e3c6:	4b22      	ldr	r3, [pc, #136]	; (800e450 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e3c8:	4a22      	ldr	r2, [pc, #136]	; (800e454 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800e3ca:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 800e3cc:	4b20      	ldr	r3, [pc, #128]	; (800e450 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e3d8:	e00b      	b.n	800e3f2 <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800e3da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3de:	4a1c      	ldr	r2, [pc, #112]	; (800e450 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e3e0:	4413      	add	r3, r2
 800e3e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e3e6:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 800e3e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3ec:	3301      	adds	r3, #1
 800e3ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e3f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3f6:	2b0f      	cmp	r3, #15
 800e3f8:	d9ef      	bls.n	800e3da <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800e3fa:	4b15      	ldr	r3, [pc, #84]	; (800e450 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e3fc:	789d      	ldrb	r5, [r3, #2]
 800e3fe:	4b14      	ldr	r3, [pc, #80]	; (800e450 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e400:	785e      	ldrb	r6, [r3, #1]
 800e402:	4b13      	ldr	r3, [pc, #76]	; (800e450 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e404:	7d5b      	ldrb	r3, [r3, #21]
 800e406:	4a12      	ldr	r2, [pc, #72]	; (800e450 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e408:	7d92      	ldrb	r2, [r2, #22]
 800e40a:	4911      	ldr	r1, [pc, #68]	; (800e450 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e40c:	7d09      	ldrb	r1, [r1, #20]
 800e40e:	4810      	ldr	r0, [pc, #64]	; (800e450 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e410:	6980      	ldr	r0, [r0, #24]
 800e412:	2400      	movs	r4, #0
 800e414:	9404      	str	r4, [sp, #16]
 800e416:	9003      	str	r0, [sp, #12]
 800e418:	9102      	str	r1, [sp, #8]
 800e41a:	9201      	str	r2, [sp, #4]
 800e41c:	9300      	str	r3, [sp, #0]
 800e41e:	2300      	movs	r3, #0
 800e420:	2200      	movs	r2, #0
 800e422:	4631      	mov	r1, r6
 800e424:	4628      	mov	r0, r5
 800e426:	f7f8 fe45 	bl	80070b4 <aci_gap_set_authentication_requirement>
  );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800e42a:	4b09      	ldr	r3, [pc, #36]	; (800e450 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e42c:	789b      	ldrb	r3, [r3, #2]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d001      	beq.n	800e436 <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 800e432:	f7f8 ffce 	bl	80073d2 <aci_gap_configure_whitelist>
   }
}
 800e436:	bf00      	nop
 800e438:	372c      	adds	r7, #44	; 0x2c
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e43e:	bf00      	nop
 800e440:	20000014 	.word	0x20000014
 800e444:	08010e74 	.word	0x08010e74
 800e448:	08010e84 	.word	0x08010e84
 800e44c:	08010b30 	.word	0x08010b30
 800e450:	20000168 	.word	0x20000168
 800e454:	0001b207 	.word	0x0001b207

0800e458 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b08c      	sub	sp, #48	; 0x30
 800e45c:	af08      	add	r7, sp, #32
 800e45e:	4603      	mov	r3, r0
 800e460:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e462:	2342      	movs	r3, #66	; 0x42
 800e464:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;
 
  if (New_Status == APP_BLE_FAST_ADV)
 800e466:	79fb      	ldrb	r3, [r7, #7]
 800e468:	2b01      	cmp	r3, #1
 800e46a:	d106      	bne.n	800e47a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800e46c:	4b2c      	ldr	r3, [pc, #176]	; (800e520 <Adv_Request+0xc8>)
 800e46e:	881b      	ldrh	r3, [r3, #0]
 800e470:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800e472:	4b2c      	ldr	r3, [pc, #176]	; (800e524 <Adv_Request+0xcc>)
 800e474:	881b      	ldrh	r3, [r3, #0]
 800e476:	81bb      	strh	r3, [r7, #12]
 800e478:	e005      	b.n	800e486 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800e47a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800e47e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800e480:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800e484:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800e486:	4b28      	ldr	r3, [pc, #160]	; (800e528 <Adv_Request+0xd0>)
 800e488:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7f3 f83d 	bl	800150c <HW_TS_Stop>

     APP_DBG_MSG("First index in %d state \n",
                BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 800e492:	79fb      	ldrb	r3, [r7, #7]
 800e494:	2b02      	cmp	r3, #2
 800e496:	d10d      	bne.n	800e4b4 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800e498:	4b23      	ldr	r3, [pc, #140]	; (800e528 <Adv_Request+0xd0>)
 800e49a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800e49e:	2b01      	cmp	r3, #1
 800e4a0:	d004      	beq.n	800e4ac <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800e4a2:	4b21      	ldr	r3, [pc, #132]	; (800e528 <Adv_Request+0xd0>)
 800e4a4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800e4a8:	2b02      	cmp	r3, #2
 800e4aa:	d103      	bne.n	800e4b4 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800e4ac:	f7f8 fcb6 	bl	8006e1c <aci_gap_set_non_discoverable>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800e4b4:	4a1c      	ldr	r2, [pc, #112]	; (800e528 <Adv_Request+0xd0>)
 800e4b6:	79fb      	ldrb	r3, [r7, #7]
 800e4b8:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800e4bc:	4b1a      	ldr	r3, [pc, #104]	; (800e528 <Adv_Request+0xd0>)
 800e4be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4c2:	89b8      	ldrh	r0, [r7, #12]
 800e4c4:	89f9      	ldrh	r1, [r7, #14]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	9206      	str	r2, [sp, #24]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	9205      	str	r2, [sp, #20]
 800e4ce:	4a17      	ldr	r2, [pc, #92]	; (800e52c <Adv_Request+0xd4>)
 800e4d0:	9204      	str	r2, [sp, #16]
 800e4d2:	9303      	str	r3, [sp, #12]
 800e4d4:	4b16      	ldr	r3, [pc, #88]	; (800e530 <Adv_Request+0xd8>)
 800e4d6:	9302      	str	r3, [sp, #8]
 800e4d8:	2308      	movs	r3, #8
 800e4da:	9301      	str	r3, [sp, #4]
 800e4dc:	2300      	movs	r3, #0
 800e4de:	9300      	str	r3, [sp, #0]
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	2000      	movs	r0, #0
 800e4e6:	f7f8 fcbd 	bl	8006e64 <aci_gap_set_discoverable>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);
    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800e4ee:	4911      	ldr	r1, [pc, #68]	; (800e534 <Adv_Request+0xdc>)
 800e4f0:	200e      	movs	r0, #14
 800e4f2:	f7f8 ff12 	bl	800731a <aci_gap_update_adv_data>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	72fb      	strb	r3, [r7, #11]

     if (ret == BLE_STATUS_SUCCESS)
 800e4fa:	7afb      	ldrb	r3, [r7, #11]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d10a      	bne.n	800e516 <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800e500:	79fb      	ldrb	r3, [r7, #7]
 800e502:	2b01      	cmp	r3, #1
 800e504:	d107      	bne.n	800e516 <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800e506:	4b08      	ldr	r3, [pc, #32]	; (800e528 <Adv_Request+0xd0>)
 800e508:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800e50c:	490a      	ldr	r1, [pc, #40]	; (800e538 <Adv_Request+0xe0>)
 800e50e:	4618      	mov	r0, r3
 800e510:	f7f3 f886 	bl	8001620 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800e514:	bf00      	nop
 800e516:	bf00      	nop
}
 800e518:	3710      	adds	r7, #16
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	bf00      	nop
 800e520:	200001fc 	.word	0x200001fc
 800e524:	200001fe 	.word	0x200001fe
 800e528:	20000168 	.word	0x20000168
 800e52c:	20000191 	.word	0x20000191
 800e530:	08010e94 	.word	0x08010e94
 800e534:	20000014 	.word	0x20000014
 800e538:	0001e046 	.word	0x0001e046

0800e53c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b086      	sub	sp, #24
 800e540:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800e542:	f7ff fd5b 	bl	800dffc <LL_FLASH_GetUDN>
 800e546:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e54e:	d023      	beq.n	800e598 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800e550:	f7ff fd6c 	bl	800e02c <LL_FLASH_GetSTCompanyID>
 800e554:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800e556:	f7ff fd5d 	bl	800e014 <LL_FLASH_GetDeviceID>
 800e55a:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	b2da      	uxtb	r2, r3
 800e560:	4b16      	ldr	r3, [pc, #88]	; (800e5bc <BleGetBdAddress+0x80>)
 800e562:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	0a1b      	lsrs	r3, r3, #8
 800e568:	b2da      	uxtb	r2, r3
 800e56a:	4b14      	ldr	r3, [pc, #80]	; (800e5bc <BleGetBdAddress+0x80>)
 800e56c:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	0c1b      	lsrs	r3, r3, #16
 800e572:	b2da      	uxtb	r2, r3
 800e574:	4b11      	ldr	r3, [pc, #68]	; (800e5bc <BleGetBdAddress+0x80>)
 800e576:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	b2da      	uxtb	r2, r3
 800e57c:	4b0f      	ldr	r3, [pc, #60]	; (800e5bc <BleGetBdAddress+0x80>)
 800e57e:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	b2da      	uxtb	r2, r3
 800e584:	4b0d      	ldr	r3, [pc, #52]	; (800e5bc <BleGetBdAddress+0x80>)
 800e586:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	0a1b      	lsrs	r3, r3, #8
 800e58c:	b2da      	uxtb	r2, r3
 800e58e:	4b0b      	ldr	r3, [pc, #44]	; (800e5bc <BleGetBdAddress+0x80>)
 800e590:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800e592:	4b0a      	ldr	r3, [pc, #40]	; (800e5bc <BleGetBdAddress+0x80>)
 800e594:	617b      	str	r3, [r7, #20]
 800e596:	e00b      	b.n	800e5b0 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800e598:	2000      	movs	r0, #0
 800e59a:	f7fb f84f 	bl	800963c <OTP_Read>
 800e59e:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d002      	beq.n	800e5ac <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	617b      	str	r3, [r7, #20]
 800e5aa:	e001      	b.n	800e5b0 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800e5ac:	4b04      	ldr	r3, [pc, #16]	; (800e5c0 <BleGetBdAddress+0x84>)
 800e5ae:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800e5b0:	697b      	ldr	r3, [r7, #20]
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3718      	adds	r7, #24
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	20005924 	.word	0x20005924
 800e5c0:	08010e6c 	.word	0x08010e6c

0800e5c4 <AdvUpdateProcess>:

  return;
}

static void AdvUpdateProcess(void *argument)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800e5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e5d0:	2100      	movs	r1, #0
 800e5d2:	2001      	movs	r0, #1
 800e5d4:	f7fb fe8a 	bl	800a2ec <osThreadFlagsWait>
    Adv_Update( );
 800e5d8:	f000 f801 	bl	800e5de <Adv_Update>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800e5dc:	e7f6      	b.n	800e5cc <AdvUpdateProcess+0x8>

0800e5de <Adv_Update>:
  }
}

static void Adv_Update( void )
{
 800e5de:	b580      	push	{r7, lr}
 800e5e0:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 800e5e2:	2002      	movs	r0, #2
 800e5e4:	f7ff ff38 	bl	800e458 <Adv_Request>

  return;
 800e5e8:	bf00      	nop
}
 800e5ea:	bd80      	pop	{r7, pc}

0800e5ec <HciUserEvtProcess>:

static void HciUserEvtProcess(void *argument)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800e5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e5f8:	2100      	movs	r1, #0
 800e5fa:	2001      	movs	r0, #1
 800e5fc:	f7fb fe76 	bl	800a2ec <osThreadFlagsWait>
    hci_user_evt_proc( );
 800e600:	f7f9 fe66 	bl	80082d0 <hci_user_evt_proc>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800e604:	e7f6      	b.n	800e5f4 <HciUserEvtProcess+0x8>

0800e606 <Switch_OFF_GPIO>:
/* USER CODE END Adv_Cancel_Req_2 */
  return;
}
#endif

static void Switch_OFF_GPIO(){
 800e606:	b480      	push	{r7}
 800e608:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
//  BSP_LED_Off(LED_GREEN);
/* USER CODE END Switch_OFF_GPIO */
}
 800e60a:	bf00      	nop
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr

0800e614 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( HciUserEvtProcessId, 1 );
 800e61c:	4b04      	ldr	r3, [pc, #16]	; (800e630 <hci_notify_asynch_evt+0x1c>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2101      	movs	r1, #1
 800e622:	4618      	mov	r0, r3
 800e624:	f7fb fe00 	bl	800a228 <osThreadFlagsSet>
  return;
 800e628:	bf00      	nop
}
 800e62a:	3708      	adds	r7, #8
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}
 800e630:	20005e14 	.word	0x20005e14

0800e634 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemHciId );
 800e63c:	4b04      	ldr	r3, [pc, #16]	; (800e650 <hci_cmd_resp_release+0x1c>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	4618      	mov	r0, r3
 800e642:	f7fc f961 	bl	800a908 <osSemaphoreRelease>
  return;
 800e646:	bf00      	nop
}
 800e648:	3708      	adds	r7, #8
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	bf00      	nop
 800e650:	20005e10 	.word	0x20005e10

0800e654 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b082      	sub	sp, #8
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemHciId, osWaitForever );
 800e65c:	4b05      	ldr	r3, [pc, #20]	; (800e674 <hci_cmd_resp_wait+0x20>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	f04f 31ff 	mov.w	r1, #4294967295
 800e664:	4618      	mov	r0, r3
 800e666:	f7fc f8e9 	bl	800a83c <osSemaphoreAcquire>
  return;
 800e66a:	bf00      	nop
}
 800e66c:	3708      	adds	r7, #8
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	20005e10 	.word	0x20005e10

0800e678 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b084      	sub	sp, #16
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	685b      	ldr	r3, [r3, #4]
 800e688:	3308      	adds	r3, #8
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7f9 fc8e 	bl	8007fac <SVCCTL_UserEvtRx>
 800e690:	4603      	mov	r3, r0
 800e692:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800e694:	7afb      	ldrb	r3, [r7, #11]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d003      	beq.n	800e6a2 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2201      	movs	r2, #1
 800e69e:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800e6a0:	e002      	b.n	800e6a8 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	701a      	strb	r2, [r3, #0]
}
 800e6a8:	bf00      	nop
 800e6aa:	3710      	adds	r7, #16
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b082      	sub	sp, #8
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 800e6ba:	79fb      	ldrb	r3, [r7, #7]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d002      	beq.n	800e6c6 <BLE_StatusNot+0x16>
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d008      	beq.n	800e6d6 <BLE_StatusNot+0x26>
    case HCI_TL_CmdAvailable:
      osMutexRelease( MtxHciId );
      break;

    default:
      break;
 800e6c4:	e00d      	b.n	800e6e2 <BLE_StatusNot+0x32>
      osMutexAcquire( MtxHciId, osWaitForever );
 800e6c6:	4b09      	ldr	r3, [pc, #36]	; (800e6ec <BLE_StatusNot+0x3c>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f04f 31ff 	mov.w	r1, #4294967295
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7fb ff68 	bl	800a5a4 <osMutexAcquire>
      break;
 800e6d4:	e005      	b.n	800e6e2 <BLE_StatusNot+0x32>
      osMutexRelease( MtxHciId );
 800e6d6:	4b05      	ldr	r3, [pc, #20]	; (800e6ec <BLE_StatusNot+0x3c>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7fb ffc0 	bl	800a660 <osMutexRelease>
      break;
 800e6e0:	bf00      	nop
  }
  return;
 800e6e2:	bf00      	nop
}
 800e6e4:	3708      	adds	r7, #8
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	bf00      	nop
 800e6ec:	20005e20 	.word	0x20005e20

0800e6f0 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b082      	sub	sp, #8
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	3b0c      	subs	r3, #12
 800e6fe:	2b12      	cmp	r3, #18
 800e700:	d850      	bhi.n	800e7a4 <APP_THREAD_Error+0xb4>
 800e702:	a201      	add	r2, pc, #4	; (adr r2, 800e708 <APP_THREAD_Error+0x18>)
 800e704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e708:	0800e755 	.word	0x0800e755
 800e70c:	0800e75f 	.word	0x0800e75f
 800e710:	0800e769 	.word	0x0800e769
 800e714:	0800e773 	.word	0x0800e773
 800e718:	0800e77d 	.word	0x0800e77d
 800e71c:	0800e787 	.word	0x0800e787
 800e720:	0800e7a5 	.word	0x0800e7a5
 800e724:	0800e7a5 	.word	0x0800e7a5
 800e728:	0800e7a5 	.word	0x0800e7a5
 800e72c:	0800e7a5 	.word	0x0800e7a5
 800e730:	0800e7a5 	.word	0x0800e7a5
 800e734:	0800e7a5 	.word	0x0800e7a5
 800e738:	0800e7a5 	.word	0x0800e7a5
 800e73c:	0800e7a5 	.word	0x0800e7a5
 800e740:	0800e7a5 	.word	0x0800e7a5
 800e744:	0800e7a5 	.word	0x0800e7a5
 800e748:	0800e791 	.word	0x0800e791
 800e74c:	0800e7a5 	.word	0x0800e7a5
 800e750:	0800e79b 	.word	0x0800e79b
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 800e754:	6839      	ldr	r1, [r7, #0]
 800e756:	4818      	ldr	r0, [pc, #96]	; (800e7b8 <APP_THREAD_Error+0xc8>)
 800e758:	f000 f8ca 	bl	800e8f0 <APP_THREAD_TraceError>
    break;
 800e75c:	e027      	b.n	800e7ae <APP_THREAD_Error+0xbe>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 800e75e:	6839      	ldr	r1, [r7, #0]
 800e760:	4816      	ldr	r0, [pc, #88]	; (800e7bc <APP_THREAD_Error+0xcc>)
 800e762:	f000 f8c5 	bl	800e8f0 <APP_THREAD_TraceError>
    break;
 800e766:	e022      	b.n	800e7ae <APP_THREAD_Error+0xbe>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 800e768:	6839      	ldr	r1, [r7, #0]
 800e76a:	4815      	ldr	r0, [pc, #84]	; (800e7c0 <APP_THREAD_Error+0xd0>)
 800e76c:	f000 f8c0 	bl	800e8f0 <APP_THREAD_TraceError>
    break;
 800e770:	e01d      	b.n	800e7ae <APP_THREAD_Error+0xbe>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 800e772:	6839      	ldr	r1, [r7, #0]
 800e774:	4813      	ldr	r0, [pc, #76]	; (800e7c4 <APP_THREAD_Error+0xd4>)
 800e776:	f000 f8bb 	bl	800e8f0 <APP_THREAD_TraceError>
    break;
 800e77a:	e018      	b.n	800e7ae <APP_THREAD_Error+0xbe>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 800e77c:	6839      	ldr	r1, [r7, #0]
 800e77e:	4812      	ldr	r0, [pc, #72]	; (800e7c8 <APP_THREAD_Error+0xd8>)
 800e780:	f000 f8b6 	bl	800e8f0 <APP_THREAD_TraceError>
    break;
 800e784:	e013      	b.n	800e7ae <APP_THREAD_Error+0xbe>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 800e786:	6839      	ldr	r1, [r7, #0]
 800e788:	4810      	ldr	r0, [pc, #64]	; (800e7cc <APP_THREAD_Error+0xdc>)
 800e78a:	f000 f8b1 	bl	800e8f0 <APP_THREAD_TraceError>
    break;
 800e78e:	e00e      	b.n	800e7ae <APP_THREAD_Error+0xbe>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 800e790:	6839      	ldr	r1, [r7, #0]
 800e792:	480f      	ldr	r0, [pc, #60]	; (800e7d0 <APP_THREAD_Error+0xe0>)
 800e794:	f000 f8ac 	bl	800e8f0 <APP_THREAD_TraceError>
    break;
 800e798:	e009      	b.n	800e7ae <APP_THREAD_Error+0xbe>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 800e79a:	6839      	ldr	r1, [r7, #0]
 800e79c:	480d      	ldr	r0, [pc, #52]	; (800e7d4 <APP_THREAD_Error+0xe4>)
 800e79e:	f000 f8a7 	bl	800e8f0 <APP_THREAD_TraceError>
    break;
 800e7a2:	e004      	b.n	800e7ae <APP_THREAD_Error+0xbe>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	480c      	ldr	r0, [pc, #48]	; (800e7d8 <APP_THREAD_Error+0xe8>)
 800e7a8:	f000 f8a2 	bl	800e8f0 <APP_THREAD_TraceError>
    break;
 800e7ac:	bf00      	nop
  }
}
 800e7ae:	bf00      	nop
 800e7b0:	3708      	adds	r7, #8
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	08010b78 	.word	0x08010b78
 800e7bc:	08010b9c 	.word	0x08010b9c
 800e7c0:	08010bc0 	.word	0x08010bc0
 800e7c4:	08010be0 	.word	0x08010be0
 800e7c8:	08010c00 	.word	0x08010c00
 800e7cc:	08010c20 	.word	0x08010c20
 800e7d0:	08010c3c 	.word	0x08010c3c
 800e7d4:	08010c68 	.word	0x08010c68
 800e7d8:	08010c8c 	.word	0x08010c8c

0800e7dc <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	f7fa fb60 	bl	8008ea8 <otInstanceErasePersistentInfo>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800e7ec:	79fb      	ldrb	r3, [r7, #7]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d004      	beq.n	800e7fc <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 800e7f2:	79fb      	ldrb	r3, [r7, #7]
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	201c      	movs	r0, #28
 800e7f8:	f7ff ff7a 	bl	800e6f0 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 800e7fc:	2000      	movs	r0, #0
 800e7fe:	f7fa faf6 	bl	8008dee <otInstanceFinalize>
  otInstanceInitSingle();
 800e802:	f7fa facd 	bl	8008da0 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 800e806:	2200      	movs	r2, #0
 800e808:	4925      	ldr	r1, [pc, #148]	; (800e8a0 <APP_THREAD_DeviceConfig+0xc4>)
 800e80a:	2000      	movs	r0, #0
 800e80c:	f7fa fb16 	bl	8008e3c <otSetStateChangedCallback>
 800e810:	4603      	mov	r3, r0
 800e812:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800e814:	79fb      	ldrb	r3, [r7, #7]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d004      	beq.n	800e824 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 800e81a:	79fb      	ldrb	r3, [r7, #7]
 800e81c:	4619      	mov	r1, r3
 800e81e:	200d      	movs	r0, #13
 800e820:	f7ff ff66 	bl	800e6f0 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 800e824:	2117      	movs	r1, #23
 800e826:	2000      	movs	r0, #0
 800e828:	f7fa fb97 	bl	8008f5a <otLinkSetChannel>
 800e82c:	4603      	mov	r3, r0
 800e82e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800e830:	79fb      	ldrb	r3, [r7, #7]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d004      	beq.n	800e840 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 800e836:	79fb      	ldrb	r3, [r7, #7]
 800e838:	4619      	mov	r1, r3
 800e83a:	200e      	movs	r0, #14
 800e83c:	f7ff ff58 	bl	800e6f0 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 800e840:	f241 2134 	movw	r1, #4660	; 0x1234
 800e844:	2000      	movs	r0, #0
 800e846:	f7fa fbb8 	bl	8008fba <otLinkSetPanId>
 800e84a:	4603      	mov	r3, r0
 800e84c:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800e84e:	79fb      	ldrb	r3, [r7, #7]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d004      	beq.n	800e85e <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 800e854:	79fb      	ldrb	r3, [r7, #7]
 800e856:	4619      	mov	r1, r3
 800e858:	200f      	movs	r0, #15
 800e85a:	f7ff ff49 	bl	800e6f0 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 800e85e:	2101      	movs	r1, #1
 800e860:	2000      	movs	r0, #0
 800e862:	f7fa fb4a 	bl	8008efa <otIp6SetEnabled>
 800e866:	4603      	mov	r3, r0
 800e868:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800e86a:	79fb      	ldrb	r3, [r7, #7]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d004      	beq.n	800e87a <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 800e870:	79fb      	ldrb	r3, [r7, #7]
 800e872:	4619      	mov	r1, r3
 800e874:	2010      	movs	r0, #16
 800e876:	f7ff ff3b 	bl	800e6f0 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 800e87a:	2101      	movs	r1, #1
 800e87c:	2000      	movs	r0, #0
 800e87e:	f7fa fdd3 	bl	8009428 <otThreadSetEnabled>
 800e882:	4603      	mov	r3, r0
 800e884:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800e886:	79fb      	ldrb	r3, [r7, #7]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d004      	beq.n	800e896 <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 800e88c:	79fb      	ldrb	r3, [r7, #7]
 800e88e:	4619      	mov	r1, r3
 800e890:	2011      	movs	r0, #17
 800e892:	f7ff ff2d 	bl	800e6f0 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */

  /* USER CODE END DEVICECONFIG */
}
 800e896:	bf00      	nop
 800e898:	3708      	adds	r7, #8
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	0800e8a5 	.word	0x0800e8a5

0800e8a4 <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f003 0304 	and.w	r3, r3, #4
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d013      	beq.n	800e8e0 <APP_THREAD_StateNotif+0x3c>
  {
    switch (otThreadGetDeviceRole(NULL))
 800e8b8:	2000      	movs	r0, #0
 800e8ba:	f7fa fde5 	bl	8009488 <otThreadGetDeviceRole>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	2b04      	cmp	r3, #4
 800e8c2:	d80f      	bhi.n	800e8e4 <APP_THREAD_StateNotif+0x40>
 800e8c4:	a201      	add	r2, pc, #4	; (adr r2, 800e8cc <APP_THREAD_StateNotif+0x28>)
 800e8c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8ca:	bf00      	nop
 800e8cc:	0800e8e5 	.word	0x0800e8e5
 800e8d0:	0800e8e5 	.word	0x0800e8e5
 800e8d4:	0800e8e5 	.word	0x0800e8e5
 800e8d8:	0800e8e5 	.word	0x0800e8e5
 800e8dc:	0800e8e5 	.word	0x0800e8e5
      /* USER CODE BEGIN DEFAULT */

      /* USER CODE END DEFAULT */
      break;
    }
  }
 800e8e0:	bf00      	nop
 800e8e2:	e000      	b.n	800e8e6 <APP_THREAD_StateNotif+0x42>
      break;
 800e8e4:	bf00      	nop
}
 800e8e6:	bf00      	nop
 800e8e8:	3708      	adds	r7, #8
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop

0800e8f0 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	b083      	sub	sp, #12
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 800e8fa:	bf00      	nop
 800e8fc:	370c      	adds	r7, #12
 800e8fe:	46bd      	mov	sp, r7
 800e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e904:	4770      	bx	lr
	...

0800e908 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b088      	sub	sp, #32
 800e90c:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 800e90e:	1d3b      	adds	r3, r7, #4
 800e910:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800e912:	6978      	ldr	r0, [r7, #20]
 800e914:	f7f9 fc12 	bl	800813c <SHCI_GetWirelessFwInfo>
 800e918:	4603      	mov	r3, r0
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d004      	beq.n	800e928 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800e91e:	2101      	movs	r1, #1
 800e920:	201e      	movs	r0, #30
 800e922:	f7ff fee5 	bl	800e6f0 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 800e926:	e03d      	b.n	800e9a4 <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 800e928:	4a20      	ldr	r2, [pc, #128]	; (800e9ac <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 800e92a:	2101      	movs	r1, #1
 800e92c:	2000      	movs	r0, #0
 800e92e:	f7f3 fb19 	bl	8001f64 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 800e932:	4a1f      	ldr	r2, [pc, #124]	; (800e9b0 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 800e934:	2101      	movs	r1, #1
 800e936:	2000      	movs	r0, #0
 800e938:	f7f3 fb14 	bl	8001f64 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	781b      	ldrb	r3, [r3, #0]
 800e940:	4619      	mov	r1, r3
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	785b      	ldrb	r3, [r3, #1]
 800e946:	461a      	mov	r2, r3
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	789b      	ldrb	r3, [r3, #2]
 800e94c:	9301      	str	r3, [sp, #4]
 800e94e:	9200      	str	r2, [sp, #0]
 800e950:	460b      	mov	r3, r1
 800e952:	4a18      	ldr	r2, [pc, #96]	; (800e9b4 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 800e954:	2101      	movs	r1, #1
 800e956:	2000      	movs	r0, #0
 800e958:	f7f3 fb04 	bl	8001f64 <logApplication>
    switch(p_wireless_info->StackType)
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	7a5b      	ldrb	r3, [r3, #9]
 800e960:	2b11      	cmp	r3, #17
 800e962:	d009      	beq.n	800e978 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 800e964:	2b50      	cmp	r3, #80	; 0x50
 800e966:	d00d      	beq.n	800e984 <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 800e968:	2b10      	cmp	r3, #16
 800e96a:	d111      	bne.n	800e990 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 800e96c:	4a12      	ldr	r2, [pc, #72]	; (800e9b8 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 800e96e:	2101      	movs	r1, #1
 800e970:	2000      	movs	r0, #0
 800e972:	f7f3 faf7 	bl	8001f64 <logApplication>
      break;
 800e976:	e010      	b.n	800e99a <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 800e978:	4a10      	ldr	r2, [pc, #64]	; (800e9bc <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 800e97a:	2101      	movs	r1, #1
 800e97c:	2000      	movs	r0, #0
 800e97e:	f7f3 faf1 	bl	8001f64 <logApplication>
      break;
 800e982:	e00a      	b.n	800e99a <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 800e984:	4a0e      	ldr	r2, [pc, #56]	; (800e9c0 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 800e986:	2101      	movs	r1, #1
 800e988:	2000      	movs	r0, #0
 800e98a:	f7f3 faeb 	bl	8001f64 <logApplication>
      break;
 800e98e:	e004      	b.n	800e99a <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800e990:	2101      	movs	r1, #1
 800e992:	201e      	movs	r0, #30
 800e994:	f7ff feac 	bl	800e6f0 <APP_THREAD_Error>
      break;
 800e998:	bf00      	nop
    APP_DBG("**********************************************************");
 800e99a:	4a04      	ldr	r2, [pc, #16]	; (800e9ac <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 800e99c:	2101      	movs	r1, #1
 800e99e:	2000      	movs	r0, #0
 800e9a0:	f7f3 fae0 	bl	8001f64 <logApplication>
}
 800e9a4:	bf00      	nop
 800e9a6:	3718      	adds	r7, #24
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	08010c9c 	.word	0x08010c9c
 800e9b0:	08010cd8 	.word	0x08010cd8
 800e9b4:	08010cf4 	.word	0x08010cf4
 800e9b8:	08010d0c 	.word	0x08010d0c
 800e9bc:	08010d24 	.word	0x08010d24
 800e9c0:	08010d3c 	.word	0x08010d3c

0800e9c4 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800e9cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e9d0:	2101      	movs	r1, #1
 800e9d2:	2001      	movs	r0, #1
 800e9d4:	f7fb fc8a 	bl	800a2ec <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 800e9d8:	f000 f9b8 	bl	800ed4c <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800e9dc:	e7f6      	b.n	800e9cc <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

0800e9de <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 800e9de:	b580      	push	{r7, lr}
 800e9e0:	b082      	sub	sp, #8
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800e9e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e9ea:	2101      	movs	r1, #1
 800e9ec:	2001      	movs	r0, #1
 800e9ee:	f7fb fc7d 	bl	800a2ec <osThreadFlagsWait>
    Send_CLI_To_M0();
 800e9f2:	f000 f90f 	bl	800ec14 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800e9f6:	e7f6      	b.n	800e9e6 <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

0800e9f8 <APP_THREAD_Init_Dyn_1>:
 * @brief Main entry point for the Thread Application
 * @param  none
 * @retval None
 */
void APP_THREAD_Init_Dyn_1( void )
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b082      	sub	sp, #8
 800e9fc:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 800e9fe:	f7ff ff83 	bl	800e908 <APP_THREAD_CheckWirelessFirmwareInfo>

#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 800ea02:	480d      	ldr	r0, [pc, #52]	; (800ea38 <APP_THREAD_Init_Dyn_1+0x40>)
 800ea04:	f000 f826 	bl	800ea54 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 800ea08:	2101      	movs	r1, #1
 800ea0a:	2002      	movs	r0, #2
 800ea0c:	f000 fd50 	bl	800f4b0 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 800ea10:	f000 f958 	bl	800ecc4 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 800ea14:	f000 f938 	bl	800ec88 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 800ea18:	f7f9 fb63 	bl	80080e2 <SHCI_C2_THREAD_Init>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	71fb      	strb	r3, [r7, #7]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ThreadInitStatus);

  // TODO: added this call and remove the lines after since (I think) they are unnecessary
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 800ea20:	4a06      	ldr	r2, [pc, #24]	; (800ea3c <APP_THREAD_Init_Dyn_1+0x44>)
 800ea22:	2100      	movs	r1, #0
 800ea24:	4806      	ldr	r0, [pc, #24]	; (800ea40 <APP_THREAD_Init_Dyn_1+0x48>)
 800ea26:	f7fb fb59 	bl	800a0dc <osThreadNew>
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	4b05      	ldr	r3, [pc, #20]	; (800ea44 <APP_THREAD_Init_Dyn_1+0x4c>)
 800ea2e:	601a      	str	r2, [r3, #0]
//  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_MSG_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_THREAD_ProcessMsgM0ToM4);
//  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_COAP_MSG_BUTTON, UTIL_SEQ_RFU, APP_THREAD_SendCoapMsg);
//
//  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_COAP_SEND_MSG, UTIL_SEQ_RFU,APP_THREAD_SendCoapMsg);
//  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_SET_THREAD_MODE, UTIL_SEQ_RFU,APP_THREAD_SetSleepyEndDeviceMode);
}
 800ea30:	bf00      	nop
 800ea32:	3708      	adds	r7, #8
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}
 800ea38:	20030950 	.word	0x20030950
 800ea3c:	08010ee4 	.word	0x08010ee4
 800ea40:	0800e9c5 	.word	0x0800e9c5
 800ea44:	20005b40 	.word	0x20005b40

0800ea48 <APP_THREAD_Init_Dyn_2>:

void APP_THREAD_Init_Dyn_2(void) {
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	af00      	add	r7, sp, #0
  /* Initialize and configure the Thread device*/
  APP_THREAD_DeviceConfig();
 800ea4c:	f7ff fec6 	bl	800e7dc <APP_THREAD_DeviceConfig>
  /**
   * Create timer to handle COAP request sending
   */
//  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &sedCoapTimerID, hw_ts_Repeated, APP_THREAD_CoapTimingElapsed);
  /* Allow the 800_15_4 IP to enter in low power mode */
}
 800ea50:	bf00      	nop
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 800ea54:	b480      	push	{r7}
 800ea56:	b083      	sub	sp, #12
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 800ea5c:	4a04      	ldr	r2, [pc, #16]	; (800ea70 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6013      	str	r3, [r2, #0]
}
 800ea62:	bf00      	nop
 800ea64:	370c      	adds	r7, #12
 800ea66:	46bd      	mov	sp, r7
 800ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6c:	4770      	bx	lr
 800ea6e:	bf00      	nop
 800ea70:	20005b30 	.word	0x20005b30

0800ea74 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 800ea74:	b480      	push	{r7}
 800ea76:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 800ea78:	4b03      	ldr	r3, [pc, #12]	; (800ea88 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	330c      	adds	r3, #12
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	46bd      	mov	sp, r7
 800ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea86:	4770      	bx	lr
 800ea88:	20005b30 	.word	0x20005b30

0800ea8c <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 800ea90:	4b03      	ldr	r3, [pc, #12]	; (800eaa0 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	330b      	adds	r3, #11
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr
 800eaa0:	20005b30 	.word	0x20005b30

0800eaa4 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 800eaa8:	4b03      	ldr	r3, [pc, #12]	; (800eab8 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	330b      	adds	r3, #11
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr
 800eab8:	20005b34 	.word	0x20005b34

0800eabc <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 800eac2:	4b0f      	ldr	r3, [pc, #60]	; (800eb00 <Ot_Cmd_Transfer+0x44>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	2200      	movs	r2, #0
 800eac8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eacc:	725a      	strb	r2, [r3, #9]
 800eace:	2200      	movs	r2, #0
 800ead0:	f042 0202 	orr.w	r2, r2, #2
 800ead4:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 800ead6:	4b0a      	ldr	r3, [pc, #40]	; (800eb00 <Ot_Cmd_Transfer+0x44>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	330c      	adds	r3, #12
 800eadc:	685b      	ldr	r3, [r3, #4]
 800eade:	3302      	adds	r3, #2
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 800eae4:	4b06      	ldr	r3, [pc, #24]	; (800eb00 <Ot_Cmd_Transfer+0x44>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	687a      	ldr	r2, [r7, #4]
 800eaea:	b2d2      	uxtb	r2, r2
 800eaec:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 800eaee:	f7fa f801 	bl	8008af4 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 800eaf2:	f000 f829 	bl	800eb48 <Wait_Getting_Ack_From_M0>
}
 800eaf6:	bf00      	nop
 800eaf8:	3708      	adds	r7, #8
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	20005b30 	.word	0x20005b30

0800eb04 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 800eb0c:	f000 f82e 	bl	800eb6c <Receive_Ack_From_M0>
}
 800eb10:	bf00      	nop
 800eb12:	3708      	adds	r7, #8
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 800eb20:	4a04      	ldr	r2, [pc, #16]	; (800eb34 <TL_THREAD_NotReceived+0x1c>)
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 800eb26:	f000 f82d 	bl	800eb84 <Receive_Notification_From_M0>
}
 800eb2a:	bf00      	nop
 800eb2c:	3708      	adds	r7, #8
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	20005b34 	.word	0x20005b34

0800eb38 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	af00      	add	r7, sp, #0

}
 800eb3c:	bf00      	nop
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr
	...

0800eb48 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 800eb4c:	bf00      	nop
 800eb4e:	4b06      	ldr	r3, [pc, #24]	; (800eb68 <Wait_Getting_Ack_From_M0+0x20>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d0fb      	beq.n	800eb4e <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 800eb56:	4b04      	ldr	r3, [pc, #16]	; (800eb68 <Wait_Getting_Ack_From_M0+0x20>)
 800eb58:	2200      	movs	r2, #0
 800eb5a:	601a      	str	r2, [r3, #0]
}
 800eb5c:	bf00      	nop
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb64:	4770      	bx	lr
 800eb66:	bf00      	nop
 800eb68:	20005b3c 	.word	0x20005b3c

0800eb6c <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 800eb70:	4b03      	ldr	r3, [pc, #12]	; (800eb80 <Receive_Ack_From_M0+0x14>)
 800eb72:	2201      	movs	r2, #1
 800eb74:	601a      	str	r2, [r3, #0]
}
 800eb76:	bf00      	nop
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	4770      	bx	lr
 800eb80:	20005b3c 	.word	0x20005b3c

0800eb84 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 800eb88:	4b06      	ldr	r3, [pc, #24]	; (800eba4 <Receive_Notification_From_M0+0x20>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	3301      	adds	r3, #1
 800eb8e:	4a05      	ldr	r2, [pc, #20]	; (800eba4 <Receive_Notification_From_M0+0x20>)
 800eb90:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 800eb92:	4b05      	ldr	r3, [pc, #20]	; (800eba8 <Receive_Notification_From_M0+0x24>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	2101      	movs	r1, #1
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7fb fb45 	bl	800a228 <osThreadFlagsSet>
}
 800eb9e:	bf00      	nop
 800eba0:	bd80      	pop	{r7, pc}
 800eba2:	bf00      	nop
 800eba4:	20005b38 	.word	0x20005b38
 800eba8:	20005b40 	.word	0x20005b40

0800ebac <RxCpltCallback>:

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
static void RxCpltCallback(void)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 800ebb0:	4b12      	ldr	r3, [pc, #72]	; (800ebfc <RxCpltCallback+0x50>)
 800ebb2:	881b      	ldrh	r3, [r3, #0]
 800ebb4:	b29b      	uxth	r3, r3
 800ebb6:	2bff      	cmp	r3, #255	; 0xff
 800ebb8:	d818      	bhi.n	800ebec <RxCpltCallback+0x40>
  {
    CommandString[indexReceiveChar++] = aRxBuffer[0];
 800ebba:	4b10      	ldr	r3, [pc, #64]	; (800ebfc <RxCpltCallback+0x50>)
 800ebbc:	881b      	ldrh	r3, [r3, #0]
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	1c5a      	adds	r2, r3, #1
 800ebc2:	b291      	uxth	r1, r2
 800ebc4:	4a0d      	ldr	r2, [pc, #52]	; (800ebfc <RxCpltCallback+0x50>)
 800ebc6:	8011      	strh	r1, [r2, #0]
 800ebc8:	461a      	mov	r2, r3
 800ebca:	4b0d      	ldr	r3, [pc, #52]	; (800ec00 <RxCpltCallback+0x54>)
 800ebcc:	7819      	ldrb	r1, [r3, #0]
 800ebce:	4b0d      	ldr	r3, [pc, #52]	; (800ec04 <RxCpltCallback+0x58>)
 800ebd0:	5499      	strb	r1, [r3, r2]
    if (aRxBuffer[0] == '\r')
 800ebd2:	4b0b      	ldr	r3, [pc, #44]	; (800ec00 <RxCpltCallback+0x54>)
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	2b0d      	cmp	r3, #13
 800ebd8:	d108      	bne.n	800ebec <RxCpltCallback+0x40>
    {
      CptReceiveCmdFromUser = 1U;
 800ebda:	4b0b      	ldr	r3, [pc, #44]	; (800ec08 <RxCpltCallback+0x5c>)
 800ebdc:	2201      	movs	r2, #1
 800ebde:	801a      	strh	r2, [r3, #0]

      /* UART task scheduling*/
      osThreadFlagsSet(OsTaskCliId,1);
 800ebe0:	4b0a      	ldr	r3, [pc, #40]	; (800ec0c <RxCpltCallback+0x60>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	2101      	movs	r1, #1
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7fb fb1e 	bl	800a228 <osThreadFlagsSet>
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1U, RxCpltCallback);
 800ebec:	4b08      	ldr	r3, [pc, #32]	; (800ec10 <RxCpltCallback+0x64>)
 800ebee:	2201      	movs	r2, #1
 800ebf0:	4903      	ldr	r1, [pc, #12]	; (800ec00 <RxCpltCallback+0x54>)
 800ebf2:	2000      	movs	r0, #0
 800ebf4:	f7f2 fda8 	bl	8001748 <HW_UART_Receive_IT>
}
 800ebf8:	bf00      	nop
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	20005b2c 	.word	0x20005b2c
 800ec00:	2000592c 	.word	0x2000592c
 800ec04:	20005a2c 	.word	0x20005a2c
 800ec08:	20005b2e 	.word	0x20005b2e
 800ec0c:	20005b44 	.word	0x20005b44
 800ec10:	0800ebad 	.word	0x0800ebad

0800ec14 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 800ec18:	22ff      	movs	r2, #255	; 0xff
 800ec1a:	2100      	movs	r1, #0
 800ec1c:	4812      	ldr	r0, [pc, #72]	; (800ec68 <Send_CLI_To_M0+0x54>)
 800ec1e:	f000 fcaa 	bl	800f576 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 800ec22:	4b12      	ldr	r3, [pc, #72]	; (800ec6c <Send_CLI_To_M0+0x58>)
 800ec24:	881b      	ldrh	r3, [r3, #0]
 800ec26:	b29b      	uxth	r3, r3
 800ec28:	461a      	mov	r2, r3
 800ec2a:	4911      	ldr	r1, [pc, #68]	; (800ec70 <Send_CLI_To_M0+0x5c>)
 800ec2c:	480e      	ldr	r0, [pc, #56]	; (800ec68 <Send_CLI_To_M0+0x54>)
 800ec2e:	f000 fc97 	bl	800f560 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 800ec32:	4b0e      	ldr	r3, [pc, #56]	; (800ec6c <Send_CLI_To_M0+0x58>)
 800ec34:	881b      	ldrh	r3, [r3, #0]
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	b2da      	uxtb	r2, r3
 800ec3a:	4b0e      	ldr	r3, [pc, #56]	; (800ec74 <Send_CLI_To_M0+0x60>)
 800ec3c:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 800ec3e:	4b0d      	ldr	r3, [pc, #52]	; (800ec74 <Send_CLI_To_M0+0x60>)
 800ec40:	2200      	movs	r2, #0
 800ec42:	725a      	strb	r2, [r3, #9]
 800ec44:	2200      	movs	r2, #0
 800ec46:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 800ec48:	4b0b      	ldr	r3, [pc, #44]	; (800ec78 <Send_CLI_To_M0+0x64>)
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 800ec4e:	4b07      	ldr	r3, [pc, #28]	; (800ec6c <Send_CLI_To_M0+0x58>)
 800ec50:	2200      	movs	r2, #0
 800ec52:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 800ec54:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ec58:	2100      	movs	r1, #0
 800ec5a:	4805      	ldr	r0, [pc, #20]	; (800ec70 <Send_CLI_To_M0+0x5c>)
 800ec5c:	f000 fc8b 	bl	800f576 <memset>

  TL_CLI_SendCmd();
 800ec60:	f7f9 ff56 	bl	8008b10 <TL_CLI_SendCmd>
}
 800ec64:	bf00      	nop
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	20030b74 	.word	0x20030b74
 800ec6c:	20005b2c 	.word	0x20005b2c
 800ec70:	20005a2c 	.word	0x20005a2c
 800ec74:	20030b68 	.word	0x20030b68
 800ec78:	20005b2e 	.word	0x20005b2e

0800ec7c <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 800ec80:	f7f9 ff62 	bl	8008b48 <TL_THREAD_CliSendAck>
}
 800ec84:	bf00      	nop
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 800ec8c:	4a08      	ldr	r2, [pc, #32]	; (800ecb0 <APP_THREAD_Init_UART_CLI+0x28>)
 800ec8e:	2100      	movs	r1, #0
 800ec90:	4808      	ldr	r0, [pc, #32]	; (800ecb4 <APP_THREAD_Init_UART_CLI+0x2c>)
 800ec92:	f7fb fa23 	bl	800a0dc <osThreadNew>
 800ec96:	4602      	mov	r2, r0
 800ec98:	4b07      	ldr	r3, [pc, #28]	; (800ecb8 <APP_THREAD_Init_UART_CLI+0x30>)
 800ec9a:	601a      	str	r2, [r3, #0]
#endif /* (CFG_FULL_LOW_POWER == 0) */

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
  MX_USART1_UART_Init();
 800ec9c:	f7f3 fb60 	bl	8002360 <MX_USART1_UART_Init>
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
 800eca0:	4b06      	ldr	r3, [pc, #24]	; (800ecbc <APP_THREAD_Init_UART_CLI+0x34>)
 800eca2:	2201      	movs	r2, #1
 800eca4:	4906      	ldr	r1, [pc, #24]	; (800ecc0 <APP_THREAD_Init_UART_CLI+0x38>)
 800eca6:	2000      	movs	r0, #0
 800eca8:	f7f2 fd4e 	bl	8001748 <HW_UART_Receive_IT>
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 800ecac:	bf00      	nop
 800ecae:	bd80      	pop	{r7, pc}
 800ecb0:	08010f08 	.word	0x08010f08
 800ecb4:	0800e9df 	.word	0x0800e9df
 800ecb8:	20005b44 	.word	0x20005b44
 800ecbc:	0800ebad 	.word	0x0800ebad
 800ecc0:	2000592c 	.word	0x2000592c

0800ecc4 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 800ecc8:	4b06      	ldr	r3, [pc, #24]	; (800ece4 <APP_THREAD_TL_THREAD_INIT+0x20>)
 800ecca:	4a07      	ldr	r2, [pc, #28]	; (800ece8 <APP_THREAD_TL_THREAD_INIT+0x24>)
 800eccc:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 800ecce:	4b05      	ldr	r3, [pc, #20]	; (800ece4 <APP_THREAD_TL_THREAD_INIT+0x20>)
 800ecd0:	4a06      	ldr	r2, [pc, #24]	; (800ecec <APP_THREAD_TL_THREAD_INIT+0x28>)
 800ecd2:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 800ecd4:	4b03      	ldr	r3, [pc, #12]	; (800ece4 <APP_THREAD_TL_THREAD_INIT+0x20>)
 800ecd6:	4a06      	ldr	r2, [pc, #24]	; (800ecf0 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 800ecd8:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 800ecda:	4802      	ldr	r0, [pc, #8]	; (800ece4 <APP_THREAD_TL_THREAD_INIT+0x20>)
 800ecdc:	f7f9 feee 	bl	8008abc <TL_THREAD_Init>
}
 800ece0:	bf00      	nop
 800ece2:	bd80      	pop	{r7, pc}
 800ece4:	200301e0 	.word	0x200301e0
 800ece8:	20030950 	.word	0x20030950
 800ecec:	20030a5c 	.word	0x20030a5c
 800ecf0:	20030b68 	.word	0x20030b68

0800ecf4 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	7adb      	ldrb	r3, [r3, #11]
 800ed04:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	330c      	adds	r3, #12
 800ed0a:	490b      	ldr	r1, [pc, #44]	; (800ed38 <TL_THREAD_CliNotReceived+0x44>)
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f7f1 fa37 	bl	8000180 <strcmp>
 800ed12:	4603      	mov	r3, r0
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d009      	beq.n	800ed2c <TL_THREAD_CliNotReceived+0x38>
  {
    /* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f103 010c 	add.w	r1, r3, #12
 800ed1e:	7afb      	ldrb	r3, [r7, #11]
 800ed20:	b29a      	uxth	r2, r3
 800ed22:	4b06      	ldr	r3, [pc, #24]	; (800ed3c <TL_THREAD_CliNotReceived+0x48>)
 800ed24:	2000      	movs	r0, #0
 800ed26:	f7f2 fd49 	bl	80017bc <HW_UART_Transmit_IT>
  }
  else
  {
    Send_CLI_Ack_For_OT();
  }
}
 800ed2a:	e001      	b.n	800ed30 <TL_THREAD_CliNotReceived+0x3c>
    Send_CLI_Ack_For_OT();
 800ed2c:	f7ff ffa6 	bl	800ec7c <Send_CLI_Ack_For_OT>
}
 800ed30:	bf00      	nop
 800ed32:	3710      	adds	r7, #16
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}
 800ed38:	08010d68 	.word	0x08010d68
 800ed3c:	0800ed41 	.word	0x0800ed41

0800ed40 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	af00      	add	r7, sp, #0
  Send_CLI_Ack_For_OT();
 800ed44:	f7ff ff9a 	bl	800ec7c <Send_CLI_Ack_For_OT>
}
 800ed48:	bf00      	nop
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 800ed50:	4b09      	ldr	r3, [pc, #36]	; (800ed78 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d00d      	beq.n	800ed74 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 800ed58:	4b07      	ldr	r3, [pc, #28]	; (800ed78 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d904      	bls.n	800ed6a <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 800ed60:	2100      	movs	r1, #0
 800ed62:	200c      	movs	r0, #12
 800ed64:	f7ff fcc4 	bl	800e6f0 <APP_THREAD_Error>
 800ed68:	e001      	b.n	800ed6e <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 800ed6a:	f7fa f957 	bl	800901c <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 800ed6e:	4b02      	ldr	r3, [pc, #8]	; (800ed78 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 800ed70:	2200      	movs	r2, #0
 800ed72:	601a      	str	r2, [r3, #0]
  }
}
 800ed74:	bf00      	nop
 800ed76:	bd80      	pop	{r7, pc}
 800ed78:	20005b38 	.word	0x20005b38

0800ed7c <DISAPP_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void DISAPP_Init(void)
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b083      	sub	sp, #12
 800ed80:	af00      	add	r7, sp, #0
  dis_information_data.pPayload = (uint8_t *)pnp_id;
  dis_information_data.Length = BLE_CFG_DIS_PNP_ID_LEN_MAX;
  DIS_UpdateChar(PNP_ID_UUID, &dis_information_data);
#endif
/* USER CODE END DISAPP_Init */
}
 800ed82:	bf00      	nop
 800ed84:	370c      	adds	r7, #12
 800ed86:	46bd      	mov	sp, r7
 800ed88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8c:	4770      	bx	lr
	...

0800ed90 <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b083      	sub	sp, #12
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	2b01      	cmp	r3, #1
 800ed9e:	d008      	beq.n	800edb2 <P2PS_STM_App_Notification+0x22>
 800eda0:	2b03      	cmp	r3, #3
 800eda2:	d00a      	beq.n	800edba <P2PS_STM_App_Notification+0x2a>
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d000      	beq.n	800edaa <P2PS_STM_App_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800eda8:	e036      	b.n	800ee18 <P2PS_STM_App_Notification+0x88>
      P2P_Server_App_Context.Notification_Status = 1;
 800edaa:	4b1e      	ldr	r3, [pc, #120]	; (800ee24 <P2PS_STM_App_Notification+0x94>)
 800edac:	2201      	movs	r2, #1
 800edae:	701a      	strb	r2, [r3, #0]
      break;
 800edb0:	e032      	b.n	800ee18 <P2PS_STM_App_Notification+0x88>
      P2P_Server_App_Context.Notification_Status = 0;
 800edb2:	4b1c      	ldr	r3, [pc, #112]	; (800ee24 <P2PS_STM_App_Notification+0x94>)
 800edb4:	2200      	movs	r2, #0
 800edb6:	701a      	strb	r2, [r3, #0]
      break;
 800edb8:	e02e      	b.n	800ee18 <P2PS_STM_App_Notification+0x88>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	685b      	ldr	r3, [r3, #4]
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d111      	bne.n	800ede8 <P2PS_STM_App_Notification+0x58>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	3301      	adds	r3, #1
 800edca:	781b      	ldrb	r3, [r3, #0]
 800edcc:	2b01      	cmp	r3, #1
 800edce:	d102      	bne.n	800edd6 <P2PS_STM_App_Notification+0x46>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800edd0:	4b14      	ldr	r3, [pc, #80]	; (800ee24 <P2PS_STM_App_Notification+0x94>)
 800edd2:	2201      	movs	r2, #1
 800edd4:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	685b      	ldr	r3, [r3, #4]
 800edda:	3301      	adds	r3, #1
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d102      	bne.n	800ede8 <P2PS_STM_App_Notification+0x58>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800ede2:	4b10      	ldr	r3, [pc, #64]	; (800ee24 <P2PS_STM_App_Notification+0x94>)
 800ede4:	2200      	movs	r2, #0
 800ede6:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	685b      	ldr	r3, [r3, #4]
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	2b01      	cmp	r3, #1
 800edf0:	d111      	bne.n	800ee16 <P2PS_STM_App_Notification+0x86>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	3301      	adds	r3, #1
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	2b01      	cmp	r3, #1
 800edfc:	d102      	bne.n	800ee04 <P2PS_STM_App_Notification+0x74>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800edfe:	4b09      	ldr	r3, [pc, #36]	; (800ee24 <P2PS_STM_App_Notification+0x94>)
 800ee00:	2201      	movs	r2, #1
 800ee02:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	685b      	ldr	r3, [r3, #4]
 800ee08:	3301      	adds	r3, #1
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d102      	bne.n	800ee16 <P2PS_STM_App_Notification+0x86>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800ee10:	4b04      	ldr	r3, [pc, #16]	; (800ee24 <P2PS_STM_App_Notification+0x94>)
 800ee12:	2200      	movs	r2, #0
 800ee14:	709a      	strb	r2, [r3, #2]
      break;
 800ee16:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800ee18:	bf00      	nop
}
 800ee1a:	370c      	adds	r7, #12
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr
 800ee24:	20000200 	.word	0x20000200

0800ee28 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b082      	sub	sp, #8
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d005      	beq.n	800ee44 <P2PS_APP_Notification+0x1c>
 800ee38:	2b01      	cmp	r3, #1
 800ee3a:	d000      	beq.n	800ee3e <P2PS_APP_Notification+0x16>
    
    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800ee3c:	e003      	b.n	800ee46 <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 800ee3e:	f000 f807 	bl	800ee50 <P2PS_APP_LED_BUTTON_context_Init>
    break;
 800ee42:	e000      	b.n	800ee46 <P2PS_APP_Notification+0x1e>
    break;
 800ee44:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800ee46:	bf00      	nop
}
 800ee48:	3708      	adds	r7, #8
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}
	...

0800ee50 <P2PS_APP_LED_BUTTON_context_Init>:
/* USER CODE END P2PS_APP_Init */
  return;
}

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 800ee50:	b480      	push	{r7}
 800ee52:	af00      	add	r7, sp, #0
  
//  BSP_LED_Off(LED_BLUE);
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 800ee54:	4b08      	ldr	r3, [pc, #32]	; (800ee78 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 800ee56:	2201      	movs	r2, #1
 800ee58:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 800ee5a:	4b07      	ldr	r3, [pc, #28]	; (800ee78 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 800ee60:	4b05      	ldr	r3, [pc, #20]	; (800ee78 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 800ee62:	2201      	movs	r2, #1
 800ee64:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 800ee66:	4b04      	ldr	r3, [pc, #16]	; (800ee78 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 800ee68:	2200      	movs	r2, #0
 800ee6a:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 800ee6c:	bf00      	nop
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee74:	4770      	bx	lr
 800ee76:	bf00      	nop
 800ee78:	20000200 	.word	0x20000200

0800ee7c <LL_PWR_EnableBootC2>:
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800ee80:	4b05      	ldr	r3, [pc, #20]	; (800ee98 <LL_PWR_EnableBootC2+0x1c>)
 800ee82:	68db      	ldr	r3, [r3, #12]
 800ee84:	4a04      	ldr	r2, [pc, #16]	; (800ee98 <LL_PWR_EnableBootC2+0x1c>)
 800ee86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee8a:	60d3      	str	r3, [r2, #12]
}
 800ee8c:	bf00      	nop
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee94:	4770      	bx	lr
 800ee96:	bf00      	nop
 800ee98:	58000400 	.word	0x58000400

0800ee9c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800ee9c:	b480      	push	{r7}
 800ee9e:	b083      	sub	sp, #12
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800eea4:	4b06      	ldr	r3, [pc, #24]	; (800eec0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800eea6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800eeaa:	4905      	ldr	r1, [pc, #20]	; (800eec0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	4313      	orrs	r3, r2
 800eeb0:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800eeb4:	bf00      	nop
 800eeb6:	370c      	adds	r7, #12
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr
 800eec0:	58000800 	.word	0x58000800

0800eec4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800eec4:	b480      	push	{r7}
 800eec6:	b083      	sub	sp, #12
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800eecc:	4b05      	ldr	r3, [pc, #20]	; (800eee4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800eece:	6a1a      	ldr	r2, [r3, #32]
 800eed0:	4904      	ldr	r1, [pc, #16]	; (800eee4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	4313      	orrs	r3, r2
 800eed6:	620b      	str	r3, [r1, #32]
}
 800eed8:	bf00      	nop
 800eeda:	370c      	adds	r7, #12
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr
 800eee4:	58000800 	.word	0x58000800

0800eee8 <LL_AHB3_GRP1_EnableClock>:
{
 800eee8:	b480      	push	{r7}
 800eeea:	b085      	sub	sp, #20
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800eef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eef4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eef6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	4313      	orrs	r3, r2
 800eefe:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800ef00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	4013      	ands	r3, r2
 800ef0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
}
 800ef0e:	bf00      	nop
 800ef10:	3714      	adds	r7, #20
 800ef12:	46bd      	mov	sp, r7
 800ef14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef18:	4770      	bx	lr

0800ef1a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800ef1a:	b480      	push	{r7}
 800ef1c:	b085      	sub	sp, #20
 800ef1e:	af00      	add	r7, sp, #0
 800ef20:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800ef22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef26:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800ef2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	4313      	orrs	r3, r2
 800ef32:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800ef36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef3a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	4013      	ands	r3, r2
 800ef42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ef44:	68fb      	ldr	r3, [r7, #12]
}
 800ef46:	bf00      	nop
 800ef48:	3714      	adds	r7, #20
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef50:	4770      	bx	lr

0800ef52 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800ef52:	b480      	push	{r7}
 800ef54:	b083      	sub	sp, #12
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	601a      	str	r2, [r3, #0]
}
 800ef66:	bf00      	nop
 800ef68:	370c      	adds	r7, #12
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef70:	4770      	bx	lr

0800ef72 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800ef72:	b480      	push	{r7}
 800ef74:	b083      	sub	sp, #12
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f043 0201 	orr.w	r2, r3, #1
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	601a      	str	r2, [r3, #0]
}
 800ef86:	bf00      	nop
 800ef88:	370c      	adds	r7, #12
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef90:	4770      	bx	lr

0800ef92 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ef92:	b480      	push	{r7}
 800ef94:	b083      	sub	sp, #12
 800ef96:	af00      	add	r7, sp, #0
 800ef98:	6078      	str	r0, [r7, #4]
 800ef9a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	685a      	ldr	r2, [r3, #4]
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	041b      	lsls	r3, r3, #16
 800efa4:	43db      	mvns	r3, r3
 800efa6:	401a      	ands	r2, r3
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	605a      	str	r2, [r3, #4]
}
 800efac:	bf00      	nop
 800efae:	370c      	adds	r7, #12
 800efb0:	46bd      	mov	sp, r7
 800efb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb6:	4770      	bx	lr

0800efb8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	685a      	ldr	r2, [r3, #4]
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	041b      	lsls	r3, r3, #16
 800efca:	431a      	orrs	r2, r3
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	605a      	str	r2, [r3, #4]
}
 800efd0:	bf00      	nop
 800efd2:	370c      	adds	r7, #12
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr

0800efdc <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800efdc:	b480      	push	{r7}
 800efde:	b083      	sub	sp, #12
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
 800efe4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	685a      	ldr	r2, [r3, #4]
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	43db      	mvns	r3, r3
 800efee:	401a      	ands	r2, r3
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	605a      	str	r2, [r3, #4]
}
 800eff4:	bf00      	nop
 800eff6:	370c      	adds	r7, #12
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr

0800f000 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f000:	b480      	push	{r7}
 800f002:	b083      	sub	sp, #12
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	685a      	ldr	r2, [r3, #4]
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	431a      	orrs	r2, r3
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	605a      	str	r2, [r3, #4]
}
 800f016:	bf00      	nop
 800f018:	370c      	adds	r7, #12
 800f01a:	46bd      	mov	sp, r7
 800f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f020:	4770      	bx	lr

0800f022 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f022:	b480      	push	{r7}
 800f024:	b083      	sub	sp, #12
 800f026:	af00      	add	r7, sp, #0
 800f028:	6078      	str	r0, [r7, #4]
 800f02a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	683a      	ldr	r2, [r7, #0]
 800f030:	609a      	str	r2, [r3, #8]
}
 800f032:	bf00      	nop
 800f034:	370c      	adds	r7, #12
 800f036:	46bd      	mov	sp, r7
 800f038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03c:	4770      	bx	lr

0800f03e <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f03e:	b480      	push	{r7}
 800f040:	b083      	sub	sp, #12
 800f042:	af00      	add	r7, sp, #0
 800f044:	6078      	str	r0, [r7, #4]
 800f046:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	041a      	lsls	r2, r3, #16
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	609a      	str	r2, [r3, #8]
}
 800f050:	bf00      	nop
 800f052:	370c      	adds	r7, #12
 800f054:	46bd      	mov	sp, r7
 800f056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05a:	4770      	bx	lr

0800f05c <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b083      	sub	sp, #12
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	68da      	ldr	r2, [r3, #12]
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	4013      	ands	r3, r2
 800f06e:	683a      	ldr	r2, [r7, #0]
 800f070:	429a      	cmp	r2, r3
 800f072:	d101      	bne.n	800f078 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800f074:	2301      	movs	r3, #1
 800f076:	e000      	b.n	800f07a <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800f078:	2300      	movs	r3, #0
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	370c      	adds	r7, #12
 800f07e:	46bd      	mov	sp, r7
 800f080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f084:	4770      	bx	lr

0800f086 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800f086:	b480      	push	{r7}
 800f088:	b083      	sub	sp, #12
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	6078      	str	r0, [r7, #4]
 800f08e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	69da      	ldr	r2, [r3, #28]
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	4013      	ands	r3, r2
 800f098:	683a      	ldr	r2, [r7, #0]
 800f09a:	429a      	cmp	r2, r3
 800f09c:	d101      	bne.n	800f0a2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800f09e:	2301      	movs	r3, #1
 800f0a0:	e000      	b.n	800f0a4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800f0a2:	2300      	movs	r3, #0
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	370c      	adds	r7, #12
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr

0800f0b0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800f0b4:	2102      	movs	r1, #2
 800f0b6:	482a      	ldr	r0, [pc, #168]	; (800f160 <HW_IPCC_Rx_Handler+0xb0>)
 800f0b8:	f7ff ffe5 	bl	800f086 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d009      	beq.n	800f0d6 <HW_IPCC_Rx_Handler+0x26>
 800f0c2:	4b27      	ldr	r3, [pc, #156]	; (800f160 <HW_IPCC_Rx_Handler+0xb0>)
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	43db      	mvns	r3, r3
 800f0c8:	f003 0302 	and.w	r3, r3, #2
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d002      	beq.n	800f0d6 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800f0d0:	f000 f91e 	bl	800f310 <HW_IPCC_SYS_EvtHandler>
 800f0d4:	e041      	b.n	800f15a <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 800f0d6:	2104      	movs	r1, #4
 800f0d8:	4821      	ldr	r0, [pc, #132]	; (800f160 <HW_IPCC_Rx_Handler+0xb0>)
 800f0da:	f7ff ffd4 	bl	800f086 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d009      	beq.n	800f0f8 <HW_IPCC_Rx_Handler+0x48>
 800f0e4:	4b1e      	ldr	r3, [pc, #120]	; (800f160 <HW_IPCC_Rx_Handler+0xb0>)
 800f0e6:	685b      	ldr	r3, [r3, #4]
 800f0e8:	43db      	mvns	r3, r3
 800f0ea:	f003 0304 	and.w	r3, r3, #4
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d002      	beq.n	800f0f8 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 800f0f2:	f000 f967 	bl	800f3c4 <HW_IPCC_THREAD_NotEvtHandler>
 800f0f6:	e030      	b.n	800f15a <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 800f0f8:	2110      	movs	r1, #16
 800f0fa:	4819      	ldr	r0, [pc, #100]	; (800f160 <HW_IPCC_Rx_Handler+0xb0>)
 800f0fc:	f7ff ffc3 	bl	800f086 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f100:	4603      	mov	r3, r0
 800f102:	2b00      	cmp	r3, #0
 800f104:	d009      	beq.n	800f11a <HW_IPCC_Rx_Handler+0x6a>
 800f106:	4b16      	ldr	r3, [pc, #88]	; (800f160 <HW_IPCC_Rx_Handler+0xb0>)
 800f108:	685b      	ldr	r3, [r3, #4]
 800f10a:	43db      	mvns	r3, r3
 800f10c:	f003 0310 	and.w	r3, r3, #16
 800f110:	2b00      	cmp	r3, #0
 800f112:	d002      	beq.n	800f11a <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 800f114:	f000 f962 	bl	800f3dc <HW_IPCC_THREAD_CliNotEvtHandler>
 800f118:	e01f      	b.n	800f15a <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800f11a:	2101      	movs	r1, #1
 800f11c:	4810      	ldr	r0, [pc, #64]	; (800f160 <HW_IPCC_Rx_Handler+0xb0>)
 800f11e:	f7ff ffb2 	bl	800f086 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f122:	4603      	mov	r3, r0
 800f124:	2b00      	cmp	r3, #0
 800f126:	d008      	beq.n	800f13a <HW_IPCC_Rx_Handler+0x8a>
 800f128:	4b0d      	ldr	r3, [pc, #52]	; (800f160 <HW_IPCC_Rx_Handler+0xb0>)
 800f12a:	685b      	ldr	r3, [r3, #4]
 800f12c:	f003 0301 	and.w	r3, r3, #1
 800f130:	2b00      	cmp	r3, #0
 800f132:	d102      	bne.n	800f13a <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 800f134:	f000 f8b0 	bl	800f298 <HW_IPCC_BLE_EvtHandler>
 800f138:	e00f      	b.n	800f15a <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800f13a:	2108      	movs	r1, #8
 800f13c:	4808      	ldr	r0, [pc, #32]	; (800f160 <HW_IPCC_Rx_Handler+0xb0>)
 800f13e:	f7ff ffa2 	bl	800f086 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f142:	4603      	mov	r3, r0
 800f144:	2b00      	cmp	r3, #0
 800f146:	d009      	beq.n	800f15c <HW_IPCC_Rx_Handler+0xac>
 800f148:	4b05      	ldr	r3, [pc, #20]	; (800f160 <HW_IPCC_Rx_Handler+0xb0>)
 800f14a:	685b      	ldr	r3, [r3, #4]
 800f14c:	43db      	mvns	r3, r3
 800f14e:	f003 0308 	and.w	r3, r3, #8
 800f152:	2b00      	cmp	r3, #0
 800f154:	d002      	beq.n	800f15c <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 800f156:	f000 f98d 	bl	800f474 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800f15a:	bf00      	nop
 800f15c:	bf00      	nop
}
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	58000c00 	.word	0x58000c00

0800f164 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800f164:	b580      	push	{r7, lr}
 800f166:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800f168:	2102      	movs	r1, #2
 800f16a:	482b      	ldr	r0, [pc, #172]	; (800f218 <HW_IPCC_Tx_Handler+0xb4>)
 800f16c:	f7ff ff76 	bl	800f05c <LL_C1_IPCC_IsActiveFlag_CHx>
 800f170:	4603      	mov	r3, r0
 800f172:	2b00      	cmp	r3, #0
 800f174:	d109      	bne.n	800f18a <HW_IPCC_Tx_Handler+0x26>
 800f176:	4b28      	ldr	r3, [pc, #160]	; (800f218 <HW_IPCC_Tx_Handler+0xb4>)
 800f178:	685b      	ldr	r3, [r3, #4]
 800f17a:	43db      	mvns	r3, r3
 800f17c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f180:	2b00      	cmp	r3, #0
 800f182:	d002      	beq.n	800f18a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800f184:	f000 f8b8 	bl	800f2f8 <HW_IPCC_SYS_CmdEvtHandler>
 800f188:	e042      	b.n	800f210 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 800f18a:	2104      	movs	r1, #4
 800f18c:	4822      	ldr	r0, [pc, #136]	; (800f218 <HW_IPCC_Tx_Handler+0xb4>)
 800f18e:	f7ff ff65 	bl	800f05c <LL_C1_IPCC_IsActiveFlag_CHx>
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d109      	bne.n	800f1ac <HW_IPCC_Tx_Handler+0x48>
 800f198:	4b1f      	ldr	r3, [pc, #124]	; (800f218 <HW_IPCC_Tx_Handler+0xb4>)
 800f19a:	685b      	ldr	r3, [r3, #4]
 800f19c:	43db      	mvns	r3, r3
 800f19e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d002      	beq.n	800f1ac <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 800f1a6:	f000 f901 	bl	800f3ac <HW_IPCC_OT_CmdEvtHandler>
 800f1aa:	e031      	b.n	800f210 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800f1ac:	2102      	movs	r1, #2
 800f1ae:	481a      	ldr	r0, [pc, #104]	; (800f218 <HW_IPCC_Tx_Handler+0xb4>)
 800f1b0:	f7ff ff54 	bl	800f05c <LL_C1_IPCC_IsActiveFlag_CHx>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d109      	bne.n	800f1ce <HW_IPCC_Tx_Handler+0x6a>
 800f1ba:	4b17      	ldr	r3, [pc, #92]	; (800f218 <HW_IPCC_Tx_Handler+0xb4>)
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	43db      	mvns	r3, r3
 800f1c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d002      	beq.n	800f1ce <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800f1c8:	f000 f896 	bl	800f2f8 <HW_IPCC_SYS_CmdEvtHandler>
 800f1cc:	e020      	b.n	800f210 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800f1ce:	2108      	movs	r1, #8
 800f1d0:	4811      	ldr	r0, [pc, #68]	; (800f218 <HW_IPCC_Tx_Handler+0xb4>)
 800f1d2:	f7ff ff43 	bl	800f05c <LL_C1_IPCC_IsActiveFlag_CHx>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d109      	bne.n	800f1f0 <HW_IPCC_Tx_Handler+0x8c>
 800f1dc:	4b0e      	ldr	r3, [pc, #56]	; (800f218 <HW_IPCC_Tx_Handler+0xb4>)
 800f1de:	685b      	ldr	r3, [r3, #4]
 800f1e0:	43db      	mvns	r3, r3
 800f1e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d002      	beq.n	800f1f0 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 800f1ea:	f000 f925 	bl	800f438 <HW_IPCC_MM_FreeBufHandler>
 800f1ee:	e00f      	b.n	800f210 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800f1f0:	2120      	movs	r1, #32
 800f1f2:	4809      	ldr	r0, [pc, #36]	; (800f218 <HW_IPCC_Tx_Handler+0xb4>)
 800f1f4:	f7ff ff32 	bl	800f05c <LL_C1_IPCC_IsActiveFlag_CHx>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d109      	bne.n	800f212 <HW_IPCC_Tx_Handler+0xae>
 800f1fe:	4b06      	ldr	r3, [pc, #24]	; (800f218 <HW_IPCC_Tx_Handler+0xb4>)
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	43db      	mvns	r3, r3
 800f204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d002      	beq.n	800f212 <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800f20c:	f000 f850 	bl	800f2b0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800f210:	bf00      	nop
 800f212:	bf00      	nop
}
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop
 800f218:	58000c00 	.word	0x58000c00

0800f21c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800f220:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800f224:	f7ff fe79 	bl	800ef1a <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800f228:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f22c:	f7ff fe36 	bl	800ee9c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800f230:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f234:	f7ff fe46 	bl	800eec4 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800f238:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800f23a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800f23c:	f7ff fe1e 	bl	800ee7c <LL_PWR_EnableBootC2>

  return;
 800f240:	bf00      	nop
}
 800f242:	bd80      	pop	{r7, pc}

0800f244 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800f244:	b580      	push	{r7, lr}
 800f246:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800f248:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800f24c:	f7ff fe4c 	bl	800eee8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800f250:	4806      	ldr	r0, [pc, #24]	; (800f26c <HW_IPCC_Init+0x28>)
 800f252:	f7ff fe8e 	bl	800ef72 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800f256:	4805      	ldr	r0, [pc, #20]	; (800f26c <HW_IPCC_Init+0x28>)
 800f258:	f7ff fe7b 	bl	800ef52 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800f25c:	202c      	movs	r0, #44	; 0x2c
 800f25e:	f7f3 fb66 	bl	800292e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800f262:	202d      	movs	r0, #45	; 0x2d
 800f264:	f7f3 fb63 	bl	800292e <HAL_NVIC_EnableIRQ>

  return;
 800f268:	bf00      	nop
}
 800f26a:	bd80      	pop	{r7, pc}
 800f26c:	58000c00 	.word	0x58000c00

0800f270 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800f270:	b580      	push	{r7, lr}
 800f272:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800f274:	2101      	movs	r1, #1
 800f276:	4802      	ldr	r0, [pc, #8]	; (800f280 <HW_IPCC_BLE_Init+0x10>)
 800f278:	f7ff feb0 	bl	800efdc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f27c:	bf00      	nop
}
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	58000c00 	.word	0x58000c00

0800f284 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800f288:	2101      	movs	r1, #1
 800f28a:	4802      	ldr	r0, [pc, #8]	; (800f294 <HW_IPCC_BLE_SendCmd+0x10>)
 800f28c:	f7ff fed7 	bl	800f03e <LL_C1_IPCC_SetFlag_CHx>

  return;
 800f290:	bf00      	nop
}
 800f292:	bd80      	pop	{r7, pc}
 800f294:	58000c00 	.word	0x58000c00

0800f298 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800f29c:	f7f9 fb56 	bl	800894c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800f2a0:	2101      	movs	r1, #1
 800f2a2:	4802      	ldr	r0, [pc, #8]	; (800f2ac <HW_IPCC_BLE_EvtHandler+0x14>)
 800f2a4:	f7ff febd 	bl	800f022 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800f2a8:	bf00      	nop
}
 800f2aa:	bd80      	pop	{r7, pc}
 800f2ac:	58000c00 	.word	0x58000c00

0800f2b0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800f2b4:	2120      	movs	r1, #32
 800f2b6:	4803      	ldr	r0, [pc, #12]	; (800f2c4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800f2b8:	f7ff fe7e 	bl	800efb8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800f2bc:	f7f9 fb76 	bl	80089ac <HW_IPCC_BLE_AclDataAckNot>

  return;
 800f2c0:	bf00      	nop
}
 800f2c2:	bd80      	pop	{r7, pc}
 800f2c4:	58000c00 	.word	0x58000c00

0800f2c8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800f2cc:	2102      	movs	r1, #2
 800f2ce:	4802      	ldr	r0, [pc, #8]	; (800f2d8 <HW_IPCC_SYS_Init+0x10>)
 800f2d0:	f7ff fe84 	bl	800efdc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f2d4:	bf00      	nop
}
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	58000c00 	.word	0x58000c00

0800f2dc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800f2e0:	2102      	movs	r1, #2
 800f2e2:	4804      	ldr	r0, [pc, #16]	; (800f2f4 <HW_IPCC_SYS_SendCmd+0x18>)
 800f2e4:	f7ff feab 	bl	800f03e <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800f2e8:	2102      	movs	r1, #2
 800f2ea:	4802      	ldr	r0, [pc, #8]	; (800f2f4 <HW_IPCC_SYS_SendCmd+0x18>)
 800f2ec:	f7ff fe51 	bl	800ef92 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800f2f0:	bf00      	nop
}
 800f2f2:	bd80      	pop	{r7, pc}
 800f2f4:	58000c00 	.word	0x58000c00

0800f2f8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800f2fc:	2102      	movs	r1, #2
 800f2fe:	4803      	ldr	r0, [pc, #12]	; (800f30c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800f300:	f7ff fe5a 	bl	800efb8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800f304:	f7f9 fba2 	bl	8008a4c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800f308:	bf00      	nop
}
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	58000c00 	.word	0x58000c00

0800f310 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800f310:	b580      	push	{r7, lr}
 800f312:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800f314:	f7f9 fbb0 	bl	8008a78 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800f318:	2102      	movs	r1, #2
 800f31a:	4802      	ldr	r0, [pc, #8]	; (800f324 <HW_IPCC_SYS_EvtHandler+0x14>)
 800f31c:	f7ff fe81 	bl	800f022 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800f320:	bf00      	nop
}
 800f322:	bd80      	pop	{r7, pc}
 800f324:	58000c00 	.word	0x58000c00

0800f328 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 800f32c:	2104      	movs	r1, #4
 800f32e:	4804      	ldr	r0, [pc, #16]	; (800f340 <HW_IPCC_THREAD_Init+0x18>)
 800f330:	f7ff fe54 	bl	800efdc <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800f334:	2110      	movs	r1, #16
 800f336:	4802      	ldr	r0, [pc, #8]	; (800f340 <HW_IPCC_THREAD_Init+0x18>)
 800f338:	f7ff fe50 	bl	800efdc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f33c:	bf00      	nop
}
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	58000c00 	.word	0x58000c00

0800f344 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 800f344:	b580      	push	{r7, lr}
 800f346:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 800f348:	2104      	movs	r1, #4
 800f34a:	4804      	ldr	r0, [pc, #16]	; (800f35c <HW_IPCC_OT_SendCmd+0x18>)
 800f34c:	f7ff fe77 	bl	800f03e <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 800f350:	2104      	movs	r1, #4
 800f352:	4802      	ldr	r0, [pc, #8]	; (800f35c <HW_IPCC_OT_SendCmd+0x18>)
 800f354:	f7ff fe1d 	bl	800ef92 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800f358:	bf00      	nop
}
 800f35a:	bd80      	pop	{r7, pc}
 800f35c:	58000c00 	.word	0x58000c00

0800f360 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 800f360:	b580      	push	{r7, lr}
 800f362:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 800f364:	2110      	movs	r1, #16
 800f366:	4802      	ldr	r0, [pc, #8]	; (800f370 <HW_IPCC_CLI_SendCmd+0x10>)
 800f368:	f7ff fe69 	bl	800f03e <LL_C1_IPCC_SetFlag_CHx>

  return;
 800f36c:	bf00      	nop
}
 800f36e:	bd80      	pop	{r7, pc}
 800f370:	58000c00 	.word	0x58000c00

0800f374 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 800f374:	b580      	push	{r7, lr}
 800f376:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 800f378:	2104      	movs	r1, #4
 800f37a:	4804      	ldr	r0, [pc, #16]	; (800f38c <HW_IPCC_THREAD_SendAck+0x18>)
 800f37c:	f7ff fe51 	bl	800f022 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 800f380:	2104      	movs	r1, #4
 800f382:	4802      	ldr	r0, [pc, #8]	; (800f38c <HW_IPCC_THREAD_SendAck+0x18>)
 800f384:	f7ff fe2a 	bl	800efdc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f388:	bf00      	nop
}
 800f38a:	bd80      	pop	{r7, pc}
 800f38c:	58000c00 	.word	0x58000c00

0800f390 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 800f390:	b580      	push	{r7, lr}
 800f392:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800f394:	2110      	movs	r1, #16
 800f396:	4804      	ldr	r0, [pc, #16]	; (800f3a8 <HW_IPCC_THREAD_CliSendAck+0x18>)
 800f398:	f7ff fe43 	bl	800f022 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800f39c:	2110      	movs	r1, #16
 800f39e:	4802      	ldr	r0, [pc, #8]	; (800f3a8 <HW_IPCC_THREAD_CliSendAck+0x18>)
 800f3a0:	f7ff fe1c 	bl	800efdc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f3a4:	bf00      	nop
}
 800f3a6:	bd80      	pop	{r7, pc}
 800f3a8:	58000c00 	.word	0x58000c00

0800f3ac <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 800f3b0:	2104      	movs	r1, #4
 800f3b2:	4803      	ldr	r0, [pc, #12]	; (800f3c0 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 800f3b4:	f7ff fe00 	bl	800efb8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 800f3b8:	f7f9 fbd4 	bl	8008b64 <HW_IPCC_OT_CmdEvtNot>

  return;
 800f3bc:	bf00      	nop
}
 800f3be:	bd80      	pop	{r7, pc}
 800f3c0:	58000c00 	.word	0x58000c00

0800f3c4 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 800f3c8:	2104      	movs	r1, #4
 800f3ca:	4803      	ldr	r0, [pc, #12]	; (800f3d8 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 800f3cc:	f7ff fe18 	bl	800f000 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 800f3d0:	f7f9 fbd4 	bl	8008b7c <HW_IPCC_THREAD_EvtNot>

  return;
 800f3d4:	bf00      	nop
}
 800f3d6:	bd80      	pop	{r7, pc}
 800f3d8:	58000c00 	.word	0x58000c00

0800f3dc <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800f3e0:	2110      	movs	r1, #16
 800f3e2:	4803      	ldr	r0, [pc, #12]	; (800f3f0 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 800f3e4:	f7ff fe0c 	bl	800f000 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 800f3e8:	f7f9 fbd4 	bl	8008b94 <HW_IPCC_THREAD_CliEvtNot>

  return;
 800f3ec:	bf00      	nop
}
 800f3ee:	bd80      	pop	{r7, pc}
 800f3f0:	58000c00 	.word	0x58000c00

0800f3f4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b082      	sub	sp, #8
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800f3fc:	2108      	movs	r1, #8
 800f3fe:	480c      	ldr	r0, [pc, #48]	; (800f430 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800f400:	f7ff fe2c 	bl	800f05c <LL_C1_IPCC_IsActiveFlag_CHx>
 800f404:	4603      	mov	r3, r0
 800f406:	2b00      	cmp	r3, #0
 800f408:	d007      	beq.n	800f41a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800f40a:	4a0a      	ldr	r2, [pc, #40]	; (800f434 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f410:	2108      	movs	r1, #8
 800f412:	4807      	ldr	r0, [pc, #28]	; (800f430 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800f414:	f7ff fdbd 	bl	800ef92 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800f418:	e006      	b.n	800f428 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f41e:	2108      	movs	r1, #8
 800f420:	4803      	ldr	r0, [pc, #12]	; (800f430 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800f422:	f7ff fe0c 	bl	800f03e <LL_C1_IPCC_SetFlag_CHx>
  return;
 800f426:	bf00      	nop
}
 800f428:	3708      	adds	r7, #8
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}
 800f42e:	bf00      	nop
 800f430:	58000c00 	.word	0x58000c00
 800f434:	20005b48 	.word	0x20005b48

0800f438 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f43c:	2108      	movs	r1, #8
 800f43e:	4806      	ldr	r0, [pc, #24]	; (800f458 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800f440:	f7ff fdba 	bl	800efb8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800f444:	4b05      	ldr	r3, [pc, #20]	; (800f45c <HW_IPCC_MM_FreeBufHandler+0x24>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f44a:	2108      	movs	r1, #8
 800f44c:	4802      	ldr	r0, [pc, #8]	; (800f458 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800f44e:	f7ff fdf6 	bl	800f03e <LL_C1_IPCC_SetFlag_CHx>

  return;
 800f452:	bf00      	nop
}
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	58000c00 	.word	0x58000c00
 800f45c:	20005b48 	.word	0x20005b48

0800f460 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800f460:	b580      	push	{r7, lr}
 800f462:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800f464:	2108      	movs	r1, #8
 800f466:	4802      	ldr	r0, [pc, #8]	; (800f470 <HW_IPCC_TRACES_Init+0x10>)
 800f468:	f7ff fdb8 	bl	800efdc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f46c:	bf00      	nop
}
 800f46e:	bd80      	pop	{r7, pc}
 800f470:	58000c00 	.word	0x58000c00

0800f474 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800f474:	b580      	push	{r7, lr}
 800f476:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800f478:	f7f9 fc1e 	bl	8008cb8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800f47c:	2108      	movs	r1, #8
 800f47e:	4802      	ldr	r0, [pc, #8]	; (800f488 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800f480:	f7ff fdcf 	bl	800f022 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800f484:	bf00      	nop
}
 800f486:	bd80      	pop	{r7, pc}
 800f488:	58000c00 	.word	0x58000c00

0800f48c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800f48c:	b480      	push	{r7}
 800f48e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800f490:	4b05      	ldr	r3, [pc, #20]	; (800f4a8 <UTIL_LPM_Init+0x1c>)
 800f492:	2200      	movs	r2, #0
 800f494:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800f496:	4b05      	ldr	r3, [pc, #20]	; (800f4ac <UTIL_LPM_Init+0x20>)
 800f498:	2200      	movs	r2, #0
 800f49a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800f49c:	bf00      	nop
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a4:	4770      	bx	lr
 800f4a6:	bf00      	nop
 800f4a8:	20005b4c 	.word	0x20005b4c
 800f4ac:	20005b50 	.word	0x20005b50

0800f4b0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b087      	sub	sp, #28
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	460b      	mov	r3, r1
 800f4ba:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4bc:	f3ef 8310 	mrs	r3, PRIMASK
 800f4c0:	613b      	str	r3, [r7, #16]
  return(result);
 800f4c2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800f4c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f4c6:	b672      	cpsid	i
  
  switch(state)
 800f4c8:	78fb      	ldrb	r3, [r7, #3]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d009      	beq.n	800f4e2 <UTIL_LPM_SetOffMode+0x32>
 800f4ce:	2b01      	cmp	r3, #1
 800f4d0:	d000      	beq.n	800f4d4 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 800f4d2:	e00e      	b.n	800f4f2 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 800f4d4:	4b0c      	ldr	r3, [pc, #48]	; (800f508 <UTIL_LPM_SetOffMode+0x58>)
 800f4d6:	681a      	ldr	r2, [r3, #0]
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	4313      	orrs	r3, r2
 800f4dc:	4a0a      	ldr	r2, [pc, #40]	; (800f508 <UTIL_LPM_SetOffMode+0x58>)
 800f4de:	6013      	str	r3, [r2, #0]
      break;
 800f4e0:	e007      	b.n	800f4f2 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	43da      	mvns	r2, r3
 800f4e6:	4b08      	ldr	r3, [pc, #32]	; (800f508 <UTIL_LPM_SetOffMode+0x58>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	4013      	ands	r3, r2
 800f4ec:	4a06      	ldr	r2, [pc, #24]	; (800f508 <UTIL_LPM_SetOffMode+0x58>)
 800f4ee:	6013      	str	r3, [r2, #0]
      break;
 800f4f0:	bf00      	nop
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800f4fc:	bf00      	nop
 800f4fe:	371c      	adds	r7, #28
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr
 800f508:	20005b50 	.word	0x20005b50

0800f50c <__errno>:
 800f50c:	4b01      	ldr	r3, [pc, #4]	; (800f514 <__errno+0x8>)
 800f50e:	6818      	ldr	r0, [r3, #0]
 800f510:	4770      	bx	lr
 800f512:	bf00      	nop
 800f514:	20000024 	.word	0x20000024

0800f518 <__libc_init_array>:
 800f518:	b570      	push	{r4, r5, r6, lr}
 800f51a:	4e0d      	ldr	r6, [pc, #52]	; (800f550 <__libc_init_array+0x38>)
 800f51c:	4c0d      	ldr	r4, [pc, #52]	; (800f554 <__libc_init_array+0x3c>)
 800f51e:	1ba4      	subs	r4, r4, r6
 800f520:	10a4      	asrs	r4, r4, #2
 800f522:	2500      	movs	r5, #0
 800f524:	42a5      	cmp	r5, r4
 800f526:	d109      	bne.n	800f53c <__libc_init_array+0x24>
 800f528:	4e0b      	ldr	r6, [pc, #44]	; (800f558 <__libc_init_array+0x40>)
 800f52a:	4c0c      	ldr	r4, [pc, #48]	; (800f55c <__libc_init_array+0x44>)
 800f52c:	f001 f97c 	bl	8010828 <_init>
 800f530:	1ba4      	subs	r4, r4, r6
 800f532:	10a4      	asrs	r4, r4, #2
 800f534:	2500      	movs	r5, #0
 800f536:	42a5      	cmp	r5, r4
 800f538:	d105      	bne.n	800f546 <__libc_init_array+0x2e>
 800f53a:	bd70      	pop	{r4, r5, r6, pc}
 800f53c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f540:	4798      	blx	r3
 800f542:	3501      	adds	r5, #1
 800f544:	e7ee      	b.n	800f524 <__libc_init_array+0xc>
 800f546:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f54a:	4798      	blx	r3
 800f54c:	3501      	adds	r5, #1
 800f54e:	e7f2      	b.n	800f536 <__libc_init_array+0x1e>
 800f550:	08010fcc 	.word	0x08010fcc
 800f554:	08010fcc 	.word	0x08010fcc
 800f558:	08010fcc 	.word	0x08010fcc
 800f55c:	08010fd0 	.word	0x08010fd0

0800f560 <memcpy>:
 800f560:	b510      	push	{r4, lr}
 800f562:	1e43      	subs	r3, r0, #1
 800f564:	440a      	add	r2, r1
 800f566:	4291      	cmp	r1, r2
 800f568:	d100      	bne.n	800f56c <memcpy+0xc>
 800f56a:	bd10      	pop	{r4, pc}
 800f56c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f570:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f574:	e7f7      	b.n	800f566 <memcpy+0x6>

0800f576 <memset>:
 800f576:	4402      	add	r2, r0
 800f578:	4603      	mov	r3, r0
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d100      	bne.n	800f580 <memset+0xa>
 800f57e:	4770      	bx	lr
 800f580:	f803 1b01 	strb.w	r1, [r3], #1
 800f584:	e7f9      	b.n	800f57a <memset+0x4>
	...

0800f588 <iprintf>:
 800f588:	b40f      	push	{r0, r1, r2, r3}
 800f58a:	4b0a      	ldr	r3, [pc, #40]	; (800f5b4 <iprintf+0x2c>)
 800f58c:	b513      	push	{r0, r1, r4, lr}
 800f58e:	681c      	ldr	r4, [r3, #0]
 800f590:	b124      	cbz	r4, 800f59c <iprintf+0x14>
 800f592:	69a3      	ldr	r3, [r4, #24]
 800f594:	b913      	cbnz	r3, 800f59c <iprintf+0x14>
 800f596:	4620      	mov	r0, r4
 800f598:	f000 fa90 	bl	800fabc <__sinit>
 800f59c:	ab05      	add	r3, sp, #20
 800f59e:	9a04      	ldr	r2, [sp, #16]
 800f5a0:	68a1      	ldr	r1, [r4, #8]
 800f5a2:	9301      	str	r3, [sp, #4]
 800f5a4:	4620      	mov	r0, r4
 800f5a6:	f000 fd9b 	bl	80100e0 <_vfiprintf_r>
 800f5aa:	b002      	add	sp, #8
 800f5ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5b0:	b004      	add	sp, #16
 800f5b2:	4770      	bx	lr
 800f5b4:	20000024 	.word	0x20000024

0800f5b8 <_puts_r>:
 800f5b8:	b570      	push	{r4, r5, r6, lr}
 800f5ba:	460e      	mov	r6, r1
 800f5bc:	4605      	mov	r5, r0
 800f5be:	b118      	cbz	r0, 800f5c8 <_puts_r+0x10>
 800f5c0:	6983      	ldr	r3, [r0, #24]
 800f5c2:	b90b      	cbnz	r3, 800f5c8 <_puts_r+0x10>
 800f5c4:	f000 fa7a 	bl	800fabc <__sinit>
 800f5c8:	69ab      	ldr	r3, [r5, #24]
 800f5ca:	68ac      	ldr	r4, [r5, #8]
 800f5cc:	b913      	cbnz	r3, 800f5d4 <_puts_r+0x1c>
 800f5ce:	4628      	mov	r0, r5
 800f5d0:	f000 fa74 	bl	800fabc <__sinit>
 800f5d4:	4b23      	ldr	r3, [pc, #140]	; (800f664 <_puts_r+0xac>)
 800f5d6:	429c      	cmp	r4, r3
 800f5d8:	d117      	bne.n	800f60a <_puts_r+0x52>
 800f5da:	686c      	ldr	r4, [r5, #4]
 800f5dc:	89a3      	ldrh	r3, [r4, #12]
 800f5de:	071b      	lsls	r3, r3, #28
 800f5e0:	d51d      	bpl.n	800f61e <_puts_r+0x66>
 800f5e2:	6923      	ldr	r3, [r4, #16]
 800f5e4:	b1db      	cbz	r3, 800f61e <_puts_r+0x66>
 800f5e6:	3e01      	subs	r6, #1
 800f5e8:	68a3      	ldr	r3, [r4, #8]
 800f5ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f5ee:	3b01      	subs	r3, #1
 800f5f0:	60a3      	str	r3, [r4, #8]
 800f5f2:	b9e9      	cbnz	r1, 800f630 <_puts_r+0x78>
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	da2e      	bge.n	800f656 <_puts_r+0x9e>
 800f5f8:	4622      	mov	r2, r4
 800f5fa:	210a      	movs	r1, #10
 800f5fc:	4628      	mov	r0, r5
 800f5fe:	f000 f8ad 	bl	800f75c <__swbuf_r>
 800f602:	3001      	adds	r0, #1
 800f604:	d011      	beq.n	800f62a <_puts_r+0x72>
 800f606:	200a      	movs	r0, #10
 800f608:	e011      	b.n	800f62e <_puts_r+0x76>
 800f60a:	4b17      	ldr	r3, [pc, #92]	; (800f668 <_puts_r+0xb0>)
 800f60c:	429c      	cmp	r4, r3
 800f60e:	d101      	bne.n	800f614 <_puts_r+0x5c>
 800f610:	68ac      	ldr	r4, [r5, #8]
 800f612:	e7e3      	b.n	800f5dc <_puts_r+0x24>
 800f614:	4b15      	ldr	r3, [pc, #84]	; (800f66c <_puts_r+0xb4>)
 800f616:	429c      	cmp	r4, r3
 800f618:	bf08      	it	eq
 800f61a:	68ec      	ldreq	r4, [r5, #12]
 800f61c:	e7de      	b.n	800f5dc <_puts_r+0x24>
 800f61e:	4621      	mov	r1, r4
 800f620:	4628      	mov	r0, r5
 800f622:	f000 f8ed 	bl	800f800 <__swsetup_r>
 800f626:	2800      	cmp	r0, #0
 800f628:	d0dd      	beq.n	800f5e6 <_puts_r+0x2e>
 800f62a:	f04f 30ff 	mov.w	r0, #4294967295
 800f62e:	bd70      	pop	{r4, r5, r6, pc}
 800f630:	2b00      	cmp	r3, #0
 800f632:	da04      	bge.n	800f63e <_puts_r+0x86>
 800f634:	69a2      	ldr	r2, [r4, #24]
 800f636:	429a      	cmp	r2, r3
 800f638:	dc06      	bgt.n	800f648 <_puts_r+0x90>
 800f63a:	290a      	cmp	r1, #10
 800f63c:	d004      	beq.n	800f648 <_puts_r+0x90>
 800f63e:	6823      	ldr	r3, [r4, #0]
 800f640:	1c5a      	adds	r2, r3, #1
 800f642:	6022      	str	r2, [r4, #0]
 800f644:	7019      	strb	r1, [r3, #0]
 800f646:	e7cf      	b.n	800f5e8 <_puts_r+0x30>
 800f648:	4622      	mov	r2, r4
 800f64a:	4628      	mov	r0, r5
 800f64c:	f000 f886 	bl	800f75c <__swbuf_r>
 800f650:	3001      	adds	r0, #1
 800f652:	d1c9      	bne.n	800f5e8 <_puts_r+0x30>
 800f654:	e7e9      	b.n	800f62a <_puts_r+0x72>
 800f656:	6823      	ldr	r3, [r4, #0]
 800f658:	200a      	movs	r0, #10
 800f65a:	1c5a      	adds	r2, r3, #1
 800f65c:	6022      	str	r2, [r4, #0]
 800f65e:	7018      	strb	r0, [r3, #0]
 800f660:	e7e5      	b.n	800f62e <_puts_r+0x76>
 800f662:	bf00      	nop
 800f664:	08010f50 	.word	0x08010f50
 800f668:	08010f70 	.word	0x08010f70
 800f66c:	08010f30 	.word	0x08010f30

0800f670 <puts>:
 800f670:	4b02      	ldr	r3, [pc, #8]	; (800f67c <puts+0xc>)
 800f672:	4601      	mov	r1, r0
 800f674:	6818      	ldr	r0, [r3, #0]
 800f676:	f7ff bf9f 	b.w	800f5b8 <_puts_r>
 800f67a:	bf00      	nop
 800f67c:	20000024 	.word	0x20000024

0800f680 <sniprintf>:
 800f680:	b40c      	push	{r2, r3}
 800f682:	b530      	push	{r4, r5, lr}
 800f684:	4b17      	ldr	r3, [pc, #92]	; (800f6e4 <sniprintf+0x64>)
 800f686:	1e0c      	subs	r4, r1, #0
 800f688:	b09d      	sub	sp, #116	; 0x74
 800f68a:	681d      	ldr	r5, [r3, #0]
 800f68c:	da08      	bge.n	800f6a0 <sniprintf+0x20>
 800f68e:	238b      	movs	r3, #139	; 0x8b
 800f690:	602b      	str	r3, [r5, #0]
 800f692:	f04f 30ff 	mov.w	r0, #4294967295
 800f696:	b01d      	add	sp, #116	; 0x74
 800f698:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f69c:	b002      	add	sp, #8
 800f69e:	4770      	bx	lr
 800f6a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f6a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f6a8:	bf14      	ite	ne
 800f6aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f6ae:	4623      	moveq	r3, r4
 800f6b0:	9304      	str	r3, [sp, #16]
 800f6b2:	9307      	str	r3, [sp, #28]
 800f6b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f6b8:	9002      	str	r0, [sp, #8]
 800f6ba:	9006      	str	r0, [sp, #24]
 800f6bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f6c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f6c2:	ab21      	add	r3, sp, #132	; 0x84
 800f6c4:	a902      	add	r1, sp, #8
 800f6c6:	4628      	mov	r0, r5
 800f6c8:	9301      	str	r3, [sp, #4]
 800f6ca:	f000 fbe7 	bl	800fe9c <_svfiprintf_r>
 800f6ce:	1c43      	adds	r3, r0, #1
 800f6d0:	bfbc      	itt	lt
 800f6d2:	238b      	movlt	r3, #139	; 0x8b
 800f6d4:	602b      	strlt	r3, [r5, #0]
 800f6d6:	2c00      	cmp	r4, #0
 800f6d8:	d0dd      	beq.n	800f696 <sniprintf+0x16>
 800f6da:	9b02      	ldr	r3, [sp, #8]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	701a      	strb	r2, [r3, #0]
 800f6e0:	e7d9      	b.n	800f696 <sniprintf+0x16>
 800f6e2:	bf00      	nop
 800f6e4:	20000024 	.word	0x20000024

0800f6e8 <_vsniprintf_r>:
 800f6e8:	b530      	push	{r4, r5, lr}
 800f6ea:	1e14      	subs	r4, r2, #0
 800f6ec:	4605      	mov	r5, r0
 800f6ee:	b09b      	sub	sp, #108	; 0x6c
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	da05      	bge.n	800f700 <_vsniprintf_r+0x18>
 800f6f4:	238b      	movs	r3, #139	; 0x8b
 800f6f6:	602b      	str	r3, [r5, #0]
 800f6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f6fc:	b01b      	add	sp, #108	; 0x6c
 800f6fe:	bd30      	pop	{r4, r5, pc}
 800f700:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f704:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f708:	bf14      	ite	ne
 800f70a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f70e:	4623      	moveq	r3, r4
 800f710:	9302      	str	r3, [sp, #8]
 800f712:	9305      	str	r3, [sp, #20]
 800f714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f718:	9100      	str	r1, [sp, #0]
 800f71a:	9104      	str	r1, [sp, #16]
 800f71c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f720:	4602      	mov	r2, r0
 800f722:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f724:	4669      	mov	r1, sp
 800f726:	4628      	mov	r0, r5
 800f728:	f000 fbb8 	bl	800fe9c <_svfiprintf_r>
 800f72c:	1c43      	adds	r3, r0, #1
 800f72e:	bfbc      	itt	lt
 800f730:	238b      	movlt	r3, #139	; 0x8b
 800f732:	602b      	strlt	r3, [r5, #0]
 800f734:	2c00      	cmp	r4, #0
 800f736:	d0e1      	beq.n	800f6fc <_vsniprintf_r+0x14>
 800f738:	9b00      	ldr	r3, [sp, #0]
 800f73a:	2200      	movs	r2, #0
 800f73c:	701a      	strb	r2, [r3, #0]
 800f73e:	e7dd      	b.n	800f6fc <_vsniprintf_r+0x14>

0800f740 <vsniprintf>:
 800f740:	b507      	push	{r0, r1, r2, lr}
 800f742:	9300      	str	r3, [sp, #0]
 800f744:	4613      	mov	r3, r2
 800f746:	460a      	mov	r2, r1
 800f748:	4601      	mov	r1, r0
 800f74a:	4803      	ldr	r0, [pc, #12]	; (800f758 <vsniprintf+0x18>)
 800f74c:	6800      	ldr	r0, [r0, #0]
 800f74e:	f7ff ffcb 	bl	800f6e8 <_vsniprintf_r>
 800f752:	b003      	add	sp, #12
 800f754:	f85d fb04 	ldr.w	pc, [sp], #4
 800f758:	20000024 	.word	0x20000024

0800f75c <__swbuf_r>:
 800f75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f75e:	460e      	mov	r6, r1
 800f760:	4614      	mov	r4, r2
 800f762:	4605      	mov	r5, r0
 800f764:	b118      	cbz	r0, 800f76e <__swbuf_r+0x12>
 800f766:	6983      	ldr	r3, [r0, #24]
 800f768:	b90b      	cbnz	r3, 800f76e <__swbuf_r+0x12>
 800f76a:	f000 f9a7 	bl	800fabc <__sinit>
 800f76e:	4b21      	ldr	r3, [pc, #132]	; (800f7f4 <__swbuf_r+0x98>)
 800f770:	429c      	cmp	r4, r3
 800f772:	d12a      	bne.n	800f7ca <__swbuf_r+0x6e>
 800f774:	686c      	ldr	r4, [r5, #4]
 800f776:	69a3      	ldr	r3, [r4, #24]
 800f778:	60a3      	str	r3, [r4, #8]
 800f77a:	89a3      	ldrh	r3, [r4, #12]
 800f77c:	071a      	lsls	r2, r3, #28
 800f77e:	d52e      	bpl.n	800f7de <__swbuf_r+0x82>
 800f780:	6923      	ldr	r3, [r4, #16]
 800f782:	b363      	cbz	r3, 800f7de <__swbuf_r+0x82>
 800f784:	6923      	ldr	r3, [r4, #16]
 800f786:	6820      	ldr	r0, [r4, #0]
 800f788:	1ac0      	subs	r0, r0, r3
 800f78a:	6963      	ldr	r3, [r4, #20]
 800f78c:	b2f6      	uxtb	r6, r6
 800f78e:	4283      	cmp	r3, r0
 800f790:	4637      	mov	r7, r6
 800f792:	dc04      	bgt.n	800f79e <__swbuf_r+0x42>
 800f794:	4621      	mov	r1, r4
 800f796:	4628      	mov	r0, r5
 800f798:	f000 f926 	bl	800f9e8 <_fflush_r>
 800f79c:	bb28      	cbnz	r0, 800f7ea <__swbuf_r+0x8e>
 800f79e:	68a3      	ldr	r3, [r4, #8]
 800f7a0:	3b01      	subs	r3, #1
 800f7a2:	60a3      	str	r3, [r4, #8]
 800f7a4:	6823      	ldr	r3, [r4, #0]
 800f7a6:	1c5a      	adds	r2, r3, #1
 800f7a8:	6022      	str	r2, [r4, #0]
 800f7aa:	701e      	strb	r6, [r3, #0]
 800f7ac:	6963      	ldr	r3, [r4, #20]
 800f7ae:	3001      	adds	r0, #1
 800f7b0:	4283      	cmp	r3, r0
 800f7b2:	d004      	beq.n	800f7be <__swbuf_r+0x62>
 800f7b4:	89a3      	ldrh	r3, [r4, #12]
 800f7b6:	07db      	lsls	r3, r3, #31
 800f7b8:	d519      	bpl.n	800f7ee <__swbuf_r+0x92>
 800f7ba:	2e0a      	cmp	r6, #10
 800f7bc:	d117      	bne.n	800f7ee <__swbuf_r+0x92>
 800f7be:	4621      	mov	r1, r4
 800f7c0:	4628      	mov	r0, r5
 800f7c2:	f000 f911 	bl	800f9e8 <_fflush_r>
 800f7c6:	b190      	cbz	r0, 800f7ee <__swbuf_r+0x92>
 800f7c8:	e00f      	b.n	800f7ea <__swbuf_r+0x8e>
 800f7ca:	4b0b      	ldr	r3, [pc, #44]	; (800f7f8 <__swbuf_r+0x9c>)
 800f7cc:	429c      	cmp	r4, r3
 800f7ce:	d101      	bne.n	800f7d4 <__swbuf_r+0x78>
 800f7d0:	68ac      	ldr	r4, [r5, #8]
 800f7d2:	e7d0      	b.n	800f776 <__swbuf_r+0x1a>
 800f7d4:	4b09      	ldr	r3, [pc, #36]	; (800f7fc <__swbuf_r+0xa0>)
 800f7d6:	429c      	cmp	r4, r3
 800f7d8:	bf08      	it	eq
 800f7da:	68ec      	ldreq	r4, [r5, #12]
 800f7dc:	e7cb      	b.n	800f776 <__swbuf_r+0x1a>
 800f7de:	4621      	mov	r1, r4
 800f7e0:	4628      	mov	r0, r5
 800f7e2:	f000 f80d 	bl	800f800 <__swsetup_r>
 800f7e6:	2800      	cmp	r0, #0
 800f7e8:	d0cc      	beq.n	800f784 <__swbuf_r+0x28>
 800f7ea:	f04f 37ff 	mov.w	r7, #4294967295
 800f7ee:	4638      	mov	r0, r7
 800f7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7f2:	bf00      	nop
 800f7f4:	08010f50 	.word	0x08010f50
 800f7f8:	08010f70 	.word	0x08010f70
 800f7fc:	08010f30 	.word	0x08010f30

0800f800 <__swsetup_r>:
 800f800:	4b32      	ldr	r3, [pc, #200]	; (800f8cc <__swsetup_r+0xcc>)
 800f802:	b570      	push	{r4, r5, r6, lr}
 800f804:	681d      	ldr	r5, [r3, #0]
 800f806:	4606      	mov	r6, r0
 800f808:	460c      	mov	r4, r1
 800f80a:	b125      	cbz	r5, 800f816 <__swsetup_r+0x16>
 800f80c:	69ab      	ldr	r3, [r5, #24]
 800f80e:	b913      	cbnz	r3, 800f816 <__swsetup_r+0x16>
 800f810:	4628      	mov	r0, r5
 800f812:	f000 f953 	bl	800fabc <__sinit>
 800f816:	4b2e      	ldr	r3, [pc, #184]	; (800f8d0 <__swsetup_r+0xd0>)
 800f818:	429c      	cmp	r4, r3
 800f81a:	d10f      	bne.n	800f83c <__swsetup_r+0x3c>
 800f81c:	686c      	ldr	r4, [r5, #4]
 800f81e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f822:	b29a      	uxth	r2, r3
 800f824:	0715      	lsls	r5, r2, #28
 800f826:	d42c      	bmi.n	800f882 <__swsetup_r+0x82>
 800f828:	06d0      	lsls	r0, r2, #27
 800f82a:	d411      	bmi.n	800f850 <__swsetup_r+0x50>
 800f82c:	2209      	movs	r2, #9
 800f82e:	6032      	str	r2, [r6, #0]
 800f830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f834:	81a3      	strh	r3, [r4, #12]
 800f836:	f04f 30ff 	mov.w	r0, #4294967295
 800f83a:	e03e      	b.n	800f8ba <__swsetup_r+0xba>
 800f83c:	4b25      	ldr	r3, [pc, #148]	; (800f8d4 <__swsetup_r+0xd4>)
 800f83e:	429c      	cmp	r4, r3
 800f840:	d101      	bne.n	800f846 <__swsetup_r+0x46>
 800f842:	68ac      	ldr	r4, [r5, #8]
 800f844:	e7eb      	b.n	800f81e <__swsetup_r+0x1e>
 800f846:	4b24      	ldr	r3, [pc, #144]	; (800f8d8 <__swsetup_r+0xd8>)
 800f848:	429c      	cmp	r4, r3
 800f84a:	bf08      	it	eq
 800f84c:	68ec      	ldreq	r4, [r5, #12]
 800f84e:	e7e6      	b.n	800f81e <__swsetup_r+0x1e>
 800f850:	0751      	lsls	r1, r2, #29
 800f852:	d512      	bpl.n	800f87a <__swsetup_r+0x7a>
 800f854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f856:	b141      	cbz	r1, 800f86a <__swsetup_r+0x6a>
 800f858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f85c:	4299      	cmp	r1, r3
 800f85e:	d002      	beq.n	800f866 <__swsetup_r+0x66>
 800f860:	4630      	mov	r0, r6
 800f862:	f000 fa19 	bl	800fc98 <_free_r>
 800f866:	2300      	movs	r3, #0
 800f868:	6363      	str	r3, [r4, #52]	; 0x34
 800f86a:	89a3      	ldrh	r3, [r4, #12]
 800f86c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f870:	81a3      	strh	r3, [r4, #12]
 800f872:	2300      	movs	r3, #0
 800f874:	6063      	str	r3, [r4, #4]
 800f876:	6923      	ldr	r3, [r4, #16]
 800f878:	6023      	str	r3, [r4, #0]
 800f87a:	89a3      	ldrh	r3, [r4, #12]
 800f87c:	f043 0308 	orr.w	r3, r3, #8
 800f880:	81a3      	strh	r3, [r4, #12]
 800f882:	6923      	ldr	r3, [r4, #16]
 800f884:	b94b      	cbnz	r3, 800f89a <__swsetup_r+0x9a>
 800f886:	89a3      	ldrh	r3, [r4, #12]
 800f888:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f88c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f890:	d003      	beq.n	800f89a <__swsetup_r+0x9a>
 800f892:	4621      	mov	r1, r4
 800f894:	4630      	mov	r0, r6
 800f896:	f000 f9bf 	bl	800fc18 <__smakebuf_r>
 800f89a:	89a2      	ldrh	r2, [r4, #12]
 800f89c:	f012 0301 	ands.w	r3, r2, #1
 800f8a0:	d00c      	beq.n	800f8bc <__swsetup_r+0xbc>
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	60a3      	str	r3, [r4, #8]
 800f8a6:	6963      	ldr	r3, [r4, #20]
 800f8a8:	425b      	negs	r3, r3
 800f8aa:	61a3      	str	r3, [r4, #24]
 800f8ac:	6923      	ldr	r3, [r4, #16]
 800f8ae:	b953      	cbnz	r3, 800f8c6 <__swsetup_r+0xc6>
 800f8b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f8b8:	d1ba      	bne.n	800f830 <__swsetup_r+0x30>
 800f8ba:	bd70      	pop	{r4, r5, r6, pc}
 800f8bc:	0792      	lsls	r2, r2, #30
 800f8be:	bf58      	it	pl
 800f8c0:	6963      	ldrpl	r3, [r4, #20]
 800f8c2:	60a3      	str	r3, [r4, #8]
 800f8c4:	e7f2      	b.n	800f8ac <__swsetup_r+0xac>
 800f8c6:	2000      	movs	r0, #0
 800f8c8:	e7f7      	b.n	800f8ba <__swsetup_r+0xba>
 800f8ca:	bf00      	nop
 800f8cc:	20000024 	.word	0x20000024
 800f8d0:	08010f50 	.word	0x08010f50
 800f8d4:	08010f70 	.word	0x08010f70
 800f8d8:	08010f30 	.word	0x08010f30

0800f8dc <__sflush_r>:
 800f8dc:	898a      	ldrh	r2, [r1, #12]
 800f8de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8e2:	4605      	mov	r5, r0
 800f8e4:	0710      	lsls	r0, r2, #28
 800f8e6:	460c      	mov	r4, r1
 800f8e8:	d458      	bmi.n	800f99c <__sflush_r+0xc0>
 800f8ea:	684b      	ldr	r3, [r1, #4]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	dc05      	bgt.n	800f8fc <__sflush_r+0x20>
 800f8f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	dc02      	bgt.n	800f8fc <__sflush_r+0x20>
 800f8f6:	2000      	movs	r0, #0
 800f8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8fe:	2e00      	cmp	r6, #0
 800f900:	d0f9      	beq.n	800f8f6 <__sflush_r+0x1a>
 800f902:	2300      	movs	r3, #0
 800f904:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f908:	682f      	ldr	r7, [r5, #0]
 800f90a:	6a21      	ldr	r1, [r4, #32]
 800f90c:	602b      	str	r3, [r5, #0]
 800f90e:	d032      	beq.n	800f976 <__sflush_r+0x9a>
 800f910:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f912:	89a3      	ldrh	r3, [r4, #12]
 800f914:	075a      	lsls	r2, r3, #29
 800f916:	d505      	bpl.n	800f924 <__sflush_r+0x48>
 800f918:	6863      	ldr	r3, [r4, #4]
 800f91a:	1ac0      	subs	r0, r0, r3
 800f91c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f91e:	b10b      	cbz	r3, 800f924 <__sflush_r+0x48>
 800f920:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f922:	1ac0      	subs	r0, r0, r3
 800f924:	2300      	movs	r3, #0
 800f926:	4602      	mov	r2, r0
 800f928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f92a:	6a21      	ldr	r1, [r4, #32]
 800f92c:	4628      	mov	r0, r5
 800f92e:	47b0      	blx	r6
 800f930:	1c43      	adds	r3, r0, #1
 800f932:	89a3      	ldrh	r3, [r4, #12]
 800f934:	d106      	bne.n	800f944 <__sflush_r+0x68>
 800f936:	6829      	ldr	r1, [r5, #0]
 800f938:	291d      	cmp	r1, #29
 800f93a:	d848      	bhi.n	800f9ce <__sflush_r+0xf2>
 800f93c:	4a29      	ldr	r2, [pc, #164]	; (800f9e4 <__sflush_r+0x108>)
 800f93e:	40ca      	lsrs	r2, r1
 800f940:	07d6      	lsls	r6, r2, #31
 800f942:	d544      	bpl.n	800f9ce <__sflush_r+0xf2>
 800f944:	2200      	movs	r2, #0
 800f946:	6062      	str	r2, [r4, #4]
 800f948:	04d9      	lsls	r1, r3, #19
 800f94a:	6922      	ldr	r2, [r4, #16]
 800f94c:	6022      	str	r2, [r4, #0]
 800f94e:	d504      	bpl.n	800f95a <__sflush_r+0x7e>
 800f950:	1c42      	adds	r2, r0, #1
 800f952:	d101      	bne.n	800f958 <__sflush_r+0x7c>
 800f954:	682b      	ldr	r3, [r5, #0]
 800f956:	b903      	cbnz	r3, 800f95a <__sflush_r+0x7e>
 800f958:	6560      	str	r0, [r4, #84]	; 0x54
 800f95a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f95c:	602f      	str	r7, [r5, #0]
 800f95e:	2900      	cmp	r1, #0
 800f960:	d0c9      	beq.n	800f8f6 <__sflush_r+0x1a>
 800f962:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f966:	4299      	cmp	r1, r3
 800f968:	d002      	beq.n	800f970 <__sflush_r+0x94>
 800f96a:	4628      	mov	r0, r5
 800f96c:	f000 f994 	bl	800fc98 <_free_r>
 800f970:	2000      	movs	r0, #0
 800f972:	6360      	str	r0, [r4, #52]	; 0x34
 800f974:	e7c0      	b.n	800f8f8 <__sflush_r+0x1c>
 800f976:	2301      	movs	r3, #1
 800f978:	4628      	mov	r0, r5
 800f97a:	47b0      	blx	r6
 800f97c:	1c41      	adds	r1, r0, #1
 800f97e:	d1c8      	bne.n	800f912 <__sflush_r+0x36>
 800f980:	682b      	ldr	r3, [r5, #0]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d0c5      	beq.n	800f912 <__sflush_r+0x36>
 800f986:	2b1d      	cmp	r3, #29
 800f988:	d001      	beq.n	800f98e <__sflush_r+0xb2>
 800f98a:	2b16      	cmp	r3, #22
 800f98c:	d101      	bne.n	800f992 <__sflush_r+0xb6>
 800f98e:	602f      	str	r7, [r5, #0]
 800f990:	e7b1      	b.n	800f8f6 <__sflush_r+0x1a>
 800f992:	89a3      	ldrh	r3, [r4, #12]
 800f994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f998:	81a3      	strh	r3, [r4, #12]
 800f99a:	e7ad      	b.n	800f8f8 <__sflush_r+0x1c>
 800f99c:	690f      	ldr	r7, [r1, #16]
 800f99e:	2f00      	cmp	r7, #0
 800f9a0:	d0a9      	beq.n	800f8f6 <__sflush_r+0x1a>
 800f9a2:	0793      	lsls	r3, r2, #30
 800f9a4:	680e      	ldr	r6, [r1, #0]
 800f9a6:	bf08      	it	eq
 800f9a8:	694b      	ldreq	r3, [r1, #20]
 800f9aa:	600f      	str	r7, [r1, #0]
 800f9ac:	bf18      	it	ne
 800f9ae:	2300      	movne	r3, #0
 800f9b0:	eba6 0807 	sub.w	r8, r6, r7
 800f9b4:	608b      	str	r3, [r1, #8]
 800f9b6:	f1b8 0f00 	cmp.w	r8, #0
 800f9ba:	dd9c      	ble.n	800f8f6 <__sflush_r+0x1a>
 800f9bc:	4643      	mov	r3, r8
 800f9be:	463a      	mov	r2, r7
 800f9c0:	6a21      	ldr	r1, [r4, #32]
 800f9c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f9c4:	4628      	mov	r0, r5
 800f9c6:	47b0      	blx	r6
 800f9c8:	2800      	cmp	r0, #0
 800f9ca:	dc06      	bgt.n	800f9da <__sflush_r+0xfe>
 800f9cc:	89a3      	ldrh	r3, [r4, #12]
 800f9ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9d2:	81a3      	strh	r3, [r4, #12]
 800f9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9d8:	e78e      	b.n	800f8f8 <__sflush_r+0x1c>
 800f9da:	4407      	add	r7, r0
 800f9dc:	eba8 0800 	sub.w	r8, r8, r0
 800f9e0:	e7e9      	b.n	800f9b6 <__sflush_r+0xda>
 800f9e2:	bf00      	nop
 800f9e4:	20400001 	.word	0x20400001

0800f9e8 <_fflush_r>:
 800f9e8:	b538      	push	{r3, r4, r5, lr}
 800f9ea:	690b      	ldr	r3, [r1, #16]
 800f9ec:	4605      	mov	r5, r0
 800f9ee:	460c      	mov	r4, r1
 800f9f0:	b1db      	cbz	r3, 800fa2a <_fflush_r+0x42>
 800f9f2:	b118      	cbz	r0, 800f9fc <_fflush_r+0x14>
 800f9f4:	6983      	ldr	r3, [r0, #24]
 800f9f6:	b90b      	cbnz	r3, 800f9fc <_fflush_r+0x14>
 800f9f8:	f000 f860 	bl	800fabc <__sinit>
 800f9fc:	4b0c      	ldr	r3, [pc, #48]	; (800fa30 <_fflush_r+0x48>)
 800f9fe:	429c      	cmp	r4, r3
 800fa00:	d109      	bne.n	800fa16 <_fflush_r+0x2e>
 800fa02:	686c      	ldr	r4, [r5, #4]
 800fa04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa08:	b17b      	cbz	r3, 800fa2a <_fflush_r+0x42>
 800fa0a:	4621      	mov	r1, r4
 800fa0c:	4628      	mov	r0, r5
 800fa0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa12:	f7ff bf63 	b.w	800f8dc <__sflush_r>
 800fa16:	4b07      	ldr	r3, [pc, #28]	; (800fa34 <_fflush_r+0x4c>)
 800fa18:	429c      	cmp	r4, r3
 800fa1a:	d101      	bne.n	800fa20 <_fflush_r+0x38>
 800fa1c:	68ac      	ldr	r4, [r5, #8]
 800fa1e:	e7f1      	b.n	800fa04 <_fflush_r+0x1c>
 800fa20:	4b05      	ldr	r3, [pc, #20]	; (800fa38 <_fflush_r+0x50>)
 800fa22:	429c      	cmp	r4, r3
 800fa24:	bf08      	it	eq
 800fa26:	68ec      	ldreq	r4, [r5, #12]
 800fa28:	e7ec      	b.n	800fa04 <_fflush_r+0x1c>
 800fa2a:	2000      	movs	r0, #0
 800fa2c:	bd38      	pop	{r3, r4, r5, pc}
 800fa2e:	bf00      	nop
 800fa30:	08010f50 	.word	0x08010f50
 800fa34:	08010f70 	.word	0x08010f70
 800fa38:	08010f30 	.word	0x08010f30

0800fa3c <std>:
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	b510      	push	{r4, lr}
 800fa40:	4604      	mov	r4, r0
 800fa42:	e9c0 3300 	strd	r3, r3, [r0]
 800fa46:	6083      	str	r3, [r0, #8]
 800fa48:	8181      	strh	r1, [r0, #12]
 800fa4a:	6643      	str	r3, [r0, #100]	; 0x64
 800fa4c:	81c2      	strh	r2, [r0, #14]
 800fa4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa52:	6183      	str	r3, [r0, #24]
 800fa54:	4619      	mov	r1, r3
 800fa56:	2208      	movs	r2, #8
 800fa58:	305c      	adds	r0, #92	; 0x5c
 800fa5a:	f7ff fd8c 	bl	800f576 <memset>
 800fa5e:	4b05      	ldr	r3, [pc, #20]	; (800fa74 <std+0x38>)
 800fa60:	6263      	str	r3, [r4, #36]	; 0x24
 800fa62:	4b05      	ldr	r3, [pc, #20]	; (800fa78 <std+0x3c>)
 800fa64:	62a3      	str	r3, [r4, #40]	; 0x28
 800fa66:	4b05      	ldr	r3, [pc, #20]	; (800fa7c <std+0x40>)
 800fa68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fa6a:	4b05      	ldr	r3, [pc, #20]	; (800fa80 <std+0x44>)
 800fa6c:	6224      	str	r4, [r4, #32]
 800fa6e:	6323      	str	r3, [r4, #48]	; 0x30
 800fa70:	bd10      	pop	{r4, pc}
 800fa72:	bf00      	nop
 800fa74:	0801063d 	.word	0x0801063d
 800fa78:	0801065f 	.word	0x0801065f
 800fa7c:	08010697 	.word	0x08010697
 800fa80:	080106bb 	.word	0x080106bb

0800fa84 <_cleanup_r>:
 800fa84:	4901      	ldr	r1, [pc, #4]	; (800fa8c <_cleanup_r+0x8>)
 800fa86:	f000 b885 	b.w	800fb94 <_fwalk_reent>
 800fa8a:	bf00      	nop
 800fa8c:	0800f9e9 	.word	0x0800f9e9

0800fa90 <__sfmoreglue>:
 800fa90:	b570      	push	{r4, r5, r6, lr}
 800fa92:	1e4a      	subs	r2, r1, #1
 800fa94:	2568      	movs	r5, #104	; 0x68
 800fa96:	4355      	muls	r5, r2
 800fa98:	460e      	mov	r6, r1
 800fa9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fa9e:	f000 f949 	bl	800fd34 <_malloc_r>
 800faa2:	4604      	mov	r4, r0
 800faa4:	b140      	cbz	r0, 800fab8 <__sfmoreglue+0x28>
 800faa6:	2100      	movs	r1, #0
 800faa8:	e9c0 1600 	strd	r1, r6, [r0]
 800faac:	300c      	adds	r0, #12
 800faae:	60a0      	str	r0, [r4, #8]
 800fab0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fab4:	f7ff fd5f 	bl	800f576 <memset>
 800fab8:	4620      	mov	r0, r4
 800faba:	bd70      	pop	{r4, r5, r6, pc}

0800fabc <__sinit>:
 800fabc:	6983      	ldr	r3, [r0, #24]
 800fabe:	b510      	push	{r4, lr}
 800fac0:	4604      	mov	r4, r0
 800fac2:	bb33      	cbnz	r3, 800fb12 <__sinit+0x56>
 800fac4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800fac8:	6503      	str	r3, [r0, #80]	; 0x50
 800faca:	4b12      	ldr	r3, [pc, #72]	; (800fb14 <__sinit+0x58>)
 800facc:	4a12      	ldr	r2, [pc, #72]	; (800fb18 <__sinit+0x5c>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	6282      	str	r2, [r0, #40]	; 0x28
 800fad2:	4298      	cmp	r0, r3
 800fad4:	bf04      	itt	eq
 800fad6:	2301      	moveq	r3, #1
 800fad8:	6183      	streq	r3, [r0, #24]
 800fada:	f000 f81f 	bl	800fb1c <__sfp>
 800fade:	6060      	str	r0, [r4, #4]
 800fae0:	4620      	mov	r0, r4
 800fae2:	f000 f81b 	bl	800fb1c <__sfp>
 800fae6:	60a0      	str	r0, [r4, #8]
 800fae8:	4620      	mov	r0, r4
 800faea:	f000 f817 	bl	800fb1c <__sfp>
 800faee:	2200      	movs	r2, #0
 800faf0:	60e0      	str	r0, [r4, #12]
 800faf2:	2104      	movs	r1, #4
 800faf4:	6860      	ldr	r0, [r4, #4]
 800faf6:	f7ff ffa1 	bl	800fa3c <std>
 800fafa:	2201      	movs	r2, #1
 800fafc:	2109      	movs	r1, #9
 800fafe:	68a0      	ldr	r0, [r4, #8]
 800fb00:	f7ff ff9c 	bl	800fa3c <std>
 800fb04:	2202      	movs	r2, #2
 800fb06:	2112      	movs	r1, #18
 800fb08:	68e0      	ldr	r0, [r4, #12]
 800fb0a:	f7ff ff97 	bl	800fa3c <std>
 800fb0e:	2301      	movs	r3, #1
 800fb10:	61a3      	str	r3, [r4, #24]
 800fb12:	bd10      	pop	{r4, pc}
 800fb14:	08010f2c 	.word	0x08010f2c
 800fb18:	0800fa85 	.word	0x0800fa85

0800fb1c <__sfp>:
 800fb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb1e:	4b1b      	ldr	r3, [pc, #108]	; (800fb8c <__sfp+0x70>)
 800fb20:	681e      	ldr	r6, [r3, #0]
 800fb22:	69b3      	ldr	r3, [r6, #24]
 800fb24:	4607      	mov	r7, r0
 800fb26:	b913      	cbnz	r3, 800fb2e <__sfp+0x12>
 800fb28:	4630      	mov	r0, r6
 800fb2a:	f7ff ffc7 	bl	800fabc <__sinit>
 800fb2e:	3648      	adds	r6, #72	; 0x48
 800fb30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fb34:	3b01      	subs	r3, #1
 800fb36:	d503      	bpl.n	800fb40 <__sfp+0x24>
 800fb38:	6833      	ldr	r3, [r6, #0]
 800fb3a:	b133      	cbz	r3, 800fb4a <__sfp+0x2e>
 800fb3c:	6836      	ldr	r6, [r6, #0]
 800fb3e:	e7f7      	b.n	800fb30 <__sfp+0x14>
 800fb40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fb44:	b16d      	cbz	r5, 800fb62 <__sfp+0x46>
 800fb46:	3468      	adds	r4, #104	; 0x68
 800fb48:	e7f4      	b.n	800fb34 <__sfp+0x18>
 800fb4a:	2104      	movs	r1, #4
 800fb4c:	4638      	mov	r0, r7
 800fb4e:	f7ff ff9f 	bl	800fa90 <__sfmoreglue>
 800fb52:	6030      	str	r0, [r6, #0]
 800fb54:	2800      	cmp	r0, #0
 800fb56:	d1f1      	bne.n	800fb3c <__sfp+0x20>
 800fb58:	230c      	movs	r3, #12
 800fb5a:	603b      	str	r3, [r7, #0]
 800fb5c:	4604      	mov	r4, r0
 800fb5e:	4620      	mov	r0, r4
 800fb60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb62:	4b0b      	ldr	r3, [pc, #44]	; (800fb90 <__sfp+0x74>)
 800fb64:	6665      	str	r5, [r4, #100]	; 0x64
 800fb66:	e9c4 5500 	strd	r5, r5, [r4]
 800fb6a:	60a5      	str	r5, [r4, #8]
 800fb6c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fb70:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800fb74:	2208      	movs	r2, #8
 800fb76:	4629      	mov	r1, r5
 800fb78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fb7c:	f7ff fcfb 	bl	800f576 <memset>
 800fb80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fb84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fb88:	e7e9      	b.n	800fb5e <__sfp+0x42>
 800fb8a:	bf00      	nop
 800fb8c:	08010f2c 	.word	0x08010f2c
 800fb90:	ffff0001 	.word	0xffff0001

0800fb94 <_fwalk_reent>:
 800fb94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb98:	4680      	mov	r8, r0
 800fb9a:	4689      	mov	r9, r1
 800fb9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fba0:	2600      	movs	r6, #0
 800fba2:	b914      	cbnz	r4, 800fbaa <_fwalk_reent+0x16>
 800fba4:	4630      	mov	r0, r6
 800fba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbaa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800fbae:	3f01      	subs	r7, #1
 800fbb0:	d501      	bpl.n	800fbb6 <_fwalk_reent+0x22>
 800fbb2:	6824      	ldr	r4, [r4, #0]
 800fbb4:	e7f5      	b.n	800fba2 <_fwalk_reent+0xe>
 800fbb6:	89ab      	ldrh	r3, [r5, #12]
 800fbb8:	2b01      	cmp	r3, #1
 800fbba:	d907      	bls.n	800fbcc <_fwalk_reent+0x38>
 800fbbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fbc0:	3301      	adds	r3, #1
 800fbc2:	d003      	beq.n	800fbcc <_fwalk_reent+0x38>
 800fbc4:	4629      	mov	r1, r5
 800fbc6:	4640      	mov	r0, r8
 800fbc8:	47c8      	blx	r9
 800fbca:	4306      	orrs	r6, r0
 800fbcc:	3568      	adds	r5, #104	; 0x68
 800fbce:	e7ee      	b.n	800fbae <_fwalk_reent+0x1a>

0800fbd0 <__swhatbuf_r>:
 800fbd0:	b570      	push	{r4, r5, r6, lr}
 800fbd2:	460e      	mov	r6, r1
 800fbd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbd8:	2900      	cmp	r1, #0
 800fbda:	b096      	sub	sp, #88	; 0x58
 800fbdc:	4614      	mov	r4, r2
 800fbde:	461d      	mov	r5, r3
 800fbe0:	da07      	bge.n	800fbf2 <__swhatbuf_r+0x22>
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	602b      	str	r3, [r5, #0]
 800fbe6:	89b3      	ldrh	r3, [r6, #12]
 800fbe8:	061a      	lsls	r2, r3, #24
 800fbea:	d410      	bmi.n	800fc0e <__swhatbuf_r+0x3e>
 800fbec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbf0:	e00e      	b.n	800fc10 <__swhatbuf_r+0x40>
 800fbf2:	466a      	mov	r2, sp
 800fbf4:	f000 fd88 	bl	8010708 <_fstat_r>
 800fbf8:	2800      	cmp	r0, #0
 800fbfa:	dbf2      	blt.n	800fbe2 <__swhatbuf_r+0x12>
 800fbfc:	9a01      	ldr	r2, [sp, #4]
 800fbfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fc02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fc06:	425a      	negs	r2, r3
 800fc08:	415a      	adcs	r2, r3
 800fc0a:	602a      	str	r2, [r5, #0]
 800fc0c:	e7ee      	b.n	800fbec <__swhatbuf_r+0x1c>
 800fc0e:	2340      	movs	r3, #64	; 0x40
 800fc10:	2000      	movs	r0, #0
 800fc12:	6023      	str	r3, [r4, #0]
 800fc14:	b016      	add	sp, #88	; 0x58
 800fc16:	bd70      	pop	{r4, r5, r6, pc}

0800fc18 <__smakebuf_r>:
 800fc18:	898b      	ldrh	r3, [r1, #12]
 800fc1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fc1c:	079d      	lsls	r5, r3, #30
 800fc1e:	4606      	mov	r6, r0
 800fc20:	460c      	mov	r4, r1
 800fc22:	d507      	bpl.n	800fc34 <__smakebuf_r+0x1c>
 800fc24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fc28:	6023      	str	r3, [r4, #0]
 800fc2a:	6123      	str	r3, [r4, #16]
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	6163      	str	r3, [r4, #20]
 800fc30:	b002      	add	sp, #8
 800fc32:	bd70      	pop	{r4, r5, r6, pc}
 800fc34:	ab01      	add	r3, sp, #4
 800fc36:	466a      	mov	r2, sp
 800fc38:	f7ff ffca 	bl	800fbd0 <__swhatbuf_r>
 800fc3c:	9900      	ldr	r1, [sp, #0]
 800fc3e:	4605      	mov	r5, r0
 800fc40:	4630      	mov	r0, r6
 800fc42:	f000 f877 	bl	800fd34 <_malloc_r>
 800fc46:	b948      	cbnz	r0, 800fc5c <__smakebuf_r+0x44>
 800fc48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc4c:	059a      	lsls	r2, r3, #22
 800fc4e:	d4ef      	bmi.n	800fc30 <__smakebuf_r+0x18>
 800fc50:	f023 0303 	bic.w	r3, r3, #3
 800fc54:	f043 0302 	orr.w	r3, r3, #2
 800fc58:	81a3      	strh	r3, [r4, #12]
 800fc5a:	e7e3      	b.n	800fc24 <__smakebuf_r+0xc>
 800fc5c:	4b0d      	ldr	r3, [pc, #52]	; (800fc94 <__smakebuf_r+0x7c>)
 800fc5e:	62b3      	str	r3, [r6, #40]	; 0x28
 800fc60:	89a3      	ldrh	r3, [r4, #12]
 800fc62:	6020      	str	r0, [r4, #0]
 800fc64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc68:	81a3      	strh	r3, [r4, #12]
 800fc6a:	9b00      	ldr	r3, [sp, #0]
 800fc6c:	6163      	str	r3, [r4, #20]
 800fc6e:	9b01      	ldr	r3, [sp, #4]
 800fc70:	6120      	str	r0, [r4, #16]
 800fc72:	b15b      	cbz	r3, 800fc8c <__smakebuf_r+0x74>
 800fc74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc78:	4630      	mov	r0, r6
 800fc7a:	f000 fd57 	bl	801072c <_isatty_r>
 800fc7e:	b128      	cbz	r0, 800fc8c <__smakebuf_r+0x74>
 800fc80:	89a3      	ldrh	r3, [r4, #12]
 800fc82:	f023 0303 	bic.w	r3, r3, #3
 800fc86:	f043 0301 	orr.w	r3, r3, #1
 800fc8a:	81a3      	strh	r3, [r4, #12]
 800fc8c:	89a3      	ldrh	r3, [r4, #12]
 800fc8e:	431d      	orrs	r5, r3
 800fc90:	81a5      	strh	r5, [r4, #12]
 800fc92:	e7cd      	b.n	800fc30 <__smakebuf_r+0x18>
 800fc94:	0800fa85 	.word	0x0800fa85

0800fc98 <_free_r>:
 800fc98:	b538      	push	{r3, r4, r5, lr}
 800fc9a:	4605      	mov	r5, r0
 800fc9c:	2900      	cmp	r1, #0
 800fc9e:	d045      	beq.n	800fd2c <_free_r+0x94>
 800fca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fca4:	1f0c      	subs	r4, r1, #4
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	bfb8      	it	lt
 800fcaa:	18e4      	addlt	r4, r4, r3
 800fcac:	f000 fd79 	bl	80107a2 <__malloc_lock>
 800fcb0:	4a1f      	ldr	r2, [pc, #124]	; (800fd30 <_free_r+0x98>)
 800fcb2:	6813      	ldr	r3, [r2, #0]
 800fcb4:	4610      	mov	r0, r2
 800fcb6:	b933      	cbnz	r3, 800fcc6 <_free_r+0x2e>
 800fcb8:	6063      	str	r3, [r4, #4]
 800fcba:	6014      	str	r4, [r2, #0]
 800fcbc:	4628      	mov	r0, r5
 800fcbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcc2:	f000 bd6f 	b.w	80107a4 <__malloc_unlock>
 800fcc6:	42a3      	cmp	r3, r4
 800fcc8:	d90c      	bls.n	800fce4 <_free_r+0x4c>
 800fcca:	6821      	ldr	r1, [r4, #0]
 800fccc:	1862      	adds	r2, r4, r1
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	bf04      	itt	eq
 800fcd2:	681a      	ldreq	r2, [r3, #0]
 800fcd4:	685b      	ldreq	r3, [r3, #4]
 800fcd6:	6063      	str	r3, [r4, #4]
 800fcd8:	bf04      	itt	eq
 800fcda:	1852      	addeq	r2, r2, r1
 800fcdc:	6022      	streq	r2, [r4, #0]
 800fcde:	6004      	str	r4, [r0, #0]
 800fce0:	e7ec      	b.n	800fcbc <_free_r+0x24>
 800fce2:	4613      	mov	r3, r2
 800fce4:	685a      	ldr	r2, [r3, #4]
 800fce6:	b10a      	cbz	r2, 800fcec <_free_r+0x54>
 800fce8:	42a2      	cmp	r2, r4
 800fcea:	d9fa      	bls.n	800fce2 <_free_r+0x4a>
 800fcec:	6819      	ldr	r1, [r3, #0]
 800fcee:	1858      	adds	r0, r3, r1
 800fcf0:	42a0      	cmp	r0, r4
 800fcf2:	d10b      	bne.n	800fd0c <_free_r+0x74>
 800fcf4:	6820      	ldr	r0, [r4, #0]
 800fcf6:	4401      	add	r1, r0
 800fcf8:	1858      	adds	r0, r3, r1
 800fcfa:	4282      	cmp	r2, r0
 800fcfc:	6019      	str	r1, [r3, #0]
 800fcfe:	d1dd      	bne.n	800fcbc <_free_r+0x24>
 800fd00:	6810      	ldr	r0, [r2, #0]
 800fd02:	6852      	ldr	r2, [r2, #4]
 800fd04:	605a      	str	r2, [r3, #4]
 800fd06:	4401      	add	r1, r0
 800fd08:	6019      	str	r1, [r3, #0]
 800fd0a:	e7d7      	b.n	800fcbc <_free_r+0x24>
 800fd0c:	d902      	bls.n	800fd14 <_free_r+0x7c>
 800fd0e:	230c      	movs	r3, #12
 800fd10:	602b      	str	r3, [r5, #0]
 800fd12:	e7d3      	b.n	800fcbc <_free_r+0x24>
 800fd14:	6820      	ldr	r0, [r4, #0]
 800fd16:	1821      	adds	r1, r4, r0
 800fd18:	428a      	cmp	r2, r1
 800fd1a:	bf04      	itt	eq
 800fd1c:	6811      	ldreq	r1, [r2, #0]
 800fd1e:	6852      	ldreq	r2, [r2, #4]
 800fd20:	6062      	str	r2, [r4, #4]
 800fd22:	bf04      	itt	eq
 800fd24:	1809      	addeq	r1, r1, r0
 800fd26:	6021      	streq	r1, [r4, #0]
 800fd28:	605c      	str	r4, [r3, #4]
 800fd2a:	e7c7      	b.n	800fcbc <_free_r+0x24>
 800fd2c:	bd38      	pop	{r3, r4, r5, pc}
 800fd2e:	bf00      	nop
 800fd30:	20005b54 	.word	0x20005b54

0800fd34 <_malloc_r>:
 800fd34:	b570      	push	{r4, r5, r6, lr}
 800fd36:	1ccd      	adds	r5, r1, #3
 800fd38:	f025 0503 	bic.w	r5, r5, #3
 800fd3c:	3508      	adds	r5, #8
 800fd3e:	2d0c      	cmp	r5, #12
 800fd40:	bf38      	it	cc
 800fd42:	250c      	movcc	r5, #12
 800fd44:	2d00      	cmp	r5, #0
 800fd46:	4606      	mov	r6, r0
 800fd48:	db01      	blt.n	800fd4e <_malloc_r+0x1a>
 800fd4a:	42a9      	cmp	r1, r5
 800fd4c:	d903      	bls.n	800fd56 <_malloc_r+0x22>
 800fd4e:	230c      	movs	r3, #12
 800fd50:	6033      	str	r3, [r6, #0]
 800fd52:	2000      	movs	r0, #0
 800fd54:	bd70      	pop	{r4, r5, r6, pc}
 800fd56:	f000 fd24 	bl	80107a2 <__malloc_lock>
 800fd5a:	4a21      	ldr	r2, [pc, #132]	; (800fde0 <_malloc_r+0xac>)
 800fd5c:	6814      	ldr	r4, [r2, #0]
 800fd5e:	4621      	mov	r1, r4
 800fd60:	b991      	cbnz	r1, 800fd88 <_malloc_r+0x54>
 800fd62:	4c20      	ldr	r4, [pc, #128]	; (800fde4 <_malloc_r+0xb0>)
 800fd64:	6823      	ldr	r3, [r4, #0]
 800fd66:	b91b      	cbnz	r3, 800fd70 <_malloc_r+0x3c>
 800fd68:	4630      	mov	r0, r6
 800fd6a:	f000 fc57 	bl	801061c <_sbrk_r>
 800fd6e:	6020      	str	r0, [r4, #0]
 800fd70:	4629      	mov	r1, r5
 800fd72:	4630      	mov	r0, r6
 800fd74:	f000 fc52 	bl	801061c <_sbrk_r>
 800fd78:	1c43      	adds	r3, r0, #1
 800fd7a:	d124      	bne.n	800fdc6 <_malloc_r+0x92>
 800fd7c:	230c      	movs	r3, #12
 800fd7e:	6033      	str	r3, [r6, #0]
 800fd80:	4630      	mov	r0, r6
 800fd82:	f000 fd0f 	bl	80107a4 <__malloc_unlock>
 800fd86:	e7e4      	b.n	800fd52 <_malloc_r+0x1e>
 800fd88:	680b      	ldr	r3, [r1, #0]
 800fd8a:	1b5b      	subs	r3, r3, r5
 800fd8c:	d418      	bmi.n	800fdc0 <_malloc_r+0x8c>
 800fd8e:	2b0b      	cmp	r3, #11
 800fd90:	d90f      	bls.n	800fdb2 <_malloc_r+0x7e>
 800fd92:	600b      	str	r3, [r1, #0]
 800fd94:	50cd      	str	r5, [r1, r3]
 800fd96:	18cc      	adds	r4, r1, r3
 800fd98:	4630      	mov	r0, r6
 800fd9a:	f000 fd03 	bl	80107a4 <__malloc_unlock>
 800fd9e:	f104 000b 	add.w	r0, r4, #11
 800fda2:	1d23      	adds	r3, r4, #4
 800fda4:	f020 0007 	bic.w	r0, r0, #7
 800fda8:	1ac3      	subs	r3, r0, r3
 800fdaa:	d0d3      	beq.n	800fd54 <_malloc_r+0x20>
 800fdac:	425a      	negs	r2, r3
 800fdae:	50e2      	str	r2, [r4, r3]
 800fdb0:	e7d0      	b.n	800fd54 <_malloc_r+0x20>
 800fdb2:	428c      	cmp	r4, r1
 800fdb4:	684b      	ldr	r3, [r1, #4]
 800fdb6:	bf16      	itet	ne
 800fdb8:	6063      	strne	r3, [r4, #4]
 800fdba:	6013      	streq	r3, [r2, #0]
 800fdbc:	460c      	movne	r4, r1
 800fdbe:	e7eb      	b.n	800fd98 <_malloc_r+0x64>
 800fdc0:	460c      	mov	r4, r1
 800fdc2:	6849      	ldr	r1, [r1, #4]
 800fdc4:	e7cc      	b.n	800fd60 <_malloc_r+0x2c>
 800fdc6:	1cc4      	adds	r4, r0, #3
 800fdc8:	f024 0403 	bic.w	r4, r4, #3
 800fdcc:	42a0      	cmp	r0, r4
 800fdce:	d005      	beq.n	800fddc <_malloc_r+0xa8>
 800fdd0:	1a21      	subs	r1, r4, r0
 800fdd2:	4630      	mov	r0, r6
 800fdd4:	f000 fc22 	bl	801061c <_sbrk_r>
 800fdd8:	3001      	adds	r0, #1
 800fdda:	d0cf      	beq.n	800fd7c <_malloc_r+0x48>
 800fddc:	6025      	str	r5, [r4, #0]
 800fdde:	e7db      	b.n	800fd98 <_malloc_r+0x64>
 800fde0:	20005b54 	.word	0x20005b54
 800fde4:	20005b58 	.word	0x20005b58

0800fde8 <__ssputs_r>:
 800fde8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdec:	688e      	ldr	r6, [r1, #8]
 800fdee:	429e      	cmp	r6, r3
 800fdf0:	4682      	mov	sl, r0
 800fdf2:	460c      	mov	r4, r1
 800fdf4:	4690      	mov	r8, r2
 800fdf6:	4699      	mov	r9, r3
 800fdf8:	d837      	bhi.n	800fe6a <__ssputs_r+0x82>
 800fdfa:	898a      	ldrh	r2, [r1, #12]
 800fdfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fe00:	d031      	beq.n	800fe66 <__ssputs_r+0x7e>
 800fe02:	6825      	ldr	r5, [r4, #0]
 800fe04:	6909      	ldr	r1, [r1, #16]
 800fe06:	1a6f      	subs	r7, r5, r1
 800fe08:	6965      	ldr	r5, [r4, #20]
 800fe0a:	2302      	movs	r3, #2
 800fe0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe10:	fb95 f5f3 	sdiv	r5, r5, r3
 800fe14:	f109 0301 	add.w	r3, r9, #1
 800fe18:	443b      	add	r3, r7
 800fe1a:	429d      	cmp	r5, r3
 800fe1c:	bf38      	it	cc
 800fe1e:	461d      	movcc	r5, r3
 800fe20:	0553      	lsls	r3, r2, #21
 800fe22:	d530      	bpl.n	800fe86 <__ssputs_r+0x9e>
 800fe24:	4629      	mov	r1, r5
 800fe26:	f7ff ff85 	bl	800fd34 <_malloc_r>
 800fe2a:	4606      	mov	r6, r0
 800fe2c:	b950      	cbnz	r0, 800fe44 <__ssputs_r+0x5c>
 800fe2e:	230c      	movs	r3, #12
 800fe30:	f8ca 3000 	str.w	r3, [sl]
 800fe34:	89a3      	ldrh	r3, [r4, #12]
 800fe36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe3a:	81a3      	strh	r3, [r4, #12]
 800fe3c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe44:	463a      	mov	r2, r7
 800fe46:	6921      	ldr	r1, [r4, #16]
 800fe48:	f7ff fb8a 	bl	800f560 <memcpy>
 800fe4c:	89a3      	ldrh	r3, [r4, #12]
 800fe4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fe52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe56:	81a3      	strh	r3, [r4, #12]
 800fe58:	6126      	str	r6, [r4, #16]
 800fe5a:	6165      	str	r5, [r4, #20]
 800fe5c:	443e      	add	r6, r7
 800fe5e:	1bed      	subs	r5, r5, r7
 800fe60:	6026      	str	r6, [r4, #0]
 800fe62:	60a5      	str	r5, [r4, #8]
 800fe64:	464e      	mov	r6, r9
 800fe66:	454e      	cmp	r6, r9
 800fe68:	d900      	bls.n	800fe6c <__ssputs_r+0x84>
 800fe6a:	464e      	mov	r6, r9
 800fe6c:	4632      	mov	r2, r6
 800fe6e:	4641      	mov	r1, r8
 800fe70:	6820      	ldr	r0, [r4, #0]
 800fe72:	f000 fc7d 	bl	8010770 <memmove>
 800fe76:	68a3      	ldr	r3, [r4, #8]
 800fe78:	1b9b      	subs	r3, r3, r6
 800fe7a:	60a3      	str	r3, [r4, #8]
 800fe7c:	6823      	ldr	r3, [r4, #0]
 800fe7e:	441e      	add	r6, r3
 800fe80:	6026      	str	r6, [r4, #0]
 800fe82:	2000      	movs	r0, #0
 800fe84:	e7dc      	b.n	800fe40 <__ssputs_r+0x58>
 800fe86:	462a      	mov	r2, r5
 800fe88:	f000 fc8d 	bl	80107a6 <_realloc_r>
 800fe8c:	4606      	mov	r6, r0
 800fe8e:	2800      	cmp	r0, #0
 800fe90:	d1e2      	bne.n	800fe58 <__ssputs_r+0x70>
 800fe92:	6921      	ldr	r1, [r4, #16]
 800fe94:	4650      	mov	r0, sl
 800fe96:	f7ff feff 	bl	800fc98 <_free_r>
 800fe9a:	e7c8      	b.n	800fe2e <__ssputs_r+0x46>

0800fe9c <_svfiprintf_r>:
 800fe9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fea0:	461d      	mov	r5, r3
 800fea2:	898b      	ldrh	r3, [r1, #12]
 800fea4:	061f      	lsls	r7, r3, #24
 800fea6:	b09d      	sub	sp, #116	; 0x74
 800fea8:	4680      	mov	r8, r0
 800feaa:	460c      	mov	r4, r1
 800feac:	4616      	mov	r6, r2
 800feae:	d50f      	bpl.n	800fed0 <_svfiprintf_r+0x34>
 800feb0:	690b      	ldr	r3, [r1, #16]
 800feb2:	b96b      	cbnz	r3, 800fed0 <_svfiprintf_r+0x34>
 800feb4:	2140      	movs	r1, #64	; 0x40
 800feb6:	f7ff ff3d 	bl	800fd34 <_malloc_r>
 800feba:	6020      	str	r0, [r4, #0]
 800febc:	6120      	str	r0, [r4, #16]
 800febe:	b928      	cbnz	r0, 800fecc <_svfiprintf_r+0x30>
 800fec0:	230c      	movs	r3, #12
 800fec2:	f8c8 3000 	str.w	r3, [r8]
 800fec6:	f04f 30ff 	mov.w	r0, #4294967295
 800feca:	e0c8      	b.n	801005e <_svfiprintf_r+0x1c2>
 800fecc:	2340      	movs	r3, #64	; 0x40
 800fece:	6163      	str	r3, [r4, #20]
 800fed0:	2300      	movs	r3, #0
 800fed2:	9309      	str	r3, [sp, #36]	; 0x24
 800fed4:	2320      	movs	r3, #32
 800fed6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800feda:	2330      	movs	r3, #48	; 0x30
 800fedc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fee0:	9503      	str	r5, [sp, #12]
 800fee2:	f04f 0b01 	mov.w	fp, #1
 800fee6:	4637      	mov	r7, r6
 800fee8:	463d      	mov	r5, r7
 800feea:	f815 3b01 	ldrb.w	r3, [r5], #1
 800feee:	b10b      	cbz	r3, 800fef4 <_svfiprintf_r+0x58>
 800fef0:	2b25      	cmp	r3, #37	; 0x25
 800fef2:	d13e      	bne.n	800ff72 <_svfiprintf_r+0xd6>
 800fef4:	ebb7 0a06 	subs.w	sl, r7, r6
 800fef8:	d00b      	beq.n	800ff12 <_svfiprintf_r+0x76>
 800fefa:	4653      	mov	r3, sl
 800fefc:	4632      	mov	r2, r6
 800fefe:	4621      	mov	r1, r4
 800ff00:	4640      	mov	r0, r8
 800ff02:	f7ff ff71 	bl	800fde8 <__ssputs_r>
 800ff06:	3001      	adds	r0, #1
 800ff08:	f000 80a4 	beq.w	8010054 <_svfiprintf_r+0x1b8>
 800ff0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff0e:	4453      	add	r3, sl
 800ff10:	9309      	str	r3, [sp, #36]	; 0x24
 800ff12:	783b      	ldrb	r3, [r7, #0]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	f000 809d 	beq.w	8010054 <_svfiprintf_r+0x1b8>
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ff20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff24:	9304      	str	r3, [sp, #16]
 800ff26:	9307      	str	r3, [sp, #28]
 800ff28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff2c:	931a      	str	r3, [sp, #104]	; 0x68
 800ff2e:	462f      	mov	r7, r5
 800ff30:	2205      	movs	r2, #5
 800ff32:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ff36:	4850      	ldr	r0, [pc, #320]	; (8010078 <_svfiprintf_r+0x1dc>)
 800ff38:	f7f0 f93a 	bl	80001b0 <memchr>
 800ff3c:	9b04      	ldr	r3, [sp, #16]
 800ff3e:	b9d0      	cbnz	r0, 800ff76 <_svfiprintf_r+0xda>
 800ff40:	06d9      	lsls	r1, r3, #27
 800ff42:	bf44      	itt	mi
 800ff44:	2220      	movmi	r2, #32
 800ff46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ff4a:	071a      	lsls	r2, r3, #28
 800ff4c:	bf44      	itt	mi
 800ff4e:	222b      	movmi	r2, #43	; 0x2b
 800ff50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ff54:	782a      	ldrb	r2, [r5, #0]
 800ff56:	2a2a      	cmp	r2, #42	; 0x2a
 800ff58:	d015      	beq.n	800ff86 <_svfiprintf_r+0xea>
 800ff5a:	9a07      	ldr	r2, [sp, #28]
 800ff5c:	462f      	mov	r7, r5
 800ff5e:	2000      	movs	r0, #0
 800ff60:	250a      	movs	r5, #10
 800ff62:	4639      	mov	r1, r7
 800ff64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff68:	3b30      	subs	r3, #48	; 0x30
 800ff6a:	2b09      	cmp	r3, #9
 800ff6c:	d94d      	bls.n	801000a <_svfiprintf_r+0x16e>
 800ff6e:	b1b8      	cbz	r0, 800ffa0 <_svfiprintf_r+0x104>
 800ff70:	e00f      	b.n	800ff92 <_svfiprintf_r+0xf6>
 800ff72:	462f      	mov	r7, r5
 800ff74:	e7b8      	b.n	800fee8 <_svfiprintf_r+0x4c>
 800ff76:	4a40      	ldr	r2, [pc, #256]	; (8010078 <_svfiprintf_r+0x1dc>)
 800ff78:	1a80      	subs	r0, r0, r2
 800ff7a:	fa0b f000 	lsl.w	r0, fp, r0
 800ff7e:	4318      	orrs	r0, r3
 800ff80:	9004      	str	r0, [sp, #16]
 800ff82:	463d      	mov	r5, r7
 800ff84:	e7d3      	b.n	800ff2e <_svfiprintf_r+0x92>
 800ff86:	9a03      	ldr	r2, [sp, #12]
 800ff88:	1d11      	adds	r1, r2, #4
 800ff8a:	6812      	ldr	r2, [r2, #0]
 800ff8c:	9103      	str	r1, [sp, #12]
 800ff8e:	2a00      	cmp	r2, #0
 800ff90:	db01      	blt.n	800ff96 <_svfiprintf_r+0xfa>
 800ff92:	9207      	str	r2, [sp, #28]
 800ff94:	e004      	b.n	800ffa0 <_svfiprintf_r+0x104>
 800ff96:	4252      	negs	r2, r2
 800ff98:	f043 0302 	orr.w	r3, r3, #2
 800ff9c:	9207      	str	r2, [sp, #28]
 800ff9e:	9304      	str	r3, [sp, #16]
 800ffa0:	783b      	ldrb	r3, [r7, #0]
 800ffa2:	2b2e      	cmp	r3, #46	; 0x2e
 800ffa4:	d10c      	bne.n	800ffc0 <_svfiprintf_r+0x124>
 800ffa6:	787b      	ldrb	r3, [r7, #1]
 800ffa8:	2b2a      	cmp	r3, #42	; 0x2a
 800ffaa:	d133      	bne.n	8010014 <_svfiprintf_r+0x178>
 800ffac:	9b03      	ldr	r3, [sp, #12]
 800ffae:	1d1a      	adds	r2, r3, #4
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	9203      	str	r2, [sp, #12]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	bfb8      	it	lt
 800ffb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800ffbc:	3702      	adds	r7, #2
 800ffbe:	9305      	str	r3, [sp, #20]
 800ffc0:	4d2e      	ldr	r5, [pc, #184]	; (801007c <_svfiprintf_r+0x1e0>)
 800ffc2:	7839      	ldrb	r1, [r7, #0]
 800ffc4:	2203      	movs	r2, #3
 800ffc6:	4628      	mov	r0, r5
 800ffc8:	f7f0 f8f2 	bl	80001b0 <memchr>
 800ffcc:	b138      	cbz	r0, 800ffde <_svfiprintf_r+0x142>
 800ffce:	2340      	movs	r3, #64	; 0x40
 800ffd0:	1b40      	subs	r0, r0, r5
 800ffd2:	fa03 f000 	lsl.w	r0, r3, r0
 800ffd6:	9b04      	ldr	r3, [sp, #16]
 800ffd8:	4303      	orrs	r3, r0
 800ffda:	3701      	adds	r7, #1
 800ffdc:	9304      	str	r3, [sp, #16]
 800ffde:	7839      	ldrb	r1, [r7, #0]
 800ffe0:	4827      	ldr	r0, [pc, #156]	; (8010080 <_svfiprintf_r+0x1e4>)
 800ffe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ffe6:	2206      	movs	r2, #6
 800ffe8:	1c7e      	adds	r6, r7, #1
 800ffea:	f7f0 f8e1 	bl	80001b0 <memchr>
 800ffee:	2800      	cmp	r0, #0
 800fff0:	d038      	beq.n	8010064 <_svfiprintf_r+0x1c8>
 800fff2:	4b24      	ldr	r3, [pc, #144]	; (8010084 <_svfiprintf_r+0x1e8>)
 800fff4:	bb13      	cbnz	r3, 801003c <_svfiprintf_r+0x1a0>
 800fff6:	9b03      	ldr	r3, [sp, #12]
 800fff8:	3307      	adds	r3, #7
 800fffa:	f023 0307 	bic.w	r3, r3, #7
 800fffe:	3308      	adds	r3, #8
 8010000:	9303      	str	r3, [sp, #12]
 8010002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010004:	444b      	add	r3, r9
 8010006:	9309      	str	r3, [sp, #36]	; 0x24
 8010008:	e76d      	b.n	800fee6 <_svfiprintf_r+0x4a>
 801000a:	fb05 3202 	mla	r2, r5, r2, r3
 801000e:	2001      	movs	r0, #1
 8010010:	460f      	mov	r7, r1
 8010012:	e7a6      	b.n	800ff62 <_svfiprintf_r+0xc6>
 8010014:	2300      	movs	r3, #0
 8010016:	3701      	adds	r7, #1
 8010018:	9305      	str	r3, [sp, #20]
 801001a:	4619      	mov	r1, r3
 801001c:	250a      	movs	r5, #10
 801001e:	4638      	mov	r0, r7
 8010020:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010024:	3a30      	subs	r2, #48	; 0x30
 8010026:	2a09      	cmp	r2, #9
 8010028:	d903      	bls.n	8010032 <_svfiprintf_r+0x196>
 801002a:	2b00      	cmp	r3, #0
 801002c:	d0c8      	beq.n	800ffc0 <_svfiprintf_r+0x124>
 801002e:	9105      	str	r1, [sp, #20]
 8010030:	e7c6      	b.n	800ffc0 <_svfiprintf_r+0x124>
 8010032:	fb05 2101 	mla	r1, r5, r1, r2
 8010036:	2301      	movs	r3, #1
 8010038:	4607      	mov	r7, r0
 801003a:	e7f0      	b.n	801001e <_svfiprintf_r+0x182>
 801003c:	ab03      	add	r3, sp, #12
 801003e:	9300      	str	r3, [sp, #0]
 8010040:	4622      	mov	r2, r4
 8010042:	4b11      	ldr	r3, [pc, #68]	; (8010088 <_svfiprintf_r+0x1ec>)
 8010044:	a904      	add	r1, sp, #16
 8010046:	4640      	mov	r0, r8
 8010048:	f3af 8000 	nop.w
 801004c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010050:	4681      	mov	r9, r0
 8010052:	d1d6      	bne.n	8010002 <_svfiprintf_r+0x166>
 8010054:	89a3      	ldrh	r3, [r4, #12]
 8010056:	065b      	lsls	r3, r3, #25
 8010058:	f53f af35 	bmi.w	800fec6 <_svfiprintf_r+0x2a>
 801005c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801005e:	b01d      	add	sp, #116	; 0x74
 8010060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010064:	ab03      	add	r3, sp, #12
 8010066:	9300      	str	r3, [sp, #0]
 8010068:	4622      	mov	r2, r4
 801006a:	4b07      	ldr	r3, [pc, #28]	; (8010088 <_svfiprintf_r+0x1ec>)
 801006c:	a904      	add	r1, sp, #16
 801006e:	4640      	mov	r0, r8
 8010070:	f000 f9c2 	bl	80103f8 <_printf_i>
 8010074:	e7ea      	b.n	801004c <_svfiprintf_r+0x1b0>
 8010076:	bf00      	nop
 8010078:	08010f90 	.word	0x08010f90
 801007c:	08010f96 	.word	0x08010f96
 8010080:	08010f9a 	.word	0x08010f9a
 8010084:	00000000 	.word	0x00000000
 8010088:	0800fde9 	.word	0x0800fde9

0801008c <__sfputc_r>:
 801008c:	6893      	ldr	r3, [r2, #8]
 801008e:	3b01      	subs	r3, #1
 8010090:	2b00      	cmp	r3, #0
 8010092:	b410      	push	{r4}
 8010094:	6093      	str	r3, [r2, #8]
 8010096:	da08      	bge.n	80100aa <__sfputc_r+0x1e>
 8010098:	6994      	ldr	r4, [r2, #24]
 801009a:	42a3      	cmp	r3, r4
 801009c:	db01      	blt.n	80100a2 <__sfputc_r+0x16>
 801009e:	290a      	cmp	r1, #10
 80100a0:	d103      	bne.n	80100aa <__sfputc_r+0x1e>
 80100a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100a6:	f7ff bb59 	b.w	800f75c <__swbuf_r>
 80100aa:	6813      	ldr	r3, [r2, #0]
 80100ac:	1c58      	adds	r0, r3, #1
 80100ae:	6010      	str	r0, [r2, #0]
 80100b0:	7019      	strb	r1, [r3, #0]
 80100b2:	4608      	mov	r0, r1
 80100b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100b8:	4770      	bx	lr

080100ba <__sfputs_r>:
 80100ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100bc:	4606      	mov	r6, r0
 80100be:	460f      	mov	r7, r1
 80100c0:	4614      	mov	r4, r2
 80100c2:	18d5      	adds	r5, r2, r3
 80100c4:	42ac      	cmp	r4, r5
 80100c6:	d101      	bne.n	80100cc <__sfputs_r+0x12>
 80100c8:	2000      	movs	r0, #0
 80100ca:	e007      	b.n	80100dc <__sfputs_r+0x22>
 80100cc:	463a      	mov	r2, r7
 80100ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100d2:	4630      	mov	r0, r6
 80100d4:	f7ff ffda 	bl	801008c <__sfputc_r>
 80100d8:	1c43      	adds	r3, r0, #1
 80100da:	d1f3      	bne.n	80100c4 <__sfputs_r+0xa>
 80100dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080100e0 <_vfiprintf_r>:
 80100e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100e4:	460c      	mov	r4, r1
 80100e6:	b09d      	sub	sp, #116	; 0x74
 80100e8:	4617      	mov	r7, r2
 80100ea:	461d      	mov	r5, r3
 80100ec:	4606      	mov	r6, r0
 80100ee:	b118      	cbz	r0, 80100f8 <_vfiprintf_r+0x18>
 80100f0:	6983      	ldr	r3, [r0, #24]
 80100f2:	b90b      	cbnz	r3, 80100f8 <_vfiprintf_r+0x18>
 80100f4:	f7ff fce2 	bl	800fabc <__sinit>
 80100f8:	4b7c      	ldr	r3, [pc, #496]	; (80102ec <_vfiprintf_r+0x20c>)
 80100fa:	429c      	cmp	r4, r3
 80100fc:	d158      	bne.n	80101b0 <_vfiprintf_r+0xd0>
 80100fe:	6874      	ldr	r4, [r6, #4]
 8010100:	89a3      	ldrh	r3, [r4, #12]
 8010102:	0718      	lsls	r0, r3, #28
 8010104:	d55e      	bpl.n	80101c4 <_vfiprintf_r+0xe4>
 8010106:	6923      	ldr	r3, [r4, #16]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d05b      	beq.n	80101c4 <_vfiprintf_r+0xe4>
 801010c:	2300      	movs	r3, #0
 801010e:	9309      	str	r3, [sp, #36]	; 0x24
 8010110:	2320      	movs	r3, #32
 8010112:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010116:	2330      	movs	r3, #48	; 0x30
 8010118:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801011c:	9503      	str	r5, [sp, #12]
 801011e:	f04f 0b01 	mov.w	fp, #1
 8010122:	46b8      	mov	r8, r7
 8010124:	4645      	mov	r5, r8
 8010126:	f815 3b01 	ldrb.w	r3, [r5], #1
 801012a:	b10b      	cbz	r3, 8010130 <_vfiprintf_r+0x50>
 801012c:	2b25      	cmp	r3, #37	; 0x25
 801012e:	d154      	bne.n	80101da <_vfiprintf_r+0xfa>
 8010130:	ebb8 0a07 	subs.w	sl, r8, r7
 8010134:	d00b      	beq.n	801014e <_vfiprintf_r+0x6e>
 8010136:	4653      	mov	r3, sl
 8010138:	463a      	mov	r2, r7
 801013a:	4621      	mov	r1, r4
 801013c:	4630      	mov	r0, r6
 801013e:	f7ff ffbc 	bl	80100ba <__sfputs_r>
 8010142:	3001      	adds	r0, #1
 8010144:	f000 80c2 	beq.w	80102cc <_vfiprintf_r+0x1ec>
 8010148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801014a:	4453      	add	r3, sl
 801014c:	9309      	str	r3, [sp, #36]	; 0x24
 801014e:	f898 3000 	ldrb.w	r3, [r8]
 8010152:	2b00      	cmp	r3, #0
 8010154:	f000 80ba 	beq.w	80102cc <_vfiprintf_r+0x1ec>
 8010158:	2300      	movs	r3, #0
 801015a:	f04f 32ff 	mov.w	r2, #4294967295
 801015e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010162:	9304      	str	r3, [sp, #16]
 8010164:	9307      	str	r3, [sp, #28]
 8010166:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801016a:	931a      	str	r3, [sp, #104]	; 0x68
 801016c:	46a8      	mov	r8, r5
 801016e:	2205      	movs	r2, #5
 8010170:	f818 1b01 	ldrb.w	r1, [r8], #1
 8010174:	485e      	ldr	r0, [pc, #376]	; (80102f0 <_vfiprintf_r+0x210>)
 8010176:	f7f0 f81b 	bl	80001b0 <memchr>
 801017a:	9b04      	ldr	r3, [sp, #16]
 801017c:	bb78      	cbnz	r0, 80101de <_vfiprintf_r+0xfe>
 801017e:	06d9      	lsls	r1, r3, #27
 8010180:	bf44      	itt	mi
 8010182:	2220      	movmi	r2, #32
 8010184:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010188:	071a      	lsls	r2, r3, #28
 801018a:	bf44      	itt	mi
 801018c:	222b      	movmi	r2, #43	; 0x2b
 801018e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010192:	782a      	ldrb	r2, [r5, #0]
 8010194:	2a2a      	cmp	r2, #42	; 0x2a
 8010196:	d02a      	beq.n	80101ee <_vfiprintf_r+0x10e>
 8010198:	9a07      	ldr	r2, [sp, #28]
 801019a:	46a8      	mov	r8, r5
 801019c:	2000      	movs	r0, #0
 801019e:	250a      	movs	r5, #10
 80101a0:	4641      	mov	r1, r8
 80101a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101a6:	3b30      	subs	r3, #48	; 0x30
 80101a8:	2b09      	cmp	r3, #9
 80101aa:	d969      	bls.n	8010280 <_vfiprintf_r+0x1a0>
 80101ac:	b360      	cbz	r0, 8010208 <_vfiprintf_r+0x128>
 80101ae:	e024      	b.n	80101fa <_vfiprintf_r+0x11a>
 80101b0:	4b50      	ldr	r3, [pc, #320]	; (80102f4 <_vfiprintf_r+0x214>)
 80101b2:	429c      	cmp	r4, r3
 80101b4:	d101      	bne.n	80101ba <_vfiprintf_r+0xda>
 80101b6:	68b4      	ldr	r4, [r6, #8]
 80101b8:	e7a2      	b.n	8010100 <_vfiprintf_r+0x20>
 80101ba:	4b4f      	ldr	r3, [pc, #316]	; (80102f8 <_vfiprintf_r+0x218>)
 80101bc:	429c      	cmp	r4, r3
 80101be:	bf08      	it	eq
 80101c0:	68f4      	ldreq	r4, [r6, #12]
 80101c2:	e79d      	b.n	8010100 <_vfiprintf_r+0x20>
 80101c4:	4621      	mov	r1, r4
 80101c6:	4630      	mov	r0, r6
 80101c8:	f7ff fb1a 	bl	800f800 <__swsetup_r>
 80101cc:	2800      	cmp	r0, #0
 80101ce:	d09d      	beq.n	801010c <_vfiprintf_r+0x2c>
 80101d0:	f04f 30ff 	mov.w	r0, #4294967295
 80101d4:	b01d      	add	sp, #116	; 0x74
 80101d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101da:	46a8      	mov	r8, r5
 80101dc:	e7a2      	b.n	8010124 <_vfiprintf_r+0x44>
 80101de:	4a44      	ldr	r2, [pc, #272]	; (80102f0 <_vfiprintf_r+0x210>)
 80101e0:	1a80      	subs	r0, r0, r2
 80101e2:	fa0b f000 	lsl.w	r0, fp, r0
 80101e6:	4318      	orrs	r0, r3
 80101e8:	9004      	str	r0, [sp, #16]
 80101ea:	4645      	mov	r5, r8
 80101ec:	e7be      	b.n	801016c <_vfiprintf_r+0x8c>
 80101ee:	9a03      	ldr	r2, [sp, #12]
 80101f0:	1d11      	adds	r1, r2, #4
 80101f2:	6812      	ldr	r2, [r2, #0]
 80101f4:	9103      	str	r1, [sp, #12]
 80101f6:	2a00      	cmp	r2, #0
 80101f8:	db01      	blt.n	80101fe <_vfiprintf_r+0x11e>
 80101fa:	9207      	str	r2, [sp, #28]
 80101fc:	e004      	b.n	8010208 <_vfiprintf_r+0x128>
 80101fe:	4252      	negs	r2, r2
 8010200:	f043 0302 	orr.w	r3, r3, #2
 8010204:	9207      	str	r2, [sp, #28]
 8010206:	9304      	str	r3, [sp, #16]
 8010208:	f898 3000 	ldrb.w	r3, [r8]
 801020c:	2b2e      	cmp	r3, #46	; 0x2e
 801020e:	d10e      	bne.n	801022e <_vfiprintf_r+0x14e>
 8010210:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010214:	2b2a      	cmp	r3, #42	; 0x2a
 8010216:	d138      	bne.n	801028a <_vfiprintf_r+0x1aa>
 8010218:	9b03      	ldr	r3, [sp, #12]
 801021a:	1d1a      	adds	r2, r3, #4
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	9203      	str	r2, [sp, #12]
 8010220:	2b00      	cmp	r3, #0
 8010222:	bfb8      	it	lt
 8010224:	f04f 33ff 	movlt.w	r3, #4294967295
 8010228:	f108 0802 	add.w	r8, r8, #2
 801022c:	9305      	str	r3, [sp, #20]
 801022e:	4d33      	ldr	r5, [pc, #204]	; (80102fc <_vfiprintf_r+0x21c>)
 8010230:	f898 1000 	ldrb.w	r1, [r8]
 8010234:	2203      	movs	r2, #3
 8010236:	4628      	mov	r0, r5
 8010238:	f7ef ffba 	bl	80001b0 <memchr>
 801023c:	b140      	cbz	r0, 8010250 <_vfiprintf_r+0x170>
 801023e:	2340      	movs	r3, #64	; 0x40
 8010240:	1b40      	subs	r0, r0, r5
 8010242:	fa03 f000 	lsl.w	r0, r3, r0
 8010246:	9b04      	ldr	r3, [sp, #16]
 8010248:	4303      	orrs	r3, r0
 801024a:	f108 0801 	add.w	r8, r8, #1
 801024e:	9304      	str	r3, [sp, #16]
 8010250:	f898 1000 	ldrb.w	r1, [r8]
 8010254:	482a      	ldr	r0, [pc, #168]	; (8010300 <_vfiprintf_r+0x220>)
 8010256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801025a:	2206      	movs	r2, #6
 801025c:	f108 0701 	add.w	r7, r8, #1
 8010260:	f7ef ffa6 	bl	80001b0 <memchr>
 8010264:	2800      	cmp	r0, #0
 8010266:	d037      	beq.n	80102d8 <_vfiprintf_r+0x1f8>
 8010268:	4b26      	ldr	r3, [pc, #152]	; (8010304 <_vfiprintf_r+0x224>)
 801026a:	bb1b      	cbnz	r3, 80102b4 <_vfiprintf_r+0x1d4>
 801026c:	9b03      	ldr	r3, [sp, #12]
 801026e:	3307      	adds	r3, #7
 8010270:	f023 0307 	bic.w	r3, r3, #7
 8010274:	3308      	adds	r3, #8
 8010276:	9303      	str	r3, [sp, #12]
 8010278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801027a:	444b      	add	r3, r9
 801027c:	9309      	str	r3, [sp, #36]	; 0x24
 801027e:	e750      	b.n	8010122 <_vfiprintf_r+0x42>
 8010280:	fb05 3202 	mla	r2, r5, r2, r3
 8010284:	2001      	movs	r0, #1
 8010286:	4688      	mov	r8, r1
 8010288:	e78a      	b.n	80101a0 <_vfiprintf_r+0xc0>
 801028a:	2300      	movs	r3, #0
 801028c:	f108 0801 	add.w	r8, r8, #1
 8010290:	9305      	str	r3, [sp, #20]
 8010292:	4619      	mov	r1, r3
 8010294:	250a      	movs	r5, #10
 8010296:	4640      	mov	r0, r8
 8010298:	f810 2b01 	ldrb.w	r2, [r0], #1
 801029c:	3a30      	subs	r2, #48	; 0x30
 801029e:	2a09      	cmp	r2, #9
 80102a0:	d903      	bls.n	80102aa <_vfiprintf_r+0x1ca>
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d0c3      	beq.n	801022e <_vfiprintf_r+0x14e>
 80102a6:	9105      	str	r1, [sp, #20]
 80102a8:	e7c1      	b.n	801022e <_vfiprintf_r+0x14e>
 80102aa:	fb05 2101 	mla	r1, r5, r1, r2
 80102ae:	2301      	movs	r3, #1
 80102b0:	4680      	mov	r8, r0
 80102b2:	e7f0      	b.n	8010296 <_vfiprintf_r+0x1b6>
 80102b4:	ab03      	add	r3, sp, #12
 80102b6:	9300      	str	r3, [sp, #0]
 80102b8:	4622      	mov	r2, r4
 80102ba:	4b13      	ldr	r3, [pc, #76]	; (8010308 <_vfiprintf_r+0x228>)
 80102bc:	a904      	add	r1, sp, #16
 80102be:	4630      	mov	r0, r6
 80102c0:	f3af 8000 	nop.w
 80102c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80102c8:	4681      	mov	r9, r0
 80102ca:	d1d5      	bne.n	8010278 <_vfiprintf_r+0x198>
 80102cc:	89a3      	ldrh	r3, [r4, #12]
 80102ce:	065b      	lsls	r3, r3, #25
 80102d0:	f53f af7e 	bmi.w	80101d0 <_vfiprintf_r+0xf0>
 80102d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102d6:	e77d      	b.n	80101d4 <_vfiprintf_r+0xf4>
 80102d8:	ab03      	add	r3, sp, #12
 80102da:	9300      	str	r3, [sp, #0]
 80102dc:	4622      	mov	r2, r4
 80102de:	4b0a      	ldr	r3, [pc, #40]	; (8010308 <_vfiprintf_r+0x228>)
 80102e0:	a904      	add	r1, sp, #16
 80102e2:	4630      	mov	r0, r6
 80102e4:	f000 f888 	bl	80103f8 <_printf_i>
 80102e8:	e7ec      	b.n	80102c4 <_vfiprintf_r+0x1e4>
 80102ea:	bf00      	nop
 80102ec:	08010f50 	.word	0x08010f50
 80102f0:	08010f90 	.word	0x08010f90
 80102f4:	08010f70 	.word	0x08010f70
 80102f8:	08010f30 	.word	0x08010f30
 80102fc:	08010f96 	.word	0x08010f96
 8010300:	08010f9a 	.word	0x08010f9a
 8010304:	00000000 	.word	0x00000000
 8010308:	080100bb 	.word	0x080100bb

0801030c <_printf_common>:
 801030c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010310:	4691      	mov	r9, r2
 8010312:	461f      	mov	r7, r3
 8010314:	688a      	ldr	r2, [r1, #8]
 8010316:	690b      	ldr	r3, [r1, #16]
 8010318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801031c:	4293      	cmp	r3, r2
 801031e:	bfb8      	it	lt
 8010320:	4613      	movlt	r3, r2
 8010322:	f8c9 3000 	str.w	r3, [r9]
 8010326:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801032a:	4606      	mov	r6, r0
 801032c:	460c      	mov	r4, r1
 801032e:	b112      	cbz	r2, 8010336 <_printf_common+0x2a>
 8010330:	3301      	adds	r3, #1
 8010332:	f8c9 3000 	str.w	r3, [r9]
 8010336:	6823      	ldr	r3, [r4, #0]
 8010338:	0699      	lsls	r1, r3, #26
 801033a:	bf42      	ittt	mi
 801033c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010340:	3302      	addmi	r3, #2
 8010342:	f8c9 3000 	strmi.w	r3, [r9]
 8010346:	6825      	ldr	r5, [r4, #0]
 8010348:	f015 0506 	ands.w	r5, r5, #6
 801034c:	d107      	bne.n	801035e <_printf_common+0x52>
 801034e:	f104 0a19 	add.w	sl, r4, #25
 8010352:	68e3      	ldr	r3, [r4, #12]
 8010354:	f8d9 2000 	ldr.w	r2, [r9]
 8010358:	1a9b      	subs	r3, r3, r2
 801035a:	42ab      	cmp	r3, r5
 801035c:	dc28      	bgt.n	80103b0 <_printf_common+0xa4>
 801035e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010362:	6822      	ldr	r2, [r4, #0]
 8010364:	3300      	adds	r3, #0
 8010366:	bf18      	it	ne
 8010368:	2301      	movne	r3, #1
 801036a:	0692      	lsls	r2, r2, #26
 801036c:	d42d      	bmi.n	80103ca <_printf_common+0xbe>
 801036e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010372:	4639      	mov	r1, r7
 8010374:	4630      	mov	r0, r6
 8010376:	47c0      	blx	r8
 8010378:	3001      	adds	r0, #1
 801037a:	d020      	beq.n	80103be <_printf_common+0xb2>
 801037c:	6823      	ldr	r3, [r4, #0]
 801037e:	68e5      	ldr	r5, [r4, #12]
 8010380:	f8d9 2000 	ldr.w	r2, [r9]
 8010384:	f003 0306 	and.w	r3, r3, #6
 8010388:	2b04      	cmp	r3, #4
 801038a:	bf08      	it	eq
 801038c:	1aad      	subeq	r5, r5, r2
 801038e:	68a3      	ldr	r3, [r4, #8]
 8010390:	6922      	ldr	r2, [r4, #16]
 8010392:	bf0c      	ite	eq
 8010394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010398:	2500      	movne	r5, #0
 801039a:	4293      	cmp	r3, r2
 801039c:	bfc4      	itt	gt
 801039e:	1a9b      	subgt	r3, r3, r2
 80103a0:	18ed      	addgt	r5, r5, r3
 80103a2:	f04f 0900 	mov.w	r9, #0
 80103a6:	341a      	adds	r4, #26
 80103a8:	454d      	cmp	r5, r9
 80103aa:	d11a      	bne.n	80103e2 <_printf_common+0xd6>
 80103ac:	2000      	movs	r0, #0
 80103ae:	e008      	b.n	80103c2 <_printf_common+0xb6>
 80103b0:	2301      	movs	r3, #1
 80103b2:	4652      	mov	r2, sl
 80103b4:	4639      	mov	r1, r7
 80103b6:	4630      	mov	r0, r6
 80103b8:	47c0      	blx	r8
 80103ba:	3001      	adds	r0, #1
 80103bc:	d103      	bne.n	80103c6 <_printf_common+0xba>
 80103be:	f04f 30ff 	mov.w	r0, #4294967295
 80103c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103c6:	3501      	adds	r5, #1
 80103c8:	e7c3      	b.n	8010352 <_printf_common+0x46>
 80103ca:	18e1      	adds	r1, r4, r3
 80103cc:	1c5a      	adds	r2, r3, #1
 80103ce:	2030      	movs	r0, #48	; 0x30
 80103d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80103d4:	4422      	add	r2, r4
 80103d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80103da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80103de:	3302      	adds	r3, #2
 80103e0:	e7c5      	b.n	801036e <_printf_common+0x62>
 80103e2:	2301      	movs	r3, #1
 80103e4:	4622      	mov	r2, r4
 80103e6:	4639      	mov	r1, r7
 80103e8:	4630      	mov	r0, r6
 80103ea:	47c0      	blx	r8
 80103ec:	3001      	adds	r0, #1
 80103ee:	d0e6      	beq.n	80103be <_printf_common+0xb2>
 80103f0:	f109 0901 	add.w	r9, r9, #1
 80103f4:	e7d8      	b.n	80103a8 <_printf_common+0x9c>
	...

080103f8 <_printf_i>:
 80103f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80103fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010400:	460c      	mov	r4, r1
 8010402:	7e09      	ldrb	r1, [r1, #24]
 8010404:	b085      	sub	sp, #20
 8010406:	296e      	cmp	r1, #110	; 0x6e
 8010408:	4617      	mov	r7, r2
 801040a:	4606      	mov	r6, r0
 801040c:	4698      	mov	r8, r3
 801040e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010410:	f000 80b3 	beq.w	801057a <_printf_i+0x182>
 8010414:	d822      	bhi.n	801045c <_printf_i+0x64>
 8010416:	2963      	cmp	r1, #99	; 0x63
 8010418:	d036      	beq.n	8010488 <_printf_i+0x90>
 801041a:	d80a      	bhi.n	8010432 <_printf_i+0x3a>
 801041c:	2900      	cmp	r1, #0
 801041e:	f000 80b9 	beq.w	8010594 <_printf_i+0x19c>
 8010422:	2958      	cmp	r1, #88	; 0x58
 8010424:	f000 8083 	beq.w	801052e <_printf_i+0x136>
 8010428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801042c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010430:	e032      	b.n	8010498 <_printf_i+0xa0>
 8010432:	2964      	cmp	r1, #100	; 0x64
 8010434:	d001      	beq.n	801043a <_printf_i+0x42>
 8010436:	2969      	cmp	r1, #105	; 0x69
 8010438:	d1f6      	bne.n	8010428 <_printf_i+0x30>
 801043a:	6820      	ldr	r0, [r4, #0]
 801043c:	6813      	ldr	r3, [r2, #0]
 801043e:	0605      	lsls	r5, r0, #24
 8010440:	f103 0104 	add.w	r1, r3, #4
 8010444:	d52a      	bpl.n	801049c <_printf_i+0xa4>
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	6011      	str	r1, [r2, #0]
 801044a:	2b00      	cmp	r3, #0
 801044c:	da03      	bge.n	8010456 <_printf_i+0x5e>
 801044e:	222d      	movs	r2, #45	; 0x2d
 8010450:	425b      	negs	r3, r3
 8010452:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010456:	486f      	ldr	r0, [pc, #444]	; (8010614 <_printf_i+0x21c>)
 8010458:	220a      	movs	r2, #10
 801045a:	e039      	b.n	80104d0 <_printf_i+0xd8>
 801045c:	2973      	cmp	r1, #115	; 0x73
 801045e:	f000 809d 	beq.w	801059c <_printf_i+0x1a4>
 8010462:	d808      	bhi.n	8010476 <_printf_i+0x7e>
 8010464:	296f      	cmp	r1, #111	; 0x6f
 8010466:	d020      	beq.n	80104aa <_printf_i+0xb2>
 8010468:	2970      	cmp	r1, #112	; 0x70
 801046a:	d1dd      	bne.n	8010428 <_printf_i+0x30>
 801046c:	6823      	ldr	r3, [r4, #0]
 801046e:	f043 0320 	orr.w	r3, r3, #32
 8010472:	6023      	str	r3, [r4, #0]
 8010474:	e003      	b.n	801047e <_printf_i+0x86>
 8010476:	2975      	cmp	r1, #117	; 0x75
 8010478:	d017      	beq.n	80104aa <_printf_i+0xb2>
 801047a:	2978      	cmp	r1, #120	; 0x78
 801047c:	d1d4      	bne.n	8010428 <_printf_i+0x30>
 801047e:	2378      	movs	r3, #120	; 0x78
 8010480:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010484:	4864      	ldr	r0, [pc, #400]	; (8010618 <_printf_i+0x220>)
 8010486:	e055      	b.n	8010534 <_printf_i+0x13c>
 8010488:	6813      	ldr	r3, [r2, #0]
 801048a:	1d19      	adds	r1, r3, #4
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	6011      	str	r1, [r2, #0]
 8010490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010498:	2301      	movs	r3, #1
 801049a:	e08c      	b.n	80105b6 <_printf_i+0x1be>
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	6011      	str	r1, [r2, #0]
 80104a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80104a4:	bf18      	it	ne
 80104a6:	b21b      	sxthne	r3, r3
 80104a8:	e7cf      	b.n	801044a <_printf_i+0x52>
 80104aa:	6813      	ldr	r3, [r2, #0]
 80104ac:	6825      	ldr	r5, [r4, #0]
 80104ae:	1d18      	adds	r0, r3, #4
 80104b0:	6010      	str	r0, [r2, #0]
 80104b2:	0628      	lsls	r0, r5, #24
 80104b4:	d501      	bpl.n	80104ba <_printf_i+0xc2>
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	e002      	b.n	80104c0 <_printf_i+0xc8>
 80104ba:	0668      	lsls	r0, r5, #25
 80104bc:	d5fb      	bpl.n	80104b6 <_printf_i+0xbe>
 80104be:	881b      	ldrh	r3, [r3, #0]
 80104c0:	4854      	ldr	r0, [pc, #336]	; (8010614 <_printf_i+0x21c>)
 80104c2:	296f      	cmp	r1, #111	; 0x6f
 80104c4:	bf14      	ite	ne
 80104c6:	220a      	movne	r2, #10
 80104c8:	2208      	moveq	r2, #8
 80104ca:	2100      	movs	r1, #0
 80104cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80104d0:	6865      	ldr	r5, [r4, #4]
 80104d2:	60a5      	str	r5, [r4, #8]
 80104d4:	2d00      	cmp	r5, #0
 80104d6:	f2c0 8095 	blt.w	8010604 <_printf_i+0x20c>
 80104da:	6821      	ldr	r1, [r4, #0]
 80104dc:	f021 0104 	bic.w	r1, r1, #4
 80104e0:	6021      	str	r1, [r4, #0]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d13d      	bne.n	8010562 <_printf_i+0x16a>
 80104e6:	2d00      	cmp	r5, #0
 80104e8:	f040 808e 	bne.w	8010608 <_printf_i+0x210>
 80104ec:	4665      	mov	r5, ip
 80104ee:	2a08      	cmp	r2, #8
 80104f0:	d10b      	bne.n	801050a <_printf_i+0x112>
 80104f2:	6823      	ldr	r3, [r4, #0]
 80104f4:	07db      	lsls	r3, r3, #31
 80104f6:	d508      	bpl.n	801050a <_printf_i+0x112>
 80104f8:	6923      	ldr	r3, [r4, #16]
 80104fa:	6862      	ldr	r2, [r4, #4]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	bfde      	ittt	le
 8010500:	2330      	movle	r3, #48	; 0x30
 8010502:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010506:	f105 35ff 	addle.w	r5, r5, #4294967295
 801050a:	ebac 0305 	sub.w	r3, ip, r5
 801050e:	6123      	str	r3, [r4, #16]
 8010510:	f8cd 8000 	str.w	r8, [sp]
 8010514:	463b      	mov	r3, r7
 8010516:	aa03      	add	r2, sp, #12
 8010518:	4621      	mov	r1, r4
 801051a:	4630      	mov	r0, r6
 801051c:	f7ff fef6 	bl	801030c <_printf_common>
 8010520:	3001      	adds	r0, #1
 8010522:	d14d      	bne.n	80105c0 <_printf_i+0x1c8>
 8010524:	f04f 30ff 	mov.w	r0, #4294967295
 8010528:	b005      	add	sp, #20
 801052a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801052e:	4839      	ldr	r0, [pc, #228]	; (8010614 <_printf_i+0x21c>)
 8010530:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010534:	6813      	ldr	r3, [r2, #0]
 8010536:	6821      	ldr	r1, [r4, #0]
 8010538:	1d1d      	adds	r5, r3, #4
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	6015      	str	r5, [r2, #0]
 801053e:	060a      	lsls	r2, r1, #24
 8010540:	d50b      	bpl.n	801055a <_printf_i+0x162>
 8010542:	07ca      	lsls	r2, r1, #31
 8010544:	bf44      	itt	mi
 8010546:	f041 0120 	orrmi.w	r1, r1, #32
 801054a:	6021      	strmi	r1, [r4, #0]
 801054c:	b91b      	cbnz	r3, 8010556 <_printf_i+0x15e>
 801054e:	6822      	ldr	r2, [r4, #0]
 8010550:	f022 0220 	bic.w	r2, r2, #32
 8010554:	6022      	str	r2, [r4, #0]
 8010556:	2210      	movs	r2, #16
 8010558:	e7b7      	b.n	80104ca <_printf_i+0xd2>
 801055a:	064d      	lsls	r5, r1, #25
 801055c:	bf48      	it	mi
 801055e:	b29b      	uxthmi	r3, r3
 8010560:	e7ef      	b.n	8010542 <_printf_i+0x14a>
 8010562:	4665      	mov	r5, ip
 8010564:	fbb3 f1f2 	udiv	r1, r3, r2
 8010568:	fb02 3311 	mls	r3, r2, r1, r3
 801056c:	5cc3      	ldrb	r3, [r0, r3]
 801056e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010572:	460b      	mov	r3, r1
 8010574:	2900      	cmp	r1, #0
 8010576:	d1f5      	bne.n	8010564 <_printf_i+0x16c>
 8010578:	e7b9      	b.n	80104ee <_printf_i+0xf6>
 801057a:	6813      	ldr	r3, [r2, #0]
 801057c:	6825      	ldr	r5, [r4, #0]
 801057e:	6961      	ldr	r1, [r4, #20]
 8010580:	1d18      	adds	r0, r3, #4
 8010582:	6010      	str	r0, [r2, #0]
 8010584:	0628      	lsls	r0, r5, #24
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	d501      	bpl.n	801058e <_printf_i+0x196>
 801058a:	6019      	str	r1, [r3, #0]
 801058c:	e002      	b.n	8010594 <_printf_i+0x19c>
 801058e:	066a      	lsls	r2, r5, #25
 8010590:	d5fb      	bpl.n	801058a <_printf_i+0x192>
 8010592:	8019      	strh	r1, [r3, #0]
 8010594:	2300      	movs	r3, #0
 8010596:	6123      	str	r3, [r4, #16]
 8010598:	4665      	mov	r5, ip
 801059a:	e7b9      	b.n	8010510 <_printf_i+0x118>
 801059c:	6813      	ldr	r3, [r2, #0]
 801059e:	1d19      	adds	r1, r3, #4
 80105a0:	6011      	str	r1, [r2, #0]
 80105a2:	681d      	ldr	r5, [r3, #0]
 80105a4:	6862      	ldr	r2, [r4, #4]
 80105a6:	2100      	movs	r1, #0
 80105a8:	4628      	mov	r0, r5
 80105aa:	f7ef fe01 	bl	80001b0 <memchr>
 80105ae:	b108      	cbz	r0, 80105b4 <_printf_i+0x1bc>
 80105b0:	1b40      	subs	r0, r0, r5
 80105b2:	6060      	str	r0, [r4, #4]
 80105b4:	6863      	ldr	r3, [r4, #4]
 80105b6:	6123      	str	r3, [r4, #16]
 80105b8:	2300      	movs	r3, #0
 80105ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105be:	e7a7      	b.n	8010510 <_printf_i+0x118>
 80105c0:	6923      	ldr	r3, [r4, #16]
 80105c2:	462a      	mov	r2, r5
 80105c4:	4639      	mov	r1, r7
 80105c6:	4630      	mov	r0, r6
 80105c8:	47c0      	blx	r8
 80105ca:	3001      	adds	r0, #1
 80105cc:	d0aa      	beq.n	8010524 <_printf_i+0x12c>
 80105ce:	6823      	ldr	r3, [r4, #0]
 80105d0:	079b      	lsls	r3, r3, #30
 80105d2:	d413      	bmi.n	80105fc <_printf_i+0x204>
 80105d4:	68e0      	ldr	r0, [r4, #12]
 80105d6:	9b03      	ldr	r3, [sp, #12]
 80105d8:	4298      	cmp	r0, r3
 80105da:	bfb8      	it	lt
 80105dc:	4618      	movlt	r0, r3
 80105de:	e7a3      	b.n	8010528 <_printf_i+0x130>
 80105e0:	2301      	movs	r3, #1
 80105e2:	464a      	mov	r2, r9
 80105e4:	4639      	mov	r1, r7
 80105e6:	4630      	mov	r0, r6
 80105e8:	47c0      	blx	r8
 80105ea:	3001      	adds	r0, #1
 80105ec:	d09a      	beq.n	8010524 <_printf_i+0x12c>
 80105ee:	3501      	adds	r5, #1
 80105f0:	68e3      	ldr	r3, [r4, #12]
 80105f2:	9a03      	ldr	r2, [sp, #12]
 80105f4:	1a9b      	subs	r3, r3, r2
 80105f6:	42ab      	cmp	r3, r5
 80105f8:	dcf2      	bgt.n	80105e0 <_printf_i+0x1e8>
 80105fa:	e7eb      	b.n	80105d4 <_printf_i+0x1dc>
 80105fc:	2500      	movs	r5, #0
 80105fe:	f104 0919 	add.w	r9, r4, #25
 8010602:	e7f5      	b.n	80105f0 <_printf_i+0x1f8>
 8010604:	2b00      	cmp	r3, #0
 8010606:	d1ac      	bne.n	8010562 <_printf_i+0x16a>
 8010608:	7803      	ldrb	r3, [r0, #0]
 801060a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801060e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010612:	e76c      	b.n	80104ee <_printf_i+0xf6>
 8010614:	08010fa1 	.word	0x08010fa1
 8010618:	08010fb2 	.word	0x08010fb2

0801061c <_sbrk_r>:
 801061c:	b538      	push	{r3, r4, r5, lr}
 801061e:	4c06      	ldr	r4, [pc, #24]	; (8010638 <_sbrk_r+0x1c>)
 8010620:	2300      	movs	r3, #0
 8010622:	4605      	mov	r5, r0
 8010624:	4608      	mov	r0, r1
 8010626:	6023      	str	r3, [r4, #0]
 8010628:	f7f1 fd76 	bl	8002118 <_sbrk>
 801062c:	1c43      	adds	r3, r0, #1
 801062e:	d102      	bne.n	8010636 <_sbrk_r+0x1a>
 8010630:	6823      	ldr	r3, [r4, #0]
 8010632:	b103      	cbz	r3, 8010636 <_sbrk_r+0x1a>
 8010634:	602b      	str	r3, [r5, #0]
 8010636:	bd38      	pop	{r3, r4, r5, pc}
 8010638:	20005e28 	.word	0x20005e28

0801063c <__sread>:
 801063c:	b510      	push	{r4, lr}
 801063e:	460c      	mov	r4, r1
 8010640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010644:	f000 f8d6 	bl	80107f4 <_read_r>
 8010648:	2800      	cmp	r0, #0
 801064a:	bfab      	itete	ge
 801064c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801064e:	89a3      	ldrhlt	r3, [r4, #12]
 8010650:	181b      	addge	r3, r3, r0
 8010652:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010656:	bfac      	ite	ge
 8010658:	6563      	strge	r3, [r4, #84]	; 0x54
 801065a:	81a3      	strhlt	r3, [r4, #12]
 801065c:	bd10      	pop	{r4, pc}

0801065e <__swrite>:
 801065e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010662:	461f      	mov	r7, r3
 8010664:	898b      	ldrh	r3, [r1, #12]
 8010666:	05db      	lsls	r3, r3, #23
 8010668:	4605      	mov	r5, r0
 801066a:	460c      	mov	r4, r1
 801066c:	4616      	mov	r6, r2
 801066e:	d505      	bpl.n	801067c <__swrite+0x1e>
 8010670:	2302      	movs	r3, #2
 8010672:	2200      	movs	r2, #0
 8010674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010678:	f000 f868 	bl	801074c <_lseek_r>
 801067c:	89a3      	ldrh	r3, [r4, #12]
 801067e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010682:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010686:	81a3      	strh	r3, [r4, #12]
 8010688:	4632      	mov	r2, r6
 801068a:	463b      	mov	r3, r7
 801068c:	4628      	mov	r0, r5
 801068e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010692:	f000 b817 	b.w	80106c4 <_write_r>

08010696 <__sseek>:
 8010696:	b510      	push	{r4, lr}
 8010698:	460c      	mov	r4, r1
 801069a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801069e:	f000 f855 	bl	801074c <_lseek_r>
 80106a2:	1c43      	adds	r3, r0, #1
 80106a4:	89a3      	ldrh	r3, [r4, #12]
 80106a6:	bf15      	itete	ne
 80106a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80106aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80106ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80106b2:	81a3      	strheq	r3, [r4, #12]
 80106b4:	bf18      	it	ne
 80106b6:	81a3      	strhne	r3, [r4, #12]
 80106b8:	bd10      	pop	{r4, pc}

080106ba <__sclose>:
 80106ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106be:	f000 b813 	b.w	80106e8 <_close_r>
	...

080106c4 <_write_r>:
 80106c4:	b538      	push	{r3, r4, r5, lr}
 80106c6:	4c07      	ldr	r4, [pc, #28]	; (80106e4 <_write_r+0x20>)
 80106c8:	4605      	mov	r5, r0
 80106ca:	4608      	mov	r0, r1
 80106cc:	4611      	mov	r1, r2
 80106ce:	2200      	movs	r2, #0
 80106d0:	6022      	str	r2, [r4, #0]
 80106d2:	461a      	mov	r2, r3
 80106d4:	f7f8 ff4e 	bl	8009574 <_write>
 80106d8:	1c43      	adds	r3, r0, #1
 80106da:	d102      	bne.n	80106e2 <_write_r+0x1e>
 80106dc:	6823      	ldr	r3, [r4, #0]
 80106de:	b103      	cbz	r3, 80106e2 <_write_r+0x1e>
 80106e0:	602b      	str	r3, [r5, #0]
 80106e2:	bd38      	pop	{r3, r4, r5, pc}
 80106e4:	20005e28 	.word	0x20005e28

080106e8 <_close_r>:
 80106e8:	b538      	push	{r3, r4, r5, lr}
 80106ea:	4c06      	ldr	r4, [pc, #24]	; (8010704 <_close_r+0x1c>)
 80106ec:	2300      	movs	r3, #0
 80106ee:	4605      	mov	r5, r0
 80106f0:	4608      	mov	r0, r1
 80106f2:	6023      	str	r3, [r4, #0]
 80106f4:	f7f1 fcdb 	bl	80020ae <_close>
 80106f8:	1c43      	adds	r3, r0, #1
 80106fa:	d102      	bne.n	8010702 <_close_r+0x1a>
 80106fc:	6823      	ldr	r3, [r4, #0]
 80106fe:	b103      	cbz	r3, 8010702 <_close_r+0x1a>
 8010700:	602b      	str	r3, [r5, #0]
 8010702:	bd38      	pop	{r3, r4, r5, pc}
 8010704:	20005e28 	.word	0x20005e28

08010708 <_fstat_r>:
 8010708:	b538      	push	{r3, r4, r5, lr}
 801070a:	4c07      	ldr	r4, [pc, #28]	; (8010728 <_fstat_r+0x20>)
 801070c:	2300      	movs	r3, #0
 801070e:	4605      	mov	r5, r0
 8010710:	4608      	mov	r0, r1
 8010712:	4611      	mov	r1, r2
 8010714:	6023      	str	r3, [r4, #0]
 8010716:	f7f1 fcd6 	bl	80020c6 <_fstat>
 801071a:	1c43      	adds	r3, r0, #1
 801071c:	d102      	bne.n	8010724 <_fstat_r+0x1c>
 801071e:	6823      	ldr	r3, [r4, #0]
 8010720:	b103      	cbz	r3, 8010724 <_fstat_r+0x1c>
 8010722:	602b      	str	r3, [r5, #0]
 8010724:	bd38      	pop	{r3, r4, r5, pc}
 8010726:	bf00      	nop
 8010728:	20005e28 	.word	0x20005e28

0801072c <_isatty_r>:
 801072c:	b538      	push	{r3, r4, r5, lr}
 801072e:	4c06      	ldr	r4, [pc, #24]	; (8010748 <_isatty_r+0x1c>)
 8010730:	2300      	movs	r3, #0
 8010732:	4605      	mov	r5, r0
 8010734:	4608      	mov	r0, r1
 8010736:	6023      	str	r3, [r4, #0]
 8010738:	f7f1 fcd5 	bl	80020e6 <_isatty>
 801073c:	1c43      	adds	r3, r0, #1
 801073e:	d102      	bne.n	8010746 <_isatty_r+0x1a>
 8010740:	6823      	ldr	r3, [r4, #0]
 8010742:	b103      	cbz	r3, 8010746 <_isatty_r+0x1a>
 8010744:	602b      	str	r3, [r5, #0]
 8010746:	bd38      	pop	{r3, r4, r5, pc}
 8010748:	20005e28 	.word	0x20005e28

0801074c <_lseek_r>:
 801074c:	b538      	push	{r3, r4, r5, lr}
 801074e:	4c07      	ldr	r4, [pc, #28]	; (801076c <_lseek_r+0x20>)
 8010750:	4605      	mov	r5, r0
 8010752:	4608      	mov	r0, r1
 8010754:	4611      	mov	r1, r2
 8010756:	2200      	movs	r2, #0
 8010758:	6022      	str	r2, [r4, #0]
 801075a:	461a      	mov	r2, r3
 801075c:	f7f1 fcce 	bl	80020fc <_lseek>
 8010760:	1c43      	adds	r3, r0, #1
 8010762:	d102      	bne.n	801076a <_lseek_r+0x1e>
 8010764:	6823      	ldr	r3, [r4, #0]
 8010766:	b103      	cbz	r3, 801076a <_lseek_r+0x1e>
 8010768:	602b      	str	r3, [r5, #0]
 801076a:	bd38      	pop	{r3, r4, r5, pc}
 801076c:	20005e28 	.word	0x20005e28

08010770 <memmove>:
 8010770:	4288      	cmp	r0, r1
 8010772:	b510      	push	{r4, lr}
 8010774:	eb01 0302 	add.w	r3, r1, r2
 8010778:	d807      	bhi.n	801078a <memmove+0x1a>
 801077a:	1e42      	subs	r2, r0, #1
 801077c:	4299      	cmp	r1, r3
 801077e:	d00a      	beq.n	8010796 <memmove+0x26>
 8010780:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010784:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010788:	e7f8      	b.n	801077c <memmove+0xc>
 801078a:	4283      	cmp	r3, r0
 801078c:	d9f5      	bls.n	801077a <memmove+0xa>
 801078e:	1881      	adds	r1, r0, r2
 8010790:	1ad2      	subs	r2, r2, r3
 8010792:	42d3      	cmn	r3, r2
 8010794:	d100      	bne.n	8010798 <memmove+0x28>
 8010796:	bd10      	pop	{r4, pc}
 8010798:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801079c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80107a0:	e7f7      	b.n	8010792 <memmove+0x22>

080107a2 <__malloc_lock>:
 80107a2:	4770      	bx	lr

080107a4 <__malloc_unlock>:
 80107a4:	4770      	bx	lr

080107a6 <_realloc_r>:
 80107a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107a8:	4607      	mov	r7, r0
 80107aa:	4614      	mov	r4, r2
 80107ac:	460e      	mov	r6, r1
 80107ae:	b921      	cbnz	r1, 80107ba <_realloc_r+0x14>
 80107b0:	4611      	mov	r1, r2
 80107b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80107b6:	f7ff babd 	b.w	800fd34 <_malloc_r>
 80107ba:	b922      	cbnz	r2, 80107c6 <_realloc_r+0x20>
 80107bc:	f7ff fa6c 	bl	800fc98 <_free_r>
 80107c0:	4625      	mov	r5, r4
 80107c2:	4628      	mov	r0, r5
 80107c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107c6:	f000 f827 	bl	8010818 <_malloc_usable_size_r>
 80107ca:	42a0      	cmp	r0, r4
 80107cc:	d20f      	bcs.n	80107ee <_realloc_r+0x48>
 80107ce:	4621      	mov	r1, r4
 80107d0:	4638      	mov	r0, r7
 80107d2:	f7ff faaf 	bl	800fd34 <_malloc_r>
 80107d6:	4605      	mov	r5, r0
 80107d8:	2800      	cmp	r0, #0
 80107da:	d0f2      	beq.n	80107c2 <_realloc_r+0x1c>
 80107dc:	4631      	mov	r1, r6
 80107de:	4622      	mov	r2, r4
 80107e0:	f7fe febe 	bl	800f560 <memcpy>
 80107e4:	4631      	mov	r1, r6
 80107e6:	4638      	mov	r0, r7
 80107e8:	f7ff fa56 	bl	800fc98 <_free_r>
 80107ec:	e7e9      	b.n	80107c2 <_realloc_r+0x1c>
 80107ee:	4635      	mov	r5, r6
 80107f0:	e7e7      	b.n	80107c2 <_realloc_r+0x1c>
	...

080107f4 <_read_r>:
 80107f4:	b538      	push	{r3, r4, r5, lr}
 80107f6:	4c07      	ldr	r4, [pc, #28]	; (8010814 <_read_r+0x20>)
 80107f8:	4605      	mov	r5, r0
 80107fa:	4608      	mov	r0, r1
 80107fc:	4611      	mov	r1, r2
 80107fe:	2200      	movs	r2, #0
 8010800:	6022      	str	r2, [r4, #0]
 8010802:	461a      	mov	r2, r3
 8010804:	f7f1 fc36 	bl	8002074 <_read>
 8010808:	1c43      	adds	r3, r0, #1
 801080a:	d102      	bne.n	8010812 <_read_r+0x1e>
 801080c:	6823      	ldr	r3, [r4, #0]
 801080e:	b103      	cbz	r3, 8010812 <_read_r+0x1e>
 8010810:	602b      	str	r3, [r5, #0]
 8010812:	bd38      	pop	{r3, r4, r5, pc}
 8010814:	20005e28 	.word	0x20005e28

08010818 <_malloc_usable_size_r>:
 8010818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801081c:	1f18      	subs	r0, r3, #4
 801081e:	2b00      	cmp	r3, #0
 8010820:	bfbc      	itt	lt
 8010822:	580b      	ldrlt	r3, [r1, r0]
 8010824:	18c0      	addlt	r0, r0, r3
 8010826:	4770      	bx	lr

08010828 <_init>:
 8010828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801082a:	bf00      	nop
 801082c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801082e:	bc08      	pop	{r3}
 8010830:	469e      	mov	lr, r3
 8010832:	4770      	bx	lr

08010834 <_fini>:
 8010834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010836:	bf00      	nop
 8010838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801083a:	bc08      	pop	{r3}
 801083c:	469e      	mov	lr, r3
 801083e:	4770      	bx	lr
