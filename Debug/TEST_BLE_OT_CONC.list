
TEST_BLE_OT_CONC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012450  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  08012590  08012590  00022590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012e3c  08012e3c  00022e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012e44  08012e44  00022e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012e48  08012e48  00022e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000004  08012e4c  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000088  08012ed0  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000051  20000124  08012f69  00030124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000178  08012fba  00030178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a0  2000018c  08012fcb  0003018c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006d90  2000022c  0801306b  0003022c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20006fbc  0801306b  00036fbc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 15 MB_MEM1       000001c4  20030028  20030028  00040000  2**2
                  ALLOC
 16 MB_MEM2       00000b93  200301ec  200301ec  00040000  2**2
                  ALLOC
 17 .debug_info   0005ca57  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 0000a5a8  00000000  00000000  0008ccb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003a78  00000000  00000000  00097260  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 000035d0  00000000  00000000  0009acd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  00035d3d  00000000  00000000  0009e2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0003c1e8  00000000  00000000  000d3fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00114825  00000000  00000000  001101cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  002249f2  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000f888  00000000  00000000  00224a70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000022c 	.word	0x2000022c
 800015c:	00000000 	.word	0x00000000
 8000160:	08012578 	.word	0x08012578

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000230 	.word	0x20000230
 800017c:	08012578 	.word	0x08012578

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800038e:	f1a4 0401 	sub.w	r4, r4, #1
 8000392:	d1e9      	bne.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__aeabi_d2f>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009f4:	bf24      	itt	cs
 80009f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009fe:	d90d      	bls.n	8000a1c <__aeabi_d2f+0x30>
 8000a00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a14:	bf08      	it	eq
 8000a16:	f020 0001 	biceq.w	r0, r0, #1
 8000a1a:	4770      	bx	lr
 8000a1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a20:	d121      	bne.n	8000a66 <__aeabi_d2f+0x7a>
 8000a22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a26:	bfbc      	itt	lt
 8000a28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	4770      	bxlt	lr
 8000a2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a36:	f1c2 0218 	rsb	r2, r2, #24
 8000a3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a42:	fa20 f002 	lsr.w	r0, r0, r2
 8000a46:	bf18      	it	ne
 8000a48:	f040 0001 	orrne.w	r0, r0, #1
 8000a4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a58:	ea40 000c 	orr.w	r0, r0, ip
 8000a5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a64:	e7cc      	b.n	8000a00 <__aeabi_d2f+0x14>
 8000a66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a6a:	d107      	bne.n	8000a7c <__aeabi_d2f+0x90>
 8000a6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a70:	bf1e      	ittt	ne
 8000a72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a7a:	4770      	bxne	lr
 8000a7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b972 	b.w	8000d88 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4688      	mov	r8, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14b      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4615      	mov	r5, r2
 8000ace:	d967      	bls.n	8000ba0 <__udivmoddi4+0xe4>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0720 	rsb	r7, r2, #32
 8000ada:	fa01 f302 	lsl.w	r3, r1, r2
 8000ade:	fa20 f707 	lsr.w	r7, r0, r7
 8000ae2:	4095      	lsls	r5, r2
 8000ae4:	ea47 0803 	orr.w	r8, r7, r3
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aee:	0c23      	lsrs	r3, r4, #16
 8000af0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000af4:	fa1f fc85 	uxth.w	ip, r5
 8000af8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000afc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b00:	fb07 f10c 	mul.w	r1, r7, ip
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d909      	bls.n	8000b1c <__udivmoddi4+0x60>
 8000b08:	18eb      	adds	r3, r5, r3
 8000b0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b0e:	f080 811b 	bcs.w	8000d48 <__udivmoddi4+0x28c>
 8000b12:	4299      	cmp	r1, r3
 8000b14:	f240 8118 	bls.w	8000d48 <__udivmoddi4+0x28c>
 8000b18:	3f02      	subs	r7, #2
 8000b1a:	442b      	add	r3, r5
 8000b1c:	1a5b      	subs	r3, r3, r1
 8000b1e:	b2a4      	uxth	r4, r4
 8000b20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b30:	45a4      	cmp	ip, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x8c>
 8000b34:	192c      	adds	r4, r5, r4
 8000b36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3a:	f080 8107 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	f240 8104 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b44:	3802      	subs	r0, #2
 8000b46:	442c      	add	r4, r5
 8000b48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4c:	eba4 040c 	sub.w	r4, r4, ip
 8000b50:	2700      	movs	r7, #0
 8000b52:	b11e      	cbz	r6, 8000b5c <__udivmoddi4+0xa0>
 8000b54:	40d4      	lsrs	r4, r2
 8000b56:	2300      	movs	r3, #0
 8000b58:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d909      	bls.n	8000b7a <__udivmoddi4+0xbe>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80eb 	beq.w	8000d42 <__udivmoddi4+0x286>
 8000b6c:	2700      	movs	r7, #0
 8000b6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b72:	4638      	mov	r0, r7
 8000b74:	4639      	mov	r1, r7
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	fab3 f783 	clz	r7, r3
 8000b7e:	2f00      	cmp	r7, #0
 8000b80:	d147      	bne.n	8000c12 <__udivmoddi4+0x156>
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xd0>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 80fa 	bhi.w	8000d80 <__udivmoddi4+0x2c4>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4698      	mov	r8, r3
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d0e0      	beq.n	8000b5c <__udivmoddi4+0xa0>
 8000b9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b9e:	e7dd      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ba0:	b902      	cbnz	r2, 8000ba4 <__udivmoddi4+0xe8>
 8000ba2:	deff      	udf	#255	; 0xff
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	f040 808f 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bae:	1b49      	subs	r1, r1, r5
 8000bb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bb4:	fa1f f885 	uxth.w	r8, r5
 8000bb8:	2701      	movs	r7, #1
 8000bba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bbe:	0c23      	lsrs	r3, r4, #16
 8000bc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bd0:	18eb      	adds	r3, r5, r3
 8000bd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4299      	cmp	r1, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2bc>
 8000bde:	4684      	mov	ip, r0
 8000be0:	1a59      	subs	r1, r3, r1
 8000be2:	b2a3      	uxth	r3, r4
 8000be4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bf0:	fb08 f800 	mul.w	r8, r8, r0
 8000bf4:	45a0      	cmp	r8, r4
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x14c>
 8000bf8:	192c      	adds	r4, r5, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x14a>
 8000c00:	45a0      	cmp	r8, r4
 8000c02:	f200 80b6 	bhi.w	8000d72 <__udivmoddi4+0x2b6>
 8000c06:	4618      	mov	r0, r3
 8000c08:	eba4 0408 	sub.w	r4, r4, r8
 8000c0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c10:	e79f      	b.n	8000b52 <__udivmoddi4+0x96>
 8000c12:	f1c7 0c20 	rsb	ip, r7, #32
 8000c16:	40bb      	lsls	r3, r7
 8000c18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c20:	fa01 f407 	lsl.w	r4, r1, r7
 8000c24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c30:	4325      	orrs	r5, r4
 8000c32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c36:	0c2c      	lsrs	r4, r5, #16
 8000c38:	fb08 3319 	mls	r3, r8, r9, r3
 8000c3c:	fa1f fa8e 	uxth.w	sl, lr
 8000c40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c44:	fb09 f40a 	mul.w	r4, r9, sl
 8000c48:	429c      	cmp	r4, r3
 8000c4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1e 0303 	adds.w	r3, lr, r3
 8000c58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c5c:	f080 8087 	bcs.w	8000d6e <__udivmoddi4+0x2b2>
 8000c60:	429c      	cmp	r4, r3
 8000c62:	f240 8084 	bls.w	8000d6e <__udivmoddi4+0x2b2>
 8000c66:	f1a9 0902 	sub.w	r9, r9, #2
 8000c6a:	4473      	add	r3, lr
 8000c6c:	1b1b      	subs	r3, r3, r4
 8000c6e:	b2ad      	uxth	r5, r5
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c80:	45a2      	cmp	sl, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1e 0404 	adds.w	r4, lr, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	d26b      	bcs.n	8000d66 <__udivmoddi4+0x2aa>
 8000c8e:	45a2      	cmp	sl, r4
 8000c90:	d969      	bls.n	8000d66 <__udivmoddi4+0x2aa>
 8000c92:	3802      	subs	r0, #2
 8000c94:	4474      	add	r4, lr
 8000c96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9e:	eba4 040a 	sub.w	r4, r4, sl
 8000ca2:	454c      	cmp	r4, r9
 8000ca4:	46c2      	mov	sl, r8
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	d354      	bcc.n	8000d54 <__udivmoddi4+0x298>
 8000caa:	d051      	beq.n	8000d50 <__udivmoddi4+0x294>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d069      	beq.n	8000d84 <__udivmoddi4+0x2c8>
 8000cb0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cb4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cb8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cbc:	40fd      	lsrs	r5, r7
 8000cbe:	40fc      	lsrs	r4, r7
 8000cc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e747      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cd4:	4095      	lsls	r5, r2
 8000cd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cda:	fa21 f303 	lsr.w	r3, r1, r3
 8000cde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce2:	4338      	orrs	r0, r7
 8000ce4:	0c01      	lsrs	r1, r0, #16
 8000ce6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cea:	fa1f f885 	uxth.w	r8, r5
 8000cee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb07 f308 	mul.w	r3, r7, r8
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x256>
 8000d02:	1869      	adds	r1, r5, r1
 8000d04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d08:	d22f      	bcs.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d92d      	bls.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0e:	3f02      	subs	r7, #2
 8000d10:	4429      	add	r1, r5
 8000d12:	1acb      	subs	r3, r1, r3
 8000d14:	b281      	uxth	r1, r0
 8000d16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d22:	fb00 f308 	mul.w	r3, r0, r8
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d907      	bls.n	8000d3a <__udivmoddi4+0x27e>
 8000d2a:	1869      	adds	r1, r5, r1
 8000d2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d30:	d217      	bcs.n	8000d62 <__udivmoddi4+0x2a6>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d915      	bls.n	8000d62 <__udivmoddi4+0x2a6>
 8000d36:	3802      	subs	r0, #2
 8000d38:	4429      	add	r1, r5
 8000d3a:	1ac9      	subs	r1, r1, r3
 8000d3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d40:	e73b      	b.n	8000bba <__udivmoddi4+0xfe>
 8000d42:	4637      	mov	r7, r6
 8000d44:	4630      	mov	r0, r6
 8000d46:	e709      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000d48:	4607      	mov	r7, r0
 8000d4a:	e6e7      	b.n	8000b1c <__udivmoddi4+0x60>
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	e6fb      	b.n	8000b48 <__udivmoddi4+0x8c>
 8000d50:	4541      	cmp	r1, r8
 8000d52:	d2ab      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d58:	eb69 020e 	sbc.w	r2, r9, lr
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	4613      	mov	r3, r2
 8000d60:	e7a4      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d62:	4660      	mov	r0, ip
 8000d64:	e7e9      	b.n	8000d3a <__udivmoddi4+0x27e>
 8000d66:	4618      	mov	r0, r3
 8000d68:	e795      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6a:	4667      	mov	r7, ip
 8000d6c:	e7d1      	b.n	8000d12 <__udivmoddi4+0x256>
 8000d6e:	4681      	mov	r9, r0
 8000d70:	e77c      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d72:	3802      	subs	r0, #2
 8000d74:	442c      	add	r4, r5
 8000d76:	e747      	b.n	8000c08 <__udivmoddi4+0x14c>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	442b      	add	r3, r5
 8000d7e:	e72f      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d80:	4638      	mov	r0, r7
 8000d82:	e708      	b.n	8000b96 <__udivmoddi4+0xda>
 8000d84:	4637      	mov	r7, r6
 8000d86:	e6e9      	b.n	8000b5c <__udivmoddi4+0xa0>

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d94:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d9a:	f023 0207 	bic.w	r2, r3, #7
 8000d9e:	4905      	ldr	r1, [pc, #20]	; (8000db4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	58000400 	.word	0x58000400

08000db8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <LL_EXTI_EnableIT_32_63+0x24>)
 8000dc2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000dc6:	4905      	ldr	r1, [pc, #20]	; (8000ddc <LL_EXTI_EnableIT_32_63+0x24>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	58000800 	.word	0x58000800

08000de0 <LL_C2_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8000dea:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8000dee:	4905      	ldr	r1, [pc, #20]	; (8000e04 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	58000800 	.word	0x58000800

08000e08 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	608b      	str	r3, [r1, #8]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <APPE_Init>:
static void displayConcurrentMode(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000e34:	f000 f82e 	bl	8000e94 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000e38:	4907      	ldr	r1, [pc, #28]	; (8000e58 <APPE_Init+0x28>)
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 fe2a 	bl	8001a94 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  /* initialize debugger module if supported and debug trace if activated */
  Init_Debug();
 8000e40:	f000 f818 	bl	8000e74 <Init_Debug>

  //TODO: remove displayConcurrentMode() call since just used for debugging
  /* Display Dynamic concurrent mode (BLE and Thread)  */
  displayConcurrentMode();
 8000e44:	f000 f80a 	bl	8000e5c <displayConcurrentMode>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000e48:	2101      	movs	r1, #1
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f010 f8a8 	bl	8010fa0 <UTIL_LPM_SetOffMode>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000e50:	f000 f82e 	bl	8000eb0 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000e54:	bf00      	nop
}
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20006cc0 	.word	0x20006cc0

08000e5c <displayConcurrentMode>:
/* USER CODE BEGIN FD */
//TODO: remove function
static void displayConcurrentMode()
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
    APP_DBG("Dynamic Concurrent Mode BLE/OpenThread starting...");
 8000e60:	4a03      	ldr	r2, [pc, #12]	; (8000e70 <displayConcurrentMode+0x14>)
 8000e62:	2101      	movs	r1, #1
 8000e64:	2000      	movs	r0, #0
 8000e66:	f001 fca1 	bl	80027ac <logApplication>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	080125a8 	.word	0x080125a8

08000e74 <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug( void )
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000e78:	f002 f832 	bl	8002ee0 <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000e7c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000e80:	f7ff ff9a 	bl	8000db8 <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000e84:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000e88:	f7ff ffaa 	bl	8000de0 <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000e8c:	f009 fc22 	bl	800a6d4 <DbgTraceInit>
#endif

  return;
 8000e90:	bf00      	nop
}
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000e98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000e9c:	f7ff ffb4 	bl	8000e08 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000ea0:	f010 f86c 	bl	8010f7c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000ea4:	2004      	movs	r0, #4
 8000ea6:	f7ff ff71 	bl	8000d8c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000eaa:	bf00      	nop
}
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000eb6:	f008 fd85 	bl	80099c4 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f00a fb9e 	bl	800b5fc <osMutexNew>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <appe_Tl_Init+0x70>)
 8000ec4:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f00a fcde 	bl	800b88c <osSemaphoreNew>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <appe_Tl_Init+0x74>)
 8000ed4:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8000ed6:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <appe_Tl_Init+0x78>)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4814      	ldr	r0, [pc, #80]	; (8000f2c <appe_Tl_Init+0x7c>)
 8000edc:	f00a f9c4 	bl	800b268 <osThreadNew>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <appe_Tl_Init+0x80>)
 8000ee4:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <appe_Tl_Init+0x84>)
 8000ee8:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <appe_Tl_Init+0x88>)
 8000eec:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000eee:	463b      	mov	r3, r7
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4812      	ldr	r0, [pc, #72]	; (8000f3c <appe_Tl_Init+0x8c>)
 8000ef4:	f008 fc2c 	bl	8009750 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <appe_Tl_Init+0x90>)
 8000efa:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <appe_Tl_Init+0x94>)
 8000efe:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <appe_Tl_Init+0x98>)
 8000f02:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000f04:	f240 533c 	movw	r3, #1340	; 0x53c
 8000f08:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f008 ff12 	bl	8009d38 <TL_MM_Init>

  TL_Enable();
 8000f14:	f008 fd50 	bl	80099b8 <TL_Enable>

  return;
 8000f18:	bf00      	nop
}
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20006ca0 	.word	0x20006ca0
 8000f24:	20006ca8 	.word	0x20006ca8
 8000f28:	08012b0c 	.word	0x08012b0c
 8000f2c:	08001071 	.word	0x08001071
 8000f30:	20006ca4 	.word	0x20006ca4
 8000f34:	20030728 	.word	0x20030728
 8000f38:	08000f4d 	.word	0x08000f4d
 8000f3c:	08000f8d 	.word	0x08000f8d
 8000f40:	20030940 	.word	0x20030940
 8000f44:	20030834 	.word	0x20030834
 8000f48:	200301ec 	.word	0x200301ec

08000f4c <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <APPE_SysStatusNot+0x16>
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d008      	beq.n	8000f72 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8000f60:	e00d      	b.n	8000f7e <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <APPE_SysStatusNot+0x3c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f00a fbe0 	bl	800b730 <osMutexAcquire>
      break;
 8000f70:	e005      	b.n	8000f7e <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <APPE_SysStatusNot+0x3c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f00a fc38 	bl	800b7ec <osMutexRelease>
      break;
 8000f7c:	bf00      	nop
  }
  return;
 8000f7e:	bf00      	nop
}
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20006ca0 	.word	0x20006ca0

08000f8c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	330b      	adds	r3, #11
 8000f9a:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8000fa6:	d004      	beq.n	8000fb2 <APPE_SysUserEvtRx+0x26>
 8000fa8:	f249 2201 	movw	r2, #37377	; 0x9201
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d003      	beq.n	8000fb8 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8000fb0:	e008      	b.n	8000fc4 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8000fb2:	f000 f833 	bl	800101c <APPE_SysEvtReadyProcessing>
         break;
 8000fb6:	e005      	b.n	8000fc4 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	789b      	ldrb	r3, [r3, #2]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f805 	bl	8000fcc <APPE_SysEvtError>
         break;
 8000fc2:	bf00      	nop
  }
  return;
 8000fc4:	bf00      	nop
}
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b7d      	cmp	r3, #125	; 0x7d
 8000fda:	d002      	beq.n	8000fe2 <APPE_SysEvtError+0x16>
 8000fdc:	2b7e      	cmp	r3, #126	; 0x7e
 8000fde:	d006      	beq.n	8000fee <APPE_SysEvtError+0x22>
 8000fe0:	e00b      	b.n	8000ffa <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <APPE_SysEvtError+0x44>)
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f001 fbe0 	bl	80027ac <logApplication>
       break;
 8000fec:	e00c      	b.n	8001008 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8000fee:	4a09      	ldr	r2, [pc, #36]	; (8001014 <APPE_SysEvtError+0x48>)
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f001 fbda 	bl	80027ac <logApplication>
       break;
 8000ff8:	e006      	b.n	8001008 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <APPE_SysEvtError+0x4c>)
 8000ffe:	2101      	movs	r1, #1
 8001000:	2000      	movs	r0, #0
 8001002:	f001 fbd3 	bl	80027ac <logApplication>
       break;
 8001006:	bf00      	nop
  }
  return;
 8001008:	bf00      	nop
}
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	080125dc 	.word	0x080125dc
 8001014:	08012600 	.word	0x08012600
 8001018:	08012620 	.word	0x08012620

0800101c <APPE_SysEvtReadyProcessing>:
//  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
//  return;
//}

static void APPE_SysEvtReadyProcessing( void )
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001020:	f008 fefe 	bl	8009e20 <TL_TRACES_Init>
   * APP_THREAD_Init_Dyn_1() : Thread Stack Init until it's ready to be configured (default channel, PID, etc...)
   * APP_BLE_Init_Dyn_2()    : Start ADV
   * APP_THREAD_Init_Dyn_2() : Thread Stack configuration (default channel, PID, etc...) to be able to start scanning
   *                           or joining a Thread Network
   */
  APP_DBG("1- Initialisation of BLE Stack...");
 8001024:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <APPE_SysEvtReadyProcessing+0x44>)
 8001026:	2101      	movs	r1, #1
 8001028:	2000      	movs	r0, #0
 800102a:	f001 fbbf 	bl	80027ac <logApplication>
  APP_BLE_Init_Dyn_1();
 800102e:	f00e f8d1 	bl	800f1d4 <APP_BLE_Init_Dyn_1>
  APP_DBG("2- Initialisation of OpenThread Stack. FW info :");
 8001032:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <APPE_SysEvtReadyProcessing+0x48>)
 8001034:	2101      	movs	r1, #1
 8001036:	2000      	movs	r0, #0
 8001038:	f001 fbb8 	bl	80027ac <logApplication>
  APP_THREAD_Init_Dyn_1();
 800103c:	f00e ff4c 	bl	800fed8 <APP_THREAD_Init_Dyn_1>

  APP_DBG("3- Start BLE ADV...");
 8001040:	4a09      	ldr	r2, [pc, #36]	; (8001068 <APPE_SysEvtReadyProcessing+0x4c>)
 8001042:	2101      	movs	r1, #1
 8001044:	2000      	movs	r0, #0
 8001046:	f001 fbb1 	bl	80027ac <logApplication>
  APP_BLE_Init_Dyn_2();
 800104a:	f00e f947 	bl	800f2dc <APP_BLE_Init_Dyn_2>
  APP_DBG("4- Configure OpenThread (Channel, PANID, IPv6 stack, ...) and Start it...");
 800104e:	4a07      	ldr	r2, [pc, #28]	; (800106c <APPE_SysEvtReadyProcessing+0x50>)
 8001050:	2101      	movs	r1, #1
 8001052:	2000      	movs	r0, #0
 8001054:	f001 fbaa 	bl	80027ac <logApplication>
  APP_THREAD_Init_Dyn_2();
 8001058:	f00e ff66 	bl	800ff28 <APP_THREAD_Init_Dyn_2>
  /* Thread stack is initialized, low power mode can be enabled */
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
  UTIL_LPM_SetStopMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
#endif

  return;
 800105c:	bf00      	nop
}
 800105e:	bd80      	pop	{r7, pc}
 8001060:	08012640 	.word	0x08012640
 8001064:	08012664 	.word	0x08012664
 8001068:	08012698 	.word	0x08012698
 800106c:	080126ac 	.word	0x080126ac

08001070 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	2100      	movs	r1, #0
 800107e:	2001      	movs	r0, #1
 8001080:	f00a f9fa 	bl	800b478 <osThreadFlagsWait>
     shci_user_evt_proc();
 8001084:	f008 fb80 	bl	8009788 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8001088:	e7f6      	b.n	8001078 <ShciUserEvtProcess+0x8>
	...

0800108c <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <shci_notify_asynch_evt+0x1c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2101      	movs	r1, #1
 800109a:	4618      	mov	r0, r3
 800109c:	f00a f98a 	bl	800b3b4 <osThreadFlagsSet>
  return;
 80010a0:	bf00      	nop
}
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20006ca4 	.word	0x20006ca4

080010ac <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <shci_cmd_resp_release+0x1c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f00a fceb 	bl	800ba94 <osSemaphoreRelease>
  return;
 80010be:	bf00      	nop
}
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20006ca8 	.word	0x20006ca8

080010cc <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <shci_cmd_resp_wait+0x20>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295
 80010dc:	4618      	mov	r0, r3
 80010de:	f00a fc73 	bl	800b9c8 <osSemaphoreAcquire>
  return;
 80010e2:	bf00      	nop
}
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20006ca8 	.word	0x20006ca8

080010f0 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
#if(CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	330b      	adds	r3, #11
 80010fc:	1c99      	adds	r1, r3, #2
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7a9b      	ldrb	r3, [r3, #10]
 8001102:	3b02      	subs	r3, #2
 8001104:	461a      	mov	r2, r3
 8001106:	2001      	movs	r0, #1
 8001108:	f009 fb0a 	bl	800a720 <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f008 fe4f 	bl	8009db0 <TL_MM_EvtDone>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
#ifdef CFG_DEBUG_TRACE_UART
  MX_LPUART1_UART_Init();
 800111e:	f001 fcf7 	bl	8002b10 <MX_LPUART1_UART_Init>
  return;
 8001122:	bf00      	nop
#endif
}
 8001124:	bd80      	pop	{r7, pc}

08001126 <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	460b      	mov	r3, r1
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001134:	897a      	ldrh	r2, [r7, #10]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68f9      	ldr	r1, [r7, #12]
 800113a:	2002      	movs	r0, #2
 800113c:	f000 ff98 	bl	8002070 <HW_UART_Transmit_DMA>

  return;
 8001140:	bf00      	nop
}
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800114c:	4a05      	ldr	r2, [pc, #20]	; (8001164 <MX_FREERTOS_Init+0x1c>)
 800114e:	2100      	movs	r1, #0
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_FREERTOS_Init+0x20>)
 8001152:	f00a f889 	bl	800b268 <osThreadNew>
 8001156:	4602      	mov	r2, r0
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <MX_FREERTOS_Init+0x24>)
 800115a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  APPE_Init();
 800115c:	f7ff fe68 	bl	8000e30 <APPE_Init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	08012b30 	.word	0x08012b30
 8001168:	08001171 	.word	0x08001171
 800116c:	20006cac 	.word	0x20006cac

08001170 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001178:	2001      	movs	r0, #1
 800117a:	f00a fa11 	bl	800b5a0 <osDelay>
 800117e:	e7fb      	b.n	8001178 <StartDefaultTask+0x8>

08001180 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800118c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800118e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4313      	orrs	r3, r2
 8001196:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800119c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4013      	ands	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011a4:	68fb      	ldr	r3, [r7, #12]
}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011b6:	2004      	movs	r0, #4
 80011b8:	f7ff ffe2 	bl	8001180 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011bc:	2001      	movs	r0, #1
 80011be:	f7ff ffdf 	bl	8001180 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011c2:	2002      	movs	r0, #2
 80011c4:	f7ff ffdc 	bl	8001180 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2105      	movs	r1, #5
 80011cc:	200e      	movs	r0, #14
 80011ce:	f001 ffb8 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80011d2:	200e      	movs	r0, #14
 80011d4:	f001 ffcf 	bl	8003176 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2105      	movs	r1, #5
 80011dc:	203a      	movs	r0, #58	; 0x3a
 80011de:	f001 ffb0 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80011e2:	203a      	movs	r0, #58	; 0x3a
 80011e4:	f001 ffc7 	bl	8003176 <HAL_NVIC_EnableIRQ>

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800120e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4313      	orrs	r3, r2
 8001216:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800121c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4013      	ands	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001224:	68fb      	ldr	r3, [r7, #12]
}
 8001226:	bf00      	nop
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	2004      	movs	r0, #4
 8001238:	f7ff ffe2 	bl	8001200 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123c:	2001      	movs	r0, #1
 800123e:	f7ff ffdf 	bl	8001200 <LL_AHB2_GRP1_EnableClock>

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <LL_EXTI_EnableIT_0_31>:
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <LL_EXTI_EnableIT_0_31+0x24>)
 8001252:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001256:	4905      	ldr	r1, [pc, #20]	; (800126c <LL_EXTI_EnableIT_0_31+0x24>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4313      	orrs	r3, r2
 800125c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	58000800 	.word	0x58000800

08001270 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4904      	ldr	r1, [pc, #16]	; (8001290 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4313      	orrs	r3, r2
 8001282:	600b      	str	r3, [r1, #0]

}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	58000800 	.word	0x58000800

08001294 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <ReadRtcSsrValue+0x3c>)
 800129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129e:	b29b      	uxth	r3, r3
 80012a0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <ReadRtcSsrValue+0x3c>)
 80012a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80012aa:	e005      	b.n	80012b8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <ReadRtcSsrValue+0x3c>)
 80012b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d1f5      	bne.n	80012ac <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80012c0:	683b      	ldr	r3, [r7, #0]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40002800 	.word	0x40002800

080012d4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	460a      	mov	r2, r1
 80012de:	71fb      	strb	r3, [r7, #7]
 80012e0:	4613      	mov	r3, r2
 80012e2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80012e4:	79ba      	ldrb	r2, [r7, #6]
 80012e6:	491d      	ldr	r1, [pc, #116]	; (800135c <LinkTimerAfter+0x88>)
 80012e8:	4613      	mov	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	440b      	add	r3, r1
 80012f2:	3315      	adds	r3, #21
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d009      	beq.n	8001312 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80012fe:	7bfa      	ldrb	r2, [r7, #15]
 8001300:	4916      	ldr	r1, [pc, #88]	; (800135c <LinkTimerAfter+0x88>)
 8001302:	4613      	mov	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4413      	add	r3, r2
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	440b      	add	r3, r1
 800130c:	3314      	adds	r3, #20
 800130e:	79fa      	ldrb	r2, [r7, #7]
 8001310:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001312:	79fa      	ldrb	r2, [r7, #7]
 8001314:	4911      	ldr	r1, [pc, #68]	; (800135c <LinkTimerAfter+0x88>)
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	3315      	adds	r3, #21
 8001322:	7bfa      	ldrb	r2, [r7, #15]
 8001324:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001326:	79fa      	ldrb	r2, [r7, #7]
 8001328:	490c      	ldr	r1, [pc, #48]	; (800135c <LinkTimerAfter+0x88>)
 800132a:	4613      	mov	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	440b      	add	r3, r1
 8001334:	3314      	adds	r3, #20
 8001336:	79ba      	ldrb	r2, [r7, #6]
 8001338:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800133a:	79ba      	ldrb	r2, [r7, #6]
 800133c:	4907      	ldr	r1, [pc, #28]	; (800135c <LinkTimerAfter+0x88>)
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	440b      	add	r3, r1
 8001348:	3315      	adds	r3, #21
 800134a:	79fa      	ldrb	r2, [r7, #7]
 800134c:	701a      	strb	r2, [r3, #0]

  return;
 800134e:	bf00      	nop
}
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000088 	.word	0x20000088

08001360 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	460a      	mov	r2, r1
 800136a:	71fb      	strb	r3, [r7, #7]
 800136c:	4613      	mov	r3, r2
 800136e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001370:	4b29      	ldr	r3, [pc, #164]	; (8001418 <LinkTimerBefore+0xb8>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	79ba      	ldrb	r2, [r7, #6]
 8001378:	429a      	cmp	r2, r3
 800137a:	d032      	beq.n	80013e2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800137c:	79ba      	ldrb	r2, [r7, #6]
 800137e:	4927      	ldr	r1, [pc, #156]	; (800141c <LinkTimerBefore+0xbc>)
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	440b      	add	r3, r1
 800138a:	3314      	adds	r3, #20
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	4922      	ldr	r1, [pc, #136]	; (800141c <LinkTimerBefore+0xbc>)
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	440b      	add	r3, r1
 800139e:	3315      	adds	r3, #21
 80013a0:	79fa      	ldrb	r2, [r7, #7]
 80013a2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80013a4:	79fa      	ldrb	r2, [r7, #7]
 80013a6:	491d      	ldr	r1, [pc, #116]	; (800141c <LinkTimerBefore+0xbc>)
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	440b      	add	r3, r1
 80013b2:	3315      	adds	r3, #21
 80013b4:	79ba      	ldrb	r2, [r7, #6]
 80013b6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80013b8:	79fa      	ldrb	r2, [r7, #7]
 80013ba:	4918      	ldr	r1, [pc, #96]	; (800141c <LinkTimerBefore+0xbc>)
 80013bc:	4613      	mov	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4413      	add	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	440b      	add	r3, r1
 80013c6:	3314      	adds	r3, #20
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80013cc:	79ba      	ldrb	r2, [r7, #6]
 80013ce:	4913      	ldr	r1, [pc, #76]	; (800141c <LinkTimerBefore+0xbc>)
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	440b      	add	r3, r1
 80013da:	3314      	adds	r3, #20
 80013dc:	79fa      	ldrb	r2, [r7, #7]
 80013de:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80013e0:	e014      	b.n	800140c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80013e2:	79fa      	ldrb	r2, [r7, #7]
 80013e4:	490d      	ldr	r1, [pc, #52]	; (800141c <LinkTimerBefore+0xbc>)
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	440b      	add	r3, r1
 80013f0:	3315      	adds	r3, #21
 80013f2:	79ba      	ldrb	r2, [r7, #6]
 80013f4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80013f6:	79ba      	ldrb	r2, [r7, #6]
 80013f8:	4908      	ldr	r1, [pc, #32]	; (800141c <LinkTimerBefore+0xbc>)
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	440b      	add	r3, r1
 8001404:	3314      	adds	r3, #20
 8001406:	79fa      	ldrb	r2, [r7, #7]
 8001408:	701a      	strb	r2, [r3, #0]
  return;
 800140a:	bf00      	nop
}
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000118 	.word	0x20000118
 800141c:	20000088 	.word	0x20000088

08001420 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800142a:	4b4e      	ldr	r3, [pc, #312]	; (8001564 <linkTimer+0x144>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b06      	cmp	r3, #6
 8001432:	d118      	bne.n	8001466 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001434:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <linkTimer+0x144>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4b4b      	ldr	r3, [pc, #300]	; (8001568 <linkTimer+0x148>)
 800143c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800143e:	4a49      	ldr	r2, [pc, #292]	; (8001564 <linkTimer+0x144>)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001444:	79fa      	ldrb	r2, [r7, #7]
 8001446:	4949      	ldr	r1, [pc, #292]	; (800156c <linkTimer+0x14c>)
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	3315      	adds	r3, #21
 8001454:	2206      	movs	r2, #6
 8001456:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001458:	4b45      	ldr	r3, [pc, #276]	; (8001570 <linkTimer+0x150>)
 800145a:	f04f 32ff 	mov.w	r2, #4294967295
 800145e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	81fb      	strh	r3, [r7, #14]
 8001464:	e078      	b.n	8001558 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001466:	f000 f909 	bl	800167c <ReturnTimeElapsed>
 800146a:	4603      	mov	r3, r0
 800146c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800146e:	79fa      	ldrb	r2, [r7, #7]
 8001470:	493e      	ldr	r1, [pc, #248]	; (800156c <linkTimer+0x14c>)
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	440b      	add	r3, r1
 800147c:	3308      	adds	r3, #8
 800147e:	6819      	ldr	r1, [r3, #0]
 8001480:	89fb      	ldrh	r3, [r7, #14]
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	4419      	add	r1, r3
 8001486:	4839      	ldr	r0, [pc, #228]	; (800156c <linkTimer+0x14c>)
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4403      	add	r3, r0
 8001492:	3308      	adds	r3, #8
 8001494:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001496:	79fa      	ldrb	r2, [r7, #7]
 8001498:	4934      	ldr	r1, [pc, #208]	; (800156c <linkTimer+0x14c>)
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	440b      	add	r3, r1
 80014a4:	3308      	adds	r3, #8
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80014aa:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <linkTimer+0x144>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4619      	mov	r1, r3
 80014b2:	4a2e      	ldr	r2, [pc, #184]	; (800156c <linkTimer+0x14c>)
 80014b4:	460b      	mov	r3, r1
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	440b      	add	r3, r1
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	3308      	adds	r3, #8
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d337      	bcc.n	8001538 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80014c8:	4b26      	ldr	r3, [pc, #152]	; (8001564 <linkTimer+0x144>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80014ce:	7b7a      	ldrb	r2, [r7, #13]
 80014d0:	4926      	ldr	r1, [pc, #152]	; (800156c <linkTimer+0x14c>)
 80014d2:	4613      	mov	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4413      	add	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	440b      	add	r3, r1
 80014dc:	3315      	adds	r3, #21
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80014e2:	e013      	b.n	800150c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80014e4:	7b7a      	ldrb	r2, [r7, #13]
 80014e6:	4921      	ldr	r1, [pc, #132]	; (800156c <linkTimer+0x14c>)
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	440b      	add	r3, r1
 80014f2:	3315      	adds	r3, #21
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80014f8:	7b7a      	ldrb	r2, [r7, #13]
 80014fa:	491c      	ldr	r1, [pc, #112]	; (800156c <linkTimer+0x14c>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	440b      	add	r3, r1
 8001506:	3315      	adds	r3, #21
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800150c:	7b3b      	ldrb	r3, [r7, #12]
 800150e:	2b06      	cmp	r3, #6
 8001510:	d00b      	beq.n	800152a <linkTimer+0x10a>
 8001512:	7b3a      	ldrb	r2, [r7, #12]
 8001514:	4915      	ldr	r1, [pc, #84]	; (800156c <linkTimer+0x14c>)
 8001516:	4613      	mov	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	440b      	add	r3, r1
 8001520:	3308      	adds	r3, #8
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	429a      	cmp	r2, r3
 8001528:	d2dc      	bcs.n	80014e4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800152a:	7b7a      	ldrb	r2, [r7, #13]
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fecf 	bl	80012d4 <LinkTimerAfter>
 8001536:	e00f      	b.n	8001558 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <linkTimer+0x144>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ff0c 	bl	8001360 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <linkTimer+0x144>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <linkTimer+0x148>)
 8001550:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001552:	4a04      	ldr	r2, [pc, #16]	; (8001564 <linkTimer+0x144>)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001558:	89fb      	ldrh	r3, [r7, #14]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000118 	.word	0x20000118
 8001568:	20000119 	.word	0x20000119
 800156c:	20000088 	.word	0x20000088
 8001570:	2000011c 	.word	0x2000011c

08001574 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	460a      	mov	r2, r1
 800157e:	71fb      	strb	r3, [r7, #7]
 8001580:	4613      	mov	r3, r2
 8001582:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001584:	4b39      	ldr	r3, [pc, #228]	; (800166c <UnlinkTimer+0xf8>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	79fa      	ldrb	r2, [r7, #7]
 800158c:	429a      	cmp	r2, r3
 800158e:	d111      	bne.n	80015b4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001590:	4b36      	ldr	r3, [pc, #216]	; (800166c <UnlinkTimer+0xf8>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4b36      	ldr	r3, [pc, #216]	; (8001670 <UnlinkTimer+0xfc>)
 8001598:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800159a:	79fa      	ldrb	r2, [r7, #7]
 800159c:	4935      	ldr	r1, [pc, #212]	; (8001674 <UnlinkTimer+0x100>)
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	440b      	add	r3, r1
 80015a8:	3315      	adds	r3, #21
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b2f      	ldr	r3, [pc, #188]	; (800166c <UnlinkTimer+0xf8>)
 80015b0:	701a      	strb	r2, [r3, #0]
 80015b2:	e03e      	b.n	8001632 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80015b4:	79fa      	ldrb	r2, [r7, #7]
 80015b6:	492f      	ldr	r1, [pc, #188]	; (8001674 <UnlinkTimer+0x100>)
 80015b8:	4613      	mov	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	440b      	add	r3, r1
 80015c2:	3314      	adds	r3, #20
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80015c8:	79fa      	ldrb	r2, [r7, #7]
 80015ca:	492a      	ldr	r1, [pc, #168]	; (8001674 <UnlinkTimer+0x100>)
 80015cc:	4613      	mov	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	3315      	adds	r3, #21
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80015dc:	79f9      	ldrb	r1, [r7, #7]
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	4824      	ldr	r0, [pc, #144]	; (8001674 <UnlinkTimer+0x100>)
 80015e2:	460b      	mov	r3, r1
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	440b      	add	r3, r1
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4403      	add	r3, r0
 80015ec:	3315      	adds	r3, #21
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b2d8      	uxtb	r0, r3
 80015f2:	4920      	ldr	r1, [pc, #128]	; (8001674 <UnlinkTimer+0x100>)
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	440b      	add	r3, r1
 80015fe:	3315      	adds	r3, #21
 8001600:	4602      	mov	r2, r0
 8001602:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001604:	7bbb      	ldrb	r3, [r7, #14]
 8001606:	2b06      	cmp	r3, #6
 8001608:	d013      	beq.n	8001632 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800160a:	79f9      	ldrb	r1, [r7, #7]
 800160c:	7bba      	ldrb	r2, [r7, #14]
 800160e:	4819      	ldr	r0, [pc, #100]	; (8001674 <UnlinkTimer+0x100>)
 8001610:	460b      	mov	r3, r1
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	440b      	add	r3, r1
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4403      	add	r3, r0
 800161a:	3314      	adds	r3, #20
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	b2d8      	uxtb	r0, r3
 8001620:	4914      	ldr	r1, [pc, #80]	; (8001674 <UnlinkTimer+0x100>)
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	440b      	add	r3, r1
 800162c:	3314      	adds	r3, #20
 800162e:	4602      	mov	r2, r0
 8001630:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001632:	79fa      	ldrb	r2, [r7, #7]
 8001634:	490f      	ldr	r1, [pc, #60]	; (8001674 <UnlinkTimer+0x100>)
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	440b      	add	r3, r1
 8001640:	330c      	adds	r3, #12
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <UnlinkTimer+0xf8>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b06      	cmp	r3, #6
 800164e:	d107      	bne.n	8001660 <UnlinkTimer+0xec>
 8001650:	79bb      	ldrb	r3, [r7, #6]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d104      	bne.n	8001660 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <UnlinkTimer+0x104>)
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	601a      	str	r2, [r3, #0]
  }

  return;
 800165e:	bf00      	nop
 8001660:	bf00      	nop
}
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	20000118 	.word	0x20000118
 8001670:	20000119 	.word	0x20000119
 8001674:	20000088 	.word	0x20000088
 8001678:	2000011c 	.word	0x2000011c

0800167c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <ReturnTimeElapsed+0x70>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800168a:	d026      	beq.n	80016da <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800168c:	f7ff fe02 	bl	8001294 <ReadRtcSsrValue>
 8001690:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <ReturnTimeElapsed+0x70>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	d805      	bhi.n	80016a8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <ReturnTimeElapsed+0x70>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	e00a      	b.n	80016be <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <ReturnTimeElapsed+0x74>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <ReturnTimeElapsed+0x70>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <ReturnTimeElapsed+0x78>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	fb02 f303 	mul.w	r3, r2, r3
 80016ca:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <ReturnTimeElapsed+0x7c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	40d3      	lsrs	r3, r2
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	e001      	b.n	80016de <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	b29b      	uxth	r3, r3
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2000011c 	.word	0x2000011c
 80016f0:	2000024e 	.word	0x2000024e
 80016f4:	2000024d 	.word	0x2000024d
 80016f8:	2000024c 	.word	0x2000024c

080016fc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d108      	bne.n	800171e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800170c:	f7ff fdc2 	bl	8001294 <ReadRtcSsrValue>
 8001710:	4602      	mov	r2, r0
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <RestartWakeupCounter+0xa8>)
 8001714:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001716:	2003      	movs	r0, #3
 8001718:	f001 fd4d 	bl	80031b6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 800171c:	e03e      	b.n	800179c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d803      	bhi.n	800172c <RestartWakeupCounter+0x30>
 8001724:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <RestartWakeupCounter+0xac>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d002      	beq.n	8001732 <RestartWakeupCounter+0x36>
      Value -= 1;
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	3b01      	subs	r3, #1
 8001730:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001732:	bf00      	nop
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <RestartWakeupCounter+0xb0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f7      	beq.n	8001734 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <RestartWakeupCounter+0xb0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <RestartWakeupCounter+0xb0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001758:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <RestartWakeupCounter+0xb4>)
 800175c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001760:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001762:	2003      	movs	r0, #3
 8001764:	f001 fd35 	bl	80031d2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <RestartWakeupCounter+0xb8>)
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	0c1b      	lsrs	r3, r3, #16
 800176e:	041b      	lsls	r3, r3, #16
 8001770:	88fa      	ldrh	r2, [r7, #6]
 8001772:	4910      	ldr	r1, [pc, #64]	; (80017b4 <RestartWakeupCounter+0xb8>)
 8001774:	4313      	orrs	r3, r2
 8001776:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001778:	f7ff fd8c 	bl	8001294 <ReadRtcSsrValue>
 800177c:	4602      	mov	r2, r0
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <RestartWakeupCounter+0xa8>)
 8001780:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <RestartWakeupCounter+0xb0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <RestartWakeupCounter+0xb0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001794:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001796:	f3af 8000 	nop.w
  return ;
 800179a:	bf00      	nop
}
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2000011c 	.word	0x2000011c
 80017a8:	2000024c 	.word	0x2000024c
 80017ac:	20000248 	.word	0x20000248
 80017b0:	58000800 	.word	0x58000800
 80017b4:	40002800 	.word	0x40002800

080017b8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <RescheduleTimerList+0x124>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ca:	d108      	bne.n	80017de <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80017cc:	bf00      	nop
 80017ce:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <RescheduleTimerList+0x128>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f7      	bne.n	80017ce <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80017de:	4b40      	ldr	r3, [pc, #256]	; (80018e0 <RescheduleTimerList+0x128>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	4b3e      	ldr	r3, [pc, #248]	; (80018e0 <RescheduleTimerList+0x128>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017f0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80017f2:	4b3c      	ldr	r3, [pc, #240]	; (80018e4 <RescheduleTimerList+0x12c>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80017f8:	7bfa      	ldrb	r2, [r7, #15]
 80017fa:	493b      	ldr	r1, [pc, #236]	; (80018e8 <RescheduleTimerList+0x130>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	440b      	add	r3, r1
 8001806:	3308      	adds	r3, #8
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800180c:	f7ff ff36 	bl	800167c <ReturnTimeElapsed>
 8001810:	4603      	mov	r3, r0
 8001812:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	429a      	cmp	r2, r3
 800181a:	d205      	bcs.n	8001828 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001820:	4b32      	ldr	r3, [pc, #200]	; (80018ec <RescheduleTimerList+0x134>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e04d      	b.n	80018c4 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	4a31      	ldr	r2, [pc, #196]	; (80018f0 <RescheduleTimerList+0x138>)
 800182c:	8812      	ldrh	r2, [r2, #0]
 800182e:	b292      	uxth	r2, r2
 8001830:	4413      	add	r3, r2
 8001832:	461a      	mov	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4293      	cmp	r3, r2
 8001838:	d906      	bls.n	8001848 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800183a:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <RescheduleTimerList+0x138>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001840:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <RescheduleTimerList+0x134>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	e03d      	b.n	80018c4 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	b29a      	uxth	r2, r3
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001852:	4b26      	ldr	r3, [pc, #152]	; (80018ec <RescheduleTimerList+0x134>)
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001858:	e034      	b.n	80018c4 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800185a:	7bfa      	ldrb	r2, [r7, #15]
 800185c:	4922      	ldr	r1, [pc, #136]	; (80018e8 <RescheduleTimerList+0x130>)
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	440b      	add	r3, r1
 8001868:	3308      	adds	r3, #8
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	429a      	cmp	r2, r3
 8001870:	d20a      	bcs.n	8001888 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	491c      	ldr	r1, [pc, #112]	; (80018e8 <RescheduleTimerList+0x130>)
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	440b      	add	r3, r1
 8001880:	3308      	adds	r3, #8
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	e013      	b.n	80018b0 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	4917      	ldr	r1, [pc, #92]	; (80018e8 <RescheduleTimerList+0x130>)
 800188c:	4613      	mov	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	440b      	add	r3, r1
 8001896:	3308      	adds	r3, #8
 8001898:	6819      	ldr	r1, [r3, #0]
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	1ac9      	subs	r1, r1, r3
 80018a0:	4811      	ldr	r0, [pc, #68]	; (80018e8 <RescheduleTimerList+0x130>)
 80018a2:	4613      	mov	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4403      	add	r3, r0
 80018ac:	3308      	adds	r3, #8
 80018ae:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80018b0:	7bfa      	ldrb	r2, [r7, #15]
 80018b2:	490d      	ldr	r1, [pc, #52]	; (80018e8 <RescheduleTimerList+0x130>)
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	440b      	add	r3, r1
 80018be:	3315      	adds	r3, #21
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d1c7      	bne.n	800185a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80018ca:	89bb      	ldrh	r3, [r7, #12]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff15 	bl	80016fc <RestartWakeupCounter>

  return ;
 80018d2:	bf00      	nop
}
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40002800 	.word	0x40002800
 80018e0:	20000248 	.word	0x20000248
 80018e4:	20000118 	.word	0x20000118
 80018e8:	20000088 	.word	0x20000088
 80018ec:	20000120 	.word	0x20000120
 80018f0:	20000250 	.word	0x20000250

080018f4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018fa:	f3ef 8310 	mrs	r3, PRIMASK
 80018fe:	617b      	str	r3, [r7, #20]
  return(result);
 8001900:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001904:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001906:	4b5e      	ldr	r3, [pc, #376]	; (8001a80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	22ca      	movs	r2, #202	; 0xca
 800190e:	625a      	str	r2, [r3, #36]	; 0x24
 8001910:	4b5b      	ldr	r3, [pc, #364]	; (8001a80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2253      	movs	r2, #83	; 0x53
 8001918:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 800191a:	4b59      	ldr	r3, [pc, #356]	; (8001a80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	4b57      	ldr	r3, [pc, #348]	; (8001a80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800192c:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800192e:	4b55      	ldr	r3, [pc, #340]	; (8001a84 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001936:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800193a:	4953      	ldr	r1, [pc, #332]	; (8001a88 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	440b      	add	r3, r1
 8001946:	330c      	adds	r3, #12
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d170      	bne.n	8001a32 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001950:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001954:	494c      	ldr	r1, [pc, #304]	; (8001a88 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	440b      	add	r3, r1
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001964:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001968:	4947      	ldr	r1, [pc, #284]	; (8001a88 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	440b      	add	r3, r1
 8001974:	3310      	adds	r3, #16
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800197a:	4b44      	ldr	r3, [pc, #272]	; (8001a8c <HW_TS_RTC_Wakeup_Handler+0x198>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d04e      	beq.n	8001a22 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001984:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001988:	493f      	ldr	r1, [pc, #252]	; (8001a88 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	440b      	add	r3, r1
 8001994:	330d      	adds	r3, #13
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b01      	cmp	r3, #1
 800199c:	d125      	bne.n	80019ea <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800199e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019a2:	2101      	movs	r1, #1
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fde5 	bl	8001574 <UnlinkTimer>
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80019b4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019b8:	4933      	ldr	r1, [pc, #204]	; (8001a88 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	440b      	add	r3, r1
 80019c4:	3304      	adds	r3, #4
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019cc:	4611      	mov	r1, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fa46 	bl	8001e60 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80019d4:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	22ca      	movs	r2, #202	; 0xca
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24
 80019de:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2253      	movs	r2, #83	; 0x53
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24
 80019e8:	e013      	b.n	8001a12 <HW_TS_RTC_Wakeup_Handler+0x11e>
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80019f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 f9a7 	bl	8001d4c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80019fe:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	22ca      	movs	r2, #202	; 0xca
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24
 8001a08:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2253      	movs	r2, #83	; 0x53
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001a12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	69b8      	ldr	r0, [r7, #24]
 8001a1c:	f000 faa6 	bl	8001f6c <HW_TS_RTC_Int_AppNot>
 8001a20:	e024      	b.n	8001a6c <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8001a22:	f7ff fec9 	bl	80017b8 <RescheduleTimerList>
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f383 8810 	msr	PRIMASK, r3
 8001a30:	e01c      	b.n	8001a6c <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001a32:	bf00      	nop
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f7      	beq.n	8001a34 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001a58:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001a5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	22ff      	movs	r2, #255	; 0xff
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001a76:	bf00      	nop
}
 8001a78:	3728      	adds	r7, #40	; 0x28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000248 	.word	0x20000248
 8001a84:	20000118 	.word	0x20000118
 8001a88:	20000088 	.word	0x20000088
 8001a8c:	20000120 	.word	0x20000120
 8001a90:	58000800 	.word	0x58000800

08001a94 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001aa0:	4a64      	ldr	r2, [pc, #400]	; (8001c34 <HW_TS_Init+0x1a0>)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001aa6:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <HW_TS_Init+0x1a0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	22ca      	movs	r2, #202	; 0xca
 8001aae:	625a      	str	r2, [r3, #36]	; 0x24
 8001ab0:	4b60      	ldr	r3, [pc, #384]	; (8001c34 <HW_TS_Init+0x1a0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2253      	movs	r2, #83	; 0x53
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001aba:	4b5f      	ldr	r3, [pc, #380]	; (8001c38 <HW_TS_Init+0x1a4>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	4a5e      	ldr	r2, [pc, #376]	; (8001c38 <HW_TS_Init+0x1a4>)
 8001ac0:	f043 0320 	orr.w	r3, r3, #32
 8001ac4:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001ac6:	4b5c      	ldr	r3, [pc, #368]	; (8001c38 <HW_TS_Init+0x1a4>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	f1c3 0304 	rsb	r3, r3, #4
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	4b58      	ldr	r3, [pc, #352]	; (8001c3c <HW_TS_Init+0x1a8>)
 8001ada:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001adc:	4b56      	ldr	r3, [pc, #344]	; (8001c38 <HW_TS_Init+0x1a4>)
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ae4:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001ae8:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	fa92 f2a2 	rbit	r2, r2
 8001af0:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	2a00      	cmp	r2, #0
 8001afa:	d101      	bne.n	8001b00 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001afc:	2220      	movs	r2, #32
 8001afe:	e003      	b.n	8001b08 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	fab2 f282 	clz	r2, r2
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	40d3      	lsrs	r3, r2
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	4b4b      	ldr	r3, [pc, #300]	; (8001c40 <HW_TS_Init+0x1ac>)
 8001b12:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001b14:	4b48      	ldr	r3, [pc, #288]	; (8001c38 <HW_TS_Init+0x1a4>)
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	3301      	adds	r3, #1
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	4b47      	ldr	r3, [pc, #284]	; (8001c44 <HW_TS_Init+0x1b0>)
 8001b26:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001b28:	4b46      	ldr	r3, [pc, #280]	; (8001c44 <HW_TS_Init+0x1b0>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	4a44      	ldr	r2, [pc, #272]	; (8001c40 <HW_TS_Init+0x1ac>)
 8001b30:	7812      	ldrb	r2, [r2, #0]
 8001b32:	fb02 f303 	mul.w	r3, r2, r3
 8001b36:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b3a:	4a40      	ldr	r2, [pc, #256]	; (8001c3c <HW_TS_Init+0x1a8>)
 8001b3c:	7812      	ldrb	r2, [r2, #0]
 8001b3e:	40d3      	lsrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d904      	bls.n	8001b56 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001b4c:	4b3e      	ldr	r3, [pc, #248]	; (8001c48 <HW_TS_Init+0x1b4>)
 8001b4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b52:	801a      	strh	r2, [r3, #0]
 8001b54:	e003      	b.n	8001b5e <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <HW_TS_Init+0x1b4>)
 8001b5c:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001b5e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b62:	f7ff fb85 	bl	8001270 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001b66:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b6a:	f7ff fb6d 	bl	8001248 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d143      	bne.n	8001bfc <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b74:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <HW_TS_Init+0x1b8>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b7a:	4b35      	ldr	r3, [pc, #212]	; (8001c50 <HW_TS_Init+0x1bc>)
 8001b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b80:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	77fb      	strb	r3, [r7, #31]
 8001b86:	e00c      	b.n	8001ba2 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001b88:	7ffa      	ldrb	r2, [r7, #31]
 8001b8a:	4932      	ldr	r1, [pc, #200]	; (8001c54 <HW_TS_Init+0x1c0>)
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	330c      	adds	r3, #12
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001b9c:	7ffb      	ldrb	r3, [r7, #31]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	77fb      	strb	r3, [r7, #31]
 8001ba2:	7ffb      	ldrb	r3, [r7, #31]
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	d9ef      	bls.n	8001b88 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <HW_TS_Init+0x1c4>)
 8001baa:	2206      	movs	r2, #6
 8001bac:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001bae:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <HW_TS_Init+0x1a0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <HW_TS_Init+0x1a0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bc0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <HW_TS_Init+0x1a0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HW_TS_Init+0x1a0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001bd6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001bd8:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HW_TS_Init+0x1c8>)
 8001bda:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bde:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001be0:	2003      	movs	r0, #3
 8001be2:	f001 faf6 	bl	80031d2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <HW_TS_Init+0x1a0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <HW_TS_Init+0x1a0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	e00a      	b.n	8001c12 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HW_TS_Init+0x1a0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d002      	beq.n	8001c12 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f001 fad2 	bl	80031b6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HW_TS_Init+0x1a0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	22ff      	movs	r2, #255	; 0xff
 8001c1a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2106      	movs	r1, #6
 8001c20:	2003      	movs	r0, #3
 8001c22:	f001 fa8e 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001c26:	2003      	movs	r0, #3
 8001c28:	f001 faa5 	bl	8003176 <HAL_NVIC_EnableIRQ>

  return;
 8001c2c:	bf00      	nop
}
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000248 	.word	0x20000248
 8001c38:	40002800 	.word	0x40002800
 8001c3c:	2000024c 	.word	0x2000024c
 8001c40:	2000024d 	.word	0x2000024d
 8001c44:	2000024e 	.word	0x2000024e
 8001c48:	20000250 	.word	0x20000250
 8001c4c:	20000120 	.word	0x20000120
 8001c50:	2000011c 	.word	0x2000011c
 8001c54:	20000088 	.word	0x20000088
 8001c58:	20000118 	.word	0x20000118
 8001c5c:	58000800 	.word	0x58000800

08001c60 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b08b      	sub	sp, #44	; 0x2c
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c76:	f3ef 8310 	mrs	r3, PRIMASK
 8001c7a:	61fb      	str	r3, [r7, #28]
  return(result);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001c7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c80:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001c82:	e004      	b.n	8001c8e <HW_TS_Create+0x2e>
  {
    loop++;
 8001c84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c88:	3301      	adds	r3, #1
 8001c8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001c8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c92:	2b05      	cmp	r3, #5
 8001c94:	d80c      	bhi.n	8001cb0 <HW_TS_Create+0x50>
 8001c96:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001c9a:	492b      	ldr	r1, [pc, #172]	; (8001d48 <HW_TS_Create+0xe8>)
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	440b      	add	r3, r1
 8001ca6:	330c      	adds	r3, #12
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1e9      	bne.n	8001c84 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001cb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cb4:	2b06      	cmp	r3, #6
 8001cb6:	d037      	beq.n	8001d28 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001cb8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001cbc:	4922      	ldr	r1, [pc, #136]	; (8001d48 <HW_TS_Create+0xe8>)
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	440b      	add	r3, r1
 8001cc8:	330c      	adds	r3, #12
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001cd8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001cdc:	491a      	ldr	r1, [pc, #104]	; (8001d48 <HW_TS_Create+0xe8>)
 8001cde:	4613      	mov	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	440b      	add	r3, r1
 8001ce8:	3310      	adds	r3, #16
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001cee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001cf2:	4915      	ldr	r1, [pc, #84]	; (8001d48 <HW_TS_Create+0xe8>)
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	440b      	add	r3, r1
 8001cfe:	330d      	adds	r3, #13
 8001d00:	79fa      	ldrb	r2, [r7, #7]
 8001d02:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001d04:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001d08:	490f      	ldr	r1, [pc, #60]	; (8001d48 <HW_TS_Create+0xe8>)
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	440b      	add	r3, r1
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001d1e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d26:	e007      	b.n	8001d38 <HW_TS_Create+0xd8>
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	372c      	adds	r7, #44	; 0x2c
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	20000088 	.word	0x20000088

08001d4c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d56:	f3ef 8310 	mrs	r3, PRIMASK
 8001d5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001d5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d60:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001d62:	2003      	movs	r0, #3
 8001d64:	f001 fa15 	bl	8003192 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001d68:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <HW_TS_Stop+0xfc>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	22ca      	movs	r2, #202	; 0xca
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24
 8001d72:	4b35      	ldr	r3, [pc, #212]	; (8001e48 <HW_TS_Stop+0xfc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2253      	movs	r2, #83	; 0x53
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001d7c:	79fa      	ldrb	r2, [r7, #7]
 8001d7e:	4933      	ldr	r1, [pc, #204]	; (8001e4c <HW_TS_Stop+0x100>)
 8001d80:	4613      	mov	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	440b      	add	r3, r1
 8001d8a:	330c      	adds	r3, #12
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d148      	bne.n	8001e26 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fbeb 	bl	8001574 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001d9e:	4b2c      	ldr	r3, [pc, #176]	; (8001e50 <HW_TS_Stop+0x104>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001da4:	7cfb      	ldrb	r3, [r7, #19]
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d135      	bne.n	8001e16 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001daa:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <HW_TS_Stop+0x108>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db6:	d108      	bne.n	8001dca <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001db8:	bf00      	nop
 8001dba:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <HW_TS_Stop+0xfc>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f7      	bne.n	8001dba <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001dca:	4b1f      	ldr	r3, [pc, #124]	; (8001e48 <HW_TS_Stop+0xfc>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <HW_TS_Stop+0xfc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ddc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001dde:	bf00      	nop
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HW_TS_Stop+0xfc>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f7      	beq.n	8001de0 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001df0:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <HW_TS_Stop+0xfc>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <HW_TS_Stop+0xfc>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001e04:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HW_TS_Stop+0x10c>)
 8001e08:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e0c:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001e0e:	2003      	movs	r0, #3
 8001e10:	f001 f9df 	bl	80031d2 <HAL_NVIC_ClearPendingIRQ>
 8001e14:	e007      	b.n	8001e26 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HW_TS_Stop+0x110>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	7cfa      	ldrb	r2, [r7, #19]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d001      	beq.n	8001e26 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8001e22:	f7ff fcc9 	bl	80017b8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HW_TS_Stop+0xfc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	22ff      	movs	r2, #255	; 0xff
 8001e2e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001e30:	2003      	movs	r0, #3
 8001e32:	f001 f9a0 	bl	8003176 <HAL_NVIC_EnableIRQ>
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001e40:	bf00      	nop
}
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000248 	.word	0x20000248
 8001e4c:	20000088 	.word	0x20000088
 8001e50:	20000118 	.word	0x20000118
 8001e54:	40002800 	.word	0x40002800
 8001e58:	58000800 	.word	0x58000800
 8001e5c:	20000119 	.word	0x20000119

08001e60 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	6039      	str	r1, [r7, #0]
 8001e6a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001e6c:	79fa      	ldrb	r2, [r7, #7]
 8001e6e:	493b      	ldr	r1, [pc, #236]	; (8001f5c <HW_TS_Start+0xfc>)
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	440b      	add	r3, r1
 8001e7a:	330c      	adds	r3, #12
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d103      	bne.n	8001e8c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff ff60 	bl	8001d4c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8001e90:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e92:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e96:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f001 f97a 	bl	8003192 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001e9e:	4b30      	ldr	r3, [pc, #192]	; (8001f60 <HW_TS_Start+0x100>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	22ca      	movs	r2, #202	; 0xca
 8001ea6:	625a      	str	r2, [r3, #36]	; 0x24
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <HW_TS_Start+0x100>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2253      	movs	r2, #83	; 0x53
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001eb2:	79fa      	ldrb	r2, [r7, #7]
 8001eb4:	4929      	ldr	r1, [pc, #164]	; (8001f5c <HW_TS_Start+0xfc>)
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	440b      	add	r3, r1
 8001ec0:	330c      	adds	r3, #12
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001ec6:	79fa      	ldrb	r2, [r7, #7]
 8001ec8:	4924      	ldr	r1, [pc, #144]	; (8001f5c <HW_TS_Start+0xfc>)
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3308      	adds	r3, #8
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001eda:	79fa      	ldrb	r2, [r7, #7]
 8001edc:	491f      	ldr	r1, [pc, #124]	; (8001f5c <HW_TS_Start+0xfc>)
 8001ede:	4613      	mov	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	440b      	add	r3, r1
 8001ee8:	3304      	adds	r3, #4
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fa95 	bl	8001420 <linkTimer>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HW_TS_Start+0x104>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HW_TS_Start+0x108>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	7c7a      	ldrb	r2, [r7, #17]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d002      	beq.n	8001f12 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8001f0c:	f7ff fc54 	bl	80017b8 <RescheduleTimerList>
 8001f10:	e013      	b.n	8001f3a <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001f12:	79fa      	ldrb	r2, [r7, #7]
 8001f14:	4911      	ldr	r1, [pc, #68]	; (8001f5c <HW_TS_Start+0xfc>)
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	3308      	adds	r3, #8
 8001f22:	6819      	ldr	r1, [r3, #0]
 8001f24:	8a7b      	ldrh	r3, [r7, #18]
 8001f26:	79fa      	ldrb	r2, [r7, #7]
 8001f28:	1ac9      	subs	r1, r1, r3
 8001f2a:	480c      	ldr	r0, [pc, #48]	; (8001f5c <HW_TS_Start+0xfc>)
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4403      	add	r3, r0
 8001f36:	3308      	adds	r3, #8
 8001f38:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HW_TS_Start+0x100>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	22ff      	movs	r2, #255	; 0xff
 8001f42:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001f44:	2003      	movs	r0, #3
 8001f46:	f001 f916 	bl	8003176 <HAL_NVIC_EnableIRQ>
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001f54:	bf00      	nop
}
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000088 	.word	0x20000088
 8001f60:	20000248 	.word	0x20000248
 8001f64:	20000118 	.word	0x20000118
 8001f68:	20000119 	.word	0x20000119

08001f6c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	460b      	mov	r3, r1
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4798      	blx	r3

  return;
 8001f7e:	bf00      	nop
}
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	4603      	mov	r3, r0
 8001f94:	73fb      	strb	r3, [r7, #15]
 8001f96:	4613      	mov	r3, r2
 8001f98:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <HW_UART_Receive_IT+0x1e>
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d00d      	beq.n	8001fc0 <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8001fa4:	e019      	b.n	8001fda <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 8001fa6:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <HW_UART_Receive_IT+0x5c>)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HW_UART_Receive_IT+0x60>)
 8001fae:	4a0f      	ldr	r2, [pc, #60]	; (8001fec <HW_UART_Receive_IT+0x64>)
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	89bb      	ldrh	r3, [r7, #12]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	480b      	ldr	r0, [pc, #44]	; (8001fe8 <HW_UART_Receive_IT+0x60>)
 8001fba:	f003 ffff 	bl	8005fbc <HAL_UART_Receive_IT>
            break;
 8001fbe:	e00c      	b.n	8001fda <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 8001fc0:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <HW_UART_Receive_IT+0x68>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HW_UART_Receive_IT+0x6c>)
 8001fc8:	4a0b      	ldr	r2, [pc, #44]	; (8001ff8 <HW_UART_Receive_IT+0x70>)
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	89bb      	ldrh	r3, [r7, #12]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	4808      	ldr	r0, [pc, #32]	; (8001ff4 <HW_UART_Receive_IT+0x6c>)
 8001fd4:	f003 fff2 	bl	8005fbc <HAL_UART_Receive_IT>
            break;
 8001fd8:	bf00      	nop
    }

    return;
 8001fda:	bf00      	nop
}
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20006cb4 	.word	0x20006cb4
 8001fe8:	20006e1c 	.word	0x20006e1c
 8001fec:	40013800 	.word	0x40013800
 8001ff0:	20006cb8 	.word	0x20006cb8
 8001ff4:	20006d30 	.word	0x20006d30
 8001ff8:	40008000 	.word	0x40008000

08001ffc <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	4603      	mov	r3, r0
 8002008:	73fb      	strb	r3, [r7, #15]
 800200a:	4613      	mov	r3, r2
 800200c:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d002      	beq.n	800201a <HW_UART_Transmit_IT+0x1e>
 8002014:	2b02      	cmp	r3, #2
 8002016:	d00d      	beq.n	8002034 <HW_UART_Transmit_IT+0x38>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8002018:	e019      	b.n	800204e <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(huart1, USART1);
 800201a:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <HW_UART_Transmit_IT+0x5c>)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4b0e      	ldr	r3, [pc, #56]	; (800205c <HW_UART_Transmit_IT+0x60>)
 8002022:	4a0f      	ldr	r2, [pc, #60]	; (8002060 <HW_UART_Transmit_IT+0x64>)
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	89bb      	ldrh	r3, [r7, #12]
 8002028:	461a      	mov	r2, r3
 800202a:	68b9      	ldr	r1, [r7, #8]
 800202c:	480b      	ldr	r0, [pc, #44]	; (800205c <HW_UART_Transmit_IT+0x60>)
 800202e:	f003 ff41 	bl	8005eb4 <HAL_UART_Transmit_IT>
            break;
 8002032:	e00c      	b.n	800204e <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(hlpuart1, LPUART1);
 8002034:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <HW_UART_Transmit_IT+0x68>)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HW_UART_Transmit_IT+0x6c>)
 800203c:	4a0b      	ldr	r2, [pc, #44]	; (800206c <HW_UART_Transmit_IT+0x70>)
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	89bb      	ldrh	r3, [r7, #12]
 8002042:	461a      	mov	r2, r3
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	4808      	ldr	r0, [pc, #32]	; (8002068 <HW_UART_Transmit_IT+0x6c>)
 8002048:	f003 ff34 	bl	8005eb4 <HAL_UART_Transmit_IT>
            break;
 800204c:	bf00      	nop
    }

    return;
 800204e:	bf00      	nop
}
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20006cbc 	.word	0x20006cbc
 800205c:	20006e1c 	.word	0x20006e1c
 8002060:	40013800 	.word	0x40013800
 8002064:	20006cb0 	.word	0x20006cb0
 8002068:	20006d30 	.word	0x20006d30
 800206c:	40008000 	.word	0x40008000

08002070 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	4603      	mov	r3, r0
 800207c:	73fb      	strb	r3, [r7, #15]
 800207e:	4613      	mov	r3, r2
 8002080:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8002086:	2300      	movs	r3, #0
 8002088:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d002      	beq.n	8002096 <HW_UART_Transmit_DMA+0x26>
 8002090:	2b02      	cmp	r3, #2
 8002092:	d00f      	beq.n	80020b4 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002094:	e01d      	b.n	80020d2 <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 8002096:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <HW_UART_Transmit_DMA+0xa4>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 800209c:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HW_UART_Transmit_DMA+0xa8>)
 800209e:	4a1f      	ldr	r2, [pc, #124]	; (800211c <HW_UART_Transmit_DMA+0xac>)
 80020a0:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80020a2:	89bb      	ldrh	r3, [r7, #12]
 80020a4:	461a      	mov	r2, r3
 80020a6:	68b9      	ldr	r1, [r7, #8]
 80020a8:	481b      	ldr	r0, [pc, #108]	; (8002118 <HW_UART_Transmit_DMA+0xa8>)
 80020aa:	f004 f85f 	bl	800616c <HAL_UART_Transmit_DMA>
 80020ae:	4603      	mov	r3, r0
 80020b0:	75fb      	strb	r3, [r7, #23]
            break;
 80020b2:	e00e      	b.n	80020d2 <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 80020b4:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <HW_UART_Transmit_DMA+0xb0>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <HW_UART_Transmit_DMA+0xb4>)
 80020bc:	4a1a      	ldr	r2, [pc, #104]	; (8002128 <HW_UART_Transmit_DMA+0xb8>)
 80020be:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 80020c0:	89bb      	ldrh	r3, [r7, #12]
 80020c2:	461a      	mov	r2, r3
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	4817      	ldr	r0, [pc, #92]	; (8002124 <HW_UART_Transmit_DMA+0xb4>)
 80020c8:	f004 f850 	bl	800616c <HAL_UART_Transmit_DMA>
 80020cc:	4603      	mov	r3, r0
 80020ce:	75fb      	strb	r3, [r7, #23]
            break;
 80020d0:	bf00      	nop
    }

    switch (hal_status)
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d817      	bhi.n	8002108 <HW_UART_Transmit_DMA+0x98>
 80020d8:	a201      	add	r2, pc, #4	; (adr r2, 80020e0 <HW_UART_Transmit_DMA+0x70>)
 80020da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020de:	bf00      	nop
 80020e0:	080020f1 	.word	0x080020f1
 80020e4:	080020f7 	.word	0x080020f7
 80020e8:	080020fd 	.word	0x080020fd
 80020ec:	08002103 	.word	0x08002103
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80020f0:	2300      	movs	r3, #0
 80020f2:	75bb      	strb	r3, [r7, #22]
            break;
 80020f4:	e009      	b.n	800210a <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80020f6:	2301      	movs	r3, #1
 80020f8:	75bb      	strb	r3, [r7, #22]
            break;
 80020fa:	e006      	b.n	800210a <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80020fc:	2302      	movs	r3, #2
 80020fe:	75bb      	strb	r3, [r7, #22]
            break;
 8002100:	e003      	b.n	800210a <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002102:	2303      	movs	r3, #3
 8002104:	75bb      	strb	r3, [r7, #22]
            break;
 8002106:	e000      	b.n	800210a <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 8002108:	bf00      	nop
    }

    return hw_status;
 800210a:	7dbb      	ldrb	r3, [r7, #22]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20006cbc 	.word	0x20006cbc
 8002118:	20006e1c 	.word	0x20006e1c
 800211c:	40013800 	.word	0x40013800
 8002120:	20006cb0 	.word	0x20006cb0
 8002124:	20006d30 	.word	0x20006d30
 8002128:	40008000 	.word	0x40008000

0800212c <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <HAL_UART_RxCpltCallback+0x48>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00b      	beq.n	8002156 <HAL_UART_RxCpltCallback+0x2a>
 800213e:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <HAL_UART_RxCpltCallback+0x4c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d000      	beq.n	8002146 <HAL_UART_RxCpltCallback+0x1a>
            }
            break;
#endif

        default:
            break;
 8002144:	e012      	b.n	800216c <HAL_UART_RxCpltCallback+0x40>
            if(HW_huart1RxCb)
 8002146:	4b0d      	ldr	r3, [pc, #52]	; (800217c <HAL_UART_RxCpltCallback+0x50>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <HAL_UART_RxCpltCallback+0x3a>
                HW_huart1RxCb();
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_UART_RxCpltCallback+0x50>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4798      	blx	r3
            break;
 8002154:	e007      	b.n	8002166 <HAL_UART_RxCpltCallback+0x3a>
            if(HW_hlpuart1RxCb)
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_UART_RxCpltCallback+0x54>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <HAL_UART_RxCpltCallback+0x3e>
                HW_hlpuart1RxCb();
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <HAL_UART_RxCpltCallback+0x54>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4798      	blx	r3
            break;
 8002164:	e001      	b.n	800216a <HAL_UART_RxCpltCallback+0x3e>
            break;
 8002166:	bf00      	nop
 8002168:	e000      	b.n	800216c <HAL_UART_RxCpltCallback+0x40>
            break;
 800216a:	bf00      	nop
    }

    return;
 800216c:	bf00      	nop
}
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40008000 	.word	0x40008000
 8002178:	40013800 	.word	0x40013800
 800217c:	20006cb4 	.word	0x20006cb4
 8002180:	20006cb8 	.word	0x20006cb8

08002184 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <HAL_UART_TxCpltCallback+0x48>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00b      	beq.n	80021ae <HAL_UART_TxCpltCallback+0x2a>
 8002196:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <HAL_UART_TxCpltCallback+0x4c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d000      	beq.n	800219e <HAL_UART_TxCpltCallback+0x1a>
            }
            break;
#endif

        default:
            break;
 800219c:	e012      	b.n	80021c4 <HAL_UART_TxCpltCallback+0x40>
            if(HW_huart1TxCb)
 800219e:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <HAL_UART_TxCpltCallback+0x50>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_UART_TxCpltCallback+0x3a>
                HW_huart1TxCb();
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_UART_TxCpltCallback+0x50>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4798      	blx	r3
            break;
 80021ac:	e007      	b.n	80021be <HAL_UART_TxCpltCallback+0x3a>
            if(HW_hlpuart1TxCb)
 80021ae:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <HAL_UART_TxCpltCallback+0x54>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_UART_TxCpltCallback+0x3e>
                HW_hlpuart1TxCb();
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <HAL_UART_TxCpltCallback+0x54>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4798      	blx	r3
            break;
 80021bc:	e001      	b.n	80021c2 <HAL_UART_TxCpltCallback+0x3e>
            break;
 80021be:	bf00      	nop
 80021c0:	e000      	b.n	80021c4 <HAL_UART_TxCpltCallback+0x40>
            break;
 80021c2:	bf00      	nop
    }

    return;
 80021c4:	bf00      	nop
}
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40008000 	.word	0x40008000
 80021d0:	40013800 	.word	0x40013800
 80021d4:	20006cbc 	.word	0x20006cbc
 80021d8:	20006cb0 	.word	0x20006cb0

080021dc <LL_RCC_LSE_SetDriveCapability>:
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80021e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ec:	f023 0218 	bic.w	r2, r3, #24
 80021f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800220c:	f000 fe1c 	bl	8002e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002210:	f000 f818 	bl	8002244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002214:	f7ff f80d 	bl	8001232 <MX_GPIO_Init>
  MX_DMA_Init();
 8002218:	f7fe ffcb 	bl	80011b2 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800221c:	f000 fc78 	bl	8002b10 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8002220:	f000 f8d8 	bl	80023d4 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8002224:	f000 fcc0 	bl	8002ba8 <MX_USART1_UART_Init>
  MX_RF_Init();
 8002228:	f000 f8a2 	bl	8002370 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800222c:	f008 ffb2 	bl	800b194 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002230:	f7fe ff8a 	bl	8001148 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002234:	f008 ffe2 	bl	800b1fc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	f00e fede 	bl	8010ffc <UTIL_SEQ_Run>
 8002240:	e7fa      	b.n	8002238 <main+0x30>
	...

08002244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b0ae      	sub	sp, #184	; 0xb8
 8002248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800224a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800224e:	2248      	movs	r2, #72	; 0x48
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f00f f837 	bl	80112c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002258:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
 8002268:	615a      	str	r2, [r3, #20]
 800226a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	2250      	movs	r2, #80	; 0x50
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f00f f827 	bl	80112c6 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002278:	f001 fc22 	bl	8003ac0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800227c:	2000      	movs	r0, #0
 800227e:	f7ff ffad 	bl	80021dc <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002282:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <SystemClock_Config+0xfc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800228a:	4a2d      	ldr	r2, [pc, #180]	; (8002340 <SystemClock_Config+0xfc>)
 800228c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <SystemClock_Config+0xfc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800229e:	2307      	movs	r3, #7
 80022a0:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022a6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80022a8:	2301      	movs	r3, #1
 80022aa:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022b2:	2340      	movs	r3, #64	; 0x40
 80022b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022c2:	4618      	mov	r0, r3
 80022c4:	f001 ff9c 	bl	8004200 <HAL_RCC_OscConfig>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80022ce:	f000 f84b 	bl	8002368 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80022d2:	236f      	movs	r3, #111	; 0x6f
 80022d4:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80022d6:	2302      	movs	r3, #2
 80022d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022da:	2300      	movs	r3, #0
 80022dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022de:	2300      	movs	r3, #0
 80022e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022e2:	2300      	movs	r3, #0
 80022e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80022e6:	2300      	movs	r3, #0
 80022e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80022ea:	2300      	movs	r3, #0
 80022ec:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80022ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022f2:	2101      	movs	r1, #1
 80022f4:	4618      	mov	r0, r3
 80022f6:	f002 fb0f 	bl	8004918 <HAL_RCC_ClockConfig>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002300:	f000 f832 	bl	8002368 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002304:	f643 0303 	movw	r3, #14339	; 0x3803
 8002308:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002316:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002318:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800231c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800231e:	2300      	movs	r3, #0
 8002320:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002322:	2310      	movs	r3, #16
 8002324:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	4618      	mov	r0, r3
 800232a:	f002 ff66 	bl	80051fa <HAL_RCCEx_PeriphCLKConfig>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002334:	f000 f818 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002338:	bf00      	nop
 800233a:	37b8      	adds	r7, #184	; 0xb8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	58000400 	.word	0x58000400

08002344 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d101      	bne.n	800235a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002356:	f000 fd97 	bl	8002e88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40014800 	.word	0x40014800

08002368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800236c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800236e:	e7fe      	b.n	800236e <Error_Handler+0x6>

08002370 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0

}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800238e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002396:	bf00      	nop
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80023a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80023b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4013      	ands	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023c4:	68fb      	ldr	r3, [r7, #12]
}
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <MX_RTC_Init+0x4c>)
 80023da:	4a12      	ldr	r2, [pc, #72]	; (8002424 <MX_RTC_Init+0x50>)
 80023dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <MX_RTC_Init+0x4c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <MX_RTC_Init+0x4c>)
 80023e6:	220f      	movs	r2, #15
 80023e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <MX_RTC_Init+0x4c>)
 80023ec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80023f0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <MX_RTC_Init+0x4c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <MX_RTC_Init+0x4c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80023fe:	4b08      	ldr	r3, [pc, #32]	; (8002420 <MX_RTC_Init+0x4c>)
 8002400:	2200      	movs	r2, #0
 8002402:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <MX_RTC_Init+0x4c>)
 8002406:	2200      	movs	r2, #0
 8002408:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800240a:	4805      	ldr	r0, [pc, #20]	; (8002420 <MX_RTC_Init+0x4c>)
 800240c:	f003 f97b 	bl	8005706 <HAL_RTC_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002416:	f7ff ffa7 	bl	8002368 <Error_Handler>
  }

}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20006cc0 	.word	0x20006cc0
 8002424:	40002800 	.word	0x40002800

08002428 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a06      	ldr	r2, [pc, #24]	; (8002450 <HAL_RTC_MspInit+0x28>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d105      	bne.n	8002446 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800243a:	f7ff ffa0 	bl	800237e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800243e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002442:	f7ff ffad 	bl	80023a0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40002800 	.word	0x40002800

08002454 <LL_AHB3_GRP1_EnableClock>:
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800245c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002460:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002462:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4313      	orrs	r3, r2
 800246a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800246c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002470:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4013      	ands	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002478:	68fb      	ldr	r3, [r7, #12]
}
 800247a:	bf00      	nop
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800248a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800248e:	f7ff ffe1 	bl	8002454 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	210f      	movs	r1, #15
 8002496:	f06f 0001 	mvn.w	r0, #1
 800249a:	f000 fe52 	bl	8003142 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2105      	movs	r1, #5
 80024a2:	202e      	movs	r0, #46	; 0x2e
 80024a4:	f000 fe4d 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80024a8:	202e      	movs	r0, #46	; 0x2e
 80024aa:	f000 fe64 	bl	8003176 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	210f      	movs	r1, #15
 80024b2:	202c      	movs	r0, #44	; 0x2c
 80024b4:	f000 fe45 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 80024b8:	2200      	movs	r2, #0
 80024ba:	210f      	movs	r1, #15
 80024bc:	202d      	movs	r0, #45	; 0x2d
 80024be:	f000 fe40 	bl	8003142 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b085      	sub	sp, #20
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80024ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4313      	orrs	r3, r2
 80024dc:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80024de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4013      	ands	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024ea:	68fb      	ldr	r3, [r7, #12]
}
 80024ec:	bf00      	nop
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08c      	sub	sp, #48	; 0x30
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8002508:	2200      	movs	r2, #0
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	201a      	movs	r0, #26
 800250e:	f000 fe18 	bl	8003142 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002512:	201a      	movs	r0, #26
 8002514:	f000 fe2f 	bl	8003176 <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002518:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800251c:	f7ff ffd3 	bl	80024c6 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002520:	f107 0208 	add.w	r2, r7, #8
 8002524:	f107 030c 	add.w	r3, r7, #12
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f002 fbde 	bl	8004cec <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002530:	f002 fbc6 	bl	8004cc0 <HAL_RCC_GetPCLK2Freq>
 8002534:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002538:	4a12      	ldr	r2, [pc, #72]	; (8002584 <HAL_InitTick+0x8c>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	0c9b      	lsrs	r3, r3, #18
 8002540:	3b01      	subs	r3, #1
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002544:	4b10      	ldr	r3, [pc, #64]	; (8002588 <HAL_InitTick+0x90>)
 8002546:	4a11      	ldr	r2, [pc, #68]	; (800258c <HAL_InitTick+0x94>)
 8002548:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800254a:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <HAL_InitTick+0x90>)
 800254c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002550:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002552:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <HAL_InitTick+0x90>)
 8002554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002556:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_InitTick+0x90>)
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255e:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_InitTick+0x90>)
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002564:	4808      	ldr	r0, [pc, #32]	; (8002588 <HAL_InitTick+0x90>)
 8002566:	f003 f9bc 	bl	80058e2 <HAL_TIM_Base_Init>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d104      	bne.n	800257a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002570:	4805      	ldr	r0, [pc, #20]	; (8002588 <HAL_InitTick+0x90>)
 8002572:	f003 fa17 	bl	80059a4 <HAL_TIM_Base_Start_IT>
 8002576:	4603      	mov	r3, r0
 8002578:	e000      	b.n	800257c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
}
 800257c:	4618      	mov	r0, r3
 800257e:	3730      	adds	r7, #48	; 0x30
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	431bde83 	.word	0x431bde83
 8002588:	20006ce4 	.word	0x20006ce4
 800258c:	40014800 	.word	0x40014800

08002590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002594:	e7fe      	b.n	8002594 <NMI_Handler+0x4>

08002596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800259a:	e7fe      	b.n	800259a <HardFault_Handler+0x4>

0800259c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <MemManage_Handler+0x4>

080025a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025a6:	e7fe      	b.n	80025a6 <BusFault_Handler+0x4>

080025a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ac:	e7fe      	b.n	80025ac <UsageFault_Handler+0x4>

080025ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <DMA1_Channel4_IRQHandler+0x10>)
 80025c2:	f000 ff97 	bl	80034f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20006ea8 	.word	0x20006ea8

080025d0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80025d4:	4802      	ldr	r0, [pc, #8]	; (80025e0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80025d6:	f003 fa33 	bl	8005a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20006ce4 	.word	0x20006ce4

080025e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <USART1_IRQHandler+0x10>)
 80025ea:	f003 fe3f 	bl	800626c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20006e1c 	.word	0x20006e1c

080025f8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80025fc:	4802      	ldr	r0, [pc, #8]	; (8002608 <LPUART1_IRQHandler+0x10>)
 80025fe:	f003 fe35 	bl	800626c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20006d30 	.word	0x20006d30

0800260c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002610:	f001 fa32 	bl	8003a78 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}

08002618 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <DMA2_Channel4_IRQHandler+0x10>)
 800261e:	f000 ff69 	bl	80034f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20006dbc 	.word	0x20006dbc

0800262c <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8002630:	f7ff f960 	bl	80018f4 <HW_TS_RTC_Wakeup_Handler>
}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}

08002638 <IPCC_C1_TX_IRQHandler>:
void IPCC_C1_TX_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 800263c:	f00e fb0a 	bl	8010c54 <HW_IPCC_Tx_Handler>
  return;
 8002640:	bf00      	nop
}
 8002642:	bd80      	pop	{r7, pc}

08002644 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8002648:	f00e faaa 	bl	8010ba0 <HW_IPCC_Rx_Handler>
  return;
 800264c:	bf00      	nop
}
 800264e:	bd80      	pop	{r7, pc}

08002650 <logRegion>:
 *
 * @returns  String with a log level color value.
 */
static inline uint16_t logRegion(char *aLogString, uint16_t aMaxSize,
        appliLogRegion_t aLogRegion)
{
 8002650:	b5b0      	push	{r4, r5, r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
 800265c:	4613      	mov	r3, r2
 800265e:	707b      	strb	r3, [r7, #1]
  char logRegionString[30U];

  switch (aLogRegion)
 8002660:	787b      	ldrb	r3, [r7, #1]
 8002662:	3b01      	subs	r3, #1
 8002664:	2b04      	cmp	r3, #4
 8002666:	d83e      	bhi.n	80026e6 <logRegion+0x96>
 8002668:	a201      	add	r2, pc, #4	; (adr r2, 8002670 <logRegion+0x20>)
 800266a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266e:	bf00      	nop
 8002670:	08002685 	.word	0x08002685
 8002674:	08002699 	.word	0x08002699
 8002678:	080026ad 	.word	0x080026ad
 800267c:	080026bf 	.word	0x080026bf
 8002680:	080026d3 	.word	0x080026d3
  {
    case APPLI_LOG_REGION_GENERAL:
      strcpy(logRegionString, "[M4 APPLICATION]");
 8002684:	f107 0308 	add.w	r3, r7, #8
 8002688:	4a22      	ldr	r2, [pc, #136]	; (8002714 <logRegion+0xc4>)
 800268a:	461c      	mov	r4, r3
 800268c:	4615      	mov	r5, r2
 800268e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002692:	682b      	ldr	r3, [r5, #0]
 8002694:	7023      	strb	r3, [r4, #0]
      break;
 8002696:	e02f      	b.n	80026f8 <logRegion+0xa8>
    case APPLI_LOG_REGION_OPENTHREAD_API:
      strcpy(logRegionString, "[M4 OPENTHREAD API]");
 8002698:	f107 0308 	add.w	r3, r7, #8
 800269c:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <logRegion+0xc8>)
 800269e:	461c      	mov	r4, r3
 80026a0:	4615      	mov	r5, r2
 80026a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026a6:	682b      	ldr	r3, [r5, #0]
 80026a8:	6023      	str	r3, [r4, #0]
      break;
 80026aa:	e025      	b.n	80026f8 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_LINK:
      strcpy(logRegionString, "[M4 LINK API]");
 80026ac:	f107 0308 	add.w	r3, r7, #8
 80026b0:	4a1a      	ldr	r2, [pc, #104]	; (800271c <logRegion+0xcc>)
 80026b2:	461c      	mov	r4, r3
 80026b4:	4613      	mov	r3, r2
 80026b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026b8:	c407      	stmia	r4!, {r0, r1, r2}
 80026ba:	8023      	strh	r3, [r4, #0]
      break;
 80026bc:	e01c      	b.n	80026f8 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_INSTANCE:
      strcpy(logRegionString, "[M4 INSTANCE API]");
 80026be:	f107 0308 	add.w	r3, r7, #8
 80026c2:	4a17      	ldr	r2, [pc, #92]	; (8002720 <logRegion+0xd0>)
 80026c4:	461c      	mov	r4, r3
 80026c6:	4615      	mov	r5, r2
 80026c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026cc:	682b      	ldr	r3, [r5, #0]
 80026ce:	8023      	strh	r3, [r4, #0]
      break;
 80026d0:	e012      	b.n	80026f8 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_MESSAGE:
      strcpy(logRegionString, "[M4 MESSAGE API]");
 80026d2:	f107 0308 	add.w	r3, r7, #8
 80026d6:	4a13      	ldr	r2, [pc, #76]	; (8002724 <logRegion+0xd4>)
 80026d8:	461c      	mov	r4, r3
 80026da:	4615      	mov	r5, r2
 80026dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026e0:	682b      	ldr	r3, [r5, #0]
 80026e2:	7023      	strb	r3, [r4, #0]
      break;
 80026e4:	e008      	b.n	80026f8 <logRegion+0xa8>
    default:
      strcpy(logRegionString, "[M4]");
 80026e6:	f107 0308 	add.w	r3, r7, #8
 80026ea:	4a0f      	ldr	r2, [pc, #60]	; (8002728 <logRegion+0xd8>)
 80026ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026f0:	6018      	str	r0, [r3, #0]
 80026f2:	3304      	adds	r3, #4
 80026f4:	7019      	strb	r1, [r3, #0]
      break;
 80026f6:	bf00      	nop
  }

  return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 80026f8:	8879      	ldrh	r1, [r7, #2]
 80026fa:	f107 0308 	add.w	r3, r7, #8
 80026fe:	4a0b      	ldr	r2, [pc, #44]	; (800272c <logRegion+0xdc>)
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f00e fe65 	bl	80113d0 <sniprintf>
 8002706:	4603      	mov	r3, r0
 8002708:	b29b      	uxth	r3, r3
}
 800270a:	4618      	mov	r0, r3
 800270c:	3728      	adds	r7, #40	; 0x28
 800270e:	46bd      	mov	sp, r7
 8002710:	bdb0      	pop	{r4, r5, r7, pc}
 8002712:	bf00      	nop
 8002714:	08012704 	.word	0x08012704
 8002718:	08012718 	.word	0x08012718
 800271c:	0801272c 	.word	0x0801272c
 8002720:	0801273c 	.word	0x0801273c
 8002724:	08012750 	.word	0x08012750
 8002728:	08012764 	.word	0x08012764
 800272c:	0801276c 	.word	0x0801276c

08002730 <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d005      	beq.n	800274c <levelToString+0x1c>
 8002740:	2b03      	cmp	r3, #3
 8002742:	d005      	beq.n	8002750 <levelToString+0x20>
 8002744:	2b01      	cmp	r3, #1
 8002746:	d105      	bne.n	8002754 <levelToString+0x24>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <levelToString+0x34>)
 800274a:	e004      	b.n	8002756 <levelToString+0x26>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <levelToString+0x38>)
 800274e:	e002      	b.n	8002756 <levelToString+0x26>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <levelToString+0x3c>)
 8002752:	e000      	b.n	8002756 <levelToString+0x26>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <levelToString+0x40>)
  }
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	08012770 	.word	0x08012770
 8002768:	08012778 	.word	0x08012778
 800276c:	08012780 	.word	0x08012780
 8002770:	08012788 	.word	0x08012788

08002774 <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 8002774:	b590      	push	{r4, r7, lr}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
 8002780:	4613      	mov	r3, r2
 8002782:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 8002784:	887c      	ldrh	r4, [r7, #2]
 8002786:	787b      	ldrb	r3, [r7, #1]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ffd1 	bl	8002730 <levelToString>
 800278e:	4603      	mov	r3, r0
 8002790:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <logLevel+0x34>)
 8002792:	4621      	mov	r1, r4
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f00e fe1b 	bl	80113d0 <sniprintf>
 800279a:	4603      	mov	r3, r0
 800279c:	b29b      	uxth	r3, r3
}
 800279e:	4618      	mov	r0, r3
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd90      	pop	{r4, r7, pc}
 80027a6:	bf00      	nop
 80027a8:	08012790 	.word	0x08012790

080027ac <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 80027ac:	b40c      	push	{r2, r3}
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b0c4      	sub	sp, #272	; 0x110
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	4602      	mov	r2, r0
 80027b6:	1dfb      	adds	r3, r7, #7
 80027b8:	701a      	strb	r2, [r3, #0]
 80027ba:	1dbb      	adds	r3, r7, #6
 80027bc:	460a      	mov	r2, r1
 80027be:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 80027c6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80027ca:	f107 020c 	add.w	r2, r7, #12
 80027ce:	18d0      	adds	r0, r2, r3
 80027d0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80027d4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80027d8:	b299      	uxth	r1, r3
 80027da:	1dfb      	adds	r3, r7, #7
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	f7ff ffc8 	bl	8002774 <logLevel>
 80027e4:	4603      	mov	r3, r0
 80027e6:	461a      	mov	r2, r3
 80027e8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80027ec:	4413      	add	r3, r2
 80027ee:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 80027f2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80027f6:	f107 020c 	add.w	r2, r7, #12
 80027fa:	18d0      	adds	r0, r2, r3
 80027fc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002800:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002804:	b299      	uxth	r1, r3
 8002806:	1dbb      	adds	r3, r7, #6
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	f7ff ff20 	bl	8002650 <logRegion>
 8002810:	4603      	mov	r3, r0
 8002812:	461a      	mov	r2, r3
 8002814:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002818:	4413      	add	r3, r2
 800281a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogRegion);
#endif

  /* Parse user string */
  va_list paramList;
  va_start(paramList, aFormat);
 800281e:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8002822:	f107 0308 	add.w	r3, r7, #8
 8002826:	601a      	str	r2, [r3, #0]
  length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8002828:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800282c:	f107 020c 	add.w	r2, r7, #12
 8002830:	18d0      	adds	r0, r2, r3
 8002832:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002836:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 800283a:	f107 0308 	add.w	r3, r7, #8
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002844:	f00e fe24 	bl	8011490 <vsniprintf>
 8002848:	4603      	mov	r3, r0
 800284a:	b29a      	uxth	r2, r3
 800284c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002850:	4413      	add	r3, r2
 8002852:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aFormat, paramList);
  logString[length++] = '\r';
 8002856:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8002860:	461a      	mov	r2, r3
 8002862:	f107 030c 	add.w	r3, r7, #12
 8002866:	210d      	movs	r1, #13
 8002868:	5499      	strb	r1, [r3, r2]
  logString[length++] = '\n';
 800286a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8002874:	461a      	mov	r2, r3
 8002876:	f107 030c 	add.w	r3, r7, #12
 800287a:	210a      	movs	r1, #10
 800287c:	5499      	strb	r1, [r3, r2]
  logString[length++] = 0;
 800287e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8002888:	461a      	mov	r2, r3
 800288a:	f107 030c 	add.w	r3, r7, #12
 800288e:	2100      	movs	r1, #0
 8002890:	5499      	strb	r1, [r3, r2]
  va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 8002892:	1dfb      	adds	r3, r7, #7
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b03      	cmp	r3, #3
 8002898:	d805      	bhi.n	80028a6 <logApplication+0xfa>
  {
    printf("%s", logString);
 800289a:	f107 030c 	add.w	r3, r7, #12
 800289e:	4619      	mov	r1, r3
 80028a0:	4805      	ldr	r0, [pc, #20]	; (80028b8 <logApplication+0x10c>)
 80028a2:	f00e fd19 	bl	80112d8 <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 80028a6:	bf00      	nop
 80028a8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80028ac:	46bd      	mov	sp, r7
 80028ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028b2:	b002      	add	sp, #8
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	08012790 	.word	0x08012790

080028bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	e00a      	b.n	80028e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028ce:	f3af 8000 	nop.w
 80028d2:	4601      	mov	r1, r0
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	60ba      	str	r2, [r7, #8]
 80028da:	b2ca      	uxtb	r2, r1
 80028dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	3301      	adds	r3, #1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	dbf0      	blt.n	80028ce <_read+0x12>
	}

return len;
 80028ec:	687b      	ldr	r3, [r7, #4]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
	return -1;
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800291e:	605a      	str	r2, [r3, #4]
	return 0;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <_isatty>:

int _isatty(int file)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
	return 1;
 8002936:	2301      	movs	r3, #1
}
 8002938:	4618      	mov	r0, r3
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
	return 0;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002968:	4a14      	ldr	r2, [pc, #80]	; (80029bc <_sbrk+0x5c>)
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <_sbrk+0x60>)
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <_sbrk+0x64>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <_sbrk+0x64>)
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <_sbrk+0x68>)
 8002980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <_sbrk+0x64>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	429a      	cmp	r2, r3
 800298e:	d207      	bcs.n	80029a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002990:	f00e fc64 	bl	801125c <__errno>
 8002994:	4602      	mov	r2, r0
 8002996:	230c      	movs	r3, #12
 8002998:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
 800299e:	e009      	b.n	80029b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <_sbrk+0x64>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <_sbrk+0x64>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <_sbrk+0x64>)
 80029b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029b2:	68fb      	ldr	r3, [r7, #12]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20030000 	.word	0x20030000
 80029c0:	00000400 	.word	0x00000400
 80029c4:	20000254 	.word	0x20000254
 80029c8:	20006fc0 	.word	0x20006fc0

080029cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80029d0:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <SystemInit+0xa0>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80029d6:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <SystemInit+0xa0>)
 80029d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029dc:	4a23      	ldr	r2, [pc, #140]	; (8002a6c <SystemInit+0xa0>)
 80029de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80029e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80029f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fa:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80029fe:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a0a:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <SystemInit+0xa4>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a1c:	f023 0305 	bic.w	r3, r3, #5
 8002a20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <SystemInit+0xa8>)
 8002a3e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a44:	4a0b      	ldr	r2, [pc, #44]	; (8002a74 <SystemInit+0xa8>)
 8002a46:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	619a      	str	r2, [r3, #24]
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	e000ed00 	.word	0xe000ed00
 8002a70:	faf6fefb 	.word	0xfaf6fefb
 8002a74:	22041000 	.word	0x22041000

08002a78 <LL_AHB2_GRP1_EnableClock>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
}
 8002a9e:	bf00      	nop
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <LL_APB1_GRP2_EnableClock>:
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b085      	sub	sp, #20
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ab8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4013      	ands	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ace:	68fb      	ldr	r3, [r7, #12]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_APB2_GRP1_EnableClock>:
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002aea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4013      	ands	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b00:	68fb      	ldr	r3, [r7, #12]
}
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8002b14:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <MX_LPUART1_UART_Init+0x90>)
 8002b16:	4a23      	ldr	r2, [pc, #140]	; (8002ba4 <MX_LPUART1_UART_Init+0x94>)
 8002b18:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002b1a:	4b21      	ldr	r3, [pc, #132]	; (8002ba0 <MX_LPUART1_UART_Init+0x90>)
 8002b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b20:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b22:	4b1f      	ldr	r3, [pc, #124]	; (8002ba0 <MX_LPUART1_UART_Init+0x90>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002b28:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <MX_LPUART1_UART_Init+0x90>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002b2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ba0 <MX_LPUART1_UART_Init+0x90>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002b34:	4b1a      	ldr	r3, [pc, #104]	; (8002ba0 <MX_LPUART1_UART_Init+0x90>)
 8002b36:	220c      	movs	r2, #12
 8002b38:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b3a:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <MX_LPUART1_UART_Init+0x90>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b40:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <MX_LPUART1_UART_Init+0x90>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b46:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <MX_LPUART1_UART_Init+0x90>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b4c:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <MX_LPUART1_UART_Init+0x90>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002b52:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <MX_LPUART1_UART_Init+0x90>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002b58:	4811      	ldr	r0, [pc, #68]	; (8002ba0 <MX_LPUART1_UART_Init+0x90>)
 8002b5a:	f003 f95b 	bl	8005e14 <HAL_UART_Init>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b64:	f7ff fc00 	bl	8002368 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b68:	2100      	movs	r1, #0
 8002b6a:	480d      	ldr	r0, [pc, #52]	; (8002ba0 <MX_LPUART1_UART_Init+0x90>)
 8002b6c:	f004 fc95 	bl	800749a <HAL_UARTEx_SetTxFifoThreshold>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002b76:	f7ff fbf7 	bl	8002368 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4808      	ldr	r0, [pc, #32]	; (8002ba0 <MX_LPUART1_UART_Init+0x90>)
 8002b7e:	f004 fcca 	bl	8007516 <HAL_UARTEx_SetRxFifoThreshold>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b88:	f7ff fbee 	bl	8002368 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002b8c:	4804      	ldr	r0, [pc, #16]	; (8002ba0 <MX_LPUART1_UART_Init+0x90>)
 8002b8e:	f004 fc4b 	bl	8007428 <HAL_UARTEx_DisableFifoMode>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b98:	f7ff fbe6 	bl	8002368 <Error_Handler>
  }

}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20006d30 	.word	0x20006d30
 8002ba4:	40008000 	.word	0x40008000

08002ba8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002bac:	4b23      	ldr	r3, [pc, #140]	; (8002c3c <MX_USART1_UART_Init+0x94>)
 8002bae:	4a24      	ldr	r2, [pc, #144]	; (8002c40 <MX_USART1_UART_Init+0x98>)
 8002bb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bb2:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <MX_USART1_UART_Init+0x94>)
 8002bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bba:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <MX_USART1_UART_Init+0x94>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bc0:	4b1e      	ldr	r3, [pc, #120]	; (8002c3c <MX_USART1_UART_Init+0x94>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bc6:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <MX_USART1_UART_Init+0x94>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <MX_USART1_UART_Init+0x94>)
 8002bce:	220c      	movs	r2, #12
 8002bd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	; (8002c3c <MX_USART1_UART_Init+0x94>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002bd8:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <MX_USART1_UART_Init+0x94>)
 8002bda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002bde:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002be0:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <MX_USART1_UART_Init+0x94>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <MX_USART1_UART_Init+0x94>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bec:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <MX_USART1_UART_Init+0x94>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bf2:	4812      	ldr	r0, [pc, #72]	; (8002c3c <MX_USART1_UART_Init+0x94>)
 8002bf4:	f003 f90e 	bl	8005e14 <HAL_UART_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002bfe:	f7ff fbb3 	bl	8002368 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c02:	2100      	movs	r1, #0
 8002c04:	480d      	ldr	r0, [pc, #52]	; (8002c3c <MX_USART1_UART_Init+0x94>)
 8002c06:	f004 fc48 	bl	800749a <HAL_UARTEx_SetTxFifoThreshold>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002c10:	f7ff fbaa 	bl	8002368 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c14:	2100      	movs	r1, #0
 8002c16:	4809      	ldr	r0, [pc, #36]	; (8002c3c <MX_USART1_UART_Init+0x94>)
 8002c18:	f004 fc7d 	bl	8007516 <HAL_UARTEx_SetRxFifoThreshold>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002c22:	f7ff fba1 	bl	8002368 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002c26:	4805      	ldr	r0, [pc, #20]	; (8002c3c <MX_USART1_UART_Init+0x94>)
 8002c28:	f004 fbfe 	bl	8007428 <HAL_UARTEx_DisableFifoMode>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002c32:	f7ff fb99 	bl	8002368 <Error_Handler>
  }

}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20006e1c 	.word	0x20006e1c
 8002c40:	40013800 	.word	0x40013800

08002c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4c:	f107 030c 	add.w	r3, r7, #12
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a4f      	ldr	r2, [pc, #316]	; (8002da0 <HAL_UART_MspInit+0x15c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d148      	bne.n	8002cf8 <HAL_UART_MspInit+0xb4>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002c66:	2001      	movs	r0, #1
 8002c68:	f7ff ff1f 	bl	8002aaa <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	f7ff ff03 	bl	8002a78 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c72:	230c      	movs	r3, #12
 8002c74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c76:	2302      	movs	r3, #2
 8002c78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002c82:	2308      	movs	r3, #8
 8002c84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c86:	f107 030c 	add.w	r3, r7, #12
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c90:	f000 fd82 	bl	8003798 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8002c94:	4b43      	ldr	r3, [pc, #268]	; (8002da4 <HAL_UART_MspInit+0x160>)
 8002c96:	4a44      	ldr	r2, [pc, #272]	; (8002da8 <HAL_UART_MspInit+0x164>)
 8002c98:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002c9a:	4b42      	ldr	r3, [pc, #264]	; (8002da4 <HAL_UART_MspInit+0x160>)
 8002c9c:	2211      	movs	r2, #17
 8002c9e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ca0:	4b40      	ldr	r3, [pc, #256]	; (8002da4 <HAL_UART_MspInit+0x160>)
 8002ca2:	2210      	movs	r2, #16
 8002ca4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ca6:	4b3f      	ldr	r3, [pc, #252]	; (8002da4 <HAL_UART_MspInit+0x160>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cac:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <HAL_UART_MspInit+0x160>)
 8002cae:	2280      	movs	r2, #128	; 0x80
 8002cb0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cb2:	4b3c      	ldr	r3, [pc, #240]	; (8002da4 <HAL_UART_MspInit+0x160>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cb8:	4b3a      	ldr	r3, [pc, #232]	; (8002da4 <HAL_UART_MspInit+0x160>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002cbe:	4b39      	ldr	r3, [pc, #228]	; (8002da4 <HAL_UART_MspInit+0x160>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cc4:	4b37      	ldr	r3, [pc, #220]	; (8002da4 <HAL_UART_MspInit+0x160>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002cca:	4836      	ldr	r0, [pc, #216]	; (8002da4 <HAL_UART_MspInit+0x160>)
 8002ccc:	f000 fa90 	bl	80031f0 <HAL_DMA_Init>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 8002cd6:	f7ff fb47 	bl	8002368 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a31      	ldr	r2, [pc, #196]	; (8002da4 <HAL_UART_MspInit+0x160>)
 8002cde:	675a      	str	r2, [r3, #116]	; 0x74
 8002ce0:	4a30      	ldr	r2, [pc, #192]	; (8002da4 <HAL_UART_MspInit+0x160>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2105      	movs	r1, #5
 8002cea:	2025      	movs	r0, #37	; 0x25
 8002cec:	f000 fa29 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002cf0:	2025      	movs	r0, #37	; 0x25
 8002cf2:	f000 fa40 	bl	8003176 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002cf6:	e04e      	b.n	8002d96 <HAL_UART_MspInit+0x152>
  else if(uartHandle->Instance==USART1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a2b      	ldr	r2, [pc, #172]	; (8002dac <HAL_UART_MspInit+0x168>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d149      	bne.n	8002d96 <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d02:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d06:	f7ff fee9 	bl	8002adc <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	f7ff feb4 	bl	8002a78 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d10:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d16:	2302      	movs	r3, #2
 8002d18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d22:	2307      	movs	r3, #7
 8002d24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d26:	f107 030c 	add.w	r3, r7, #12
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d30:	f000 fd32 	bl	8003798 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002d34:	4b1e      	ldr	r3, [pc, #120]	; (8002db0 <HAL_UART_MspInit+0x16c>)
 8002d36:	4a1f      	ldr	r2, [pc, #124]	; (8002db4 <HAL_UART_MspInit+0x170>)
 8002d38:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002d3a:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <HAL_UART_MspInit+0x16c>)
 8002d3c:	220f      	movs	r2, #15
 8002d3e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d40:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <HAL_UART_MspInit+0x16c>)
 8002d42:	2210      	movs	r2, #16
 8002d44:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d46:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <HAL_UART_MspInit+0x16c>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d4c:	4b18      	ldr	r3, [pc, #96]	; (8002db0 <HAL_UART_MspInit+0x16c>)
 8002d4e:	2280      	movs	r2, #128	; 0x80
 8002d50:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d52:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <HAL_UART_MspInit+0x16c>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d58:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <HAL_UART_MspInit+0x16c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <HAL_UART_MspInit+0x16c>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <HAL_UART_MspInit+0x16c>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d6a:	4811      	ldr	r0, [pc, #68]	; (8002db0 <HAL_UART_MspInit+0x16c>)
 8002d6c:	f000 fa40 	bl	80031f0 <HAL_DMA_Init>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_UART_MspInit+0x136>
      Error_Handler();
 8002d76:	f7ff faf7 	bl	8002368 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a0c      	ldr	r2, [pc, #48]	; (8002db0 <HAL_UART_MspInit+0x16c>)
 8002d7e:	675a      	str	r2, [r3, #116]	; 0x74
 8002d80:	4a0b      	ldr	r2, [pc, #44]	; (8002db0 <HAL_UART_MspInit+0x16c>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002d86:	2200      	movs	r2, #0
 8002d88:	2105      	movs	r1, #5
 8002d8a:	2024      	movs	r0, #36	; 0x24
 8002d8c:	f000 f9d9 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d90:	2024      	movs	r0, #36	; 0x24
 8002d92:	f000 f9f0 	bl	8003176 <HAL_NVIC_EnableIRQ>
}
 8002d96:	bf00      	nop
 8002d98:	3720      	adds	r7, #32
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40008000 	.word	0x40008000
 8002da4:	20006ea8 	.word	0x20006ea8
 8002da8:	40020044 	.word	0x40020044
 8002dac:	40013800 	.word	0x40013800
 8002db0:	20006dbc 	.word	0x20006dbc
 8002db4:	40020444 	.word	0x40020444

08002db8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002db8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dba:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dbc:	3304      	adds	r3, #4

08002dbe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dbe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dc0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002dc2:	d3f9      	bcc.n	8002db8 <CopyDataInit>
  bx lr
 8002dc4:	4770      	bx	lr

08002dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002dc6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002dc8:	3004      	adds	r0, #4

08002dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002dca:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002dcc:	d3fb      	bcc.n	8002dc6 <FillZerobss>
  bx lr
 8002dce:	4770      	bx	lr

08002dd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002dd0:	480c      	ldr	r0, [pc, #48]	; (8002e04 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002dd2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002dd4:	f7ff fdfa 	bl	80029cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002dd8:	480b      	ldr	r0, [pc, #44]	; (8002e08 <LoopForever+0x8>)
 8002dda:	490c      	ldr	r1, [pc, #48]	; (8002e0c <LoopForever+0xc>)
 8002ddc:	4a0c      	ldr	r2, [pc, #48]	; (8002e10 <LoopForever+0x10>)
 8002dde:	2300      	movs	r3, #0
 8002de0:	f7ff ffed 	bl	8002dbe <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002de4:	480b      	ldr	r0, [pc, #44]	; (8002e14 <LoopForever+0x14>)
 8002de6:	490c      	ldr	r1, [pc, #48]	; (8002e18 <LoopForever+0x18>)
 8002de8:	2300      	movs	r3, #0
 8002dea:	f7ff ffee 	bl	8002dca <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002dee:	480b      	ldr	r0, [pc, #44]	; (8002e1c <LoopForever+0x1c>)
 8002df0:	490b      	ldr	r1, [pc, #44]	; (8002e20 <LoopForever+0x20>)
 8002df2:	2300      	movs	r3, #0
 8002df4:	f7ff ffe9 	bl	8002dca <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002df8:	f00e fa36 	bl	8011268 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002dfc:	f7ff fa04 	bl	8002208 <main>

08002e00 <LoopForever>:

LoopForever:
  b LoopForever
 8002e00:	e7fe      	b.n	8002e00 <LoopForever>
 8002e02:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002e04:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002e08:	20000004 	.word	0x20000004
 8002e0c:	20000088 	.word	0x20000088
 8002e10:	08012e4c 	.word	0x08012e4c
  INIT_BSS _sbss, _ebss
 8002e14:	2000022c 	.word	0x2000022c
 8002e18:	20006fbc 	.word	0x20006fbc
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002e1c:	200301ec 	.word	0x200301ec
 8002e20:	20030d7f 	.word	0x20030d7f

08002e24 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e24:	e7fe      	b.n	8002e24 <ADC1_IRQHandler>
	...

08002e28 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6053      	str	r3, [r2, #4]
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	e0042000 	.word	0xe0042000

08002e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e52:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <HAL_Init+0x3c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a0b      	ldr	r2, [pc, #44]	; (8002e84 <HAL_Init+0x3c>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e5e:	2003      	movs	r0, #3
 8002e60:	f000 f964 	bl	800312c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e64:	2000      	movs	r0, #0
 8002e66:	f7ff fb47 	bl	80024f8 <HAL_InitTick>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	71fb      	strb	r3, [r7, #7]
 8002e74:	e001      	b.n	8002e7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e76:	f7ff fb06 	bl	8002486 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	58004000 	.word	0x58004000

08002e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_IncTick+0x20>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_IncTick+0x24>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4413      	add	r3, r2
 8002e98:	4a04      	ldr	r2, [pc, #16]	; (8002eac <HAL_IncTick+0x24>)
 8002e9a:	6013      	str	r3, [r2, #0]
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	2000000c 	.word	0x2000000c
 8002eac:	20006f08 	.word	0x20006f08

08002eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002eb4:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <HAL_GetTick+0x14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20006f08 	.word	0x20006f08

08002ec8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <HAL_GetTickPrio+0x14>)
 8002ece:	681b      	ldr	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	20000008 	.word	0x20000008

08002ee0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002ee4:	f7ff ffa0 	bl	8002e28 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002ee8:	bf00      	nop
 8002eea:	bd80      	pop	{r7, pc}

08002eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <__NVIC_SetPriorityGrouping+0x44>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f1e:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <__NVIC_SetPriorityGrouping+0x44>)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	60d3      	str	r3, [r2, #12]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <__NVIC_GetPriorityGrouping+0x18>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	f003 0307 	and.w	r3, r3, #7
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	db0b      	blt.n	8002f7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	f003 021f 	and.w	r2, r3, #31
 8002f68:	4907      	ldr	r1, [pc, #28]	; (8002f88 <__NVIC_EnableIRQ+0x38>)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	2001      	movs	r0, #1
 8002f72:	fa00 f202 	lsl.w	r2, r0, r2
 8002f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000e100 	.word	0xe000e100

08002f8c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	db10      	blt.n	8002fc0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	f003 021f 	and.w	r2, r3, #31
 8002fa4:	4909      	ldr	r1, [pc, #36]	; (8002fcc <__NVIC_DisableIRQ+0x40>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2001      	movs	r0, #1
 8002fae:	fa00 f202 	lsl.w	r2, r0, r2
 8002fb2:	3320      	adds	r3, #32
 8002fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002fb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002fbc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000e100 	.word	0xe000e100

08002fd0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	db0c      	blt.n	8002ffc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	f003 021f 	and.w	r2, r3, #31
 8002fe8:	4907      	ldr	r1, [pc, #28]	; (8003008 <__NVIC_SetPendingIRQ+0x38>)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ff6:	3340      	adds	r3, #64	; 0x40
 8002ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	e000e100 	.word	0xe000e100

0800300c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	2b00      	cmp	r3, #0
 800301c:	db0c      	blt.n	8003038 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	f003 021f 	and.w	r2, r3, #31
 8003024:	4907      	ldr	r1, [pc, #28]	; (8003044 <__NVIC_ClearPendingIRQ+0x38>)
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	2001      	movs	r0, #1
 800302e:	fa00 f202 	lsl.w	r2, r0, r2
 8003032:	3360      	adds	r3, #96	; 0x60
 8003034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000e100 	.word	0xe000e100

08003048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	6039      	str	r1, [r7, #0]
 8003052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003058:	2b00      	cmp	r3, #0
 800305a:	db0a      	blt.n	8003072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	b2da      	uxtb	r2, r3
 8003060:	490c      	ldr	r1, [pc, #48]	; (8003094 <__NVIC_SetPriority+0x4c>)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	0112      	lsls	r2, r2, #4
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	440b      	add	r3, r1
 800306c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003070:	e00a      	b.n	8003088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	b2da      	uxtb	r2, r3
 8003076:	4908      	ldr	r1, [pc, #32]	; (8003098 <__NVIC_SetPriority+0x50>)
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	3b04      	subs	r3, #4
 8003080:	0112      	lsls	r2, r2, #4
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	440b      	add	r3, r1
 8003086:	761a      	strb	r2, [r3, #24]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000e100 	.word	0xe000e100
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800309c:	b480      	push	{r7}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f1c3 0307 	rsb	r3, r3, #7
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	bf28      	it	cs
 80030ba:	2304      	movcs	r3, #4
 80030bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3304      	adds	r3, #4
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	d902      	bls.n	80030cc <NVIC_EncodePriority+0x30>
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3b03      	subs	r3, #3
 80030ca:	e000      	b.n	80030ce <NVIC_EncodePriority+0x32>
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	f04f 32ff 	mov.w	r2, #4294967295
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	401a      	ands	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e4:	f04f 31ff 	mov.w	r1, #4294967295
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fa01 f303 	lsl.w	r3, r1, r3
 80030ee:	43d9      	mvns	r1, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f4:	4313      	orrs	r3, r2
         );
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3724      	adds	r7, #36	; 0x24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003108:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <__NVIC_SystemReset+0x20>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003114:	4903      	ldr	r1, [pc, #12]	; (8003124 <__NVIC_SystemReset+0x20>)
 8003116:	4b04      	ldr	r3, [pc, #16]	; (8003128 <__NVIC_SystemReset+0x24>)
 8003118:	4313      	orrs	r3, r2
 800311a:	60cb      	str	r3, [r1, #12]
 800311c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003120:	bf00      	nop
 8003122:	e7fd      	b.n	8003120 <__NVIC_SystemReset+0x1c>
 8003124:	e000ed00 	.word	0xe000ed00
 8003128:	05fa0004 	.word	0x05fa0004

0800312c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff fed9 	bl	8002eec <__NVIC_SetPriorityGrouping>
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b086      	sub	sp, #24
 8003146:	af00      	add	r7, sp, #0
 8003148:	4603      	mov	r3, r0
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003150:	f7ff fef0 	bl	8002f34 <__NVIC_GetPriorityGrouping>
 8003154:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	6978      	ldr	r0, [r7, #20]
 800315c:	f7ff ff9e 	bl	800309c <NVIC_EncodePriority>
 8003160:	4602      	mov	r2, r0
 8003162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff6d 	bl	8003048 <__NVIC_SetPriority>
}
 800316e:	bf00      	nop
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	4603      	mov	r3, r0
 800317e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fee3 	bl	8002f50 <__NVIC_EnableIRQ>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	4603      	mov	r3, r0
 800319a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800319c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fef3 	bl	8002f8c <__NVIC_DisableIRQ>
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80031b2:	f7ff ffa7 	bl	8003104 <__NVIC_SystemReset>

080031b6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	4603      	mov	r3, r0
 80031be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80031c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff ff03 	bl	8002fd0 <__NVIC_SetPendingIRQ>
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	4603      	mov	r3, r0
 80031da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80031dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff ff13 	bl	800300c <__NVIC_ClearPendingIRQ>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e08e      	b.n	8003320 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	4b47      	ldr	r3, [pc, #284]	; (8003328 <HAL_DMA_Init+0x138>)
 800320a:	429a      	cmp	r2, r3
 800320c:	d80f      	bhi.n	800322e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	4b45      	ldr	r3, [pc, #276]	; (800332c <HAL_DMA_Init+0x13c>)
 8003216:	4413      	add	r3, r2
 8003218:	4a45      	ldr	r2, [pc, #276]	; (8003330 <HAL_DMA_Init+0x140>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	091b      	lsrs	r3, r3, #4
 8003220:	009a      	lsls	r2, r3, #2
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a42      	ldr	r2, [pc, #264]	; (8003334 <HAL_DMA_Init+0x144>)
 800322a:	641a      	str	r2, [r3, #64]	; 0x40
 800322c:	e00e      	b.n	800324c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	4b40      	ldr	r3, [pc, #256]	; (8003338 <HAL_DMA_Init+0x148>)
 8003236:	4413      	add	r3, r2
 8003238:	4a3d      	ldr	r2, [pc, #244]	; (8003330 <HAL_DMA_Init+0x140>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	091b      	lsrs	r3, r3, #4
 8003240:	009a      	lsls	r2, r3, #2
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a3c      	ldr	r2, [pc, #240]	; (800333c <HAL_DMA_Init+0x14c>)
 800324a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003266:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003270:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800327c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003288:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fa16 	bl	80036d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032ac:	d102      	bne.n	80032b4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032bc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80032c0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032ca:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d010      	beq.n	80032f6 <HAL_DMA_Init+0x106>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d80c      	bhi.n	80032f6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 fa35 	bl	800374c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	e008      	b.n	8003308 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40020407 	.word	0x40020407
 800332c:	bffdfff8 	.word	0xbffdfff8
 8003330:	cccccccd 	.word	0xcccccccd
 8003334:	40020000 	.word	0x40020000
 8003338:	bffdfbf8 	.word	0xbffdfbf8
 800333c:	40020400 	.word	0x40020400

08003340 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_DMA_Start_IT+0x20>
 800335c:	2302      	movs	r3, #2
 800335e:	e066      	b.n	800342e <HAL_DMA_Start_IT+0xee>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	d155      	bne.n	8003420 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f95a 	bl	8003652 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 020e 	orr.w	r2, r2, #14
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	e00f      	b.n	80033d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0204 	bic.w	r2, r2, #4
 80033c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 020a 	orr.w	r2, r2, #10
 80033d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033f4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800340c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0201 	orr.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e005      	b.n	800342c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003428:	2302      	movs	r3, #2
 800342a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800342c:	7dfb      	ldrb	r3, [r7, #23]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d005      	beq.n	800345a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2204      	movs	r2, #4
 8003452:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
 8003458:	e047      	b.n	80034ea <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 020e 	bic.w	r2, r2, #14
 8003468:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0201 	bic.w	r2, r2, #1
 8003478:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003488:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	f003 021c 	and.w	r2, r3, #28
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	2101      	movs	r1, #1
 8003498:	fa01 f202 	lsl.w	r2, r1, r2
 800349c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034a6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00c      	beq.n	80034ca <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80034c8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	4798      	blx	r3
    }
  }
  return status;
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	f003 031c 	and.w	r3, r3, #28
 8003514:	2204      	movs	r2, #4
 8003516:	409a      	lsls	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4013      	ands	r3, r2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d026      	beq.n	800356e <HAL_DMA_IRQHandler+0x7a>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b00      	cmp	r3, #0
 8003528:	d021      	beq.n	800356e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d107      	bne.n	8003548 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0204 	bic.w	r2, r2, #4
 8003546:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354c:	f003 021c 	and.w	r2, r3, #28
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	2104      	movs	r1, #4
 8003556:	fa01 f202 	lsl.w	r2, r1, r2
 800355a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003560:	2b00      	cmp	r3, #0
 8003562:	d071      	beq.n	8003648 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800356c:	e06c      	b.n	8003648 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	f003 031c 	and.w	r3, r3, #28
 8003576:	2202      	movs	r2, #2
 8003578:	409a      	lsls	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d02e      	beq.n	80035e0 <HAL_DMA_IRQHandler+0xec>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d029      	beq.n	80035e0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10b      	bne.n	80035b2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 020a 	bic.w	r2, r2, #10
 80035a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f003 021c 	and.w	r2, r3, #28
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	2102      	movs	r1, #2
 80035c0:	fa01 f202 	lsl.w	r2, r1, r2
 80035c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d038      	beq.n	8003648 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80035de:	e033      	b.n	8003648 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e4:	f003 031c 	and.w	r3, r3, #28
 80035e8:	2208      	movs	r2, #8
 80035ea:	409a      	lsls	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d02a      	beq.n	800364a <HAL_DMA_IRQHandler+0x156>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d025      	beq.n	800364a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 020e 	bic.w	r2, r2, #14
 800360c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	f003 021c 	and.w	r2, r3, #28
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	2101      	movs	r1, #1
 800361c:	fa01 f202 	lsl.w	r2, r1, r2
 8003620:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363c:	2b00      	cmp	r3, #0
 800363e:	d004      	beq.n	800364a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003648:	bf00      	nop
 800364a:	bf00      	nop
}
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003652:	b480      	push	{r7}
 8003654:	b085      	sub	sp, #20
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003668:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366e:	2b00      	cmp	r3, #0
 8003670:	d004      	beq.n	800367c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800367a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	f003 021c 	and.w	r2, r3, #28
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	2101      	movs	r1, #1
 800368a:	fa01 f202 	lsl.w	r2, r1, r2
 800368e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b10      	cmp	r3, #16
 800369e:	d108      	bne.n	80036b2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036b0:	e007      	b.n	80036c2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	60da      	str	r2, [r3, #12]
}
 80036c2:	bf00      	nop
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	4b17      	ldr	r3, [pc, #92]	; (800373c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d80a      	bhi.n	80036fa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e8:	089b      	lsrs	r3, r3, #2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036f0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6493      	str	r3, [r2, #72]	; 0x48
 80036f8:	e007      	b.n	800370a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	089b      	lsrs	r3, r3, #2
 8003700:	009a      	lsls	r2, r3, #2
 8003702:	4b0f      	ldr	r3, [pc, #60]	; (8003740 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003704:	4413      	add	r3, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	b2db      	uxtb	r3, r3
 8003710:	3b08      	subs	r3, #8
 8003712:	4a0c      	ldr	r2, [pc, #48]	; (8003744 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003720:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	2201      	movs	r2, #1
 800372a:	409a      	lsls	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	40020407 	.word	0x40020407
 8003740:	4002081c 	.word	0x4002081c
 8003744:	cccccccd 	.word	0xcccccccd
 8003748:	40020880 	.word	0x40020880

0800374c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800375c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	461a      	mov	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a09      	ldr	r2, [pc, #36]	; (8003794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003770:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	3b01      	subs	r3, #1
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2201      	movs	r2, #1
 800377c:	409a      	lsls	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	1000823f 	.word	0x1000823f
 8003794:	40020940 	.word	0x40020940

08003798 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037a6:	e14c      	b.n	8003a42 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	2101      	movs	r1, #1
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	fa01 f303 	lsl.w	r3, r1, r3
 80037b4:	4013      	ands	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 813e 	beq.w	8003a3c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d00b      	beq.n	80037e0 <HAL_GPIO_Init+0x48>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d007      	beq.n	80037e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037d4:	2b11      	cmp	r3, #17
 80037d6:	d003      	beq.n	80037e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b12      	cmp	r3, #18
 80037de:	d130      	bne.n	8003842 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	2203      	movs	r2, #3
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4013      	ands	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003816:	2201      	movs	r2, #1
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4013      	ands	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	091b      	lsrs	r3, r3, #4
 800382c:	f003 0201 	and.w	r2, r3, #1
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	2203      	movs	r2, #3
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4013      	ands	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0xea>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b12      	cmp	r3, #18
 8003880:	d123      	bne.n	80038ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	08da      	lsrs	r2, r3, #3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3208      	adds	r2, #8
 800388a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800388e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	220f      	movs	r2, #15
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	08da      	lsrs	r2, r3, #3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3208      	adds	r2, #8
 80038c4:	6939      	ldr	r1, [r7, #16]
 80038c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	2203      	movs	r2, #3
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 0203 	and.w	r2, r3, #3
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 8098 	beq.w	8003a3c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800390c:	4a54      	ldr	r2, [pc, #336]	; (8003a60 <HAL_GPIO_Init+0x2c8>)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	3302      	adds	r3, #2
 8003914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003918:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	220f      	movs	r2, #15
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4013      	ands	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003936:	d019      	beq.n	800396c <HAL_GPIO_Init+0x1d4>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a4a      	ldr	r2, [pc, #296]	; (8003a64 <HAL_GPIO_Init+0x2cc>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d013      	beq.n	8003968 <HAL_GPIO_Init+0x1d0>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a49      	ldr	r2, [pc, #292]	; (8003a68 <HAL_GPIO_Init+0x2d0>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d00d      	beq.n	8003964 <HAL_GPIO_Init+0x1cc>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a48      	ldr	r2, [pc, #288]	; (8003a6c <HAL_GPIO_Init+0x2d4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d007      	beq.n	8003960 <HAL_GPIO_Init+0x1c8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a47      	ldr	r2, [pc, #284]	; (8003a70 <HAL_GPIO_Init+0x2d8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d101      	bne.n	800395c <HAL_GPIO_Init+0x1c4>
 8003958:	2304      	movs	r3, #4
 800395a:	e008      	b.n	800396e <HAL_GPIO_Init+0x1d6>
 800395c:	2307      	movs	r3, #7
 800395e:	e006      	b.n	800396e <HAL_GPIO_Init+0x1d6>
 8003960:	2303      	movs	r3, #3
 8003962:	e004      	b.n	800396e <HAL_GPIO_Init+0x1d6>
 8003964:	2302      	movs	r3, #2
 8003966:	e002      	b.n	800396e <HAL_GPIO_Init+0x1d6>
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <HAL_GPIO_Init+0x1d6>
 800396c:	2300      	movs	r3, #0
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	f002 0203 	and.w	r2, r2, #3
 8003974:	0092      	lsls	r2, r2, #2
 8003976:	4093      	lsls	r3, r2
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800397e:	4938      	ldr	r1, [pc, #224]	; (8003a60 <HAL_GPIO_Init+0x2c8>)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	3302      	adds	r3, #2
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800398c:	4b39      	ldr	r3, [pc, #228]	; (8003a74 <HAL_GPIO_Init+0x2dc>)
 800398e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	43db      	mvns	r3, r3
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4013      	ands	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039b2:	4a30      	ldr	r2, [pc, #192]	; (8003a74 <HAL_GPIO_Init+0x2dc>)
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80039ba:	4b2e      	ldr	r3, [pc, #184]	; (8003a74 <HAL_GPIO_Init+0x2dc>)
 80039bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4013      	ands	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039e0:	4a24      	ldr	r2, [pc, #144]	; (8003a74 <HAL_GPIO_Init+0x2dc>)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039e8:	4b22      	ldr	r3, [pc, #136]	; (8003a74 <HAL_GPIO_Init+0x2dc>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4013      	ands	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a0c:	4a19      	ldr	r2, [pc, #100]	; (8003a74 <HAL_GPIO_Init+0x2dc>)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a12:	4b18      	ldr	r3, [pc, #96]	; (8003a74 <HAL_GPIO_Init+0x2dc>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a36:	4a0f      	ldr	r2, [pc, #60]	; (8003a74 <HAL_GPIO_Init+0x2dc>)
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f47f aeab 	bne.w	80037a8 <HAL_GPIO_Init+0x10>
  }
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40010000 	.word	0x40010000
 8003a64:	48000400 	.word	0x48000400
 8003a68:	48000800 	.word	0x48000800
 8003a6c:	48000c00 	.word	0x48000c00
 8003a70:	48001000 	.word	0x48001000
 8003a74:	58000800 	.word	0x58000800

08003a78 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003a7e:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <HAL_HSEM_IRQHandler+0x30>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003a84:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <HAL_HSEM_IRQHandler+0x30>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	4906      	ldr	r1, [pc, #24]	; (8003aa8 <HAL_HSEM_IRQHandler+0x30>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003a92:	4a05      	ldr	r2, [pc, #20]	; (8003aa8 <HAL_HSEM_IRQHandler+0x30>)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f807 	bl	8003aac <HAL_HSEM_FreeCallback>
}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	58001500 	.word	0x58001500

08003aac <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a04      	ldr	r2, [pc, #16]	; (8003adc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ace:	6013      	str	r3, [r2, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	58000400 	.word	0x58000400

08003ae0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ae4:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	58000400 	.word	0x58000400

08003afc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b0e:	d101      	bne.n	8003b14 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_RCC_HSE_Enable>:
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b32:	6013      	str	r3, [r2, #0]
}
 8003b34:	bf00      	nop
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <LL_RCC_HSE_Disable>:
{
 8003b3e:	b480      	push	{r7}
 8003b40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b50:	6013      	str	r3, [r2, #0]
}
 8003b52:	bf00      	nop
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <LL_RCC_HSE_IsReady>:
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b6e:	d101      	bne.n	8003b74 <LL_RCC_HSE_IsReady+0x18>
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <LL_RCC_HSE_IsReady+0x1a>
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <LL_RCC_HSI_Enable>:
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b92:	6013      	str	r3, [r2, #0]
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <LL_RCC_HSI_Disable>:
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb0:	6013      	str	r3, [r2, #0]
}
 8003bb2:	bf00      	nop
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <LL_RCC_HSI_IsReady>:
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bce:	d101      	bne.n	8003bd4 <LL_RCC_HSI_IsReady+0x18>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <LL_RCC_HSI_IsReady+0x1a>
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	061b      	lsls	r3, r3, #24
 8003bf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	604b      	str	r3, [r1, #4]
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <LL_RCC_HSI48_Enable>:
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003c22:	bf00      	nop
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <LL_RCC_HSI48_Disable>:
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c3c:	f023 0301 	bic.w	r3, r3, #1
 8003c40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <LL_RCC_HSI48_IsReady>:
{
 8003c4e:	b480      	push	{r7}
 8003c50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d101      	bne.n	8003c66 <LL_RCC_HSI48_IsReady+0x18>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <LL_RCC_HSI48_IsReady+0x1a>
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <LL_RCC_LSE_Enable>:
{
 8003c72:	b480      	push	{r7}
 8003c74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c8a:	bf00      	nop
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <LL_RCC_LSE_Disable>:
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003cac:	bf00      	nop
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <LL_RCC_LSE_EnableBypass>:
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cc6:	f043 0304 	orr.w	r3, r3, #4
 8003cca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003cce:	bf00      	nop
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <LL_RCC_LSE_DisableBypass>:
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ce8:	f023 0304 	bic.w	r3, r3, #4
 8003cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <LL_RCC_LSE_IsReady>:
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d101      	bne.n	8003d12 <LL_RCC_LSE_IsReady+0x18>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <LL_RCC_LSE_IsReady+0x1a>
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <LL_RCC_LSI1_Enable>:
{
 8003d1e:	b480      	push	{r7}
 8003d20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d36:	bf00      	nop
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <LL_RCC_LSI1_Disable>:
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d50:	f023 0301 	bic.w	r3, r3, #1
 8003d54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d58:	bf00      	nop
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <LL_RCC_LSI1_IsReady>:
{
 8003d62:	b480      	push	{r7}
 8003d64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d101      	bne.n	8003d7a <LL_RCC_LSI1_IsReady+0x18>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <LL_RCC_LSI1_IsReady+0x1a>
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <LL_RCC_LSI2_Enable>:
{
 8003d86:	b480      	push	{r7}
 8003d88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d96:	f043 0304 	orr.w	r3, r3, #4
 8003d9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d9e:	bf00      	nop
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <LL_RCC_LSI2_Disable>:
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003db8:	f023 0304 	bic.w	r3, r3, #4
 8003dbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003dc0:	bf00      	nop
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <LL_RCC_LSI2_IsReady>:
{
 8003dca:	b480      	push	{r7}
 8003dcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d101      	bne.n	8003de2 <LL_RCC_LSI2_IsReady+0x18>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <LL_RCC_LSI2_IsReady+0x1a>
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <LL_RCC_LSI2_SetTrimming>:
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	021b      	lsls	r3, r3, #8
 8003e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <LL_RCC_MSI_Enable>:
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	6013      	str	r3, [r2, #0]
}
 8003e30:	bf00      	nop
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <LL_RCC_MSI_Disable>:
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	6013      	str	r3, [r2, #0]
}
 8003e4e:	bf00      	nop
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <LL_RCC_MSI_IsReady>:
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d101      	bne.n	8003e6e <LL_RCC_MSI_IsReady+0x16>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <LL_RCC_MSI_IsReady+0x18>
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <LL_RCC_MSI_SetRange>:
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <LL_RCC_MSI_GetRange>:
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2bb0      	cmp	r3, #176	; 0xb0
 8003eb8:	d901      	bls.n	8003ebe <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003eba:	23b0      	movs	r3, #176	; 0xb0
 8003ebc:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003ebe:	687b      	ldr	r3, [r7, #4]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <LL_RCC_MSI_SetCalibTrimming>:
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	604b      	str	r3, [r1, #4]
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <LL_RCC_SetSysClkSource>:
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f023 0203 	bic.w	r2, r3, #3
 8003f08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	608b      	str	r3, [r1, #8]
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <LL_RCC_GetSysClkSource>:
{
 8003f1e:	b480      	push	{r7}
 8003f20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 030c 	and.w	r3, r3, #12
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <LL_RCC_SetAHBPrescaler>:
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	608b      	str	r3, [r1, #8]
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <LL_C2_RCC_SetAHBPrescaler>:
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <LL_RCC_SetAHB4Prescaler>:
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f96:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f9a:	f023 020f 	bic.w	r2, r3, #15
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	091b      	lsrs	r3, r3, #4
 8003fa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <LL_RCC_SetAPB1Prescaler>:
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	608b      	str	r3, [r1, #8]
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <LL_RCC_SetAPB2Prescaler>:
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	608b      	str	r3, [r1, #8]
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <LL_RCC_GetAHBPrescaler>:
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800400c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004016:	4618      	mov	r0, r3
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <LL_C2_RCC_GetAHBPrescaler>:
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8004024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004028:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800402c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <LL_RCC_GetAHB4Prescaler>:
{
 800403a:	b480      	push	{r7}
 800403c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800403e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004042:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800404c:	4618      	mov	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <LL_RCC_GetAPB1Prescaler>:
{
 8004056:	b480      	push	{r7}
 8004058:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800405a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004064:	4618      	mov	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <LL_RCC_GetAPB2Prescaler>:
{
 800406e:	b480      	push	{r7}
 8004070:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800407c:	4618      	mov	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004086:	b480      	push	{r7}
 8004088:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800408a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004094:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004098:	6013      	str	r3, [r2, #0]
}
 800409a:	bf00      	nop
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80040a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040b6:	6013      	str	r3, [r2, #0]
}
 80040b8:	bf00      	nop
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80040c2:	b480      	push	{r7}
 80040c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80040c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040d4:	d101      	bne.n	80040da <LL_RCC_PLL_IsReady+0x18>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <LL_RCC_PLL_IsReady+0x1a>
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80040e6:	b480      	push	{r7}
 80040e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80040ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	0a1b      	lsrs	r3, r3, #8
 80040f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800410e:	4618      	mov	r0, r3
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800411c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004126:	4618      	mov	r0, r3
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f003 0303 	and.w	r3, r3, #3
}
 800413e:	4618      	mov	r0, r3
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800414c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415a:	d101      	bne.n	8004160 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004174:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004180:	d101      	bne.n	8004186 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004192:	b480      	push	{r7}
 8004194:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800419e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a6:	d101      	bne.n	80041ac <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80041bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041ca:	d101      	bne.n	80041d0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80041cc:	2301      	movs	r3, #1
 80041ce:	e000      	b.n	80041d2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80041e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041ee:	d101      	bne.n	80041f4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004200:	b590      	push	{r4, r7, lr}
 8004202:	b08d      	sub	sp, #52	; 0x34
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e37e      	b.n	8004910 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8092 	beq.w	8004344 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004220:	f7ff fe7d 	bl	8003f1e <LL_RCC_GetSysClkSource>
 8004224:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004226:	f7ff ff83 	bl	8004130 <LL_RCC_PLL_GetMainSource>
 800422a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800422c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422e:	2b00      	cmp	r3, #0
 8004230:	d005      	beq.n	800423e <HAL_RCC_OscConfig+0x3e>
 8004232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004234:	2b0c      	cmp	r3, #12
 8004236:	d14c      	bne.n	80042d2 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	2b01      	cmp	r3, #1
 800423c:	d149      	bne.n	80042d2 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800423e:	f7ff fe0b 	bl	8003e58 <LL_RCC_MSI_IsReady>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_RCC_OscConfig+0x54>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e35d      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004258:	f7ff fe23 	bl	8003ea2 <LL_RCC_MSI_GetRange>
 800425c:	4603      	mov	r3, r0
 800425e:	429c      	cmp	r4, r3
 8004260:	d914      	bls.n	800428c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fd72 	bl	8004d50 <RCC_SetFlashLatencyFromMSIRange>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e34c      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fdfd 	bl	8003e7a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff fe21 	bl	8003ecc <LL_RCC_MSI_SetCalibTrimming>
 800428a:	e013      	b.n	80042b4 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff fdf2 	bl	8003e7a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff fe16 	bl	8003ecc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fd53 	bl	8004d50 <RCC_SetFlashLatencyFromMSIRange>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e32d      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80042b4:	f000 fcda 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 80042b8:	4602      	mov	r2, r0
 80042ba:	4bb3      	ldr	r3, [pc, #716]	; (8004588 <HAL_RCC_OscConfig+0x388>)
 80042bc:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042be:	4bb3      	ldr	r3, [pc, #716]	; (800458c <HAL_RCC_OscConfig+0x38c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fe f918 	bl	80024f8 <HAL_InitTick>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d039      	beq.n	8004342 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e31e      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d01e      	beq.n	8004318 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042da:	f7ff fd9f 	bl	8003e1c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042de:	f7fe fde7 	bl	8002eb0 <HAL_GetTick>
 80042e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042e6:	f7fe fde3 	bl	8002eb0 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e30b      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 80042f8:	f7ff fdae 	bl	8003e58 <LL_RCC_MSI_IsReady>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f1      	beq.n	80042e6 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff fdb7 	bl	8003e7a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff fddb 	bl	8003ecc <LL_RCC_MSI_SetCalibTrimming>
 8004316:	e015      	b.n	8004344 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004318:	f7ff fd8f 	bl	8003e3a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800431c:	f7fe fdc8 	bl	8002eb0 <HAL_GetTick>
 8004320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004324:	f7fe fdc4 	bl	8002eb0 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e2ec      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004336:	f7ff fd8f 	bl	8003e58 <LL_RCC_MSI_IsReady>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1f1      	bne.n	8004324 <HAL_RCC_OscConfig+0x124>
 8004340:	e000      	b.n	8004344 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004342:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d04e      	beq.n	80043ee <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004350:	f7ff fde5 	bl	8003f1e <LL_RCC_GetSysClkSource>
 8004354:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004356:	f7ff feeb 	bl	8004130 <LL_RCC_PLL_GetMainSource>
 800435a:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	2b08      	cmp	r3, #8
 8004360:	d005      	beq.n	800436e <HAL_RCC_OscConfig+0x16e>
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	2b0c      	cmp	r3, #12
 8004366:	d10d      	bne.n	8004384 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b03      	cmp	r3, #3
 800436c:	d10a      	bne.n	8004384 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800436e:	f7ff fbf5 	bl	8003b5c <LL_RCC_HSE_IsReady>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d039      	beq.n	80043ec <HAL_RCC_OscConfig+0x1ec>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d135      	bne.n	80043ec <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e2c5      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800438c:	d102      	bne.n	8004394 <HAL_RCC_OscConfig+0x194>
 800438e:	f7ff fbc7 	bl	8003b20 <LL_RCC_HSE_Enable>
 8004392:	e001      	b.n	8004398 <HAL_RCC_OscConfig+0x198>
 8004394:	f7ff fbd3 	bl	8003b3e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d012      	beq.n	80043c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a0:	f7fe fd86 	bl	8002eb0 <HAL_GetTick>
 80043a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a8:	f7fe fd82 	bl	8002eb0 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	; 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e2aa      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80043ba:	f7ff fbcf 	bl	8003b5c <LL_RCC_HSE_IsReady>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f1      	beq.n	80043a8 <HAL_RCC_OscConfig+0x1a8>
 80043c4:	e013      	b.n	80043ee <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c6:	f7fe fd73 	bl	8002eb0 <HAL_GetTick>
 80043ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ce:	f7fe fd6f 	bl	8002eb0 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b64      	cmp	r3, #100	; 0x64
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e297      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 80043e0:	f7ff fbbc 	bl	8003b5c <LL_RCC_HSE_IsReady>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f1      	bne.n	80043ce <HAL_RCC_OscConfig+0x1ce>
 80043ea:	e000      	b.n	80043ee <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d051      	beq.n	800449e <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043fa:	f7ff fd90 	bl	8003f1e <LL_RCC_GetSysClkSource>
 80043fe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004400:	f7ff fe96 	bl	8004130 <LL_RCC_PLL_GetMainSource>
 8004404:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b04      	cmp	r3, #4
 800440a:	d005      	beq.n	8004418 <HAL_RCC_OscConfig+0x218>
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2b0c      	cmp	r3, #12
 8004410:	d113      	bne.n	800443a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2b02      	cmp	r3, #2
 8004416:	d110      	bne.n	800443a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004418:	f7ff fbd0 	bl	8003bbc <LL_RCC_HSI_IsReady>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <HAL_RCC_OscConfig+0x22e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e270      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fbd4 	bl	8003be0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004438:	e031      	b.n	800449e <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d019      	beq.n	8004476 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004442:	f7ff fb9d 	bl	8003b80 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004446:	f7fe fd33 	bl	8002eb0 <HAL_GetTick>
 800444a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800444e:	f7fe fd2f 	bl	8002eb0 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e257      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004460:	f7ff fbac 	bl	8003bbc <LL_RCC_HSI_IsReady>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0f1      	beq.n	800444e <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff fbb6 	bl	8003be0 <LL_RCC_HSI_SetCalibTrimming>
 8004474:	e013      	b.n	800449e <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004476:	f7ff fb92 	bl	8003b9e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447a:	f7fe fd19 	bl	8002eb0 <HAL_GetTick>
 800447e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004482:	f7fe fd15 	bl	8002eb0 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e23d      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004494:	f7ff fb92 	bl	8003bbc <LL_RCC_HSI_IsReady>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f1      	bne.n	8004482 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 80a3 	beq.w	80045fe <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d076      	beq.n	80045ae <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d046      	beq.n	800455a <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80044cc:	f7ff fc49 	bl	8003d62 <LL_RCC_LSI1_IsReady>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d113      	bne.n	80044fe <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80044d6:	f7ff fc22 	bl	8003d1e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044da:	f7fe fce9 	bl	8002eb0 <HAL_GetTick>
 80044de:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80044e2:	f7fe fce5 	bl	8002eb0 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e20d      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80044f4:	f7ff fc35 	bl	8003d62 <LL_RCC_LSI1_IsReady>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f1      	beq.n	80044e2 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80044fe:	f7ff fc42 	bl	8003d86 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004502:	f7fe fcd5 	bl	8002eb0 <HAL_GetTick>
 8004506:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800450a:	f7fe fcd1 	bl	8002eb0 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b03      	cmp	r3, #3
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e1f9      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800451c:	f7ff fc55 	bl	8003dca <LL_RCC_LSI2_IsReady>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f1      	beq.n	800450a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff fc5f 	bl	8003dee <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004530:	f7ff fc06 	bl	8003d40 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fe fcbc 	bl	8002eb0 <HAL_GetTick>
 8004538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800453c:	f7fe fcb8 	bl	8002eb0 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e1e0      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800454e:	f7ff fc08 	bl	8003d62 <LL_RCC_LSI1_IsReady>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f1      	bne.n	800453c <HAL_RCC_OscConfig+0x33c>
 8004558:	e051      	b.n	80045fe <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800455a:	f7ff fbe0 	bl	8003d1e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455e:	f7fe fca7 	bl	8002eb0 <HAL_GetTick>
 8004562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004566:	f7fe fca3 	bl	8002eb0 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e1cb      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004578:	f7ff fbf3 	bl	8003d62 <LL_RCC_LSI1_IsReady>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f1      	beq.n	8004566 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004582:	f7ff fc11 	bl	8003da8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004586:	e00c      	b.n	80045a2 <HAL_RCC_OscConfig+0x3a2>
 8004588:	20000004 	.word	0x20000004
 800458c:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004590:	f7fe fc8e 	bl	8002eb0 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b03      	cmp	r3, #3
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e1b6      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80045a2:	f7ff fc12 	bl	8003dca <LL_RCC_LSI2_IsReady>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f1      	bne.n	8004590 <HAL_RCC_OscConfig+0x390>
 80045ac:	e027      	b.n	80045fe <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80045ae:	f7ff fbfb 	bl	8003da8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b2:	f7fe fc7d 	bl	8002eb0 <HAL_GetTick>
 80045b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80045b8:	e008      	b.n	80045cc <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80045ba:	f7fe fc79 	bl	8002eb0 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b03      	cmp	r3, #3
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e1a1      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80045cc:	f7ff fbfd 	bl	8003dca <LL_RCC_LSI2_IsReady>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f1      	bne.n	80045ba <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80045d6:	f7ff fbb3 	bl	8003d40 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045da:	f7fe fc69 	bl	8002eb0 <HAL_GetTick>
 80045de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80045e2:	f7fe fc65 	bl	8002eb0 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e18d      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80045f4:	f7ff fbb5 	bl	8003d62 <LL_RCC_LSI1_IsReady>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f1      	bne.n	80045e2 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b00      	cmp	r3, #0
 8004608:	d05b      	beq.n	80046c2 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800460a:	4bb5      	ldr	r3, [pc, #724]	; (80048e0 <HAL_RCC_OscConfig+0x6e0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004612:	2b00      	cmp	r3, #0
 8004614:	d114      	bne.n	8004640 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004616:	f7ff fa53 	bl	8003ac0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800461a:	f7fe fc49 	bl	8002eb0 <HAL_GetTick>
 800461e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004622:	f7fe fc45 	bl	8002eb0 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e16d      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004634:	4baa      	ldr	r3, [pc, #680]	; (80048e0 <HAL_RCC_OscConfig+0x6e0>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0f0      	beq.n	8004622 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d102      	bne.n	800464e <HAL_RCC_OscConfig+0x44e>
 8004648:	f7ff fb13 	bl	8003c72 <LL_RCC_LSE_Enable>
 800464c:	e00c      	b.n	8004668 <HAL_RCC_OscConfig+0x468>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2b05      	cmp	r3, #5
 8004654:	d104      	bne.n	8004660 <HAL_RCC_OscConfig+0x460>
 8004656:	f7ff fb2e 	bl	8003cb6 <LL_RCC_LSE_EnableBypass>
 800465a:	f7ff fb0a 	bl	8003c72 <LL_RCC_LSE_Enable>
 800465e:	e003      	b.n	8004668 <HAL_RCC_OscConfig+0x468>
 8004660:	f7ff fb18 	bl	8003c94 <LL_RCC_LSE_Disable>
 8004664:	f7ff fb38 	bl	8003cd8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d014      	beq.n	800469a <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004670:	f7fe fc1e 	bl	8002eb0 <HAL_GetTick>
 8004674:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004676:	e00a      	b.n	800468e <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004678:	f7fe fc1a 	bl	8002eb0 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	; 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e140      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800468e:	f7ff fb34 	bl	8003cfa <LL_RCC_LSE_IsReady>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0ef      	beq.n	8004678 <HAL_RCC_OscConfig+0x478>
 8004698:	e013      	b.n	80046c2 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469a:	f7fe fc09 	bl	8002eb0 <HAL_GetTick>
 800469e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80046a0:	e00a      	b.n	80046b8 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a2:	f7fe fc05 	bl	8002eb0 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e12b      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80046b8:	f7ff fb1f 	bl	8003cfa <LL_RCC_LSE_IsReady>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1ef      	bne.n	80046a2 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d02c      	beq.n	8004728 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d014      	beq.n	8004700 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046d6:	f7ff fa98 	bl	8003c0a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046da:	f7fe fbe9 	bl	8002eb0 <HAL_GetTick>
 80046de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046e2:	f7fe fbe5 	bl	8002eb0 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e10d      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80046f4:	f7ff faab 	bl	8003c4e <LL_RCC_HSI48_IsReady>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f1      	beq.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
 80046fe:	e013      	b.n	8004728 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004700:	f7ff fa94 	bl	8003c2c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004704:	f7fe fbd4 	bl	8002eb0 <HAL_GetTick>
 8004708:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800470c:	f7fe fbd0 	bl	8002eb0 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e0f8      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800471e:	f7ff fa96 	bl	8003c4e <LL_RCC_HSI48_IsReady>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f1      	bne.n	800470c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80ee 	beq.w	800490e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004732:	f7ff fbf4 	bl	8003f1e <LL_RCC_GetSysClkSource>
 8004736:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	2b02      	cmp	r3, #2
 8004746:	f040 80af 	bne.w	80048a8 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f003 0203 	and.w	r2, r3, #3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	429a      	cmp	r2, r3
 8004756:	d123      	bne.n	80047a0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004762:	429a      	cmp	r2, r3
 8004764:	d11c      	bne.n	80047a0 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	0a1b      	lsrs	r3, r3, #8
 800476a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004772:	429a      	cmp	r2, r3
 8004774:	d114      	bne.n	80047a0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004780:	429a      	cmp	r2, r3
 8004782:	d10d      	bne.n	80047a0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800478e:	429a      	cmp	r2, r3
 8004790:	d106      	bne.n	80047a0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800479c:	429a      	cmp	r2, r3
 800479e:	d05d      	beq.n	800485c <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	2b0c      	cmp	r3, #12
 80047a4:	d058      	beq.n	8004858 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0ab      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047b8:	f7ff fc74 	bl	80040a4 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047bc:	f7fe fb78 	bl	8002eb0 <HAL_GetTick>
 80047c0:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fe fb74 	bl	8002eb0 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e09c      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1ef      	bne.n	80047c4 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	4b3e      	ldr	r3, [pc, #248]	; (80048e4 <HAL_RCC_OscConfig+0x6e4>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047f6:	4311      	orrs	r1, r2
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047fc:	0212      	lsls	r2, r2, #8
 80047fe:	4311      	orrs	r1, r2
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004804:	4311      	orrs	r1, r2
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800480a:	4311      	orrs	r1, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004810:	430a      	orrs	r2, r1
 8004812:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004816:	4313      	orrs	r3, r2
 8004818:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800481a:	f7ff fc34 	bl	8004086 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800481e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800482c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800482e:	f7fe fb3f 	bl	8002eb0 <HAL_GetTick>
 8004832:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004836:	f7fe fb3b 	bl	8002eb0 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e063      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0ef      	beq.n	8004836 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004856:	e05a      	b.n	800490e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e059      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800485c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d151      	bne.n	800490e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800486a:	f7ff fc0c 	bl	8004086 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800486e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800487c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800487e:	f7fe fb17 	bl	8002eb0 <HAL_GetTick>
 8004882:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004886:	f7fe fb13 	bl	8002eb0 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e03b      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0ef      	beq.n	8004886 <HAL_RCC_OscConfig+0x686>
 80048a6:	e032      	b.n	800490e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	2b0c      	cmp	r3, #12
 80048ac:	d02d      	beq.n	800490a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ae:	f7ff fbf9 	bl	80040a4 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80048b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048bc:	f023 0303 	bic.w	r3, r3, #3
 80048c0:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80048c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048cc:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80048d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d6:	f7fe faeb 	bl	8002eb0 <HAL_GetTick>
 80048da:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048dc:	e00d      	b.n	80048fa <HAL_RCC_OscConfig+0x6fa>
 80048de:	bf00      	nop
 80048e0:	58000400 	.word	0x58000400
 80048e4:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e8:	f7fe fae2 	bl	8002eb0 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e00a      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1ef      	bne.n	80048e8 <HAL_RCC_OscConfig+0x6e8>
 8004908:	e001      	b.n	800490e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3734      	adds	r7, #52	; 0x34
 8004914:	46bd      	mov	sp, r7
 8004916:	bd90      	pop	{r4, r7, pc}

08004918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e12d      	b.n	8004b88 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800492c:	4b98      	ldr	r3, [pc, #608]	; (8004b90 <HAL_RCC_ClockConfig+0x278>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d91b      	bls.n	8004972 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493a:	4b95      	ldr	r3, [pc, #596]	; (8004b90 <HAL_RCC_ClockConfig+0x278>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f023 0207 	bic.w	r2, r3, #7
 8004942:	4993      	ldr	r1, [pc, #588]	; (8004b90 <HAL_RCC_ClockConfig+0x278>)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	4313      	orrs	r3, r2
 8004948:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494a:	f7fe fab1 	bl	8002eb0 <HAL_GetTick>
 800494e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004950:	e008      	b.n	8004964 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004952:	f7fe faad 	bl	8002eb0 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e111      	b.n	8004b88 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004964:	4b8a      	ldr	r3, [pc, #552]	; (8004b90 <HAL_RCC_ClockConfig+0x278>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d1ef      	bne.n	8004952 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d016      	beq.n	80049ac <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff fad7 	bl	8003f36 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004988:	f7fe fa92 	bl	8002eb0 <HAL_GetTick>
 800498c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004990:	f7fe fa8e 	bl	8002eb0 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e0f2      	b.n	8004b88 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80049a2:	f7ff fbd1 	bl	8004148 <LL_RCC_IsActiveFlag_HPRE>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0f1      	beq.n	8004990 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0320 	and.w	r3, r3, #32
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d016      	beq.n	80049e6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff face 	bl	8003f5e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049c2:	f7fe fa75 	bl	8002eb0 <HAL_GetTick>
 80049c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049ca:	f7fe fa71 	bl	8002eb0 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e0d5      	b.n	8004b88 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80049dc:	f7ff fbc6 	bl	800416c <LL_RCC_IsActiveFlag_C2HPRE>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f1      	beq.n	80049ca <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d016      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fac7 	bl	8003f8a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049fc:	f7fe fa58 	bl	8002eb0 <HAL_GetTick>
 8004a00:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a04:	f7fe fa54 	bl	8002eb0 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e0b8      	b.n	8004b88 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004a16:	f7ff fbbc 	bl	8004192 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0f1      	beq.n	8004a04 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d016      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff fac1 	bl	8003fb8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a36:	f7fe fa3b 	bl	8002eb0 <HAL_GetTick>
 8004a3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a3e:	f7fe fa37 	bl	8002eb0 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e09b      	b.n	8004b88 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004a50:	f7ff fbb2 	bl	80041b8 <LL_RCC_IsActiveFlag_PPRE1>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0f1      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d017      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff fab7 	bl	8003fe0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a72:	f7fe fa1d 	bl	8002eb0 <HAL_GetTick>
 8004a76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a7a:	f7fe fa19 	bl	8002eb0 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e07d      	b.n	8004b88 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004a8c:	f7ff fba6 	bl	80041dc <LL_RCC_IsActiveFlag_PPRE2>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f1      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d043      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d106      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004aaa:	f7ff f857 	bl	8003b5c <LL_RCC_HSE_IsReady>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d11e      	bne.n	8004af2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e067      	b.n	8004b88 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d106      	bne.n	8004ace <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004ac0:	f7ff faff 	bl	80040c2 <LL_RCC_PLL_IsReady>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d113      	bne.n	8004af2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e05c      	b.n	8004b88 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004ad6:	f7ff f9bf 	bl	8003e58 <LL_RCC_MSI_IsReady>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d108      	bne.n	8004af2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e051      	b.n	8004b88 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004ae4:	f7ff f86a 	bl	8003bbc <LL_RCC_HSI_IsReady>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e04a      	b.n	8004b88 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff f9fd 	bl	8003ef6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004afc:	f7fe f9d8 	bl	8002eb0 <HAL_GetTick>
 8004b00:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b02:	e00a      	b.n	8004b1a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b04:	f7fe f9d4 	bl	8002eb0 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e036      	b.n	8004b88 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1a:	f7ff fa00 	bl	8003f1e <LL_RCC_GetSysClkSource>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d1ec      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b2a:	4b19      	ldr	r3, [pc, #100]	; (8004b90 <HAL_RCC_ClockConfig+0x278>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d21b      	bcs.n	8004b70 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b38:	4b15      	ldr	r3, [pc, #84]	; (8004b90 <HAL_RCC_ClockConfig+0x278>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f023 0207 	bic.w	r2, r3, #7
 8004b40:	4913      	ldr	r1, [pc, #76]	; (8004b90 <HAL_RCC_ClockConfig+0x278>)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b48:	f7fe f9b2 	bl	8002eb0 <HAL_GetTick>
 8004b4c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004b50:	f7fe f9ae 	bl	8002eb0 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e012      	b.n	8004b88 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b62:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <HAL_RCC_ClockConfig+0x278>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d1ef      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004b70:	f000 f87c 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 8004b74:	4602      	mov	r2, r0
 8004b76:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <HAL_RCC_ClockConfig+0x27c>)
 8004b78:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004b7a:	f7fe f9a5 	bl	8002ec8 <HAL_GetTickPrio>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fd fcb9 	bl	80024f8 <HAL_InitTick>
 8004b86:	4603      	mov	r3, r0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	58004000 	.word	0x58004000
 8004b94:	20000004 	.word	0x20000004

08004b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b98:	b590      	push	{r4, r7, lr}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b9e:	f7ff f9be 	bl	8003f1e <LL_RCC_GetSysClkSource>
 8004ba2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10a      	bne.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004baa:	f7ff f97a 	bl	8003ea2 <LL_RCC_MSI_GetRange>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	091b      	lsrs	r3, r3, #4
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	4a2a      	ldr	r2, [pc, #168]	; (8004c60 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	e04a      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d102      	bne.n	8004bcc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bc6:	4b27      	ldr	r3, [pc, #156]	; (8004c64 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	e044      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d10a      	bne.n	8004be8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004bd2:	f7fe ff93 	bl	8003afc <LL_RCC_HSE_IsEnabledDiv2>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d102      	bne.n	8004be2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004bdc:	4b21      	ldr	r3, [pc, #132]	; (8004c64 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e039      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004be2:	4b21      	ldr	r3, [pc, #132]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	e036      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004be8:	f7ff faa2 	bl	8004130 <LL_RCC_PLL_GetMainSource>
 8004bec:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d002      	beq.n	8004bfa <HAL_RCC_GetSysClockFreq+0x62>
 8004bf4:	2b03      	cmp	r3, #3
 8004bf6:	d003      	beq.n	8004c00 <HAL_RCC_GetSysClockFreq+0x68>
 8004bf8:	e00d      	b.n	8004c16 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004bfa:	4b1a      	ldr	r3, [pc, #104]	; (8004c64 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004bfc:	60bb      	str	r3, [r7, #8]
        break;
 8004bfe:	e015      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004c00:	f7fe ff7c 	bl	8003afc <LL_RCC_HSE_IsEnabledDiv2>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d102      	bne.n	8004c10 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004c0a:	4b16      	ldr	r3, [pc, #88]	; (8004c64 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c0c:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004c0e:	e00d      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8004c10:	4b15      	ldr	r3, [pc, #84]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c12:	60bb      	str	r3, [r7, #8]
        break;
 8004c14:	e00a      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004c16:	f7ff f944 	bl	8003ea2 <LL_RCC_MSI_GetRange>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	091b      	lsrs	r3, r3, #4
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	4a0f      	ldr	r2, [pc, #60]	; (8004c60 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c28:	60bb      	str	r3, [r7, #8]
        break;
 8004c2a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004c2c:	f7ff fa5b 	bl	80040e6 <LL_RCC_PLL_GetN>
 8004c30:	4602      	mov	r2, r0
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	fb03 f402 	mul.w	r4, r3, r2
 8004c38:	f7ff fa6e 	bl	8004118 <LL_RCC_PLL_GetDivider>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	091b      	lsrs	r3, r3, #4
 8004c40:	3301      	adds	r3, #1
 8004c42:	fbb4 f4f3 	udiv	r4, r4, r3
 8004c46:	f7ff fa5b 	bl	8004100 <LL_RCC_PLL_GetR>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	0f5b      	lsrs	r3, r3, #29
 8004c4e:	3301      	adds	r3, #1
 8004c50:	fbb4 f3f3 	udiv	r3, r4, r3
 8004c54:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004c56:	68fb      	ldr	r3, [r7, #12]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd90      	pop	{r4, r7, pc}
 8004c60:	08012bb4 	.word	0x08012bb4
 8004c64:	00f42400 	.word	0x00f42400
 8004c68:	01e84800 	.word	0x01e84800

08004c6c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c6c:	b598      	push	{r3, r4, r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004c70:	f7ff ff92 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
 8004c74:	4604      	mov	r4, r0
 8004c76:	f7ff f9c7 	bl	8004008 <LL_RCC_GetAHBPrescaler>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	4a03      	ldr	r2, [pc, #12]	; (8004c90 <HAL_RCC_GetHCLKFreq+0x24>)
 8004c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c88:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	bd98      	pop	{r3, r4, r7, pc}
 8004c90:	08012b54 	.word	0x08012b54

08004c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c94:	b598      	push	{r3, r4, r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004c98:	f7ff ffe8 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	f7ff f9da 	bl	8004056 <LL_RCC_GetAPB1Prescaler>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	0a1b      	lsrs	r3, r3, #8
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	4a04      	ldr	r2, [pc, #16]	; (8004cbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb0:	f003 031f 	and.w	r3, r3, #31
 8004cb4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	bd98      	pop	{r3, r4, r7, pc}
 8004cbc:	08012b94 	.word	0x08012b94

08004cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cc0:	b598      	push	{r3, r4, r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004cc4:	f7ff ffd2 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 8004cc8:	4604      	mov	r4, r0
 8004cca:	f7ff f9d0 	bl	800406e <LL_RCC_GetAPB2Prescaler>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	0adb      	lsrs	r3, r3, #11
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	4a04      	ldr	r2, [pc, #16]	; (8004ce8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cdc:	f003 031f 	and.w	r3, r3, #31
 8004ce0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	bd98      	pop	{r3, r4, r7, pc}
 8004ce8:	08012b94 	.word	0x08012b94

08004cec <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	226f      	movs	r2, #111	; 0x6f
 8004cfa:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8004cfc:	f7ff f90f 	bl	8003f1e <LL_RCC_GetSysClkSource>
 8004d00:	4602      	mov	r2, r0
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8004d06:	f7ff f97f 	bl	8004008 <LL_RCC_GetAHBPrescaler>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8004d10:	f7ff f9a1 	bl	8004056 <LL_RCC_GetAPB1Prescaler>
 8004d14:	4602      	mov	r2, r0
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8004d1a:	f7ff f9a8 	bl	800406e <LL_RCC_GetAPB2Prescaler>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8004d24:	f7ff f97c 	bl	8004020 <LL_C2_RCC_GetAHBPrescaler>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8004d2e:	f7ff f984 	bl	800403a <LL_RCC_GetAHB4Prescaler>
 8004d32:	4602      	mov	r2, r0
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004d38:	4b04      	ldr	r3, [pc, #16]	; (8004d4c <HAL_RCC_GetClockConfig+0x60>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0207 	and.w	r2, r3, #7
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	601a      	str	r2, [r3, #0]
}
 8004d44:	bf00      	nop
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	58004000 	.word	0x58004000

08004d50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004d50:	b590      	push	{r4, r7, lr}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2bb0      	cmp	r3, #176	; 0xb0
 8004d5c:	d903      	bls.n	8004d66 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004d5e:	4b15      	ldr	r3, [pc, #84]	; (8004db4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	e007      	b.n	8004d76 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	091b      	lsrs	r3, r3, #4
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	4a11      	ldr	r2, [pc, #68]	; (8004db4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d74:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004d76:	f7ff f960 	bl	800403a <LL_RCC_GetAHB4Prescaler>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	091b      	lsrs	r3, r3, #4
 8004d7e:	f003 030f 	and.w	r3, r3, #15
 8004d82:	4a0d      	ldr	r2, [pc, #52]	; (8004db8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	0c9c      	lsrs	r4, r3, #18
 8004d9a:	f7fe fea1 	bl	8003ae0 <HAL_PWREx_GetVoltageRange>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	4619      	mov	r1, r3
 8004da2:	4620      	mov	r0, r4
 8004da4:	f000 f80c 	bl	8004dc0 <RCC_SetFlashLatency>
 8004da8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd90      	pop	{r4, r7, pc}
 8004db2:	bf00      	nop
 8004db4:	08012bb4 	.word	0x08012bb4
 8004db8:	08012b54 	.word	0x08012b54
 8004dbc:	431bde83 	.word	0x431bde83

08004dc0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004dc0:	b590      	push	{r4, r7, lr}
 8004dc2:	b093      	sub	sp, #76	; 0x4c
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004dca:	4b39      	ldr	r3, [pc, #228]	; (8004eb0 <RCC_SetFlashLatency+0xf0>)
 8004dcc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004dd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004dd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004dd6:	4a37      	ldr	r2, [pc, #220]	; (8004eb4 <RCC_SetFlashLatency+0xf4>)
 8004dd8:	f107 031c 	add.w	r3, r7, #28
 8004ddc:	ca07      	ldmia	r2, {r0, r1, r2}
 8004dde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004de2:	4b35      	ldr	r3, [pc, #212]	; (8004eb8 <RCC_SetFlashLatency+0xf8>)
 8004de4:	f107 040c 	add.w	r4, r7, #12
 8004de8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004dea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004dee:	2300      	movs	r3, #0
 8004df0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df8:	d11c      	bne.n	8004e34 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8004dfe:	e015      	b.n	8004e2c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e08:	4413      	add	r3, r2
 8004e0a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d808      	bhi.n	8004e26 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004e22:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004e24:	e022      	b.n	8004e6c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e28:	3301      	adds	r3, #1
 8004e2a:	643b      	str	r3, [r7, #64]	; 0x40
 8004e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d9e6      	bls.n	8004e00 <RCC_SetFlashLatency+0x40>
 8004e32:	e01b      	b.n	8004e6c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004e34:	2300      	movs	r3, #0
 8004e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e38:	e015      	b.n	8004e66 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e42:	4413      	add	r3, r2
 8004e44:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d808      	bhi.n	8004e60 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e56:	4413      	add	r3, r2
 8004e58:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004e5c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004e5e:	e005      	b.n	8004e6c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e62:	3301      	adds	r3, #1
 8004e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d9e6      	bls.n	8004e3a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004e6c:	4b13      	ldr	r3, [pc, #76]	; (8004ebc <RCC_SetFlashLatency+0xfc>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f023 0207 	bic.w	r2, r3, #7
 8004e74:	4911      	ldr	r1, [pc, #68]	; (8004ebc <RCC_SetFlashLatency+0xfc>)
 8004e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e7c:	f7fe f818 	bl	8002eb0 <HAL_GetTick>
 8004e80:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e82:	e008      	b.n	8004e96 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e84:	f7fe f814 	bl	8002eb0 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e007      	b.n	8004ea6 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e96:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <RCC_SetFlashLatency+0xfc>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d1ef      	bne.n	8004e84 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	374c      	adds	r7, #76	; 0x4c
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd90      	pop	{r4, r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	08012794 	.word	0x08012794
 8004eb4:	080127a4 	.word	0x080127a4
 8004eb8:	080127b0 	.word	0x080127b0
 8004ebc:	58004000 	.word	0x58004000

08004ec0 <LL_RCC_LSE_IsEnabled>:
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <LL_RCC_LSE_IsEnabled+0x18>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e000      	b.n	8004eda <LL_RCC_LSE_IsEnabled+0x1a>
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <LL_RCC_LSE_IsReady>:
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d101      	bne.n	8004efc <LL_RCC_LSE_IsReady+0x18>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e000      	b.n	8004efe <LL_RCC_LSE_IsReady+0x1a>
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <LL_RCC_SetRFWKPClockSource>:
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <LL_RCC_SetSMPSClockSource>:
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	f023 0203 	bic.w	r2, r3, #3
 8004f46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <LL_RCC_SetSMPSPrescaler>:
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <LL_RCC_SetUSARTClockSource>:
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f94:	f023 0203 	bic.w	r2, r3, #3
 8004f98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <LL_RCC_SetLPUARTClockSource>:
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <LL_RCC_SetI2CClockSource>:
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	091b      	lsrs	r3, r3, #4
 8004ff0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	401a      	ands	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005000:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <LL_RCC_SetLPTIMClockSource>:
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800501e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005022:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	0c1b      	lsrs	r3, r3, #16
 800502a:	041b      	lsls	r3, r3, #16
 800502c:	43db      	mvns	r3, r3
 800502e:	401a      	ands	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	041b      	lsls	r3, r3, #16
 8005034:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <LL_RCC_SetSAIClockSource>:
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800505e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4313      	orrs	r3, r2
 8005066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <LL_RCC_SetRNGClockSource>:
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800507e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005086:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800508a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <LL_RCC_SetCLK48ClockSource>:
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80050aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <LL_RCC_SetUSBClockSource>:
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b082      	sub	sp, #8
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff ffe3 	bl	80050a2 <LL_RCC_SetCLK48ClockSource>
}
 80050dc:	bf00      	nop
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <LL_RCC_SetADCClockSource>:
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80050ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <LL_RCC_SetRTCClockSource>:
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005124:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <LL_RCC_GetRTCClockSource>:
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005148:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800514c:	4618      	mov	r0, r3
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <LL_RCC_ForceBackupDomainReset>:
{
 8005156:	b480      	push	{r7}
 8005158:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800515a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800515e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800516a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800516e:	bf00      	nop
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800517c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005184:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800518c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005190:	bf00      	nop
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <LL_RCC_PLLSAI1_Enable>:
{
 800519a:	b480      	push	{r7}
 800519c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800519e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051ac:	6013      	str	r3, [r2, #0]
}
 80051ae:	bf00      	nop
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <LL_RCC_PLLSAI1_Disable>:
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80051bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051ca:	6013      	str	r3, [r2, #0]
}
 80051cc:	bf00      	nop
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <LL_RCC_PLLSAI1_IsReady>:
{
 80051d6:	b480      	push	{r7}
 80051d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80051da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051e8:	d101      	bne.n	80051ee <LL_RCC_PLLSAI1_IsReady+0x18>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b088      	sub	sp, #32
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005202:	2300      	movs	r3, #0
 8005204:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005206:	2300      	movs	r3, #0
 8005208:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d033      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800521e:	d00c      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005224:	d802      	bhi.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005226:	2b00      	cmp	r3, #0
 8005228:	d010      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x52>
 800522a:	e017      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x62>
 800522c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005230:	d017      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005232:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005236:	d016      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8005238:	e010      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800523a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005248:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800524a:	e00d      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3304      	adds	r3, #4
 8005250:	4618      	mov	r0, r3
 8005252:	f000 f947 	bl	80054e4 <RCCEx_PLLSAI1_ConfigNP>
 8005256:	4603      	mov	r3, r0
 8005258:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800525a:	e005      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	77fb      	strb	r3, [r7, #31]
        break;
 8005260:	e002      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8005262:	bf00      	nop
 8005264:	e000      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8005266:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005268:	7ffb      	ldrb	r3, [r7, #31]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d105      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	4618      	mov	r0, r3
 8005274:	f7ff fee9 	bl	800504a <LL_RCC_SetSAIClockSource>
 8005278:	e001      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527a:	7ffb      	ldrb	r3, [r7, #31]
 800527c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005286:	2b00      	cmp	r3, #0
 8005288:	d046      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800528a:	f7ff ff57 	bl	800513c <LL_RCC_GetRTCClockSource>
 800528e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	429a      	cmp	r2, r3
 8005298:	d03c      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800529a:	f7fe fc11 	bl	8003ac0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d105      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff ff31 	bl	8005110 <LL_RCC_SetRTCClockSource>
 80052ae:	e02e      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80052b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80052ba:	f7ff ff4c 	bl	8005156 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80052be:	f7ff ff5b 	bl	8005178 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80052d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80052da:	f7ff fdf1 	bl	8004ec0 <LL_RCC_LSE_IsEnabled>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d114      	bne.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052e4:	f7fd fde4 	bl	8002eb0 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80052ea:	e00b      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ec:	f7fd fde0 	bl	8002eb0 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d902      	bls.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	77fb      	strb	r3, [r7, #31]
              break;
 8005302:	e004      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005304:	f7ff fdee 	bl	8004ee4 <LL_RCC_LSE_IsReady>
 8005308:	4603      	mov	r3, r0
 800530a:	2b01      	cmp	r3, #1
 800530c:	d1ee      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800530e:	7ffb      	ldrb	r3, [r7, #31]
 8005310:	77bb      	strb	r3, [r7, #30]
 8005312:	e001      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005314:	7ffb      	ldrb	r3, [r7, #31]
 8005316:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d004      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff fe2b 	bl	8004f84 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d004      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff fe36 	bl	8004fb0 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005354:	4618      	mov	r0, r3
 8005356:	f7ff fe5e 	bl	8005016 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b00      	cmp	r3, #0
 8005364:	d004      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff fe53 	bl	8005016 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d004      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff fe2b 	bl	8004fdc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d004      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff fe20 	bl	8004fdc <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d022      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7ff fe8e 	bl	80050ce <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ba:	d107      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80053bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053ca:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053d4:	d10b      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3304      	adds	r3, #4
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 f8dd 	bl	800559a <RCCEx_PLLSAI1_ConfigNQ>
 80053e0:	4603      	mov	r3, r0
 80053e2:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80053e4:	7ffb      	ldrb	r3, [r7, #31]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 80053ea:	7ffb      	ldrb	r3, [r7, #31]
 80053ec:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d02b      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005402:	d008      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800540c:	d003      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	2b00      	cmp	r3, #0
 8005414:	d105      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff fe2b 	bl	8005076 <LL_RCC_SetRNGClockSource>
 8005420:	e00a      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	2000      	movs	r0, #0
 800542e:	f7ff fe22 	bl	8005076 <LL_RCC_SetRNGClockSource>
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f7ff fe35 	bl	80050a2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005440:	d107      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800544c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005450:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545a:	2b00      	cmp	r3, #0
 800545c:	d022      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fe3e 	bl	80050e4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005470:	d107      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800547c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005480:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800548a:	d10b      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3304      	adds	r3, #4
 8005490:	4618      	mov	r0, r3
 8005492:	f000 f8dd 	bl	8005650 <RCCEx_PLLSAI1_ConfigNR>
 8005496:	4603      	mov	r3, r0
 8005498:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800549a:	7ffb      	ldrb	r3, [r7, #31]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 80054a0:	7ffb      	ldrb	r3, [r7, #31]
 80054a2:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d004      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff fd27 	bl	8004f08 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d009      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff fd46 	bl	8004f5c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff fd2d 	bl	8004f34 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80054da:	7fbb      	ldrb	r3, [r7, #30]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3720      	adds	r7, #32
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80054f0:	f7ff fe62 	bl	80051b8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054f4:	f7fd fcdc 	bl	8002eb0 <HAL_GetTick>
 80054f8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054fa:	e009      	b.n	8005510 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054fc:	f7fd fcd8 	bl	8002eb0 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d902      	bls.n	8005510 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	73fb      	strb	r3, [r7, #15]
      break;
 800550e:	e004      	b.n	800551a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005510:	f7ff fe61 	bl	80051d6 <LL_RCC_PLLSAI1_IsReady>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1f0      	bne.n	80054fc <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800551a:	7bfb      	ldrb	r3, [r7, #15]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d137      	bne.n	8005590 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	021b      	lsls	r3, r3, #8
 8005530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005534:	4313      	orrs	r3, r2
 8005536:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800554a:	4313      	orrs	r3, r2
 800554c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800554e:	f7ff fe24 	bl	800519a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005552:	f7fd fcad 	bl	8002eb0 <HAL_GetTick>
 8005556:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005558:	e009      	b.n	800556e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800555a:	f7fd fca9 	bl	8002eb0 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d902      	bls.n	800556e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	73fb      	strb	r3, [r7, #15]
        break;
 800556c:	e004      	b.n	8005578 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800556e:	f7ff fe32 	bl	80051d6 <LL_RCC_PLLSAI1_IsReady>
 8005572:	4603      	mov	r3, r0
 8005574:	2b01      	cmp	r3, #1
 8005576:	d1f0      	bne.n	800555a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d108      	bne.n	8005590 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800557e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800558c:	4313      	orrs	r3, r2
 800558e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005590:	7bfb      	ldrb	r3, [r7, #15]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b084      	sub	sp, #16
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80055a6:	f7ff fe07 	bl	80051b8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055aa:	f7fd fc81 	bl	8002eb0 <HAL_GetTick>
 80055ae:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80055b0:	e009      	b.n	80055c6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055b2:	f7fd fc7d 	bl	8002eb0 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d902      	bls.n	80055c6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	73fb      	strb	r3, [r7, #15]
      break;
 80055c4:	e004      	b.n	80055d0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80055c6:	f7ff fe06 	bl	80051d6 <LL_RCC_PLLSAI1_IsReady>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1f0      	bne.n	80055b2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d137      	bne.n	8005646 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80055d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055ea:	4313      	orrs	r3, r2
 80055ec:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80055ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005600:	4313      	orrs	r3, r2
 8005602:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005604:	f7ff fdc9 	bl	800519a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005608:	f7fd fc52 	bl	8002eb0 <HAL_GetTick>
 800560c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800560e:	e009      	b.n	8005624 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005610:	f7fd fc4e 	bl	8002eb0 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d902      	bls.n	8005624 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	73fb      	strb	r3, [r7, #15]
        break;
 8005622:	e004      	b.n	800562e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005624:	f7ff fdd7 	bl	80051d6 <LL_RCC_PLLSAI1_IsReady>
 8005628:	4603      	mov	r3, r0
 800562a:	2b01      	cmp	r3, #1
 800562c:	d1f0      	bne.n	8005610 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d108      	bne.n	8005646 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005642:	4313      	orrs	r3, r2
 8005644:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005646:	7bfb      	ldrb	r3, [r7, #15]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005658:	2300      	movs	r3, #0
 800565a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800565c:	f7ff fdac 	bl	80051b8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005660:	f7fd fc26 	bl	8002eb0 <HAL_GetTick>
 8005664:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005666:	e009      	b.n	800567c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005668:	f7fd fc22 	bl	8002eb0 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d902      	bls.n	800567c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	73fb      	strb	r3, [r7, #15]
      break;
 800567a:	e004      	b.n	8005686 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800567c:	f7ff fdab 	bl	80051d6 <LL_RCC_PLLSAI1_IsReady>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1f0      	bne.n	8005668 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d137      	bne.n	80056fc <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800568c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056a0:	4313      	orrs	r3, r2
 80056a2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80056a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056b6:	4313      	orrs	r3, r2
 80056b8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80056ba:	f7ff fd6e 	bl	800519a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056be:	f7fd fbf7 	bl	8002eb0 <HAL_GetTick>
 80056c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80056c4:	e009      	b.n	80056da <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056c6:	f7fd fbf3 	bl	8002eb0 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d902      	bls.n	80056da <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	73fb      	strb	r3, [r7, #15]
        break;
 80056d8:	e004      	b.n	80056e4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80056da:	f7ff fd7c 	bl	80051d6 <LL_RCC_PLLSAI1_IsReady>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d1f0      	bne.n	80056c6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d108      	bne.n	80056fc <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80056ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ee:	691a      	ldr	r2, [r3, #16]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056f8:	4313      	orrs	r3, r2
 80056fa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b082      	sub	sp, #8
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e090      	b.n	800583a <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d106      	bne.n	8005732 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7fc fe7b 	bl	8002428 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2202      	movs	r2, #2
 8005736:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	22ca      	movs	r2, #202	; 0xca
 8005740:	625a      	str	r2, [r3, #36]	; 0x24
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2253      	movs	r2, #83	; 0x53
 8005748:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f89f 	bl	800588e <RTC_EnterInitMode>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d009      	beq.n	800576a <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	22ff      	movs	r2, #255	; 0xff
 800575c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2204      	movs	r2, #4
 8005762:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e067      	b.n	800583a <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6812      	ldr	r2, [r2, #0]
 8005774:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800577c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6899      	ldr	r1, [r3, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	68d2      	ldr	r2, [r2, #12]
 80057a4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6919      	ldr	r1, [r3, #16]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	041a      	lsls	r2, r3, #16
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057c8:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0203 	bic.w	r2, r2, #3
 80057d8:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 0320 	and.w	r3, r3, #32
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d113      	bne.n	8005828 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f81e 	bl	8005842 <HAL_RTC_WaitForSynchro>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00d      	beq.n	8005828 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	22ff      	movs	r2, #255	; 0xff
 8005812:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2204      	movs	r2, #4
 8005818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e008      	b.n	800583a <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	22ff      	movs	r2, #255	; 0xff
 800582e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8005838:	2300      	movs	r3, #0
  }
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005858:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800585a:	f7fd fb29 	bl	8002eb0 <HAL_GetTick>
 800585e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005860:	e009      	b.n	8005876 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005862:	f7fd fb25 	bl	8002eb0 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005870:	d901      	bls.n	8005876 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e007      	b.n	8005886 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0ee      	beq.n	8005862 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d119      	bne.n	80058d8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f04f 32ff 	mov.w	r2, #4294967295
 80058ac:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80058ae:	f7fd faff 	bl	8002eb0 <HAL_GetTick>
 80058b2:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80058b4:	e009      	b.n	80058ca <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80058b6:	f7fd fafb 	bl	8002eb0 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058c4:	d901      	bls.n	80058ca <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e007      	b.n	80058da <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0ee      	beq.n	80058b6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b082      	sub	sp, #8
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e049      	b.n	8005988 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d106      	bne.n	800590e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f841 	bl	8005990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2202      	movs	r2, #2
 8005912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3304      	adds	r3, #4
 800591e:	4619      	mov	r1, r3
 8005920:	4610      	mov	r0, r2
 8005922:	f000 f9d5 	bl	8005cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d001      	beq.n	80059bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e036      	b.n	8005a2a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a17      	ldr	r2, [pc, #92]	; (8005a38 <HAL_TIM_Base_Start_IT+0x94>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d004      	beq.n	80059e8 <HAL_TIM_Base_Start_IT+0x44>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e6:	d115      	bne.n	8005a14 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	4b13      	ldr	r3, [pc, #76]	; (8005a3c <HAL_TIM_Base_Start_IT+0x98>)
 80059f0:	4013      	ands	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b06      	cmp	r3, #6
 80059f8:	d015      	beq.n	8005a26 <HAL_TIM_Base_Start_IT+0x82>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a00:	d011      	beq.n	8005a26 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f042 0201 	orr.w	r2, r2, #1
 8005a10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a12:	e008      	b.n	8005a26 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0201 	orr.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	e000      	b.n	8005a28 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40012c00 	.word	0x40012c00
 8005a3c:	00010007 	.word	0x00010007

08005a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d122      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d11b      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0202 	mvn.w	r2, #2
 8005a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f905 	bl	8005c92 <HAL_TIM_IC_CaptureCallback>
 8005a88:	e005      	b.n	8005a96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f8f7 	bl	8005c7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f908 	bl	8005ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d122      	bne.n	8005af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d11b      	bne.n	8005af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0204 	mvn.w	r2, #4
 8005ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f8db 	bl	8005c92 <HAL_TIM_IC_CaptureCallback>
 8005adc:	e005      	b.n	8005aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f8cd 	bl	8005c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f8de 	bl	8005ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d122      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d11b      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0208 	mvn.w	r2, #8
 8005b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2204      	movs	r2, #4
 8005b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f8b1 	bl	8005c92 <HAL_TIM_IC_CaptureCallback>
 8005b30:	e005      	b.n	8005b3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f8a3 	bl	8005c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f8b4 	bl	8005ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0310 	and.w	r3, r3, #16
 8005b4e:	2b10      	cmp	r3, #16
 8005b50:	d122      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d11b      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0210 	mvn.w	r2, #16
 8005b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2208      	movs	r2, #8
 8005b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f887 	bl	8005c92 <HAL_TIM_IC_CaptureCallback>
 8005b84:	e005      	b.n	8005b92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f879 	bl	8005c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f88a 	bl	8005ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d10e      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d107      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0201 	mvn.w	r2, #1
 8005bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fc fbc0 	bl	8002344 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bce:	2b80      	cmp	r3, #128	; 0x80
 8005bd0:	d10e      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bdc:	2b80      	cmp	r3, #128	; 0x80
 8005bde:	d107      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f8de 	bl	8005dac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bfe:	d10e      	bne.n	8005c1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0a:	2b80      	cmp	r3, #128	; 0x80
 8005c0c:	d107      	bne.n	8005c1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f8d1 	bl	8005dc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c28:	2b40      	cmp	r3, #64	; 0x40
 8005c2a:	d10e      	bne.n	8005c4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c36:	2b40      	cmp	r3, #64	; 0x40
 8005c38:	d107      	bne.n	8005c4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f838 	bl	8005cba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f003 0320 	and.w	r3, r3, #32
 8005c54:	2b20      	cmp	r3, #32
 8005c56:	d10e      	bne.n	8005c76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	d107      	bne.n	8005c76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f06f 0220 	mvn.w	r2, #32
 8005c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f891 	bl	8005d98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c76:	bf00      	nop
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
	...

08005cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a2a      	ldr	r2, [pc, #168]	; (8005d8c <TIM_Base_SetConfig+0xbc>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d003      	beq.n	8005cf0 <TIM_Base_SetConfig+0x20>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cee:	d108      	bne.n	8005d02 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a21      	ldr	r2, [pc, #132]	; (8005d8c <TIM_Base_SetConfig+0xbc>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d00b      	beq.n	8005d22 <TIM_Base_SetConfig+0x52>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d10:	d007      	beq.n	8005d22 <TIM_Base_SetConfig+0x52>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a1e      	ldr	r2, [pc, #120]	; (8005d90 <TIM_Base_SetConfig+0xc0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d003      	beq.n	8005d22 <TIM_Base_SetConfig+0x52>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a1d      	ldr	r2, [pc, #116]	; (8005d94 <TIM_Base_SetConfig+0xc4>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d108      	bne.n	8005d34 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a0c      	ldr	r2, [pc, #48]	; (8005d8c <TIM_Base_SetConfig+0xbc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d007      	beq.n	8005d70 <TIM_Base_SetConfig+0xa0>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a0b      	ldr	r2, [pc, #44]	; (8005d90 <TIM_Base_SetConfig+0xc0>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_Base_SetConfig+0xa0>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a0a      	ldr	r2, [pc, #40]	; (8005d94 <TIM_Base_SetConfig+0xc4>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d103      	bne.n	8005d78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	615a      	str	r2, [r3, #20]
}
 8005d7e:	bf00      	nop
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	40012c00 	.word	0x40012c00
 8005d90:	40014400 	.word	0x40014400
 8005d94:	40014800 	.word	0x40014800

08005d98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <LL_RCC_GetUSARTClockSource>:
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4013      	ands	r3, r2
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <LL_RCC_GetLPUARTClockSource>:
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4013      	ands	r3, r2
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e042      	b.n	8005eac <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d106      	bne.n	8005e3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7fc ff03 	bl	8002c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2224      	movs	r2, #36	; 0x24
 8005e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0201 	bic.w	r2, r2, #1
 8005e54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fb9c 	bl	8006594 <UART_SetConfig>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d101      	bne.n	8005e66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e022      	b.n	8005eac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fd9e 	bl	80069b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0201 	orr.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fe25 	bl	8006af4 <UART_CheckIdleState>
 8005eaa:	4603      	mov	r3, r0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	d168      	bne.n	8005f9e <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <HAL_UART_Transmit_IT+0x24>
 8005ed2:	88fb      	ldrh	r3, [r7, #6]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e061      	b.n	8005fa0 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d101      	bne.n	8005eea <HAL_UART_Transmit_IT+0x36>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	e05a      	b.n	8005fa0 <HAL_UART_Transmit_IT+0xec>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	88fa      	ldrh	r2, [r7, #6]
 8005efc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	88fa      	ldrh	r2, [r7, #6]
 8005f04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2221      	movs	r2, #33	; 0x21
 8005f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f26:	d11c      	bne.n	8005f62 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f30:	d107      	bne.n	8005f42 <HAL_UART_Transmit_IT+0x8e>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d103      	bne.n	8005f42 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4a1b      	ldr	r2, [pc, #108]	; (8005fac <HAL_UART_Transmit_IT+0xf8>)
 8005f3e:	671a      	str	r2, [r3, #112]	; 0x70
 8005f40:	e002      	b.n	8005f48 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4a1a      	ldr	r2, [pc, #104]	; (8005fb0 <HAL_UART_Transmit_IT+0xfc>)
 8005f46:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005f5e:	609a      	str	r2, [r3, #8]
 8005f60:	e01b      	b.n	8005f9a <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6a:	d107      	bne.n	8005f7c <HAL_UART_Transmit_IT+0xc8>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d103      	bne.n	8005f7c <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4a0f      	ldr	r2, [pc, #60]	; (8005fb4 <HAL_UART_Transmit_IT+0x100>)
 8005f78:	671a      	str	r2, [r3, #112]	; 0x70
 8005f7a:	e002      	b.n	8005f82 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4a0e      	ldr	r2, [pc, #56]	; (8005fb8 <HAL_UART_Transmit_IT+0x104>)
 8005f80:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f98:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e000      	b.n	8005fa0 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8005f9e:	2302      	movs	r3, #2
  }
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	08006faf 	.word	0x08006faf
 8005fb0:	08006f15 	.word	0x08006f15
 8005fb4:	08006e97 	.word	0x08006e97
 8005fb8:	08006e23 	.word	0x08006e23

08005fbc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fd0:	2b20      	cmp	r3, #32
 8005fd2:	f040 80bc 	bne.w	800614e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d002      	beq.n	8005fe2 <HAL_UART_Receive_IT+0x26>
 8005fdc:	88fb      	ldrh	r3, [r7, #6]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e0b4      	b.n	8006150 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d101      	bne.n	8005ff4 <HAL_UART_Receive_IT+0x38>
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	e0ad      	b.n	8006150 <HAL_UART_Receive_IT+0x194>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	88fa      	ldrh	r2, [r7, #6]
 8006006:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	88fa      	ldrh	r2, [r7, #6]
 800600e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006020:	d10e      	bne.n	8006040 <HAL_UART_Receive_IT+0x84>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d105      	bne.n	8006036 <HAL_UART_Receive_IT+0x7a>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006030:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006034:	e02d      	b.n	8006092 <HAL_UART_Receive_IT+0xd6>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	22ff      	movs	r2, #255	; 0xff
 800603a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800603e:	e028      	b.n	8006092 <HAL_UART_Receive_IT+0xd6>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10d      	bne.n	8006064 <HAL_UART_Receive_IT+0xa8>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d104      	bne.n	800605a <HAL_UART_Receive_IT+0x9e>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	22ff      	movs	r2, #255	; 0xff
 8006054:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006058:	e01b      	b.n	8006092 <HAL_UART_Receive_IT+0xd6>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	227f      	movs	r2, #127	; 0x7f
 800605e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006062:	e016      	b.n	8006092 <HAL_UART_Receive_IT+0xd6>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800606c:	d10d      	bne.n	800608a <HAL_UART_Receive_IT+0xce>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d104      	bne.n	8006080 <HAL_UART_Receive_IT+0xc4>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	227f      	movs	r2, #127	; 0x7f
 800607a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800607e:	e008      	b.n	8006092 <HAL_UART_Receive_IT+0xd6>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	223f      	movs	r2, #63	; 0x3f
 8006084:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006088:	e003      	b.n	8006092 <HAL_UART_Receive_IT+0xd6>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2222      	movs	r2, #34	; 0x22
 800609e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f042 0201 	orr.w	r2, r2, #1
 80060b0:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060ba:	d12a      	bne.n	8006112 <HAL_UART_Receive_IT+0x156>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80060c2:	88fa      	ldrh	r2, [r7, #6]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d324      	bcc.n	8006112 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d0:	d107      	bne.n	80060e2 <HAL_UART_Receive_IT+0x126>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d103      	bne.n	80060e2 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4a1f      	ldr	r2, [pc, #124]	; (800615c <HAL_UART_Receive_IT+0x1a0>)
 80060de:	66da      	str	r2, [r3, #108]	; 0x6c
 80060e0:	e002      	b.n	80060e8 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4a1e      	ldr	r2, [pc, #120]	; (8006160 <HAL_UART_Receive_IT+0x1a4>)
 80060e6:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060fe:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689a      	ldr	r2, [r3, #8]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800610e:	609a      	str	r2, [r3, #8]
 8006110:	e01b      	b.n	800614a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611a:	d107      	bne.n	800612c <HAL_UART_Receive_IT+0x170>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d103      	bne.n	800612c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4a0f      	ldr	r2, [pc, #60]	; (8006164 <HAL_UART_Receive_IT+0x1a8>)
 8006128:	66da      	str	r2, [r3, #108]	; 0x6c
 800612a:	e002      	b.n	8006132 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4a0e      	ldr	r2, [pc, #56]	; (8006168 <HAL_UART_Receive_IT+0x1ac>)
 8006130:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006148:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	e000      	b.n	8006150 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800614e:	2302      	movs	r3, #2
  }
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	080072e5 	.word	0x080072e5
 8006160:	080071dd 	.word	0x080071dd
 8006164:	08007131 	.word	0x08007131
 8006168:	08007087 	.word	0x08007087

0800616c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	4613      	mov	r3, r2
 8006178:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006180:	2b20      	cmp	r3, #32
 8006182:	d168      	bne.n	8006256 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <HAL_UART_Transmit_DMA+0x24>
 800618a:	88fb      	ldrh	r3, [r7, #6]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e061      	b.n	8006258 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800619a:	2b01      	cmp	r3, #1
 800619c:	d101      	bne.n	80061a2 <HAL_UART_Transmit_DMA+0x36>
 800619e:	2302      	movs	r3, #2
 80061a0:	e05a      	b.n	8006258 <HAL_UART_Transmit_DMA+0xec>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	88fa      	ldrh	r2, [r7, #6]
 80061b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	88fa      	ldrh	r2, [r7, #6]
 80061bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2221      	movs	r2, #33	; 0x21
 80061cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d02c      	beq.n	8006232 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061dc:	4a20      	ldr	r2, [pc, #128]	; (8006260 <HAL_UART_Transmit_DMA+0xf4>)
 80061de:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061e4:	4a1f      	ldr	r2, [pc, #124]	; (8006264 <HAL_UART_Transmit_DMA+0xf8>)
 80061e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ec:	4a1e      	ldr	r2, [pc, #120]	; (8006268 <HAL_UART_Transmit_DMA+0xfc>)
 80061ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061f4:	2200      	movs	r2, #0
 80061f6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006200:	4619      	mov	r1, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3328      	adds	r3, #40	; 0x28
 8006208:	461a      	mov	r2, r3
 800620a:	88fb      	ldrh	r3, [r7, #6]
 800620c:	f7fd f898 	bl	8003340 <HAL_DMA_Start_IT>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00d      	beq.n	8006232 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2210      	movs	r2, #16
 800621a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2220      	movs	r2, #32
 800622a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e012      	b.n	8006258 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2240      	movs	r2, #64	; 0x40
 8006238:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006250:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	e000      	b.n	8006258 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8006256:	2302      	movs	r3, #2
  }
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	08006d07 	.word	0x08006d07
 8006264:	08006d5b 	.word	0x08006d5b
 8006268:	08006d77 	.word	0x08006d77

0800626c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800628c:	69fa      	ldr	r2, [r7, #28]
 800628e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006292:	4013      	ands	r3, r2
 8006294:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d118      	bne.n	80062ce <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d013      	beq.n	80062ce <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	f003 0320 	and.w	r3, r3, #32
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d104      	bne.n	80062ba <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d009      	beq.n	80062ce <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 8145 	beq.w	800654e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	4798      	blx	r3
      }
      return;
 80062cc:	e13f      	b.n	800654e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 80e8 	beq.w	80064a6 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4ba1      	ldr	r3, [pc, #644]	; (8006560 <HAL_UART_IRQHandler+0x2f4>)
 80062da:	4013      	ands	r3, r2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d105      	bne.n	80062ec <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	4ba0      	ldr	r3, [pc, #640]	; (8006564 <HAL_UART_IRQHandler+0x2f8>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 80dd 	beq.w	80064a6 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d010      	beq.n	8006318 <HAL_UART_IRQHandler+0xac>
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00b      	beq.n	8006318 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2201      	movs	r2, #1
 8006306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630e:	f043 0201 	orr.w	r2, r3, #1
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d010      	beq.n	8006344 <HAL_UART_IRQHandler+0xd8>
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00b      	beq.n	8006344 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2202      	movs	r2, #2
 8006332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633a:	f043 0204 	orr.w	r2, r3, #4
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	f003 0304 	and.w	r3, r3, #4
 800634a:	2b00      	cmp	r3, #0
 800634c:	d010      	beq.n	8006370 <HAL_UART_IRQHandler+0x104>
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00b      	beq.n	8006370 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2204      	movs	r2, #4
 800635e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006366:	f043 0202 	orr.w	r2, r3, #2
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	f003 0308 	and.w	r3, r3, #8
 8006376:	2b00      	cmp	r3, #0
 8006378:	d015      	beq.n	80063a6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	f003 0320 	and.w	r3, r3, #32
 8006380:	2b00      	cmp	r3, #0
 8006382:	d104      	bne.n	800638e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	4b76      	ldr	r3, [pc, #472]	; (8006560 <HAL_UART_IRQHandler+0x2f4>)
 8006388:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00b      	beq.n	80063a6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2208      	movs	r2, #8
 8006394:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639c:	f043 0208 	orr.w	r2, r3, #8
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d011      	beq.n	80063d4 <HAL_UART_IRQHandler+0x168>
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00c      	beq.n	80063d4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ca:	f043 0220 	orr.w	r2, r3, #32
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 80b9 	beq.w	8006552 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d011      	beq.n	800640e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d104      	bne.n	80063fe <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d007      	beq.n	800640e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006414:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	d004      	beq.n	800642e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800642a:	2b00      	cmp	r3, #0
 800642c:	d031      	beq.n	8006492 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fc46 	bl	8006cc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643e:	2b40      	cmp	r3, #64	; 0x40
 8006440:	d123      	bne.n	800648a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006450:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006456:	2b00      	cmp	r3, #0
 8006458:	d013      	beq.n	8006482 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800645e:	4a42      	ldr	r2, [pc, #264]	; (8006568 <HAL_UART_IRQHandler+0x2fc>)
 8006460:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006466:	4618      	mov	r0, r3
 8006468:	f7fc ffe5 	bl	8003436 <HAL_DMA_Abort_IT>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d017      	beq.n	80064a2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800647c:	4610      	mov	r0, r2
 800647e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006480:	e00f      	b.n	80064a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f87c 	bl	8006580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006488:	e00b      	b.n	80064a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f878 	bl	8006580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006490:	e007      	b.n	80064a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f874 	bl	8006580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80064a0:	e057      	b.n	8006552 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a2:	bf00      	nop
    return;
 80064a4:	e055      	b.n	8006552 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00d      	beq.n	80064cc <HAL_UART_IRQHandler+0x260>
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d008      	beq.n	80064cc <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80064c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 ff91 	bl	80073ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064ca:	e045      	b.n	8006558 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d012      	beq.n	80064fc <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d104      	bne.n	80064ea <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d008      	beq.n	80064fc <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d031      	beq.n	8006556 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	4798      	blx	r3
    }
    return;
 80064fa:	e02c      	b.n	8006556 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006502:	2b00      	cmp	r3, #0
 8006504:	d008      	beq.n	8006518 <HAL_UART_IRQHandler+0x2ac>
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fd9e 	bl	8007052 <UART_EndTransmit_IT>
    return;
 8006516:	e01f      	b.n	8006558 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d008      	beq.n	8006534 <HAL_UART_IRQHandler+0x2c8>
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 ff71 	bl	8007414 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006532:	e011      	b.n	8006558 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00c      	beq.n	8006558 <HAL_UART_IRQHandler+0x2ec>
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	2b00      	cmp	r3, #0
 8006542:	da09      	bge.n	8006558 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 ff5b 	bl	8007400 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800654a:	bf00      	nop
 800654c:	e004      	b.n	8006558 <HAL_UART_IRQHandler+0x2ec>
      return;
 800654e:	bf00      	nop
 8006550:	e002      	b.n	8006558 <HAL_UART_IRQHandler+0x2ec>
    return;
 8006552:	bf00      	nop
 8006554:	e000      	b.n	8006558 <HAL_UART_IRQHandler+0x2ec>
    return;
 8006556:	bf00      	nop
  }
}
 8006558:	3720      	adds	r7, #32
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	10000001 	.word	0x10000001
 8006564:	04000120 	.word	0x04000120
 8006568:	08006df7 	.word	0x08006df7

0800656c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006594:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006598:	b088      	sub	sp, #32
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065be:	69fa      	ldr	r2, [r7, #28]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	4ba4      	ldr	r3, [pc, #656]	; (800685c <UART_SetConfig+0x2c8>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	6812      	ldr	r2, [r2, #0]
 80065d2:	69f9      	ldr	r1, [r7, #28]
 80065d4:	430b      	orrs	r3, r1
 80065d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a99      	ldr	r2, [pc, #612]	; (8006860 <UART_SetConfig+0x2cc>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d004      	beq.n	8006608 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	69fa      	ldr	r2, [r7, #28]
 8006604:	4313      	orrs	r3, r2
 8006606:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006612:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6812      	ldr	r2, [r2, #0]
 800661a:	69f9      	ldr	r1, [r7, #28]
 800661c:	430b      	orrs	r3, r1
 800661e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006626:	f023 010f 	bic.w	r1, r3, #15
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a8a      	ldr	r2, [pc, #552]	; (8006864 <UART_SetConfig+0x2d0>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d121      	bne.n	8006684 <UART_SetConfig+0xf0>
 8006640:	2003      	movs	r0, #3
 8006642:	f7ff fbc7 	bl	8005dd4 <LL_RCC_GetUSARTClockSource>
 8006646:	4603      	mov	r3, r0
 8006648:	2b03      	cmp	r3, #3
 800664a:	d817      	bhi.n	800667c <UART_SetConfig+0xe8>
 800664c:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <UART_SetConfig+0xc0>)
 800664e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006652:	bf00      	nop
 8006654:	08006665 	.word	0x08006665
 8006658:	08006671 	.word	0x08006671
 800665c:	0800666b 	.word	0x0800666b
 8006660:	08006677 	.word	0x08006677
 8006664:	2301      	movs	r3, #1
 8006666:	76fb      	strb	r3, [r7, #27]
 8006668:	e038      	b.n	80066dc <UART_SetConfig+0x148>
 800666a:	2302      	movs	r3, #2
 800666c:	76fb      	strb	r3, [r7, #27]
 800666e:	e035      	b.n	80066dc <UART_SetConfig+0x148>
 8006670:	2304      	movs	r3, #4
 8006672:	76fb      	strb	r3, [r7, #27]
 8006674:	e032      	b.n	80066dc <UART_SetConfig+0x148>
 8006676:	2308      	movs	r3, #8
 8006678:	76fb      	strb	r3, [r7, #27]
 800667a:	e02f      	b.n	80066dc <UART_SetConfig+0x148>
 800667c:	2310      	movs	r3, #16
 800667e:	76fb      	strb	r3, [r7, #27]
 8006680:	bf00      	nop
 8006682:	e02b      	b.n	80066dc <UART_SetConfig+0x148>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a75      	ldr	r2, [pc, #468]	; (8006860 <UART_SetConfig+0x2cc>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d124      	bne.n	80066d8 <UART_SetConfig+0x144>
 800668e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006692:	f7ff fbaf 	bl	8005df4 <LL_RCC_GetLPUARTClockSource>
 8006696:	4603      	mov	r3, r0
 8006698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800669c:	d012      	beq.n	80066c4 <UART_SetConfig+0x130>
 800669e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a2:	d802      	bhi.n	80066aa <UART_SetConfig+0x116>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d007      	beq.n	80066b8 <UART_SetConfig+0x124>
 80066a8:	e012      	b.n	80066d0 <UART_SetConfig+0x13c>
 80066aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ae:	d006      	beq.n	80066be <UART_SetConfig+0x12a>
 80066b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066b4:	d009      	beq.n	80066ca <UART_SetConfig+0x136>
 80066b6:	e00b      	b.n	80066d0 <UART_SetConfig+0x13c>
 80066b8:	2300      	movs	r3, #0
 80066ba:	76fb      	strb	r3, [r7, #27]
 80066bc:	e00e      	b.n	80066dc <UART_SetConfig+0x148>
 80066be:	2302      	movs	r3, #2
 80066c0:	76fb      	strb	r3, [r7, #27]
 80066c2:	e00b      	b.n	80066dc <UART_SetConfig+0x148>
 80066c4:	2304      	movs	r3, #4
 80066c6:	76fb      	strb	r3, [r7, #27]
 80066c8:	e008      	b.n	80066dc <UART_SetConfig+0x148>
 80066ca:	2308      	movs	r3, #8
 80066cc:	76fb      	strb	r3, [r7, #27]
 80066ce:	e005      	b.n	80066dc <UART_SetConfig+0x148>
 80066d0:	2310      	movs	r3, #16
 80066d2:	76fb      	strb	r3, [r7, #27]
 80066d4:	bf00      	nop
 80066d6:	e001      	b.n	80066dc <UART_SetConfig+0x148>
 80066d8:	2310      	movs	r3, #16
 80066da:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a5f      	ldr	r2, [pc, #380]	; (8006860 <UART_SetConfig+0x2cc>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	f040 808e 	bne.w	8006804 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066e8:	7efb      	ldrb	r3, [r7, #27]
 80066ea:	2b08      	cmp	r3, #8
 80066ec:	d823      	bhi.n	8006736 <UART_SetConfig+0x1a2>
 80066ee:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <UART_SetConfig+0x160>)
 80066f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f4:	08006719 	.word	0x08006719
 80066f8:	08006737 	.word	0x08006737
 80066fc:	08006721 	.word	0x08006721
 8006700:	08006737 	.word	0x08006737
 8006704:	08006727 	.word	0x08006727
 8006708:	08006737 	.word	0x08006737
 800670c:	08006737 	.word	0x08006737
 8006710:	08006737 	.word	0x08006737
 8006714:	0800672f 	.word	0x0800672f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006718:	f7fe fabc 	bl	8004c94 <HAL_RCC_GetPCLK1Freq>
 800671c:	6178      	str	r0, [r7, #20]
        break;
 800671e:	e00f      	b.n	8006740 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006720:	4b51      	ldr	r3, [pc, #324]	; (8006868 <UART_SetConfig+0x2d4>)
 8006722:	617b      	str	r3, [r7, #20]
        break;
 8006724:	e00c      	b.n	8006740 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006726:	f7fe fa37 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
 800672a:	6178      	str	r0, [r7, #20]
        break;
 800672c:	e008      	b.n	8006740 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800672e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006732:	617b      	str	r3, [r7, #20]
        break;
 8006734:	e004      	b.n	8006740 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 8006736:	2300      	movs	r3, #0
 8006738:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	76bb      	strb	r3, [r7, #26]
        break;
 800673e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 811c 	beq.w	8006980 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	4a47      	ldr	r2, [pc, #284]	; (800686c <UART_SetConfig+0x2d8>)
 800674e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006752:	461a      	mov	r2, r3
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	fbb3 f3f2 	udiv	r3, r3, r2
 800675a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	4613      	mov	r3, r2
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	4413      	add	r3, r2
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	429a      	cmp	r2, r3
 800676a:	d305      	bcc.n	8006778 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	429a      	cmp	r2, r3
 8006776:	d902      	bls.n	800677e <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	76bb      	strb	r3, [r7, #26]
 800677c:	e100      	b.n	8006980 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	4618      	mov	r0, r3
 8006782:	f04f 0100 	mov.w	r1, #0
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	4a38      	ldr	r2, [pc, #224]	; (800686c <UART_SetConfig+0x2d8>)
 800678c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006790:	b29b      	uxth	r3, r3
 8006792:	f04f 0400 	mov.w	r4, #0
 8006796:	461a      	mov	r2, r3
 8006798:	4623      	mov	r3, r4
 800679a:	f7fa f977 	bl	8000a8c <__aeabi_uldivmod>
 800679e:	4603      	mov	r3, r0
 80067a0:	460c      	mov	r4, r1
 80067a2:	4619      	mov	r1, r3
 80067a4:	4622      	mov	r2, r4
 80067a6:	f04f 0300 	mov.w	r3, #0
 80067aa:	f04f 0400 	mov.w	r4, #0
 80067ae:	0214      	lsls	r4, r2, #8
 80067b0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80067b4:	020b      	lsls	r3, r1, #8
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	6852      	ldr	r2, [r2, #4]
 80067ba:	0852      	lsrs	r2, r2, #1
 80067bc:	4611      	mov	r1, r2
 80067be:	f04f 0200 	mov.w	r2, #0
 80067c2:	eb13 0b01 	adds.w	fp, r3, r1
 80067c6:	eb44 0c02 	adc.w	ip, r4, r2
 80067ca:	4658      	mov	r0, fp
 80067cc:	4661      	mov	r1, ip
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f04f 0400 	mov.w	r4, #0
 80067d6:	461a      	mov	r2, r3
 80067d8:	4623      	mov	r3, r4
 80067da:	f7fa f957 	bl	8000a8c <__aeabi_uldivmod>
 80067de:	4603      	mov	r3, r0
 80067e0:	460c      	mov	r4, r1
 80067e2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067ea:	d308      	bcc.n	80067fe <UART_SetConfig+0x26a>
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067f2:	d204      	bcs.n	80067fe <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	60da      	str	r2, [r3, #12]
 80067fc:	e0c0      	b.n	8006980 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	76bb      	strb	r3, [r7, #26]
 8006802:	e0bd      	b.n	8006980 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800680c:	d169      	bne.n	80068e2 <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800680e:	7efb      	ldrb	r3, [r7, #27]
 8006810:	3b01      	subs	r3, #1
 8006812:	2b07      	cmp	r3, #7
 8006814:	d82c      	bhi.n	8006870 <UART_SetConfig+0x2dc>
 8006816:	a201      	add	r2, pc, #4	; (adr r2, 800681c <UART_SetConfig+0x288>)
 8006818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681c:	0800683d 	.word	0x0800683d
 8006820:	08006845 	.word	0x08006845
 8006824:	08006871 	.word	0x08006871
 8006828:	0800684b 	.word	0x0800684b
 800682c:	08006871 	.word	0x08006871
 8006830:	08006871 	.word	0x08006871
 8006834:	08006871 	.word	0x08006871
 8006838:	08006853 	.word	0x08006853
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800683c:	f7fe fa40 	bl	8004cc0 <HAL_RCC_GetPCLK2Freq>
 8006840:	6178      	str	r0, [r7, #20]
        break;
 8006842:	e01a      	b.n	800687a <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006844:	4b08      	ldr	r3, [pc, #32]	; (8006868 <UART_SetConfig+0x2d4>)
 8006846:	617b      	str	r3, [r7, #20]
        break;
 8006848:	e017      	b.n	800687a <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800684a:	f7fe f9a5 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
 800684e:	6178      	str	r0, [r7, #20]
        break;
 8006850:	e013      	b.n	800687a <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006856:	617b      	str	r3, [r7, #20]
        break;
 8006858:	e00f      	b.n	800687a <UART_SetConfig+0x2e6>
 800685a:	bf00      	nop
 800685c:	cfff69f3 	.word	0xcfff69f3
 8006860:	40008000 	.word	0x40008000
 8006864:	40013800 	.word	0x40013800
 8006868:	00f42400 	.word	0x00f42400
 800686c:	08012bf4 	.word	0x08012bf4
      default:
        pclk = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	76bb      	strb	r3, [r7, #26]
        break;
 8006878:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d07f      	beq.n	8006980 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006884:	4a48      	ldr	r2, [pc, #288]	; (80069a8 <UART_SetConfig+0x414>)
 8006886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800688a:	461a      	mov	r2, r3
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006892:	005a      	lsls	r2, r3, #1
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	085b      	lsrs	r3, r3, #1
 800689a:	441a      	add	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	2b0f      	cmp	r3, #15
 80068ac:	d916      	bls.n	80068dc <UART_SetConfig+0x348>
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068b4:	d212      	bcs.n	80068dc <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f023 030f 	bic.w	r3, r3, #15
 80068be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	085b      	lsrs	r3, r3, #1
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	f003 0307 	and.w	r3, r3, #7
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	89fb      	ldrh	r3, [r7, #14]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	89fa      	ldrh	r2, [r7, #14]
 80068d8:	60da      	str	r2, [r3, #12]
 80068da:	e051      	b.n	8006980 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	76bb      	strb	r3, [r7, #26]
 80068e0:	e04e      	b.n	8006980 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068e2:	7efb      	ldrb	r3, [r7, #27]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	2b07      	cmp	r3, #7
 80068e8:	d821      	bhi.n	800692e <UART_SetConfig+0x39a>
 80068ea:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <UART_SetConfig+0x35c>)
 80068ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f0:	08006911 	.word	0x08006911
 80068f4:	08006919 	.word	0x08006919
 80068f8:	0800692f 	.word	0x0800692f
 80068fc:	0800691f 	.word	0x0800691f
 8006900:	0800692f 	.word	0x0800692f
 8006904:	0800692f 	.word	0x0800692f
 8006908:	0800692f 	.word	0x0800692f
 800690c:	08006927 	.word	0x08006927
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006910:	f7fe f9d6 	bl	8004cc0 <HAL_RCC_GetPCLK2Freq>
 8006914:	6178      	str	r0, [r7, #20]
        break;
 8006916:	e00f      	b.n	8006938 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006918:	4b24      	ldr	r3, [pc, #144]	; (80069ac <UART_SetConfig+0x418>)
 800691a:	617b      	str	r3, [r7, #20]
        break;
 800691c:	e00c      	b.n	8006938 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800691e:	f7fe f93b 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
 8006922:	6178      	str	r0, [r7, #20]
        break;
 8006924:	e008      	b.n	8006938 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800692a:	617b      	str	r3, [r7, #20]
        break;
 800692c:	e004      	b.n	8006938 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	76bb      	strb	r3, [r7, #26]
        break;
 8006936:	bf00      	nop
    }

    if (pclk != 0U)
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d020      	beq.n	8006980 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006942:	4a19      	ldr	r2, [pc, #100]	; (80069a8 <UART_SetConfig+0x414>)
 8006944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006948:	461a      	mov	r2, r3
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	085b      	lsrs	r3, r3, #1
 8006956:	441a      	add	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006960:	b29b      	uxth	r3, r3
 8006962:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	2b0f      	cmp	r3, #15
 8006968:	d908      	bls.n	800697c <UART_SetConfig+0x3e8>
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006970:	d204      	bcs.n	800697c <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	60da      	str	r2, [r3, #12]
 800697a:	e001      	b.n	8006980 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800699c:	7ebb      	ldrb	r3, [r7, #26]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3720      	adds	r7, #32
 80069a2:	46bd      	mov	sp, r7
 80069a4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80069a8:	08012bf4 	.word	0x08012bf4
 80069ac:	00f42400 	.word	0x00f42400

080069b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00a      	beq.n	80069da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00a      	beq.n	80069fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00a      	beq.n	8006a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a22:	f003 0308 	and.w	r3, r3, #8
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a44:	f003 0310 	and.w	r3, r3, #16
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00a      	beq.n	8006a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a66:	f003 0320 	and.w	r3, r3, #32
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d01a      	beq.n	8006ac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aae:	d10a      	bne.n	8006ac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00a      	beq.n	8006ae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	605a      	str	r2, [r3, #4]
  }
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af02      	add	r7, sp, #8
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006b04:	f7fc f9d4 	bl	8002eb0 <HAL_GetTick>
 8006b08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0308 	and.w	r3, r3, #8
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d10e      	bne.n	8006b36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f82c 	bl	8006b84 <UART_WaitOnFlagUntilTimeout>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e022      	b.n	8006b7c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d10e      	bne.n	8006b62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f816 	bl	8006b84 <UART_WaitOnFlagUntilTimeout>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e00c      	b.n	8006b7c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	603b      	str	r3, [r7, #0]
 8006b90:	4613      	mov	r3, r2
 8006b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b94:	e062      	b.n	8006c5c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9c:	d05e      	beq.n	8006c5c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b9e:	f7fc f987 	bl	8002eb0 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d302      	bcc.n	8006bb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d11d      	bne.n	8006bf0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006bc2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689a      	ldr	r2, [r3, #8]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f022 0201 	bic.w	r2, r2, #1
 8006bd2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2220      	movs	r2, #32
 8006be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e045      	b.n	8006c7c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d02e      	beq.n	8006c5c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c0c:	d126      	bne.n	8006c5c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c16:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c26:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689a      	ldr	r2, [r3, #8]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f022 0201 	bic.w	r2, r2, #1
 8006c36:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e00f      	b.n	8006c7c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	69da      	ldr	r2, [r3, #28]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	4013      	ands	r3, r2
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	bf0c      	ite	eq
 8006c6c:	2301      	moveq	r3, #1
 8006c6e:	2300      	movne	r3, #0
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	461a      	mov	r2, r3
 8006c74:	79fb      	ldrb	r3, [r7, #7]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d08d      	beq.n	8006b96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006c9a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689a      	ldr	r2, [r3, #8]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006caa:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006cd6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	6812      	ldr	r2, [r2, #0]
 8006ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ce6:	f023 0301 	bic.w	r3, r3, #1
 8006cea:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d12:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0320 	and.w	r3, r3, #32
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d114      	bne.n	8006d4c <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d38:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d48:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d4a:	e002      	b.n	8006d52 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f7fb fa19 	bl	8002184 <HAL_UART_TxCpltCallback>
}
 8006d52:	bf00      	nop
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d66:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f7ff fbff 	bl	800656c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d6e:	bf00      	nop
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b086      	sub	sp, #24
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d82:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d8a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d9e:	2b80      	cmp	r3, #128	; 0x80
 8006da0:	d109      	bne.n	8006db6 <UART_DMAError+0x40>
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	2b21      	cmp	r3, #33	; 0x21
 8006da6:	d106      	bne.n	8006db6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006db0:	6978      	ldr	r0, [r7, #20]
 8006db2:	f7ff ff67 	bl	8006c84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b40      	cmp	r3, #64	; 0x40
 8006dc2:	d109      	bne.n	8006dd8 <UART_DMAError+0x62>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2b22      	cmp	r3, #34	; 0x22
 8006dc8:	d106      	bne.n	8006dd8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006dd2:	6978      	ldr	r0, [r7, #20]
 8006dd4:	f7ff ff74 	bl	8006cc0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dde:	f043 0210 	orr.w	r2, r3, #16
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006de8:	6978      	ldr	r0, [r7, #20]
 8006dea:	f7ff fbc9 	bl	8006580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dee:	bf00      	nop
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f7ff fbb3 	bl	8006580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e1a:	bf00      	nop
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b083      	sub	sp, #12
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e30:	2b21      	cmp	r3, #33	; 0x21
 8006e32:	d12a      	bne.n	8006e8a <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d110      	bne.n	8006e62 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e4e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e5e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006e60:	e013      	b.n	8006e8a <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e66:	781a      	ldrb	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e72:	1c5a      	adds	r2, r3, #1
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	3b01      	subs	r3, #1
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006e8a:	bf00      	nop
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b085      	sub	sp, #20
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ea4:	2b21      	cmp	r3, #33	; 0x21
 8006ea6:	d12f      	bne.n	8006f08 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d110      	bne.n	8006ed6 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ec2:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ed2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006ed4:	e018      	b.n	8006f08 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eda:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	881b      	ldrh	r3, [r3, #0]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eea:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ef0:	1c9a      	adds	r2, r3, #2
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	3b01      	subs	r3, #1
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006f08:	bf00      	nop
 8006f0a:	3714      	adds	r7, #20
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f22:	2b21      	cmp	r3, #33	; 0x21
 8006f24:	d13d      	bne.n	8006fa2 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f2c:	81fb      	strh	r3, [r7, #14]
 8006f2e:	e035      	b.n	8006f9c <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d111      	bne.n	8006f60 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006f4a:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f5a:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006f5c:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8006f5e:	e020      	b.n	8006fa2 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d013      	beq.n	8006f96 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f72:	781a      	ldrb	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006f96:	89fb      	ldrh	r3, [r7, #14]
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	81fb      	strh	r3, [r7, #14]
 8006f9c:	89fb      	ldrh	r3, [r7, #14]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1c6      	bne.n	8006f30 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8006fa2:	bf00      	nop
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b085      	sub	sp, #20
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fbc:	2b21      	cmp	r3, #33	; 0x21
 8006fbe:	d142      	bne.n	8007046 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006fc6:	81fb      	strh	r3, [r7, #14]
 8006fc8:	e03a      	b.n	8007040 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d111      	bne.n	8006ffa <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	689a      	ldr	r2, [r3, #8]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006fe4:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ff4:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006ff6:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8006ff8:	e025      	b.n	8007046 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007004:	2b00      	cmp	r3, #0
 8007006:	d018      	beq.n	800703a <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700c:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	881b      	ldrh	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800701c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007022:	1c9a      	adds	r2, r3, #2
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b29a      	uxth	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800703a:	89fb      	ldrh	r3, [r7, #14]
 800703c:	3b01      	subs	r3, #1
 800703e:	81fb      	strh	r3, [r7, #14]
 8007040:	89fb      	ldrh	r3, [r7, #14]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1c1      	bne.n	8006fca <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8007046:	bf00      	nop
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b082      	sub	sp, #8
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007068:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2220      	movs	r2, #32
 800706e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f7fb f883 	bl	8002184 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800707e:	bf00      	nop
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007094:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800709c:	2b22      	cmp	r3, #34	; 0x22
 800709e:	d13b      	bne.n	8007118 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80070a8:	89bb      	ldrh	r3, [r7, #12]
 80070aa:	b2d9      	uxtb	r1, r3
 80070ac:	89fb      	ldrh	r3, [r7, #14]
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b4:	400a      	ands	r2, r1
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070be:	1c5a      	adds	r2, r3, #1
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	3b01      	subs	r3, #1
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070dc:	b29b      	uxth	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d122      	bne.n	8007128 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070f0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 0201 	bic.w	r2, r2, #1
 8007100:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2220      	movs	r2, #32
 8007106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7fb f80b 	bl	800212c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007116:	e007      	b.n	8007128 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	699a      	ldr	r2, [r3, #24]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f042 0208 	orr.w	r2, r2, #8
 8007126:	619a      	str	r2, [r3, #24]
}
 8007128:	bf00      	nop
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800713e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007146:	2b22      	cmp	r3, #34	; 0x22
 8007148:	d13b      	bne.n	80071c2 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007156:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007158:	89ba      	ldrh	r2, [r7, #12]
 800715a:	89fb      	ldrh	r3, [r7, #14]
 800715c:	4013      	ands	r3, r2
 800715e:	b29a      	uxth	r2, r3
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007168:	1c9a      	adds	r2, r3, #2
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007174:	b29b      	uxth	r3, r3
 8007176:	3b01      	subs	r3, #1
 8007178:	b29a      	uxth	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007186:	b29b      	uxth	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d122      	bne.n	80071d2 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800719a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689a      	ldr	r2, [r3, #8]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 0201 	bic.w	r2, r2, #1
 80071aa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2220      	movs	r2, #32
 80071b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7fa ffb6 	bl	800212c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071c0:	e007      	b.n	80071d2 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	699a      	ldr	r2, [r3, #24]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f042 0208 	orr.w	r2, r2, #8
 80071d0:	619a      	str	r2, [r3, #24]
}
 80071d2:	bf00      	nop
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
	...

080071dc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80071ea:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071f2:	2b22      	cmp	r3, #34	; 0x22
 80071f4:	d168      	bne.n	80072c8 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80071fc:	81fb      	strh	r3, [r7, #14]
 80071fe:	e03f      	b.n	8007280 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007206:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007208:	893b      	ldrh	r3, [r7, #8]
 800720a:	b2d9      	uxtb	r1, r3
 800720c:	89bb      	ldrh	r3, [r7, #12]
 800720e:	b2da      	uxtb	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007214:	400a      	ands	r2, r1
 8007216:	b2d2      	uxtb	r2, r2
 8007218:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800721e:	1c5a      	adds	r2, r3, #1
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800722a:	b29b      	uxth	r3, r3
 800722c:	3b01      	subs	r3, #1
 800722e:	b29a      	uxth	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800723c:	b29b      	uxth	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d11b      	bne.n	800727a <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007250:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	6812      	ldr	r2, [r2, #0]
 800725c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007260:	f023 0301 	bic.w	r3, r3, #1
 8007264:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2220      	movs	r2, #32
 800726a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7fa ff59 	bl	800212c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800727a:	89fb      	ldrh	r3, [r7, #14]
 800727c:	3b01      	subs	r3, #1
 800727e:	81fb      	strh	r3, [r7, #14]
 8007280:	89fb      	ldrh	r3, [r7, #14]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1bc      	bne.n	8007200 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800728c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800728e:	897b      	ldrh	r3, [r7, #10]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d021      	beq.n	80072d8 <UART_RxISR_8BIT_FIFOEN+0xfc>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800729a:	897a      	ldrh	r2, [r7, #10]
 800729c:	429a      	cmp	r2, r3
 800729e:	d21b      	bcs.n	80072d8 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689a      	ldr	r2, [r3, #8]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80072ae:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a0b      	ldr	r2, [pc, #44]	; (80072e0 <UART_RxISR_8BIT_FIFOEN+0x104>)
 80072b4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f042 0220 	orr.w	r2, r2, #32
 80072c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072c6:	e007      	b.n	80072d8 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	699a      	ldr	r2, [r3, #24]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f042 0208 	orr.w	r2, r2, #8
 80072d6:	619a      	str	r2, [r3, #24]
}
 80072d8:	bf00      	nop
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	08007087 	.word	0x08007087

080072e4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80072f2:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072fa:	2b22      	cmp	r3, #34	; 0x22
 80072fc:	d168      	bne.n	80073d0 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007304:	82fb      	strh	r3, [r7, #22]
 8007306:	e03f      	b.n	8007388 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730e:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007314:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8007316:	8a3a      	ldrh	r2, [r7, #16]
 8007318:	8abb      	ldrh	r3, [r7, #20]
 800731a:	4013      	ands	r3, r2
 800731c:	b29a      	uxth	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007326:	1c9a      	adds	r2, r3, #2
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007332:	b29b      	uxth	r3, r3
 8007334:	3b01      	subs	r3, #1
 8007336:	b29a      	uxth	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007344:	b29b      	uxth	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d11b      	bne.n	8007382 <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007358:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	6812      	ldr	r2, [r2, #0]
 8007364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007368:	f023 0301 	bic.w	r3, r3, #1
 800736c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2220      	movs	r2, #32
 8007372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7fa fed5 	bl	800212c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8007382:	8afb      	ldrh	r3, [r7, #22]
 8007384:	3b01      	subs	r3, #1
 8007386:	82fb      	strh	r3, [r7, #22]
 8007388:	8afb      	ldrh	r3, [r7, #22]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1bc      	bne.n	8007308 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007394:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007396:	8a7b      	ldrh	r3, [r7, #18]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d021      	beq.n	80073e0 <UART_RxISR_16BIT_FIFOEN+0xfc>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80073a2:	8a7a      	ldrh	r2, [r7, #18]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d21b      	bcs.n	80073e0 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689a      	ldr	r2, [r3, #8]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80073b6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a0b      	ldr	r2, [pc, #44]	; (80073e8 <UART_RxISR_16BIT_FIFOEN+0x104>)
 80073bc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f042 0220 	orr.w	r2, r2, #32
 80073cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073ce:	e007      	b.n	80073e0 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699a      	ldr	r2, [r3, #24]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f042 0208 	orr.w	r2, r2, #8
 80073de:	619a      	str	r2, [r3, #24]
}
 80073e0:	bf00      	nop
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	08007131 	.word	0x08007131

080073ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007436:	2b01      	cmp	r3, #1
 8007438:	d101      	bne.n	800743e <HAL_UARTEx_DisableFifoMode+0x16>
 800743a:	2302      	movs	r3, #2
 800743c:	e027      	b.n	800748e <HAL_UARTEx_DisableFifoMode+0x66>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2224      	movs	r2, #36	; 0x24
 800744a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f022 0201 	bic.w	r2, r2, #1
 8007464:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800746c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2220      	movs	r2, #32
 8007480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b084      	sub	sp, #16
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d101      	bne.n	80074b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074ae:	2302      	movs	r3, #2
 80074b0:	e02d      	b.n	800750e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2224      	movs	r2, #36	; 0x24
 80074be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0201 	bic.w	r2, r2, #1
 80074d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	683a      	ldr	r2, [r7, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f850 	bl	8007594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2220      	movs	r2, #32
 8007500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007526:	2b01      	cmp	r3, #1
 8007528:	d101      	bne.n	800752e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800752a:	2302      	movs	r3, #2
 800752c:	e02d      	b.n	800758a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2224      	movs	r2, #36	; 0x24
 800753a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0201 	bic.w	r2, r2, #1
 8007554:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f812 	bl	8007594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2220      	movs	r2, #32
 800757c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
	...

08007594 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007594:	b480      	push	{r7}
 8007596:	b089      	sub	sp, #36	; 0x24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800759c:	4a2f      	ldr	r2, [pc, #188]	; (800765c <UARTEx_SetNbDataToProcess+0xc8>)
 800759e:	f107 0314 	add.w	r3, r7, #20
 80075a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80075a6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80075aa:	4a2d      	ldr	r2, [pc, #180]	; (8007660 <UARTEx_SetNbDataToProcess+0xcc>)
 80075ac:	f107 030c 	add.w	r3, r7, #12
 80075b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80075b4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d108      	bne.n	80075d2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075d0:	e03d      	b.n	800764e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075d2:	2308      	movs	r3, #8
 80075d4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075d6:	2308      	movs	r3, #8
 80075d8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	0e5b      	lsrs	r3, r3, #25
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	f003 0307 	and.w	r3, r3, #7
 80075e8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	0f5b      	lsrs	r3, r3, #29
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	f003 0307 	and.w	r3, r3, #7
 80075f8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80075fa:	7fbb      	ldrb	r3, [r7, #30]
 80075fc:	7f3a      	ldrb	r2, [r7, #28]
 80075fe:	f107 0120 	add.w	r1, r7, #32
 8007602:	440a      	add	r2, r1
 8007604:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007608:	fb02 f303 	mul.w	r3, r2, r3
 800760c:	7f3a      	ldrb	r2, [r7, #28]
 800760e:	f107 0120 	add.w	r1, r7, #32
 8007612:	440a      	add	r2, r1
 8007614:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007618:	fb93 f3f2 	sdiv	r3, r3, r2
 800761c:	b29a      	uxth	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007624:	7ffb      	ldrb	r3, [r7, #31]
 8007626:	7f7a      	ldrb	r2, [r7, #29]
 8007628:	f107 0120 	add.w	r1, r7, #32
 800762c:	440a      	add	r2, r1
 800762e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007632:	fb02 f303 	mul.w	r3, r2, r3
 8007636:	7f7a      	ldrb	r2, [r7, #29]
 8007638:	f107 0120 	add.w	r1, r7, #32
 800763c:	440a      	add	r2, r1
 800763e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007642:	fb93 f3f2 	sdiv	r3, r3, r2
 8007646:	b29a      	uxth	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800764e:	bf00      	nop
 8007650:	3724      	adds	r7, #36	; 0x24
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	080127c0 	.word	0x080127c0
 8007660:	080127c8 	.word	0x080127c8

08007664 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800766a:	2300      	movs	r3, #0
 800766c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800766e:	f107 0308 	add.w	r3, r7, #8
 8007672:	2218      	movs	r2, #24
 8007674:	2100      	movs	r1, #0
 8007676:	4618      	mov	r0, r3
 8007678:	f001 fb2b 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800767c:	233f      	movs	r3, #63	; 0x3f
 800767e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8007680:	2381      	movs	r3, #129	; 0x81
 8007682:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007684:	1dfb      	adds	r3, r7, #7
 8007686:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007688:	2301      	movs	r3, #1
 800768a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800768c:	f107 0308 	add.w	r3, r7, #8
 8007690:	2100      	movs	r1, #0
 8007692:	4618      	mov	r0, r3
 8007694:	f001 ff30 	bl	80094f8 <hci_send_req>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	da01      	bge.n	80076a2 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800769e:	23ff      	movs	r3, #255	; 0xff
 80076a0:	e000      	b.n	80076a4 <aci_gap_set_non_discoverable+0x40>
  return status;
 80076a2:	79fb      	ldrb	r3, [r7, #7]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3720      	adds	r7, #32
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80076ac:	b5b0      	push	{r4, r5, r7, lr}
 80076ae:	b0ce      	sub	sp, #312	; 0x138
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	4605      	mov	r5, r0
 80076b4:	460c      	mov	r4, r1
 80076b6:	4610      	mov	r0, r2
 80076b8:	4619      	mov	r1, r3
 80076ba:	1dfb      	adds	r3, r7, #7
 80076bc:	462a      	mov	r2, r5
 80076be:	701a      	strb	r2, [r3, #0]
 80076c0:	1d3b      	adds	r3, r7, #4
 80076c2:	4622      	mov	r2, r4
 80076c4:	801a      	strh	r2, [r3, #0]
 80076c6:	1cbb      	adds	r3, r7, #2
 80076c8:	4602      	mov	r2, r0
 80076ca:	801a      	strh	r2, [r3, #0]
 80076cc:	1dbb      	adds	r3, r7, #6
 80076ce:	460a      	mov	r2, r1
 80076d0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80076d2:	f107 0310 	add.w	r3, r7, #16
 80076d6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80076da:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80076de:	3308      	adds	r3, #8
 80076e0:	f107 0210 	add.w	r2, r7, #16
 80076e4:	4413      	add	r3, r2
 80076e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80076ea:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80076ee:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80076f2:	4413      	add	r3, r2
 80076f4:	3309      	adds	r3, #9
 80076f6:	f107 0210 	add.w	r2, r7, #16
 80076fa:	4413      	add	r3, r2
 80076fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007700:	f107 030f 	add.w	r3, r7, #15
 8007704:	2200      	movs	r2, #0
 8007706:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007708:	2300      	movs	r3, #0
 800770a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800770e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007712:	1dfa      	adds	r2, r7, #7
 8007714:	7812      	ldrb	r2, [r2, #0]
 8007716:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007718:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800771c:	3301      	adds	r3, #1
 800771e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007722:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007726:	1d3a      	adds	r2, r7, #4
 8007728:	8812      	ldrh	r2, [r2, #0]
 800772a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800772e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007732:	3302      	adds	r3, #2
 8007734:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8007738:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800773c:	1cba      	adds	r2, r7, #2
 800773e:	8812      	ldrh	r2, [r2, #0]
 8007740:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007744:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007748:	3302      	adds	r3, #2
 800774a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800774e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007752:	1dba      	adds	r2, r7, #6
 8007754:	7812      	ldrb	r2, [r2, #0]
 8007756:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007758:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800775c:	3301      	adds	r3, #1
 800775e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007762:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007766:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800776a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800776c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007770:	3301      	adds	r3, #1
 8007772:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007776:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800777a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800777e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007780:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007784:	3301      	adds	r3, #1
 8007786:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800778a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800778e:	3308      	adds	r3, #8
 8007790:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007794:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8007798:	4618      	mov	r0, r3
 800779a:	f001 fa8a 	bl	8008cb2 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800779e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80077a2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80077a6:	4413      	add	r3, r2
 80077a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80077ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80077b0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80077b4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80077b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077ba:	3301      	adds	r3, #1
 80077bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80077c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80077c4:	3301      	adds	r3, #1
 80077c6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80077ca:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80077ce:	4618      	mov	r0, r3
 80077d0:	f001 fa6f 	bl	8008cb2 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80077d4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80077d8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80077dc:	4413      	add	r3, r2
 80077de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80077e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077e6:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80077ea:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80077ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077f0:	3302      	adds	r3, #2
 80077f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 80077f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077fa:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80077fe:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007800:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007804:	3302      	adds	r3, #2
 8007806:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800780a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800780e:	2218      	movs	r2, #24
 8007810:	2100      	movs	r1, #0
 8007812:	4618      	mov	r0, r3
 8007814:	f001 fa5d 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007818:	233f      	movs	r3, #63	; 0x3f
 800781a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800781e:	2383      	movs	r3, #131	; 0x83
 8007820:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007824:	f107 0310 	add.w	r3, r7, #16
 8007828:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800782c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007830:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007834:	f107 030f 	add.w	r3, r7, #15
 8007838:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800783c:	2301      	movs	r3, #1
 800783e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007842:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007846:	2100      	movs	r1, #0
 8007848:	4618      	mov	r0, r3
 800784a:	f001 fe55 	bl	80094f8 <hci_send_req>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	da01      	bge.n	8007858 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8007854:	23ff      	movs	r3, #255	; 0xff
 8007856:	e002      	b.n	800785e <aci_gap_set_discoverable+0x1b2>
  return status;
 8007858:	f107 030f 	add.w	r3, r7, #15
 800785c:	781b      	ldrb	r3, [r3, #0]
}
 800785e:	4618      	mov	r0, r3
 8007860:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007864:	46bd      	mov	sp, r7
 8007866:	bdb0      	pop	{r4, r5, r7, pc}

08007868 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b0cc      	sub	sp, #304	; 0x130
 800786c:	af00      	add	r7, sp, #0
 800786e:	4602      	mov	r2, r0
 8007870:	1dfb      	adds	r3, r7, #7
 8007872:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007874:	f107 0310 	add.w	r3, r7, #16
 8007878:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800787c:	f107 030f 	add.w	r3, r7, #15
 8007880:	2200      	movs	r2, #0
 8007882:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007884:	2300      	movs	r3, #0
 8007886:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800788a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800788e:	1dfa      	adds	r2, r7, #7
 8007890:	7812      	ldrb	r2, [r2, #0]
 8007892:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007894:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007898:	3301      	adds	r3, #1
 800789a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800789e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078a2:	2218      	movs	r2, #24
 80078a4:	2100      	movs	r1, #0
 80078a6:	4618      	mov	r0, r3
 80078a8:	f001 fa13 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80078ac:	233f      	movs	r3, #63	; 0x3f
 80078ae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80078b2:	2385      	movs	r3, #133	; 0x85
 80078b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80078b8:	f107 0310 	add.w	r3, r7, #16
 80078bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80078c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80078c8:	f107 030f 	add.w	r3, r7, #15
 80078cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80078d0:	2301      	movs	r3, #1
 80078d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80078d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078da:	2100      	movs	r1, #0
 80078dc:	4618      	mov	r0, r3
 80078de:	f001 fe0b 	bl	80094f8 <hci_send_req>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	da01      	bge.n	80078ec <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 80078e8:	23ff      	movs	r3, #255	; 0xff
 80078ea:	e002      	b.n	80078f2 <aci_gap_set_io_capability+0x8a>
  return status;
 80078ec:	f107 030f 	add.w	r3, r7, #15
 80078f0:	781b      	ldrb	r3, [r3, #0]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80078fc:	b5b0      	push	{r4, r5, r7, lr}
 80078fe:	b0cc      	sub	sp, #304	; 0x130
 8007900:	af00      	add	r7, sp, #0
 8007902:	4605      	mov	r5, r0
 8007904:	460c      	mov	r4, r1
 8007906:	4610      	mov	r0, r2
 8007908:	4619      	mov	r1, r3
 800790a:	1dfb      	adds	r3, r7, #7
 800790c:	462a      	mov	r2, r5
 800790e:	701a      	strb	r2, [r3, #0]
 8007910:	1dbb      	adds	r3, r7, #6
 8007912:	4622      	mov	r2, r4
 8007914:	701a      	strb	r2, [r3, #0]
 8007916:	1d7b      	adds	r3, r7, #5
 8007918:	4602      	mov	r2, r0
 800791a:	701a      	strb	r2, [r3, #0]
 800791c:	1d3b      	adds	r3, r7, #4
 800791e:	460a      	mov	r2, r1
 8007920:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007922:	f107 0310 	add.w	r3, r7, #16
 8007926:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800792a:	f107 030f 	add.w	r3, r7, #15
 800792e:	2200      	movs	r2, #0
 8007930:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007932:	2300      	movs	r3, #0
 8007934:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800793c:	1dfa      	adds	r2, r7, #7
 800793e:	7812      	ldrb	r2, [r2, #0]
 8007940:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007942:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007946:	3301      	adds	r3, #1
 8007948:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800794c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007950:	1dba      	adds	r2, r7, #6
 8007952:	7812      	ldrb	r2, [r2, #0]
 8007954:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007956:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800795a:	3301      	adds	r3, #1
 800795c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007960:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007964:	1d7a      	adds	r2, r7, #5
 8007966:	7812      	ldrb	r2, [r2, #0]
 8007968:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800796a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800796e:	3301      	adds	r3, #1
 8007970:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007978:	1d3a      	adds	r2, r7, #4
 800797a:	7812      	ldrb	r2, [r2, #0]
 800797c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800797e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007982:	3301      	adds	r3, #1
 8007984:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007988:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800798c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007990:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007992:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007996:	3301      	adds	r3, #1
 8007998:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800799c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079a0:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80079a4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80079a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079aa:	3301      	adds	r3, #1
 80079ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80079b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80079b8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80079ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079be:	3301      	adds	r3, #1
 80079c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80079c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079c8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80079cc:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80079d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079d4:	3304      	adds	r3, #4
 80079d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80079da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079de:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80079e2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80079e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079e8:	3301      	adds	r3, #1
 80079ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80079ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079f2:	2218      	movs	r2, #24
 80079f4:	2100      	movs	r1, #0
 80079f6:	4618      	mov	r0, r3
 80079f8:	f001 f96b 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80079fc:	233f      	movs	r3, #63	; 0x3f
 80079fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007a02:	2386      	movs	r3, #134	; 0x86
 8007a04:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007a08:	f107 0310 	add.w	r3, r7, #16
 8007a0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007a10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007a18:	f107 030f 	add.w	r3, r7, #15
 8007a1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007a20:	2301      	movs	r3, #1
 8007a22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f001 fd63 	bl	80094f8 <hci_send_req>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	da01      	bge.n	8007a3c <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8007a38:	23ff      	movs	r3, #255	; 0xff
 8007a3a:	e002      	b.n	8007a42 <aci_gap_set_authentication_requirement+0x146>
  return status;
 8007a3c:	f107 030f 	add.w	r3, r7, #15
 8007a40:	781b      	ldrb	r3, [r3, #0]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bdb0      	pop	{r4, r5, r7, pc}

08007a4c <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b0cc      	sub	sp, #304	; 0x130
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	4602      	mov	r2, r0
 8007a54:	463b      	mov	r3, r7
 8007a56:	6019      	str	r1, [r3, #0]
 8007a58:	1dbb      	adds	r3, r7, #6
 8007a5a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8007a5c:	f107 0310 	add.w	r3, r7, #16
 8007a60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007a64:	f107 030f 	add.w	r3, r7, #15
 8007a68:	2200      	movs	r2, #0
 8007a6a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a76:	1dba      	adds	r2, r7, #6
 8007a78:	8812      	ldrh	r2, [r2, #0]
 8007a7a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007a7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a80:	3302      	adds	r3, #2
 8007a82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8007a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a8a:	463a      	mov	r2, r7
 8007a8c:	6812      	ldr	r2, [r2, #0]
 8007a8e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8007a92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a96:	3304      	adds	r3, #4
 8007a98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007aa0:	2218      	movs	r2, #24
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f001 f914 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007aaa:	233f      	movs	r3, #63	; 0x3f
 8007aac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8007ab0:	2388      	movs	r3, #136	; 0x88
 8007ab2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007ab6:	f107 0310 	add.w	r3, r7, #16
 8007aba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007abe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ac2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007ac6:	f107 030f 	add.w	r3, r7, #15
 8007aca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ad4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ad8:	2100      	movs	r1, #0
 8007ada:	4618      	mov	r0, r3
 8007adc:	f001 fd0c 	bl	80094f8 <hci_send_req>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	da01      	bge.n	8007aea <aci_gap_pass_key_resp+0x9e>
    return BLE_STATUS_TIMEOUT;
 8007ae6:	23ff      	movs	r3, #255	; 0xff
 8007ae8:	e002      	b.n	8007af0 <aci_gap_pass_key_resp+0xa4>
  return status;
 8007aea:	f107 030f 	add.w	r3, r7, #15
 8007aee:	781b      	ldrb	r3, [r3, #0]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007afa:	b590      	push	{r4, r7, lr}
 8007afc:	b0cd      	sub	sp, #308	; 0x134
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	4604      	mov	r4, r0
 8007b02:	4608      	mov	r0, r1
 8007b04:	4611      	mov	r1, r2
 8007b06:	463a      	mov	r2, r7
 8007b08:	6013      	str	r3, [r2, #0]
 8007b0a:	1dfb      	adds	r3, r7, #7
 8007b0c:	4622      	mov	r2, r4
 8007b0e:	701a      	strb	r2, [r3, #0]
 8007b10:	1dbb      	adds	r3, r7, #6
 8007b12:	4602      	mov	r2, r0
 8007b14:	701a      	strb	r2, [r3, #0]
 8007b16:	1d7b      	adds	r3, r7, #5
 8007b18:	460a      	mov	r2, r1
 8007b1a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007b1c:	f107 0310 	add.w	r3, r7, #16
 8007b20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007b24:	f107 0308 	add.w	r3, r7, #8
 8007b28:	2207      	movs	r2, #7
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f001 f8d0 	bl	8008cd2 <Osal_MemSet>
  int index_input = 0;
 8007b32:	2300      	movs	r3, #0
 8007b34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b3c:	1dfa      	adds	r2, r7, #7
 8007b3e:	7812      	ldrb	r2, [r2, #0]
 8007b40:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007b42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b46:	3301      	adds	r3, #1
 8007b48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8007b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b50:	1dba      	adds	r2, r7, #6
 8007b52:	7812      	ldrb	r2, [r2, #0]
 8007b54:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007b56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b64:	1d7a      	adds	r2, r7, #5
 8007b66:	7812      	ldrb	r2, [r2, #0]
 8007b68:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007b6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b6e:	3301      	adds	r3, #1
 8007b70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b78:	2218      	movs	r2, #24
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f001 f8a8 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b82:	233f      	movs	r3, #63	; 0x3f
 8007b84:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8007b88:	238a      	movs	r3, #138	; 0x8a
 8007b8a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007b8e:	f107 0310 	add.w	r3, r7, #16
 8007b92:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007b96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007b9e:	f107 0308 	add.w	r3, r7, #8
 8007ba2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007ba6:	2307      	movs	r3, #7
 8007ba8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007bac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f001 fca0 	bl	80094f8 <hci_send_req>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	da01      	bge.n	8007bc2 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8007bbe:	23ff      	movs	r3, #255	; 0xff
 8007bc0:	e021      	b.n	8007c06 <aci_gap_init+0x10c>
  if ( resp.Status )
 8007bc2:	f107 0308 	add.w	r3, r7, #8
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <aci_gap_init+0xda>
    return resp.Status;
 8007bcc:	f107 0308 	add.w	r3, r7, #8
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	e018      	b.n	8007c06 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8007bd4:	f107 0308 	add.w	r3, r7, #8
 8007bd8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	463b      	mov	r3, r7
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007be4:	f107 0308 	add.w	r3, r7, #8
 8007be8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007bf2:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007bf4:	f107 0308 	add.w	r3, r7, #8
 8007bf8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007c02:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd90      	pop	{r4, r7, pc}

08007c10 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b0cc      	sub	sp, #304	; 0x130
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4602      	mov	r2, r0
 8007c18:	463b      	mov	r3, r7
 8007c1a:	6019      	str	r1, [r3, #0]
 8007c1c:	1dfb      	adds	r3, r7, #7
 8007c1e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007c20:	f107 0310 	add.w	r3, r7, #16
 8007c24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007c28:	f107 030f 	add.w	r3, r7, #15
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007c30:	2300      	movs	r3, #0
 8007c32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8007c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c3a:	1dfa      	adds	r2, r7, #7
 8007c3c:	7812      	ldrb	r2, [r2, #0]
 8007c3e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007c40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c44:	3301      	adds	r3, #1
 8007c46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8007c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c4e:	1c58      	adds	r0, r3, #1
 8007c50:	1dfb      	adds	r3, r7, #7
 8007c52:	781a      	ldrb	r2, [r3, #0]
 8007c54:	463b      	mov	r3, r7
 8007c56:	6819      	ldr	r1, [r3, #0]
 8007c58:	f001 f82b 	bl	8008cb2 <Osal_MemCpy>
  index_input += AdvDataLen;
 8007c5c:	1dfb      	adds	r3, r7, #7
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007c64:	4413      	add	r3, r2
 8007c66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c6e:	2218      	movs	r2, #24
 8007c70:	2100      	movs	r1, #0
 8007c72:	4618      	mov	r0, r3
 8007c74:	f001 f82d 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c78:	233f      	movs	r3, #63	; 0x3f
 8007c7a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007c7e:	238e      	movs	r3, #142	; 0x8e
 8007c80:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007c84:	f107 0310 	add.w	r3, r7, #16
 8007c88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007c8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007c94:	f107 030f 	add.w	r3, r7, #15
 8007c98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ca2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f001 fc25 	bl	80094f8 <hci_send_req>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	da01      	bge.n	8007cb8 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8007cb4:	23ff      	movs	r3, #255	; 0xff
 8007cb6:	e002      	b.n	8007cbe <aci_gap_update_adv_data+0xae>
  return status;
 8007cb8:	f107 030f 	add.w	r3, r7, #15
 8007cbc:	781b      	ldrb	r3, [r3, #0]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b088      	sub	sp, #32
 8007ccc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007cd2:	f107 0308 	add.w	r3, r7, #8
 8007cd6:	2218      	movs	r2, #24
 8007cd8:	2100      	movs	r1, #0
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 fff9 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007ce0:	233f      	movs	r3, #63	; 0x3f
 8007ce2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007ce4:	2392      	movs	r3, #146	; 0x92
 8007ce6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007ce8:	1dfb      	adds	r3, r7, #7
 8007cea:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007cec:	2301      	movs	r3, #1
 8007cee:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007cf0:	f107 0308 	add.w	r3, r7, #8
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f001 fbfe 	bl	80094f8 <hci_send_req>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	da01      	bge.n	8007d06 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007d02:	23ff      	movs	r3, #255	; 0xff
 8007d04:	e000      	b.n	8007d08 <aci_gap_configure_whitelist+0x40>
  return status;
 8007d06:	79fb      	ldrb	r3, [r7, #7]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3720      	adds	r7, #32
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <aci_gap_clear_security_db>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_clear_security_db( void )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b088      	sub	sp, #32
 8007d14:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007d16:	2300      	movs	r3, #0
 8007d18:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d1a:	f107 0308 	add.w	r3, r7, #8
 8007d1e:	2218      	movs	r2, #24
 8007d20:	2100      	movs	r1, #0
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 ffd5 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d28:	233f      	movs	r3, #63	; 0x3f
 8007d2a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x094;
 8007d2c:	2394      	movs	r3, #148	; 0x94
 8007d2e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007d30:	1dfb      	adds	r3, r7, #7
 8007d32:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007d34:	2301      	movs	r3, #1
 8007d36:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d38:	f107 0308 	add.w	r3, r7, #8
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f001 fbda 	bl	80094f8 <hci_send_req>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	da01      	bge.n	8007d4e <aci_gap_clear_security_db+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007d4a:	23ff      	movs	r3, #255	; 0xff
 8007d4c:	e000      	b.n	8007d50 <aci_gap_clear_security_db+0x40>
  return status;
 8007d4e:	79fb      	ldrb	r3, [r7, #7]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3720      	adds	r7, #32
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <aci_gap_terminate_gap_proc>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_terminate_gap_proc( uint8_t Procedure_Code )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b0cc      	sub	sp, #304	; 0x130
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	4602      	mov	r2, r0
 8007d60:	1dfb      	adds	r3, r7, #7
 8007d62:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 8007d64:	f107 0310 	add.w	r3, r7, #16
 8007d68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007d6c:	f107 030f 	add.w	r3, r7, #15
 8007d70:	2200      	movs	r2, #0
 8007d72:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007d74:	2300      	movs	r3, #0
 8007d76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Procedure_Code = Procedure_Code;
 8007d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d7e:	1dfa      	adds	r2, r7, #7
 8007d80:	7812      	ldrb	r2, [r2, #0]
 8007d82:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007d84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d88:	3301      	adds	r3, #1
 8007d8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d92:	2218      	movs	r2, #24
 8007d94:	2100      	movs	r1, #0
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 ff9b 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d9c:	233f      	movs	r3, #63	; 0x3f
 8007d9e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 8007da2:	239d      	movs	r3, #157	; 0x9d
 8007da4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007da8:	f107 0310 	add.w	r3, r7, #16
 8007dac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007db0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007db4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007db8:	f107 030f 	add.w	r3, r7, #15
 8007dbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007dc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007dca:	2100      	movs	r1, #0
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f001 fb93 	bl	80094f8 <hci_send_req>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	da01      	bge.n	8007ddc <aci_gap_terminate_gap_proc+0x84>
    return BLE_STATUS_TIMEOUT;
 8007dd8:	23ff      	movs	r3, #255	; 0xff
 8007dda:	e002      	b.n	8007de2 <aci_gap_terminate_gap_proc+0x8a>
  return status;
 8007ddc:	f107 030f 	add.w	r3, r7, #15
 8007de0:	781b      	ldrb	r3, [r3, #0]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b0cc      	sub	sp, #304	; 0x130
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	4602      	mov	r2, r0
 8007df4:	1dbb      	adds	r3, r7, #6
 8007df6:	801a      	strh	r2, [r3, #0]
 8007df8:	1d7b      	adds	r3, r7, #5
 8007dfa:	460a      	mov	r2, r1
 8007dfc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8007dfe:	f107 0310 	add.w	r3, r7, #16
 8007e02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007e06:	f107 030f 	add.w	r3, r7, #15
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e18:	1dba      	adds	r2, r7, #6
 8007e1a:	8812      	ldrh	r2, [r2, #0]
 8007e1c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007e1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e22:	3302      	adds	r3, #2
 8007e24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8007e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e2c:	1d7a      	adds	r2, r7, #5
 8007e2e:	7812      	ldrb	r2, [r2, #0]
 8007e30:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007e32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e36:	3301      	adds	r3, #1
 8007e38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e40:	2218      	movs	r2, #24
 8007e42:	2100      	movs	r1, #0
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 ff44 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e4a:	233f      	movs	r3, #63	; 0x3f
 8007e4c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8007e50:	23a5      	movs	r3, #165	; 0xa5
 8007e52:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007e56:	f107 0310 	add.w	r3, r7, #16
 8007e5a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007e66:	f107 030f 	add.w	r3, r7, #15
 8007e6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e78:	2100      	movs	r1, #0
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f001 fb3c 	bl	80094f8 <hci_send_req>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	da01      	bge.n	8007e8a <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 8007e86:	23ff      	movs	r3, #255	; 0xff
 8007e88:	e002      	b.n	8007e90 <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 8007e8a:	f107 030f 	add.w	r3, r7, #15
 8007e8e:	781b      	ldrb	r3, [r3, #0]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b088      	sub	sp, #32
 8007e9e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ea4:	f107 0308 	add.w	r3, r7, #8
 8007ea8:	2218      	movs	r2, #24
 8007eaa:	2100      	movs	r1, #0
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 ff10 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007eb2:	233f      	movs	r3, #63	; 0x3f
 8007eb4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8007eb6:	f240 1301 	movw	r3, #257	; 0x101
 8007eba:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007ebc:	1dfb      	adds	r3, r7, #7
 8007ebe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ec4:	f107 0308 	add.w	r3, r7, #8
 8007ec8:	2100      	movs	r1, #0
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f001 fb14 	bl	80094f8 <hci_send_req>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	da01      	bge.n	8007eda <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8007ed6:	23ff      	movs	r3, #255	; 0xff
 8007ed8:	e000      	b.n	8007edc <aci_gatt_init+0x42>
  return status;
 8007eda:	79fb      	ldrb	r3, [r7, #7]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3720      	adds	r7, #32
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8007ee4:	b590      	push	{r4, r7, lr}
 8007ee6:	b0cf      	sub	sp, #316	; 0x13c
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	4604      	mov	r4, r0
 8007eec:	4638      	mov	r0, r7
 8007eee:	6001      	str	r1, [r0, #0]
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	1dfb      	adds	r3, r7, #7
 8007ef6:	4622      	mov	r2, r4
 8007ef8:	701a      	strb	r2, [r3, #0]
 8007efa:	1dbb      	adds	r3, r7, #6
 8007efc:	4602      	mov	r2, r0
 8007efe:	701a      	strb	r2, [r3, #0]
 8007f00:	1d7b      	adds	r3, r7, #5
 8007f02:	460a      	mov	r2, r1
 8007f04:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007f06:	f107 0310 	add.w	r3, r7, #16
 8007f0a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007f0e:	1dfb      	adds	r3, r7, #7
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d007      	beq.n	8007f26 <aci_gatt_add_service+0x42>
 8007f16:	1dfb      	adds	r3, r7, #7
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d101      	bne.n	8007f22 <aci_gatt_add_service+0x3e>
 8007f1e:	2311      	movs	r3, #17
 8007f20:	e002      	b.n	8007f28 <aci_gatt_add_service+0x44>
 8007f22:	2301      	movs	r3, #1
 8007f24:	e000      	b.n	8007f28 <aci_gatt_add_service+0x44>
 8007f26:	2303      	movs	r3, #3
 8007f28:	f107 0210 	add.w	r2, r7, #16
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007f32:	f107 030c 	add.w	r3, r7, #12
 8007f36:	2203      	movs	r2, #3
 8007f38:	2100      	movs	r1, #0
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 fec9 	bl	8008cd2 <Osal_MemSet>
  int index_input = 0;
 8007f40:	2300      	movs	r3, #0
 8007f42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8007f46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f4a:	1dfa      	adds	r2, r7, #7
 8007f4c:	7812      	ldrb	r2, [r2, #0]
 8007f4e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007f50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f54:	3301      	adds	r3, #1
 8007f56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007f5a:	1dfb      	adds	r3, r7, #7
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d002      	beq.n	8007f68 <aci_gatt_add_service+0x84>
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d004      	beq.n	8007f70 <aci_gatt_add_service+0x8c>
 8007f66:	e007      	b.n	8007f78 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8007f68:	2302      	movs	r3, #2
 8007f6a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007f6e:	e005      	b.n	8007f7c <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8007f70:	2310      	movs	r3, #16
 8007f72:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007f76:	e001      	b.n	8007f7c <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8007f78:	2347      	movs	r3, #71	; 0x47
 8007f7a:	e05d      	b.n	8008038 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007f7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f80:	1c58      	adds	r0, r3, #1
 8007f82:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8007f86:	463b      	mov	r3, r7
 8007f88:	6819      	ldr	r1, [r3, #0]
 8007f8a:	f000 fe92 	bl	8008cb2 <Osal_MemCpy>
    index_input += size;
 8007f8e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8007f92:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007f96:	4413      	add	r3, r2
 8007f98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8007f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fa0:	1dba      	adds	r2, r7, #6
 8007fa2:	7812      	ldrb	r2, [r2, #0]
 8007fa4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007fa6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007faa:	3301      	adds	r3, #1
 8007fac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8007fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fb4:	1d7a      	adds	r2, r7, #5
 8007fb6:	7812      	ldrb	r2, [r2, #0]
 8007fb8:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8007fba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007fc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007fc8:	2218      	movs	r2, #24
 8007fca:	2100      	movs	r1, #0
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 fe80 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007fd2:	233f      	movs	r3, #63	; 0x3f
 8007fd4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8007fd8:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007fdc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007fe0:	f107 0310 	add.w	r3, r7, #16
 8007fe4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007fe8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007ff0:	f107 030c 	add.w	r3, r7, #12
 8007ff4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ffe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008002:	2100      	movs	r1, #0
 8008004:	4618      	mov	r0, r3
 8008006:	f001 fa77 	bl	80094f8 <hci_send_req>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	da01      	bge.n	8008014 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8008010:	23ff      	movs	r3, #255	; 0xff
 8008012:	e011      	b.n	8008038 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8008014:	f107 030c 	add.w	r3, r7, #12
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d003      	beq.n	8008026 <aci_gatt_add_service+0x142>
    return resp.Status;
 800801e:	f107 030c 	add.w	r3, r7, #12
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	e008      	b.n	8008038 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8008026:	f107 030c 	add.w	r3, r7, #12
 800802a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800802e:	b29a      	uxth	r2, r3
 8008030:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008034:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800803e:	46bd      	mov	sp, r7
 8008040:	bd90      	pop	{r4, r7, pc}

08008042 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8008042:	b590      	push	{r4, r7, lr}
 8008044:	b0d1      	sub	sp, #324	; 0x144
 8008046:	af00      	add	r7, sp, #0
 8008048:	4604      	mov	r4, r0
 800804a:	4608      	mov	r0, r1
 800804c:	f107 0108 	add.w	r1, r7, #8
 8008050:	600a      	str	r2, [r1, #0]
 8008052:	4619      	mov	r1, r3
 8008054:	f107 030e 	add.w	r3, r7, #14
 8008058:	4622      	mov	r2, r4
 800805a:	801a      	strh	r2, [r3, #0]
 800805c:	f107 030d 	add.w	r3, r7, #13
 8008060:	4602      	mov	r2, r0
 8008062:	701a      	strb	r2, [r3, #0]
 8008064:	1dbb      	adds	r3, r7, #6
 8008066:	460a      	mov	r2, r1
 8008068:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800806a:	f107 0318 	add.w	r3, r7, #24
 800806e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008072:	f107 030d 	add.w	r3, r7, #13
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d008      	beq.n	800808e <aci_gatt_add_char+0x4c>
 800807c:	f107 030d 	add.w	r3, r7, #13
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	2b02      	cmp	r3, #2
 8008084:	d101      	bne.n	800808a <aci_gatt_add_char+0x48>
 8008086:	2313      	movs	r3, #19
 8008088:	e002      	b.n	8008090 <aci_gatt_add_char+0x4e>
 800808a:	2303      	movs	r3, #3
 800808c:	e000      	b.n	8008090 <aci_gatt_add_char+0x4e>
 800808e:	2305      	movs	r3, #5
 8008090:	f107 0218 	add.w	r2, r7, #24
 8008094:	4413      	add	r3, r2
 8008096:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800809a:	f107 0314 	add.w	r3, r7, #20
 800809e:	2203      	movs	r2, #3
 80080a0:	2100      	movs	r1, #0
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 fe15 	bl	8008cd2 <Osal_MemSet>
  int index_input = 0;
 80080a8:	2300      	movs	r3, #0
 80080aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80080ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80080b2:	f107 020e 	add.w	r2, r7, #14
 80080b6:	8812      	ldrh	r2, [r2, #0]
 80080b8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80080ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80080be:	3302      	adds	r3, #2
 80080c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80080c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80080c8:	f107 020d 	add.w	r2, r7, #13
 80080cc:	7812      	ldrb	r2, [r2, #0]
 80080ce:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80080d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80080d4:	3301      	adds	r3, #1
 80080d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80080da:	f107 030d 	add.w	r3, r7, #13
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d002      	beq.n	80080ea <aci_gatt_add_char+0xa8>
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d004      	beq.n	80080f2 <aci_gatt_add_char+0xb0>
 80080e8:	e007      	b.n	80080fa <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 80080ea:	2302      	movs	r3, #2
 80080ec:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80080f0:	e005      	b.n	80080fe <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 80080f2:	2310      	movs	r3, #16
 80080f4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80080f8:	e001      	b.n	80080fe <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 80080fa:	2347      	movs	r3, #71	; 0x47
 80080fc:	e086      	b.n	800820c <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80080fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008102:	1cd8      	adds	r0, r3, #3
 8008104:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8008108:	f107 0308 	add.w	r3, r7, #8
 800810c:	6819      	ldr	r1, [r3, #0]
 800810e:	f000 fdd0 	bl	8008cb2 <Osal_MemCpy>
    index_input += size;
 8008112:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8008116:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800811a:	4413      	add	r3, r2
 800811c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8008120:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008124:	1dba      	adds	r2, r7, #6
 8008126:	8812      	ldrh	r2, [r2, #0]
 8008128:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800812a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800812e:	3302      	adds	r3, #2
 8008130:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8008134:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008138:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800813c:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800813e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008142:	3301      	adds	r3, #1
 8008144:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8008148:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800814c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008150:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8008152:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008156:	3301      	adds	r3, #1
 8008158:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800815c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008160:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8008164:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8008166:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800816a:	3301      	adds	r3, #1
 800816c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8008170:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008174:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8008178:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800817a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800817e:	3301      	adds	r3, #1
 8008180:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8008184:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008188:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800818c:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800818e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008192:	3301      	adds	r3, #1
 8008194:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008198:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800819c:	2218      	movs	r2, #24
 800819e:	2100      	movs	r1, #0
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 fd96 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80081a6:	233f      	movs	r3, #63	; 0x3f
 80081a8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80081ac:	f44f 7382 	mov.w	r3, #260	; 0x104
 80081b0:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80081b4:	f107 0318 	add.w	r3, r7, #24
 80081b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80081bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80081c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80081c4:	f107 0314 	add.w	r3, r7, #20
 80081c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80081cc:	2303      	movs	r3, #3
 80081ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80081d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80081d6:	2100      	movs	r1, #0
 80081d8:	4618      	mov	r0, r3
 80081da:	f001 f98d 	bl	80094f8 <hci_send_req>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	da01      	bge.n	80081e8 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 80081e4:	23ff      	movs	r3, #255	; 0xff
 80081e6:	e011      	b.n	800820c <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 80081e8:	f107 0314 	add.w	r3, r7, #20
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <aci_gatt_add_char+0x1b8>
    return resp.Status;
 80081f2:	f107 0314 	add.w	r3, r7, #20
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	e008      	b.n	800820c <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 80081fa:	f107 0314 	add.w	r3, r7, #20
 80081fe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008202:	b29a      	uxth	r2, r3
 8008204:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008208:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8008212:	46bd      	mov	sp, r7
 8008214:	bd90      	pop	{r4, r7, pc}

08008216 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008216:	b5b0      	push	{r4, r5, r7, lr}
 8008218:	b0cc      	sub	sp, #304	; 0x130
 800821a:	af00      	add	r7, sp, #0
 800821c:	4605      	mov	r5, r0
 800821e:	460c      	mov	r4, r1
 8008220:	4610      	mov	r0, r2
 8008222:	4619      	mov	r1, r3
 8008224:	1dbb      	adds	r3, r7, #6
 8008226:	462a      	mov	r2, r5
 8008228:	801a      	strh	r2, [r3, #0]
 800822a:	1d3b      	adds	r3, r7, #4
 800822c:	4622      	mov	r2, r4
 800822e:	801a      	strh	r2, [r3, #0]
 8008230:	1cfb      	adds	r3, r7, #3
 8008232:	4602      	mov	r2, r0
 8008234:	701a      	strb	r2, [r3, #0]
 8008236:	1cbb      	adds	r3, r7, #2
 8008238:	460a      	mov	r2, r1
 800823a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800823c:	f107 0310 	add.w	r3, r7, #16
 8008240:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008244:	f107 030f 	add.w	r3, r7, #15
 8008248:	2200      	movs	r2, #0
 800824a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800824c:	2300      	movs	r3, #0
 800824e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8008252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008256:	1dba      	adds	r2, r7, #6
 8008258:	8812      	ldrh	r2, [r2, #0]
 800825a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800825c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008260:	3302      	adds	r3, #2
 8008262:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8008266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800826a:	1d3a      	adds	r2, r7, #4
 800826c:	8812      	ldrh	r2, [r2, #0]
 800826e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008270:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008274:	3302      	adds	r3, #2
 8008276:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800827a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800827e:	1cfa      	adds	r2, r7, #3
 8008280:	7812      	ldrb	r2, [r2, #0]
 8008282:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008284:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008288:	3301      	adds	r3, #1
 800828a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800828e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008292:	1cba      	adds	r2, r7, #2
 8008294:	7812      	ldrb	r2, [r2, #0]
 8008296:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008298:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800829c:	3301      	adds	r3, #1
 800829e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80082a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082a6:	1d98      	adds	r0, r3, #6
 80082a8:	1cbb      	adds	r3, r7, #2
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	461a      	mov	r2, r3
 80082ae:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80082b2:	f000 fcfe 	bl	8008cb2 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80082b6:	1cbb      	adds	r3, r7, #2
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80082be:	4413      	add	r3, r2
 80082c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80082c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80082c8:	2218      	movs	r2, #24
 80082ca:	2100      	movs	r1, #0
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 fd00 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80082d2:	233f      	movs	r3, #63	; 0x3f
 80082d4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80082d8:	f44f 7383 	mov.w	r3, #262	; 0x106
 80082dc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80082e0:	f107 0310 	add.w	r3, r7, #16
 80082e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80082e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80082f0:	f107 030f 	add.w	r3, r7, #15
 80082f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80082f8:	2301      	movs	r3, #1
 80082fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80082fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008302:	2100      	movs	r1, #0
 8008304:	4618      	mov	r0, r3
 8008306:	f001 f8f7 	bl	80094f8 <hci_send_req>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	da01      	bge.n	8008314 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8008310:	23ff      	movs	r3, #255	; 0xff
 8008312:	e002      	b.n	800831a <aci_gatt_update_char_value+0x104>
  return status;
 8008314:	f107 030f 	add.w	r3, r7, #15
 8008318:	781b      	ldrb	r3, [r3, #0]
}
 800831a:	4618      	mov	r0, r3
 800831c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008320:	46bd      	mov	sp, r7
 8008322:	bdb0      	pop	{r4, r5, r7, pc}

08008324 <aci_gatt_exchange_config>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_exchange_config( uint16_t Connection_Handle )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b0cc      	sub	sp, #304	; 0x130
 8008328:	af00      	add	r7, sp, #0
 800832a:	4602      	mov	r2, r0
 800832c:	1dbb      	adds	r3, r7, #6
 800832e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
 8008330:	f107 0310 	add.w	r3, r7, #16
 8008334:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008338:	f107 030f 	add.w	r3, r7, #15
 800833c:	2200      	movs	r2, #0
 800833e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008340:	2300      	movs	r3, #0
 8008342:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800834a:	1dba      	adds	r2, r7, #6
 800834c:	8812      	ldrh	r2, [r2, #0]
 800834e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008350:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008354:	3302      	adds	r3, #2
 8008356:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800835a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800835e:	2218      	movs	r2, #24
 8008360:	2100      	movs	r1, #0
 8008362:	4618      	mov	r0, r3
 8008364:	f000 fcb5 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008368:	233f      	movs	r3, #63	; 0x3f
 800836a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x10b;
 800836e:	f240 130b 	movw	r3, #267	; 0x10b
 8008372:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008376:	230f      	movs	r3, #15
 8008378:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800837c:	f107 0310 	add.w	r3, r7, #16
 8008380:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008384:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008388:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800838c:	f107 030f 	add.w	r3, r7, #15
 8008390:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008394:	2301      	movs	r3, #1
 8008396:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800839a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800839e:	2100      	movs	r1, #0
 80083a0:	4618      	mov	r0, r3
 80083a2:	f001 f8a9 	bl	80094f8 <hci_send_req>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	da01      	bge.n	80083b0 <aci_gatt_exchange_config+0x8c>
    return BLE_STATUS_TIMEOUT;
 80083ac:	23ff      	movs	r3, #255	; 0xff
 80083ae:	e002      	b.n	80083b6 <aci_gatt_exchange_config+0x92>
  return status;
 80083b0:	f107 030f 	add.w	r3, r7, #15
 80083b4:	781b      	ldrb	r3, [r3, #0]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <aci_gatt_disc_all_primary_services>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_disc_all_primary_services( uint16_t Connection_Handle )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b0cc      	sub	sp, #304	; 0x130
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	4602      	mov	r2, r0
 80083c8:	1dbb      	adds	r3, r7, #6
 80083ca:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 80083cc:	f107 0310 	add.w	r3, r7, #16
 80083d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80083d4:	f107 030f 	add.w	r3, r7, #15
 80083d8:	2200      	movs	r2, #0
 80083da:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80083dc:	2300      	movs	r3, #0
 80083de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80083e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083e6:	1dba      	adds	r2, r7, #6
 80083e8:	8812      	ldrh	r2, [r2, #0]
 80083ea:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80083ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083f0:	3302      	adds	r3, #2
 80083f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80083f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80083fa:	2218      	movs	r2, #24
 80083fc:	2100      	movs	r1, #0
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 fc67 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008404:	233f      	movs	r3, #63	; 0x3f
 8008406:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 800840a:	f44f 7389 	mov.w	r3, #274	; 0x112
 800840e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008412:	230f      	movs	r3, #15
 8008414:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008418:	f107 0310 	add.w	r3, r7, #16
 800841c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008420:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008424:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008428:	f107 030f 	add.w	r3, r7, #15
 800842c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008430:	2301      	movs	r3, #1
 8008432:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008436:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800843a:	2100      	movs	r1, #0
 800843c:	4618      	mov	r0, r3
 800843e:	f001 f85b 	bl	80094f8 <hci_send_req>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	da01      	bge.n	800844c <aci_gatt_disc_all_primary_services+0x8c>
    return BLE_STATUS_TIMEOUT;
 8008448:	23ff      	movs	r3, #255	; 0xff
 800844a:	e002      	b.n	8008452 <aci_gatt_disc_all_primary_services+0x92>
  return status;
 800844c:	f107 030f 	add.w	r3, r7, #15
 8008450:	781b      	ldrb	r3, [r3, #0]
}
 8008452:	4618      	mov	r0, r3
 8008454:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service( uint16_t Connection_Handle,
                                              uint16_t Start_Handle,
                                              uint16_t End_Handle )
{
 800845c:	b590      	push	{r4, r7, lr}
 800845e:	b0cd      	sub	sp, #308	; 0x134
 8008460:	af00      	add	r7, sp, #0
 8008462:	4604      	mov	r4, r0
 8008464:	4608      	mov	r0, r1
 8008466:	4611      	mov	r1, r2
 8008468:	1dbb      	adds	r3, r7, #6
 800846a:	4622      	mov	r2, r4
 800846c:	801a      	strh	r2, [r3, #0]
 800846e:	1d3b      	adds	r3, r7, #4
 8008470:	4602      	mov	r2, r0
 8008472:	801a      	strh	r2, [r3, #0]
 8008474:	1cbb      	adds	r3, r7, #2
 8008476:	460a      	mov	r2, r1
 8008478:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 800847a:	f107 0310 	add.w	r3, r7, #16
 800847e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008482:	f107 030f 	add.w	r3, r7, #15
 8008486:	2200      	movs	r2, #0
 8008488:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800848a:	2300      	movs	r3, #0
 800848c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008494:	1dba      	adds	r2, r7, #6
 8008496:	8812      	ldrh	r2, [r2, #0]
 8008498:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800849a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800849e:	3302      	adds	r3, #2
 80084a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = Start_Handle;
 80084a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084a8:	1d3a      	adds	r2, r7, #4
 80084aa:	8812      	ldrh	r2, [r2, #0]
 80084ac:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80084ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084b2:	3302      	adds	r3, #2
 80084b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 80084b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084bc:	1cba      	adds	r2, r7, #2
 80084be:	8812      	ldrh	r2, [r2, #0]
 80084c0:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80084c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084c6:	3302      	adds	r3, #2
 80084c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80084cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80084d0:	2218      	movs	r2, #24
 80084d2:	2100      	movs	r1, #0
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 fbfc 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80084da:	233f      	movs	r3, #63	; 0x3f
 80084dc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 80084e0:	f240 1315 	movw	r3, #277	; 0x115
 80084e4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80084e8:	230f      	movs	r3, #15
 80084ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80084ee:	f107 0310 	add.w	r3, r7, #16
 80084f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80084f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80084fe:	f107 030f 	add.w	r3, r7, #15
 8008502:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008506:	2301      	movs	r3, #1
 8008508:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800850c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008510:	2100      	movs	r1, #0
 8008512:	4618      	mov	r0, r3
 8008514:	f000 fff0 	bl	80094f8 <hci_send_req>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	da01      	bge.n	8008522 <aci_gatt_disc_all_char_of_service+0xc6>
    return BLE_STATUS_TIMEOUT;
 800851e:	23ff      	movs	r3, #255	; 0xff
 8008520:	e002      	b.n	8008528 <aci_gatt_disc_all_char_of_service+0xcc>
  return status;
 8008522:	f107 030f 	add.w	r3, r7, #15
 8008526:	781b      	ldrb	r3, [r3, #0]
}
 8008528:	4618      	mov	r0, r3
 800852a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800852e:	46bd      	mov	sp, r7
 8008530:	bd90      	pop	{r4, r7, pc}

08008532 <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc( uint16_t Connection_Handle,
                                        uint16_t Char_Handle,
                                        uint16_t End_Handle )
{
 8008532:	b590      	push	{r4, r7, lr}
 8008534:	b0cd      	sub	sp, #308	; 0x134
 8008536:	af00      	add	r7, sp, #0
 8008538:	4604      	mov	r4, r0
 800853a:	4608      	mov	r0, r1
 800853c:	4611      	mov	r1, r2
 800853e:	1dbb      	adds	r3, r7, #6
 8008540:	4622      	mov	r2, r4
 8008542:	801a      	strh	r2, [r3, #0]
 8008544:	1d3b      	adds	r3, r7, #4
 8008546:	4602      	mov	r2, r0
 8008548:	801a      	strh	r2, [r3, #0]
 800854a:	1cbb      	adds	r3, r7, #2
 800854c:	460a      	mov	r2, r1
 800854e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 8008550:	f107 0310 	add.w	r3, r7, #16
 8008554:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008558:	f107 030f 	add.w	r3, r7, #15
 800855c:	2200      	movs	r2, #0
 800855e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008560:	2300      	movs	r3, #0
 8008562:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800856a:	1dba      	adds	r2, r7, #6
 800856c:	8812      	ldrh	r2, [r2, #0]
 800856e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008570:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008574:	3302      	adds	r3, #2
 8008576:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800857a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800857e:	1d3a      	adds	r2, r7, #4
 8008580:	8812      	ldrh	r2, [r2, #0]
 8008582:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008584:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008588:	3302      	adds	r3, #2
 800858a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 800858e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008592:	1cba      	adds	r2, r7, #2
 8008594:	8812      	ldrh	r2, [r2, #0]
 8008596:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8008598:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800859c:	3302      	adds	r3, #2
 800859e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80085a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80085a6:	2218      	movs	r2, #24
 80085a8:	2100      	movs	r1, #0
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 fb91 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80085b0:	233f      	movs	r3, #63	; 0x3f
 80085b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 80085b6:	f240 1317 	movw	r3, #279	; 0x117
 80085ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80085be:	230f      	movs	r3, #15
 80085c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80085c4:	f107 0310 	add.w	r3, r7, #16
 80085c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80085cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80085d4:	f107 030f 	add.w	r3, r7, #15
 80085d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80085dc:	2301      	movs	r3, #1
 80085de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80085e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80085e6:	2100      	movs	r1, #0
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 ff85 	bl	80094f8 <hci_send_req>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	da01      	bge.n	80085f8 <aci_gatt_disc_all_char_desc+0xc6>
    return BLE_STATUS_TIMEOUT;
 80085f4:	23ff      	movs	r3, #255	; 0xff
 80085f6:	e002      	b.n	80085fe <aci_gatt_disc_all_char_desc+0xcc>
  return status;
 80085f8:	f107 030f 	add.w	r3, r7, #15
 80085fc:	781b      	ldrb	r3, [r3, #0]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008604:	46bd      	mov	sp, r7
 8008606:	bd90      	pop	{r4, r7, pc}

08008608 <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc( uint16_t Connection_Handle,
                                     uint16_t Attr_Handle,
                                     uint8_t Attribute_Val_Length,
                                     const uint8_t* Attribute_Val )
{
 8008608:	b590      	push	{r4, r7, lr}
 800860a:	b0cf      	sub	sp, #316	; 0x13c
 800860c:	af00      	add	r7, sp, #0
 800860e:	4604      	mov	r4, r0
 8008610:	4608      	mov	r0, r1
 8008612:	4611      	mov	r1, r2
 8008614:	1d3a      	adds	r2, r7, #4
 8008616:	6013      	str	r3, [r2, #0]
 8008618:	f107 030e 	add.w	r3, r7, #14
 800861c:	4622      	mov	r2, r4
 800861e:	801a      	strh	r2, [r3, #0]
 8008620:	f107 030c 	add.w	r3, r7, #12
 8008624:	4602      	mov	r2, r0
 8008626:	801a      	strh	r2, [r3, #0]
 8008628:	f107 030b 	add.w	r3, r7, #11
 800862c:	460a      	mov	r2, r1
 800862e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 8008630:	f107 0318 	add.w	r3, r7, #24
 8008634:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8008638:	f107 0317 	add.w	r3, r7, #23
 800863c:	2200      	movs	r2, #0
 800863e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008640:	2300      	movs	r3, #0
 8008642:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8008646:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800864a:	f107 020e 	add.w	r2, r7, #14
 800864e:	8812      	ldrh	r2, [r2, #0]
 8008650:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008652:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008656:	3302      	adds	r3, #2
 8008658:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 800865c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008660:	f107 020c 	add.w	r2, r7, #12
 8008664:	8812      	ldrh	r2, [r2, #0]
 8008666:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008668:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800866c:	3302      	adds	r3, #2
 800866e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 8008672:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008676:	f107 020b 	add.w	r2, r7, #11
 800867a:	7812      	ldrb	r2, [r2, #0]
 800867c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800867e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008682:	3301      	adds	r3, #1
 8008684:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 8008688:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800868c:	1d58      	adds	r0, r3, #5
 800868e:	f107 030b 	add.w	r3, r7, #11
 8008692:	781a      	ldrb	r2, [r3, #0]
 8008694:	1d3b      	adds	r3, r7, #4
 8008696:	6819      	ldr	r1, [r3, #0]
 8008698:	f000 fb0b 	bl	8008cb2 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 800869c:	f107 030b 	add.w	r3, r7, #11
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80086a6:	4413      	add	r3, r2
 80086a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80086ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80086b0:	2218      	movs	r2, #24
 80086b2:	2100      	movs	r1, #0
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 fb0c 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80086ba:	233f      	movs	r3, #63	; 0x3f
 80086bc:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 80086c0:	f240 1321 	movw	r3, #289	; 0x121
 80086c4:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 80086c8:	230f      	movs	r3, #15
 80086ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 80086ce:	f107 0318 	add.w	r3, r7, #24
 80086d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80086d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80086da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 80086de:	f107 0317 	add.w	r3, r7, #23
 80086e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 80086e6:	2301      	movs	r3, #1
 80086e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80086ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80086f0:	2100      	movs	r1, #0
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 ff00 	bl	80094f8 <hci_send_req>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	da01      	bge.n	8008702 <aci_gatt_write_char_desc+0xfa>
    return BLE_STATUS_TIMEOUT;
 80086fe:	23ff      	movs	r3, #255	; 0xff
 8008700:	e002      	b.n	8008708 <aci_gatt_write_char_desc+0x100>
  return status;
 8008702:	f107 0317 	add.w	r3, r7, #23
 8008706:	781b      	ldrb	r3, [r3, #0]
}
 8008708:	4618      	mov	r0, r3
 800870a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800870e:	46bd      	mov	sp, r7
 8008710:	bd90      	pop	{r4, r7, pc}

08008712 <aci_gatt_write_resp>:
                                uint16_t Attr_Handle,
                                uint8_t Write_status,
                                uint8_t Error_Code,
                                uint8_t Attribute_Val_Length,
                                const uint8_t* Attribute_Val )
{
 8008712:	b5b0      	push	{r4, r5, r7, lr}
 8008714:	b0cc      	sub	sp, #304	; 0x130
 8008716:	af00      	add	r7, sp, #0
 8008718:	4605      	mov	r5, r0
 800871a:	460c      	mov	r4, r1
 800871c:	4610      	mov	r0, r2
 800871e:	4619      	mov	r1, r3
 8008720:	1dbb      	adds	r3, r7, #6
 8008722:	462a      	mov	r2, r5
 8008724:	801a      	strh	r2, [r3, #0]
 8008726:	1d3b      	adds	r3, r7, #4
 8008728:	4622      	mov	r2, r4
 800872a:	801a      	strh	r2, [r3, #0]
 800872c:	1cfb      	adds	r3, r7, #3
 800872e:	4602      	mov	r2, r0
 8008730:	701a      	strb	r2, [r3, #0]
 8008732:	1cbb      	adds	r3, r7, #2
 8008734:	460a      	mov	r2, r1
 8008736:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_resp_cp0 *cp0 = (aci_gatt_write_resp_cp0*)(cmd_buffer);
 8008738:	f107 0310 	add.w	r3, r7, #16
 800873c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008740:	f107 030f 	add.w	r3, r7, #15
 8008744:	2200      	movs	r2, #0
 8008746:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008748:	2300      	movs	r3, #0
 800874a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800874e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008752:	1dba      	adds	r2, r7, #6
 8008754:	8812      	ldrh	r2, [r2, #0]
 8008756:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008758:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800875c:	3302      	adds	r3, #2
 800875e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attr_Handle = Attr_Handle;
 8008762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008766:	1d3a      	adds	r2, r7, #4
 8008768:	8812      	ldrh	r2, [r2, #0]
 800876a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800876c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008770:	3302      	adds	r3, #2
 8008772:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Write_status = Write_status;
 8008776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800877a:	1cfa      	adds	r2, r7, #3
 800877c:	7812      	ldrb	r2, [r2, #0]
 800877e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008780:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008784:	3301      	adds	r3, #1
 8008786:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Error_Code = Error_Code;
 800878a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800878e:	1cba      	adds	r2, r7, #2
 8008790:	7812      	ldrb	r2, [r2, #0]
 8008792:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008794:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008798:	3301      	adds	r3, #1
 800879a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 800879e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087a2:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80087a6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80087a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087ac:	3301      	adds	r3, #1
 80087ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 80087b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087b6:	3307      	adds	r3, #7
 80087b8:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80087bc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 fa76 	bl	8008cb2 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 80087c6:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 80087ca:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80087ce:	4413      	add	r3, r2
 80087d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80087d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087d8:	2218      	movs	r2, #24
 80087da:	2100      	movs	r1, #0
 80087dc:	4618      	mov	r0, r3
 80087de:	f000 fa78 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80087e2:	233f      	movs	r3, #63	; 0x3f
 80087e4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x126;
 80087e8:	f44f 7393 	mov.w	r3, #294	; 0x126
 80087ec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80087f0:	f107 0310 	add.w	r3, r7, #16
 80087f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80087f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008800:	f107 030f 	add.w	r3, r7, #15
 8008804:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008808:	2301      	movs	r3, #1
 800880a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800880e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008812:	2100      	movs	r1, #0
 8008814:	4618      	mov	r0, r3
 8008816:	f000 fe6f 	bl	80094f8 <hci_send_req>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	da01      	bge.n	8008824 <aci_gatt_write_resp+0x112>
    return BLE_STATUS_TIMEOUT;
 8008820:	23ff      	movs	r3, #255	; 0xff
 8008822:	e002      	b.n	800882a <aci_gatt_write_resp+0x118>
  return status;
 8008824:	f107 030f 	add.w	r3, r7, #15
 8008828:	781b      	ldrb	r3, [r3, #0]
}
 800882a:	4618      	mov	r0, r3
 800882c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008830:	46bd      	mov	sp, r7
 8008832:	bdb0      	pop	{r4, r5, r7, pc}

08008834 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b0cc      	sub	sp, #304	; 0x130
 8008838:	af00      	add	r7, sp, #0
 800883a:	463b      	mov	r3, r7
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	1dfb      	adds	r3, r7, #7
 8008840:	4602      	mov	r2, r0
 8008842:	701a      	strb	r2, [r3, #0]
 8008844:	1dbb      	adds	r3, r7, #6
 8008846:	460a      	mov	r2, r1
 8008848:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800884a:	f107 0310 	add.w	r3, r7, #16
 800884e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008852:	f107 030f 	add.w	r3, r7, #15
 8008856:	2200      	movs	r2, #0
 8008858:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800885a:	2300      	movs	r3, #0
 800885c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8008860:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008864:	1dfa      	adds	r2, r7, #7
 8008866:	7812      	ldrb	r2, [r2, #0]
 8008868:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800886a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800886e:	3301      	adds	r3, #1
 8008870:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8008874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008878:	1dba      	adds	r2, r7, #6
 800887a:	7812      	ldrb	r2, [r2, #0]
 800887c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800887e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008882:	3301      	adds	r3, #1
 8008884:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8008888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800888c:	1c98      	adds	r0, r3, #2
 800888e:	1dbb      	adds	r3, r7, #6
 8008890:	781a      	ldrb	r2, [r3, #0]
 8008892:	463b      	mov	r3, r7
 8008894:	6819      	ldr	r1, [r3, #0]
 8008896:	f000 fa0c 	bl	8008cb2 <Osal_MemCpy>
  index_input += Length;
 800889a:	1dbb      	adds	r3, r7, #6
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80088a2:	4413      	add	r3, r2
 80088a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088ac:	2218      	movs	r2, #24
 80088ae:	2100      	movs	r1, #0
 80088b0:	4618      	mov	r0, r3
 80088b2:	f000 fa0e 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80088b6:	233f      	movs	r3, #63	; 0x3f
 80088b8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80088bc:	230c      	movs	r3, #12
 80088be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80088c2:	f107 0310 	add.w	r3, r7, #16
 80088c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80088ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80088d2:	f107 030f 	add.w	r3, r7, #15
 80088d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80088da:	2301      	movs	r3, #1
 80088dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80088e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088e4:	2100      	movs	r1, #0
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 fe06 	bl	80094f8 <hci_send_req>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	da01      	bge.n	80088f6 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 80088f2:	23ff      	movs	r3, #255	; 0xff
 80088f4:	e002      	b.n	80088fc <aci_hal_write_config_data+0xc8>
  return status;
 80088f6:	f107 030f 	add.w	r3, r7, #15
 80088fa:	781b      	ldrb	r3, [r3, #0]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b0cc      	sub	sp, #304	; 0x130
 800890a:	af00      	add	r7, sp, #0
 800890c:	4602      	mov	r2, r0
 800890e:	1dfb      	adds	r3, r7, #7
 8008910:	701a      	strb	r2, [r3, #0]
 8008912:	1dbb      	adds	r3, r7, #6
 8008914:	460a      	mov	r2, r1
 8008916:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8008918:	f107 0310 	add.w	r3, r7, #16
 800891c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008920:	f107 030f 	add.w	r3, r7, #15
 8008924:	2200      	movs	r2, #0
 8008926:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008928:	2300      	movs	r3, #0
 800892a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800892e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008932:	1dfa      	adds	r2, r7, #7
 8008934:	7812      	ldrb	r2, [r2, #0]
 8008936:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008938:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800893c:	3301      	adds	r3, #1
 800893e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8008942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008946:	1dba      	adds	r2, r7, #6
 8008948:	7812      	ldrb	r2, [r2, #0]
 800894a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800894c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008950:	3301      	adds	r3, #1
 8008952:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008956:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800895a:	2218      	movs	r2, #24
 800895c:	2100      	movs	r1, #0
 800895e:	4618      	mov	r0, r3
 8008960:	f000 f9b7 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008964:	233f      	movs	r3, #63	; 0x3f
 8008966:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800896a:	230f      	movs	r3, #15
 800896c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008970:	f107 0310 	add.w	r3, r7, #16
 8008974:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008978:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800897c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008980:	f107 030f 	add.w	r3, r7, #15
 8008984:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008988:	2301      	movs	r3, #1
 800898a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800898e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008992:	2100      	movs	r1, #0
 8008994:	4618      	mov	r0, r3
 8008996:	f000 fdaf 	bl	80094f8 <hci_send_req>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	da01      	bge.n	80089a4 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 80089a0:	23ff      	movs	r3, #255	; 0xff
 80089a2:	e002      	b.n	80089aa <aci_hal_set_tx_power_level+0xa4>
  return status;
 80089a4:	f107 030f 	add.w	r3, r7, #15
 80089a8:	781b      	ldrb	r3, [r3, #0]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b088      	sub	sp, #32
 80089b8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80089ba:	2300      	movs	r3, #0
 80089bc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80089be:	f107 0308 	add.w	r3, r7, #8
 80089c2:	2218      	movs	r2, #24
 80089c4:	2100      	movs	r1, #0
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 f983 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x03;
 80089cc:	2303      	movs	r3, #3
 80089ce:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80089d0:	2303      	movs	r3, #3
 80089d2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80089d4:	1dfb      	adds	r3, r7, #7
 80089d6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80089d8:	2301      	movs	r3, #1
 80089da:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80089dc:	f107 0308 	add.w	r3, r7, #8
 80089e0:	2100      	movs	r1, #0
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 fd88 	bl	80094f8 <hci_send_req>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	da01      	bge.n	80089f2 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80089ee:	23ff      	movs	r3, #255	; 0xff
 80089f0:	e000      	b.n	80089f4 <hci_reset+0x40>
  return status;
 80089f2:	79fb      	ldrb	r3, [r7, #7]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3720      	adds	r7, #32
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <hci_le_set_data_length>:
}

tBleStatus hci_le_set_data_length( uint16_t Connection_Handle,
                                   uint16_t TxOctets,
                                   uint16_t TxTime )
{
 80089fc:	b590      	push	{r4, r7, lr}
 80089fe:	b0cd      	sub	sp, #308	; 0x134
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	4604      	mov	r4, r0
 8008a04:	4608      	mov	r0, r1
 8008a06:	4611      	mov	r1, r2
 8008a08:	1dbb      	adds	r3, r7, #6
 8008a0a:	4622      	mov	r2, r4
 8008a0c:	801a      	strh	r2, [r3, #0]
 8008a0e:	1d3b      	adds	r3, r7, #4
 8008a10:	4602      	mov	r2, r0
 8008a12:	801a      	strh	r2, [r3, #0]
 8008a14:	1cbb      	adds	r3, r7, #2
 8008a16:	460a      	mov	r2, r1
 8008a18:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_data_length_cp0 *cp0 = (hci_le_set_data_length_cp0*)(cmd_buffer);
 8008a1a:	f107 0310 	add.w	r3, r7, #16
 8008a1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  hci_le_set_data_length_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008a22:	f107 030c 	add.w	r3, r7, #12
 8008a26:	2203      	movs	r2, #3
 8008a28:	2100      	movs	r1, #0
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 f951 	bl	8008cd2 <Osal_MemSet>
  int index_input = 0;
 8008a30:	2300      	movs	r3, #0
 8008a32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a3a:	1dba      	adds	r2, r7, #6
 8008a3c:	8812      	ldrh	r2, [r2, #0]
 8008a3e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008a40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a44:	3302      	adds	r3, #2
 8008a46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TxOctets = TxOctets;
 8008a4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a4e:	1d3a      	adds	r2, r7, #4
 8008a50:	8812      	ldrh	r2, [r2, #0]
 8008a52:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008a54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a58:	3302      	adds	r3, #2
 8008a5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TxTime = TxTime;
 8008a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a62:	1cba      	adds	r2, r7, #2
 8008a64:	8812      	ldrh	r2, [r2, #0]
 8008a66:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8008a68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a6c:	3302      	adds	r3, #2
 8008a6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a76:	2218      	movs	r2, #24
 8008a78:	2100      	movs	r1, #0
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 f929 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x08;
 8008a80:	2308      	movs	r3, #8
 8008a82:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x022;
 8008a86:	2322      	movs	r3, #34	; 0x22
 8008a88:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008a8c:	f107 0310 	add.w	r3, r7, #16
 8008a90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008a94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008a9c:	f107 030c 	add.w	r3, r7, #12
 8008aa0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008aaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008aae:	2100      	movs	r1, #0
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 fd21 	bl	80094f8 <hci_send_req>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	da01      	bge.n	8008ac0 <hci_le_set_data_length+0xc4>
    return BLE_STATUS_TIMEOUT;
 8008abc:	23ff      	movs	r3, #255	; 0xff
 8008abe:	e009      	b.n	8008ad4 <hci_le_set_data_length+0xd8>
  if ( resp.Status )
 8008ac0:	f107 030c 	add.w	r3, r7, #12
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <hci_le_set_data_length+0xd6>
    return resp.Status;
 8008aca:	f107 030c 	add.w	r3, r7, #12
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	e000      	b.n	8008ad4 <hci_le_set_data_length+0xd8>
  return BLE_STATUS_SUCCESS;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd90      	pop	{r4, r7, pc}

08008ade <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8008ade:	b590      	push	{r4, r7, lr}
 8008ae0:	b0cd      	sub	sp, #308	; 0x134
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	4608      	mov	r0, r1
 8008ae8:	4611      	mov	r1, r2
 8008aea:	1dfb      	adds	r3, r7, #7
 8008aec:	4622      	mov	r2, r4
 8008aee:	701a      	strb	r2, [r3, #0]
 8008af0:	1dbb      	adds	r3, r7, #6
 8008af2:	4602      	mov	r2, r0
 8008af4:	701a      	strb	r2, [r3, #0]
 8008af6:	1d7b      	adds	r3, r7, #5
 8008af8:	460a      	mov	r2, r1
 8008afa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8008afc:	f107 0310 	add.w	r3, r7, #16
 8008b00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008b04:	f107 030f 	add.w	r3, r7, #15
 8008b08:	2200      	movs	r2, #0
 8008b0a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8008b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b16:	1dfa      	adds	r2, r7, #7
 8008b18:	7812      	ldrb	r2, [r2, #0]
 8008b1a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008b1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b20:	3301      	adds	r3, #1
 8008b22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8008b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b2a:	1dba      	adds	r2, r7, #6
 8008b2c:	7812      	ldrb	r2, [r2, #0]
 8008b2e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008b30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b34:	3301      	adds	r3, #1
 8008b36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8008b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b3e:	1d7a      	adds	r2, r7, #5
 8008b40:	7812      	ldrb	r2, [r2, #0]
 8008b42:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008b44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b48:	3301      	adds	r3, #1
 8008b4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b52:	2218      	movs	r2, #24
 8008b54:	2100      	movs	r1, #0
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 f8bb 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x08;
 8008b5c:	2308      	movs	r3, #8
 8008b5e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8008b62:	2331      	movs	r3, #49	; 0x31
 8008b64:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b68:	f107 0310 	add.w	r3, r7, #16
 8008b6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008b78:	f107 030f 	add.w	r3, r7, #15
 8008b7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008b80:	2301      	movs	r3, #1
 8008b82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f000 fcb3 	bl	80094f8 <hci_send_req>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	da01      	bge.n	8008b9c <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8008b98:	23ff      	movs	r3, #255	; 0xff
 8008b9a:	e002      	b.n	8008ba2 <hci_le_set_default_phy+0xc4>
  return status;
 8008b9c:	f107 030f 	add.w	r3, r7, #15
 8008ba0:	781b      	ldrb	r3, [r3, #0]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd90      	pop	{r4, r7, pc}

08008bac <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Slave_latency,
                                                      uint16_t Timeout_Multiplier )
{
 8008bac:	b5b0      	push	{r4, r5, r7, lr}
 8008bae:	b0cc      	sub	sp, #304	; 0x130
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	4619      	mov	r1, r3
 8008bba:	1dbb      	adds	r3, r7, #6
 8008bbc:	462a      	mov	r2, r5
 8008bbe:	801a      	strh	r2, [r3, #0]
 8008bc0:	1d3b      	adds	r3, r7, #4
 8008bc2:	4622      	mov	r2, r4
 8008bc4:	801a      	strh	r2, [r3, #0]
 8008bc6:	1cbb      	adds	r3, r7, #2
 8008bc8:	4602      	mov	r2, r0
 8008bca:	801a      	strh	r2, [r3, #0]
 8008bcc:	463b      	mov	r3, r7
 8008bce:	460a      	mov	r2, r1
 8008bd0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 8008bd2:	f107 0310 	add.w	r3, r7, #16
 8008bd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008bda:	f107 030f 	add.w	r3, r7, #15
 8008bde:	2200      	movs	r2, #0
 8008be0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008be2:	2300      	movs	r3, #0
 8008be4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bec:	1dba      	adds	r2, r7, #6
 8008bee:	8812      	ldrh	r2, [r2, #0]
 8008bf0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008bf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bf6:	3302      	adds	r3, #2
 8008bf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8008bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c00:	1d3a      	adds	r2, r7, #4
 8008c02:	8812      	ldrh	r2, [r2, #0]
 8008c04:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008c06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c0a:	3302      	adds	r3, #2
 8008c0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8008c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c14:	1cba      	adds	r2, r7, #2
 8008c16:	8812      	ldrh	r2, [r2, #0]
 8008c18:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8008c1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c1e:	3302      	adds	r3, #2
 8008c20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = Slave_latency;
 8008c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c28:	463a      	mov	r2, r7
 8008c2a:	8812      	ldrh	r2, [r2, #0]
 8008c2c:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8008c2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c32:	3302      	adds	r3, #2
 8008c34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8008c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c3c:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8008c40:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8008c42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c46:	3302      	adds	r3, #2
 8008c48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c50:	2218      	movs	r2, #24
 8008c52:	2100      	movs	r1, #0
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 f83c 	bl	8008cd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c5a:	233f      	movs	r3, #63	; 0x3f
 8008c5c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 8008c60:	f240 1381 	movw	r3, #385	; 0x181
 8008c64:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008c68:	230f      	movs	r3, #15
 8008c6a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008c6e:	f107 0310 	add.w	r3, r7, #16
 8008c72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008c76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008c7e:	f107 030f 	add.w	r3, r7, #15
 8008c82:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008c86:	2301      	movs	r3, #1
 8008c88:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c90:	2100      	movs	r1, #0
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 fc30 	bl	80094f8 <hci_send_req>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	da01      	bge.n	8008ca2 <aci_l2cap_connection_parameter_update_req+0xf6>
    return BLE_STATUS_TIMEOUT;
 8008c9e:	23ff      	movs	r3, #255	; 0xff
 8008ca0:	e002      	b.n	8008ca8 <aci_l2cap_connection_parameter_update_req+0xfc>
  return status;
 8008ca2:	f107 030f 	add.w	r3, r7, #15
 8008ca6:	781b      	ldrb	r3, [r3, #0]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bdb0      	pop	{r4, r5, r7, pc}

08008cb2 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	60f8      	str	r0, [r7, #12]
 8008cba:	60b9      	str	r1, [r7, #8]
 8008cbc:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	68b9      	ldr	r1, [r7, #8]
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f008 faf4 	bl	80112b0 <memcpy>
 8008cc8:	4603      	mov	r3, r0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	60f8      	str	r0, [r7, #12]
 8008cda:	60b9      	str	r1, [r7, #8]
 8008cdc:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	68b9      	ldr	r1, [r7, #8]
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f008 faef 	bl	80112c6 <memset>
 8008ce8:	4603      	mov	r3, r0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
	...

08008cf4 <DIS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DIS_Init(void)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b088      	sub	sp, #32
 8008cf8:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult;

  memset ( &DIS_Context, 0, sizeof(DIS_Context_t) );
 8008cfa:	2204      	movs	r2, #4
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	4816      	ldr	r0, [pc, #88]	; (8008d58 <DIS_Init+0x64>)
 8008d00:	f008 fae1 	bl	80112c6 <memset>
   */

  /**
   *  Add Device Information Service
   */
  uuid = DEVICE_INFORMATION_SERVICE_UUID;
 8008d04:	f641 030a 	movw	r3, #6154	; 0x180a
 8008d08:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 8008d0a:	1d39      	adds	r1, r7, #4
 8008d0c:	4b12      	ldr	r3, [pc, #72]	; (8008d58 <DIS_Init+0x64>)
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	2303      	movs	r3, #3
 8008d12:	2201      	movs	r2, #1
 8008d14:	2001      	movs	r0, #1
 8008d16:	f7ff f8e5 	bl	8007ee4 <aci_gatt_add_service>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
  /**
   *  Add Manufacturer Name String Characteristic
   */
  uuid = MANUFACTURER_NAME_UUID;
 8008d1e:	f642 2329 	movw	r3, #10793	; 0x2a29
 8008d22:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(DIS_Context.DeviceInformationSvcHdle,
 8008d24:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <DIS_Init+0x64>)
 8008d26:	8818      	ldrh	r0, [r3, #0]
 8008d28:	1d3a      	adds	r2, r7, #4
 8008d2a:	4b0c      	ldr	r3, [pc, #48]	; (8008d5c <DIS_Init+0x68>)
 8008d2c:	9305      	str	r3, [sp, #20]
 8008d2e:	2301      	movs	r3, #1
 8008d30:	9304      	str	r3, [sp, #16]
 8008d32:	230a      	movs	r3, #10
 8008d34:	9303      	str	r3, [sp, #12]
 8008d36:	2300      	movs	r3, #0
 8008d38:	9302      	str	r3, [sp, #8]
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	9301      	str	r3, [sp, #4]
 8008d3e:	2302      	movs	r3, #2
 8008d40:	9300      	str	r3, [sp, #0]
 8008d42:	2320      	movs	r3, #32
 8008d44:	2101      	movs	r1, #1
 8008d46:	f7ff f97c 	bl	8008042 <aci_gatt_add_char>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	71fb      	strb	r3, [r7, #7]
    BLE_DBG_DIS_MSG ("FAILED to add PNP ID Characteristic, Error: %02X !!\n", 
                hciCmdResult);
  }
#endif
      
  return;
 8008d4e:	bf00      	nop
}
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	20000124 	.word	0x20000124
 8008d5c:	20000126 	.word	0x20000126

08008d60 <DIS_UpdateChar>:
 * @brief  Characteristic update
 * @param  UUID: UUID of the characteristic
 * @retval None
 */
tBleStatus DIS_UpdateChar(uint16_t UUID, DIS_Data_t *pPData)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af02      	add	r7, sp, #8
 8008d66:	4603      	mov	r3, r0
 8008d68:	6039      	str	r1, [r7, #0]
 8008d6a:	80fb      	strh	r3, [r7, #6]
  tBleStatus return_value;

  switch(UUID)
 8008d6c:	88fb      	ldrh	r3, [r7, #6]
 8008d6e:	f642 2229 	movw	r2, #10793	; 0x2a29
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d10f      	bne.n	8008d96 <DIS_UpdateChar+0x36>
  {
#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
    case MANUFACTURER_NAME_UUID:
      return_value = aci_gatt_update_char_value(DIS_Context.DeviceInformationSvcHdle,
 8008d76:	4b0c      	ldr	r3, [pc, #48]	; (8008da8 <DIS_UpdateChar+0x48>)
 8008d78:	8818      	ldrh	r0, [r3, #0]
 8008d7a:	4b0b      	ldr	r3, [pc, #44]	; (8008da8 <DIS_UpdateChar+0x48>)
 8008d7c:	8859      	ldrh	r1, [r3, #2]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	791a      	ldrb	r2, [r3, #4]
                                                DIS_Context.ManufacturerNameStringCharHdle,
                                                0,
                                                pPData->Length,
                                                (uint8_t *)pPData->pPayload);
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
      return_value = aci_gatt_update_char_value(DIS_Context.DeviceInformationSvcHdle,
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f7ff fa43 	bl	8008216 <aci_gatt_update_char_value>
 8008d90:	4603      	mov	r3, r0
 8008d92:	73fb      	strb	r3, [r7, #15]
      break;
 8008d94:	e002      	b.n	8008d9c <DIS_UpdateChar+0x3c>
                                                (uint8_t *)pPData->pPayload);
      break;
#endif

    default:
      return_value = 0;
 8008d96:	2300      	movs	r3, #0
 8008d98:	73fb      	strb	r3, [r7, #15]
      break;
 8008d9a:	bf00      	nop
  }

  return return_value;
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
}/* end DIS_UpdateChar() */
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	20000124 	.word	0x20000124

08008dac <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b08a      	sub	sp, #40	; 0x28
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8008db4:	2300      	movs	r3, #0
 8008db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8008dc0:	6a3b      	ldr	r3, [r7, #32]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	2bff      	cmp	r3, #255	; 0xff
 8008dc6:	d000      	beq.n	8008dca <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8008dc8:	e04d      	b.n	8008e66 <PeerToPeer_Event_Handler+0xba>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	3302      	adds	r3, #2
 8008dce:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	881b      	ldrh	r3, [r3, #0]
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	f640 4301 	movw	r3, #3073	; 0xc01
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d000      	beq.n	8008de2 <PeerToPeer_Event_Handler+0x36>
          break;
 8008de0:	e040      	b.n	8008e64 <PeerToPeer_Event_Handler+0xb8>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	3302      	adds	r3, #2
 8008de6:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	885b      	ldrh	r3, [r3, #2]
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	461a      	mov	r2, r3
 8008df0:	4b20      	ldr	r3, [pc, #128]	; (8008e74 <PeerToPeer_Event_Handler+0xc8>)
 8008df2:	889b      	ldrh	r3, [r3, #4]
 8008df4:	3302      	adds	r3, #2
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d118      	bne.n	8008e2c <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	7a1b      	ldrb	r3, [r3, #8]
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d007      	beq.n	8008e1c <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8008e10:	f107 0308 	add.w	r3, r7, #8
 8008e14:	4618      	mov	r0, r3
 8008e16:	f007 fd59 	bl	80108cc <P2PS_STM_App_Notification>
        break;
 8008e1a:	e022      	b.n	8008e62 <PeerToPeer_Event_Handler+0xb6>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8008e20:	f107 0308 	add.w	r3, r7, #8
 8008e24:	4618      	mov	r0, r3
 8008e26:	f007 fd51 	bl	80108cc <P2PS_STM_App_Notification>
        break;
 8008e2a:	e01a      	b.n	8008e62 <PeerToPeer_Event_Handler+0xb6>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	885b      	ldrh	r3, [r3, #2]
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	461a      	mov	r2, r3
 8008e34:	4b0f      	ldr	r3, [pc, #60]	; (8008e74 <PeerToPeer_Event_Handler+0xc8>)
 8008e36:	885b      	ldrh	r3, [r3, #2]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d111      	bne.n	8008e62 <PeerToPeer_Event_Handler+0xb6>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 8008e3e:	480e      	ldr	r0, [pc, #56]	; (8008e78 <PeerToPeer_Event_Handler+0xcc>)
 8008e40:	f008 fabe 	bl	80113c0 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8008e44:	2303      	movs	r3, #3
 8008e46:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	88db      	ldrh	r3, [r3, #6]
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	3308      	adds	r3, #8
 8008e56:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8008e58:	f107 0308 	add.w	r3, r7, #8
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f007 fd35 	bl	80108cc <P2PS_STM_App_Notification>
        break;
 8008e62:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 8008e64:	bf00      	nop
  }

  return(return_value);
 8008e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3728      	adds	r7, #40	; 0x28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	20000128 	.word	0x20000128
 8008e78:	080127d0 	.word	0x080127d0

08008e7c <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b08a      	sub	sp, #40	; 0x28
 8008e80:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8008e82:	484a      	ldr	r0, [pc, #296]	; (8008fac <P2PS_STM_Init+0x130>)
 8008e84:	f000 f922 	bl	80090cc <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8008e88:	238f      	movs	r3, #143	; 0x8f
 8008e8a:	703b      	strb	r3, [r7, #0]
 8008e8c:	23e5      	movs	r3, #229	; 0xe5
 8008e8e:	707b      	strb	r3, [r7, #1]
 8008e90:	23b3      	movs	r3, #179	; 0xb3
 8008e92:	70bb      	strb	r3, [r7, #2]
 8008e94:	23d5      	movs	r3, #213	; 0xd5
 8008e96:	70fb      	strb	r3, [r7, #3]
 8008e98:	232e      	movs	r3, #46	; 0x2e
 8008e9a:	713b      	strb	r3, [r7, #4]
 8008e9c:	237f      	movs	r3, #127	; 0x7f
 8008e9e:	717b      	strb	r3, [r7, #5]
 8008ea0:	234a      	movs	r3, #74	; 0x4a
 8008ea2:	71bb      	strb	r3, [r7, #6]
 8008ea4:	2398      	movs	r3, #152	; 0x98
 8008ea6:	71fb      	strb	r3, [r7, #7]
 8008ea8:	232a      	movs	r3, #42	; 0x2a
 8008eaa:	723b      	strb	r3, [r7, #8]
 8008eac:	2348      	movs	r3, #72	; 0x48
 8008eae:	727b      	strb	r3, [r7, #9]
 8008eb0:	237a      	movs	r3, #122	; 0x7a
 8008eb2:	72bb      	strb	r3, [r7, #10]
 8008eb4:	23cc      	movs	r3, #204	; 0xcc
 8008eb6:	72fb      	strb	r3, [r7, #11]
 8008eb8:	2340      	movs	r3, #64	; 0x40
 8008eba:	733b      	strb	r3, [r7, #12]
 8008ebc:	23fe      	movs	r3, #254	; 0xfe
 8008ebe:	737b      	strb	r3, [r7, #13]
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	73bb      	strb	r3, [r7, #14]
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8008ec8:	4639      	mov	r1, r7
 8008eca:	4b39      	ldr	r3, [pc, #228]	; (8008fb0 <P2PS_STM_Init+0x134>)
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	2308      	movs	r3, #8
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	2002      	movs	r0, #2
 8008ed4:	f7ff f806 	bl	8007ee4 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8008ed8:	2319      	movs	r3, #25
 8008eda:	703b      	strb	r3, [r7, #0]
 8008edc:	23ed      	movs	r3, #237	; 0xed
 8008ede:	707b      	strb	r3, [r7, #1]
 8008ee0:	2382      	movs	r3, #130	; 0x82
 8008ee2:	70bb      	strb	r3, [r7, #2]
 8008ee4:	23ae      	movs	r3, #174	; 0xae
 8008ee6:	70fb      	strb	r3, [r7, #3]
 8008ee8:	23ed      	movs	r3, #237	; 0xed
 8008eea:	713b      	strb	r3, [r7, #4]
 8008eec:	2321      	movs	r3, #33	; 0x21
 8008eee:	717b      	strb	r3, [r7, #5]
 8008ef0:	234c      	movs	r3, #76	; 0x4c
 8008ef2:	71bb      	strb	r3, [r7, #6]
 8008ef4:	239d      	movs	r3, #157	; 0x9d
 8008ef6:	71fb      	strb	r3, [r7, #7]
 8008ef8:	2341      	movs	r3, #65	; 0x41
 8008efa:	723b      	strb	r3, [r7, #8]
 8008efc:	2345      	movs	r3, #69	; 0x45
 8008efe:	727b      	strb	r3, [r7, #9]
 8008f00:	2322      	movs	r3, #34	; 0x22
 8008f02:	72bb      	strb	r3, [r7, #10]
 8008f04:	238e      	movs	r3, #142	; 0x8e
 8008f06:	72fb      	strb	r3, [r7, #11]
 8008f08:	2341      	movs	r3, #65	; 0x41
 8008f0a:	733b      	strb	r3, [r7, #12]
 8008f0c:	23fe      	movs	r3, #254	; 0xfe
 8008f0e:	737b      	strb	r3, [r7, #13]
 8008f10:	2300      	movs	r3, #0
 8008f12:	73bb      	strb	r3, [r7, #14]
 8008f14:	2300      	movs	r3, #0
 8008f16:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8008f18:	4b25      	ldr	r3, [pc, #148]	; (8008fb0 <P2PS_STM_Init+0x134>)
 8008f1a:	8818      	ldrh	r0, [r3, #0]
 8008f1c:	463a      	mov	r2, r7
 8008f1e:	4b25      	ldr	r3, [pc, #148]	; (8008fb4 <P2PS_STM_Init+0x138>)
 8008f20:	9305      	str	r3, [sp, #20]
 8008f22:	2301      	movs	r3, #1
 8008f24:	9304      	str	r3, [sp, #16]
 8008f26:	230a      	movs	r3, #10
 8008f28:	9303      	str	r3, [sp, #12]
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	9302      	str	r3, [sp, #8]
 8008f2e:	2300      	movs	r3, #0
 8008f30:	9301      	str	r3, [sp, #4]
 8008f32:	2306      	movs	r3, #6
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	2302      	movs	r3, #2
 8008f38:	2102      	movs	r1, #2
 8008f3a:	f7ff f882 	bl	8008042 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8008f3e:	2319      	movs	r3, #25
 8008f40:	703b      	strb	r3, [r7, #0]
 8008f42:	23ed      	movs	r3, #237	; 0xed
 8008f44:	707b      	strb	r3, [r7, #1]
 8008f46:	2382      	movs	r3, #130	; 0x82
 8008f48:	70bb      	strb	r3, [r7, #2]
 8008f4a:	23ae      	movs	r3, #174	; 0xae
 8008f4c:	70fb      	strb	r3, [r7, #3]
 8008f4e:	23ed      	movs	r3, #237	; 0xed
 8008f50:	713b      	strb	r3, [r7, #4]
 8008f52:	2321      	movs	r3, #33	; 0x21
 8008f54:	717b      	strb	r3, [r7, #5]
 8008f56:	234c      	movs	r3, #76	; 0x4c
 8008f58:	71bb      	strb	r3, [r7, #6]
 8008f5a:	239d      	movs	r3, #157	; 0x9d
 8008f5c:	71fb      	strb	r3, [r7, #7]
 8008f5e:	2341      	movs	r3, #65	; 0x41
 8008f60:	723b      	strb	r3, [r7, #8]
 8008f62:	2345      	movs	r3, #69	; 0x45
 8008f64:	727b      	strb	r3, [r7, #9]
 8008f66:	2322      	movs	r3, #34	; 0x22
 8008f68:	72bb      	strb	r3, [r7, #10]
 8008f6a:	238e      	movs	r3, #142	; 0x8e
 8008f6c:	72fb      	strb	r3, [r7, #11]
 8008f6e:	2342      	movs	r3, #66	; 0x42
 8008f70:	733b      	strb	r3, [r7, #12]
 8008f72:	23fe      	movs	r3, #254	; 0xfe
 8008f74:	737b      	strb	r3, [r7, #13]
 8008f76:	2300      	movs	r3, #0
 8008f78:	73bb      	strb	r3, [r7, #14]
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8008f7e:	4b0c      	ldr	r3, [pc, #48]	; (8008fb0 <P2PS_STM_Init+0x134>)
 8008f80:	8818      	ldrh	r0, [r3, #0]
 8008f82:	463a      	mov	r2, r7
 8008f84:	4b0c      	ldr	r3, [pc, #48]	; (8008fb8 <P2PS_STM_Init+0x13c>)
 8008f86:	9305      	str	r3, [sp, #20]
 8008f88:	2301      	movs	r3, #1
 8008f8a:	9304      	str	r3, [sp, #16]
 8008f8c:	230a      	movs	r3, #10
 8008f8e:	9303      	str	r3, [sp, #12]
 8008f90:	2301      	movs	r3, #1
 8008f92:	9302      	str	r3, [sp, #8]
 8008f94:	2300      	movs	r3, #0
 8008f96:	9301      	str	r3, [sp, #4]
 8008f98:	2310      	movs	r3, #16
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	2102      	movs	r1, #2
 8008fa0:	f7ff f84f 	bl	8008042 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8008fa4:	bf00      	nop
}
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	08008dad 	.word	0x08008dad
 8008fb0:	20000128 	.word	0x20000128
 8008fb4:	2000012a 	.word	0x2000012a
 8008fb8:	2000012c 	.word	0x2000012c

08008fbc <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	af00      	add	r7, sp, #0
  return;
 8008fc0:	bf00      	nop
}
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8008fca:	b480      	push	{r7}
 8008fcc:	af00      	add	r7, sp, #0
  return;
 8008fce:	bf00      	nop
}
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <EDS_STM_Init>:
__weak void DIS_Init( void )
{
  return;
}
__weak void EDS_STM_Init( void )
{
 8008fd8:	b480      	push	{r7}
 8008fda:	af00      	add	r7, sp, #0
  return;
 8008fdc:	bf00      	nop
}
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr

08008fe6 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	af00      	add	r7, sp, #0
  return;
 8008fea:	bf00      	nop
}
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <HRS_Init>:
__weak void HRS_Init( void )
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	af00      	add	r7, sp, #0
  return;
 8008ff8:	bf00      	nop
}
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr

08009002 <HTS_Init>:
__weak void HTS_Init( void )
{
 8009002:	b480      	push	{r7}
 8009004:	af00      	add	r7, sp, #0
  return;
 8009006:	bf00      	nop
}
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <IAS_Init>:
__weak void IAS_Init( void )
{
 8009010:	b480      	push	{r7}
 8009012:	af00      	add	r7, sp, #0
  return;
 8009014:	bf00      	nop
}
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <LLS_Init>:
__weak void LLS_Init( void )
{
 800901e:	b480      	push	{r7}
 8009020:	af00      	add	r7, sp, #0
  return;
 8009022:	bf00      	nop
}
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <MOTENV_STM_Init>:
__weak void TPS_Init( void )
{
  return;
}
__weak void MOTENV_STM_Init( void )
{
 800902c:	b480      	push	{r7}
 800902e:	af00      	add	r7, sp, #0
  return;
 8009030:	bf00      	nop
}
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr

0800903a <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800903a:	b480      	push	{r7}
 800903c:	af00      	add	r7, sp, #0
  return;
 800903e:	bf00      	nop
}
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <MESH_Init>:
__weak void MESH_Init( void )
{
 8009048:	b480      	push	{r7}
 800904a:	af00      	add	r7, sp, #0
  return;
 800904c:	bf00      	nop
}
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8009056:	b480      	push	{r7}
 8009058:	af00      	add	r7, sp, #0
  return;
 800905a:	bf00      	nop
}
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009068:	4b04      	ldr	r3, [pc, #16]	; (800907c <SVCCTL_Init+0x18>)
 800906a:	2200      	movs	r2, #0
 800906c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800906e:	4b04      	ldr	r3, [pc, #16]	; (8009080 <SVCCTL_Init+0x1c>)
 8009070:	2200      	movs	r2, #0
 8009072:	731a      	strb	r2, [r3, #12]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009074:	f000 f806 	bl	8009084 <SVCCTL_SvcInit>

  return;
 8009078:	bf00      	nop
}
 800907a:	bd80      	pop	{r7, pc}
 800907c:	20000130 	.word	0x20000130
 8009080:	20000150 	.word	0x20000150

08009084 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	af00      	add	r7, sp, #0
  BLS_Init();
 8009088:	f7ff ff98 	bl	8008fbc <BLS_Init>

  CRS_STM_Init();
 800908c:	f7ff ff9d 	bl	8008fca <CRS_STM_Init>

  DIS_Init();
 8009090:	f7ff fe30 	bl	8008cf4 <DIS_Init>

  EDS_STM_Init();
 8009094:	f7ff ffa0 	bl	8008fd8 <EDS_STM_Init>

  HIDS_Init();
 8009098:	f7ff ffa5 	bl	8008fe6 <HIDS_Init>

  HRS_Init();
 800909c:	f7ff ffaa 	bl	8008ff4 <HRS_Init>

  HTS_Init();
 80090a0:	f7ff ffaf 	bl	8009002 <HTS_Init>

  IAS_Init();
 80090a4:	f7ff ffb4 	bl	8009010 <IAS_Init>

  LLS_Init();
 80090a8:	f7ff ffb9 	bl	800901e <LLS_Init>

  TPS_Init();
 80090ac:	f000 f896 	bl	80091dc <TPS_Init>

  MOTENV_STM_Init();
 80090b0:	f7ff ffbc 	bl	800902c <MOTENV_STM_Init>

  P2PS_STM_Init();
 80090b4:	f7ff fee2 	bl	8008e7c <P2PS_STM_Init>

  OTAS_STM_Init();
 80090b8:	f7ff ffbf 	bl	800903a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80090bc:	f7ff ffcb 	bl	8009056 <BVOPUS_STM_Init>

  MESH_Init();
 80090c0:	f7ff ffc2 	bl	8009048 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80090c4:	f006 fd7e 	bl	800fbc4 <SVCCTL_InitCustomSvc>
  
  return;
 80090c8:	bf00      	nop
}
 80090ca:	bd80      	pop	{r7, pc}

080090cc <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80090d4:	4b09      	ldr	r3, [pc, #36]	; (80090fc <SVCCTL_RegisterSvcHandler+0x30>)
 80090d6:	7f1b      	ldrb	r3, [r3, #28]
 80090d8:	4619      	mov	r1, r3
 80090da:	4a08      	ldr	r2, [pc, #32]	; (80090fc <SVCCTL_RegisterSvcHandler+0x30>)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80090e2:	4b06      	ldr	r3, [pc, #24]	; (80090fc <SVCCTL_RegisterSvcHandler+0x30>)
 80090e4:	7f1b      	ldrb	r3, [r3, #28]
 80090e6:	3301      	adds	r3, #1
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	4b04      	ldr	r3, [pc, #16]	; (80090fc <SVCCTL_RegisterSvcHandler+0x30>)
 80090ec:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80090ee:	bf00      	nop
}
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	20000130 	.word	0x20000130

08009100 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	3301      	adds	r3, #1
 800910c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800910e:	2300      	movs	r3, #0
 8009110:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	2bff      	cmp	r3, #255	; 0xff
 8009118:	d000      	beq.n	800911c <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800911a:	e03f      	b.n	800919c <SVCCTL_UserEvtRx+0x9c>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	3302      	adds	r3, #2
 8009120:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	881b      	ldrh	r3, [r3, #0]
 8009126:	b29b      	uxth	r3, r3
 8009128:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800912c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009130:	d000      	beq.n	8009134 <SVCCTL_UserEvtRx+0x34>
          break;
 8009132:	e032      	b.n	800919a <SVCCTL_UserEvtRx+0x9a>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009134:	2300      	movs	r3, #0
 8009136:	757b      	strb	r3, [r7, #21]
 8009138:	e00d      	b.n	8009156 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800913a:	7d7b      	ldrb	r3, [r7, #21]
 800913c:	4a25      	ldr	r2, [pc, #148]	; (80091d4 <SVCCTL_UserEvtRx+0xd4>)
 800913e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	4798      	blx	r3
 8009146:	4603      	mov	r3, r0
 8009148:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800914a:	7dfb      	ldrb	r3, [r7, #23]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d108      	bne.n	8009162 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009150:	7d7b      	ldrb	r3, [r7, #21]
 8009152:	3301      	adds	r3, #1
 8009154:	757b      	strb	r3, [r7, #21]
 8009156:	4b1f      	ldr	r3, [pc, #124]	; (80091d4 <SVCCTL_UserEvtRx+0xd4>)
 8009158:	7f1b      	ldrb	r3, [r3, #28]
 800915a:	7d7a      	ldrb	r2, [r7, #21]
 800915c:	429a      	cmp	r2, r3
 800915e:	d3ec      	bcc.n	800913a <SVCCTL_UserEvtRx+0x3a>
 8009160:	e000      	b.n	8009164 <SVCCTL_UserEvtRx+0x64>
              break;
 8009162:	bf00      	nop
          event_notification_status = SVCCTL_EvtNotAck;
 8009164:	2300      	movs	r3, #0
 8009166:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8009168:	2300      	movs	r3, #0
 800916a:	757b      	strb	r3, [r7, #21]
 800916c:	e00d      	b.n	800918a <SVCCTL_UserEvtRx+0x8a>
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800916e:	7d7b      	ldrb	r3, [r7, #21]
 8009170:	4a19      	ldr	r2, [pc, #100]	; (80091d8 <SVCCTL_UserEvtRx+0xd8>)
 8009172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	4798      	blx	r3
 800917a:	4603      	mov	r3, r0
 800917c:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800917e:	7dfb      	ldrb	r3, [r7, #23]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d108      	bne.n	8009196 <SVCCTL_UserEvtRx+0x96>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8009184:	7d7b      	ldrb	r3, [r7, #21]
 8009186:	3301      	adds	r3, #1
 8009188:	757b      	strb	r3, [r7, #21]
 800918a:	4b13      	ldr	r3, [pc, #76]	; (80091d8 <SVCCTL_UserEvtRx+0xd8>)
 800918c:	7b1b      	ldrb	r3, [r3, #12]
 800918e:	7d7a      	ldrb	r2, [r7, #21]
 8009190:	429a      	cmp	r2, r3
 8009192:	d3ec      	bcc.n	800916e <SVCCTL_UserEvtRx+0x6e>
          break;
 8009194:	e000      	b.n	8009198 <SVCCTL_UserEvtRx+0x98>
              break;
 8009196:	bf00      	nop
          break;
 8009198:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800919a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800919c:	7dfb      	ldrb	r3, [r7, #23]
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d009      	beq.n	80091b6 <SVCCTL_UserEvtRx+0xb6>
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d00a      	beq.n	80091bc <SVCCTL_UserEvtRx+0xbc>
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d10b      	bne.n	80091c2 <SVCCTL_UserEvtRx+0xc2>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f006 f8b2 	bl	800f314 <SVCCTL_App_Notification>
 80091b0:	4603      	mov	r3, r0
 80091b2:	75bb      	strb	r3, [r7, #22]
      break;
 80091b4:	e008      	b.n	80091c8 <SVCCTL_UserEvtRx+0xc8>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80091b6:	2301      	movs	r3, #1
 80091b8:	75bb      	strb	r3, [r7, #22]
      break;
 80091ba:	e005      	b.n	80091c8 <SVCCTL_UserEvtRx+0xc8>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80091bc:	2300      	movs	r3, #0
 80091be:	75bb      	strb	r3, [r7, #22]
      break;
 80091c0:	e002      	b.n	80091c8 <SVCCTL_UserEvtRx+0xc8>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80091c2:	2301      	movs	r3, #1
 80091c4:	75bb      	strb	r3, [r7, #22]
      break;
 80091c6:	bf00      	nop
  }

  return (return_status);
 80091c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3718      	adds	r7, #24
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	20000130 	.word	0x20000130
 80091d8:	20000150 	.word	0x20000150

080091dc <TPS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void TPS_Init(void)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult = BLE_STATUS_SUCCESS;
 80091e2:	2300      	movs	r3, #0
 80091e4:	71fb      	strb	r3, [r7, #7]
   *
   * Max_Attribute_Records = 2*no_of_char + 1
   * service_max_attribute_record = 1 for Tx Power service +
   *                                2 for Tx Power Level measurement characteristic +
   */
  uuid = TX_POWER_SERVICE_UUID;
 80091e6:	f641 0304 	movw	r3, #6148	; 0x1804
 80091ea:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 80091ec:	1d39      	adds	r1, r7, #4
 80091ee:	4b12      	ldr	r3, [pc, #72]	; (8009238 <TPS_Init+0x5c>)
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	2303      	movs	r3, #3
 80091f4:	2201      	movs	r2, #1
 80091f6:	2001      	movs	r0, #1
 80091f8:	f7fe fe74 	bl	8007ee4 <aci_gatt_add_service>
 80091fc:	4603      	mov	r3, r0
 80091fe:	71fb      	strb	r3, [r7, #7]
  }
  
  /**
   *  Add Tx Power Level Characteristic
   */
  uuid = TX_POWER_LEVEL_CHARACTERISTIC_UUID;
 8009200:	f642 2307 	movw	r3, #10759	; 0x2a07
 8009204:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(TPS_Context.SvcHdle,
 8009206:	4b0c      	ldr	r3, [pc, #48]	; (8009238 <TPS_Init+0x5c>)
 8009208:	8818      	ldrh	r0, [r3, #0]
 800920a:	1d3a      	adds	r2, r7, #4
 800920c:	4b0b      	ldr	r3, [pc, #44]	; (800923c <TPS_Init+0x60>)
 800920e:	9305      	str	r3, [sp, #20]
 8009210:	2301      	movs	r3, #1
 8009212:	9304      	str	r3, [sp, #16]
 8009214:	230a      	movs	r3, #10
 8009216:	9303      	str	r3, [sp, #12]
 8009218:	2300      	movs	r3, #0
 800921a:	9302      	str	r3, [sp, #8]
 800921c:	2300      	movs	r3, #0
 800921e:	9301      	str	r3, [sp, #4]
 8009220:	2302      	movs	r3, #2
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	2301      	movs	r3, #1
 8009226:	2101      	movs	r1, #1
 8009228:	f7fe ff0b 	bl	8008042 <aci_gatt_add_char>
 800922c:	4603      	mov	r3, r0
 800922e:	71fb      	strb	r3, [r7, #7]
  {
    BLE_DBG_TPS_MSG ("FAILED to add Tx Power Level Characteristic, Error: %02X !!\n", 
                        hciCmdResult);
  }

  return;
 8009230:	bf00      	nop
}
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	20000160 	.word	0x20000160
 800923c:	20000162 	.word	0x20000162

08009240 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b088      	sub	sp, #32
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009248:	f107 030c 	add.w	r3, r7, #12
 800924c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	2121      	movs	r1, #33	; 0x21
 8009258:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800925c:	f000 fae2 	bl	8009824 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	330b      	adds	r3, #11
 8009264:	78db      	ldrb	r3, [r3, #3]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3720      	adds	r7, #32
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <SHCI_C2_THREAD_Init>:

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b086      	sub	sp, #24
 8009272:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009274:	1d3b      	adds	r3, r7, #4
 8009276:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	2200      	movs	r2, #0
 800927c:	2100      	movs	r1, #0
 800927e:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8009282:	f000 facf 	bl	8009824 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	330b      	adds	r3, #11
 800928a:	78db      	ldrb	r3, [r3, #3]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3718      	adds	r7, #24
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b088      	sub	sp, #32
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800929e:	f107 030c 	add.w	r3, r7, #12
 80092a2:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 80092a8:	f107 020c 	add.w	r2, r7, #12
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	2101      	movs	r1, #1
 80092b0:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 80092b4:	f000 fab6 	bl	8009824 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	330b      	adds	r3, #11
 80092bc:	78db      	ldrb	r3, [r3, #3]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3720      	adds	r7, #32
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
	...

080092c8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80092c8:	b480      	push	{r7}
 80092ca:	b08b      	sub	sp, #44	; 0x2c
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80092d0:	2300      	movs	r3, #0
 80092d2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80092d4:	2300      	movs	r3, #0
 80092d6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80092dc:	2300      	movs	r3, #0
 80092de:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80092e0:	2300      	movs	r3, #0
 80092e2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80092e4:	2300      	movs	r3, #0
 80092e6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80092e8:	2300      	movs	r3, #0
 80092ea:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80092f0:	4b4a      	ldr	r3, [pc, #296]	; (800941c <SHCI_GetWirelessFwInfo+0x154>)
 80092f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80092f8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009302:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a44      	ldr	r2, [pc, #272]	; (8009420 <SHCI_GetWirelessFwInfo+0x158>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d10f      	bne.n	8009334 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	695b      	ldr	r3, [r3, #20]
 8009318:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	69db      	ldr	r3, [r3, #28]
 8009324:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	617b      	str	r3, [r7, #20]
 8009332:	e01a      	b.n	800936a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */

    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800933c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009340:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800936a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936c:	0e1b      	lsrs	r3, r3, #24
 800936e:	b2da      	uxtb	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	0c1b      	lsrs	r3, r3, #16
 8009378:	b2da      	uxtb	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800937e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009380:	0a1b      	lsrs	r3, r3, #8
 8009382:	b2da      	uxtb	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938a:	091b      	lsrs	r3, r3, #4
 800938c:	b2db      	uxtb	r3, r3
 800938e:	f003 030f 	and.w	r3, r3, #15
 8009392:	b2da      	uxtb	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	b2db      	uxtb	r3, r3
 800939c:	f003 030f 	and.w	r3, r3, #15
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80093a6:	6a3b      	ldr	r3, [r7, #32]
 80093a8:	0e1b      	lsrs	r3, r3, #24
 80093aa:	b2da      	uxtb	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80093b0:	6a3b      	ldr	r3, [r7, #32]
 80093b2:	0c1b      	lsrs	r3, r3, #16
 80093b4:	b2da      	uxtb	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80093ba:	6a3b      	ldr	r3, [r7, #32]
 80093bc:	0a1b      	lsrs	r3, r3, #8
 80093be:	b2da      	uxtb	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	0e1b      	lsrs	r3, r3, #24
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	0c1b      	lsrs	r3, r3, #16
 80093e2:	b2da      	uxtb	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	0a1b      	lsrs	r3, r3, #8
 80093ec:	b2da      	uxtb	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	0e1b      	lsrs	r3, r3, #24
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	0c1b      	lsrs	r3, r3, #16
 8009400:	b2da      	uxtb	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	b2da      	uxtb	r2, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	372c      	adds	r7, #44	; 0x2c
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr
 800941c:	58004000 	.word	0x58004000
 8009420:	a94656b9 	.word	0xa94656b9

08009424 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	4a08      	ldr	r2, [pc, #32]	; (8009454 <hci_init+0x30>)
 8009434:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8009436:	4a08      	ldr	r2, [pc, #32]	; (8009458 <hci_init+0x34>)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800943c:	4806      	ldr	r0, [pc, #24]	; (8009458 <hci_init+0x34>)
 800943e:	f000 f973 	bl	8009728 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4618      	mov	r0, r3
 8009448:	f000 f8d4 	bl	80095f4 <TlInit>

  return;
 800944c:	bf00      	nop
}
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	20000280 	.word	0x20000280
 8009458:	20000258 	.word	0x20000258

0800945c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009462:	4822      	ldr	r0, [pc, #136]	; (80094ec <hci_user_evt_proc+0x90>)
 8009464:	f001 f9e8 	bl	800a838 <LST_is_empty>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d12b      	bne.n	80094c6 <hci_user_evt_proc+0x6a>
 800946e:	4b20      	ldr	r3, [pc, #128]	; (80094f0 <hci_user_evt_proc+0x94>)
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d027      	beq.n	80094c6 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009476:	f107 030c 	add.w	r3, r7, #12
 800947a:	4619      	mov	r1, r3
 800947c:	481b      	ldr	r0, [pc, #108]	; (80094ec <hci_user_evt_proc+0x90>)
 800947e:	f001 fa62 	bl	800a946 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009482:	4b1c      	ldr	r3, [pc, #112]	; (80094f4 <hci_user_evt_proc+0x98>)
 8009484:	69db      	ldr	r3, [r3, #28]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00c      	beq.n	80094a4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800948e:	2301      	movs	r3, #1
 8009490:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009492:	4b18      	ldr	r3, [pc, #96]	; (80094f4 <hci_user_evt_proc+0x98>)
 8009494:	69db      	ldr	r3, [r3, #28]
 8009496:	1d3a      	adds	r2, r7, #4
 8009498:	4610      	mov	r0, r2
 800949a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800949c:	793a      	ldrb	r2, [r7, #4]
 800949e:	4b14      	ldr	r3, [pc, #80]	; (80094f0 <hci_user_evt_proc+0x94>)
 80094a0:	701a      	strb	r2, [r3, #0]
 80094a2:	e002      	b.n	80094aa <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80094a4:	4b12      	ldr	r3, [pc, #72]	; (80094f0 <hci_user_evt_proc+0x94>)
 80094a6:	2201      	movs	r2, #1
 80094a8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80094aa:	4b11      	ldr	r3, [pc, #68]	; (80094f0 <hci_user_evt_proc+0x94>)
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d004      	beq.n	80094bc <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f000 fc7b 	bl	8009db0 <TL_MM_EvtDone>
 80094ba:	e004      	b.n	80094c6 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	4619      	mov	r1, r3
 80094c0:	480a      	ldr	r0, [pc, #40]	; (80094ec <hci_user_evt_proc+0x90>)
 80094c2:	f001 f9d9 	bl	800a878 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80094c6:	4809      	ldr	r0, [pc, #36]	; (80094ec <hci_user_evt_proc+0x90>)
 80094c8:	f001 f9b6 	bl	800a838 <LST_is_empty>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d107      	bne.n	80094e2 <hci_user_evt_proc+0x86>
 80094d2:	4b07      	ldr	r3, [pc, #28]	; (80094f0 <hci_user_evt_proc+0x94>)
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d003      	beq.n	80094e2 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80094da:	4804      	ldr	r0, [pc, #16]	; (80094ec <hci_user_evt_proc+0x90>)
 80094dc:	f006 fb04 	bl	800fae8 <hci_notify_asynch_evt>
  }


  return;
 80094e0:	bf00      	nop
 80094e2:	bf00      	nop
}
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	20000168 	.word	0x20000168
 80094f0:	20000174 	.word	0x20000174
 80094f4:	20000258 	.word	0x20000258

080094f8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b088      	sub	sp, #32
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	460b      	mov	r3, r1
 8009502:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009504:	2000      	movs	r0, #0
 8009506:	f000 f8cb 	bl	80096a0 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800950a:	2300      	movs	r3, #0
 800950c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	885b      	ldrh	r3, [r3, #2]
 8009512:	b21b      	sxth	r3, r3
 8009514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009518:	b21a      	sxth	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	881b      	ldrh	r3, [r3, #0]
 800951e:	029b      	lsls	r3, r3, #10
 8009520:	b21b      	sxth	r3, r3
 8009522:	4313      	orrs	r3, r2
 8009524:	b21b      	sxth	r3, r3
 8009526:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	b2d9      	uxtb	r1, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	689a      	ldr	r2, [r3, #8]
 8009532:	8bbb      	ldrh	r3, [r7, #28]
 8009534:	4618      	mov	r0, r3
 8009536:	f000 f88d 	bl	8009654 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800953a:	e04e      	b.n	80095da <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800953c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009540:	f006 faf2 	bl	800fb28 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009544:	e043      	b.n	80095ce <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009546:	f107 030c 	add.w	r3, r7, #12
 800954a:	4619      	mov	r1, r3
 800954c:	4828      	ldr	r0, [pc, #160]	; (80095f0 <hci_send_req+0xf8>)
 800954e:	f001 f9fa 	bl	800a946 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	7a5b      	ldrb	r3, [r3, #9]
 8009556:	2b0f      	cmp	r3, #15
 8009558:	d114      	bne.n	8009584 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	330b      	adds	r3, #11
 800955e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	885b      	ldrh	r3, [r3, #2]
 8009564:	b29b      	uxth	r3, r3
 8009566:	8bba      	ldrh	r2, [r7, #28]
 8009568:	429a      	cmp	r2, r3
 800956a:	d104      	bne.n	8009576 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	693a      	ldr	r2, [r7, #16]
 8009572:	7812      	ldrb	r2, [r2, #0]
 8009574:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	785b      	ldrb	r3, [r3, #1]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d027      	beq.n	80095ce <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800957e:	2301      	movs	r3, #1
 8009580:	77fb      	strb	r3, [r7, #31]
 8009582:	e024      	b.n	80095ce <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	330b      	adds	r3, #11
 8009588:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009590:	b29b      	uxth	r3, r3
 8009592:	8bba      	ldrh	r2, [r7, #28]
 8009594:	429a      	cmp	r2, r3
 8009596:	d114      	bne.n	80095c2 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	7a9b      	ldrb	r3, [r3, #10]
 800959c:	3b03      	subs	r3, #3
 800959e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	695a      	ldr	r2, [r3, #20]
 80095a4:	7dfb      	ldrb	r3, [r7, #23]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	bfa8      	it	ge
 80095aa:	461a      	movge	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6918      	ldr	r0, [r3, #16]
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	1cd9      	adds	r1, r3, #3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	695b      	ldr	r3, [r3, #20]
 80095bc:	461a      	mov	r2, r3
 80095be:	f007 fe77 	bl	80112b0 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d001      	beq.n	80095ce <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80095ca:	2301      	movs	r3, #1
 80095cc:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80095ce:	4808      	ldr	r0, [pc, #32]	; (80095f0 <hci_send_req+0xf8>)
 80095d0:	f001 f932 	bl	800a838 <LST_is_empty>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d0b5      	beq.n	8009546 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80095da:	7ffb      	ldrb	r3, [r7, #31]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d0ad      	beq.n	800953c <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80095e0:	2001      	movs	r0, #1
 80095e2:	f000 f85d 	bl	80096a0 <NotifyCmdStatus>

  return 0;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3720      	adds	r7, #32
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	20000278 	.word	0x20000278

080095f4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80095fc:	480f      	ldr	r0, [pc, #60]	; (800963c <TlInit+0x48>)
 80095fe:	f001 f90b 	bl	800a818 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009602:	4a0f      	ldr	r2, [pc, #60]	; (8009640 <TlInit+0x4c>)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009608:	480e      	ldr	r0, [pc, #56]	; (8009644 <TlInit+0x50>)
 800960a:	f001 f905 	bl	800a818 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800960e:	4b0e      	ldr	r3, [pc, #56]	; (8009648 <TlInit+0x54>)
 8009610:	2201      	movs	r2, #1
 8009612:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009614:	4b0d      	ldr	r3, [pc, #52]	; (800964c <TlInit+0x58>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00a      	beq.n	8009632 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009620:	4b0b      	ldr	r3, [pc, #44]	; (8009650 <TlInit+0x5c>)
 8009622:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009624:	4b09      	ldr	r3, [pc, #36]	; (800964c <TlInit+0x58>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f107 0208 	add.w	r2, r7, #8
 800962c:	4610      	mov	r0, r2
 800962e:	4798      	blx	r3
  }

  return;
 8009630:	bf00      	nop
 8009632:	bf00      	nop
}
 8009634:	3718      	adds	r7, #24
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	20000278 	.word	0x20000278
 8009640:	20000170 	.word	0x20000170
 8009644:	20000168 	.word	0x20000168
 8009648:	20000174 	.word	0x20000174
 800964c:	20000258 	.word	0x20000258
 8009650:	080096e1 	.word	0x080096e1

08009654 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	4603      	mov	r3, r0
 800965c:	603a      	str	r2, [r7, #0]
 800965e:	80fb      	strh	r3, [r7, #6]
 8009660:	460b      	mov	r3, r1
 8009662:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009664:	4b0c      	ldr	r3, [pc, #48]	; (8009698 <SendCmd+0x44>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	88fa      	ldrh	r2, [r7, #6]
 800966a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800966e:	4b0a      	ldr	r3, [pc, #40]	; (8009698 <SendCmd+0x44>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	797a      	ldrb	r2, [r7, #5]
 8009674:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009676:	4b08      	ldr	r3, [pc, #32]	; (8009698 <SendCmd+0x44>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	330c      	adds	r3, #12
 800967c:	797a      	ldrb	r2, [r7, #5]
 800967e:	6839      	ldr	r1, [r7, #0]
 8009680:	4618      	mov	r0, r3
 8009682:	f007 fe15 	bl	80112b0 <memcpy>

  hciContext.io.Send(0,0);
 8009686:	4b05      	ldr	r3, [pc, #20]	; (800969c <SendCmd+0x48>)
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	2100      	movs	r1, #0
 800968c:	2000      	movs	r0, #0
 800968e:	4798      	blx	r3

  return;
 8009690:	bf00      	nop
}
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	20000170 	.word	0x20000170
 800969c:	20000258 	.word	0x20000258

080096a0 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	4603      	mov	r3, r0
 80096a8:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80096aa:	79fb      	ldrb	r3, [r7, #7]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d108      	bne.n	80096c2 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80096b0:	4b0a      	ldr	r3, [pc, #40]	; (80096dc <NotifyCmdStatus+0x3c>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00d      	beq.n	80096d4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80096b8:	4b08      	ldr	r3, [pc, #32]	; (80096dc <NotifyCmdStatus+0x3c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2000      	movs	r0, #0
 80096be:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80096c0:	e008      	b.n	80096d4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80096c2:	4b06      	ldr	r3, [pc, #24]	; (80096dc <NotifyCmdStatus+0x3c>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d004      	beq.n	80096d4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80096ca:	4b04      	ldr	r3, [pc, #16]	; (80096dc <NotifyCmdStatus+0x3c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2001      	movs	r0, #1
 80096d0:	4798      	blx	r3
  return;
 80096d2:	bf00      	nop
 80096d4:	bf00      	nop
}
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	20000280 	.word	0x20000280

080096e0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	7a5b      	ldrb	r3, [r3, #9]
 80096ec:	2b0f      	cmp	r3, #15
 80096ee:	d003      	beq.n	80096f8 <TlEvtReceived+0x18>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	7a5b      	ldrb	r3, [r3, #9]
 80096f4:	2b0e      	cmp	r3, #14
 80096f6:	d107      	bne.n	8009708 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80096f8:	6879      	ldr	r1, [r7, #4]
 80096fa:	4809      	ldr	r0, [pc, #36]	; (8009720 <TlEvtReceived+0x40>)
 80096fc:	f001 f8e0 	bl	800a8c0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009700:	2000      	movs	r0, #0
 8009702:	f006 fa01 	bl	800fb08 <hci_cmd_resp_release>
 8009706:	e006      	b.n	8009716 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009708:	6879      	ldr	r1, [r7, #4]
 800970a:	4806      	ldr	r0, [pc, #24]	; (8009724 <TlEvtReceived+0x44>)
 800970c:	f001 f8d8 	bl	800a8c0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009710:	4804      	ldr	r0, [pc, #16]	; (8009724 <TlEvtReceived+0x44>)
 8009712:	f006 f9e9 	bl	800fae8 <hci_notify_asynch_evt>
  }

  return;
 8009716:	bf00      	nop
}
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	20000278 	.word	0x20000278
 8009724:	20000168 	.word	0x20000168

08009728 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a05      	ldr	r2, [pc, #20]	; (8009748 <hci_register_io_bus+0x20>)
 8009734:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a04      	ldr	r2, [pc, #16]	; (800974c <hci_register_io_bus+0x24>)
 800973a:	611a      	str	r2, [r3, #16]

  return;
 800973c:	bf00      	nop
}
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr
 8009748:	08009a39 	.word	0x08009a39
 800974c:	08009aa1 	.word	0x08009aa1

08009750 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	4a08      	ldr	r2, [pc, #32]	; (8009780 <shci_init+0x30>)
 8009760:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009762:	4a08      	ldr	r2, [pc, #32]	; (8009784 <shci_init+0x34>)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009768:	4806      	ldr	r0, [pc, #24]	; (8009784 <shci_init+0x34>)
 800976a:	f000 f911 	bl	8009990 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4618      	mov	r0, r3
 8009774:	f000 f894 	bl	80098a0 <TlInit>

  return;
 8009778:	bf00      	nop
}
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	200002a4 	.word	0x200002a4
 8009784:	20000284 	.word	0x20000284

08009788 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800978e:	4822      	ldr	r0, [pc, #136]	; (8009818 <shci_user_evt_proc+0x90>)
 8009790:	f001 f852 	bl	800a838 <LST_is_empty>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d12b      	bne.n	80097f2 <shci_user_evt_proc+0x6a>
 800979a:	4b20      	ldr	r3, [pc, #128]	; (800981c <shci_user_evt_proc+0x94>)
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d027      	beq.n	80097f2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80097a2:	f107 030c 	add.w	r3, r7, #12
 80097a6:	4619      	mov	r1, r3
 80097a8:	481b      	ldr	r0, [pc, #108]	; (8009818 <shci_user_evt_proc+0x90>)
 80097aa:	f001 f8cc 	bl	800a946 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80097ae:	4b1c      	ldr	r3, [pc, #112]	; (8009820 <shci_user_evt_proc+0x98>)
 80097b0:	69db      	ldr	r3, [r3, #28]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00c      	beq.n	80097d0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80097ba:	2301      	movs	r3, #1
 80097bc:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80097be:	4b18      	ldr	r3, [pc, #96]	; (8009820 <shci_user_evt_proc+0x98>)
 80097c0:	69db      	ldr	r3, [r3, #28]
 80097c2:	1d3a      	adds	r2, r7, #4
 80097c4:	4610      	mov	r0, r2
 80097c6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80097c8:	793a      	ldrb	r2, [r7, #4]
 80097ca:	4b14      	ldr	r3, [pc, #80]	; (800981c <shci_user_evt_proc+0x94>)
 80097cc:	701a      	strb	r2, [r3, #0]
 80097ce:	e002      	b.n	80097d6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80097d0:	4b12      	ldr	r3, [pc, #72]	; (800981c <shci_user_evt_proc+0x94>)
 80097d2:	2201      	movs	r2, #1
 80097d4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80097d6:	4b11      	ldr	r3, [pc, #68]	; (800981c <shci_user_evt_proc+0x94>)
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d004      	beq.n	80097e8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	4618      	mov	r0, r3
 80097e2:	f000 fae5 	bl	8009db0 <TL_MM_EvtDone>
 80097e6:	e004      	b.n	80097f2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	4619      	mov	r1, r3
 80097ec:	480a      	ldr	r0, [pc, #40]	; (8009818 <shci_user_evt_proc+0x90>)
 80097ee:	f001 f843 	bl	800a878 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80097f2:	4809      	ldr	r0, [pc, #36]	; (8009818 <shci_user_evt_proc+0x90>)
 80097f4:	f001 f820 	bl	800a838 <LST_is_empty>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d107      	bne.n	800980e <shci_user_evt_proc+0x86>
 80097fe:	4b07      	ldr	r3, [pc, #28]	; (800981c <shci_user_evt_proc+0x94>)
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d003      	beq.n	800980e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009806:	4804      	ldr	r0, [pc, #16]	; (8009818 <shci_user_evt_proc+0x90>)
 8009808:	f7f7 fc40 	bl	800108c <shci_notify_asynch_evt>
  }


  return;
 800980c:	bf00      	nop
 800980e:	bf00      	nop
}
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	20000178 	.word	0x20000178
 800981c:	20000188 	.word	0x20000188
 8009820:	20000284 	.word	0x20000284

08009824 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	60ba      	str	r2, [r7, #8]
 800982c:	607b      	str	r3, [r7, #4]
 800982e:	4603      	mov	r3, r0
 8009830:	81fb      	strh	r3, [r7, #14]
 8009832:	460b      	mov	r3, r1
 8009834:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009836:	2000      	movs	r0, #0
 8009838:	f000 f864 	bl	8009904 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800983c:	4b16      	ldr	r3, [pc, #88]	; (8009898 <shci_send+0x74>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	89fa      	ldrh	r2, [r7, #14]
 8009842:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009846:	4b14      	ldr	r3, [pc, #80]	; (8009898 <shci_send+0x74>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	7b7a      	ldrb	r2, [r7, #13]
 800984c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800984e:	4b12      	ldr	r3, [pc, #72]	; (8009898 <shci_send+0x74>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	330c      	adds	r3, #12
 8009854:	7b7a      	ldrb	r2, [r7, #13]
 8009856:	68b9      	ldr	r1, [r7, #8]
 8009858:	4618      	mov	r0, r3
 800985a:	f007 fd29 	bl	80112b0 <memcpy>

  shciContext.io.Send(0,0);
 800985e:	4b0f      	ldr	r3, [pc, #60]	; (800989c <shci_send+0x78>)
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	2100      	movs	r1, #0
 8009864:	2000      	movs	r0, #0
 8009866:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009868:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800986c:	f7f7 fc2e 	bl	80010cc <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f103 0008 	add.w	r0, r3, #8
 8009876:	4b08      	ldr	r3, [pc, #32]	; (8009898 <shci_send+0x74>)
 8009878:	6819      	ldr	r1, [r3, #0]
 800987a:	4b07      	ldr	r3, [pc, #28]	; (8009898 <shci_send+0x74>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	789b      	ldrb	r3, [r3, #2]
 8009880:	3303      	adds	r3, #3
 8009882:	461a      	mov	r2, r3
 8009884:	f007 fd14 	bl	80112b0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009888:	2001      	movs	r0, #1
 800988a:	f000 f83b 	bl	8009904 <Cmd_SetStatus>

  return;
 800988e:	bf00      	nop
}
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	20000184 	.word	0x20000184
 800989c:	20000284 	.word	0x20000284

080098a0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80098a8:	4a10      	ldr	r2, [pc, #64]	; (80098ec <TlInit+0x4c>)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80098ae:	4810      	ldr	r0, [pc, #64]	; (80098f0 <TlInit+0x50>)
 80098b0:	f000 ffb2 	bl	800a818 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80098b4:	2001      	movs	r0, #1
 80098b6:	f000 f825 	bl	8009904 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80098ba:	4b0e      	ldr	r3, [pc, #56]	; (80098f4 <TlInit+0x54>)
 80098bc:	2201      	movs	r2, #1
 80098be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80098c0:	4b0d      	ldr	r3, [pc, #52]	; (80098f8 <TlInit+0x58>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00c      	beq.n	80098e2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80098cc:	4b0b      	ldr	r3, [pc, #44]	; (80098fc <TlInit+0x5c>)
 80098ce:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80098d0:	4b0b      	ldr	r3, [pc, #44]	; (8009900 <TlInit+0x60>)
 80098d2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80098d4:	4b08      	ldr	r3, [pc, #32]	; (80098f8 <TlInit+0x58>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f107 020c 	add.w	r2, r7, #12
 80098dc:	4610      	mov	r0, r2
 80098de:	4798      	blx	r3
  }

  return;
 80098e0:	bf00      	nop
 80098e2:	bf00      	nop
}
 80098e4:	3718      	adds	r7, #24
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	20000184 	.word	0x20000184
 80098f0:	20000178 	.word	0x20000178
 80098f4:	20000188 	.word	0x20000188
 80098f8:	20000284 	.word	0x20000284
 80098fc:	08009955 	.word	0x08009955
 8009900:	0800996d 	.word	0x0800996d

08009904 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	4603      	mov	r3, r0
 800990c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800990e:	79fb      	ldrb	r3, [r7, #7]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10b      	bne.n	800992c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009914:	4b0d      	ldr	r3, [pc, #52]	; (800994c <Cmd_SetStatus+0x48>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d003      	beq.n	8009924 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800991c:	4b0b      	ldr	r3, [pc, #44]	; (800994c <Cmd_SetStatus+0x48>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2000      	movs	r0, #0
 8009922:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009924:	4b0a      	ldr	r3, [pc, #40]	; (8009950 <Cmd_SetStatus+0x4c>)
 8009926:	2200      	movs	r2, #0
 8009928:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800992a:	e00b      	b.n	8009944 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800992c:	4b08      	ldr	r3, [pc, #32]	; (8009950 <Cmd_SetStatus+0x4c>)
 800992e:	2201      	movs	r2, #1
 8009930:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009932:	4b06      	ldr	r3, [pc, #24]	; (800994c <Cmd_SetStatus+0x48>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d004      	beq.n	8009944 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800993a:	4b04      	ldr	r3, [pc, #16]	; (800994c <Cmd_SetStatus+0x48>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2001      	movs	r0, #1
 8009940:	4798      	blx	r3
  return;
 8009942:	bf00      	nop
 8009944:	bf00      	nop
}
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	200002a4 	.word	0x200002a4
 8009950:	20000180 	.word	0x20000180

08009954 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800995c:	2000      	movs	r0, #0
 800995e:	f7f7 fba5 	bl	80010ac <shci_cmd_resp_release>

  return;
 8009962:	bf00      	nop
}
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
	...

0800996c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009974:	6879      	ldr	r1, [r7, #4]
 8009976:	4805      	ldr	r0, [pc, #20]	; (800998c <TlUserEvtReceived+0x20>)
 8009978:	f000 ffa2 	bl	800a8c0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800997c:	4803      	ldr	r0, [pc, #12]	; (800998c <TlUserEvtReceived+0x20>)
 800997e:	f7f7 fb85 	bl	800108c <shci_notify_asynch_evt>

  return;
 8009982:	bf00      	nop
}
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	20000178 	.word	0x20000178

08009990 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a05      	ldr	r2, [pc, #20]	; (80099b0 <shci_register_io_bus+0x20>)
 800999c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4a04      	ldr	r2, [pc, #16]	; (80099b4 <shci_register_io_bus+0x24>)
 80099a2:	611a      	str	r2, [r3, #16]

  return;
 80099a4:	bf00      	nop
}
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	08009b4d 	.word	0x08009b4d
 80099b4:	08009ba1 	.word	0x08009ba1

080099b8 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80099bc:	f007 f9a6 	bl	8010d0c <HW_IPCC_Enable>

  return;
 80099c0:	bf00      	nop
}
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <TL_Init>:


void TL_Init( void )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80099c8:	4b10      	ldr	r3, [pc, #64]	; (8009a0c <TL_Init+0x48>)
 80099ca:	4a11      	ldr	r2, [pc, #68]	; (8009a10 <TL_Init+0x4c>)
 80099cc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80099ce:	4b0f      	ldr	r3, [pc, #60]	; (8009a0c <TL_Init+0x48>)
 80099d0:	4a10      	ldr	r2, [pc, #64]	; (8009a14 <TL_Init+0x50>)
 80099d2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80099d4:	4b0d      	ldr	r3, [pc, #52]	; (8009a0c <TL_Init+0x48>)
 80099d6:	4a10      	ldr	r2, [pc, #64]	; (8009a18 <TL_Init+0x54>)
 80099d8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80099da:	4b0c      	ldr	r3, [pc, #48]	; (8009a0c <TL_Init+0x48>)
 80099dc:	4a0f      	ldr	r2, [pc, #60]	; (8009a1c <TL_Init+0x58>)
 80099de:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 80099e0:	4b0a      	ldr	r3, [pc, #40]	; (8009a0c <TL_Init+0x48>)
 80099e2:	4a0f      	ldr	r2, [pc, #60]	; (8009a20 <TL_Init+0x5c>)
 80099e4:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80099e6:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <TL_Init+0x48>)
 80099e8:	4a0e      	ldr	r2, [pc, #56]	; (8009a24 <TL_Init+0x60>)
 80099ea:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80099ec:	4b07      	ldr	r3, [pc, #28]	; (8009a0c <TL_Init+0x48>)
 80099ee:	4a0e      	ldr	r2, [pc, #56]	; (8009a28 <TL_Init+0x64>)
 80099f0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80099f2:	4b06      	ldr	r3, [pc, #24]	; (8009a0c <TL_Init+0x48>)
 80099f4:	4a0d      	ldr	r2, [pc, #52]	; (8009a2c <TL_Init+0x68>)
 80099f6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80099f8:	4b04      	ldr	r3, [pc, #16]	; (8009a0c <TL_Init+0x48>)
 80099fa:	4a0d      	ldr	r2, [pc, #52]	; (8009a30 <TL_Init+0x6c>)
 80099fc:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80099fe:	4b03      	ldr	r3, [pc, #12]	; (8009a0c <TL_Init+0x48>)
 8009a00:	4a0c      	ldr	r2, [pc, #48]	; (8009a34 <TL_Init+0x70>)
 8009a02:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009a04:	f007 f996 	bl	8010d34 <HW_IPCC_Init>

  return;
 8009a08:	bf00      	nop
}
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20030000 	.word	0x20030000
 8009a10:	20030028 	.word	0x20030028
 8009a14:	20030048 	.word	0x20030048
 8009a18:	20030058 	.word	0x20030058
 8009a1c:	20030064 	.word	0x20030064
 8009a20:	2003006c 	.word	0x2003006c
 8009a24:	20030074 	.word	0x20030074
 8009a28:	2003007c 	.word	0x2003007c
 8009a2c:	20030098 	.word	0x20030098
 8009a30:	2003009c 	.word	0x2003009c
 8009a34:	200300a8 	.word	0x200300a8

08009a38 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8009a44:	4811      	ldr	r0, [pc, #68]	; (8009a8c <TL_BLE_Init+0x54>)
 8009a46:	f000 fee7 	bl	800a818 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8009a4a:	4b11      	ldr	r3, [pc, #68]	; (8009a90 <TL_BLE_Init+0x58>)
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	689a      	ldr	r2, [r3, #8]
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	68da      	ldr	r2, [r3, #12]
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	4a0c      	ldr	r2, [pc, #48]	; (8009a94 <TL_BLE_Init+0x5c>)
 8009a64:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	4a08      	ldr	r2, [pc, #32]	; (8009a8c <TL_BLE_Init+0x54>)
 8009a6a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009a6c:	f007 f978 	bl	8010d60 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a08      	ldr	r2, [pc, #32]	; (8009a98 <TL_BLE_Init+0x60>)
 8009a76:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	4a07      	ldr	r2, [pc, #28]	; (8009a9c <TL_BLE_Init+0x64>)
 8009a7e:	6013      	str	r3, [r2, #0]

  return 0;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	200300c4 	.word	0x200300c4
 8009a90:	20030000 	.word	0x20030000
 8009a94:	20030a4c 	.word	0x20030a4c
 8009a98:	200002b0 	.word	0x200002b0
 8009a9c:	200002b4 	.word	0x200002b4

08009aa0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009aac:	4b09      	ldr	r3, [pc, #36]	; (8009ad4 <TL_BLE_SendCmd+0x34>)
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8009ab6:	4b07      	ldr	r3, [pc, #28]	; (8009ad4 <TL_BLE_SendCmd+0x34>)
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4619      	mov	r1, r3
 8009abe:	2001      	movs	r0, #1
 8009ac0:	f000 f9da 	bl	8009e78 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009ac4:	f007 f956 	bl	8010d74 <HW_IPCC_BLE_SendCmd>

  return 0;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	20030000 	.word	0x20030000

08009ad8 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009ade:	e01c      	b.n	8009b1a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009ae0:	1d3b      	adds	r3, r7, #4
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	4812      	ldr	r0, [pc, #72]	; (8009b30 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009ae6:	f000 ff2e 	bl	800a946 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	7a5b      	ldrb	r3, [r3, #9]
 8009aee:	2b0f      	cmp	r3, #15
 8009af0:	d003      	beq.n	8009afa <HW_IPCC_BLE_RxEvtNot+0x22>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	7a5b      	ldrb	r3, [r3, #9]
 8009af6:	2b0e      	cmp	r3, #14
 8009af8:	d105      	bne.n	8009b06 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4619      	mov	r1, r3
 8009afe:	2002      	movs	r0, #2
 8009b00:	f000 f9ba 	bl	8009e78 <OutputDbgTrace>
 8009b04:	e004      	b.n	8009b10 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	2003      	movs	r0, #3
 8009b0c:	f000 f9b4 	bl	8009e78 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009b10:	4b08      	ldr	r3, [pc, #32]	; (8009b34 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	4610      	mov	r0, r2
 8009b18:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009b1a:	4805      	ldr	r0, [pc, #20]	; (8009b30 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009b1c:	f000 fe8c 	bl	800a838 <LST_is_empty>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d0dc      	beq.n	8009ae0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009b26:	bf00      	nop
}
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	200300c4 	.word	0x200300c4
 8009b34:	200002b0 	.word	0x200002b0

08009b38 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009b3c:	4b02      	ldr	r3, [pc, #8]	; (8009b48 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4798      	blx	r3

  return;
 8009b42:	bf00      	nop
}
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	200002b4 	.word	0x200002b4

08009b4c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009b58:	480d      	ldr	r0, [pc, #52]	; (8009b90 <TL_SYS_Init+0x44>)
 8009b5a:	f000 fe5d 	bl	800a818 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009b5e:	4b0d      	ldr	r3, [pc, #52]	; (8009b94 <TL_SYS_Init+0x48>)
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	689a      	ldr	r2, [r3, #8]
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	4a08      	ldr	r2, [pc, #32]	; (8009b90 <TL_SYS_Init+0x44>)
 8009b70:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009b72:	f007 f921 	bl	8010db8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a07      	ldr	r2, [pc, #28]	; (8009b98 <TL_SYS_Init+0x4c>)
 8009b7c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	4a06      	ldr	r2, [pc, #24]	; (8009b9c <TL_SYS_Init+0x50>)
 8009b84:	6013      	str	r3, [r2, #0]

  return 0;
 8009b86:	2300      	movs	r3, #0
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	200300cc 	.word	0x200300cc
 8009b94:	20030000 	.word	0x20030000
 8009b98:	200002b8 	.word	0x200002b8
 8009b9c:	200002bc 	.word	0x200002bc

08009ba0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	460b      	mov	r3, r1
 8009baa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009bac:	4b09      	ldr	r3, [pc, #36]	; (8009bd4 <TL_SYS_SendCmd+0x34>)
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2210      	movs	r2, #16
 8009bb4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8009bb6:	4b07      	ldr	r3, [pc, #28]	; (8009bd4 <TL_SYS_SendCmd+0x34>)
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	2004      	movs	r0, #4
 8009bc0:	f000 f95a 	bl	8009e78 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009bc4:	f007 f902 	bl	8010dcc <HW_IPCC_SYS_SendCmd>

  return 0;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	20030000 	.word	0x20030000

08009bd8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009bdc:	4b07      	ldr	r3, [pc, #28]	; (8009bfc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4619      	mov	r1, r3
 8009be4:	2005      	movs	r0, #5
 8009be6:	f000 f947 	bl	8009e78 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009bea:	4b05      	ldr	r3, [pc, #20]	; (8009c00 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a03      	ldr	r2, [pc, #12]	; (8009bfc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009bf0:	68d2      	ldr	r2, [r2, #12]
 8009bf2:	6812      	ldr	r2, [r2, #0]
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	4798      	blx	r3

  return;
 8009bf8:	bf00      	nop
}
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	20030000 	.word	0x20030000
 8009c00:	200002b8 	.word	0x200002b8

08009c04 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009c0a:	e00e      	b.n	8009c2a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009c0c:	1d3b      	adds	r3, r7, #4
 8009c0e:	4619      	mov	r1, r3
 8009c10:	480b      	ldr	r0, [pc, #44]	; (8009c40 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009c12:	f000 fe98 	bl	800a946 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4619      	mov	r1, r3
 8009c1a:	2006      	movs	r0, #6
 8009c1c:	f000 f92c 	bl	8009e78 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009c20:	4b08      	ldr	r3, [pc, #32]	; (8009c44 <HW_IPCC_SYS_EvtNot+0x40>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	4610      	mov	r0, r2
 8009c28:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009c2a:	4805      	ldr	r0, [pc, #20]	; (8009c40 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009c2c:	f000 fe04 	bl	800a838 <LST_is_empty>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d0ea      	beq.n	8009c0c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009c36:	bf00      	nop
}
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	200300cc 	.word	0x200300cc
 8009c44:	200002bc 	.word	0x200002bc

08009c48 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8009c50:	4b0a      	ldr	r3, [pc, #40]	; (8009c7c <TL_THREAD_Init+0x34>)
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	685a      	ldr	r2, [r3, #4]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	689a      	ldr	r2, [r3, #8]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 8009c6e:	f007 f8d3 	bl	8010e18 <HW_IPCC_THREAD_Init>

  return;
 8009c72:	bf00      	nop
}
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20030000 	.word	0x20030000

08009c80 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8009c84:	4b04      	ldr	r3, [pc, #16]	; (8009c98 <TL_OT_SendCmd+0x18>)
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	2208      	movs	r2, #8
 8009c8c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 8009c8e:	f007 f8d1 	bl	8010e34 <HW_IPCC_OT_SendCmd>

  return;
 8009c92:	bf00      	nop
}
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	20030000 	.word	0x20030000

08009c9c <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 8009ca0:	4b04      	ldr	r3, [pc, #16]	; (8009cb4 <TL_CLI_SendCmd+0x18>)
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	220a      	movs	r2, #10
 8009ca8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 8009caa:	f007 f8d1 	bl	8010e50 <HW_IPCC_CLI_SendCmd>

  return;
 8009cae:	bf00      	nop
}
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20030000 	.word	0x20030000

08009cb8 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8009cbc:	4b04      	ldr	r3, [pc, #16]	; (8009cd0 <TL_THREAD_SendAck+0x18>)
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	220d      	movs	r2, #13
 8009cc4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 8009cc6:	f007 f8cd 	bl	8010e64 <HW_IPCC_THREAD_SendAck>

  return;
 8009cca:	bf00      	nop
}
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20030000 	.word	0x20030000

08009cd4 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8009cd8:	4b04      	ldr	r3, [pc, #16]	; (8009cec <TL_THREAD_CliSendAck+0x18>)
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	220d      	movs	r2, #13
 8009ce0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 8009ce2:	f007 f8cd 	bl	8010e80 <HW_IPCC_THREAD_CliSendAck>

  return;
 8009ce6:	bf00      	nop
}
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	20030000 	.word	0x20030000

08009cf0 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8009cf4:	4b03      	ldr	r3, [pc, #12]	; (8009d04 <HW_IPCC_OT_CmdEvtNot+0x14>)
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f006 f972 	bl	800ffe4 <TL_OT_CmdEvtReceived>

  return;
 8009d00:	bf00      	nop
}
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	20030000 	.word	0x20030000

08009d08 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 8009d0c:	4b03      	ldr	r3, [pc, #12]	; (8009d1c <HW_IPCC_THREAD_EvtNot+0x14>)
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f006 f970 	bl	800fff8 <TL_THREAD_NotReceived>

  return;
 8009d18:	bf00      	nop
}
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	20030000 	.word	0x20030000

08009d20 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 8009d24:	4b03      	ldr	r3, [pc, #12]	; (8009d34 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f006 fa52 	bl	80101d4 <TL_THREAD_CliNotReceived>

  return;
 8009d30:	bf00      	nop
}
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	20030000 	.word	0x20030000

08009d38 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009d40:	4817      	ldr	r0, [pc, #92]	; (8009da0 <TL_MM_Init+0x68>)
 8009d42:	f000 fd69 	bl	800a818 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009d46:	4817      	ldr	r0, [pc, #92]	; (8009da4 <TL_MM_Init+0x6c>)
 8009d48:	f000 fd66 	bl	800a818 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009d4c:	4b16      	ldr	r3, [pc, #88]	; (8009da8 <TL_MM_Init+0x70>)
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	4a16      	ldr	r2, [pc, #88]	; (8009dac <TL_MM_Init+0x74>)
 8009d52:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009d54:	4b15      	ldr	r3, [pc, #84]	; (8009dac <TL_MM_Init+0x74>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	6892      	ldr	r2, [r2, #8]
 8009d5c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009d5e:	4b13      	ldr	r3, [pc, #76]	; (8009dac <TL_MM_Init+0x74>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	68d2      	ldr	r2, [r2, #12]
 8009d66:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009d68:	4b10      	ldr	r3, [pc, #64]	; (8009dac <TL_MM_Init+0x74>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a0c      	ldr	r2, [pc, #48]	; (8009da0 <TL_MM_Init+0x68>)
 8009d6e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009d70:	4b0e      	ldr	r3, [pc, #56]	; (8009dac <TL_MM_Init+0x74>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	6812      	ldr	r2, [r2, #0]
 8009d78:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8009d7a:	4b0c      	ldr	r3, [pc, #48]	; (8009dac <TL_MM_Init+0x74>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	6852      	ldr	r2, [r2, #4]
 8009d82:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009d84:	4b09      	ldr	r3, [pc, #36]	; (8009dac <TL_MM_Init+0x74>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	6912      	ldr	r2, [r2, #16]
 8009d8c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009d8e:	4b07      	ldr	r3, [pc, #28]	; (8009dac <TL_MM_Init+0x74>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	6952      	ldr	r2, [r2, #20]
 8009d96:	619a      	str	r2, [r3, #24]

  return;
 8009d98:	bf00      	nop
}
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	200300b4 	.word	0x200300b4
 8009da4:	200002a8 	.word	0x200002a8
 8009da8:	20030000 	.word	0x20030000
 8009dac:	200002c0 	.word	0x200002c0

08009db0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009db8:	6879      	ldr	r1, [r7, #4]
 8009dba:	4807      	ldr	r0, [pc, #28]	; (8009dd8 <TL_MM_EvtDone+0x28>)
 8009dbc:	f000 fd80 	bl	800a8c0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009dc0:	6879      	ldr	r1, [r7, #4]
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	f000 f858 	bl	8009e78 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009dc8:	4804      	ldr	r0, [pc, #16]	; (8009ddc <TL_MM_EvtDone+0x2c>)
 8009dca:	f007 f88b 	bl	8010ee4 <HW_IPCC_MM_SendFreeBuf>

  return;
 8009dce:	bf00      	nop
}
 8009dd0:	3708      	adds	r7, #8
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	200002a8 	.word	0x200002a8
 8009ddc:	08009de1 	.word	0x08009de1

08009de0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009de6:	e00c      	b.n	8009e02 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009de8:	1d3b      	adds	r3, r7, #4
 8009dea:	4619      	mov	r1, r3
 8009dec:	480a      	ldr	r0, [pc, #40]	; (8009e18 <SendFreeBuf+0x38>)
 8009dee:	f000 fdaa 	bl	800a946 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009df2:	4b0a      	ldr	r3, [pc, #40]	; (8009e1c <SendFreeBuf+0x3c>)
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f000 fd5f 	bl	800a8c0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009e02:	4805      	ldr	r0, [pc, #20]	; (8009e18 <SendFreeBuf+0x38>)
 8009e04:	f000 fd18 	bl	800a838 <LST_is_empty>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d0ec      	beq.n	8009de8 <SendFreeBuf+0x8>
  }

  return;
 8009e0e:	bf00      	nop
}
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	200002a8 	.word	0x200002a8
 8009e1c:	20030000 	.word	0x20030000

08009e20 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009e24:	4805      	ldr	r0, [pc, #20]	; (8009e3c <TL_TRACES_Init+0x1c>)
 8009e26:	f000 fcf7 	bl	800a818 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8009e2a:	4b05      	ldr	r3, [pc, #20]	; (8009e40 <TL_TRACES_Init+0x20>)
 8009e2c:	695b      	ldr	r3, [r3, #20]
 8009e2e:	4a03      	ldr	r2, [pc, #12]	; (8009e3c <TL_TRACES_Init+0x1c>)
 8009e30:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009e32:	f007 f88d 	bl	8010f50 <HW_IPCC_TRACES_Init>

  return;
 8009e36:	bf00      	nop
}
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	200300bc 	.word	0x200300bc
 8009e40:	20030000 	.word	0x20030000

08009e44 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009e4a:	e008      	b.n	8009e5e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009e4c:	1d3b      	adds	r3, r7, #4
 8009e4e:	4619      	mov	r1, r3
 8009e50:	4808      	ldr	r0, [pc, #32]	; (8009e74 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009e52:	f000 fd78 	bl	800a946 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7f7 f949 	bl	80010f0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009e5e:	4805      	ldr	r0, [pc, #20]	; (8009e74 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009e60:	f000 fcea 	bl	800a838 <LST_is_empty>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d0f0      	beq.n	8009e4c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8009e6a:	bf00      	nop
}
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	200300bc 	.word	0x200300bc

08009e78 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	4603      	mov	r3, r0
 8009e80:	6039      	str	r1, [r7, #0]
 8009e82:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009e84:	79fb      	ldrb	r3, [r7, #7]
 8009e86:	2b06      	cmp	r3, #6
 8009e88:	d849      	bhi.n	8009f1e <OutputDbgTrace+0xa6>
 8009e8a:	a201      	add	r2, pc, #4	; (adr r2, 8009e90 <OutputDbgTrace+0x18>)
 8009e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e90:	08009ead 	.word	0x08009ead
 8009e94:	08009ecf 	.word	0x08009ecf
 8009e98:	08009ed5 	.word	0x08009ed5
 8009e9c:	08009eef 	.word	0x08009eef
 8009ea0:	08009efb 	.word	0x08009efb
 8009ea4:	08009f01 	.word	0x08009f01
 8009ea8:	08009f13 	.word	0x08009f13
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	7a5b      	ldrb	r3, [r3, #9]
 8009eb4:	2b0f      	cmp	r3, #15
 8009eb6:	d004      	beq.n	8009ec2 <OutputDbgTrace+0x4a>
 8009eb8:	2bff      	cmp	r3, #255	; 0xff
 8009eba:	d004      	beq.n	8009ec6 <OutputDbgTrace+0x4e>
 8009ebc:	2b0e      	cmp	r3, #14
 8009ebe:	d004      	beq.n	8009eca <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009ec0:	e004      	b.n	8009ecc <OutputDbgTrace+0x54>
          break;
 8009ec2:	bf00      	nop
 8009ec4:	e02c      	b.n	8009f20 <OutputDbgTrace+0xa8>
          break;
 8009ec6:	bf00      	nop
 8009ec8:	e02a      	b.n	8009f20 <OutputDbgTrace+0xa8>
          break;
 8009eca:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009ecc:	e028      	b.n	8009f20 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009ed2:	e025      	b.n	8009f20 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	7a5b      	ldrb	r3, [r3, #9]
 8009edc:	2b0e      	cmp	r3, #14
 8009ede:	d002      	beq.n	8009ee6 <OutputDbgTrace+0x6e>
 8009ee0:	2b0f      	cmp	r3, #15
 8009ee2:	d002      	beq.n	8009eea <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009ee4:	e002      	b.n	8009eec <OutputDbgTrace+0x74>
          break;
 8009ee6:	bf00      	nop
 8009ee8:	e01a      	b.n	8009f20 <OutputDbgTrace+0xa8>
          break;
 8009eea:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009eec:	e018      	b.n	8009f20 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	7a5b      	ldrb	r3, [r3, #9]
 8009ef6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009ef8:	e012      	b.n	8009f20 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009efe:	e00f      	b.n	8009f20 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	7a5b      	ldrb	r3, [r3, #9]
 8009f08:	2b0e      	cmp	r3, #14
 8009f0a:	d000      	beq.n	8009f0e <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009f0c:	e000      	b.n	8009f10 <OutputDbgTrace+0x98>
          break;
 8009f0e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009f10:	e006      	b.n	8009f20 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	7a5b      	ldrb	r3, [r3, #9]
 8009f1a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009f1c:	e000      	b.n	8009f20 <OutputDbgTrace+0xa8>

    default:
      break;
 8009f1e:	bf00      	nop
  }

  return;
 8009f20:	bf00      	nop
}
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 8009f32:	f006 f871 	bl	8010018 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009f36:	f006 f80d 	bl	800ff54 <THREAD_Get_OTCmdPayloadBuffer>
 8009f3a:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f062 026b 	orn	r2, r2, #107	; 0x6b
 8009f44:	701a      	strb	r2, [r3, #0]
 8009f46:	2200      	movs	r2, #0
 8009f48:	705a      	strb	r2, [r3, #1]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	709a      	strb	r2, [r3, #2]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	711a      	strb	r2, [r3, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	715a      	strb	r2, [r3, #5]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	719a      	strb	r2, [r3, #6]
 8009f60:	2200      	movs	r2, #0
 8009f62:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8009f64:	f006 f81a 	bl	800ff9c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009f68:	f006 f800 	bl	800ff6c <THREAD_Get_OTCmdRspPayloadBuffer>
 8009f6c:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	689b      	ldr	r3, [r3, #8]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b084      	sub	sp, #16
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8009f82:	f006 f849 	bl	8010018 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009f86:	f005 ffe5 	bl	800ff54 <THREAD_Get_OTCmdPayloadBuffer>
 8009f8a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f062 0269 	orn	r2, r2, #105	; 0x69
 8009f94:	701a      	strb	r2, [r3, #0]
 8009f96:	2200      	movs	r2, #0
 8009f98:	705a      	strb	r2, [r3, #1]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	709a      	strb	r2, [r3, #2]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	711a      	strb	r2, [r3, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	715a      	strb	r2, [r3, #5]
 8009fac:	2200      	movs	r2, #0
 8009fae:	719a      	strb	r2, [r3, #6]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8009fb4:	f005 fff2 	bl	800ff9c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009fb8:	f005 ffd8 	bl	800ff6c <THREAD_Get_OTCmdRspPayloadBuffer>
 8009fbc:	60f8      	str	r0, [r7, #12]
}
 8009fbe:	bf00      	nop
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
	...

08009fc8 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8009fd4:	f006 f820 	bl	8010018 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 8009fd8:	4a15      	ldr	r2, [pc, #84]	; (800a030 <otSetStateChangedCallback+0x68>)
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009fde:	f005 ffb9 	bl	800ff54 <THREAD_Get_OTCmdPayloadBuffer>
 8009fe2:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f062 0268 	orn	r2, r2, #104	; 0x68
 8009fec:	701a      	strb	r2, [r3, #0]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	705a      	strb	r2, [r3, #1]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	709a      	strb	r2, [r3, #2]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f042 0201 	orr.w	r2, r2, #1
 800a002:	711a      	strb	r2, [r3, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	715a      	strb	r2, [r3, #5]
 800a008:	2200      	movs	r2, #0
 800a00a:	719a      	strb	r2, [r3, #6]
 800a00c:	2200      	movs	r2, #0
 800a00e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800a016:	f005 ffc1 	bl	800ff9c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a01a:	f005 ffa7 	bl	800ff6c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a01e:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	b2db      	uxtb	r3, r3
}
 800a026:	4618      	mov	r0, r3
 800a028:	3718      	adds	r7, #24
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	200002c4 	.word	0x200002c4

0800a034 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800a03c:	f005 ffec 	bl	8010018 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a040:	f005 ff88 	bl	800ff54 <THREAD_Get_OTCmdPayloadBuffer>
 800a044:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2200      	movs	r2, #0
 800a04a:	f062 0264 	orn	r2, r2, #100	; 0x64
 800a04e:	701a      	strb	r2, [r3, #0]
 800a050:	2200      	movs	r2, #0
 800a052:	705a      	strb	r2, [r3, #1]
 800a054:	2200      	movs	r2, #0
 800a056:	709a      	strb	r2, [r3, #2]
 800a058:	2200      	movs	r2, #0
 800a05a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2200      	movs	r2, #0
 800a060:	711a      	strb	r2, [r3, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	715a      	strb	r2, [r3, #5]
 800a066:	2200      	movs	r2, #0
 800a068:	719a      	strb	r2, [r3, #6]
 800a06a:	2200      	movs	r2, #0
 800a06c:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800a06e:	f005 ff95 	bl	800ff9c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a072:	f005 ff7b 	bl	800ff6c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a076:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	b2db      	uxtb	r3, r3
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b084      	sub	sp, #16
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	460b      	mov	r3, r1
 800a090:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a092:	f005 ffc1 	bl	8010018 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a096:	f005 ff5d 	bl	800ff54 <THREAD_Get_OTCmdPayloadBuffer>
 800a09a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800a0a4:	701a      	strb	r2, [r3, #0]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	705a      	strb	r2, [r3, #1]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	709a      	strb	r2, [r3, #2]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f042 0201 	orr.w	r2, r2, #1
 800a0ba:	711a      	strb	r2, [r3, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	715a      	strb	r2, [r3, #5]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	719a      	strb	r2, [r3, #6]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800a0c8:	78fa      	ldrb	r2, [r7, #3]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a0ce:	f005 ff65 	bl	800ff9c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a0d2:	f005 ff4b 	bl	800ff6c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a0d6:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	b2db      	uxtb	r3, r3
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b084      	sub	sp, #16
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a0f2:	f005 ff91 	bl	8010018 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a0f6:	f005 ff2d 	bl	800ff54 <THREAD_Get_OTCmdPayloadBuffer>
 800a0fa:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f042 0208 	orr.w	r2, r2, #8
 800a104:	701a      	strb	r2, [r3, #0]
 800a106:	2200      	movs	r2, #0
 800a108:	705a      	strb	r2, [r3, #1]
 800a10a:	2200      	movs	r2, #0
 800a10c:	709a      	strb	r2, [r3, #2]
 800a10e:	2200      	movs	r2, #0
 800a110:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	f042 0201 	orr.w	r2, r2, #1
 800a11a:	711a      	strb	r2, [r3, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	715a      	strb	r2, [r3, #5]
 800a120:	2200      	movs	r2, #0
 800a122:	719a      	strb	r2, [r3, #6]
 800a124:	2200      	movs	r2, #0
 800a126:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800a128:	78fa      	ldrb	r2, [r7, #3]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a12e:	f005 ff35 	bl	800ff9c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a132:	f005 ff1b 	bl	800ff6c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a136:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	b2db      	uxtb	r3, r3
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b084      	sub	sp, #16
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	460b      	mov	r3, r1
 800a150:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800a152:	f005 ff61 	bl	8010018 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a156:	f005 fefd 	bl	800ff54 <THREAD_Get_OTCmdPayloadBuffer>
 800a15a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	f042 020f 	orr.w	r2, r2, #15
 800a164:	701a      	strb	r2, [r3, #0]
 800a166:	2200      	movs	r2, #0
 800a168:	705a      	strb	r2, [r3, #1]
 800a16a:	2200      	movs	r2, #0
 800a16c:	709a      	strb	r2, [r3, #2]
 800a16e:	2200      	movs	r2, #0
 800a170:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	f042 0201 	orr.w	r2, r2, #1
 800a17a:	711a      	strb	r2, [r3, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	715a      	strb	r2, [r3, #5]
 800a180:	2200      	movs	r2, #0
 800a182:	719a      	strb	r2, [r3, #6]
 800a184:	2200      	movs	r2, #0
 800a186:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800a188:	887a      	ldrh	r2, [r7, #2]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a18e:	f005 ff05 	bl	800ff9c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a192:	f005 feeb 	bl	800ff6c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a196:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	b2db      	uxtb	r3, r3
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
	...

0800a1a8 <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800a1a8:	b5b0      	push	{r4, r5, r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	71fb      	strb	r3, [r7, #7]


    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800a1b2:	f005 fee7 	bl	800ff84 <THREAD_Get_NotificationPayloadBuffer>
 800a1b6:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	2b17      	cmp	r3, #23
 800a1c0:	f200 81c3 	bhi.w	800a54a <OpenThread_CallBack_Processing+0x3a2>
 800a1c4:	a201      	add	r2, pc, #4	; (adr r2, 800a1cc <OpenThread_CallBack_Processing+0x24>)
 800a1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ca:	bf00      	nop
 800a1cc:	0800a22d 	.word	0x0800a22d
 800a1d0:	0800a249 	.word	0x0800a249
 800a1d4:	0800a2ad 	.word	0x0800a2ad
 800a1d8:	0800a2f5 	.word	0x0800a2f5
 800a1dc:	0800a301 	.word	0x0800a301
 800a1e0:	0800a31f 	.word	0x0800a31f
 800a1e4:	0800a33d 	.word	0x0800a33d
 800a1e8:	0800a35b 	.word	0x0800a35b
 800a1ec:	0800a379 	.word	0x0800a379
 800a1f0:	0800a397 	.word	0x0800a397
 800a1f4:	0800a3b9 	.word	0x0800a3b9
 800a1f8:	0800a3d7 	.word	0x0800a3d7
 800a1fc:	0800a54b 	.word	0x0800a54b
 800a200:	0800a3fd 	.word	0x0800a3fd
 800a204:	0800a431 	.word	0x0800a431
 800a208:	0800a459 	.word	0x0800a459
 800a20c:	0800a477 	.word	0x0800a477
 800a210:	0800a4e5 	.word	0x0800a4e5
 800a214:	0800a50d 	.word	0x0800a50d
 800a218:	0800a54b 	.word	0x0800a54b
 800a21c:	0800a52b 	.word	0x0800a52b
 800a220:	0800a54b 	.word	0x0800a54b
 800a224:	0800a54b 	.word	0x0800a54b
 800a228:	0800a285 	.word	0x0800a285
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 800a22c:	4b9b      	ldr	r3, [pc, #620]	; (800a49c <OpenThread_CallBack_Processing+0x2f4>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	f000 818d 	beq.w	800a550 <OpenThread_CallBack_Processing+0x3a8>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800a236:	4b99      	ldr	r3, [pc, #612]	; (800a49c <OpenThread_CallBack_Processing+0x2f4>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	683a      	ldr	r2, [r7, #0]
 800a23c:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800a242:	4611      	mov	r1, r2
 800a244:	4798      	blx	r3
        }
        break;
 800a246:	e183      	b.n	800a550 <OpenThread_CallBack_Processing+0x3a8>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        mySTCoapContext = (STCoapSpecificRequestContextType * ) p_notification->Data[0];
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	461a      	mov	r2, r3
 800a24e:	4b94      	ldr	r3, [pc, #592]	; (800a4a0 <OpenThread_CallBack_Processing+0x2f8>)
 800a250:	601a      	str	r2, [r3, #0]
        coapRequestHandlerCb = mySTCoapContext->mHandler;
 800a252:	4b93      	ldr	r3, [pc, #588]	; (800a4a0 <OpenThread_CallBack_Processing+0x2f8>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	4a92      	ldr	r2, [pc, #584]	; (800a4a4 <OpenThread_CallBack_Processing+0x2fc>)
 800a25a:	6013      	str	r3, [r2, #0]
        if (coapRequestHandlerCb != NULL)
 800a25c:	4b91      	ldr	r3, [pc, #580]	; (800a4a4 <OpenThread_CallBack_Processing+0x2fc>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	f000 8177 	beq.w	800a554 <OpenThread_CallBack_Processing+0x3ac>
        {
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800a266:	4b8f      	ldr	r3, [pc, #572]	; (800a4a4 <OpenThread_CallBack_Processing+0x2fc>)
 800a268:	681c      	ldr	r4, [r3, #0]
 800a26a:	4b8d      	ldr	r3, [pc, #564]	; (800a4a0 <OpenThread_CallBack_Processing+0x2f8>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	6818      	ldr	r0, [r3, #0]
                                (otCoapHeader *) p_notification->Data[1],
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	68db      	ldr	r3, [r3, #12]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800a274:	4619      	mov	r1, r3
                                (otMessage *) p_notification->Data[2],
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	691b      	ldr	r3, [r3, #16]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800a27a:	461a      	mov	r2, r3
                                (otMessageInfo *) p_notification->Data[3]);
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	695b      	ldr	r3, [r3, #20]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800a280:	47a0      	blx	r4
        }
        break;
 800a282:	e167      	b.n	800a554 <OpenThread_CallBack_Processing+0x3ac>
    case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
        if (defaultCoapRequestHandlerCb != NULL)
 800a284:	4b88      	ldr	r3, [pc, #544]	; (800a4a8 <OpenThread_CallBack_Processing+0x300>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f000 8165 	beq.w	800a558 <OpenThread_CallBack_Processing+0x3b0>
        {
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a28e:	4b86      	ldr	r3, [pc, #536]	; (800a4a8 <OpenThread_CallBack_Processing+0x300>)
 800a290:	681c      	ldr	r4, [r3, #0]
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	4618      	mov	r0, r3
                    (otCoapHeader *) p_notification->Data[1],
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	68db      	ldr	r3, [r3, #12]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a29c:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	691b      	ldr	r3, [r3, #16]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a2a2:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3]);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	695b      	ldr	r3, [r3, #20]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a2a8:	47a0      	blx	r4
        }
        break;
 800a2aa:	e155      	b.n	800a558 <OpenThread_CallBack_Processing+0x3b0>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER: 
        mySTCoapResponseContext = (STCoapSpecificResponseContextType * ) p_notification->Data[0];
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	4b7e      	ldr	r3, [pc, #504]	; (800a4ac <OpenThread_CallBack_Processing+0x304>)
 800a2b4:	601a      	str	r2, [r3, #0]
        coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800a2b6:	4b7d      	ldr	r3, [pc, #500]	; (800a4ac <OpenThread_CallBack_Processing+0x304>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	4a7c      	ldr	r2, [pc, #496]	; (800a4b0 <OpenThread_CallBack_Processing+0x308>)
 800a2be:	6013      	str	r3, [r2, #0]
        if (coapResponseHandlerCb != NULL)
 800a2c0:	4b7b      	ldr	r3, [pc, #492]	; (800a4b0 <OpenThread_CallBack_Processing+0x308>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f000 8149 	beq.w	800a55c <OpenThread_CallBack_Processing+0x3b4>
        {
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a2ca:	4b79      	ldr	r3, [pc, #484]	; (800a4b0 <OpenThread_CallBack_Processing+0x308>)
 800a2cc:	681c      	ldr	r4, [r3, #0]
 800a2ce:	4b77      	ldr	r3, [pc, #476]	; (800a4ac <OpenThread_CallBack_Processing+0x304>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	6818      	ldr	r0, [r3, #0]
                    (otCoapHeader *) p_notification->Data[1],
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	68db      	ldr	r3, [r3, #12]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a2d8:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a2de:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3],
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a2e4:	461d      	mov	r5, r3
                    (otError) p_notification->Data[4]);
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	9300      	str	r3, [sp, #0]
 800a2ee:	462b      	mov	r3, r5
 800a2f0:	47a0      	blx	r4
        }
        break;
 800a2f2:	e133      	b.n	800a55c <OpenThread_CallBack_Processing+0x3b4>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 800a2f4:	2001      	movs	r0, #1
 800a2f6:	f7fe ffcd 	bl	8009294 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 800a2fa:	f7f8 ff58 	bl	80031ae <HAL_NVIC_SystemReset>
        break;
 800a2fe:	e14c      	b.n	800a59a <OpenThread_CallBack_Processing+0x3f2>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 800a300:	4b6c      	ldr	r3, [pc, #432]	; (800a4b4 <OpenThread_CallBack_Processing+0x30c>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	f000 812b 	beq.w	800a560 <OpenThread_CallBack_Processing+0x3b8>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800a30a:	4b6a      	ldr	r3, [pc, #424]	; (800a4b4 <OpenThread_CallBack_Processing+0x30c>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	6892      	ldr	r2, [r2, #8]
 800a312:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800a314:	683a      	ldr	r2, [r7, #0]
 800a316:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800a318:	4611      	mov	r1, r2
 800a31a:	4798      	blx	r3
        }
        break;
 800a31c:	e120      	b.n	800a560 <OpenThread_CallBack_Processing+0x3b8>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 800a31e:	4b66      	ldr	r3, [pc, #408]	; (800a4b8 <OpenThread_CallBack_Processing+0x310>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	f000 811e 	beq.w	800a564 <OpenThread_CallBack_Processing+0x3bc>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800a328:	4b63      	ldr	r3, [pc, #396]	; (800a4b8 <OpenThread_CallBack_Processing+0x310>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	683a      	ldr	r2, [r7, #0]
 800a32e:	6892      	ldr	r2, [r2, #8]
 800a330:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800a336:	2000      	movs	r0, #0
 800a338:	4798      	blx	r3
        }
        break;
 800a33a:	e113      	b.n	800a564 <OpenThread_CallBack_Processing+0x3bc>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 800a33c:	4b5f      	ldr	r3, [pc, #380]	; (800a4bc <OpenThread_CallBack_Processing+0x314>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2b00      	cmp	r3, #0
 800a342:	f000 8111 	beq.w	800a568 <OpenThread_CallBack_Processing+0x3c0>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800a346:	4b5d      	ldr	r3, [pc, #372]	; (800a4bc <OpenThread_CallBack_Processing+0x314>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	683a      	ldr	r2, [r7, #0]
 800a34c:	6892      	ldr	r2, [r2, #8]
 800a34e:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800a350:	683a      	ldr	r2, [r7, #0]
 800a352:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800a354:	4611      	mov	r1, r2
 800a356:	4798      	blx	r3
        }
        break;
 800a358:	e106      	b.n	800a568 <OpenThread_CallBack_Processing+0x3c0>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 800a35a:	4b59      	ldr	r3, [pc, #356]	; (800a4c0 <OpenThread_CallBack_Processing+0x318>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f000 8104 	beq.w	800a56c <OpenThread_CallBack_Processing+0x3c4>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800a364:	4b56      	ldr	r3, [pc, #344]	; (800a4c0 <OpenThread_CallBack_Processing+0x318>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	683a      	ldr	r2, [r7, #0]
 800a36a:	6892      	ldr	r2, [r2, #8]
 800a36c:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800a372:	4611      	mov	r1, r2
 800a374:	4798      	blx	r3
        }
        break;
 800a376:	e0f9      	b.n	800a56c <OpenThread_CallBack_Processing+0x3c4>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 800a378:	4b52      	ldr	r3, [pc, #328]	; (800a4c4 <OpenThread_CallBack_Processing+0x31c>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f000 80f7 	beq.w	800a570 <OpenThread_CallBack_Processing+0x3c8>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800a382:	4b50      	ldr	r3, [pc, #320]	; (800a4c4 <OpenThread_CallBack_Processing+0x31c>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	6892      	ldr	r2, [r2, #8]
 800a38a:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800a38c:	683a      	ldr	r2, [r7, #0]
 800a38e:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800a390:	4611      	mov	r1, r2
 800a392:	4798      	blx	r3
        }
        break;
 800a394:	e0ec      	b.n	800a570 <OpenThread_CallBack_Processing+0x3c8>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 800a396:	4b4c      	ldr	r3, [pc, #304]	; (800a4c8 <OpenThread_CallBack_Processing+0x320>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f000 80ea 	beq.w	800a574 <OpenThread_CallBack_Processing+0x3cc>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800a3a0:	4b49      	ldr	r3, [pc, #292]	; (800a4c8 <OpenThread_CallBack_Processing+0x320>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	683a      	ldr	r2, [r7, #0]
 800a3a6:	6892      	ldr	r2, [r2, #8]
 800a3a8:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800a3ae:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 800a3b0:	683a      	ldr	r2, [r7, #0]
 800a3b2:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800a3b4:	4798      	blx	r3
        }
        break;
 800a3b6:	e0dd      	b.n	800a574 <OpenThread_CallBack_Processing+0x3cc>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 800a3b8:	4b44      	ldr	r3, [pc, #272]	; (800a4cc <OpenThread_CallBack_Processing+0x324>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f000 80db 	beq.w	800a578 <OpenThread_CallBack_Processing+0x3d0>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800a3c2:	4b42      	ldr	r3, [pc, #264]	; (800a4cc <OpenThread_CallBack_Processing+0x324>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	683a      	ldr	r2, [r7, #0]
 800a3c8:	6892      	ldr	r2, [r2, #8]
 800a3ca:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800a3d0:	4611      	mov	r1, r2
 800a3d2:	4798      	blx	r3
        }
        break;
 800a3d4:	e0d0      	b.n	800a578 <OpenThread_CallBack_Processing+0x3d0>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 800a3d6:	4b3e      	ldr	r3, [pc, #248]	; (800a4d0 <OpenThread_CallBack_Processing+0x328>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f000 80ce 	beq.w	800a57c <OpenThread_CallBack_Processing+0x3d4>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a3e0:	4b3b      	ldr	r3, [pc, #236]	; (800a4d0 <OpenThread_CallBack_Processing+0x328>)
 800a3e2:	681c      	ldr	r4, [r3, #0]
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a3ec:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a3f2:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a3f8:	47a0      	blx	r4
        }
        break;
 800a3fa:	e0bf      	b.n	800a57c <OpenThread_CallBack_Processing+0x3d4>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 800a3fc:	4b35      	ldr	r3, [pc, #212]	; (800a4d4 <OpenThread_CallBack_Processing+0x32c>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	f000 80bd 	beq.w	800a580 <OpenThread_CallBack_Processing+0x3d8>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a406:	4b33      	ldr	r3, [pc, #204]	; (800a4d4 <OpenThread_CallBack_Processing+0x32c>)
 800a408:	681c      	ldr	r4, [r3, #0]
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a414:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a41a:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a424:	b2db      	uxtb	r3, r3
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	4613      	mov	r3, r2
 800a42a:	462a      	mov	r2, r5
 800a42c:	47a0      	blx	r4
        }
        break;
 800a42e:	e0a7      	b.n	800a580 <OpenThread_CallBack_Processing+0x3d8>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 800a430:	4b29      	ldr	r3, [pc, #164]	; (800a4d8 <OpenThread_CallBack_Processing+0x330>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	f000 80a5 	beq.w	800a584 <OpenThread_CallBack_Processing+0x3dc>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a43a:	4b27      	ldr	r3, [pc, #156]	; (800a4d8 <OpenThread_CallBack_Processing+0x330>)
 800a43c:	681c      	ldr	r4, [r3, #0]
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a448:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a44e:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a454:	47a0      	blx	r4
        }
        break;
 800a456:	e095      	b.n	800a584 <OpenThread_CallBack_Processing+0x3dc>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 800a458:	4b20      	ldr	r3, [pc, #128]	; (800a4dc <OpenThread_CallBack_Processing+0x334>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f000 8093 	beq.w	800a588 <OpenThread_CallBack_Processing+0x3e0>
        {
            otJoinerCb((otError) p_notification->Data[0],
 800a462:	4b1e      	ldr	r3, [pc, #120]	; (800a4dc <OpenThread_CallBack_Processing+0x334>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	6892      	ldr	r2, [r2, #8]
 800a46a:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 800a46c:	683a      	ldr	r2, [r7, #0]
 800a46e:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 800a470:	4611      	mov	r1, r2
 800a472:	4798      	blx	r3
        }
        break;
 800a474:	e088      	b.n	800a588 <OpenThread_CallBack_Processing+0x3e0>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 800a476:	4b1a      	ldr	r3, [pc, #104]	; (800a4e0 <OpenThread_CallBack_Processing+0x338>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f000 8086 	beq.w	800a58c <OpenThread_CallBack_Processing+0x3e4>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a480:	4b17      	ldr	r3, [pc, #92]	; (800a4e0 <OpenThread_CallBack_Processing+0x338>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	683a      	ldr	r2, [r7, #0]
 800a486:	6892      	ldr	r2, [r2, #8]
 800a488:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 800a48a:	683a      	ldr	r2, [r7, #0]
 800a48c:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a48e:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 800a490:	683a      	ldr	r2, [r7, #0]
 800a492:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a494:	b2d2      	uxtb	r2, r2
 800a496:	4798      	blx	r3
        }
        break;
 800a498:	e078      	b.n	800a58c <OpenThread_CallBack_Processing+0x3e4>
 800a49a:	bf00      	nop
 800a49c:	200002c4 	.word	0x200002c4
 800a4a0:	20006f10 	.word	0x20006f10
 800a4a4:	20000304 	.word	0x20000304
 800a4a8:	20000308 	.word	0x20000308
 800a4ac:	20006f0c 	.word	0x20006f0c
 800a4b0:	2000030c 	.word	0x2000030c
 800a4b4:	200002cc 	.word	0x200002cc
 800a4b8:	200002c8 	.word	0x200002c8
 800a4bc:	200002d0 	.word	0x200002d0
 800a4c0:	200002d4 	.word	0x200002d4
 800a4c4:	200002d8 	.word	0x200002d8
 800a4c8:	200002dc 	.word	0x200002dc
 800a4cc:	200002e0 	.word	0x200002e0
 800a4d0:	200002e4 	.word	0x200002e4
 800a4d4:	200002e8 	.word	0x200002e8
 800a4d8:	200002ec 	.word	0x200002ec
 800a4dc:	200002f0 	.word	0x200002f0
 800a4e0:	200002f4 	.word	0x200002f4
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 800a4e4:	4b30      	ldr	r3, [pc, #192]	; (800a5a8 <OpenThread_CallBack_Processing+0x400>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d051      	beq.n	800a590 <OpenThread_CallBack_Processing+0x3e8>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a4ec:	4b2e      	ldr	r3, [pc, #184]	; (800a5a8 <OpenThread_CallBack_Processing+0x400>)
 800a4ee:	681c      	ldr	r4, [r3, #0]
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a4fa:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a500:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a506:	b2db      	uxtb	r3, r3
 800a508:	47a0      	blx	r4
        }
        break;
 800a50a:	e041      	b.n	800a590 <OpenThread_CallBack_Processing+0x3e8>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 800a50c:	4b27      	ldr	r3, [pc, #156]	; (800a5ac <OpenThread_CallBack_Processing+0x404>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d03f      	beq.n	800a594 <OpenThread_CallBack_Processing+0x3ec>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800a514:	4b25      	ldr	r3, [pc, #148]	; (800a5ac <OpenThread_CallBack_Processing+0x404>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	683a      	ldr	r2, [r7, #0]
 800a51a:	6892      	ldr	r2, [r2, #8]
 800a51c:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800a522:	b252      	sxtb	r2, r2
 800a524:	4611      	mov	r1, r2
 800a526:	4798      	blx	r3
        }
        break;
 800a528:	e034      	b.n	800a594 <OpenThread_CallBack_Processing+0x3ec>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 800a52a:	4b21      	ldr	r3, [pc, #132]	; (800a5b0 <OpenThread_CallBack_Processing+0x408>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d032      	beq.n	800a598 <OpenThread_CallBack_Processing+0x3f0>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 800a532:	4b1f      	ldr	r3, [pc, #124]	; (800a5b0 <OpenThread_CallBack_Processing+0x408>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	683a      	ldr	r2, [r7, #0]
 800a538:	6892      	ldr	r2, [r2, #8]
 800a53a:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 800a53c:	683a      	ldr	r2, [r7, #0]
 800a53e:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800a540:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 800a542:	683a      	ldr	r2, [r7, #0]
 800a544:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800a546:	4798      	blx	r3
        }
        break;
 800a548:	e026      	b.n	800a598 <OpenThread_CallBack_Processing+0x3f0>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	71fb      	strb	r3, [r7, #7]
        break;
 800a54e:	e024      	b.n	800a59a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a550:	bf00      	nop
 800a552:	e022      	b.n	800a59a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a554:	bf00      	nop
 800a556:	e020      	b.n	800a59a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a558:	bf00      	nop
 800a55a:	e01e      	b.n	800a59a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a55c:	bf00      	nop
 800a55e:	e01c      	b.n	800a59a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a560:	bf00      	nop
 800a562:	e01a      	b.n	800a59a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a564:	bf00      	nop
 800a566:	e018      	b.n	800a59a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a568:	bf00      	nop
 800a56a:	e016      	b.n	800a59a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a56c:	bf00      	nop
 800a56e:	e014      	b.n	800a59a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a570:	bf00      	nop
 800a572:	e012      	b.n	800a59a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a574:	bf00      	nop
 800a576:	e010      	b.n	800a59a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a578:	bf00      	nop
 800a57a:	e00e      	b.n	800a59a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a57c:	bf00      	nop
 800a57e:	e00c      	b.n	800a59a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a580:	bf00      	nop
 800a582:	e00a      	b.n	800a59a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a584:	bf00      	nop
 800a586:	e008      	b.n	800a59a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a588:	bf00      	nop
 800a58a:	e006      	b.n	800a59a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a58c:	bf00      	nop
 800a58e:	e004      	b.n	800a59a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a590:	bf00      	nop
 800a592:	e002      	b.n	800a59a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a594:	bf00      	nop
 800a596:	e000      	b.n	800a59a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a598:	bf00      	nop
    }

    TL_THREAD_SendAck();
 800a59a:	f7ff fb8d 	bl	8009cb8 <TL_THREAD_SendAck>
    return status;
 800a59e:	79fb      	ldrb	r3, [r7, #7]

}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bdb0      	pop	{r4, r5, r7, pc}
 800a5a8:	200002f8 	.word	0x200002f8
 800a5ac:	200002fc 	.word	0x200002fc
 800a5b0:	20000300 	.word	0x20000300

0800a5b4 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	460b      	mov	r3, r1
 800a5be:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a5c0:	f005 fd2a 	bl	8010018 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a5c4:	f005 fcc6 	bl	800ff54 <THREAD_Get_OTCmdPayloadBuffer>
 800a5c8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 800a5d2:	701a      	strb	r2, [r3, #0]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	705a      	strb	r2, [r3, #1]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	709a      	strb	r2, [r3, #2]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f042 0201 	orr.w	r2, r2, #1
 800a5e8:	711a      	strb	r2, [r3, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	715a      	strb	r2, [r3, #5]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	719a      	strb	r2, [r3, #6]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800a5f6:	78fa      	ldrb	r2, [r7, #3]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a5fc:	f005 fcce 	bl	800ff9c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a600:	f005 fcb4 	bl	800ff6c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a604:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	b2db      	uxtb	r3, r3
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a61c:	f005 fcfc 	bl	8010018 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a620:	f005 fc98 	bl	800ff54 <THREAD_Get_OTCmdPayloadBuffer>
 800a624:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 800a62e:	701a      	strb	r2, [r3, #0]
 800a630:	2200      	movs	r2, #0
 800a632:	705a      	strb	r2, [r3, #1]
 800a634:	2200      	movs	r2, #0
 800a636:	709a      	strb	r2, [r3, #2]
 800a638:	2200      	movs	r2, #0
 800a63a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	711a      	strb	r2, [r3, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	715a      	strb	r2, [r3, #5]
 800a646:	2200      	movs	r2, #0
 800a648:	719a      	strb	r2, [r3, #6]
 800a64a:	2200      	movs	r2, #0
 800a64c:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800a64e:	f005 fca5 	bl	800ff9c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a652:	f005 fc8b 	bl	800ff6c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a656:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	b2db      	uxtb	r3, r3
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
	...

0800a668 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a66e:	f3ef 8310 	mrs	r3, PRIMASK
 800a672:	60fb      	str	r3, [r7, #12]
  return(result);
 800a674:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800a676:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a678:	b672      	cpsid	i

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800a67a:	1cbb      	adds	r3, r7, #2
 800a67c:	4619      	mov	r1, r3
 800a67e:	4812      	ldr	r0, [pc, #72]	; (800a6c8 <DbgTrace_TxCpltCallback+0x60>)
 800a680:	f000 fbd7 	bl	800ae32 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800a684:	1cbb      	adds	r3, r7, #2
 800a686:	4619      	mov	r1, r3
 800a688:	480f      	ldr	r0, [pc, #60]	; (800a6c8 <DbgTrace_TxCpltCallback+0x60>)
 800a68a:	f000 fcc6 	bl	800b01a <CircularQueue_Sense>
 800a68e:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00b      	beq.n	800a6ae <DbgTrace_TxCpltCallback+0x46>
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800a6a0:	887b      	ldrh	r3, [r7, #2]
 800a6a2:	4a0a      	ldr	r2, [pc, #40]	; (800a6cc <DbgTrace_TxCpltCallback+0x64>)
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	6938      	ldr	r0, [r7, #16]
 800a6a8:	f7f6 fd3d 	bl	8001126 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800a6ac:	e007      	b.n	800a6be <DbgTrace_TxCpltCallback+0x56>
    DbgTracePeripheralReady = SET;
 800a6ae:	4b08      	ldr	r3, [pc, #32]	; (800a6d0 <DbgTrace_TxCpltCallback+0x68>)
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	701a      	strb	r2, [r3, #0]
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	607b      	str	r3, [r7, #4]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f383 8810 	msr	PRIMASK, r3
}
 800a6be:	bf00      	nop
 800a6c0:	3718      	adds	r7, #24
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20000310 	.word	0x20000310
 800a6cc:	0800a669 	.word	0x0800a669
 800a6d0:	2000000d 	.word	0x2000000d

0800a6d4 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800a6da:	f7f6 fd1e 	bl	800111a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800a6de:	2302      	movs	r3, #2
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a6e8:	4903      	ldr	r1, [pc, #12]	; (800a6f8 <DbgTraceInit+0x24>)
 800a6ea:	4804      	ldr	r0, [pc, #16]	; (800a6fc <DbgTraceInit+0x28>)
 800a6ec:	f000 f948 	bl	800a980 <CircularQueue_Init>
#endif 
#endif
  return;
 800a6f0:	bf00      	nop
}
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	20000330 	.word	0x20000330
 800a6fc:	20000310 	.word	0x20000310

0800a700 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	68b9      	ldr	r1, [r7, #8]
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f000 f805 	bl	800a720 <DbgTraceWrite>
 800a716:	4603      	mov	r3, r0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b08a      	sub	sp, #40	; 0x28
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800a72c:	2300      	movs	r3, #0
 800a72e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a730:	f3ef 8310 	mrs	r3, PRIMASK
 800a734:	61bb      	str	r3, [r7, #24]
  return(result);
 800a736:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800a738:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a740:	d102      	bne.n	800a748 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800a742:	2300      	movs	r3, #0
 800a744:	627b      	str	r3, [r7, #36]	; 0x24
 800a746:	e034      	b.n	800a7b2 <DbgTraceWrite+0x92>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d006      	beq.n	800a75c <DbgTraceWrite+0x3c>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2b02      	cmp	r3, #2
 800a752:	d003      	beq.n	800a75c <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800a754:	f04f 33ff 	mov.w	r3, #4294967295
 800a758:	627b      	str	r3, [r7, #36]	; 0x24
 800a75a:	e02a      	b.n	800a7b2 <DbgTraceWrite+0x92>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d027      	beq.n	800a7b2 <DbgTraceWrite+0x92>
  {
    chars_written = bufSize;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800a766:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	b29a      	uxth	r2, r3
 800a76c:	2301      	movs	r3, #1
 800a76e:	68b9      	ldr	r1, [r7, #8]
 800a770:	4812      	ldr	r0, [pc, #72]	; (800a7bc <DbgTraceWrite+0x9c>)
 800a772:	f000 f937 	bl	800a9e4 <CircularQueue_Add>
 800a776:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d014      	beq.n	800a7a8 <DbgTraceWrite+0x88>
 800a77e:	4b10      	ldr	r3, [pc, #64]	; (800a7c0 <DbgTraceWrite+0xa0>)
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	b2db      	uxtb	r3, r3
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00f      	beq.n	800a7a8 <DbgTraceWrite+0x88>
    {
      DbgTracePeripheralReady = RESET;
 800a788:	4b0d      	ldr	r3, [pc, #52]	; (800a7c0 <DbgTraceWrite+0xa0>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	701a      	strb	r2, [r3, #0]
 800a78e:	6a3b      	ldr	r3, [r7, #32]
 800a790:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	f383 8810 	msr	PRIMASK, r3
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	4a09      	ldr	r2, [pc, #36]	; (800a7c4 <DbgTraceWrite+0xa4>)
 800a79e:	4619      	mov	r1, r3
 800a7a0:	69f8      	ldr	r0, [r7, #28]
 800a7a2:	f7f6 fcc0 	bl	8001126 <DbgOutputTraces>
 800a7a6:	e004      	b.n	800a7b2 <DbgTraceWrite+0x92>
 800a7a8:	6a3b      	ldr	r3, [r7, #32]
 800a7aa:	613b      	str	r3, [r7, #16]
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	f383 8810 	msr	PRIMASK, r3
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800a7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3728      	adds	r7, #40	; 0x28
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	20000310 	.word	0x20000310
 800a7c0:	2000000d 	.word	0x2000000d
 800a7c4:	0800a669 	.word	0x0800a669

0800a7c8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a7d2:	4b0f      	ldr	r3, [pc, #60]	; (800a810 <OTP_Read+0x48>)
 800a7d4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a7d6:	e002      	b.n	800a7de <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	3b08      	subs	r3, #8
 800a7dc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	3307      	adds	r3, #7
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	79fa      	ldrb	r2, [r7, #7]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d003      	beq.n	800a7f2 <OTP_Read+0x2a>
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	4a09      	ldr	r2, [pc, #36]	; (800a814 <OTP_Read+0x4c>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d1f2      	bne.n	800a7d8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	3307      	adds	r3, #7
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	79fa      	ldrb	r2, [r7, #7]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d001      	beq.n	800a802 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a7fe:	2300      	movs	r3, #0
 800a800:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a802:	68fb      	ldr	r3, [r7, #12]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr
 800a810:	1fff73f8 	.word	0x1fff73f8
 800a814:	1fff7000 	.word	0x1fff7000

0800a818 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	605a      	str	r2, [r3, #4]
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a838:	b480      	push	{r7}
 800a83a:	b087      	sub	sp, #28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a840:	f3ef 8310 	mrs	r3, PRIMASK
 800a844:	60fb      	str	r3, [r7, #12]
  return(result);
 800a846:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a848:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a84a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	429a      	cmp	r2, r3
 800a854:	d102      	bne.n	800a85c <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800a856:	2301      	movs	r3, #1
 800a858:	75fb      	strb	r3, [r7, #23]
 800a85a:	e001      	b.n	800a860 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800a85c:	2300      	movs	r3, #0
 800a85e:	75fb      	strb	r3, [r7, #23]
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a86a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	371c      	adds	r7, #28
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a878:	b480      	push	{r7}
 800a87a:	b087      	sub	sp, #28
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a882:	f3ef 8310 	mrs	r3, PRIMASK
 800a886:	60fb      	str	r3, [r7, #12]
  return(result);
 800a888:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a88a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a88c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	683a      	ldr	r2, [r7, #0]
 800a8a0:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	683a      	ldr	r2, [r7, #0]
 800a8a8:	605a      	str	r2, [r3, #4]
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a8b4:	bf00      	nop
 800a8b6:	371c      	adds	r7, #28
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b087      	sub	sp, #28
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8ca:	f3ef 8310 	mrs	r3, PRIMASK
 800a8ce:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a8d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8d4:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	685a      	ldr	r2, [r3, #4]
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	601a      	str	r2, [r3, #0]
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a8fc:	bf00      	nop
 800a8fe:	371c      	adds	r7, #28
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a908:	b480      	push	{r7}
 800a90a:	b087      	sub	sp, #28
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a910:	f3ef 8310 	mrs	r3, PRIMASK
 800a914:	60fb      	str	r3, [r7, #12]
  return(result);
 800a916:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a918:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a91a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	6812      	ldr	r2, [r2, #0]
 800a924:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	6852      	ldr	r2, [r2, #4]
 800a92e:	605a      	str	r2, [r3, #4]
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a93a:	bf00      	nop
 800a93c:	371c      	adds	r7, #28
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b086      	sub	sp, #24
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
 800a94e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a950:	f3ef 8310 	mrs	r3, PRIMASK
 800a954:	60fb      	str	r3, [r7, #12]
  return(result);
 800a956:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a958:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a95a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4618      	mov	r0, r3
 800a96a:	f7ff ffcd 	bl	800a908 <LST_remove_node>
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a978:	bf00      	nop
 800a97a:	3718      	adds	r7, #24
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	607a      	str	r2, [r7, #4]
 800a98c:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	887a      	ldrh	r2, [r7, #2]
 800a9b6:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	7e3a      	ldrb	r2, [r7, #24]
 800a9bc:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800a9be:	7e3b      	ldrb	r3, [r7, #24]
 800a9c0:	f003 0302 	and.w	r3, r3, #2
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d006      	beq.n	800a9d6 <CircularQueue_Init+0x56>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	891b      	ldrh	r3, [r3, #8]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d002      	beq.n	800a9d6 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800a9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d4:	e000      	b.n	800a9d8 <CircularQueue_Init+0x58>
  }
  return 0;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3714      	adds	r7, #20
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b08e      	sub	sp, #56	; 0x38
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	603b      	str	r3, [r7, #0]
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800aa00:	2300      	movs	r3, #0
 800aa02:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa04:	2300      	movs	r3, #0
 800aa06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800aa08:	2300      	movs	r3, #0
 800aa0a:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	891b      	ldrh	r3, [r3, #8]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d101      	bne.n	800aa1c <CircularQueue_Add+0x38>
 800aa18:	2302      	movs	r3, #2
 800aa1a:	e000      	b.n	800aa1e <CircularQueue_Add+0x3a>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	695b      	ldr	r3, [r3, #20]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d02a      	beq.n	800aa7e <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	891b      	ldrh	r3, [r3, #8]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d123      	bne.n	800aa78 <CircularQueue_Add+0x94>
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	691b      	ldr	r3, [r3, #16]
 800aa38:	4413      	add	r3, r2
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	b29a      	uxth	r2, r3
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6819      	ldr	r1, [r3, #0]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	691b      	ldr	r3, [r3, #16]
 800aa46:	1c58      	adds	r0, r3, #1
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	4298      	cmp	r0, r3
 800aa4e:	d306      	bcc.n	800aa5e <CircularQueue_Add+0x7a>
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6918      	ldr	r0, [r3, #16]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	1ac3      	subs	r3, r0, r3
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	e002      	b.n	800aa64 <CircularQueue_Add+0x80>
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	3301      	adds	r3, #1
 800aa64:	440b      	add	r3, r1
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	021b      	lsls	r3, r3, #8
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	4413      	add	r3, r2
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	3302      	adds	r3, #2
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	e001      	b.n	800aa7c <CircularQueue_Add+0x98>
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	891b      	ldrh	r3, [r3, #8]
 800aa7c:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	891b      	ldrh	r3, [r3, #8]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d002      	beq.n	800aa8c <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	891b      	ldrh	r3, [r3, #8]
 800aa8a:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	691a      	ldr	r2, [r3, #16]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d307      	bcc.n	800aaa8 <CircularQueue_Add+0xc4>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	685a      	ldr	r2, [r3, #4]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6919      	ldr	r1, [r3, #16]
 800aaa0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aaa2:	440b      	add	r3, r1
 800aaa4:	1ad3      	subs	r3, r2, r3
 800aaa6:	e000      	b.n	800aaaa <CircularQueue_Add+0xc6>
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800aaac:	88fa      	ldrh	r2, [r7, #6]
 800aaae:	7ffb      	ldrb	r3, [r7, #31]
 800aab0:	4413      	add	r3, r2
 800aab2:	461a      	mov	r2, r3
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	fb03 f302 	mul.w	r3, r3, r2
 800aaba:	69ba      	ldr	r2, [r7, #24]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d80b      	bhi.n	800aad8 <CircularQueue_Add+0xf4>
 800aac0:	88fa      	ldrh	r2, [r7, #6]
 800aac2:	7ffb      	ldrb	r3, [r7, #31]
 800aac4:	4413      	add	r3, r2
 800aac6:	461a      	mov	r2, r3
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	fbb3 f1f2 	udiv	r1, r3, r2
 800aace:	fb02 f201 	mul.w	r2, r2, r1
 800aad2:	1a9b      	subs	r3, r3, r2
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	e000      	b.n	800aada <CircularQueue_Add+0xf6>
 800aad8:	2300      	movs	r3, #0
 800aada:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800aadc:	7dfa      	ldrb	r2, [r7, #23]
 800aade:	7ffb      	ldrb	r3, [r7, #31]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	bf8c      	ite	hi
 800aae4:	2301      	movhi	r3, #1
 800aae6:	2300      	movls	r3, #0
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800aaec:	7fbb      	ldrb	r3, [r7, #30]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d008      	beq.n	800ab04 <CircularQueue_Add+0x120>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	7f1b      	ldrb	r3, [r3, #28]
 800aaf6:	f003 0301 	and.w	r3, r3, #1
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d002      	beq.n	800ab04 <CircularQueue_Add+0x120>
 800aafe:	7dfb      	ldrb	r3, [r7, #23]
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	e000      	b.n	800ab06 <CircularQueue_Add+0x122>
 800ab04:	8bbb      	ldrh	r3, [r7, #28]
 800ab06:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800ab08:	7fbb      	ldrb	r3, [r7, #30]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d008      	beq.n	800ab20 <CircularQueue_Add+0x13c>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	7f1b      	ldrb	r3, [r3, #28]
 800ab12:	f003 0302 	and.w	r3, r3, #2
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d002      	beq.n	800ab20 <CircularQueue_Add+0x13c>
 800ab1a:	7ffb      	ldrb	r3, [r7, #31]
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	e000      	b.n	800ab22 <CircularQueue_Add+0x13e>
 800ab20:	8bbb      	ldrh	r3, [r7, #28]
 800ab22:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800ab24:	88fb      	ldrh	r3, [r7, #6]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f000 817e 	beq.w	800ae28 <CircularQueue_Add+0x444>
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	695a      	ldr	r2, [r3, #20]
 800ab30:	88f9      	ldrh	r1, [r7, #6]
 800ab32:	7ffb      	ldrb	r3, [r7, #31]
 800ab34:	440b      	add	r3, r1
 800ab36:	4619      	mov	r1, r3
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	fb03 f301 	mul.w	r3, r3, r1
 800ab3e:	441a      	add	r2, r3
 800ab40:	8bbb      	ldrh	r3, [r7, #28]
 800ab42:	441a      	add	r2, r3
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	f200 816d 	bhi.w	800ae28 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800ab4e:	2300      	movs	r3, #0
 800ab50:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab52:	e14a      	b.n	800adea <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	691a      	ldr	r2, [r3, #16]
 800ab58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab5a:	441a      	add	r2, r3
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d307      	bcc.n	800ab74 <CircularQueue_Add+0x190>
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	691a      	ldr	r2, [r3, #16]
 800ab68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab6a:	441a      	add	r2, r3
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	1ad3      	subs	r3, r2, r3
 800ab72:	e003      	b.n	800ab7c <CircularQueue_Add+0x198>
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	691a      	ldr	r2, [r3, #16]
 800ab78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab7a:	4413      	add	r3, r2
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	891b      	ldrh	r3, [r3, #8]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d130      	bne.n	800abf0 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab94:	1c59      	adds	r1, r3, #1
 800ab96:	6339      	str	r1, [r7, #48]	; 0x30
 800ab98:	4413      	add	r3, r2
 800ab9a:	88fa      	ldrh	r2, [r7, #6]
 800ab9c:	b2d2      	uxtb	r2, r2
 800ab9e:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d304      	bcc.n	800abb4 <CircularQueue_Add+0x1d0>
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	e000      	b.n	800abb6 <CircularQueue_Add+0x1d2>
 800abb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb6:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800abb8:	88fb      	ldrh	r3, [r7, #6]
 800abba:	0a1b      	lsrs	r3, r3, #8
 800abbc:	b298      	uxth	r0, r3
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc4:	1c59      	adds	r1, r3, #1
 800abc6:	6339      	str	r1, [r7, #48]	; 0x30
 800abc8:	4413      	add	r3, r2
 800abca:	b2c2      	uxtb	r2, r0
 800abcc:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d304      	bcc.n	800abe2 <CircularQueue_Add+0x1fe>
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abde:	1ad3      	subs	r3, r2, r3
 800abe0:	e000      	b.n	800abe4 <CircularQueue_Add+0x200>
 800abe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe4:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	695b      	ldr	r3, [r3, #20]
 800abea:	1c9a      	adds	r2, r3, #2
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800abf0:	88fa      	ldrh	r2, [r7, #6]
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	6859      	ldr	r1, [r3, #4]
 800abf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf8:	1acb      	subs	r3, r1, r3
 800abfa:	4293      	cmp	r3, r2
 800abfc:	bf28      	it	cs
 800abfe:	4613      	movcs	r3, r2
 800ac00:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800ac02:	88fb      	ldrh	r3, [r7, #6]
 800ac04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d007      	beq.n	800ac1a <CircularQueue_Add+0x236>
 800ac0a:	88fb      	ldrh	r3, [r7, #6]
 800ac0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d225      	bcs.n	800ac5e <CircularQueue_Add+0x27a>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	7f1b      	ldrb	r3, [r3, #28]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d121      	bne.n	800ac5e <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac20:	18d0      	adds	r0, r2, r3
 800ac22:	88fb      	ldrh	r3, [r7, #6]
 800ac24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac26:	fb02 f303 	mul.w	r3, r2, r3
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac30:	4619      	mov	r1, r3
 800ac32:	f006 fb3d 	bl	80112b0 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	695a      	ldr	r2, [r3, #20]
 800ac3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3c:	441a      	add	r2, r3
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800ac42:	2300      	movs	r3, #0
 800ac44:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800ac46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac48:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800ac4a:	88fa      	ldrh	r2, [r7, #6]
 800ac4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4e:	1ad3      	subs	r3, r2, r3
 800ac50:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800ac52:	7ffb      	ldrb	r3, [r7, #31]
 800ac54:	b29a      	uxth	r2, r3
 800ac56:	88fb      	ldrh	r3, [r7, #6]
 800ac58:	4413      	add	r3, r2
 800ac5a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ac5c:	e0a4      	b.n	800ada8 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800ac5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 80a1 	beq.w	800ada8 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	7f1b      	ldrb	r3, [r3, #28]
 800ac6a:	f003 0301 	and.w	r3, r3, #1
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d03a      	beq.n	800ace8 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	891b      	ldrh	r3, [r3, #8]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d10d      	bne.n	800ac96 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac80:	3b02      	subs	r3, #2
 800ac82:	4413      	add	r3, r2
 800ac84:	22ff      	movs	r2, #255	; 0xff
 800ac86:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	4413      	add	r3, r2
 800ac92:	22ff      	movs	r2, #255	; 0xff
 800ac94:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	695a      	ldr	r2, [r3, #20]
 800ac9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9c:	441a      	add	r2, r3
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800aca2:	2300      	movs	r3, #0
 800aca4:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800aca6:	88fb      	ldrh	r3, [r7, #6]
 800aca8:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800acaa:	2300      	movs	r3, #0
 800acac:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	891b      	ldrh	r3, [r3, #8]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d16f      	bne.n	800ad96 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbc:	1c59      	adds	r1, r3, #1
 800acbe:	6339      	str	r1, [r7, #48]	; 0x30
 800acc0:	4413      	add	r3, r2
 800acc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acc4:	b2d2      	uxtb	r2, r2
 800acc6:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800acc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acca:	0a18      	lsrs	r0, r3, #8
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd2:	1c59      	adds	r1, r3, #1
 800acd4:	6339      	str	r1, [r7, #48]	; 0x30
 800acd6:	4413      	add	r3, r2
 800acd8:	b2c2      	uxtb	r2, r0
 800acda:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	695b      	ldr	r3, [r3, #20]
 800ace0:	1c9a      	adds	r2, r3, #2
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	615a      	str	r2, [r3, #20]
 800ace6:	e056      	b.n	800ad96 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	7f1b      	ldrb	r3, [r3, #28]
 800acec:	f003 0302 	and.w	r3, r3, #2
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d050      	beq.n	800ad96 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	891b      	ldrh	r3, [r3, #8]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d14a      	bne.n	800ad92 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad02:	3b02      	subs	r3, #2
 800ad04:	4413      	add	r3, r2
 800ad06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad08:	b2d2      	uxtb	r2, r2
 800ad0a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ad0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0e:	0a19      	lsrs	r1, r3, #8
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad16:	3b01      	subs	r3, #1
 800ad18:	4413      	add	r3, r2
 800ad1a:	b2ca      	uxtb	r2, r1
 800ad1c:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad24:	18d0      	adds	r0, r2, r3
 800ad26:	88fb      	ldrh	r3, [r7, #6]
 800ad28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad2a:	fb02 f303 	mul.w	r3, r2, r3
 800ad2e:	68ba      	ldr	r2, [r7, #8]
 800ad30:	4413      	add	r3, r2
 800ad32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad34:	4619      	mov	r1, r3
 800ad36:	f006 fabb 	bl	80112b0 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	695a      	ldr	r2, [r3, #20]
 800ad3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad40:	441a      	add	r2, r3
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800ad46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad48:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800ad4a:	88fa      	ldrh	r2, [r7, #6]
 800ad4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	699b      	ldr	r3, [r3, #24]
 800ad56:	1c5a      	adds	r2, r3, #1
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad66:	1c59      	adds	r1, r3, #1
 800ad68:	6339      	str	r1, [r7, #48]	; 0x30
 800ad6a:	4413      	add	r3, r2
 800ad6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad6e:	b2d2      	uxtb	r2, r2
 800ad70:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ad72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad74:	0a18      	lsrs	r0, r3, #8
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7c:	1c59      	adds	r1, r3, #1
 800ad7e:	6339      	str	r1, [r7, #48]	; 0x30
 800ad80:	4413      	add	r3, r2
 800ad82:	b2c2      	uxtb	r2, r0
 800ad84:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	1c9a      	adds	r2, r3, #2
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	615a      	str	r2, [r3, #20]
 800ad90:	e001      	b.n	800ad96 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800ad92:	2300      	movs	r3, #0
 800ad94:	e049      	b.n	800ae2a <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800ad96:	7ffb      	ldrb	r3, [r7, #31]
 800ad98:	b29a      	uxth	r2, r3
 800ad9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	4413      	add	r3, r2
 800ada0:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800ada8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d015      	beq.n	800adda <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb4:	18d0      	adds	r0, r2, r3
 800adb6:	88fb      	ldrh	r3, [r7, #6]
 800adb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adba:	fb02 f203 	mul.w	r2, r2, r3
 800adbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc0:	4413      	add	r3, r2
 800adc2:	68ba      	ldr	r2, [r7, #8]
 800adc4:	4413      	add	r3, r2
 800adc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adc8:	4619      	mov	r1, r3
 800adca:	f006 fa71 	bl	80112b0 <memcpy>
        q->byteCount += NbBytesToCopy;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	695a      	ldr	r2, [r3, #20]
 800add2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add4:	441a      	add	r2, r3
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	699b      	ldr	r3, [r3, #24]
 800adde:	1c5a      	adds	r2, r3, #1
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800ade4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade6:	3301      	adds	r3, #1
 800ade8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	429a      	cmp	r2, r3
 800adf0:	f4ff aeb0 	bcc.w	800ab54 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	6919      	ldr	r1, [r3, #16]
 800adfc:	7ffb      	ldrb	r3, [r7, #31]
 800adfe:	4419      	add	r1, r3
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	4299      	cmp	r1, r3
 800ae06:	d307      	bcc.n	800ae18 <CircularQueue_Add+0x434>
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6919      	ldr	r1, [r3, #16]
 800ae0c:	7ffb      	ldrb	r3, [r7, #31]
 800ae0e:	4419      	add	r1, r3
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	1acb      	subs	r3, r1, r3
 800ae16:	e003      	b.n	800ae20 <CircularQueue_Add+0x43c>
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6919      	ldr	r1, [r3, #16]
 800ae1c:	7ffb      	ldrb	r3, [r7, #31]
 800ae1e:	440b      	add	r3, r1
 800ae20:	4413      	add	r3, r2
 800ae22:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800ae24:	6a3b      	ldr	r3, [r7, #32]
 800ae26:	e000      	b.n	800ae2a <CircularQueue_Add+0x446>
    return NULL;
 800ae28:	2300      	movs	r3, #0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3738      	adds	r7, #56	; 0x38
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800ae32:	b480      	push	{r7}
 800ae34:	b085      	sub	sp, #20
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
 800ae3a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 800ae40:	2300      	movs	r3, #0
 800ae42:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	891b      	ldrh	r3, [r3, #8]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d101      	bne.n	800ae50 <CircularQueue_Remove+0x1e>
 800ae4c:	2302      	movs	r3, #2
 800ae4e:	e000      	b.n	800ae52 <CircularQueue_Remove+0x20>
 800ae50:	2300      	movs	r3, #0
 800ae52:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2200      	movs	r2, #0
 800ae58:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	695b      	ldr	r3, [r3, #20]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	f000 80d4 	beq.w	800b00c <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	891b      	ldrh	r3, [r3, #8]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d121      	bne.n	800aeb0 <CircularQueue_Remove+0x7e>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	4413      	add	r3, r2
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	b29a      	uxth	r2, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6819      	ldr	r1, [r3, #0]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	1c58      	adds	r0, r3, #1
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	4298      	cmp	r0, r3
 800ae8a:	d306      	bcc.n	800ae9a <CircularQueue_Remove+0x68>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	68d8      	ldr	r0, [r3, #12]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	1ac3      	subs	r3, r0, r3
 800ae96:	3301      	adds	r3, #1
 800ae98:	e002      	b.n	800aea0 <CircularQueue_Remove+0x6e>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	440b      	add	r3, r1
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	021b      	lsls	r3, r3, #8
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	4413      	add	r3, r2
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	e001      	b.n	800aeb4 <CircularQueue_Remove+0x82>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	891b      	ldrh	r3, [r3, #8]
 800aeb4:	683a      	ldr	r2, [r7, #0]
 800aeb6:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	7f1b      	ldrb	r3, [r3, #28]
 800aebc:	f003 0301 	and.w	r3, r3, #1
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d059      	beq.n	800af78 <CircularQueue_Remove+0x146>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	7f1b      	ldrb	r3, [r3, #28]
 800aec8:	f003 0302 	and.w	r3, r3, #2
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d153      	bne.n	800af78 <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	881b      	ldrh	r3, [r3, #0]
 800aed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d103      	bne.n	800aee4 <CircularQueue_Remove+0xb2>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	891b      	ldrh	r3, [r3, #8]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d012      	beq.n	800af0a <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	68da      	ldr	r2, [r3, #12]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d943      	bls.n	800af78 <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	891b      	ldrh	r3, [r3, #8]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d03f      	beq.n	800af78 <CircularQueue_Remove+0x146>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	685a      	ldr	r2, [r3, #4]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	8912      	ldrh	r2, [r2, #8]
 800af06:	4293      	cmp	r3, r2
 800af08:	d236      	bcs.n	800af78 <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	695a      	ldr	r2, [r3, #20]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	68d9      	ldr	r1, [r3, #12]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	1acb      	subs	r3, r1, r3
 800af18:	441a      	add	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	891b      	ldrh	r3, [r3, #8]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d121      	bne.n	800af70 <CircularQueue_Remove+0x13e>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	4413      	add	r3, r2
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	b29a      	uxth	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6819      	ldr	r1, [r3, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	1c58      	adds	r0, r3, #1
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	4298      	cmp	r0, r3
 800af4a:	d306      	bcc.n	800af5a <CircularQueue_Remove+0x128>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	68d8      	ldr	r0, [r3, #12]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	1ac3      	subs	r3, r0, r3
 800af56:	3301      	adds	r3, #1
 800af58:	e002      	b.n	800af60 <CircularQueue_Remove+0x12e>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	3301      	adds	r3, #1
 800af60:	440b      	add	r3, r1
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	b29b      	uxth	r3, r3
 800af66:	021b      	lsls	r3, r3, #8
 800af68:	b29b      	uxth	r3, r3
 800af6a:	4413      	add	r3, r2
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	e001      	b.n	800af74 <CircularQueue_Remove+0x142>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	891b      	ldrh	r3, [r3, #8]
 800af74:	683a      	ldr	r2, [r7, #0]
 800af76:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	68d9      	ldr	r1, [r3, #12]
 800af80:	7afb      	ldrb	r3, [r7, #11]
 800af82:	4419      	add	r1, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	4299      	cmp	r1, r3
 800af8a:	d307      	bcc.n	800af9c <CircularQueue_Remove+0x16a>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	68d9      	ldr	r1, [r3, #12]
 800af90:	7afb      	ldrb	r3, [r7, #11]
 800af92:	4419      	add	r1, r3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	1acb      	subs	r3, r1, r3
 800af9a:	e003      	b.n	800afa4 <CircularQueue_Remove+0x172>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	68d9      	ldr	r1, [r3, #12]
 800afa0:	7afb      	ldrb	r3, [r7, #11]
 800afa2:	440b      	add	r3, r1
 800afa4:	4413      	add	r3, r2
 800afa6:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	695b      	ldr	r3, [r3, #20]
 800afac:	683a      	ldr	r2, [r7, #0]
 800afae:	8812      	ldrh	r2, [r2, #0]
 800afb0:	4611      	mov	r1, r2
 800afb2:	7afa      	ldrb	r2, [r7, #11]
 800afb4:	440a      	add	r2, r1
 800afb6:	1a9a      	subs	r2, r3, r2
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	695b      	ldr	r3, [r3, #20]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d01e      	beq.n	800b002 <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	683a      	ldr	r2, [r7, #0]
 800afca:	8812      	ldrh	r2, [r2, #0]
 800afcc:	441a      	add	r2, r3
 800afce:	7afb      	ldrb	r3, [r7, #11]
 800afd0:	441a      	add	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d30a      	bcc.n	800aff0 <CircularQueue_Remove+0x1be>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	8812      	ldrh	r2, [r2, #0]
 800afe2:	441a      	add	r2, r3
 800afe4:	7afb      	ldrb	r3, [r7, #11]
 800afe6:	441a      	add	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	1ad3      	subs	r3, r2, r3
 800afee:	e006      	b.n	800affe <CircularQueue_Remove+0x1cc>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	683a      	ldr	r2, [r7, #0]
 800aff6:	8812      	ldrh	r2, [r2, #0]
 800aff8:	441a      	add	r2, r3
 800affa:	7afb      	ldrb	r3, [r7, #11]
 800affc:	4413      	add	r3, r2
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	699b      	ldr	r3, [r3, #24]
 800b006:	1e5a      	subs	r2, r3, #1
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 800b00c:	68fb      	ldr	r3, [r7, #12]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3714      	adds	r7, #20
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr

0800b01a <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800b01a:	b480      	push	{r7}
 800b01c:	b087      	sub	sp, #28
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
 800b022:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b024:	2300      	movs	r3, #0
 800b026:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 800b028:	2300      	movs	r3, #0
 800b02a:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	891b      	ldrh	r3, [r3, #8]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d101      	bne.n	800b038 <CircularQueue_Sense+0x1e>
 800b034:	2302      	movs	r3, #2
 800b036:	e000      	b.n	800b03a <CircularQueue_Sense+0x20>
 800b038:	2300      	movs	r3, #0
 800b03a:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	2200      	movs	r2, #0
 800b040:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 800b042:	2300      	movs	r3, #0
 800b044:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	695b      	ldr	r3, [r3, #20]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f000 8093 	beq.w	800b176 <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	891b      	ldrh	r3, [r3, #8]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d121      	bne.n	800b0a2 <CircularQueue_Sense+0x88>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	4413      	add	r3, r2
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6819      	ldr	r1, [r3, #0]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	1c58      	adds	r0, r3, #1
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	4298      	cmp	r0, r3
 800b07c:	d306      	bcc.n	800b08c <CircularQueue_Sense+0x72>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	68d8      	ldr	r0, [r3, #12]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	1ac3      	subs	r3, r0, r3
 800b088:	3301      	adds	r3, #1
 800b08a:	e002      	b.n	800b092 <CircularQueue_Sense+0x78>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	3301      	adds	r3, #1
 800b092:	440b      	add	r3, r1
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	b29b      	uxth	r3, r3
 800b098:	021b      	lsls	r3, r3, #8
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	4413      	add	r3, r2
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	e001      	b.n	800b0a6 <CircularQueue_Sense+0x8c>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	891b      	ldrh	r3, [r3, #8]
 800b0a6:	683a      	ldr	r2, [r7, #0]
 800b0a8:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	7f1b      	ldrb	r3, [r3, #28]
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d04a      	beq.n	800b14c <CircularQueue_Sense+0x132>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	7f1b      	ldrb	r3, [r3, #28]
 800b0ba:	f003 0302 	and.w	r3, r3, #2
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d144      	bne.n	800b14c <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	881b      	ldrh	r3, [r3, #0]
 800b0c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d103      	bne.n	800b0d6 <CircularQueue_Sense+0xbc>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	891b      	ldrh	r3, [r3, #8]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d012      	beq.n	800b0fc <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	68da      	ldr	r2, [r3, #12]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d934      	bls.n	800b14c <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	891b      	ldrh	r3, [r3, #8]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d030      	beq.n	800b14c <CircularQueue_Sense+0x132>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	685a      	ldr	r2, [r3, #4]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	1ad3      	subs	r3, r2, r3
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	8912      	ldrh	r2, [r2, #8]
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d227      	bcs.n	800b14c <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	891b      	ldrh	r3, [r3, #8]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d11d      	bne.n	800b144 <CircularQueue_Sense+0x12a>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	4413      	add	r3, r2
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	b29a      	uxth	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6819      	ldr	r1, [r3, #0]
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	1c58      	adds	r0, r3, #1
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	4298      	cmp	r0, r3
 800b122:	d305      	bcc.n	800b130 <CircularQueue_Sense+0x116>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	6938      	ldr	r0, [r7, #16]
 800b12a:	1ac3      	subs	r3, r0, r3
 800b12c:	3301      	adds	r3, #1
 800b12e:	e001      	b.n	800b134 <CircularQueue_Sense+0x11a>
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	3301      	adds	r3, #1
 800b134:	440b      	add	r3, r1
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	b29b      	uxth	r3, r3
 800b13a:	021b      	lsls	r3, r3, #8
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	4413      	add	r3, r2
 800b140:	b29b      	uxth	r3, r3
 800b142:	e001      	b.n	800b148 <CircularQueue_Sense+0x12e>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	891b      	ldrh	r3, [r3, #8]
 800b148:	683a      	ldr	r2, [r7, #0]
 800b14a:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	7bf9      	ldrb	r1, [r7, #15]
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	4419      	add	r1, r3
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	4299      	cmp	r1, r3
 800b15c:	d306      	bcc.n	800b16c <CircularQueue_Sense+0x152>
 800b15e:	7bf9      	ldrb	r1, [r7, #15]
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	4419      	add	r1, r3
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	1acb      	subs	r3, r1, r3
 800b16a:	e002      	b.n	800b172 <CircularQueue_Sense+0x158>
 800b16c:	7bf9      	ldrb	r1, [r7, #15]
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	440b      	add	r3, r1
 800b172:	4413      	add	r3, r2
 800b174:	617b      	str	r3, [r7, #20]
  }
  return x;
 800b176:	697b      	ldr	r3, [r7, #20]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	371c      	adds	r7, #28
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b184:	b480      	push	{r7}
 800b186:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800b188:	bf00      	nop
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr
	...

0800b194 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b19a:	f3ef 8305 	mrs	r3, IPSR
 800b19e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b1a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d10f      	bne.n	800b1c6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1a6:	f3ef 8310 	mrs	r3, PRIMASK
 800b1aa:	607b      	str	r3, [r7, #4]
  return(result);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d105      	bne.n	800b1be <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b1b2:	f3ef 8311 	mrs	r3, BASEPRI
 800b1b6:	603b      	str	r3, [r7, #0]
  return(result);
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d007      	beq.n	800b1ce <osKernelInitialize+0x3a>
 800b1be:	4b0e      	ldr	r3, [pc, #56]	; (800b1f8 <osKernelInitialize+0x64>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d103      	bne.n	800b1ce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b1c6:	f06f 0305 	mvn.w	r3, #5
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	e00c      	b.n	800b1e8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b1ce:	4b0a      	ldr	r3, [pc, #40]	; (800b1f8 <osKernelInitialize+0x64>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d105      	bne.n	800b1e2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b1d6:	4b08      	ldr	r3, [pc, #32]	; (800b1f8 <osKernelInitialize+0x64>)
 800b1d8:	2201      	movs	r2, #1
 800b1da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	60fb      	str	r3, [r7, #12]
 800b1e0:	e002      	b.n	800b1e8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b1e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b1e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3714      	adds	r7, #20
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	20001330 	.word	0x20001330

0800b1fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b202:	f3ef 8305 	mrs	r3, IPSR
 800b206:	60bb      	str	r3, [r7, #8]
  return(result);
 800b208:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d10f      	bne.n	800b22e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b20e:	f3ef 8310 	mrs	r3, PRIMASK
 800b212:	607b      	str	r3, [r7, #4]
  return(result);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d105      	bne.n	800b226 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b21a:	f3ef 8311 	mrs	r3, BASEPRI
 800b21e:	603b      	str	r3, [r7, #0]
  return(result);
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d007      	beq.n	800b236 <osKernelStart+0x3a>
 800b226:	4b0f      	ldr	r3, [pc, #60]	; (800b264 <osKernelStart+0x68>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d103      	bne.n	800b236 <osKernelStart+0x3a>
    stat = osErrorISR;
 800b22e:	f06f 0305 	mvn.w	r3, #5
 800b232:	60fb      	str	r3, [r7, #12]
 800b234:	e010      	b.n	800b258 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b236:	4b0b      	ldr	r3, [pc, #44]	; (800b264 <osKernelStart+0x68>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d109      	bne.n	800b252 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b23e:	f7ff ffa1 	bl	800b184 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b242:	4b08      	ldr	r3, [pc, #32]	; (800b264 <osKernelStart+0x68>)
 800b244:	2202      	movs	r2, #2
 800b246:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b248:	f001 ffd8 	bl	800d1fc <vTaskStartScheduler>
      stat = osOK;
 800b24c:	2300      	movs	r3, #0
 800b24e:	60fb      	str	r3, [r7, #12]
 800b250:	e002      	b.n	800b258 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800b252:	f04f 33ff 	mov.w	r3, #4294967295
 800b256:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b258:	68fb      	ldr	r3, [r7, #12]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	20001330 	.word	0x20001330

0800b268 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b268:	b580      	push	{r7, lr}
 800b26a:	b090      	sub	sp, #64	; 0x40
 800b26c:	af04      	add	r7, sp, #16
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b274:	2300      	movs	r3, #0
 800b276:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b278:	f3ef 8305 	mrs	r3, IPSR
 800b27c:	61fb      	str	r3, [r7, #28]
  return(result);
 800b27e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b280:	2b00      	cmp	r3, #0
 800b282:	f040 8090 	bne.w	800b3a6 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b286:	f3ef 8310 	mrs	r3, PRIMASK
 800b28a:	61bb      	str	r3, [r7, #24]
  return(result);
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d105      	bne.n	800b29e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b292:	f3ef 8311 	mrs	r3, BASEPRI
 800b296:	617b      	str	r3, [r7, #20]
  return(result);
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d003      	beq.n	800b2a6 <osThreadNew+0x3e>
 800b29e:	4b44      	ldr	r3, [pc, #272]	; (800b3b0 <osThreadNew+0x148>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b02      	cmp	r3, #2
 800b2a4:	d07f      	beq.n	800b3a6 <osThreadNew+0x13e>
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d07c      	beq.n	800b3a6 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800b2ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2b0:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b2b2:	2318      	movs	r3, #24
 800b2b4:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800b2ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b2be:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d045      	beq.n	800b352 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d002      	beq.n	800b2d4 <osThreadNew+0x6c>
        name = attr->name;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	699b      	ldr	r3, [r3, #24]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d002      	beq.n	800b2e2 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	699b      	ldr	r3, [r3, #24]
 800b2e0:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d008      	beq.n	800b2fa <osThreadNew+0x92>
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ea:	2b38      	cmp	r3, #56	; 0x38
 800b2ec:	d805      	bhi.n	800b2fa <osThreadNew+0x92>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	f003 0301 	and.w	r3, r3, #1
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d001      	beq.n	800b2fe <osThreadNew+0x96>
        return (NULL);
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	e054      	b.n	800b3a8 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d003      	beq.n	800b30e <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	695b      	ldr	r3, [r3, #20]
 800b30a:	089b      	lsrs	r3, r3, #2
 800b30c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00e      	beq.n	800b334 <osThreadNew+0xcc>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	2b5b      	cmp	r3, #91	; 0x5b
 800b31c:	d90a      	bls.n	800b334 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b322:	2b00      	cmp	r3, #0
 800b324:	d006      	beq.n	800b334 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	695b      	ldr	r3, [r3, #20]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d002      	beq.n	800b334 <osThreadNew+0xcc>
        mem = 1;
 800b32e:	2301      	movs	r3, #1
 800b330:	623b      	str	r3, [r7, #32]
 800b332:	e010      	b.n	800b356 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d10c      	bne.n	800b356 <osThreadNew+0xee>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d108      	bne.n	800b356 <osThreadNew+0xee>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	691b      	ldr	r3, [r3, #16]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d104      	bne.n	800b356 <osThreadNew+0xee>
          mem = 0;
 800b34c:	2300      	movs	r3, #0
 800b34e:	623b      	str	r3, [r7, #32]
 800b350:	e001      	b.n	800b356 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800b352:	2300      	movs	r3, #0
 800b354:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b356:	6a3b      	ldr	r3, [r7, #32]
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d110      	bne.n	800b37e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b364:	9202      	str	r2, [sp, #8]
 800b366:	9301      	str	r3, [sp, #4]
 800b368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36a:	9300      	str	r3, [sp, #0]
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b370:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f001 fd70 	bl	800ce58 <xTaskCreateStatic>
 800b378:	4603      	mov	r3, r0
 800b37a:	613b      	str	r3, [r7, #16]
 800b37c:	e013      	b.n	800b3a6 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800b37e:	6a3b      	ldr	r3, [r7, #32]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d110      	bne.n	800b3a6 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b386:	b29a      	uxth	r2, r3
 800b388:	f107 0310 	add.w	r3, r7, #16
 800b38c:	9301      	str	r3, [sp, #4]
 800b38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b390:	9300      	str	r3, [sp, #0]
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	f001 fdb8 	bl	800cf0c <xTaskCreate>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d001      	beq.n	800b3a6 <osThreadNew+0x13e>
          hTask = NULL;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b3a6:	693b      	ldr	r3, [r7, #16]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3730      	adds	r7, #48	; 0x30
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	20001330 	.word	0x20001330

0800b3b4 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b08a      	sub	sp, #40	; 0x28
 800b3b8:	af02      	add	r7, sp, #8
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d002      	beq.n	800b3ce <osThreadFlagsSet+0x1a>
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	da03      	bge.n	800b3d6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800b3ce:	f06f 0303 	mvn.w	r3, #3
 800b3d2:	60fb      	str	r3, [r7, #12]
 800b3d4:	e046      	b.n	800b464 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800b3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b3da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3dc:	f3ef 8305 	mrs	r3, IPSR
 800b3e0:	61bb      	str	r3, [r7, #24]
  return(result);
 800b3e2:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d10f      	bne.n	800b408 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3e8:	f3ef 8310 	mrs	r3, PRIMASK
 800b3ec:	617b      	str	r3, [r7, #20]
  return(result);
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d105      	bne.n	800b400 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b3f4:	f3ef 8311 	mrs	r3, BASEPRI
 800b3f8:	613b      	str	r3, [r7, #16]
  return(result);
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d024      	beq.n	800b44a <osThreadFlagsSet+0x96>
 800b400:	4b1b      	ldr	r3, [pc, #108]	; (800b470 <osThreadFlagsSet+0xbc>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b02      	cmp	r3, #2
 800b406:	d120      	bne.n	800b44a <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800b408:	2300      	movs	r3, #0
 800b40a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800b40c:	f107 0308 	add.w	r3, r7, #8
 800b410:	9300      	str	r3, [sp, #0]
 800b412:	2300      	movs	r3, #0
 800b414:	2201      	movs	r2, #1
 800b416:	6839      	ldr	r1, [r7, #0]
 800b418:	69f8      	ldr	r0, [r7, #28]
 800b41a:	f002 fe2b 	bl	800e074 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800b41e:	f107 020c 	add.w	r2, r7, #12
 800b422:	2300      	movs	r3, #0
 800b424:	9300      	str	r3, [sp, #0]
 800b426:	4613      	mov	r3, r2
 800b428:	2200      	movs	r2, #0
 800b42a:	2100      	movs	r1, #0
 800b42c:	69f8      	ldr	r0, [r7, #28]
 800b42e:	f002 fe21 	bl	800e074 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d015      	beq.n	800b464 <osThreadFlagsSet+0xb0>
 800b438:	4b0e      	ldr	r3, [pc, #56]	; (800b474 <osThreadFlagsSet+0xc0>)
 800b43a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b43e:	601a      	str	r2, [r3, #0]
 800b440:	f3bf 8f4f 	dsb	sy
 800b444:	f3bf 8f6f 	isb	sy
 800b448:	e00c      	b.n	800b464 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800b44a:	2300      	movs	r3, #0
 800b44c:	2201      	movs	r2, #1
 800b44e:	6839      	ldr	r1, [r7, #0]
 800b450:	69f8      	ldr	r0, [r7, #28]
 800b452:	f002 fd59 	bl	800df08 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800b456:	f107 030c 	add.w	r3, r7, #12
 800b45a:	2200      	movs	r2, #0
 800b45c:	2100      	movs	r1, #0
 800b45e:	69f8      	ldr	r0, [r7, #28]
 800b460:	f002 fd52 	bl	800df08 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800b464:	68fb      	ldr	r3, [r7, #12]
}
 800b466:	4618      	mov	r0, r3
 800b468:	3720      	adds	r7, #32
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	20001330 	.word	0x20001330
 800b474:	e000ed04 	.word	0xe000ed04

0800b478 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800b478:	b580      	push	{r7, lr}
 800b47a:	b08e      	sub	sp, #56	; 0x38
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b484:	f3ef 8305 	mrs	r3, IPSR
 800b488:	61fb      	str	r3, [r7, #28]
  return(result);
 800b48a:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d10f      	bne.n	800b4b0 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b490:	f3ef 8310 	mrs	r3, PRIMASK
 800b494:	61bb      	str	r3, [r7, #24]
  return(result);
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d105      	bne.n	800b4a8 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b49c:	f3ef 8311 	mrs	r3, BASEPRI
 800b4a0:	617b      	str	r3, [r7, #20]
  return(result);
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d007      	beq.n	800b4b8 <osThreadFlagsWait+0x40>
 800b4a8:	4b3c      	ldr	r3, [pc, #240]	; (800b59c <osThreadFlagsWait+0x124>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	d103      	bne.n	800b4b8 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800b4b0:	f06f 0305 	mvn.w	r3, #5
 800b4b4:	637b      	str	r3, [r7, #52]	; 0x34
 800b4b6:	e06b      	b.n	800b590 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	da03      	bge.n	800b4c6 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800b4be:	f06f 0303 	mvn.w	r3, #3
 800b4c2:	637b      	str	r3, [r7, #52]	; 0x34
 800b4c4:	e064      	b.n	800b590 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	f003 0302 	and.w	r3, r3, #2
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d002      	beq.n	800b4d6 <osThreadFlagsWait+0x5e>
      clear = 0U;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	633b      	str	r3, [r7, #48]	; 0x30
 800b4d4:	e001      	b.n	800b4da <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800b4e2:	f001 ffd1 	bl	800d488 <xTaskGetTickCount>
 800b4e6:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800b4e8:	f107 0210 	add.w	r2, r7, #16
 800b4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	f002 fcaf 	bl	800de54 <xTaskNotifyWait>
 800b4f6:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800b4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d137      	bne.n	800b56e <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800b4fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	4013      	ands	r3, r2
 800b504:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b50a:	4313      	orrs	r3, r2
 800b50c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	f003 0301 	and.w	r3, r3, #1
 800b514:	2b00      	cmp	r3, #0
 800b516:	d00c      	beq.n	800b532 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800b518:	68fa      	ldr	r2, [r7, #12]
 800b51a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b51c:	4013      	ands	r3, r2
 800b51e:	68fa      	ldr	r2, [r7, #12]
 800b520:	429a      	cmp	r2, r3
 800b522:	d032      	beq.n	800b58a <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d10f      	bne.n	800b54a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800b52a:	f06f 0302 	mvn.w	r3, #2
 800b52e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b530:	e02e      	b.n	800b590 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800b532:	68fa      	ldr	r2, [r7, #12]
 800b534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b536:	4013      	ands	r3, r2
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d128      	bne.n	800b58e <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d103      	bne.n	800b54a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800b542:	f06f 0302 	mvn.w	r3, #2
 800b546:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b548:	e022      	b.n	800b590 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800b54a:	f001 ff9d 	bl	800d488 <xTaskGetTickCount>
 800b54e:	4602      	mov	r2, r0
 800b550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b552:	1ad3      	subs	r3, r2, r3
 800b554:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800b556:	6a3a      	ldr	r2, [r7, #32]
 800b558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d902      	bls.n	800b564 <osThreadFlagsWait+0xec>
          tout  = 0;
 800b55e:	2300      	movs	r3, #0
 800b560:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b562:	e00e      	b.n	800b582 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800b564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b566:	6a3b      	ldr	r3, [r7, #32]
 800b568:	1ad3      	subs	r3, r2, r3
 800b56a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b56c:	e009      	b.n	800b582 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d103      	bne.n	800b57c <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800b574:	f06f 0302 	mvn.w	r3, #2
 800b578:	637b      	str	r3, [r7, #52]	; 0x34
 800b57a:	e002      	b.n	800b582 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800b57c:	f06f 0301 	mvn.w	r3, #1
 800b580:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800b582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1af      	bne.n	800b4e8 <osThreadFlagsWait+0x70>
 800b588:	e002      	b.n	800b590 <osThreadFlagsWait+0x118>
            break;
 800b58a:	bf00      	nop
 800b58c:	e000      	b.n	800b590 <osThreadFlagsWait+0x118>
            break;
 800b58e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800b590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b592:	4618      	mov	r0, r3
 800b594:	3738      	adds	r7, #56	; 0x38
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	20001330 	.word	0x20001330

0800b5a0 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b086      	sub	sp, #24
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5a8:	f3ef 8305 	mrs	r3, IPSR
 800b5ac:	613b      	str	r3, [r7, #16]
  return(result);
 800b5ae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10f      	bne.n	800b5d4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5b4:	f3ef 8310 	mrs	r3, PRIMASK
 800b5b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d105      	bne.n	800b5cc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b5c0:	f3ef 8311 	mrs	r3, BASEPRI
 800b5c4:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d007      	beq.n	800b5dc <osDelay+0x3c>
 800b5cc:	4b0a      	ldr	r3, [pc, #40]	; (800b5f8 <osDelay+0x58>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b02      	cmp	r3, #2
 800b5d2:	d103      	bne.n	800b5dc <osDelay+0x3c>
    stat = osErrorISR;
 800b5d4:	f06f 0305 	mvn.w	r3, #5
 800b5d8:	617b      	str	r3, [r7, #20]
 800b5da:	e007      	b.n	800b5ec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d002      	beq.n	800b5ec <osDelay+0x4c>
      vTaskDelay(ticks);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f001 fdd4 	bl	800d194 <vTaskDelay>
    }
  }

  return (stat);
 800b5ec:	697b      	ldr	r3, [r7, #20]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3718      	adds	r7, #24
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	20001330 	.word	0x20001330

0800b5fc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b08a      	sub	sp, #40	; 0x28
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b604:	2300      	movs	r3, #0
 800b606:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b608:	f3ef 8305 	mrs	r3, IPSR
 800b60c:	613b      	str	r3, [r7, #16]
  return(result);
 800b60e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800b610:	2b00      	cmp	r3, #0
 800b612:	f040 8085 	bne.w	800b720 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b616:	f3ef 8310 	mrs	r3, PRIMASK
 800b61a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d105      	bne.n	800b62e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b622:	f3ef 8311 	mrs	r3, BASEPRI
 800b626:	60bb      	str	r3, [r7, #8]
  return(result);
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d003      	beq.n	800b636 <osMutexNew+0x3a>
 800b62e:	4b3f      	ldr	r3, [pc, #252]	; (800b72c <osMutexNew+0x130>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2b02      	cmp	r3, #2
 800b634:	d074      	beq.n	800b720 <osMutexNew+0x124>
    if (attr != NULL) {
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d003      	beq.n	800b644 <osMutexNew+0x48>
      type = attr->attr_bits;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	623b      	str	r3, [r7, #32]
 800b642:	e001      	b.n	800b648 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800b644:	2300      	movs	r3, #0
 800b646:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b648:	6a3b      	ldr	r3, [r7, #32]
 800b64a:	f003 0301 	and.w	r3, r3, #1
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d002      	beq.n	800b658 <osMutexNew+0x5c>
      rmtx = 1U;
 800b652:	2301      	movs	r3, #1
 800b654:	61fb      	str	r3, [r7, #28]
 800b656:	e001      	b.n	800b65c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800b658:	2300      	movs	r3, #0
 800b65a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b65c:	6a3b      	ldr	r3, [r7, #32]
 800b65e:	f003 0308 	and.w	r3, r3, #8
 800b662:	2b00      	cmp	r3, #0
 800b664:	d15c      	bne.n	800b720 <osMutexNew+0x124>
      mem = -1;
 800b666:	f04f 33ff 	mov.w	r3, #4294967295
 800b66a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d015      	beq.n	800b69e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d006      	beq.n	800b688 <osMutexNew+0x8c>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	2b4f      	cmp	r3, #79	; 0x4f
 800b680:	d902      	bls.n	800b688 <osMutexNew+0x8c>
          mem = 1;
 800b682:	2301      	movs	r3, #1
 800b684:	61bb      	str	r3, [r7, #24]
 800b686:	e00c      	b.n	800b6a2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d108      	bne.n	800b6a2 <osMutexNew+0xa6>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d104      	bne.n	800b6a2 <osMutexNew+0xa6>
            mem = 0;
 800b698:	2300      	movs	r3, #0
 800b69a:	61bb      	str	r3, [r7, #24]
 800b69c:	e001      	b.n	800b6a2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b6a2:	69bb      	ldr	r3, [r7, #24]
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d112      	bne.n	800b6ce <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d007      	beq.n	800b6be <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	2004      	movs	r0, #4
 800b6b6:	f000 fc9c 	bl	800bff2 <xQueueCreateMutexStatic>
 800b6ba:	6278      	str	r0, [r7, #36]	; 0x24
 800b6bc:	e016      	b.n	800b6ec <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	2001      	movs	r0, #1
 800b6c6:	f000 fc94 	bl	800bff2 <xQueueCreateMutexStatic>
 800b6ca:	6278      	str	r0, [r7, #36]	; 0x24
 800b6cc:	e00e      	b.n	800b6ec <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10b      	bne.n	800b6ec <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d004      	beq.n	800b6e4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800b6da:	2004      	movs	r0, #4
 800b6dc:	f000 fc71 	bl	800bfc2 <xQueueCreateMutex>
 800b6e0:	6278      	str	r0, [r7, #36]	; 0x24
 800b6e2:	e003      	b.n	800b6ec <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800b6e4:	2001      	movs	r0, #1
 800b6e6:	f000 fc6c 	bl	800bfc2 <xQueueCreateMutex>
 800b6ea:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d00c      	beq.n	800b70c <osMutexNew+0x110>
        if (attr != NULL) {
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d003      	beq.n	800b700 <osMutexNew+0x104>
          name = attr->name;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	617b      	str	r3, [r7, #20]
 800b6fe:	e001      	b.n	800b704 <osMutexNew+0x108>
        } else {
          name = NULL;
 800b700:	2300      	movs	r3, #0
 800b702:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800b704:	6979      	ldr	r1, [r7, #20]
 800b706:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b708:	f001 fb20 	bl	800cd4c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d006      	beq.n	800b720 <osMutexNew+0x124>
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d003      	beq.n	800b720 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71a:	f043 0301 	orr.w	r3, r3, #1
 800b71e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b722:	4618      	mov	r0, r3
 800b724:	3728      	adds	r7, #40	; 0x28
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	20001330 	.word	0x20001330

0800b730 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b730:	b580      	push	{r7, lr}
 800b732:	b088      	sub	sp, #32
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f023 0301 	bic.w	r3, r3, #1
 800b740:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f003 0301 	and.w	r3, r3, #1
 800b748:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800b74a:	2300      	movs	r3, #0
 800b74c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b74e:	f3ef 8305 	mrs	r3, IPSR
 800b752:	613b      	str	r3, [r7, #16]
  return(result);
 800b754:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800b756:	2b00      	cmp	r3, #0
 800b758:	d10f      	bne.n	800b77a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b75a:	f3ef 8310 	mrs	r3, PRIMASK
 800b75e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d105      	bne.n	800b772 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b766:	f3ef 8311 	mrs	r3, BASEPRI
 800b76a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d007      	beq.n	800b782 <osMutexAcquire+0x52>
 800b772:	4b1d      	ldr	r3, [pc, #116]	; (800b7e8 <osMutexAcquire+0xb8>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2b02      	cmp	r3, #2
 800b778:	d103      	bne.n	800b782 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800b77a:	f06f 0305 	mvn.w	r3, #5
 800b77e:	61fb      	str	r3, [r7, #28]
 800b780:	e02c      	b.n	800b7dc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d103      	bne.n	800b790 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800b788:	f06f 0303 	mvn.w	r3, #3
 800b78c:	61fb      	str	r3, [r7, #28]
 800b78e:	e025      	b.n	800b7dc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d011      	beq.n	800b7ba <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	69b8      	ldr	r0, [r7, #24]
 800b79a:	f000 fc78 	bl	800c08e <xQueueTakeMutexRecursive>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d01b      	beq.n	800b7dc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d003      	beq.n	800b7b2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800b7aa:	f06f 0301 	mvn.w	r3, #1
 800b7ae:	61fb      	str	r3, [r7, #28]
 800b7b0:	e014      	b.n	800b7dc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800b7b2:	f06f 0302 	mvn.w	r3, #2
 800b7b6:	61fb      	str	r3, [r7, #28]
 800b7b8:	e010      	b.n	800b7dc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	69b8      	ldr	r0, [r7, #24]
 800b7be:	f000 fff5 	bl	800c7ac <xQueueSemaphoreTake>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d009      	beq.n	800b7dc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d003      	beq.n	800b7d6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800b7ce:	f06f 0301 	mvn.w	r3, #1
 800b7d2:	61fb      	str	r3, [r7, #28]
 800b7d4:	e002      	b.n	800b7dc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800b7d6:	f06f 0302 	mvn.w	r3, #2
 800b7da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b7dc:	69fb      	ldr	r3, [r7, #28]
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3720      	adds	r7, #32
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	20001330 	.word	0x20001330

0800b7ec <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b088      	sub	sp, #32
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f023 0301 	bic.w	r3, r3, #1
 800b7fa:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f003 0301 	and.w	r3, r3, #1
 800b802:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800b804:	2300      	movs	r3, #0
 800b806:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b808:	f3ef 8305 	mrs	r3, IPSR
 800b80c:	613b      	str	r3, [r7, #16]
  return(result);
 800b80e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800b810:	2b00      	cmp	r3, #0
 800b812:	d10f      	bne.n	800b834 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b814:	f3ef 8310 	mrs	r3, PRIMASK
 800b818:	60fb      	str	r3, [r7, #12]
  return(result);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d105      	bne.n	800b82c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b820:	f3ef 8311 	mrs	r3, BASEPRI
 800b824:	60bb      	str	r3, [r7, #8]
  return(result);
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d007      	beq.n	800b83c <osMutexRelease+0x50>
 800b82c:	4b16      	ldr	r3, [pc, #88]	; (800b888 <osMutexRelease+0x9c>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b02      	cmp	r3, #2
 800b832:	d103      	bne.n	800b83c <osMutexRelease+0x50>
    stat = osErrorISR;
 800b834:	f06f 0305 	mvn.w	r3, #5
 800b838:	61fb      	str	r3, [r7, #28]
 800b83a:	e01f      	b.n	800b87c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d103      	bne.n	800b84a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800b842:	f06f 0303 	mvn.w	r3, #3
 800b846:	61fb      	str	r3, [r7, #28]
 800b848:	e018      	b.n	800b87c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d009      	beq.n	800b864 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b850:	69b8      	ldr	r0, [r7, #24]
 800b852:	f000 fbe9 	bl	800c028 <xQueueGiveMutexRecursive>
 800b856:	4603      	mov	r3, r0
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d00f      	beq.n	800b87c <osMutexRelease+0x90>
        stat = osErrorResource;
 800b85c:	f06f 0302 	mvn.w	r3, #2
 800b860:	61fb      	str	r3, [r7, #28]
 800b862:	e00b      	b.n	800b87c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b864:	2300      	movs	r3, #0
 800b866:	2200      	movs	r2, #0
 800b868:	2100      	movs	r1, #0
 800b86a:	69b8      	ldr	r0, [r7, #24]
 800b86c:	f000 fcaa 	bl	800c1c4 <xQueueGenericSend>
 800b870:	4603      	mov	r3, r0
 800b872:	2b01      	cmp	r3, #1
 800b874:	d002      	beq.n	800b87c <osMutexRelease+0x90>
        stat = osErrorResource;
 800b876:	f06f 0302 	mvn.w	r3, #2
 800b87a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800b87c:	69fb      	ldr	r3, [r7, #28]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3720      	adds	r7, #32
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	20001330 	.word	0x20001330

0800b88c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b08c      	sub	sp, #48	; 0x30
 800b890:	af02      	add	r7, sp, #8
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b898:	2300      	movs	r3, #0
 800b89a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b89c:	f3ef 8305 	mrs	r3, IPSR
 800b8a0:	61bb      	str	r3, [r7, #24]
  return(result);
 800b8a2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	f040 8087 	bne.w	800b9b8 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8aa:	f3ef 8310 	mrs	r3, PRIMASK
 800b8ae:	617b      	str	r3, [r7, #20]
  return(result);
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d105      	bne.n	800b8c2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b8b6:	f3ef 8311 	mrs	r3, BASEPRI
 800b8ba:	613b      	str	r3, [r7, #16]
  return(result);
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d003      	beq.n	800b8ca <osSemaphoreNew+0x3e>
 800b8c2:	4b40      	ldr	r3, [pc, #256]	; (800b9c4 <osSemaphoreNew+0x138>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	2b02      	cmp	r3, #2
 800b8c8:	d076      	beq.n	800b9b8 <osSemaphoreNew+0x12c>
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d073      	beq.n	800b9b8 <osSemaphoreNew+0x12c>
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d86f      	bhi.n	800b9b8 <osSemaphoreNew+0x12c>
    mem = -1;
 800b8d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b8dc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d015      	beq.n	800b910 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d006      	beq.n	800b8fa <osSemaphoreNew+0x6e>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	2b4f      	cmp	r3, #79	; 0x4f
 800b8f2:	d902      	bls.n	800b8fa <osSemaphoreNew+0x6e>
        mem = 1;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	623b      	str	r3, [r7, #32]
 800b8f8:	e00c      	b.n	800b914 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d108      	bne.n	800b914 <osSemaphoreNew+0x88>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d104      	bne.n	800b914 <osSemaphoreNew+0x88>
          mem = 0;
 800b90a:	2300      	movs	r3, #0
 800b90c:	623b      	str	r3, [r7, #32]
 800b90e:	e001      	b.n	800b914 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800b910:	2300      	movs	r3, #0
 800b912:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800b914:	6a3b      	ldr	r3, [r7, #32]
 800b916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b91a:	d04d      	beq.n	800b9b8 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d129      	bne.n	800b976 <osSemaphoreNew+0xea>
        if (mem == 1) {
 800b922:	6a3b      	ldr	r3, [r7, #32]
 800b924:	2b01      	cmp	r3, #1
 800b926:	d10b      	bne.n	800b940 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	689a      	ldr	r2, [r3, #8]
 800b92c:	2303      	movs	r3, #3
 800b92e:	9300      	str	r3, [sp, #0]
 800b930:	4613      	mov	r3, r2
 800b932:	2200      	movs	r2, #0
 800b934:	2100      	movs	r1, #0
 800b936:	2001      	movs	r0, #1
 800b938:	f000 fa54 	bl	800bde4 <xQueueGenericCreateStatic>
 800b93c:	6278      	str	r0, [r7, #36]	; 0x24
 800b93e:	e005      	b.n	800b94c <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800b940:	2203      	movs	r2, #3
 800b942:	2100      	movs	r1, #0
 800b944:	2001      	movs	r0, #1
 800b946:	f000 fac0 	bl	800beca <xQueueGenericCreate>
 800b94a:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d022      	beq.n	800b998 <osSemaphoreNew+0x10c>
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d01f      	beq.n	800b998 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b958:	2300      	movs	r3, #0
 800b95a:	2200      	movs	r2, #0
 800b95c:	2100      	movs	r1, #0
 800b95e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b960:	f000 fc30 	bl	800c1c4 <xQueueGenericSend>
 800b964:	4603      	mov	r3, r0
 800b966:	2b01      	cmp	r3, #1
 800b968:	d016      	beq.n	800b998 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800b96a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b96c:	f001 f8a3 	bl	800cab6 <vQueueDelete>
            hSemaphore = NULL;
 800b970:	2300      	movs	r3, #0
 800b972:	627b      	str	r3, [r7, #36]	; 0x24
 800b974:	e010      	b.n	800b998 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800b976:	6a3b      	ldr	r3, [r7, #32]
 800b978:	2b01      	cmp	r3, #1
 800b97a:	d108      	bne.n	800b98e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	461a      	mov	r2, r3
 800b982:	68b9      	ldr	r1, [r7, #8]
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f000 fbb7 	bl	800c0f8 <xQueueCreateCountingSemaphoreStatic>
 800b98a:	6278      	str	r0, [r7, #36]	; 0x24
 800b98c:	e004      	b.n	800b998 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b98e:	68b9      	ldr	r1, [r7, #8]
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f000 fbe6 	bl	800c162 <xQueueCreateCountingSemaphore>
 800b996:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00c      	beq.n	800b9b8 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d003      	beq.n	800b9ac <osSemaphoreNew+0x120>
          name = attr->name;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	61fb      	str	r3, [r7, #28]
 800b9aa:	e001      	b.n	800b9b0 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b9b0:	69f9      	ldr	r1, [r7, #28]
 800b9b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9b4:	f001 f9ca 	bl	800cd4c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3728      	adds	r7, #40	; 0x28
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	20001330 	.word	0x20001330

0800b9c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b088      	sub	sp, #32
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800b9da:	69bb      	ldr	r3, [r7, #24]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d103      	bne.n	800b9e8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b9e0:	f06f 0303 	mvn.w	r3, #3
 800b9e4:	61fb      	str	r3, [r7, #28]
 800b9e6:	e04b      	b.n	800ba80 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9e8:	f3ef 8305 	mrs	r3, IPSR
 800b9ec:	617b      	str	r3, [r7, #20]
  return(result);
 800b9ee:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d10f      	bne.n	800ba14 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9f4:	f3ef 8310 	mrs	r3, PRIMASK
 800b9f8:	613b      	str	r3, [r7, #16]
  return(result);
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d105      	bne.n	800ba0c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ba00:	f3ef 8311 	mrs	r3, BASEPRI
 800ba04:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d026      	beq.n	800ba5a <osSemaphoreAcquire+0x92>
 800ba0c:	4b1f      	ldr	r3, [pc, #124]	; (800ba8c <osSemaphoreAcquire+0xc4>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d122      	bne.n	800ba5a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d003      	beq.n	800ba22 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800ba1a:	f06f 0303 	mvn.w	r3, #3
 800ba1e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ba20:	e02d      	b.n	800ba7e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800ba22:	2300      	movs	r3, #0
 800ba24:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ba26:	f107 0308 	add.w	r3, r7, #8
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	69b8      	ldr	r0, [r7, #24]
 800ba30:	f000 ffc4 	bl	800c9bc <xQueueReceiveFromISR>
 800ba34:	4603      	mov	r3, r0
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d003      	beq.n	800ba42 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800ba3a:	f06f 0302 	mvn.w	r3, #2
 800ba3e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ba40:	e01d      	b.n	800ba7e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d01a      	beq.n	800ba7e <osSemaphoreAcquire+0xb6>
 800ba48:	4b11      	ldr	r3, [pc, #68]	; (800ba90 <osSemaphoreAcquire+0xc8>)
 800ba4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba4e:	601a      	str	r2, [r3, #0]
 800ba50:	f3bf 8f4f 	dsb	sy
 800ba54:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800ba58:	e011      	b.n	800ba7e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ba5a:	6839      	ldr	r1, [r7, #0]
 800ba5c:	69b8      	ldr	r0, [r7, #24]
 800ba5e:	f000 fea5 	bl	800c7ac <xQueueSemaphoreTake>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d00b      	beq.n	800ba80 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d003      	beq.n	800ba76 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800ba6e:	f06f 0301 	mvn.w	r3, #1
 800ba72:	61fb      	str	r3, [r7, #28]
 800ba74:	e004      	b.n	800ba80 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800ba76:	f06f 0302 	mvn.w	r3, #2
 800ba7a:	61fb      	str	r3, [r7, #28]
 800ba7c:	e000      	b.n	800ba80 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800ba7e:	bf00      	nop
      }
    }
  }

  return (stat);
 800ba80:	69fb      	ldr	r3, [r7, #28]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3720      	adds	r7, #32
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	20001330 	.word	0x20001330
 800ba90:	e000ed04 	.word	0xe000ed04

0800ba94 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b088      	sub	sp, #32
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800baa0:	2300      	movs	r3, #0
 800baa2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800baa4:	69bb      	ldr	r3, [r7, #24]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d103      	bne.n	800bab2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800baaa:	f06f 0303 	mvn.w	r3, #3
 800baae:	61fb      	str	r3, [r7, #28]
 800bab0:	e03e      	b.n	800bb30 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bab2:	f3ef 8305 	mrs	r3, IPSR
 800bab6:	617b      	str	r3, [r7, #20]
  return(result);
 800bab8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800baba:	2b00      	cmp	r3, #0
 800babc:	d10f      	bne.n	800bade <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800babe:	f3ef 8310 	mrs	r3, PRIMASK
 800bac2:	613b      	str	r3, [r7, #16]
  return(result);
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d105      	bne.n	800bad6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800baca:	f3ef 8311 	mrs	r3, BASEPRI
 800bace:	60fb      	str	r3, [r7, #12]
  return(result);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d01e      	beq.n	800bb14 <osSemaphoreRelease+0x80>
 800bad6:	4b19      	ldr	r3, [pc, #100]	; (800bb3c <osSemaphoreRelease+0xa8>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2b02      	cmp	r3, #2
 800badc:	d11a      	bne.n	800bb14 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800bade:	2300      	movs	r3, #0
 800bae0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bae2:	f107 0308 	add.w	r3, r7, #8
 800bae6:	4619      	mov	r1, r3
 800bae8:	69b8      	ldr	r0, [r7, #24]
 800baea:	f000 fcf9 	bl	800c4e0 <xQueueGiveFromISR>
 800baee:	4603      	mov	r3, r0
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d003      	beq.n	800bafc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800baf4:	f06f 0302 	mvn.w	r3, #2
 800baf8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bafa:	e018      	b.n	800bb2e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d015      	beq.n	800bb2e <osSemaphoreRelease+0x9a>
 800bb02:	4b0f      	ldr	r3, [pc, #60]	; (800bb40 <osSemaphoreRelease+0xac>)
 800bb04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb08:	601a      	str	r2, [r3, #0]
 800bb0a:	f3bf 8f4f 	dsb	sy
 800bb0e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bb12:	e00c      	b.n	800bb2e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bb14:	2300      	movs	r3, #0
 800bb16:	2200      	movs	r2, #0
 800bb18:	2100      	movs	r1, #0
 800bb1a:	69b8      	ldr	r0, [r7, #24]
 800bb1c:	f000 fb52 	bl	800c1c4 <xQueueGenericSend>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d004      	beq.n	800bb30 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800bb26:	f06f 0302 	mvn.w	r3, #2
 800bb2a:	61fb      	str	r3, [r7, #28]
 800bb2c:	e000      	b.n	800bb30 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bb2e:	bf00      	nop
    }
  }

  return (stat);
 800bb30:	69fb      	ldr	r3, [r7, #28]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3720      	adds	r7, #32
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	20001330 	.word	0x20001330
 800bb40:	e000ed04 	.word	0xe000ed04

0800bb44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4a07      	ldr	r2, [pc, #28]	; (800bb70 <vApplicationGetIdleTaskMemory+0x2c>)
 800bb54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	4a06      	ldr	r2, [pc, #24]	; (800bb74 <vApplicationGetIdleTaskMemory+0x30>)
 800bb5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb62:	601a      	str	r2, [r3, #0]
}
 800bb64:	bf00      	nop
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr
 800bb70:	20001334 	.word	0x20001334
 800bb74:	20001390 	.word	0x20001390

0800bb78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bb78:	b480      	push	{r7}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	4a07      	ldr	r2, [pc, #28]	; (800bba4 <vApplicationGetTimerTaskMemory+0x2c>)
 800bb88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	4a06      	ldr	r2, [pc, #24]	; (800bba8 <vApplicationGetTimerTaskMemory+0x30>)
 800bb8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bb96:	601a      	str	r2, [r3, #0]
}
 800bb98:	bf00      	nop
 800bb9a:	3714      	adds	r7, #20
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr
 800bba4:	20001790 	.word	0x20001790
 800bba8:	200017ec 	.word	0x200017ec

0800bbac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f103 0208 	add.w	r2, r3, #8
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f04f 32ff 	mov.w	r2, #4294967295
 800bbc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f103 0208 	add.w	r2, r3, #8
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f103 0208 	add.w	r2, r3, #8
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bbe0:	bf00      	nop
 800bbe2:	370c      	adds	r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bbec:	b480      	push	{r7}
 800bbee:	b083      	sub	sp, #12
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bbfa:	bf00      	nop
 800bbfc:	370c      	adds	r7, #12
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr

0800bc06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc06:	b480      	push	{r7}
 800bc08:	b085      	sub	sp, #20
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	689a      	ldr	r2, [r3, #8]
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	683a      	ldr	r2, [r7, #0]
 800bc2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	683a      	ldr	r2, [r7, #0]
 800bc30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	1c5a      	adds	r2, r3, #1
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	601a      	str	r2, [r3, #0]
}
 800bc42:	bf00      	nop
 800bc44:	3714      	adds	r7, #20
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr

0800bc4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b085      	sub	sp, #20
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
 800bc56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc64:	d103      	bne.n	800bc6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	691b      	ldr	r3, [r3, #16]
 800bc6a:	60fb      	str	r3, [r7, #12]
 800bc6c:	e00c      	b.n	800bc88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	3308      	adds	r3, #8
 800bc72:	60fb      	str	r3, [r7, #12]
 800bc74:	e002      	b.n	800bc7c <vListInsert+0x2e>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	60fb      	str	r3, [r7, #12]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d2f6      	bcs.n	800bc76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	685a      	ldr	r2, [r3, #4]
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	683a      	ldr	r2, [r7, #0]
 800bc96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	68fa      	ldr	r2, [r7, #12]
 800bc9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	683a      	ldr	r2, [r7, #0]
 800bca2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	1c5a      	adds	r2, r3, #1
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	601a      	str	r2, [r3, #0]
}
 800bcb4:	bf00      	nop
 800bcb6:	3714      	adds	r7, #20
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b085      	sub	sp, #20
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	691b      	ldr	r3, [r3, #16]
 800bccc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	6892      	ldr	r2, [r2, #8]
 800bcd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	6852      	ldr	r2, [r2, #4]
 800bce0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d103      	bne.n	800bcf4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	689a      	ldr	r2, [r3, #8]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	1e5a      	subs	r2, r3, #1
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3714      	adds	r7, #20
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d109      	bne.n	800bd3c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2c:	f383 8811 	msr	BASEPRI, r3
 800bd30:	f3bf 8f6f 	isb	sy
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	60bb      	str	r3, [r7, #8]
 800bd3a:	e7fe      	b.n	800bd3a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800bd3c:	f002 ff36 	bl	800ebac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd48:	68f9      	ldr	r1, [r7, #12]
 800bd4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bd4c:	fb01 f303 	mul.w	r3, r1, r3
 800bd50:	441a      	add	r2, r3
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	68f9      	ldr	r1, [r7, #12]
 800bd70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bd72:	fb01 f303 	mul.w	r3, r1, r3
 800bd76:	441a      	add	r2, r3
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	22ff      	movs	r2, #255	; 0xff
 800bd80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	22ff      	movs	r2, #255	; 0xff
 800bd88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d114      	bne.n	800bdbc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	691b      	ldr	r3, [r3, #16]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d01a      	beq.n	800bdd0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	3310      	adds	r3, #16
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f001 fce4 	bl	800d76c <xTaskRemoveFromEventList>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d012      	beq.n	800bdd0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bdaa:	4b0d      	ldr	r3, [pc, #52]	; (800bde0 <xQueueGenericReset+0xcc>)
 800bdac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdb0:	601a      	str	r2, [r3, #0]
 800bdb2:	f3bf 8f4f 	dsb	sy
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	e009      	b.n	800bdd0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	3310      	adds	r3, #16
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7ff fef3 	bl	800bbac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	3324      	adds	r3, #36	; 0x24
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7ff feee 	bl	800bbac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bdd0:	f002 ff1a 	bl	800ec08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bdd4:	2301      	movs	r3, #1
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3710      	adds	r7, #16
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	e000ed04 	.word	0xe000ed04

0800bde4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b08e      	sub	sp, #56	; 0x38
 800bde8:	af02      	add	r7, sp, #8
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
 800bdf0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d109      	bne.n	800be0c <xQueueGenericCreateStatic+0x28>
 800bdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfc:	f383 8811 	msr	BASEPRI, r3
 800be00:	f3bf 8f6f 	isb	sy
 800be04:	f3bf 8f4f 	dsb	sy
 800be08:	62bb      	str	r3, [r7, #40]	; 0x28
 800be0a:	e7fe      	b.n	800be0a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d109      	bne.n	800be26 <xQueueGenericCreateStatic+0x42>
 800be12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be16:	f383 8811 	msr	BASEPRI, r3
 800be1a:	f3bf 8f6f 	isb	sy
 800be1e:	f3bf 8f4f 	dsb	sy
 800be22:	627b      	str	r3, [r7, #36]	; 0x24
 800be24:	e7fe      	b.n	800be24 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d002      	beq.n	800be32 <xQueueGenericCreateStatic+0x4e>
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d001      	beq.n	800be36 <xQueueGenericCreateStatic+0x52>
 800be32:	2301      	movs	r3, #1
 800be34:	e000      	b.n	800be38 <xQueueGenericCreateStatic+0x54>
 800be36:	2300      	movs	r3, #0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d109      	bne.n	800be50 <xQueueGenericCreateStatic+0x6c>
 800be3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be40:	f383 8811 	msr	BASEPRI, r3
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	f3bf 8f4f 	dsb	sy
 800be4c:	623b      	str	r3, [r7, #32]
 800be4e:	e7fe      	b.n	800be4e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d102      	bne.n	800be5c <xQueueGenericCreateStatic+0x78>
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d101      	bne.n	800be60 <xQueueGenericCreateStatic+0x7c>
 800be5c:	2301      	movs	r3, #1
 800be5e:	e000      	b.n	800be62 <xQueueGenericCreateStatic+0x7e>
 800be60:	2300      	movs	r3, #0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d109      	bne.n	800be7a <xQueueGenericCreateStatic+0x96>
 800be66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6a:	f383 8811 	msr	BASEPRI, r3
 800be6e:	f3bf 8f6f 	isb	sy
 800be72:	f3bf 8f4f 	dsb	sy
 800be76:	61fb      	str	r3, [r7, #28]
 800be78:	e7fe      	b.n	800be78 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800be7a:	2350      	movs	r3, #80	; 0x50
 800be7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	2b50      	cmp	r3, #80	; 0x50
 800be82:	d009      	beq.n	800be98 <xQueueGenericCreateStatic+0xb4>
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	61bb      	str	r3, [r7, #24]
 800be96:	e7fe      	b.n	800be96 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800be98:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800be9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d00d      	beq.n	800bec0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea6:	2201      	movs	r2, #1
 800bea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800beac:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800beb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb2:	9300      	str	r3, [sp, #0]
 800beb4:	4613      	mov	r3, r2
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	68b9      	ldr	r1, [r7, #8]
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f000 f844 	bl	800bf48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3730      	adds	r7, #48	; 0x30
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800beca:	b580      	push	{r7, lr}
 800becc:	b08a      	sub	sp, #40	; 0x28
 800bece:	af02      	add	r7, sp, #8
 800bed0:	60f8      	str	r0, [r7, #12]
 800bed2:	60b9      	str	r1, [r7, #8]
 800bed4:	4613      	mov	r3, r2
 800bed6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d109      	bne.n	800bef2 <xQueueGenericCreate+0x28>
 800bede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee2:	f383 8811 	msr	BASEPRI, r3
 800bee6:	f3bf 8f6f 	isb	sy
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	613b      	str	r3, [r7, #16]
 800bef0:	e7fe      	b.n	800bef0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d102      	bne.n	800befe <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bef8:	2300      	movs	r3, #0
 800befa:	61fb      	str	r3, [r7, #28]
 800befc:	e004      	b.n	800bf08 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	fb02 f303 	mul.w	r3, r2, r3
 800bf06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bf08:	69fb      	ldr	r3, [r7, #28]
 800bf0a:	3350      	adds	r3, #80	; 0x50
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f002 ff67 	bl	800ede0 <pvPortMalloc>
 800bf12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bf14:	69bb      	ldr	r3, [r7, #24]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d011      	beq.n	800bf3e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	3350      	adds	r3, #80	; 0x50
 800bf22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bf24:	69bb      	ldr	r3, [r7, #24]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf2c:	79fa      	ldrb	r2, [r7, #7]
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	9300      	str	r3, [sp, #0]
 800bf32:	4613      	mov	r3, r2
 800bf34:	697a      	ldr	r2, [r7, #20]
 800bf36:	68b9      	ldr	r1, [r7, #8]
 800bf38:	68f8      	ldr	r0, [r7, #12]
 800bf3a:	f000 f805 	bl	800bf48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf3e:	69bb      	ldr	r3, [r7, #24]
	}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3720      	adds	r7, #32
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	607a      	str	r2, [r7, #4]
 800bf54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d103      	bne.n	800bf64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	69ba      	ldr	r2, [r7, #24]
 800bf60:	601a      	str	r2, [r3, #0]
 800bf62:	e002      	b.n	800bf6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	68ba      	ldr	r2, [r7, #8]
 800bf74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bf76:	2101      	movs	r1, #1
 800bf78:	69b8      	ldr	r0, [r7, #24]
 800bf7a:	f7ff fecb 	bl	800bd14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	78fa      	ldrb	r2, [r7, #3]
 800bf82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bf86:	bf00      	nop
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b082      	sub	sp, #8
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d00e      	beq.n	800bfba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bfae:	2300      	movs	r3, #0
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 f905 	bl	800c1c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bfba:	bf00      	nop
 800bfbc:	3708      	adds	r7, #8
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b086      	sub	sp, #24
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	4603      	mov	r3, r0
 800bfca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	617b      	str	r3, [r7, #20]
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bfd4:	79fb      	ldrb	r3, [r7, #7]
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	6939      	ldr	r1, [r7, #16]
 800bfda:	6978      	ldr	r0, [r7, #20]
 800bfdc:	f7ff ff75 	bl	800beca <xQueueGenericCreate>
 800bfe0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bfe2:	68f8      	ldr	r0, [r7, #12]
 800bfe4:	f7ff ffd3 	bl	800bf8e <prvInitialiseMutex>

		return xNewQueue;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
	}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3718      	adds	r7, #24
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bff2:	b580      	push	{r7, lr}
 800bff4:	b088      	sub	sp, #32
 800bff6:	af02      	add	r7, sp, #8
 800bff8:	4603      	mov	r3, r0
 800bffa:	6039      	str	r1, [r7, #0]
 800bffc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bffe:	2301      	movs	r3, #1
 800c000:	617b      	str	r3, [r7, #20]
 800c002:	2300      	movs	r3, #0
 800c004:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c006:	79fb      	ldrb	r3, [r7, #7]
 800c008:	9300      	str	r3, [sp, #0]
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	2200      	movs	r2, #0
 800c00e:	6939      	ldr	r1, [r7, #16]
 800c010:	6978      	ldr	r0, [r7, #20]
 800c012:	f7ff fee7 	bl	800bde4 <xQueueGenericCreateStatic>
 800c016:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c018:	68f8      	ldr	r0, [r7, #12]
 800c01a:	f7ff ffb8 	bl	800bf8e <prvInitialiseMutex>

		return xNewQueue;
 800c01e:	68fb      	ldr	r3, [r7, #12]
	}
 800c020:	4618      	mov	r0, r3
 800c022:	3718      	adds	r7, #24
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c028:	b590      	push	{r4, r7, lr}
 800c02a:	b087      	sub	sp, #28
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d109      	bne.n	800c04e <xQueueGiveMutexRecursive+0x26>
 800c03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03e:	f383 8811 	msr	BASEPRI, r3
 800c042:	f3bf 8f6f 	isb	sy
 800c046:	f3bf 8f4f 	dsb	sy
 800c04a:	60fb      	str	r3, [r7, #12]
 800c04c:	e7fe      	b.n	800c04c <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	689c      	ldr	r4, [r3, #8]
 800c052:	f001 fd69 	bl	800db28 <xTaskGetCurrentTaskHandle>
 800c056:	4603      	mov	r3, r0
 800c058:	429c      	cmp	r4, r3
 800c05a:	d111      	bne.n	800c080 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	68db      	ldr	r3, [r3, #12]
 800c060:	1e5a      	subs	r2, r3, #1
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d105      	bne.n	800c07a <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c06e:	2300      	movs	r3, #0
 800c070:	2200      	movs	r2, #0
 800c072:	2100      	movs	r1, #0
 800c074:	6938      	ldr	r0, [r7, #16]
 800c076:	f000 f8a5 	bl	800c1c4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c07a:	2301      	movs	r3, #1
 800c07c:	617b      	str	r3, [r7, #20]
 800c07e:	e001      	b.n	800c084 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c080:	2300      	movs	r3, #0
 800c082:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c084:	697b      	ldr	r3, [r7, #20]
	}
 800c086:	4618      	mov	r0, r3
 800c088:	371c      	adds	r7, #28
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd90      	pop	{r4, r7, pc}

0800c08e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c08e:	b590      	push	{r4, r7, lr}
 800c090:	b087      	sub	sp, #28
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
 800c096:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d109      	bne.n	800c0b6 <xQueueTakeMutexRecursive+0x28>
 800c0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a6:	f383 8811 	msr	BASEPRI, r3
 800c0aa:	f3bf 8f6f 	isb	sy
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	60fb      	str	r3, [r7, #12]
 800c0b4:	e7fe      	b.n	800c0b4 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	689c      	ldr	r4, [r3, #8]
 800c0ba:	f001 fd35 	bl	800db28 <xTaskGetCurrentTaskHandle>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	429c      	cmp	r4, r3
 800c0c2:	d107      	bne.n	800c0d4 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	1c5a      	adds	r2, r3, #1
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	617b      	str	r3, [r7, #20]
 800c0d2:	e00c      	b.n	800c0ee <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c0d4:	6839      	ldr	r1, [r7, #0]
 800c0d6:	6938      	ldr	r0, [r7, #16]
 800c0d8:	f000 fb68 	bl	800c7ac <xQueueSemaphoreTake>
 800c0dc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d004      	beq.n	800c0ee <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	1c5a      	adds	r2, r3, #1
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c0ee:	697b      	ldr	r3, [r7, #20]
	}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	371c      	adds	r7, #28
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd90      	pop	{r4, r7, pc}

0800c0f8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b08a      	sub	sp, #40	; 0x28
 800c0fc:	af02      	add	r7, sp, #8
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	60b9      	str	r1, [r7, #8]
 800c102:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d109      	bne.n	800c11e <xQueueCreateCountingSemaphoreStatic+0x26>
 800c10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10e:	f383 8811 	msr	BASEPRI, r3
 800c112:	f3bf 8f6f 	isb	sy
 800c116:	f3bf 8f4f 	dsb	sy
 800c11a:	61bb      	str	r3, [r7, #24]
 800c11c:	e7fe      	b.n	800c11c <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c11e:	68ba      	ldr	r2, [r7, #8]
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	429a      	cmp	r2, r3
 800c124:	d909      	bls.n	800c13a <xQueueCreateCountingSemaphoreStatic+0x42>
 800c126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	f3bf 8f6f 	isb	sy
 800c132:	f3bf 8f4f 	dsb	sy
 800c136:	617b      	str	r3, [r7, #20]
 800c138:	e7fe      	b.n	800c138 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c13a:	2302      	movs	r3, #2
 800c13c:	9300      	str	r3, [sp, #0]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2200      	movs	r2, #0
 800c142:	2100      	movs	r1, #0
 800c144:	68f8      	ldr	r0, [r7, #12]
 800c146:	f7ff fe4d 	bl	800bde4 <xQueueGenericCreateStatic>
 800c14a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d002      	beq.n	800c158 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	68ba      	ldr	r2, [r7, #8]
 800c156:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c158:	69fb      	ldr	r3, [r7, #28]
	}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3720      	adds	r7, #32
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}

0800c162 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c162:	b580      	push	{r7, lr}
 800c164:	b086      	sub	sp, #24
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
 800c16a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d109      	bne.n	800c186 <xQueueCreateCountingSemaphore+0x24>
 800c172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c176:	f383 8811 	msr	BASEPRI, r3
 800c17a:	f3bf 8f6f 	isb	sy
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	613b      	str	r3, [r7, #16]
 800c184:	e7fe      	b.n	800c184 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c186:	683a      	ldr	r2, [r7, #0]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d909      	bls.n	800c1a2 <xQueueCreateCountingSemaphore+0x40>
 800c18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c192:	f383 8811 	msr	BASEPRI, r3
 800c196:	f3bf 8f6f 	isb	sy
 800c19a:	f3bf 8f4f 	dsb	sy
 800c19e:	60fb      	str	r3, [r7, #12]
 800c1a0:	e7fe      	b.n	800c1a0 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c1a2:	2202      	movs	r2, #2
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f7ff fe8f 	bl	800beca <xQueueGenericCreate>
 800c1ac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d002      	beq.n	800c1ba <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	683a      	ldr	r2, [r7, #0]
 800c1b8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c1ba:	697b      	ldr	r3, [r7, #20]
	}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3718      	adds	r7, #24
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b08e      	sub	sp, #56	; 0x38
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
 800c1d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d109      	bne.n	800c1f4 <xQueueGenericSend+0x30>
 800c1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c1f2:	e7fe      	b.n	800c1f2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d103      	bne.n	800c202 <xQueueGenericSend+0x3e>
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d101      	bne.n	800c206 <xQueueGenericSend+0x42>
 800c202:	2301      	movs	r3, #1
 800c204:	e000      	b.n	800c208 <xQueueGenericSend+0x44>
 800c206:	2300      	movs	r3, #0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d109      	bne.n	800c220 <xQueueGenericSend+0x5c>
 800c20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c210:	f383 8811 	msr	BASEPRI, r3
 800c214:	f3bf 8f6f 	isb	sy
 800c218:	f3bf 8f4f 	dsb	sy
 800c21c:	627b      	str	r3, [r7, #36]	; 0x24
 800c21e:	e7fe      	b.n	800c21e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	2b02      	cmp	r3, #2
 800c224:	d103      	bne.n	800c22e <xQueueGenericSend+0x6a>
 800c226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d101      	bne.n	800c232 <xQueueGenericSend+0x6e>
 800c22e:	2301      	movs	r3, #1
 800c230:	e000      	b.n	800c234 <xQueueGenericSend+0x70>
 800c232:	2300      	movs	r3, #0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d109      	bne.n	800c24c <xQueueGenericSend+0x88>
 800c238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c23c:	f383 8811 	msr	BASEPRI, r3
 800c240:	f3bf 8f6f 	isb	sy
 800c244:	f3bf 8f4f 	dsb	sy
 800c248:	623b      	str	r3, [r7, #32]
 800c24a:	e7fe      	b.n	800c24a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c24c:	f001 fc7c 	bl	800db48 <xTaskGetSchedulerState>
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d102      	bne.n	800c25c <xQueueGenericSend+0x98>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d101      	bne.n	800c260 <xQueueGenericSend+0x9c>
 800c25c:	2301      	movs	r3, #1
 800c25e:	e000      	b.n	800c262 <xQueueGenericSend+0x9e>
 800c260:	2300      	movs	r3, #0
 800c262:	2b00      	cmp	r3, #0
 800c264:	d109      	bne.n	800c27a <xQueueGenericSend+0xb6>
 800c266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c26a:	f383 8811 	msr	BASEPRI, r3
 800c26e:	f3bf 8f6f 	isb	sy
 800c272:	f3bf 8f4f 	dsb	sy
 800c276:	61fb      	str	r3, [r7, #28]
 800c278:	e7fe      	b.n	800c278 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c27a:	f002 fc97 	bl	800ebac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c286:	429a      	cmp	r2, r3
 800c288:	d302      	bcc.n	800c290 <xQueueGenericSend+0xcc>
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d129      	bne.n	800c2e4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c290:	683a      	ldr	r2, [r7, #0]
 800c292:	68b9      	ldr	r1, [r7, #8]
 800c294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c296:	f000 fc48 	bl	800cb2a <prvCopyDataToQueue>
 800c29a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d010      	beq.n	800c2c6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a6:	3324      	adds	r3, #36	; 0x24
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f001 fa5f 	bl	800d76c <xTaskRemoveFromEventList>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d013      	beq.n	800c2dc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c2b4:	4b3f      	ldr	r3, [pc, #252]	; (800c3b4 <xQueueGenericSend+0x1f0>)
 800c2b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2ba:	601a      	str	r2, [r3, #0]
 800c2bc:	f3bf 8f4f 	dsb	sy
 800c2c0:	f3bf 8f6f 	isb	sy
 800c2c4:	e00a      	b.n	800c2dc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d007      	beq.n	800c2dc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c2cc:	4b39      	ldr	r3, [pc, #228]	; (800c3b4 <xQueueGenericSend+0x1f0>)
 800c2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2d2:	601a      	str	r2, [r3, #0]
 800c2d4:	f3bf 8f4f 	dsb	sy
 800c2d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c2dc:	f002 fc94 	bl	800ec08 <vPortExitCritical>
				return pdPASS;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	e063      	b.n	800c3ac <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d103      	bne.n	800c2f2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c2ea:	f002 fc8d 	bl	800ec08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	e05c      	b.n	800c3ac <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d106      	bne.n	800c306 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2f8:	f107 0314 	add.w	r3, r7, #20
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f001 fa99 	bl	800d834 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c302:	2301      	movs	r3, #1
 800c304:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c306:	f002 fc7f 	bl	800ec08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c30a:	f000 ffdb 	bl	800d2c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c30e:	f002 fc4d 	bl	800ebac <vPortEnterCritical>
 800c312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c318:	b25b      	sxtb	r3, r3
 800c31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c31e:	d103      	bne.n	800c328 <xQueueGenericSend+0x164>
 800c320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c322:	2200      	movs	r2, #0
 800c324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c32e:	b25b      	sxtb	r3, r3
 800c330:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c334:	d103      	bne.n	800c33e <xQueueGenericSend+0x17a>
 800c336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c338:	2200      	movs	r2, #0
 800c33a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c33e:	f002 fc63 	bl	800ec08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c342:	1d3a      	adds	r2, r7, #4
 800c344:	f107 0314 	add.w	r3, r7, #20
 800c348:	4611      	mov	r1, r2
 800c34a:	4618      	mov	r0, r3
 800c34c:	f001 fa88 	bl	800d860 <xTaskCheckForTimeOut>
 800c350:	4603      	mov	r3, r0
 800c352:	2b00      	cmp	r3, #0
 800c354:	d124      	bne.n	800c3a0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c356:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c358:	f000 fcdf 	bl	800cd1a <prvIsQueueFull>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d018      	beq.n	800c394 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c364:	3310      	adds	r3, #16
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	4611      	mov	r1, r2
 800c36a:	4618      	mov	r0, r3
 800c36c:	f001 f9b0 	bl	800d6d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c372:	f000 fc6a 	bl	800cc4a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c376:	f000 ffeb 	bl	800d350 <xTaskResumeAll>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	f47f af7c 	bne.w	800c27a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800c382:	4b0c      	ldr	r3, [pc, #48]	; (800c3b4 <xQueueGenericSend+0x1f0>)
 800c384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c388:	601a      	str	r2, [r3, #0]
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	f3bf 8f6f 	isb	sy
 800c392:	e772      	b.n	800c27a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c396:	f000 fc58 	bl	800cc4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c39a:	f000 ffd9 	bl	800d350 <xTaskResumeAll>
 800c39e:	e76c      	b.n	800c27a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c3a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3a2:	f000 fc52 	bl	800cc4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c3a6:	f000 ffd3 	bl	800d350 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c3aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3738      	adds	r7, #56	; 0x38
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	e000ed04 	.word	0xe000ed04

0800c3b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b08e      	sub	sp, #56	; 0x38
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	607a      	str	r2, [r7, #4]
 800c3c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d109      	bne.n	800c3e4 <xQueueGenericSendFromISR+0x2c>
 800c3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	627b      	str	r3, [r7, #36]	; 0x24
 800c3e2:	e7fe      	b.n	800c3e2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d103      	bne.n	800c3f2 <xQueueGenericSendFromISR+0x3a>
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d101      	bne.n	800c3f6 <xQueueGenericSendFromISR+0x3e>
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e000      	b.n	800c3f8 <xQueueGenericSendFromISR+0x40>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d109      	bne.n	800c410 <xQueueGenericSendFromISR+0x58>
 800c3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c400:	f383 8811 	msr	BASEPRI, r3
 800c404:	f3bf 8f6f 	isb	sy
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	623b      	str	r3, [r7, #32]
 800c40e:	e7fe      	b.n	800c40e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	2b02      	cmp	r3, #2
 800c414:	d103      	bne.n	800c41e <xQueueGenericSendFromISR+0x66>
 800c416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d101      	bne.n	800c422 <xQueueGenericSendFromISR+0x6a>
 800c41e:	2301      	movs	r3, #1
 800c420:	e000      	b.n	800c424 <xQueueGenericSendFromISR+0x6c>
 800c422:	2300      	movs	r3, #0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d109      	bne.n	800c43c <xQueueGenericSendFromISR+0x84>
 800c428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42c:	f383 8811 	msr	BASEPRI, r3
 800c430:	f3bf 8f6f 	isb	sy
 800c434:	f3bf 8f4f 	dsb	sy
 800c438:	61fb      	str	r3, [r7, #28]
 800c43a:	e7fe      	b.n	800c43a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c43c:	f002 fc92 	bl	800ed64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c440:	f3ef 8211 	mrs	r2, BASEPRI
 800c444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c448:	f383 8811 	msr	BASEPRI, r3
 800c44c:	f3bf 8f6f 	isb	sy
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	61ba      	str	r2, [r7, #24]
 800c456:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c458:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c45a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c464:	429a      	cmp	r2, r3
 800c466:	d302      	bcc.n	800c46e <xQueueGenericSendFromISR+0xb6>
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	2b02      	cmp	r3, #2
 800c46c:	d12c      	bne.n	800c4c8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c478:	683a      	ldr	r2, [r7, #0]
 800c47a:	68b9      	ldr	r1, [r7, #8]
 800c47c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c47e:	f000 fb54 	bl	800cb2a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c482:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c48a:	d112      	bne.n	800c4b2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c490:	2b00      	cmp	r3, #0
 800c492:	d016      	beq.n	800c4c2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c496:	3324      	adds	r3, #36	; 0x24
 800c498:	4618      	mov	r0, r3
 800c49a:	f001 f967 	bl	800d76c <xTaskRemoveFromEventList>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00e      	beq.n	800c4c2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00b      	beq.n	800c4c2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	601a      	str	r2, [r3, #0]
 800c4b0:	e007      	b.n	800c4c2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c4b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	b25a      	sxtb	r2, r3
 800c4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c4c6:	e001      	b.n	800c4cc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	637b      	str	r3, [r7, #52]	; 0x34
 800c4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3738      	adds	r7, #56	; 0x38
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b08e      	sub	sp, #56	; 0x38
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d109      	bne.n	800c508 <xQueueGiveFromISR+0x28>
	__asm volatile
 800c4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f8:	f383 8811 	msr	BASEPRI, r3
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	f3bf 8f4f 	dsb	sy
 800c504:	623b      	str	r3, [r7, #32]
 800c506:	e7fe      	b.n	800c506 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d009      	beq.n	800c524 <xQueueGiveFromISR+0x44>
 800c510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	61fb      	str	r3, [r7, #28]
 800c522:	e7fe      	b.n	800c522 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d103      	bne.n	800c534 <xQueueGiveFromISR+0x54>
 800c52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52e:	689b      	ldr	r3, [r3, #8]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d101      	bne.n	800c538 <xQueueGiveFromISR+0x58>
 800c534:	2301      	movs	r3, #1
 800c536:	e000      	b.n	800c53a <xQueueGiveFromISR+0x5a>
 800c538:	2300      	movs	r3, #0
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d109      	bne.n	800c552 <xQueueGiveFromISR+0x72>
 800c53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c542:	f383 8811 	msr	BASEPRI, r3
 800c546:	f3bf 8f6f 	isb	sy
 800c54a:	f3bf 8f4f 	dsb	sy
 800c54e:	61bb      	str	r3, [r7, #24]
 800c550:	e7fe      	b.n	800c550 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c552:	f002 fc07 	bl	800ed64 <vPortValidateInterruptPriority>
	__asm volatile
 800c556:	f3ef 8211 	mrs	r2, BASEPRI
 800c55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55e:	f383 8811 	msr	BASEPRI, r3
 800c562:	f3bf 8f6f 	isb	sy
 800c566:	f3bf 8f4f 	dsb	sy
 800c56a:	617a      	str	r2, [r7, #20]
 800c56c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c56e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c570:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c576:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c57c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c57e:	429a      	cmp	r2, r3
 800c580:	d22b      	bcs.n	800c5da <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58e:	1c5a      	adds	r2, r3, #1
 800c590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c592:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c594:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c59c:	d112      	bne.n	800c5c4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d016      	beq.n	800c5d4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a8:	3324      	adds	r3, #36	; 0x24
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f001 f8de 	bl	800d76c <xTaskRemoveFromEventList>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d00e      	beq.n	800c5d4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00b      	beq.n	800c5d4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	601a      	str	r2, [r3, #0]
 800c5c2:	e007      	b.n	800c5d4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c5c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	b25a      	sxtb	r2, r3
 800c5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	637b      	str	r3, [r7, #52]	; 0x34
 800c5d8:	e001      	b.n	800c5de <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	637b      	str	r3, [r7, #52]	; 0x34
 800c5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3738      	adds	r7, #56	; 0x38
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
	...

0800c5f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b08c      	sub	sp, #48	; 0x30
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c600:	2300      	movs	r3, #0
 800c602:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d109      	bne.n	800c622 <xQueueReceive+0x2e>
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	623b      	str	r3, [r7, #32]
 800c620:	e7fe      	b.n	800c620 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d103      	bne.n	800c630 <xQueueReceive+0x3c>
 800c628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d101      	bne.n	800c634 <xQueueReceive+0x40>
 800c630:	2301      	movs	r3, #1
 800c632:	e000      	b.n	800c636 <xQueueReceive+0x42>
 800c634:	2300      	movs	r3, #0
 800c636:	2b00      	cmp	r3, #0
 800c638:	d109      	bne.n	800c64e <xQueueReceive+0x5a>
 800c63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63e:	f383 8811 	msr	BASEPRI, r3
 800c642:	f3bf 8f6f 	isb	sy
 800c646:	f3bf 8f4f 	dsb	sy
 800c64a:	61fb      	str	r3, [r7, #28]
 800c64c:	e7fe      	b.n	800c64c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c64e:	f001 fa7b 	bl	800db48 <xTaskGetSchedulerState>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d102      	bne.n	800c65e <xQueueReceive+0x6a>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d101      	bne.n	800c662 <xQueueReceive+0x6e>
 800c65e:	2301      	movs	r3, #1
 800c660:	e000      	b.n	800c664 <xQueueReceive+0x70>
 800c662:	2300      	movs	r3, #0
 800c664:	2b00      	cmp	r3, #0
 800c666:	d109      	bne.n	800c67c <xQueueReceive+0x88>
 800c668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66c:	f383 8811 	msr	BASEPRI, r3
 800c670:	f3bf 8f6f 	isb	sy
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	61bb      	str	r3, [r7, #24]
 800c67a:	e7fe      	b.n	800c67a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c67c:	f002 fa96 	bl	800ebac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c684:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d01f      	beq.n	800c6cc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c68c:	68b9      	ldr	r1, [r7, #8]
 800c68e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c690:	f000 fab5 	bl	800cbfe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c696:	1e5a      	subs	r2, r3, #1
 800c698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d00f      	beq.n	800c6c4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a6:	3310      	adds	r3, #16
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f001 f85f 	bl	800d76c <xTaskRemoveFromEventList>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d007      	beq.n	800c6c4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c6b4:	4b3c      	ldr	r3, [pc, #240]	; (800c7a8 <xQueueReceive+0x1b4>)
 800c6b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6ba:	601a      	str	r2, [r3, #0]
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c6c4:	f002 faa0 	bl	800ec08 <vPortExitCritical>
				return pdPASS;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	e069      	b.n	800c7a0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d103      	bne.n	800c6da <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c6d2:	f002 fa99 	bl	800ec08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	e062      	b.n	800c7a0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d106      	bne.n	800c6ee <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6e0:	f107 0310 	add.w	r3, r7, #16
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f001 f8a5 	bl	800d834 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6ee:	f002 fa8b 	bl	800ec08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6f2:	f000 fde7 	bl	800d2c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6f6:	f002 fa59 	bl	800ebac <vPortEnterCritical>
 800c6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c700:	b25b      	sxtb	r3, r3
 800c702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c706:	d103      	bne.n	800c710 <xQueueReceive+0x11c>
 800c708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70a:	2200      	movs	r2, #0
 800c70c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c716:	b25b      	sxtb	r3, r3
 800c718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c71c:	d103      	bne.n	800c726 <xQueueReceive+0x132>
 800c71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c720:	2200      	movs	r2, #0
 800c722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c726:	f002 fa6f 	bl	800ec08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c72a:	1d3a      	adds	r2, r7, #4
 800c72c:	f107 0310 	add.w	r3, r7, #16
 800c730:	4611      	mov	r1, r2
 800c732:	4618      	mov	r0, r3
 800c734:	f001 f894 	bl	800d860 <xTaskCheckForTimeOut>
 800c738:	4603      	mov	r3, r0
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d123      	bne.n	800c786 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c73e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c740:	f000 fad5 	bl	800ccee <prvIsQueueEmpty>
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d017      	beq.n	800c77a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74c:	3324      	adds	r3, #36	; 0x24
 800c74e:	687a      	ldr	r2, [r7, #4]
 800c750:	4611      	mov	r1, r2
 800c752:	4618      	mov	r0, r3
 800c754:	f000 ffbc 	bl	800d6d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c75a:	f000 fa76 	bl	800cc4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c75e:	f000 fdf7 	bl	800d350 <xTaskResumeAll>
 800c762:	4603      	mov	r3, r0
 800c764:	2b00      	cmp	r3, #0
 800c766:	d189      	bne.n	800c67c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800c768:	4b0f      	ldr	r3, [pc, #60]	; (800c7a8 <xQueueReceive+0x1b4>)
 800c76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c76e:	601a      	str	r2, [r3, #0]
 800c770:	f3bf 8f4f 	dsb	sy
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	e780      	b.n	800c67c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c77a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c77c:	f000 fa65 	bl	800cc4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c780:	f000 fde6 	bl	800d350 <xTaskResumeAll>
 800c784:	e77a      	b.n	800c67c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c788:	f000 fa5f 	bl	800cc4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c78c:	f000 fde0 	bl	800d350 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c792:	f000 faac 	bl	800ccee <prvIsQueueEmpty>
 800c796:	4603      	mov	r3, r0
 800c798:	2b00      	cmp	r3, #0
 800c79a:	f43f af6f 	beq.w	800c67c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c79e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3730      	adds	r7, #48	; 0x30
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	e000ed04 	.word	0xe000ed04

0800c7ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b08e      	sub	sp, #56	; 0x38
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d109      	bne.n	800c7dc <xQueueSemaphoreTake+0x30>
 800c7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7cc:	f383 8811 	msr	BASEPRI, r3
 800c7d0:	f3bf 8f6f 	isb	sy
 800c7d4:	f3bf 8f4f 	dsb	sy
 800c7d8:	623b      	str	r3, [r7, #32]
 800c7da:	e7fe      	b.n	800c7da <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d009      	beq.n	800c7f8 <xQueueSemaphoreTake+0x4c>
 800c7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e8:	f383 8811 	msr	BASEPRI, r3
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	61fb      	str	r3, [r7, #28]
 800c7f6:	e7fe      	b.n	800c7f6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7f8:	f001 f9a6 	bl	800db48 <xTaskGetSchedulerState>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d102      	bne.n	800c808 <xQueueSemaphoreTake+0x5c>
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d101      	bne.n	800c80c <xQueueSemaphoreTake+0x60>
 800c808:	2301      	movs	r3, #1
 800c80a:	e000      	b.n	800c80e <xQueueSemaphoreTake+0x62>
 800c80c:	2300      	movs	r3, #0
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d109      	bne.n	800c826 <xQueueSemaphoreTake+0x7a>
 800c812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c816:	f383 8811 	msr	BASEPRI, r3
 800c81a:	f3bf 8f6f 	isb	sy
 800c81e:	f3bf 8f4f 	dsb	sy
 800c822:	61bb      	str	r3, [r7, #24]
 800c824:	e7fe      	b.n	800c824 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c826:	f002 f9c1 	bl	800ebac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c82e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c832:	2b00      	cmp	r3, #0
 800c834:	d024      	beq.n	800c880 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c838:	1e5a      	subs	r2, r3, #1
 800c83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d104      	bne.n	800c850 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c846:	f001 faf1 	bl	800de2c <pvTaskIncrementMutexHeldCount>
 800c84a:	4602      	mov	r2, r0
 800c84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c852:	691b      	ldr	r3, [r3, #16]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00f      	beq.n	800c878 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85a:	3310      	adds	r3, #16
 800c85c:	4618      	mov	r0, r3
 800c85e:	f000 ff85 	bl	800d76c <xTaskRemoveFromEventList>
 800c862:	4603      	mov	r3, r0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d007      	beq.n	800c878 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c868:	4b53      	ldr	r3, [pc, #332]	; (800c9b8 <xQueueSemaphoreTake+0x20c>)
 800c86a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c86e:	601a      	str	r2, [r3, #0]
 800c870:	f3bf 8f4f 	dsb	sy
 800c874:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c878:	f002 f9c6 	bl	800ec08 <vPortExitCritical>
				return pdPASS;
 800c87c:	2301      	movs	r3, #1
 800c87e:	e096      	b.n	800c9ae <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d110      	bne.n	800c8a8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d009      	beq.n	800c8a0 <xQueueSemaphoreTake+0xf4>
 800c88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c890:	f383 8811 	msr	BASEPRI, r3
 800c894:	f3bf 8f6f 	isb	sy
 800c898:	f3bf 8f4f 	dsb	sy
 800c89c:	617b      	str	r3, [r7, #20]
 800c89e:	e7fe      	b.n	800c89e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c8a0:	f002 f9b2 	bl	800ec08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	e082      	b.n	800c9ae <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d106      	bne.n	800c8bc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c8ae:	f107 030c 	add.w	r3, r7, #12
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f000 ffbe 	bl	800d834 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c8bc:	f002 f9a4 	bl	800ec08 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8c0:	f000 fd00 	bl	800d2c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8c4:	f002 f972 	bl	800ebac <vPortEnterCritical>
 800c8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8ce:	b25b      	sxtb	r3, r3
 800c8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8d4:	d103      	bne.n	800c8de <xQueueSemaphoreTake+0x132>
 800c8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8e4:	b25b      	sxtb	r3, r3
 800c8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ea:	d103      	bne.n	800c8f4 <xQueueSemaphoreTake+0x148>
 800c8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8f4:	f002 f988 	bl	800ec08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8f8:	463a      	mov	r2, r7
 800c8fa:	f107 030c 	add.w	r3, r7, #12
 800c8fe:	4611      	mov	r1, r2
 800c900:	4618      	mov	r0, r3
 800c902:	f000 ffad 	bl	800d860 <xTaskCheckForTimeOut>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d132      	bne.n	800c972 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c90c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c90e:	f000 f9ee 	bl	800ccee <prvIsQueueEmpty>
 800c912:	4603      	mov	r3, r0
 800c914:	2b00      	cmp	r3, #0
 800c916:	d026      	beq.n	800c966 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d109      	bne.n	800c934 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800c920:	f002 f944 	bl	800ebac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	4618      	mov	r0, r3
 800c92a:	f001 f92b 	bl	800db84 <xTaskPriorityInherit>
 800c92e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c930:	f002 f96a 	bl	800ec08 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c936:	3324      	adds	r3, #36	; 0x24
 800c938:	683a      	ldr	r2, [r7, #0]
 800c93a:	4611      	mov	r1, r2
 800c93c:	4618      	mov	r0, r3
 800c93e:	f000 fec7 	bl	800d6d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c942:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c944:	f000 f981 	bl	800cc4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c948:	f000 fd02 	bl	800d350 <xTaskResumeAll>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	f47f af69 	bne.w	800c826 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800c954:	4b18      	ldr	r3, [pc, #96]	; (800c9b8 <xQueueSemaphoreTake+0x20c>)
 800c956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c95a:	601a      	str	r2, [r3, #0]
 800c95c:	f3bf 8f4f 	dsb	sy
 800c960:	f3bf 8f6f 	isb	sy
 800c964:	e75f      	b.n	800c826 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c968:	f000 f96f 	bl	800cc4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c96c:	f000 fcf0 	bl	800d350 <xTaskResumeAll>
 800c970:	e759      	b.n	800c826 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c972:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c974:	f000 f969 	bl	800cc4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c978:	f000 fcea 	bl	800d350 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c97c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c97e:	f000 f9b6 	bl	800ccee <prvIsQueueEmpty>
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	f43f af4e 	beq.w	800c826 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d00d      	beq.n	800c9ac <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800c990:	f002 f90c 	bl	800ebac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c996:	f000 f8b0 	bl	800cafa <prvGetDisinheritPriorityAfterTimeout>
 800c99a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f001 f9c2 	bl	800dd2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c9a8:	f002 f92e 	bl	800ec08 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c9ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3738      	adds	r7, #56	; 0x38
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	e000ed04 	.word	0xe000ed04

0800c9bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b08e      	sub	sp, #56	; 0x38
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d109      	bne.n	800c9e6 <xQueueReceiveFromISR+0x2a>
 800c9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d6:	f383 8811 	msr	BASEPRI, r3
 800c9da:	f3bf 8f6f 	isb	sy
 800c9de:	f3bf 8f4f 	dsb	sy
 800c9e2:	623b      	str	r3, [r7, #32]
 800c9e4:	e7fe      	b.n	800c9e4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d103      	bne.n	800c9f4 <xQueueReceiveFromISR+0x38>
 800c9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d101      	bne.n	800c9f8 <xQueueReceiveFromISR+0x3c>
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	e000      	b.n	800c9fa <xQueueReceiveFromISR+0x3e>
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d109      	bne.n	800ca12 <xQueueReceiveFromISR+0x56>
 800c9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca02:	f383 8811 	msr	BASEPRI, r3
 800ca06:	f3bf 8f6f 	isb	sy
 800ca0a:	f3bf 8f4f 	dsb	sy
 800ca0e:	61fb      	str	r3, [r7, #28]
 800ca10:	e7fe      	b.n	800ca10 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca12:	f002 f9a7 	bl	800ed64 <vPortValidateInterruptPriority>
	__asm volatile
 800ca16:	f3ef 8211 	mrs	r2, BASEPRI
 800ca1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1e:	f383 8811 	msr	BASEPRI, r3
 800ca22:	f3bf 8f6f 	isb	sy
 800ca26:	f3bf 8f4f 	dsb	sy
 800ca2a:	61ba      	str	r2, [r7, #24]
 800ca2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ca2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d02f      	beq.n	800ca9e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ca3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca48:	68b9      	ldr	r1, [r7, #8]
 800ca4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca4c:	f000 f8d7 	bl	800cbfe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca52:	1e5a      	subs	r2, r3, #1
 800ca54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ca58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ca5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca60:	d112      	bne.n	800ca88 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca64:	691b      	ldr	r3, [r3, #16]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d016      	beq.n	800ca98 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6c:	3310      	adds	r3, #16
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f000 fe7c 	bl	800d76c <xTaskRemoveFromEventList>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d00e      	beq.n	800ca98 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d00b      	beq.n	800ca98 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2201      	movs	r2, #1
 800ca84:	601a      	str	r2, [r3, #0]
 800ca86:	e007      	b.n	800ca98 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ca88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	b25a      	sxtb	r2, r3
 800ca92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ca9c:	e001      	b.n	800caa2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	637b      	str	r3, [r7, #52]	; 0x34
 800caa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800caac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3738      	adds	r7, #56	; 0x38
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}

0800cab6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cab6:	b580      	push	{r7, lr}
 800cab8:	b084      	sub	sp, #16
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d109      	bne.n	800cadc <vQueueDelete+0x26>
	__asm volatile
 800cac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cacc:	f383 8811 	msr	BASEPRI, r3
 800cad0:	f3bf 8f6f 	isb	sy
 800cad4:	f3bf 8f4f 	dsb	sy
 800cad8:	60bb      	str	r3, [r7, #8]
 800cada:	e7fe      	b.n	800cada <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800cadc:	68f8      	ldr	r0, [r7, #12]
 800cade:	f000 f95d 	bl	800cd9c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d102      	bne.n	800caf2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800caec:	68f8      	ldr	r0, [r7, #12]
 800caee:	f002 fa39 	bl	800ef64 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800caf2:	bf00      	nop
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}

0800cafa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cafa:	b480      	push	{r7}
 800cafc:	b085      	sub	sp, #20
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d006      	beq.n	800cb18 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800cb14:	60fb      	str	r3, [r7, #12]
 800cb16:	e001      	b.n	800cb1c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
	}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3714      	adds	r7, #20
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr

0800cb2a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b086      	sub	sp, #24
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	60f8      	str	r0, [r7, #12]
 800cb32:	60b9      	str	r1, [r7, #8]
 800cb34:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cb36:	2300      	movs	r3, #0
 800cb38:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb3e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d10d      	bne.n	800cb64 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d14d      	bne.n	800cbec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	689b      	ldr	r3, [r3, #8]
 800cb54:	4618      	mov	r0, r3
 800cb56:	f001 f87d 	bl	800dc54 <xTaskPriorityDisinherit>
 800cb5a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	609a      	str	r2, [r3, #8]
 800cb62:	e043      	b.n	800cbec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d119      	bne.n	800cb9e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	6858      	ldr	r0, [r3, #4]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb72:	461a      	mov	r2, r3
 800cb74:	68b9      	ldr	r1, [r7, #8]
 800cb76:	f004 fb9b 	bl	80112b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	685a      	ldr	r2, [r3, #4]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb82:	441a      	add	r2, r3
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	685a      	ldr	r2, [r3, #4]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	689b      	ldr	r3, [r3, #8]
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d32b      	bcc.n	800cbec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	605a      	str	r2, [r3, #4]
 800cb9c:	e026      	b.n	800cbec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	68d8      	ldr	r0, [r3, #12]
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cba6:	461a      	mov	r2, r3
 800cba8:	68b9      	ldr	r1, [r7, #8]
 800cbaa:	f004 fb81 	bl	80112b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	68da      	ldr	r2, [r3, #12]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbb6:	425b      	negs	r3, r3
 800cbb8:	441a      	add	r2, r3
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	68da      	ldr	r2, [r3, #12]
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d207      	bcs.n	800cbda <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	689a      	ldr	r2, [r3, #8]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbd2:	425b      	negs	r3, r3
 800cbd4:	441a      	add	r2, r3
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2b02      	cmp	r3, #2
 800cbde:	d105      	bne.n	800cbec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d002      	beq.n	800cbec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	3b01      	subs	r3, #1
 800cbea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	1c5a      	adds	r2, r3, #1
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cbf4:	697b      	ldr	r3, [r7, #20]
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3718      	adds	r7, #24
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}

0800cbfe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cbfe:	b580      	push	{r7, lr}
 800cc00:	b082      	sub	sp, #8
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
 800cc06:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d018      	beq.n	800cc42 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	68da      	ldr	r2, [r3, #12]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc18:	441a      	add	r2, r3
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	68da      	ldr	r2, [r3, #12]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d303      	bcc.n	800cc32 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	68d9      	ldr	r1, [r3, #12]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	6838      	ldr	r0, [r7, #0]
 800cc3e:	f004 fb37 	bl	80112b0 <memcpy>
	}
}
 800cc42:	bf00      	nop
 800cc44:	3708      	adds	r7, #8
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	b084      	sub	sp, #16
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cc52:	f001 ffab 	bl	800ebac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc5c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc5e:	e011      	b.n	800cc84 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d012      	beq.n	800cc8e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	3324      	adds	r3, #36	; 0x24
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f000 fd7d 	bl	800d76c <xTaskRemoveFromEventList>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d001      	beq.n	800cc7c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cc78:	f000 fe52 	bl	800d920 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cc7c:	7bfb      	ldrb	r3, [r7, #15]
 800cc7e:	3b01      	subs	r3, #1
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	dce9      	bgt.n	800cc60 <prvUnlockQueue+0x16>
 800cc8c:	e000      	b.n	800cc90 <prvUnlockQueue+0x46>
					break;
 800cc8e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	22ff      	movs	r2, #255	; 0xff
 800cc94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cc98:	f001 ffb6 	bl	800ec08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cc9c:	f001 ff86 	bl	800ebac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cca6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cca8:	e011      	b.n	800ccce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	691b      	ldr	r3, [r3, #16]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d012      	beq.n	800ccd8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	3310      	adds	r3, #16
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f000 fd58 	bl	800d76c <xTaskRemoveFromEventList>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d001      	beq.n	800ccc6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ccc2:	f000 fe2d 	bl	800d920 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ccc6:	7bbb      	ldrb	r3, [r7, #14]
 800ccc8:	3b01      	subs	r3, #1
 800ccca:	b2db      	uxtb	r3, r3
 800cccc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ccce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	dce9      	bgt.n	800ccaa <prvUnlockQueue+0x60>
 800ccd6:	e000      	b.n	800ccda <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ccd8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	22ff      	movs	r2, #255	; 0xff
 800ccde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cce2:	f001 ff91 	bl	800ec08 <vPortExitCritical>
}
 800cce6:	bf00      	nop
 800cce8:	3710      	adds	r7, #16
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}

0800ccee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ccee:	b580      	push	{r7, lr}
 800ccf0:	b084      	sub	sp, #16
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ccf6:	f001 ff59 	bl	800ebac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d102      	bne.n	800cd08 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cd02:	2301      	movs	r3, #1
 800cd04:	60fb      	str	r3, [r7, #12]
 800cd06:	e001      	b.n	800cd0c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd0c:	f001 ff7c 	bl	800ec08 <vPortExitCritical>

	return xReturn;
 800cd10:	68fb      	ldr	r3, [r7, #12]
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3710      	adds	r7, #16
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cd1a:	b580      	push	{r7, lr}
 800cd1c:	b084      	sub	sp, #16
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd22:	f001 ff43 	bl	800ebac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d102      	bne.n	800cd38 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cd32:	2301      	movs	r3, #1
 800cd34:	60fb      	str	r3, [r7, #12]
 800cd36:	e001      	b.n	800cd3c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd3c:	f001 ff64 	bl	800ec08 <vPortExitCritical>

	return xReturn;
 800cd40:	68fb      	ldr	r3, [r7, #12]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3710      	adds	r7, #16
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
	...

0800cd4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b085      	sub	sp, #20
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd56:	2300      	movs	r3, #0
 800cd58:	60fb      	str	r3, [r7, #12]
 800cd5a:	e014      	b.n	800cd86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cd5c:	4a0e      	ldr	r2, [pc, #56]	; (800cd98 <vQueueAddToRegistry+0x4c>)
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d10b      	bne.n	800cd80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cd68:	490b      	ldr	r1, [pc, #44]	; (800cd98 <vQueueAddToRegistry+0x4c>)
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	683a      	ldr	r2, [r7, #0]
 800cd6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cd72:	4a09      	ldr	r2, [pc, #36]	; (800cd98 <vQueueAddToRegistry+0x4c>)
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	00db      	lsls	r3, r3, #3
 800cd78:	4413      	add	r3, r2
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cd7e:	e005      	b.n	800cd8c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	3301      	adds	r3, #1
 800cd84:	60fb      	str	r3, [r7, #12]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2b07      	cmp	r3, #7
 800cd8a:	d9e7      	bls.n	800cd5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cd8c:	bf00      	nop
 800cd8e:	3714      	adds	r7, #20
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr
 800cd98:	20006f14 	.word	0x20006f14

0800cd9c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b085      	sub	sp, #20
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cda4:	2300      	movs	r3, #0
 800cda6:	60fb      	str	r3, [r7, #12]
 800cda8:	e016      	b.n	800cdd8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cdaa:	4a10      	ldr	r2, [pc, #64]	; (800cdec <vQueueUnregisterQueue+0x50>)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	00db      	lsls	r3, r3, #3
 800cdb0:	4413      	add	r3, r2
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	687a      	ldr	r2, [r7, #4]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d10b      	bne.n	800cdd2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cdba:	4a0c      	ldr	r2, [pc, #48]	; (800cdec <vQueueUnregisterQueue+0x50>)
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2100      	movs	r1, #0
 800cdc0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cdc4:	4a09      	ldr	r2, [pc, #36]	; (800cdec <vQueueUnregisterQueue+0x50>)
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	00db      	lsls	r3, r3, #3
 800cdca:	4413      	add	r3, r2
 800cdcc:	2200      	movs	r2, #0
 800cdce:	605a      	str	r2, [r3, #4]
				break;
 800cdd0:	e005      	b.n	800cdde <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	60fb      	str	r3, [r7, #12]
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2b07      	cmp	r3, #7
 800cddc:	d9e5      	bls.n	800cdaa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cdde:	bf00      	nop
 800cde0:	3714      	adds	r7, #20
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr
 800cdea:	bf00      	nop
 800cdec:	20006f14 	.word	0x20006f14

0800cdf0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ce00:	f001 fed4 	bl	800ebac <vPortEnterCritical>
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce0a:	b25b      	sxtb	r3, r3
 800ce0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce10:	d103      	bne.n	800ce1a <vQueueWaitForMessageRestricted+0x2a>
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	2200      	movs	r2, #0
 800ce16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce20:	b25b      	sxtb	r3, r3
 800ce22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce26:	d103      	bne.n	800ce30 <vQueueWaitForMessageRestricted+0x40>
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce30:	f001 feea 	bl	800ec08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d106      	bne.n	800ce4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	3324      	adds	r3, #36	; 0x24
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	68b9      	ldr	r1, [r7, #8]
 800ce44:	4618      	mov	r0, r3
 800ce46:	f000 fc67 	bl	800d718 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ce4a:	6978      	ldr	r0, [r7, #20]
 800ce4c:	f7ff fefd 	bl	800cc4a <prvUnlockQueue>
	}
 800ce50:	bf00      	nop
 800ce52:	3718      	adds	r7, #24
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b08e      	sub	sp, #56	; 0x38
 800ce5c:	af04      	add	r7, sp, #16
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
 800ce64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ce66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d109      	bne.n	800ce80 <xTaskCreateStatic+0x28>
 800ce6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce70:	f383 8811 	msr	BASEPRI, r3
 800ce74:	f3bf 8f6f 	isb	sy
 800ce78:	f3bf 8f4f 	dsb	sy
 800ce7c:	623b      	str	r3, [r7, #32]
 800ce7e:	e7fe      	b.n	800ce7e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800ce80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d109      	bne.n	800ce9a <xTaskCreateStatic+0x42>
 800ce86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8a:	f383 8811 	msr	BASEPRI, r3
 800ce8e:	f3bf 8f6f 	isb	sy
 800ce92:	f3bf 8f4f 	dsb	sy
 800ce96:	61fb      	str	r3, [r7, #28]
 800ce98:	e7fe      	b.n	800ce98 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ce9a:	235c      	movs	r3, #92	; 0x5c
 800ce9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	2b5c      	cmp	r3, #92	; 0x5c
 800cea2:	d009      	beq.n	800ceb8 <xTaskCreateStatic+0x60>
 800cea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea8:	f383 8811 	msr	BASEPRI, r3
 800ceac:	f3bf 8f6f 	isb	sy
 800ceb0:	f3bf 8f4f 	dsb	sy
 800ceb4:	61bb      	str	r3, [r7, #24]
 800ceb6:	e7fe      	b.n	800ceb6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ceb8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ceba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d01e      	beq.n	800cefe <xTaskCreateStatic+0xa6>
 800cec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d01b      	beq.n	800cefe <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ceca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cece:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ced0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced2:	2202      	movs	r2, #2
 800ced4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ced8:	2300      	movs	r3, #0
 800ceda:	9303      	str	r3, [sp, #12]
 800cedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cede:	9302      	str	r3, [sp, #8]
 800cee0:	f107 0314 	add.w	r3, r7, #20
 800cee4:	9301      	str	r3, [sp, #4]
 800cee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	68b9      	ldr	r1, [r7, #8]
 800cef0:	68f8      	ldr	r0, [r7, #12]
 800cef2:	f000 f850 	bl	800cf96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cef6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cef8:	f000 f8dc 	bl	800d0b4 <prvAddNewTaskToReadyList>
 800cefc:	e001      	b.n	800cf02 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800cefe:	2300      	movs	r3, #0
 800cf00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cf02:	697b      	ldr	r3, [r7, #20]
	}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3728      	adds	r7, #40	; 0x28
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b08c      	sub	sp, #48	; 0x30
 800cf10:	af04      	add	r7, sp, #16
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	603b      	str	r3, [r7, #0]
 800cf18:	4613      	mov	r3, r2
 800cf1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cf1c:	88fb      	ldrh	r3, [r7, #6]
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	4618      	mov	r0, r3
 800cf22:	f001 ff5d 	bl	800ede0 <pvPortMalloc>
 800cf26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d00e      	beq.n	800cf4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cf2e:	205c      	movs	r0, #92	; 0x5c
 800cf30:	f001 ff56 	bl	800ede0 <pvPortMalloc>
 800cf34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cf36:	69fb      	ldr	r3, [r7, #28]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d003      	beq.n	800cf44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	697a      	ldr	r2, [r7, #20]
 800cf40:	631a      	str	r2, [r3, #48]	; 0x30
 800cf42:	e005      	b.n	800cf50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cf44:	6978      	ldr	r0, [r7, #20]
 800cf46:	f002 f80d 	bl	800ef64 <vPortFree>
 800cf4a:	e001      	b.n	800cf50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d017      	beq.n	800cf86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cf56:	69fb      	ldr	r3, [r7, #28]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cf5e:	88fa      	ldrh	r2, [r7, #6]
 800cf60:	2300      	movs	r3, #0
 800cf62:	9303      	str	r3, [sp, #12]
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	9302      	str	r3, [sp, #8]
 800cf68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6a:	9301      	str	r3, [sp, #4]
 800cf6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf6e:	9300      	str	r3, [sp, #0]
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	68b9      	ldr	r1, [r7, #8]
 800cf74:	68f8      	ldr	r0, [r7, #12]
 800cf76:	f000 f80e 	bl	800cf96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf7a:	69f8      	ldr	r0, [r7, #28]
 800cf7c:	f000 f89a 	bl	800d0b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cf80:	2301      	movs	r3, #1
 800cf82:	61bb      	str	r3, [r7, #24]
 800cf84:	e002      	b.n	800cf8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cf86:	f04f 33ff 	mov.w	r3, #4294967295
 800cf8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cf8c:	69bb      	ldr	r3, [r7, #24]
	}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3720      	adds	r7, #32
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cf96:	b580      	push	{r7, lr}
 800cf98:	b088      	sub	sp, #32
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	60f8      	str	r0, [r7, #12]
 800cf9e:	60b9      	str	r1, [r7, #8]
 800cfa0:	607a      	str	r2, [r7, #4]
 800cfa2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	461a      	mov	r2, r3
 800cfae:	21a5      	movs	r1, #165	; 0xa5
 800cfb0:	f004 f989 	bl	80112c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cfbe:	3b01      	subs	r3, #1
 800cfc0:	009b      	lsls	r3, r3, #2
 800cfc2:	4413      	add	r3, r2
 800cfc4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cfc6:	69bb      	ldr	r3, [r7, #24]
 800cfc8:	f023 0307 	bic.w	r3, r3, #7
 800cfcc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	f003 0307 	and.w	r3, r3, #7
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d009      	beq.n	800cfec <prvInitialiseNewTask+0x56>
 800cfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfdc:	f383 8811 	msr	BASEPRI, r3
 800cfe0:	f3bf 8f6f 	isb	sy
 800cfe4:	f3bf 8f4f 	dsb	sy
 800cfe8:	617b      	str	r3, [r7, #20]
 800cfea:	e7fe      	b.n	800cfea <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d01f      	beq.n	800d032 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cff2:	2300      	movs	r3, #0
 800cff4:	61fb      	str	r3, [r7, #28]
 800cff6:	e012      	b.n	800d01e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cff8:	68ba      	ldr	r2, [r7, #8]
 800cffa:	69fb      	ldr	r3, [r7, #28]
 800cffc:	4413      	add	r3, r2
 800cffe:	7819      	ldrb	r1, [r3, #0]
 800d000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	4413      	add	r3, r2
 800d006:	3334      	adds	r3, #52	; 0x34
 800d008:	460a      	mov	r2, r1
 800d00a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d00c:	68ba      	ldr	r2, [r7, #8]
 800d00e:	69fb      	ldr	r3, [r7, #28]
 800d010:	4413      	add	r3, r2
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d006      	beq.n	800d026 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d018:	69fb      	ldr	r3, [r7, #28]
 800d01a:	3301      	adds	r3, #1
 800d01c:	61fb      	str	r3, [r7, #28]
 800d01e:	69fb      	ldr	r3, [r7, #28]
 800d020:	2b0f      	cmp	r3, #15
 800d022:	d9e9      	bls.n	800cff8 <prvInitialiseNewTask+0x62>
 800d024:	e000      	b.n	800d028 <prvInitialiseNewTask+0x92>
			{
				break;
 800d026:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02a:	2200      	movs	r2, #0
 800d02c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d030:	e003      	b.n	800d03a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d034:	2200      	movs	r2, #0
 800d036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03c:	2b37      	cmp	r3, #55	; 0x37
 800d03e:	d901      	bls.n	800d044 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d040:	2337      	movs	r3, #55	; 0x37
 800d042:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d048:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d04e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d052:	2200      	movs	r2, #0
 800d054:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d058:	3304      	adds	r3, #4
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7fe fdc6 	bl	800bbec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d062:	3318      	adds	r3, #24
 800d064:	4618      	mov	r0, r3
 800d066:	f7fe fdc1 	bl	800bbec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d06e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d072:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d078:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d07e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d082:	2200      	movs	r2, #0
 800d084:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d088:	2200      	movs	r2, #0
 800d08a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d08e:	683a      	ldr	r2, [r7, #0]
 800d090:	68f9      	ldr	r1, [r7, #12]
 800d092:	69b8      	ldr	r0, [r7, #24]
 800d094:	f001 fc60 	bl	800e958 <pxPortInitialiseStack>
 800d098:	4602      	mov	r2, r0
 800d09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d002      	beq.n	800d0aa <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0aa:	bf00      	nop
 800d0ac:	3720      	adds	r7, #32
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
	...

0800d0b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d0bc:	f001 fd76 	bl	800ebac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d0c0:	4b2d      	ldr	r3, [pc, #180]	; (800d178 <prvAddNewTaskToReadyList+0xc4>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	4a2c      	ldr	r2, [pc, #176]	; (800d178 <prvAddNewTaskToReadyList+0xc4>)
 800d0c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d0ca:	4b2c      	ldr	r3, [pc, #176]	; (800d17c <prvAddNewTaskToReadyList+0xc8>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d109      	bne.n	800d0e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d0d2:	4a2a      	ldr	r2, [pc, #168]	; (800d17c <prvAddNewTaskToReadyList+0xc8>)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d0d8:	4b27      	ldr	r3, [pc, #156]	; (800d178 <prvAddNewTaskToReadyList+0xc4>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d110      	bne.n	800d102 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d0e0:	f000 fc68 	bl	800d9b4 <prvInitialiseTaskLists>
 800d0e4:	e00d      	b.n	800d102 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d0e6:	4b26      	ldr	r3, [pc, #152]	; (800d180 <prvAddNewTaskToReadyList+0xcc>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d109      	bne.n	800d102 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d0ee:	4b23      	ldr	r3, [pc, #140]	; (800d17c <prvAddNewTaskToReadyList+0xc8>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d802      	bhi.n	800d102 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d0fc:	4a1f      	ldr	r2, [pc, #124]	; (800d17c <prvAddNewTaskToReadyList+0xc8>)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d102:	4b20      	ldr	r3, [pc, #128]	; (800d184 <prvAddNewTaskToReadyList+0xd0>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	3301      	adds	r3, #1
 800d108:	4a1e      	ldr	r2, [pc, #120]	; (800d184 <prvAddNewTaskToReadyList+0xd0>)
 800d10a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d10c:	4b1d      	ldr	r3, [pc, #116]	; (800d184 <prvAddNewTaskToReadyList+0xd0>)
 800d10e:	681a      	ldr	r2, [r3, #0]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d118:	4b1b      	ldr	r3, [pc, #108]	; (800d188 <prvAddNewTaskToReadyList+0xd4>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d903      	bls.n	800d128 <prvAddNewTaskToReadyList+0x74>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d124:	4a18      	ldr	r2, [pc, #96]	; (800d188 <prvAddNewTaskToReadyList+0xd4>)
 800d126:	6013      	str	r3, [r2, #0]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d12c:	4613      	mov	r3, r2
 800d12e:	009b      	lsls	r3, r3, #2
 800d130:	4413      	add	r3, r2
 800d132:	009b      	lsls	r3, r3, #2
 800d134:	4a15      	ldr	r2, [pc, #84]	; (800d18c <prvAddNewTaskToReadyList+0xd8>)
 800d136:	441a      	add	r2, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	3304      	adds	r3, #4
 800d13c:	4619      	mov	r1, r3
 800d13e:	4610      	mov	r0, r2
 800d140:	f7fe fd61 	bl	800bc06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d144:	f001 fd60 	bl	800ec08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d148:	4b0d      	ldr	r3, [pc, #52]	; (800d180 <prvAddNewTaskToReadyList+0xcc>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d00e      	beq.n	800d16e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d150:	4b0a      	ldr	r3, [pc, #40]	; (800d17c <prvAddNewTaskToReadyList+0xc8>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d207      	bcs.n	800d16e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d15e:	4b0c      	ldr	r3, [pc, #48]	; (800d190 <prvAddNewTaskToReadyList+0xdc>)
 800d160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d164:	601a      	str	r2, [r3, #0]
 800d166:	f3bf 8f4f 	dsb	sy
 800d16a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d16e:	bf00      	nop
 800d170:	3708      	adds	r7, #8
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	20002cc0 	.word	0x20002cc0
 800d17c:	200027ec 	.word	0x200027ec
 800d180:	20002ccc 	.word	0x20002ccc
 800d184:	20002cdc 	.word	0x20002cdc
 800d188:	20002cc8 	.word	0x20002cc8
 800d18c:	200027f0 	.word	0x200027f0
 800d190:	e000ed04 	.word	0xe000ed04

0800d194 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d19c:	2300      	movs	r3, #0
 800d19e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d016      	beq.n	800d1d4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d1a6:	4b13      	ldr	r3, [pc, #76]	; (800d1f4 <vTaskDelay+0x60>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d009      	beq.n	800d1c2 <vTaskDelay+0x2e>
 800d1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b2:	f383 8811 	msr	BASEPRI, r3
 800d1b6:	f3bf 8f6f 	isb	sy
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	60bb      	str	r3, [r7, #8]
 800d1c0:	e7fe      	b.n	800d1c0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800d1c2:	f000 f87f 	bl	800d2c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d1c6:	2100      	movs	r1, #0
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f001 f82b 	bl	800e224 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d1ce:	f000 f8bf 	bl	800d350 <xTaskResumeAll>
 800d1d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d107      	bne.n	800d1ea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800d1da:	4b07      	ldr	r3, [pc, #28]	; (800d1f8 <vTaskDelay+0x64>)
 800d1dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1e0:	601a      	str	r2, [r3, #0]
 800d1e2:	f3bf 8f4f 	dsb	sy
 800d1e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d1ea:	bf00      	nop
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	bf00      	nop
 800d1f4:	20002ce8 	.word	0x20002ce8
 800d1f8:	e000ed04 	.word	0xe000ed04

0800d1fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b08a      	sub	sp, #40	; 0x28
 800d200:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d202:	2300      	movs	r3, #0
 800d204:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d206:	2300      	movs	r3, #0
 800d208:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d20a:	463a      	mov	r2, r7
 800d20c:	1d39      	adds	r1, r7, #4
 800d20e:	f107 0308 	add.w	r3, r7, #8
 800d212:	4618      	mov	r0, r3
 800d214:	f7fe fc96 	bl	800bb44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d218:	6839      	ldr	r1, [r7, #0]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	68ba      	ldr	r2, [r7, #8]
 800d21e:	9202      	str	r2, [sp, #8]
 800d220:	9301      	str	r3, [sp, #4]
 800d222:	2300      	movs	r3, #0
 800d224:	9300      	str	r3, [sp, #0]
 800d226:	2300      	movs	r3, #0
 800d228:	460a      	mov	r2, r1
 800d22a:	4920      	ldr	r1, [pc, #128]	; (800d2ac <vTaskStartScheduler+0xb0>)
 800d22c:	4820      	ldr	r0, [pc, #128]	; (800d2b0 <vTaskStartScheduler+0xb4>)
 800d22e:	f7ff fe13 	bl	800ce58 <xTaskCreateStatic>
 800d232:	4602      	mov	r2, r0
 800d234:	4b1f      	ldr	r3, [pc, #124]	; (800d2b4 <vTaskStartScheduler+0xb8>)
 800d236:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d238:	4b1e      	ldr	r3, [pc, #120]	; (800d2b4 <vTaskStartScheduler+0xb8>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d002      	beq.n	800d246 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d240:	2301      	movs	r3, #1
 800d242:	617b      	str	r3, [r7, #20]
 800d244:	e001      	b.n	800d24a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d246:	2300      	movs	r3, #0
 800d248:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d102      	bne.n	800d256 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d250:	f001 f83c 	bl	800e2cc <xTimerCreateTimerTask>
 800d254:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d115      	bne.n	800d288 <vTaskStartScheduler+0x8c>
 800d25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d260:	f383 8811 	msr	BASEPRI, r3
 800d264:	f3bf 8f6f 	isb	sy
 800d268:	f3bf 8f4f 	dsb	sy
 800d26c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d26e:	4b12      	ldr	r3, [pc, #72]	; (800d2b8 <vTaskStartScheduler+0xbc>)
 800d270:	f04f 32ff 	mov.w	r2, #4294967295
 800d274:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d276:	4b11      	ldr	r3, [pc, #68]	; (800d2bc <vTaskStartScheduler+0xc0>)
 800d278:	2201      	movs	r2, #1
 800d27a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d27c:	4b10      	ldr	r3, [pc, #64]	; (800d2c0 <vTaskStartScheduler+0xc4>)
 800d27e:	2200      	movs	r2, #0
 800d280:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d282:	f001 fbf5 	bl	800ea70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d286:	e00d      	b.n	800d2a4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d28e:	d109      	bne.n	800d2a4 <vTaskStartScheduler+0xa8>
 800d290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d294:	f383 8811 	msr	BASEPRI, r3
 800d298:	f3bf 8f6f 	isb	sy
 800d29c:	f3bf 8f4f 	dsb	sy
 800d2a0:	60fb      	str	r3, [r7, #12]
 800d2a2:	e7fe      	b.n	800d2a2 <vTaskStartScheduler+0xa6>
}
 800d2a4:	bf00      	nop
 800d2a6:	3718      	adds	r7, #24
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}
 800d2ac:	080127f8 	.word	0x080127f8
 800d2b0:	0800d939 	.word	0x0800d939
 800d2b4:	20002ce4 	.word	0x20002ce4
 800d2b8:	20002ce0 	.word	0x20002ce0
 800d2bc:	20002ccc 	.word	0x20002ccc
 800d2c0:	20002cc4 	.word	0x20002cc4

0800d2c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d2c8:	4b04      	ldr	r3, [pc, #16]	; (800d2dc <vTaskSuspendAll+0x18>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	4a03      	ldr	r2, [pc, #12]	; (800d2dc <vTaskSuspendAll+0x18>)
 800d2d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d2d2:	bf00      	nop
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr
 800d2dc:	20002ce8 	.word	0x20002ce8

0800d2e0 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b083      	sub	sp, #12
 800d2e4:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800d2ea:	4b14      	ldr	r3, [pc, #80]	; (800d33c <prvGetExpectedIdleTime+0x5c>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d001      	beq.n	800d2f6 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800d2f6:	4b12      	ldr	r3, [pc, #72]	; (800d340 <prvGetExpectedIdleTime+0x60>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d002      	beq.n	800d306 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800d300:	2300      	movs	r3, #0
 800d302:	607b      	str	r3, [r7, #4]
 800d304:	e012      	b.n	800d32c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800d306:	4b0f      	ldr	r3, [pc, #60]	; (800d344 <prvGetExpectedIdleTime+0x64>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d902      	bls.n	800d314 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800d30e:	2300      	movs	r3, #0
 800d310:	607b      	str	r3, [r7, #4]
 800d312:	e00b      	b.n	800d32c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d002      	beq.n	800d320 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800d31a:	2300      	movs	r3, #0
 800d31c:	607b      	str	r3, [r7, #4]
 800d31e:	e005      	b.n	800d32c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800d320:	4b09      	ldr	r3, [pc, #36]	; (800d348 <prvGetExpectedIdleTime+0x68>)
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	4b09      	ldr	r3, [pc, #36]	; (800d34c <prvGetExpectedIdleTime+0x6c>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	1ad3      	subs	r3, r2, r3
 800d32a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800d32c:	687b      	ldr	r3, [r7, #4]
	}
 800d32e:	4618      	mov	r0, r3
 800d330:	370c      	adds	r7, #12
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	20002cc8 	.word	0x20002cc8
 800d340:	200027ec 	.word	0x200027ec
 800d344:	200027f0 	.word	0x200027f0
 800d348:	20002ce0 	.word	0x20002ce0
 800d34c:	20002cc4 	.word	0x20002cc4

0800d350 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d356:	2300      	movs	r3, #0
 800d358:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d35a:	2300      	movs	r3, #0
 800d35c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d35e:	4b41      	ldr	r3, [pc, #260]	; (800d464 <xTaskResumeAll+0x114>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d109      	bne.n	800d37a <xTaskResumeAll+0x2a>
 800d366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36a:	f383 8811 	msr	BASEPRI, r3
 800d36e:	f3bf 8f6f 	isb	sy
 800d372:	f3bf 8f4f 	dsb	sy
 800d376:	603b      	str	r3, [r7, #0]
 800d378:	e7fe      	b.n	800d378 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d37a:	f001 fc17 	bl	800ebac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d37e:	4b39      	ldr	r3, [pc, #228]	; (800d464 <xTaskResumeAll+0x114>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	3b01      	subs	r3, #1
 800d384:	4a37      	ldr	r2, [pc, #220]	; (800d464 <xTaskResumeAll+0x114>)
 800d386:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d388:	4b36      	ldr	r3, [pc, #216]	; (800d464 <xTaskResumeAll+0x114>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d162      	bne.n	800d456 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d390:	4b35      	ldr	r3, [pc, #212]	; (800d468 <xTaskResumeAll+0x118>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d05e      	beq.n	800d456 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d398:	e02f      	b.n	800d3fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d39a:	4b34      	ldr	r3, [pc, #208]	; (800d46c <xTaskResumeAll+0x11c>)
 800d39c:	68db      	ldr	r3, [r3, #12]
 800d39e:	68db      	ldr	r3, [r3, #12]
 800d3a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	3318      	adds	r3, #24
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7fe fc8a 	bl	800bcc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	3304      	adds	r3, #4
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7fe fc85 	bl	800bcc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ba:	4b2d      	ldr	r3, [pc, #180]	; (800d470 <xTaskResumeAll+0x120>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d903      	bls.n	800d3ca <xTaskResumeAll+0x7a>
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c6:	4a2a      	ldr	r2, [pc, #168]	; (800d470 <xTaskResumeAll+0x120>)
 800d3c8:	6013      	str	r3, [r2, #0]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ce:	4613      	mov	r3, r2
 800d3d0:	009b      	lsls	r3, r3, #2
 800d3d2:	4413      	add	r3, r2
 800d3d4:	009b      	lsls	r3, r3, #2
 800d3d6:	4a27      	ldr	r2, [pc, #156]	; (800d474 <xTaskResumeAll+0x124>)
 800d3d8:	441a      	add	r2, r3
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	3304      	adds	r3, #4
 800d3de:	4619      	mov	r1, r3
 800d3e0:	4610      	mov	r0, r2
 800d3e2:	f7fe fc10 	bl	800bc06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ea:	4b23      	ldr	r3, [pc, #140]	; (800d478 <xTaskResumeAll+0x128>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d302      	bcc.n	800d3fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d3f4:	4b21      	ldr	r3, [pc, #132]	; (800d47c <xTaskResumeAll+0x12c>)
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d3fa:	4b1c      	ldr	r3, [pc, #112]	; (800d46c <xTaskResumeAll+0x11c>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d1cb      	bne.n	800d39a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d001      	beq.n	800d40c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d408:	f000 fb6e 	bl	800dae8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d40c:	4b1c      	ldr	r3, [pc, #112]	; (800d480 <xTaskResumeAll+0x130>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d010      	beq.n	800d43a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d418:	f000 f846 	bl	800d4a8 <xTaskIncrementTick>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d002      	beq.n	800d428 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d422:	4b16      	ldr	r3, [pc, #88]	; (800d47c <xTaskResumeAll+0x12c>)
 800d424:	2201      	movs	r2, #1
 800d426:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	3b01      	subs	r3, #1
 800d42c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d1f1      	bne.n	800d418 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800d434:	4b12      	ldr	r3, [pc, #72]	; (800d480 <xTaskResumeAll+0x130>)
 800d436:	2200      	movs	r2, #0
 800d438:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d43a:	4b10      	ldr	r3, [pc, #64]	; (800d47c <xTaskResumeAll+0x12c>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d009      	beq.n	800d456 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d442:	2301      	movs	r3, #1
 800d444:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d446:	4b0f      	ldr	r3, [pc, #60]	; (800d484 <xTaskResumeAll+0x134>)
 800d448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d44c:	601a      	str	r2, [r3, #0]
 800d44e:	f3bf 8f4f 	dsb	sy
 800d452:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d456:	f001 fbd7 	bl	800ec08 <vPortExitCritical>

	return xAlreadyYielded;
 800d45a:	68bb      	ldr	r3, [r7, #8]
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3710      	adds	r7, #16
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	20002ce8 	.word	0x20002ce8
 800d468:	20002cc0 	.word	0x20002cc0
 800d46c:	20002c80 	.word	0x20002c80
 800d470:	20002cc8 	.word	0x20002cc8
 800d474:	200027f0 	.word	0x200027f0
 800d478:	200027ec 	.word	0x200027ec
 800d47c:	20002cd4 	.word	0x20002cd4
 800d480:	20002cd0 	.word	0x20002cd0
 800d484:	e000ed04 	.word	0xe000ed04

0800d488 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d48e:	4b05      	ldr	r3, [pc, #20]	; (800d4a4 <xTaskGetTickCount+0x1c>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d494:	687b      	ldr	r3, [r7, #4]
}
 800d496:	4618      	mov	r0, r3
 800d498:	370c      	adds	r7, #12
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	20002cc4 	.word	0x20002cc4

0800d4a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b086      	sub	sp, #24
 800d4ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4b2:	4b4e      	ldr	r3, [pc, #312]	; (800d5ec <xTaskIncrementTick+0x144>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	f040 8088 	bne.w	800d5cc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d4bc:	4b4c      	ldr	r3, [pc, #304]	; (800d5f0 <xTaskIncrementTick+0x148>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d4c4:	4a4a      	ldr	r2, [pc, #296]	; (800d5f0 <xTaskIncrementTick+0x148>)
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d11f      	bne.n	800d510 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800d4d0:	4b48      	ldr	r3, [pc, #288]	; (800d5f4 <xTaskIncrementTick+0x14c>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d009      	beq.n	800d4ee <xTaskIncrementTick+0x46>
 800d4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4de:	f383 8811 	msr	BASEPRI, r3
 800d4e2:	f3bf 8f6f 	isb	sy
 800d4e6:	f3bf 8f4f 	dsb	sy
 800d4ea:	603b      	str	r3, [r7, #0]
 800d4ec:	e7fe      	b.n	800d4ec <xTaskIncrementTick+0x44>
 800d4ee:	4b41      	ldr	r3, [pc, #260]	; (800d5f4 <xTaskIncrementTick+0x14c>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	60fb      	str	r3, [r7, #12]
 800d4f4:	4b40      	ldr	r3, [pc, #256]	; (800d5f8 <xTaskIncrementTick+0x150>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4a3e      	ldr	r2, [pc, #248]	; (800d5f4 <xTaskIncrementTick+0x14c>)
 800d4fa:	6013      	str	r3, [r2, #0]
 800d4fc:	4a3e      	ldr	r2, [pc, #248]	; (800d5f8 <xTaskIncrementTick+0x150>)
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	6013      	str	r3, [r2, #0]
 800d502:	4b3e      	ldr	r3, [pc, #248]	; (800d5fc <xTaskIncrementTick+0x154>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	3301      	adds	r3, #1
 800d508:	4a3c      	ldr	r2, [pc, #240]	; (800d5fc <xTaskIncrementTick+0x154>)
 800d50a:	6013      	str	r3, [r2, #0]
 800d50c:	f000 faec 	bl	800dae8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d510:	4b3b      	ldr	r3, [pc, #236]	; (800d600 <xTaskIncrementTick+0x158>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	693a      	ldr	r2, [r7, #16]
 800d516:	429a      	cmp	r2, r3
 800d518:	d349      	bcc.n	800d5ae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d51a:	4b36      	ldr	r3, [pc, #216]	; (800d5f4 <xTaskIncrementTick+0x14c>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d104      	bne.n	800d52e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d524:	4b36      	ldr	r3, [pc, #216]	; (800d600 <xTaskIncrementTick+0x158>)
 800d526:	f04f 32ff 	mov.w	r2, #4294967295
 800d52a:	601a      	str	r2, [r3, #0]
					break;
 800d52c:	e03f      	b.n	800d5ae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d52e:	4b31      	ldr	r3, [pc, #196]	; (800d5f4 <xTaskIncrementTick+0x14c>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	68db      	ldr	r3, [r3, #12]
 800d536:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d53e:	693a      	ldr	r2, [r7, #16]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	429a      	cmp	r2, r3
 800d544:	d203      	bcs.n	800d54e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d546:	4a2e      	ldr	r2, [pc, #184]	; (800d600 <xTaskIncrementTick+0x158>)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d54c:	e02f      	b.n	800d5ae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	3304      	adds	r3, #4
 800d552:	4618      	mov	r0, r3
 800d554:	f7fe fbb4 	bl	800bcc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d004      	beq.n	800d56a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	3318      	adds	r3, #24
 800d564:	4618      	mov	r0, r3
 800d566:	f7fe fbab 	bl	800bcc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d56e:	4b25      	ldr	r3, [pc, #148]	; (800d604 <xTaskIncrementTick+0x15c>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	429a      	cmp	r2, r3
 800d574:	d903      	bls.n	800d57e <xTaskIncrementTick+0xd6>
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d57a:	4a22      	ldr	r2, [pc, #136]	; (800d604 <xTaskIncrementTick+0x15c>)
 800d57c:	6013      	str	r3, [r2, #0]
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d582:	4613      	mov	r3, r2
 800d584:	009b      	lsls	r3, r3, #2
 800d586:	4413      	add	r3, r2
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	4a1f      	ldr	r2, [pc, #124]	; (800d608 <xTaskIncrementTick+0x160>)
 800d58c:	441a      	add	r2, r3
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	3304      	adds	r3, #4
 800d592:	4619      	mov	r1, r3
 800d594:	4610      	mov	r0, r2
 800d596:	f7fe fb36 	bl	800bc06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d59e:	4b1b      	ldr	r3, [pc, #108]	; (800d60c <xTaskIncrementTick+0x164>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d3b8      	bcc.n	800d51a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5ac:	e7b5      	b.n	800d51a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d5ae:	4b17      	ldr	r3, [pc, #92]	; (800d60c <xTaskIncrementTick+0x164>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5b4:	4914      	ldr	r1, [pc, #80]	; (800d608 <xTaskIncrementTick+0x160>)
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	009b      	lsls	r3, r3, #2
 800d5ba:	4413      	add	r3, r2
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	440b      	add	r3, r1
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	2b01      	cmp	r3, #1
 800d5c4:	d907      	bls.n	800d5d6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	617b      	str	r3, [r7, #20]
 800d5ca:	e004      	b.n	800d5d6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d5cc:	4b10      	ldr	r3, [pc, #64]	; (800d610 <xTaskIncrementTick+0x168>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	4a0f      	ldr	r2, [pc, #60]	; (800d610 <xTaskIncrementTick+0x168>)
 800d5d4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d5d6:	4b0f      	ldr	r3, [pc, #60]	; (800d614 <xTaskIncrementTick+0x16c>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d001      	beq.n	800d5e2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d5e2:	697b      	ldr	r3, [r7, #20]
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3718      	adds	r7, #24
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	20002ce8 	.word	0x20002ce8
 800d5f0:	20002cc4 	.word	0x20002cc4
 800d5f4:	20002c78 	.word	0x20002c78
 800d5f8:	20002c7c 	.word	0x20002c7c
 800d5fc:	20002cd8 	.word	0x20002cd8
 800d600:	20002ce0 	.word	0x20002ce0
 800d604:	20002cc8 	.word	0x20002cc8
 800d608:	200027f0 	.word	0x200027f0
 800d60c:	200027ec 	.word	0x200027ec
 800d610:	20002cd0 	.word	0x20002cd0
 800d614:	20002cd4 	.word	0x20002cd4

0800d618 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d618:	b480      	push	{r7}
 800d61a:	b085      	sub	sp, #20
 800d61c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d61e:	4b27      	ldr	r3, [pc, #156]	; (800d6bc <vTaskSwitchContext+0xa4>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d003      	beq.n	800d62e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d626:	4b26      	ldr	r3, [pc, #152]	; (800d6c0 <vTaskSwitchContext+0xa8>)
 800d628:	2201      	movs	r2, #1
 800d62a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d62c:	e040      	b.n	800d6b0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800d62e:	4b24      	ldr	r3, [pc, #144]	; (800d6c0 <vTaskSwitchContext+0xa8>)
 800d630:	2200      	movs	r2, #0
 800d632:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d634:	4b23      	ldr	r3, [pc, #140]	; (800d6c4 <vTaskSwitchContext+0xac>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	60fb      	str	r3, [r7, #12]
 800d63a:	e00f      	b.n	800d65c <vTaskSwitchContext+0x44>
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d109      	bne.n	800d656 <vTaskSwitchContext+0x3e>
 800d642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d646:	f383 8811 	msr	BASEPRI, r3
 800d64a:	f3bf 8f6f 	isb	sy
 800d64e:	f3bf 8f4f 	dsb	sy
 800d652:	607b      	str	r3, [r7, #4]
 800d654:	e7fe      	b.n	800d654 <vTaskSwitchContext+0x3c>
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	3b01      	subs	r3, #1
 800d65a:	60fb      	str	r3, [r7, #12]
 800d65c:	491a      	ldr	r1, [pc, #104]	; (800d6c8 <vTaskSwitchContext+0xb0>)
 800d65e:	68fa      	ldr	r2, [r7, #12]
 800d660:	4613      	mov	r3, r2
 800d662:	009b      	lsls	r3, r3, #2
 800d664:	4413      	add	r3, r2
 800d666:	009b      	lsls	r3, r3, #2
 800d668:	440b      	add	r3, r1
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d0e5      	beq.n	800d63c <vTaskSwitchContext+0x24>
 800d670:	68fa      	ldr	r2, [r7, #12]
 800d672:	4613      	mov	r3, r2
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	4413      	add	r3, r2
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	4a13      	ldr	r2, [pc, #76]	; (800d6c8 <vTaskSwitchContext+0xb0>)
 800d67c:	4413      	add	r3, r2
 800d67e:	60bb      	str	r3, [r7, #8]
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	685a      	ldr	r2, [r3, #4]
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	605a      	str	r2, [r3, #4]
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	685a      	ldr	r2, [r3, #4]
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	3308      	adds	r3, #8
 800d692:	429a      	cmp	r2, r3
 800d694:	d104      	bne.n	800d6a0 <vTaskSwitchContext+0x88>
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	685a      	ldr	r2, [r3, #4]
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	605a      	str	r2, [r3, #4]
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	4a09      	ldr	r2, [pc, #36]	; (800d6cc <vTaskSwitchContext+0xb4>)
 800d6a8:	6013      	str	r3, [r2, #0]
 800d6aa:	4a06      	ldr	r2, [pc, #24]	; (800d6c4 <vTaskSwitchContext+0xac>)
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	6013      	str	r3, [r2, #0]
}
 800d6b0:	bf00      	nop
 800d6b2:	3714      	adds	r7, #20
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr
 800d6bc:	20002ce8 	.word	0x20002ce8
 800d6c0:	20002cd4 	.word	0x20002cd4
 800d6c4:	20002cc8 	.word	0x20002cc8
 800d6c8:	200027f0 	.word	0x200027f0
 800d6cc:	200027ec 	.word	0x200027ec

0800d6d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d109      	bne.n	800d6f4 <vTaskPlaceOnEventList+0x24>
 800d6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e4:	f383 8811 	msr	BASEPRI, r3
 800d6e8:	f3bf 8f6f 	isb	sy
 800d6ec:	f3bf 8f4f 	dsb	sy
 800d6f0:	60fb      	str	r3, [r7, #12]
 800d6f2:	e7fe      	b.n	800d6f2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d6f4:	4b07      	ldr	r3, [pc, #28]	; (800d714 <vTaskPlaceOnEventList+0x44>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	3318      	adds	r3, #24
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f7fe faa6 	bl	800bc4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d702:	2101      	movs	r1, #1
 800d704:	6838      	ldr	r0, [r7, #0]
 800d706:	f000 fd8d 	bl	800e224 <prvAddCurrentTaskToDelayedList>
}
 800d70a:	bf00      	nop
 800d70c:	3710      	adds	r7, #16
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	200027ec 	.word	0x200027ec

0800d718 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b086      	sub	sp, #24
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	60f8      	str	r0, [r7, #12]
 800d720:	60b9      	str	r1, [r7, #8]
 800d722:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d109      	bne.n	800d73e <vTaskPlaceOnEventListRestricted+0x26>
 800d72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72e:	f383 8811 	msr	BASEPRI, r3
 800d732:	f3bf 8f6f 	isb	sy
 800d736:	f3bf 8f4f 	dsb	sy
 800d73a:	617b      	str	r3, [r7, #20]
 800d73c:	e7fe      	b.n	800d73c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d73e:	4b0a      	ldr	r3, [pc, #40]	; (800d768 <vTaskPlaceOnEventListRestricted+0x50>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	3318      	adds	r3, #24
 800d744:	4619      	mov	r1, r3
 800d746:	68f8      	ldr	r0, [r7, #12]
 800d748:	f7fe fa5d 	bl	800bc06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d002      	beq.n	800d758 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800d752:	f04f 33ff 	mov.w	r3, #4294967295
 800d756:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d758:	6879      	ldr	r1, [r7, #4]
 800d75a:	68b8      	ldr	r0, [r7, #8]
 800d75c:	f000 fd62 	bl	800e224 <prvAddCurrentTaskToDelayedList>
	}
 800d760:	bf00      	nop
 800d762:	3718      	adds	r7, #24
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	200027ec 	.word	0x200027ec

0800d76c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b086      	sub	sp, #24
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	68db      	ldr	r3, [r3, #12]
 800d778:	68db      	ldr	r3, [r3, #12]
 800d77a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d109      	bne.n	800d796 <xTaskRemoveFromEventList+0x2a>
 800d782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d786:	f383 8811 	msr	BASEPRI, r3
 800d78a:	f3bf 8f6f 	isb	sy
 800d78e:	f3bf 8f4f 	dsb	sy
 800d792:	60fb      	str	r3, [r7, #12]
 800d794:	e7fe      	b.n	800d794 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	3318      	adds	r3, #24
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7fe fa90 	bl	800bcc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7a0:	4b1e      	ldr	r3, [pc, #120]	; (800d81c <xTaskRemoveFromEventList+0xb0>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d11f      	bne.n	800d7e8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	3304      	adds	r3, #4
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7fe fa87 	bl	800bcc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b6:	4b1a      	ldr	r3, [pc, #104]	; (800d820 <xTaskRemoveFromEventList+0xb4>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d903      	bls.n	800d7c6 <xTaskRemoveFromEventList+0x5a>
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c2:	4a17      	ldr	r2, [pc, #92]	; (800d820 <xTaskRemoveFromEventList+0xb4>)
 800d7c4:	6013      	str	r3, [r2, #0]
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ca:	4613      	mov	r3, r2
 800d7cc:	009b      	lsls	r3, r3, #2
 800d7ce:	4413      	add	r3, r2
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	4a14      	ldr	r2, [pc, #80]	; (800d824 <xTaskRemoveFromEventList+0xb8>)
 800d7d4:	441a      	add	r2, r3
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	3304      	adds	r3, #4
 800d7da:	4619      	mov	r1, r3
 800d7dc:	4610      	mov	r0, r2
 800d7de:	f7fe fa12 	bl	800bc06 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800d7e2:	f000 f981 	bl	800dae8 <prvResetNextTaskUnblockTime>
 800d7e6:	e005      	b.n	800d7f4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	3318      	adds	r3, #24
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	480e      	ldr	r0, [pc, #56]	; (800d828 <xTaskRemoveFromEventList+0xbc>)
 800d7f0:	f7fe fa09 	bl	800bc06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f8:	4b0c      	ldr	r3, [pc, #48]	; (800d82c <xTaskRemoveFromEventList+0xc0>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d905      	bls.n	800d80e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d802:	2301      	movs	r3, #1
 800d804:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d806:	4b0a      	ldr	r3, [pc, #40]	; (800d830 <xTaskRemoveFromEventList+0xc4>)
 800d808:	2201      	movs	r2, #1
 800d80a:	601a      	str	r2, [r3, #0]
 800d80c:	e001      	b.n	800d812 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d80e:	2300      	movs	r3, #0
 800d810:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d812:	697b      	ldr	r3, [r7, #20]
}
 800d814:	4618      	mov	r0, r3
 800d816:	3718      	adds	r7, #24
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	20002ce8 	.word	0x20002ce8
 800d820:	20002cc8 	.word	0x20002cc8
 800d824:	200027f0 	.word	0x200027f0
 800d828:	20002c80 	.word	0x20002c80
 800d82c:	200027ec 	.word	0x200027ec
 800d830:	20002cd4 	.word	0x20002cd4

0800d834 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d83c:	4b06      	ldr	r3, [pc, #24]	; (800d858 <vTaskInternalSetTimeOutState+0x24>)
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d844:	4b05      	ldr	r3, [pc, #20]	; (800d85c <vTaskInternalSetTimeOutState+0x28>)
 800d846:	681a      	ldr	r2, [r3, #0]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	605a      	str	r2, [r3, #4]
}
 800d84c:	bf00      	nop
 800d84e:	370c      	adds	r7, #12
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr
 800d858:	20002cd8 	.word	0x20002cd8
 800d85c:	20002cc4 	.word	0x20002cc4

0800d860 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b088      	sub	sp, #32
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d109      	bne.n	800d884 <xTaskCheckForTimeOut+0x24>
 800d870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d874:	f383 8811 	msr	BASEPRI, r3
 800d878:	f3bf 8f6f 	isb	sy
 800d87c:	f3bf 8f4f 	dsb	sy
 800d880:	613b      	str	r3, [r7, #16]
 800d882:	e7fe      	b.n	800d882 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d109      	bne.n	800d89e <xTaskCheckForTimeOut+0x3e>
 800d88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d88e:	f383 8811 	msr	BASEPRI, r3
 800d892:	f3bf 8f6f 	isb	sy
 800d896:	f3bf 8f4f 	dsb	sy
 800d89a:	60fb      	str	r3, [r7, #12]
 800d89c:	e7fe      	b.n	800d89c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800d89e:	f001 f985 	bl	800ebac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d8a2:	4b1d      	ldr	r3, [pc, #116]	; (800d918 <xTaskCheckForTimeOut+0xb8>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	69ba      	ldr	r2, [r7, #24]
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ba:	d102      	bne.n	800d8c2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	61fb      	str	r3, [r7, #28]
 800d8c0:	e023      	b.n	800d90a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681a      	ldr	r2, [r3, #0]
 800d8c6:	4b15      	ldr	r3, [pc, #84]	; (800d91c <xTaskCheckForTimeOut+0xbc>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d007      	beq.n	800d8de <xTaskCheckForTimeOut+0x7e>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	69ba      	ldr	r2, [r7, #24]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d302      	bcc.n	800d8de <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	61fb      	str	r3, [r7, #28]
 800d8dc:	e015      	b.n	800d90a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	697a      	ldr	r2, [r7, #20]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d20b      	bcs.n	800d900 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	1ad2      	subs	r2, r2, r3
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f7ff ff9d 	bl	800d834 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	61fb      	str	r3, [r7, #28]
 800d8fe:	e004      	b.n	800d90a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	2200      	movs	r2, #0
 800d904:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d906:	2301      	movs	r3, #1
 800d908:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d90a:	f001 f97d 	bl	800ec08 <vPortExitCritical>

	return xReturn;
 800d90e:	69fb      	ldr	r3, [r7, #28]
}
 800d910:	4618      	mov	r0, r3
 800d912:	3720      	adds	r7, #32
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	20002cc4 	.word	0x20002cc4
 800d91c:	20002cd8 	.word	0x20002cd8

0800d920 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d920:	b480      	push	{r7}
 800d922:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d924:	4b03      	ldr	r3, [pc, #12]	; (800d934 <vTaskMissedYield+0x14>)
 800d926:	2201      	movs	r2, #1
 800d928:	601a      	str	r2, [r3, #0]
}
 800d92a:	bf00      	nop
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr
 800d934:	20002cd4 	.word	0x20002cd4

0800d938 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d940:	f000 f878 	bl	800da34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d944:	4b17      	ldr	r3, [pc, #92]	; (800d9a4 <prvIdleTask+0x6c>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d907      	bls.n	800d95c <prvIdleTask+0x24>
			{
				taskYIELD();
 800d94c:	4b16      	ldr	r3, [pc, #88]	; (800d9a8 <prvIdleTask+0x70>)
 800d94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d952:	601a      	str	r2, [r3, #0]
 800d954:	f3bf 8f4f 	dsb	sy
 800d958:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800d95c:	f7ff fcc0 	bl	800d2e0 <prvGetExpectedIdleTime>
 800d960:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2b01      	cmp	r3, #1
 800d966:	d9eb      	bls.n	800d940 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800d968:	f7ff fcac 	bl	800d2c4 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800d96c:	4b0f      	ldr	r3, [pc, #60]	; (800d9ac <prvIdleTask+0x74>)
 800d96e:	681a      	ldr	r2, [r3, #0]
 800d970:	4b0f      	ldr	r3, [pc, #60]	; (800d9b0 <prvIdleTask+0x78>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	429a      	cmp	r2, r3
 800d976:	d209      	bcs.n	800d98c <prvIdleTask+0x54>
 800d978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97c:	f383 8811 	msr	BASEPRI, r3
 800d980:	f3bf 8f6f 	isb	sy
 800d984:	f3bf 8f4f 	dsb	sy
 800d988:	60bb      	str	r3, [r7, #8]
 800d98a:	e7fe      	b.n	800d98a <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800d98c:	f7ff fca8 	bl	800d2e0 <prvGetExpectedIdleTime>
 800d990:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2b01      	cmp	r3, #1
 800d996:	d902      	bls.n	800d99e <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800d998:	68f8      	ldr	r0, [r7, #12]
 800d99a:	f7f3 fc27 	bl	80011ec <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800d99e:	f7ff fcd7 	bl	800d350 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800d9a2:	e7cd      	b.n	800d940 <prvIdleTask+0x8>
 800d9a4:	200027f0 	.word	0x200027f0
 800d9a8:	e000ed04 	.word	0xe000ed04
 800d9ac:	20002ce0 	.word	0x20002ce0
 800d9b0:	20002cc4 	.word	0x20002cc4

0800d9b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	607b      	str	r3, [r7, #4]
 800d9be:	e00c      	b.n	800d9da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	4613      	mov	r3, r2
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	4413      	add	r3, r2
 800d9c8:	009b      	lsls	r3, r3, #2
 800d9ca:	4a12      	ldr	r2, [pc, #72]	; (800da14 <prvInitialiseTaskLists+0x60>)
 800d9cc:	4413      	add	r3, r2
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7fe f8ec 	bl	800bbac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	607b      	str	r3, [r7, #4]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2b37      	cmp	r3, #55	; 0x37
 800d9de:	d9ef      	bls.n	800d9c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d9e0:	480d      	ldr	r0, [pc, #52]	; (800da18 <prvInitialiseTaskLists+0x64>)
 800d9e2:	f7fe f8e3 	bl	800bbac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d9e6:	480d      	ldr	r0, [pc, #52]	; (800da1c <prvInitialiseTaskLists+0x68>)
 800d9e8:	f7fe f8e0 	bl	800bbac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d9ec:	480c      	ldr	r0, [pc, #48]	; (800da20 <prvInitialiseTaskLists+0x6c>)
 800d9ee:	f7fe f8dd 	bl	800bbac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d9f2:	480c      	ldr	r0, [pc, #48]	; (800da24 <prvInitialiseTaskLists+0x70>)
 800d9f4:	f7fe f8da 	bl	800bbac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d9f8:	480b      	ldr	r0, [pc, #44]	; (800da28 <prvInitialiseTaskLists+0x74>)
 800d9fa:	f7fe f8d7 	bl	800bbac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d9fe:	4b0b      	ldr	r3, [pc, #44]	; (800da2c <prvInitialiseTaskLists+0x78>)
 800da00:	4a05      	ldr	r2, [pc, #20]	; (800da18 <prvInitialiseTaskLists+0x64>)
 800da02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800da04:	4b0a      	ldr	r3, [pc, #40]	; (800da30 <prvInitialiseTaskLists+0x7c>)
 800da06:	4a05      	ldr	r2, [pc, #20]	; (800da1c <prvInitialiseTaskLists+0x68>)
 800da08:	601a      	str	r2, [r3, #0]
}
 800da0a:	bf00      	nop
 800da0c:	3708      	adds	r7, #8
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	200027f0 	.word	0x200027f0
 800da18:	20002c50 	.word	0x20002c50
 800da1c:	20002c64 	.word	0x20002c64
 800da20:	20002c80 	.word	0x20002c80
 800da24:	20002c94 	.word	0x20002c94
 800da28:	20002cac 	.word	0x20002cac
 800da2c:	20002c78 	.word	0x20002c78
 800da30:	20002c7c 	.word	0x20002c7c

0800da34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da3a:	e019      	b.n	800da70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800da3c:	f001 f8b6 	bl	800ebac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da40:	4b0f      	ldr	r3, [pc, #60]	; (800da80 <prvCheckTasksWaitingTermination+0x4c>)
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	68db      	ldr	r3, [r3, #12]
 800da46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	3304      	adds	r3, #4
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7fe f937 	bl	800bcc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800da52:	4b0c      	ldr	r3, [pc, #48]	; (800da84 <prvCheckTasksWaitingTermination+0x50>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	3b01      	subs	r3, #1
 800da58:	4a0a      	ldr	r2, [pc, #40]	; (800da84 <prvCheckTasksWaitingTermination+0x50>)
 800da5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da5c:	4b0a      	ldr	r3, [pc, #40]	; (800da88 <prvCheckTasksWaitingTermination+0x54>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	3b01      	subs	r3, #1
 800da62:	4a09      	ldr	r2, [pc, #36]	; (800da88 <prvCheckTasksWaitingTermination+0x54>)
 800da64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800da66:	f001 f8cf 	bl	800ec08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 f80e 	bl	800da8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da70:	4b05      	ldr	r3, [pc, #20]	; (800da88 <prvCheckTasksWaitingTermination+0x54>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d1e1      	bne.n	800da3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800da78:	bf00      	nop
 800da7a:	3708      	adds	r7, #8
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	20002c94 	.word	0x20002c94
 800da84:	20002cc0 	.word	0x20002cc0
 800da88:	20002ca8 	.word	0x20002ca8

0800da8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d108      	bne.n	800dab0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daa2:	4618      	mov	r0, r3
 800daa4:	f001 fa5e 	bl	800ef64 <vPortFree>
				vPortFree( pxTCB );
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f001 fa5b 	bl	800ef64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800daae:	e017      	b.n	800dae0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d103      	bne.n	800dac2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f001 fa52 	bl	800ef64 <vPortFree>
	}
 800dac0:	e00e      	b.n	800dae0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dac8:	2b02      	cmp	r3, #2
 800daca:	d009      	beq.n	800dae0 <prvDeleteTCB+0x54>
 800dacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad0:	f383 8811 	msr	BASEPRI, r3
 800dad4:	f3bf 8f6f 	isb	sy
 800dad8:	f3bf 8f4f 	dsb	sy
 800dadc:	60fb      	str	r3, [r7, #12]
 800dade:	e7fe      	b.n	800dade <prvDeleteTCB+0x52>
	}
 800dae0:	bf00      	nop
 800dae2:	3710      	adds	r7, #16
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dae8:	b480      	push	{r7}
 800daea:	b083      	sub	sp, #12
 800daec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800daee:	4b0c      	ldr	r3, [pc, #48]	; (800db20 <prvResetNextTaskUnblockTime+0x38>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d104      	bne.n	800db02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800daf8:	4b0a      	ldr	r3, [pc, #40]	; (800db24 <prvResetNextTaskUnblockTime+0x3c>)
 800dafa:	f04f 32ff 	mov.w	r2, #4294967295
 800dafe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800db00:	e008      	b.n	800db14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db02:	4b07      	ldr	r3, [pc, #28]	; (800db20 <prvResetNextTaskUnblockTime+0x38>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	68db      	ldr	r3, [r3, #12]
 800db08:	68db      	ldr	r3, [r3, #12]
 800db0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	4a04      	ldr	r2, [pc, #16]	; (800db24 <prvResetNextTaskUnblockTime+0x3c>)
 800db12:	6013      	str	r3, [r2, #0]
}
 800db14:	bf00      	nop
 800db16:	370c      	adds	r7, #12
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr
 800db20:	20002c78 	.word	0x20002c78
 800db24:	20002ce0 	.word	0x20002ce0

0800db28 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800db28:	b480      	push	{r7}
 800db2a:	b083      	sub	sp, #12
 800db2c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800db2e:	4b05      	ldr	r3, [pc, #20]	; (800db44 <xTaskGetCurrentTaskHandle+0x1c>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	607b      	str	r3, [r7, #4]

		return xReturn;
 800db34:	687b      	ldr	r3, [r7, #4]
	}
 800db36:	4618      	mov	r0, r3
 800db38:	370c      	adds	r7, #12
 800db3a:	46bd      	mov	sp, r7
 800db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db40:	4770      	bx	lr
 800db42:	bf00      	nop
 800db44:	200027ec 	.word	0x200027ec

0800db48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800db4e:	4b0b      	ldr	r3, [pc, #44]	; (800db7c <xTaskGetSchedulerState+0x34>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d102      	bne.n	800db5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db56:	2301      	movs	r3, #1
 800db58:	607b      	str	r3, [r7, #4]
 800db5a:	e008      	b.n	800db6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db5c:	4b08      	ldr	r3, [pc, #32]	; (800db80 <xTaskGetSchedulerState+0x38>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d102      	bne.n	800db6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800db64:	2302      	movs	r3, #2
 800db66:	607b      	str	r3, [r7, #4]
 800db68:	e001      	b.n	800db6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800db6a:	2300      	movs	r3, #0
 800db6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db6e:	687b      	ldr	r3, [r7, #4]
	}
 800db70:	4618      	mov	r0, r3
 800db72:	370c      	adds	r7, #12
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr
 800db7c:	20002ccc 	.word	0x20002ccc
 800db80:	20002ce8 	.word	0x20002ce8

0800db84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800db84:	b580      	push	{r7, lr}
 800db86:	b084      	sub	sp, #16
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800db90:	2300      	movs	r3, #0
 800db92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d051      	beq.n	800dc3e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db9e:	4b2a      	ldr	r3, [pc, #168]	; (800dc48 <xTaskPriorityInherit+0xc4>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d241      	bcs.n	800dc2c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	699b      	ldr	r3, [r3, #24]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	db06      	blt.n	800dbbe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbb0:	4b25      	ldr	r3, [pc, #148]	; (800dc48 <xTaskPriorityInherit+0xc4>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	6959      	ldr	r1, [r3, #20]
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbc6:	4613      	mov	r3, r2
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	4413      	add	r3, r2
 800dbcc:	009b      	lsls	r3, r3, #2
 800dbce:	4a1f      	ldr	r2, [pc, #124]	; (800dc4c <xTaskPriorityInherit+0xc8>)
 800dbd0:	4413      	add	r3, r2
 800dbd2:	4299      	cmp	r1, r3
 800dbd4:	d122      	bne.n	800dc1c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	3304      	adds	r3, #4
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7fe f870 	bl	800bcc0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dbe0:	4b19      	ldr	r3, [pc, #100]	; (800dc48 <xTaskPriorityInherit+0xc4>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbee:	4b18      	ldr	r3, [pc, #96]	; (800dc50 <xTaskPriorityInherit+0xcc>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d903      	bls.n	800dbfe <xTaskPriorityInherit+0x7a>
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbfa:	4a15      	ldr	r2, [pc, #84]	; (800dc50 <xTaskPriorityInherit+0xcc>)
 800dbfc:	6013      	str	r3, [r2, #0]
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc02:	4613      	mov	r3, r2
 800dc04:	009b      	lsls	r3, r3, #2
 800dc06:	4413      	add	r3, r2
 800dc08:	009b      	lsls	r3, r3, #2
 800dc0a:	4a10      	ldr	r2, [pc, #64]	; (800dc4c <xTaskPriorityInherit+0xc8>)
 800dc0c:	441a      	add	r2, r3
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	3304      	adds	r3, #4
 800dc12:	4619      	mov	r1, r3
 800dc14:	4610      	mov	r0, r2
 800dc16:	f7fd fff6 	bl	800bc06 <vListInsertEnd>
 800dc1a:	e004      	b.n	800dc26 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dc1c:	4b0a      	ldr	r3, [pc, #40]	; (800dc48 <xTaskPriorityInherit+0xc4>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dc26:	2301      	movs	r3, #1
 800dc28:	60fb      	str	r3, [r7, #12]
 800dc2a:	e008      	b.n	800dc3e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc30:	4b05      	ldr	r3, [pc, #20]	; (800dc48 <xTaskPriorityInherit+0xc4>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d201      	bcs.n	800dc3e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
	}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3710      	adds	r7, #16
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	200027ec 	.word	0x200027ec
 800dc4c:	200027f0 	.word	0x200027f0
 800dc50:	20002cc8 	.word	0x20002cc8

0800dc54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b086      	sub	sp, #24
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dc60:	2300      	movs	r3, #0
 800dc62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d054      	beq.n	800dd14 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dc6a:	4b2d      	ldr	r3, [pc, #180]	; (800dd20 <xTaskPriorityDisinherit+0xcc>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	693a      	ldr	r2, [r7, #16]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d009      	beq.n	800dc88 <xTaskPriorityDisinherit+0x34>
 800dc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc78:	f383 8811 	msr	BASEPRI, r3
 800dc7c:	f3bf 8f6f 	isb	sy
 800dc80:	f3bf 8f4f 	dsb	sy
 800dc84:	60fb      	str	r3, [r7, #12]
 800dc86:	e7fe      	b.n	800dc86 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d109      	bne.n	800dca4 <xTaskPriorityDisinherit+0x50>
 800dc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc94:	f383 8811 	msr	BASEPRI, r3
 800dc98:	f3bf 8f6f 	isb	sy
 800dc9c:	f3bf 8f4f 	dsb	sy
 800dca0:	60bb      	str	r3, [r7, #8]
 800dca2:	e7fe      	b.n	800dca2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dca8:	1e5a      	subs	r2, r3, #1
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d02c      	beq.n	800dd14 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d128      	bne.n	800dd14 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	3304      	adds	r3, #4
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7fd fffa 	bl	800bcc0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dce4:	4b0f      	ldr	r3, [pc, #60]	; (800dd24 <xTaskPriorityDisinherit+0xd0>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d903      	bls.n	800dcf4 <xTaskPriorityDisinherit+0xa0>
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcf0:	4a0c      	ldr	r2, [pc, #48]	; (800dd24 <xTaskPriorityDisinherit+0xd0>)
 800dcf2:	6013      	str	r3, [r2, #0]
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcf8:	4613      	mov	r3, r2
 800dcfa:	009b      	lsls	r3, r3, #2
 800dcfc:	4413      	add	r3, r2
 800dcfe:	009b      	lsls	r3, r3, #2
 800dd00:	4a09      	ldr	r2, [pc, #36]	; (800dd28 <xTaskPriorityDisinherit+0xd4>)
 800dd02:	441a      	add	r2, r3
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	3304      	adds	r3, #4
 800dd08:	4619      	mov	r1, r3
 800dd0a:	4610      	mov	r0, r2
 800dd0c:	f7fd ff7b 	bl	800bc06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dd10:	2301      	movs	r3, #1
 800dd12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dd14:	697b      	ldr	r3, [r7, #20]
	}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3718      	adds	r7, #24
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	200027ec 	.word	0x200027ec
 800dd24:	20002cc8 	.word	0x20002cc8
 800dd28:	200027f0 	.word	0x200027f0

0800dd2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b088      	sub	sp, #32
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d068      	beq.n	800de16 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dd44:	69bb      	ldr	r3, [r7, #24]
 800dd46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d109      	bne.n	800dd60 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800dd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd50:	f383 8811 	msr	BASEPRI, r3
 800dd54:	f3bf 8f6f 	isb	sy
 800dd58:	f3bf 8f4f 	dsb	sy
 800dd5c:	60fb      	str	r3, [r7, #12]
 800dd5e:	e7fe      	b.n	800dd5e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dd60:	69bb      	ldr	r3, [r7, #24]
 800dd62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd64:	683a      	ldr	r2, [r7, #0]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d902      	bls.n	800dd70 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	61fb      	str	r3, [r7, #28]
 800dd6e:	e002      	b.n	800dd76 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd74:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dd76:	69bb      	ldr	r3, [r7, #24]
 800dd78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd7a:	69fa      	ldr	r2, [r7, #28]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d04a      	beq.n	800de16 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dd80:	69bb      	ldr	r3, [r7, #24]
 800dd82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd84:	697a      	ldr	r2, [r7, #20]
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d145      	bne.n	800de16 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dd8a:	4b25      	ldr	r3, [pc, #148]	; (800de20 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	69ba      	ldr	r2, [r7, #24]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d109      	bne.n	800dda8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800dd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd98:	f383 8811 	msr	BASEPRI, r3
 800dd9c:	f3bf 8f6f 	isb	sy
 800dda0:	f3bf 8f4f 	dsb	sy
 800dda4:	60bb      	str	r3, [r7, #8]
 800dda6:	e7fe      	b.n	800dda6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dda8:	69bb      	ldr	r3, [r7, #24]
 800ddaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ddae:	69bb      	ldr	r3, [r7, #24]
 800ddb0:	69fa      	ldr	r2, [r7, #28]
 800ddb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ddb4:	69bb      	ldr	r3, [r7, #24]
 800ddb6:	699b      	ldr	r3, [r3, #24]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	db04      	blt.n	800ddc6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddbc:	69fb      	ldr	r3, [r7, #28]
 800ddbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ddc2:	69bb      	ldr	r3, [r7, #24]
 800ddc4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ddc6:	69bb      	ldr	r3, [r7, #24]
 800ddc8:	6959      	ldr	r1, [r3, #20]
 800ddca:	693a      	ldr	r2, [r7, #16]
 800ddcc:	4613      	mov	r3, r2
 800ddce:	009b      	lsls	r3, r3, #2
 800ddd0:	4413      	add	r3, r2
 800ddd2:	009b      	lsls	r3, r3, #2
 800ddd4:	4a13      	ldr	r2, [pc, #76]	; (800de24 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ddd6:	4413      	add	r3, r2
 800ddd8:	4299      	cmp	r1, r3
 800ddda:	d11c      	bne.n	800de16 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dddc:	69bb      	ldr	r3, [r7, #24]
 800ddde:	3304      	adds	r3, #4
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7fd ff6d 	bl	800bcc0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddea:	4b0f      	ldr	r3, [pc, #60]	; (800de28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	d903      	bls.n	800ddfa <vTaskPriorityDisinheritAfterTimeout+0xce>
 800ddf2:	69bb      	ldr	r3, [r7, #24]
 800ddf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf6:	4a0c      	ldr	r2, [pc, #48]	; (800de28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ddf8:	6013      	str	r3, [r2, #0]
 800ddfa:	69bb      	ldr	r3, [r7, #24]
 800ddfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddfe:	4613      	mov	r3, r2
 800de00:	009b      	lsls	r3, r3, #2
 800de02:	4413      	add	r3, r2
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	4a07      	ldr	r2, [pc, #28]	; (800de24 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800de08:	441a      	add	r2, r3
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	3304      	adds	r3, #4
 800de0e:	4619      	mov	r1, r3
 800de10:	4610      	mov	r0, r2
 800de12:	f7fd fef8 	bl	800bc06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800de16:	bf00      	nop
 800de18:	3720      	adds	r7, #32
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	200027ec 	.word	0x200027ec
 800de24:	200027f0 	.word	0x200027f0
 800de28:	20002cc8 	.word	0x20002cc8

0800de2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800de2c:	b480      	push	{r7}
 800de2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800de30:	4b07      	ldr	r3, [pc, #28]	; (800de50 <pvTaskIncrementMutexHeldCount+0x24>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d004      	beq.n	800de42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800de38:	4b05      	ldr	r3, [pc, #20]	; (800de50 <pvTaskIncrementMutexHeldCount+0x24>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de3e:	3201      	adds	r2, #1
 800de40:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800de42:	4b03      	ldr	r3, [pc, #12]	; (800de50 <pvTaskIncrementMutexHeldCount+0x24>)
 800de44:	681b      	ldr	r3, [r3, #0]
	}
 800de46:	4618      	mov	r0, r3
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr
 800de50:	200027ec 	.word	0x200027ec

0800de54 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800de54:	b580      	push	{r7, lr}
 800de56:	b086      	sub	sp, #24
 800de58:	af00      	add	r7, sp, #0
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	60b9      	str	r1, [r7, #8]
 800de5e:	607a      	str	r2, [r7, #4]
 800de60:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800de62:	f000 fea3 	bl	800ebac <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800de66:	4b26      	ldr	r3, [pc, #152]	; (800df00 <xTaskNotifyWait+0xac>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	2b02      	cmp	r3, #2
 800de72:	d01a      	beq.n	800deaa <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800de74:	4b22      	ldr	r3, [pc, #136]	; (800df00 <xTaskNotifyWait+0xac>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800de7a:	68fa      	ldr	r2, [r7, #12]
 800de7c:	43d2      	mvns	r2, r2
 800de7e:	400a      	ands	r2, r1
 800de80:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800de82:	4b1f      	ldr	r3, [pc, #124]	; (800df00 <xTaskNotifyWait+0xac>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	2201      	movs	r2, #1
 800de88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d00b      	beq.n	800deaa <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800de92:	2101      	movs	r1, #1
 800de94:	6838      	ldr	r0, [r7, #0]
 800de96:	f000 f9c5 	bl	800e224 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800de9a:	4b1a      	ldr	r3, [pc, #104]	; (800df04 <xTaskNotifyWait+0xb0>)
 800de9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dea0:	601a      	str	r2, [r3, #0]
 800dea2:	f3bf 8f4f 	dsb	sy
 800dea6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800deaa:	f000 fead 	bl	800ec08 <vPortExitCritical>

		taskENTER_CRITICAL();
 800deae:	f000 fe7d 	bl	800ebac <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d004      	beq.n	800dec2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800deb8:	4b11      	ldr	r3, [pc, #68]	; (800df00 <xTaskNotifyWait+0xac>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800dec2:	4b0f      	ldr	r3, [pc, #60]	; (800df00 <xTaskNotifyWait+0xac>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800deca:	b2db      	uxtb	r3, r3
 800decc:	2b02      	cmp	r3, #2
 800dece:	d002      	beq.n	800ded6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ded0:	2300      	movs	r3, #0
 800ded2:	617b      	str	r3, [r7, #20]
 800ded4:	e008      	b.n	800dee8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ded6:	4b0a      	ldr	r3, [pc, #40]	; (800df00 <xTaskNotifyWait+0xac>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dedc:	68ba      	ldr	r2, [r7, #8]
 800dede:	43d2      	mvns	r2, r2
 800dee0:	400a      	ands	r2, r1
 800dee2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800dee4:	2301      	movs	r3, #1
 800dee6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dee8:	4b05      	ldr	r3, [pc, #20]	; (800df00 <xTaskNotifyWait+0xac>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	2200      	movs	r2, #0
 800deee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800def2:	f000 fe89 	bl	800ec08 <vPortExitCritical>

		return xReturn;
 800def6:	697b      	ldr	r3, [r7, #20]
	}
 800def8:	4618      	mov	r0, r3
 800defa:	3718      	adds	r7, #24
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}
 800df00:	200027ec 	.word	0x200027ec
 800df04:	e000ed04 	.word	0xe000ed04

0800df08 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b08a      	sub	sp, #40	; 0x28
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	603b      	str	r3, [r7, #0]
 800df14:	4613      	mov	r3, r2
 800df16:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800df18:	2301      	movs	r3, #1
 800df1a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d109      	bne.n	800df36 <xTaskGenericNotify+0x2e>
 800df22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df26:	f383 8811 	msr	BASEPRI, r3
 800df2a:	f3bf 8f6f 	isb	sy
 800df2e:	f3bf 8f4f 	dsb	sy
 800df32:	61bb      	str	r3, [r7, #24]
 800df34:	e7fe      	b.n	800df34 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800df3a:	f000 fe37 	bl	800ebac <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d003      	beq.n	800df4c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800df44:	6a3b      	ldr	r3, [r7, #32]
 800df46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800df4c:	6a3b      	ldr	r3, [r7, #32]
 800df4e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800df52:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800df54:	6a3b      	ldr	r3, [r7, #32]
 800df56:	2202      	movs	r2, #2
 800df58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800df5c:	79fb      	ldrb	r3, [r7, #7]
 800df5e:	2b04      	cmp	r3, #4
 800df60:	d827      	bhi.n	800dfb2 <xTaskGenericNotify+0xaa>
 800df62:	a201      	add	r2, pc, #4	; (adr r2, 800df68 <xTaskGenericNotify+0x60>)
 800df64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df68:	0800dfd1 	.word	0x0800dfd1
 800df6c:	0800df7d 	.word	0x0800df7d
 800df70:	0800df8b 	.word	0x0800df8b
 800df74:	0800df97 	.word	0x0800df97
 800df78:	0800df9f 	.word	0x0800df9f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800df7c:	6a3b      	ldr	r3, [r7, #32]
 800df7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	431a      	orrs	r2, r3
 800df84:	6a3b      	ldr	r3, [r7, #32]
 800df86:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800df88:	e025      	b.n	800dfd6 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800df8a:	6a3b      	ldr	r3, [r7, #32]
 800df8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df8e:	1c5a      	adds	r2, r3, #1
 800df90:	6a3b      	ldr	r3, [r7, #32]
 800df92:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800df94:	e01f      	b.n	800dfd6 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800df96:	6a3b      	ldr	r3, [r7, #32]
 800df98:	68ba      	ldr	r2, [r7, #8]
 800df9a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800df9c:	e01b      	b.n	800dfd6 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800df9e:	7ffb      	ldrb	r3, [r7, #31]
 800dfa0:	2b02      	cmp	r3, #2
 800dfa2:	d003      	beq.n	800dfac <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800dfa4:	6a3b      	ldr	r3, [r7, #32]
 800dfa6:	68ba      	ldr	r2, [r7, #8]
 800dfa8:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800dfaa:	e014      	b.n	800dfd6 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 800dfac:	2300      	movs	r3, #0
 800dfae:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800dfb0:	e011      	b.n	800dfd6 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800dfb2:	6a3b      	ldr	r3, [r7, #32]
 800dfb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfba:	d00b      	beq.n	800dfd4 <xTaskGenericNotify+0xcc>
 800dfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc0:	f383 8811 	msr	BASEPRI, r3
 800dfc4:	f3bf 8f6f 	isb	sy
 800dfc8:	f3bf 8f4f 	dsb	sy
 800dfcc:	617b      	str	r3, [r7, #20]
 800dfce:	e7fe      	b.n	800dfce <xTaskGenericNotify+0xc6>
					break;
 800dfd0:	bf00      	nop
 800dfd2:	e000      	b.n	800dfd6 <xTaskGenericNotify+0xce>

					break;
 800dfd4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800dfd6:	7ffb      	ldrb	r3, [r7, #31]
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	d13b      	bne.n	800e054 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dfdc:	6a3b      	ldr	r3, [r7, #32]
 800dfde:	3304      	adds	r3, #4
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f7fd fe6d 	bl	800bcc0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800dfe6:	6a3b      	ldr	r3, [r7, #32]
 800dfe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfea:	4b1e      	ldr	r3, [pc, #120]	; (800e064 <xTaskGenericNotify+0x15c>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d903      	bls.n	800dffa <xTaskGenericNotify+0xf2>
 800dff2:	6a3b      	ldr	r3, [r7, #32]
 800dff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff6:	4a1b      	ldr	r2, [pc, #108]	; (800e064 <xTaskGenericNotify+0x15c>)
 800dff8:	6013      	str	r3, [r2, #0]
 800dffa:	6a3b      	ldr	r3, [r7, #32]
 800dffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dffe:	4613      	mov	r3, r2
 800e000:	009b      	lsls	r3, r3, #2
 800e002:	4413      	add	r3, r2
 800e004:	009b      	lsls	r3, r3, #2
 800e006:	4a18      	ldr	r2, [pc, #96]	; (800e068 <xTaskGenericNotify+0x160>)
 800e008:	441a      	add	r2, r3
 800e00a:	6a3b      	ldr	r3, [r7, #32]
 800e00c:	3304      	adds	r3, #4
 800e00e:	4619      	mov	r1, r3
 800e010:	4610      	mov	r0, r2
 800e012:	f7fd fdf8 	bl	800bc06 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e016:	6a3b      	ldr	r3, [r7, #32]
 800e018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d009      	beq.n	800e032 <xTaskGenericNotify+0x12a>
 800e01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e022:	f383 8811 	msr	BASEPRI, r3
 800e026:	f3bf 8f6f 	isb	sy
 800e02a:	f3bf 8f4f 	dsb	sy
 800e02e:	613b      	str	r3, [r7, #16]
 800e030:	e7fe      	b.n	800e030 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 800e032:	f7ff fd59 	bl	800dae8 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e036:	6a3b      	ldr	r3, [r7, #32]
 800e038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e03a:	4b0c      	ldr	r3, [pc, #48]	; (800e06c <xTaskGenericNotify+0x164>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e040:	429a      	cmp	r2, r3
 800e042:	d907      	bls.n	800e054 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800e044:	4b0a      	ldr	r3, [pc, #40]	; (800e070 <xTaskGenericNotify+0x168>)
 800e046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e04a:	601a      	str	r2, [r3, #0]
 800e04c:	f3bf 8f4f 	dsb	sy
 800e050:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e054:	f000 fdd8 	bl	800ec08 <vPortExitCritical>

		return xReturn;
 800e058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3728      	adds	r7, #40	; 0x28
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	20002cc8 	.word	0x20002cc8
 800e068:	200027f0 	.word	0x200027f0
 800e06c:	200027ec 	.word	0x200027ec
 800e070:	e000ed04 	.word	0xe000ed04

0800e074 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e074:	b580      	push	{r7, lr}
 800e076:	b08e      	sub	sp, #56	; 0x38
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	60b9      	str	r1, [r7, #8]
 800e07e:	603b      	str	r3, [r7, #0]
 800e080:	4613      	mov	r3, r2
 800e082:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800e084:	2301      	movs	r3, #1
 800e086:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d109      	bne.n	800e0a2 <xTaskGenericNotifyFromISR+0x2e>
 800e08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e092:	f383 8811 	msr	BASEPRI, r3
 800e096:	f3bf 8f6f 	isb	sy
 800e09a:	f3bf 8f4f 	dsb	sy
 800e09e:	627b      	str	r3, [r7, #36]	; 0x24
 800e0a0:	e7fe      	b.n	800e0a0 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e0a2:	f000 fe5f 	bl	800ed64 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800e0aa:	f3ef 8211 	mrs	r2, BASEPRI
 800e0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b2:	f383 8811 	msr	BASEPRI, r3
 800e0b6:	f3bf 8f6f 	isb	sy
 800e0ba:	f3bf 8f4f 	dsb	sy
 800e0be:	623a      	str	r2, [r7, #32]
 800e0c0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800e0c2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d003      	beq.n	800e0d4 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e0da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e0:	2202      	movs	r2, #2
 800e0e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800e0e6:	79fb      	ldrb	r3, [r7, #7]
 800e0e8:	2b04      	cmp	r3, #4
 800e0ea:	d829      	bhi.n	800e140 <xTaskGenericNotifyFromISR+0xcc>
 800e0ec:	a201      	add	r2, pc, #4	; (adr r2, 800e0f4 <xTaskGenericNotifyFromISR+0x80>)
 800e0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f2:	bf00      	nop
 800e0f4:	0800e15f 	.word	0x0800e15f
 800e0f8:	0800e109 	.word	0x0800e109
 800e0fc:	0800e117 	.word	0x0800e117
 800e100:	0800e123 	.word	0x0800e123
 800e104:	0800e12b 	.word	0x0800e12b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	431a      	orrs	r2, r3
 800e110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e112:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e114:	e026      	b.n	800e164 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e11a:	1c5a      	adds	r2, r3, #1
 800e11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e11e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e120:	e020      	b.n	800e164 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e124:	68ba      	ldr	r2, [r7, #8]
 800e126:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e128:	e01c      	b.n	800e164 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e12a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e12e:	2b02      	cmp	r3, #2
 800e130:	d003      	beq.n	800e13a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e134:	68ba      	ldr	r2, [r7, #8]
 800e136:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e138:	e014      	b.n	800e164 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800e13a:	2300      	movs	r3, #0
 800e13c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800e13e:	e011      	b.n	800e164 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800e140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e148:	d00b      	beq.n	800e162 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800e14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e14e:	f383 8811 	msr	BASEPRI, r3
 800e152:	f3bf 8f6f 	isb	sy
 800e156:	f3bf 8f4f 	dsb	sy
 800e15a:	61bb      	str	r3, [r7, #24]
 800e15c:	e7fe      	b.n	800e15c <xTaskGenericNotifyFromISR+0xe8>
					break;
 800e15e:	bf00      	nop
 800e160:	e000      	b.n	800e164 <xTaskGenericNotifyFromISR+0xf0>
					break;
 800e162:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e164:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d145      	bne.n	800e1f8 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e170:	2b00      	cmp	r3, #0
 800e172:	d009      	beq.n	800e188 <xTaskGenericNotifyFromISR+0x114>
 800e174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e178:	f383 8811 	msr	BASEPRI, r3
 800e17c:	f3bf 8f6f 	isb	sy
 800e180:	f3bf 8f4f 	dsb	sy
 800e184:	617b      	str	r3, [r7, #20]
 800e186:	e7fe      	b.n	800e186 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e188:	4b20      	ldr	r3, [pc, #128]	; (800e20c <xTaskGenericNotifyFromISR+0x198>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d11d      	bne.n	800e1cc <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e192:	3304      	adds	r3, #4
 800e194:	4618      	mov	r0, r3
 800e196:	f7fd fd93 	bl	800bcc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e19e:	4b1c      	ldr	r3, [pc, #112]	; (800e210 <xTaskGenericNotifyFromISR+0x19c>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d903      	bls.n	800e1ae <xTaskGenericNotifyFromISR+0x13a>
 800e1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1aa:	4a19      	ldr	r2, [pc, #100]	; (800e210 <xTaskGenericNotifyFromISR+0x19c>)
 800e1ac:	6013      	str	r3, [r2, #0]
 800e1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1b2:	4613      	mov	r3, r2
 800e1b4:	009b      	lsls	r3, r3, #2
 800e1b6:	4413      	add	r3, r2
 800e1b8:	009b      	lsls	r3, r3, #2
 800e1ba:	4a16      	ldr	r2, [pc, #88]	; (800e214 <xTaskGenericNotifyFromISR+0x1a0>)
 800e1bc:	441a      	add	r2, r3
 800e1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c0:	3304      	adds	r3, #4
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	4610      	mov	r0, r2
 800e1c6:	f7fd fd1e 	bl	800bc06 <vListInsertEnd>
 800e1ca:	e005      	b.n	800e1d8 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800e1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ce:	3318      	adds	r3, #24
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	4811      	ldr	r0, [pc, #68]	; (800e218 <xTaskGenericNotifyFromISR+0x1a4>)
 800e1d4:	f7fd fd17 	bl	800bc06 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1dc:	4b0f      	ldr	r3, [pc, #60]	; (800e21c <xTaskGenericNotifyFromISR+0x1a8>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d908      	bls.n	800e1f8 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800e1e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d002      	beq.n	800e1f2 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800e1ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800e1f2:	4b0b      	ldr	r3, [pc, #44]	; (800e220 <xTaskGenericNotifyFromISR+0x1ac>)
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	601a      	str	r2, [r3, #0]
 800e1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fa:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800e202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800e204:	4618      	mov	r0, r3
 800e206:	3738      	adds	r7, #56	; 0x38
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	20002ce8 	.word	0x20002ce8
 800e210:	20002cc8 	.word	0x20002cc8
 800e214:	200027f0 	.word	0x200027f0
 800e218:	20002c80 	.word	0x20002c80
 800e21c:	200027ec 	.word	0x200027ec
 800e220:	20002cd4 	.word	0x20002cd4

0800e224 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e22e:	4b21      	ldr	r3, [pc, #132]	; (800e2b4 <prvAddCurrentTaskToDelayedList+0x90>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e234:	4b20      	ldr	r3, [pc, #128]	; (800e2b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	3304      	adds	r3, #4
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7fd fd40 	bl	800bcc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e246:	d10a      	bne.n	800e25e <prvAddCurrentTaskToDelayedList+0x3a>
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d007      	beq.n	800e25e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e24e:	4b1a      	ldr	r3, [pc, #104]	; (800e2b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	3304      	adds	r3, #4
 800e254:	4619      	mov	r1, r3
 800e256:	4819      	ldr	r0, [pc, #100]	; (800e2bc <prvAddCurrentTaskToDelayedList+0x98>)
 800e258:	f7fd fcd5 	bl	800bc06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e25c:	e026      	b.n	800e2ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e25e:	68fa      	ldr	r2, [r7, #12]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	4413      	add	r3, r2
 800e264:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e266:	4b14      	ldr	r3, [pc, #80]	; (800e2b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	68ba      	ldr	r2, [r7, #8]
 800e26c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e26e:	68ba      	ldr	r2, [r7, #8]
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	429a      	cmp	r2, r3
 800e274:	d209      	bcs.n	800e28a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e276:	4b12      	ldr	r3, [pc, #72]	; (800e2c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	4b0f      	ldr	r3, [pc, #60]	; (800e2b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	3304      	adds	r3, #4
 800e280:	4619      	mov	r1, r3
 800e282:	4610      	mov	r0, r2
 800e284:	f7fd fce3 	bl	800bc4e <vListInsert>
}
 800e288:	e010      	b.n	800e2ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e28a:	4b0e      	ldr	r3, [pc, #56]	; (800e2c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e28c:	681a      	ldr	r2, [r3, #0]
 800e28e:	4b0a      	ldr	r3, [pc, #40]	; (800e2b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	3304      	adds	r3, #4
 800e294:	4619      	mov	r1, r3
 800e296:	4610      	mov	r0, r2
 800e298:	f7fd fcd9 	bl	800bc4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e29c:	4b0a      	ldr	r3, [pc, #40]	; (800e2c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	68ba      	ldr	r2, [r7, #8]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d202      	bcs.n	800e2ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e2a6:	4a08      	ldr	r2, [pc, #32]	; (800e2c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	6013      	str	r3, [r2, #0]
}
 800e2ac:	bf00      	nop
 800e2ae:	3710      	adds	r7, #16
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	20002cc4 	.word	0x20002cc4
 800e2b8:	200027ec 	.word	0x200027ec
 800e2bc:	20002cac 	.word	0x20002cac
 800e2c0:	20002c7c 	.word	0x20002c7c
 800e2c4:	20002c78 	.word	0x20002c78
 800e2c8:	20002ce0 	.word	0x20002ce0

0800e2cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b08a      	sub	sp, #40	; 0x28
 800e2d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e2d6:	f000 faff 	bl	800e8d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e2da:	4b1c      	ldr	r3, [pc, #112]	; (800e34c <xTimerCreateTimerTask+0x80>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d021      	beq.n	800e326 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e2ea:	1d3a      	adds	r2, r7, #4
 800e2ec:	f107 0108 	add.w	r1, r7, #8
 800e2f0:	f107 030c 	add.w	r3, r7, #12
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7fd fc3f 	bl	800bb78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e2fa:	6879      	ldr	r1, [r7, #4]
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	68fa      	ldr	r2, [r7, #12]
 800e300:	9202      	str	r2, [sp, #8]
 800e302:	9301      	str	r3, [sp, #4]
 800e304:	2302      	movs	r3, #2
 800e306:	9300      	str	r3, [sp, #0]
 800e308:	2300      	movs	r3, #0
 800e30a:	460a      	mov	r2, r1
 800e30c:	4910      	ldr	r1, [pc, #64]	; (800e350 <xTimerCreateTimerTask+0x84>)
 800e30e:	4811      	ldr	r0, [pc, #68]	; (800e354 <xTimerCreateTimerTask+0x88>)
 800e310:	f7fe fda2 	bl	800ce58 <xTaskCreateStatic>
 800e314:	4602      	mov	r2, r0
 800e316:	4b10      	ldr	r3, [pc, #64]	; (800e358 <xTimerCreateTimerTask+0x8c>)
 800e318:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e31a:	4b0f      	ldr	r3, [pc, #60]	; (800e358 <xTimerCreateTimerTask+0x8c>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d001      	beq.n	800e326 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e322:	2301      	movs	r3, #1
 800e324:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d109      	bne.n	800e340 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800e32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e330:	f383 8811 	msr	BASEPRI, r3
 800e334:	f3bf 8f6f 	isb	sy
 800e338:	f3bf 8f4f 	dsb	sy
 800e33c:	613b      	str	r3, [r7, #16]
 800e33e:	e7fe      	b.n	800e33e <xTimerCreateTimerTask+0x72>
	return xReturn;
 800e340:	697b      	ldr	r3, [r7, #20]
}
 800e342:	4618      	mov	r0, r3
 800e344:	3718      	adds	r7, #24
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	20002d1c 	.word	0x20002d1c
 800e350:	08012800 	.word	0x08012800
 800e354:	0800e48d 	.word	0x0800e48d
 800e358:	20002d20 	.word	0x20002d20

0800e35c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b08a      	sub	sp, #40	; 0x28
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	607a      	str	r2, [r7, #4]
 800e368:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e36a:	2300      	movs	r3, #0
 800e36c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d109      	bne.n	800e388 <xTimerGenericCommand+0x2c>
 800e374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e378:	f383 8811 	msr	BASEPRI, r3
 800e37c:	f3bf 8f6f 	isb	sy
 800e380:	f3bf 8f4f 	dsb	sy
 800e384:	623b      	str	r3, [r7, #32]
 800e386:	e7fe      	b.n	800e386 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e388:	4b19      	ldr	r3, [pc, #100]	; (800e3f0 <xTimerGenericCommand+0x94>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d02a      	beq.n	800e3e6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	2b05      	cmp	r3, #5
 800e3a0:	dc18      	bgt.n	800e3d4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e3a2:	f7ff fbd1 	bl	800db48 <xTaskGetSchedulerState>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	2b02      	cmp	r3, #2
 800e3aa:	d109      	bne.n	800e3c0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e3ac:	4b10      	ldr	r3, [pc, #64]	; (800e3f0 <xTimerGenericCommand+0x94>)
 800e3ae:	6818      	ldr	r0, [r3, #0]
 800e3b0:	f107 0110 	add.w	r1, r7, #16
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3b8:	f7fd ff04 	bl	800c1c4 <xQueueGenericSend>
 800e3bc:	6278      	str	r0, [r7, #36]	; 0x24
 800e3be:	e012      	b.n	800e3e6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e3c0:	4b0b      	ldr	r3, [pc, #44]	; (800e3f0 <xTimerGenericCommand+0x94>)
 800e3c2:	6818      	ldr	r0, [r3, #0]
 800e3c4:	f107 0110 	add.w	r1, r7, #16
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f7fd fefa 	bl	800c1c4 <xQueueGenericSend>
 800e3d0:	6278      	str	r0, [r7, #36]	; 0x24
 800e3d2:	e008      	b.n	800e3e6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e3d4:	4b06      	ldr	r3, [pc, #24]	; (800e3f0 <xTimerGenericCommand+0x94>)
 800e3d6:	6818      	ldr	r0, [r3, #0]
 800e3d8:	f107 0110 	add.w	r1, r7, #16
 800e3dc:	2300      	movs	r3, #0
 800e3de:	683a      	ldr	r2, [r7, #0]
 800e3e0:	f7fd ffea 	bl	800c3b8 <xQueueGenericSendFromISR>
 800e3e4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3728      	adds	r7, #40	; 0x28
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	20002d1c 	.word	0x20002d1c

0800e3f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b088      	sub	sp, #32
 800e3f8:	af02      	add	r7, sp, #8
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3fe:	4b22      	ldr	r3, [pc, #136]	; (800e488 <prvProcessExpiredTimer+0x94>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	68db      	ldr	r3, [r3, #12]
 800e404:	68db      	ldr	r3, [r3, #12]
 800e406:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	3304      	adds	r3, #4
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7fd fc57 	bl	800bcc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e418:	f003 0304 	and.w	r3, r3, #4
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d021      	beq.n	800e464 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	699a      	ldr	r2, [r3, #24]
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	18d1      	adds	r1, r2, r3
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	683a      	ldr	r2, [r7, #0]
 800e42c:	6978      	ldr	r0, [r7, #20]
 800e42e:	f000 f8d1 	bl	800e5d4 <prvInsertTimerInActiveList>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d01e      	beq.n	800e476 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e438:	2300      	movs	r3, #0
 800e43a:	9300      	str	r3, [sp, #0]
 800e43c:	2300      	movs	r3, #0
 800e43e:	687a      	ldr	r2, [r7, #4]
 800e440:	2100      	movs	r1, #0
 800e442:	6978      	ldr	r0, [r7, #20]
 800e444:	f7ff ff8a 	bl	800e35c <xTimerGenericCommand>
 800e448:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d112      	bne.n	800e476 <prvProcessExpiredTimer+0x82>
 800e450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e454:	f383 8811 	msr	BASEPRI, r3
 800e458:	f3bf 8f6f 	isb	sy
 800e45c:	f3bf 8f4f 	dsb	sy
 800e460:	60fb      	str	r3, [r7, #12]
 800e462:	e7fe      	b.n	800e462 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e46a:	f023 0301 	bic.w	r3, r3, #1
 800e46e:	b2da      	uxtb	r2, r3
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	6a1b      	ldr	r3, [r3, #32]
 800e47a:	6978      	ldr	r0, [r7, #20]
 800e47c:	4798      	blx	r3
}
 800e47e:	bf00      	nop
 800e480:	3718      	adds	r7, #24
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	20002d14 	.word	0x20002d14

0800e48c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e494:	f107 0308 	add.w	r3, r7, #8
 800e498:	4618      	mov	r0, r3
 800e49a:	f000 f857 	bl	800e54c <prvGetNextExpireTime>
 800e49e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	68f8      	ldr	r0, [r7, #12]
 800e4a6:	f000 f803 	bl	800e4b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e4aa:	f000 f8d5 	bl	800e658 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e4ae:	e7f1      	b.n	800e494 <prvTimerTask+0x8>

0800e4b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e4ba:	f7fe ff03 	bl	800d2c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e4be:	f107 0308 	add.w	r3, r7, #8
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f000 f866 	bl	800e594 <prvSampleTimeNow>
 800e4c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d130      	bne.n	800e532 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d10a      	bne.n	800e4ec <prvProcessTimerOrBlockTask+0x3c>
 800e4d6:	687a      	ldr	r2, [r7, #4]
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d806      	bhi.n	800e4ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e4de:	f7fe ff37 	bl	800d350 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e4e2:	68f9      	ldr	r1, [r7, #12]
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f7ff ff85 	bl	800e3f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e4ea:	e024      	b.n	800e536 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d008      	beq.n	800e504 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e4f2:	4b13      	ldr	r3, [pc, #76]	; (800e540 <prvProcessTimerOrBlockTask+0x90>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d101      	bne.n	800e500 <prvProcessTimerOrBlockTask+0x50>
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	e000      	b.n	800e502 <prvProcessTimerOrBlockTask+0x52>
 800e500:	2300      	movs	r3, #0
 800e502:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e504:	4b0f      	ldr	r3, [pc, #60]	; (800e544 <prvProcessTimerOrBlockTask+0x94>)
 800e506:	6818      	ldr	r0, [r3, #0]
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	1ad3      	subs	r3, r2, r3
 800e50e:	683a      	ldr	r2, [r7, #0]
 800e510:	4619      	mov	r1, r3
 800e512:	f7fe fc6d 	bl	800cdf0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e516:	f7fe ff1b 	bl	800d350 <xTaskResumeAll>
 800e51a:	4603      	mov	r3, r0
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d10a      	bne.n	800e536 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e520:	4b09      	ldr	r3, [pc, #36]	; (800e548 <prvProcessTimerOrBlockTask+0x98>)
 800e522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e526:	601a      	str	r2, [r3, #0]
 800e528:	f3bf 8f4f 	dsb	sy
 800e52c:	f3bf 8f6f 	isb	sy
}
 800e530:	e001      	b.n	800e536 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e532:	f7fe ff0d 	bl	800d350 <xTaskResumeAll>
}
 800e536:	bf00      	nop
 800e538:	3710      	adds	r7, #16
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}
 800e53e:	bf00      	nop
 800e540:	20002d18 	.word	0x20002d18
 800e544:	20002d1c 	.word	0x20002d1c
 800e548:	e000ed04 	.word	0xe000ed04

0800e54c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e54c:	b480      	push	{r7}
 800e54e:	b085      	sub	sp, #20
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e554:	4b0e      	ldr	r3, [pc, #56]	; (800e590 <prvGetNextExpireTime+0x44>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d101      	bne.n	800e562 <prvGetNextExpireTime+0x16>
 800e55e:	2201      	movs	r2, #1
 800e560:	e000      	b.n	800e564 <prvGetNextExpireTime+0x18>
 800e562:	2200      	movs	r2, #0
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d105      	bne.n	800e57c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e570:	4b07      	ldr	r3, [pc, #28]	; (800e590 <prvGetNextExpireTime+0x44>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	68db      	ldr	r3, [r3, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	60fb      	str	r3, [r7, #12]
 800e57a:	e001      	b.n	800e580 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e57c:	2300      	movs	r3, #0
 800e57e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e580:	68fb      	ldr	r3, [r7, #12]
}
 800e582:	4618      	mov	r0, r3
 800e584:	3714      	adds	r7, #20
 800e586:	46bd      	mov	sp, r7
 800e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58c:	4770      	bx	lr
 800e58e:	bf00      	nop
 800e590:	20002d14 	.word	0x20002d14

0800e594 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e59c:	f7fe ff74 	bl	800d488 <xTaskGetTickCount>
 800e5a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e5a2:	4b0b      	ldr	r3, [pc, #44]	; (800e5d0 <prvSampleTimeNow+0x3c>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	68fa      	ldr	r2, [r7, #12]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d205      	bcs.n	800e5b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e5ac:	f000 f930 	bl	800e810 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	601a      	str	r2, [r3, #0]
 800e5b6:	e002      	b.n	800e5be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e5be:	4a04      	ldr	r2, [pc, #16]	; (800e5d0 <prvSampleTimeNow+0x3c>)
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3710      	adds	r7, #16
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
 800e5ce:	bf00      	nop
 800e5d0:	20002d24 	.word	0x20002d24

0800e5d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b086      	sub	sp, #24
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	607a      	str	r2, [r7, #4]
 800e5e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	68ba      	ldr	r2, [r7, #8]
 800e5ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	68fa      	ldr	r2, [r7, #12]
 800e5f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e5f2:	68ba      	ldr	r2, [r7, #8]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d812      	bhi.n	800e620 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	1ad2      	subs	r2, r2, r3
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	699b      	ldr	r3, [r3, #24]
 800e604:	429a      	cmp	r2, r3
 800e606:	d302      	bcc.n	800e60e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e608:	2301      	movs	r3, #1
 800e60a:	617b      	str	r3, [r7, #20]
 800e60c:	e01b      	b.n	800e646 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e60e:	4b10      	ldr	r3, [pc, #64]	; (800e650 <prvInsertTimerInActiveList+0x7c>)
 800e610:	681a      	ldr	r2, [r3, #0]
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	3304      	adds	r3, #4
 800e616:	4619      	mov	r1, r3
 800e618:	4610      	mov	r0, r2
 800e61a:	f7fd fb18 	bl	800bc4e <vListInsert>
 800e61e:	e012      	b.n	800e646 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e620:	687a      	ldr	r2, [r7, #4]
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	429a      	cmp	r2, r3
 800e626:	d206      	bcs.n	800e636 <prvInsertTimerInActiveList+0x62>
 800e628:	68ba      	ldr	r2, [r7, #8]
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d302      	bcc.n	800e636 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e630:	2301      	movs	r3, #1
 800e632:	617b      	str	r3, [r7, #20]
 800e634:	e007      	b.n	800e646 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e636:	4b07      	ldr	r3, [pc, #28]	; (800e654 <prvInsertTimerInActiveList+0x80>)
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	3304      	adds	r3, #4
 800e63e:	4619      	mov	r1, r3
 800e640:	4610      	mov	r0, r2
 800e642:	f7fd fb04 	bl	800bc4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e646:	697b      	ldr	r3, [r7, #20]
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3718      	adds	r7, #24
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}
 800e650:	20002d18 	.word	0x20002d18
 800e654:	20002d14 	.word	0x20002d14

0800e658 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b08e      	sub	sp, #56	; 0x38
 800e65c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e65e:	e0c6      	b.n	800e7ee <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2b00      	cmp	r3, #0
 800e664:	da17      	bge.n	800e696 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e666:	1d3b      	adds	r3, r7, #4
 800e668:	3304      	adds	r3, #4
 800e66a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d109      	bne.n	800e686 <prvProcessReceivedCommands+0x2e>
 800e672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e676:	f383 8811 	msr	BASEPRI, r3
 800e67a:	f3bf 8f6f 	isb	sy
 800e67e:	f3bf 8f4f 	dsb	sy
 800e682:	61fb      	str	r3, [r7, #28]
 800e684:	e7fe      	b.n	800e684 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e68c:	6850      	ldr	r0, [r2, #4]
 800e68e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e690:	6892      	ldr	r2, [r2, #8]
 800e692:	4611      	mov	r1, r2
 800e694:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	f2c0 80a7 	blt.w	800e7ec <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a4:	695b      	ldr	r3, [r3, #20]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d004      	beq.n	800e6b4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ac:	3304      	adds	r3, #4
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f7fd fb06 	bl	800bcc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e6b4:	463b      	mov	r3, r7
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7ff ff6c 	bl	800e594 <prvSampleTimeNow>
 800e6bc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2b09      	cmp	r3, #9
 800e6c2:	f200 8094 	bhi.w	800e7ee <prvProcessReceivedCommands+0x196>
 800e6c6:	a201      	add	r2, pc, #4	; (adr r2, 800e6cc <prvProcessReceivedCommands+0x74>)
 800e6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6cc:	0800e6f5 	.word	0x0800e6f5
 800e6d0:	0800e6f5 	.word	0x0800e6f5
 800e6d4:	0800e6f5 	.word	0x0800e6f5
 800e6d8:	0800e767 	.word	0x0800e767
 800e6dc:	0800e77b 	.word	0x0800e77b
 800e6e0:	0800e7c3 	.word	0x0800e7c3
 800e6e4:	0800e6f5 	.word	0x0800e6f5
 800e6e8:	0800e6f5 	.word	0x0800e6f5
 800e6ec:	0800e767 	.word	0x0800e767
 800e6f0:	0800e77b 	.word	0x0800e77b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6fa:	f043 0301 	orr.w	r3, r3, #1
 800e6fe:	b2da      	uxtb	r2, r3
 800e700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e702:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e706:	68ba      	ldr	r2, [r7, #8]
 800e708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e70a:	699b      	ldr	r3, [r3, #24]
 800e70c:	18d1      	adds	r1, r2, r3
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e714:	f7ff ff5e 	bl	800e5d4 <prvInsertTimerInActiveList>
 800e718:	4603      	mov	r3, r0
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d067      	beq.n	800e7ee <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e720:	6a1b      	ldr	r3, [r3, #32]
 800e722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e724:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e72c:	f003 0304 	and.w	r3, r3, #4
 800e730:	2b00      	cmp	r3, #0
 800e732:	d05c      	beq.n	800e7ee <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e734:	68ba      	ldr	r2, [r7, #8]
 800e736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e738:	699b      	ldr	r3, [r3, #24]
 800e73a:	441a      	add	r2, r3
 800e73c:	2300      	movs	r3, #0
 800e73e:	9300      	str	r3, [sp, #0]
 800e740:	2300      	movs	r3, #0
 800e742:	2100      	movs	r1, #0
 800e744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e746:	f7ff fe09 	bl	800e35c <xTimerGenericCommand>
 800e74a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e74c:	6a3b      	ldr	r3, [r7, #32]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d14d      	bne.n	800e7ee <prvProcessReceivedCommands+0x196>
 800e752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e756:	f383 8811 	msr	BASEPRI, r3
 800e75a:	f3bf 8f6f 	isb	sy
 800e75e:	f3bf 8f4f 	dsb	sy
 800e762:	61bb      	str	r3, [r7, #24]
 800e764:	e7fe      	b.n	800e764 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e76c:	f023 0301 	bic.w	r3, r3, #1
 800e770:	b2da      	uxtb	r2, r3
 800e772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e774:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e778:	e039      	b.n	800e7ee <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e780:	f043 0301 	orr.w	r3, r3, #1
 800e784:	b2da      	uxtb	r2, r3
 800e786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e788:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e78c:	68ba      	ldr	r2, [r7, #8]
 800e78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e790:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e794:	699b      	ldr	r3, [r3, #24]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d109      	bne.n	800e7ae <prvProcessReceivedCommands+0x156>
 800e79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e79e:	f383 8811 	msr	BASEPRI, r3
 800e7a2:	f3bf 8f6f 	isb	sy
 800e7a6:	f3bf 8f4f 	dsb	sy
 800e7aa:	617b      	str	r3, [r7, #20]
 800e7ac:	e7fe      	b.n	800e7ac <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b0:	699a      	ldr	r2, [r3, #24]
 800e7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b4:	18d1      	adds	r1, r2, r3
 800e7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7bc:	f7ff ff0a 	bl	800e5d4 <prvInsertTimerInActiveList>
					break;
 800e7c0:	e015      	b.n	800e7ee <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7c8:	f003 0302 	and.w	r3, r3, #2
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d103      	bne.n	800e7d8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800e7d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7d2:	f000 fbc7 	bl	800ef64 <vPortFree>
 800e7d6:	e00a      	b.n	800e7ee <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7de:	f023 0301 	bic.w	r3, r3, #1
 800e7e2:	b2da      	uxtb	r2, r3
 800e7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e7ea:	e000      	b.n	800e7ee <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e7ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e7ee:	4b07      	ldr	r3, [pc, #28]	; (800e80c <prvProcessReceivedCommands+0x1b4>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	1d39      	adds	r1, r7, #4
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7fd fefc 	bl	800c5f4 <xQueueReceive>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	f47f af2e 	bne.w	800e660 <prvProcessReceivedCommands+0x8>
	}
}
 800e804:	bf00      	nop
 800e806:	3730      	adds	r7, #48	; 0x30
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	20002d1c 	.word	0x20002d1c

0800e810 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b088      	sub	sp, #32
 800e814:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e816:	e047      	b.n	800e8a8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e818:	4b2d      	ldr	r3, [pc, #180]	; (800e8d0 <prvSwitchTimerLists+0xc0>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e822:	4b2b      	ldr	r3, [pc, #172]	; (800e8d0 <prvSwitchTimerLists+0xc0>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	68db      	ldr	r3, [r3, #12]
 800e828:	68db      	ldr	r3, [r3, #12]
 800e82a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	3304      	adds	r3, #4
 800e830:	4618      	mov	r0, r3
 800e832:	f7fd fa45 	bl	800bcc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	6a1b      	ldr	r3, [r3, #32]
 800e83a:	68f8      	ldr	r0, [r7, #12]
 800e83c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e844:	f003 0304 	and.w	r3, r3, #4
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d02d      	beq.n	800e8a8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	699b      	ldr	r3, [r3, #24]
 800e850:	693a      	ldr	r2, [r7, #16]
 800e852:	4413      	add	r3, r2
 800e854:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e856:	68ba      	ldr	r2, [r7, #8]
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d90e      	bls.n	800e87c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	68ba      	ldr	r2, [r7, #8]
 800e862:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	68fa      	ldr	r2, [r7, #12]
 800e868:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e86a:	4b19      	ldr	r3, [pc, #100]	; (800e8d0 <prvSwitchTimerLists+0xc0>)
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	3304      	adds	r3, #4
 800e872:	4619      	mov	r1, r3
 800e874:	4610      	mov	r0, r2
 800e876:	f7fd f9ea 	bl	800bc4e <vListInsert>
 800e87a:	e015      	b.n	800e8a8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e87c:	2300      	movs	r3, #0
 800e87e:	9300      	str	r3, [sp, #0]
 800e880:	2300      	movs	r3, #0
 800e882:	693a      	ldr	r2, [r7, #16]
 800e884:	2100      	movs	r1, #0
 800e886:	68f8      	ldr	r0, [r7, #12]
 800e888:	f7ff fd68 	bl	800e35c <xTimerGenericCommand>
 800e88c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d109      	bne.n	800e8a8 <prvSwitchTimerLists+0x98>
 800e894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e898:	f383 8811 	msr	BASEPRI, r3
 800e89c:	f3bf 8f6f 	isb	sy
 800e8a0:	f3bf 8f4f 	dsb	sy
 800e8a4:	603b      	str	r3, [r7, #0]
 800e8a6:	e7fe      	b.n	800e8a6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e8a8:	4b09      	ldr	r3, [pc, #36]	; (800e8d0 <prvSwitchTimerLists+0xc0>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d1b2      	bne.n	800e818 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e8b2:	4b07      	ldr	r3, [pc, #28]	; (800e8d0 <prvSwitchTimerLists+0xc0>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e8b8:	4b06      	ldr	r3, [pc, #24]	; (800e8d4 <prvSwitchTimerLists+0xc4>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	4a04      	ldr	r2, [pc, #16]	; (800e8d0 <prvSwitchTimerLists+0xc0>)
 800e8be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e8c0:	4a04      	ldr	r2, [pc, #16]	; (800e8d4 <prvSwitchTimerLists+0xc4>)
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	6013      	str	r3, [r2, #0]
}
 800e8c6:	bf00      	nop
 800e8c8:	3718      	adds	r7, #24
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
 800e8ce:	bf00      	nop
 800e8d0:	20002d14 	.word	0x20002d14
 800e8d4:	20002d18 	.word	0x20002d18

0800e8d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e8de:	f000 f965 	bl	800ebac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e8e2:	4b15      	ldr	r3, [pc, #84]	; (800e938 <prvCheckForValidListAndQueue+0x60>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d120      	bne.n	800e92c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e8ea:	4814      	ldr	r0, [pc, #80]	; (800e93c <prvCheckForValidListAndQueue+0x64>)
 800e8ec:	f7fd f95e 	bl	800bbac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e8f0:	4813      	ldr	r0, [pc, #76]	; (800e940 <prvCheckForValidListAndQueue+0x68>)
 800e8f2:	f7fd f95b 	bl	800bbac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e8f6:	4b13      	ldr	r3, [pc, #76]	; (800e944 <prvCheckForValidListAndQueue+0x6c>)
 800e8f8:	4a10      	ldr	r2, [pc, #64]	; (800e93c <prvCheckForValidListAndQueue+0x64>)
 800e8fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e8fc:	4b12      	ldr	r3, [pc, #72]	; (800e948 <prvCheckForValidListAndQueue+0x70>)
 800e8fe:	4a10      	ldr	r2, [pc, #64]	; (800e940 <prvCheckForValidListAndQueue+0x68>)
 800e900:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e902:	2300      	movs	r3, #0
 800e904:	9300      	str	r3, [sp, #0]
 800e906:	4b11      	ldr	r3, [pc, #68]	; (800e94c <prvCheckForValidListAndQueue+0x74>)
 800e908:	4a11      	ldr	r2, [pc, #68]	; (800e950 <prvCheckForValidListAndQueue+0x78>)
 800e90a:	2110      	movs	r1, #16
 800e90c:	200a      	movs	r0, #10
 800e90e:	f7fd fa69 	bl	800bde4 <xQueueGenericCreateStatic>
 800e912:	4602      	mov	r2, r0
 800e914:	4b08      	ldr	r3, [pc, #32]	; (800e938 <prvCheckForValidListAndQueue+0x60>)
 800e916:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e918:	4b07      	ldr	r3, [pc, #28]	; (800e938 <prvCheckForValidListAndQueue+0x60>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d005      	beq.n	800e92c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e920:	4b05      	ldr	r3, [pc, #20]	; (800e938 <prvCheckForValidListAndQueue+0x60>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	490b      	ldr	r1, [pc, #44]	; (800e954 <prvCheckForValidListAndQueue+0x7c>)
 800e926:	4618      	mov	r0, r3
 800e928:	f7fe fa10 	bl	800cd4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e92c:	f000 f96c 	bl	800ec08 <vPortExitCritical>
}
 800e930:	bf00      	nop
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop
 800e938:	20002d1c 	.word	0x20002d1c
 800e93c:	20002cec 	.word	0x20002cec
 800e940:	20002d00 	.word	0x20002d00
 800e944:	20002d14 	.word	0x20002d14
 800e948:	20002d18 	.word	0x20002d18
 800e94c:	20002dc8 	.word	0x20002dc8
 800e950:	20002d28 	.word	0x20002d28
 800e954:	08012808 	.word	0x08012808

0800e958 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e958:	b480      	push	{r7}
 800e95a:	b085      	sub	sp, #20
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	60f8      	str	r0, [r7, #12]
 800e960:	60b9      	str	r1, [r7, #8]
 800e962:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	3b04      	subs	r3, #4
 800e968:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e970:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	3b04      	subs	r3, #4
 800e976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	f023 0201 	bic.w	r2, r3, #1
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	3b04      	subs	r3, #4
 800e986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e988:	4a0c      	ldr	r2, [pc, #48]	; (800e9bc <pxPortInitialiseStack+0x64>)
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	3b14      	subs	r3, #20
 800e992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	3b04      	subs	r3, #4
 800e99e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f06f 0202 	mvn.w	r2, #2
 800e9a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	3b20      	subs	r3, #32
 800e9ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3714      	adds	r7, #20
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr
 800e9bc:	0800e9c1 	.word	0x0800e9c1

0800e9c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b085      	sub	sp, #20
 800e9c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e9ca:	4b11      	ldr	r3, [pc, #68]	; (800ea10 <prvTaskExitError+0x50>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9d2:	d009      	beq.n	800e9e8 <prvTaskExitError+0x28>
 800e9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d8:	f383 8811 	msr	BASEPRI, r3
 800e9dc:	f3bf 8f6f 	isb	sy
 800e9e0:	f3bf 8f4f 	dsb	sy
 800e9e4:	60fb      	str	r3, [r7, #12]
 800e9e6:	e7fe      	b.n	800e9e6 <prvTaskExitError+0x26>
 800e9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ec:	f383 8811 	msr	BASEPRI, r3
 800e9f0:	f3bf 8f6f 	isb	sy
 800e9f4:	f3bf 8f4f 	dsb	sy
 800e9f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e9fa:	bf00      	nop
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d0fc      	beq.n	800e9fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ea02:	bf00      	nop
 800ea04:	3714      	adds	r7, #20
 800ea06:	46bd      	mov	sp, r7
 800ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0c:	4770      	bx	lr
 800ea0e:	bf00      	nop
 800ea10:	20000010 	.word	0x20000010
	...

0800ea20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ea20:	4b07      	ldr	r3, [pc, #28]	; (800ea40 <pxCurrentTCBConst2>)
 800ea22:	6819      	ldr	r1, [r3, #0]
 800ea24:	6808      	ldr	r0, [r1, #0]
 800ea26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea2a:	f380 8809 	msr	PSP, r0
 800ea2e:	f3bf 8f6f 	isb	sy
 800ea32:	f04f 0000 	mov.w	r0, #0
 800ea36:	f380 8811 	msr	BASEPRI, r0
 800ea3a:	4770      	bx	lr
 800ea3c:	f3af 8000 	nop.w

0800ea40 <pxCurrentTCBConst2>:
 800ea40:	200027ec 	.word	0x200027ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ea44:	bf00      	nop
 800ea46:	bf00      	nop

0800ea48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ea48:	4808      	ldr	r0, [pc, #32]	; (800ea6c <prvPortStartFirstTask+0x24>)
 800ea4a:	6800      	ldr	r0, [r0, #0]
 800ea4c:	6800      	ldr	r0, [r0, #0]
 800ea4e:	f380 8808 	msr	MSP, r0
 800ea52:	f04f 0000 	mov.w	r0, #0
 800ea56:	f380 8814 	msr	CONTROL, r0
 800ea5a:	b662      	cpsie	i
 800ea5c:	b661      	cpsie	f
 800ea5e:	f3bf 8f4f 	dsb	sy
 800ea62:	f3bf 8f6f 	isb	sy
 800ea66:	df00      	svc	0
 800ea68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ea6a:	bf00      	nop
 800ea6c:	e000ed08 	.word	0xe000ed08

0800ea70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b086      	sub	sp, #24
 800ea74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ea76:	4b44      	ldr	r3, [pc, #272]	; (800eb88 <xPortStartScheduler+0x118>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	4a44      	ldr	r2, [pc, #272]	; (800eb8c <xPortStartScheduler+0x11c>)
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d109      	bne.n	800ea94 <xPortStartScheduler+0x24>
 800ea80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea84:	f383 8811 	msr	BASEPRI, r3
 800ea88:	f3bf 8f6f 	isb	sy
 800ea8c:	f3bf 8f4f 	dsb	sy
 800ea90:	613b      	str	r3, [r7, #16]
 800ea92:	e7fe      	b.n	800ea92 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ea94:	4b3c      	ldr	r3, [pc, #240]	; (800eb88 <xPortStartScheduler+0x118>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	4a3d      	ldr	r2, [pc, #244]	; (800eb90 <xPortStartScheduler+0x120>)
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	d109      	bne.n	800eab2 <xPortStartScheduler+0x42>
 800ea9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa2:	f383 8811 	msr	BASEPRI, r3
 800eaa6:	f3bf 8f6f 	isb	sy
 800eaaa:	f3bf 8f4f 	dsb	sy
 800eaae:	60fb      	str	r3, [r7, #12]
 800eab0:	e7fe      	b.n	800eab0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eab2:	4b38      	ldr	r3, [pc, #224]	; (800eb94 <xPortStartScheduler+0x124>)
 800eab4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	22ff      	movs	r2, #255	; 0xff
 800eac2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	781b      	ldrb	r3, [r3, #0]
 800eac8:	b2db      	uxtb	r3, r3
 800eaca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eacc:	78fb      	ldrb	r3, [r7, #3]
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ead4:	b2da      	uxtb	r2, r3
 800ead6:	4b30      	ldr	r3, [pc, #192]	; (800eb98 <xPortStartScheduler+0x128>)
 800ead8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eada:	4b30      	ldr	r3, [pc, #192]	; (800eb9c <xPortStartScheduler+0x12c>)
 800eadc:	2207      	movs	r2, #7
 800eade:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eae0:	e009      	b.n	800eaf6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800eae2:	4b2e      	ldr	r3, [pc, #184]	; (800eb9c <xPortStartScheduler+0x12c>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	3b01      	subs	r3, #1
 800eae8:	4a2c      	ldr	r2, [pc, #176]	; (800eb9c <xPortStartScheduler+0x12c>)
 800eaea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eaec:	78fb      	ldrb	r3, [r7, #3]
 800eaee:	b2db      	uxtb	r3, r3
 800eaf0:	005b      	lsls	r3, r3, #1
 800eaf2:	b2db      	uxtb	r3, r3
 800eaf4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eaf6:	78fb      	ldrb	r3, [r7, #3]
 800eaf8:	b2db      	uxtb	r3, r3
 800eafa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eafe:	2b80      	cmp	r3, #128	; 0x80
 800eb00:	d0ef      	beq.n	800eae2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eb02:	4b26      	ldr	r3, [pc, #152]	; (800eb9c <xPortStartScheduler+0x12c>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f1c3 0307 	rsb	r3, r3, #7
 800eb0a:	2b04      	cmp	r3, #4
 800eb0c:	d009      	beq.n	800eb22 <xPortStartScheduler+0xb2>
 800eb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb12:	f383 8811 	msr	BASEPRI, r3
 800eb16:	f3bf 8f6f 	isb	sy
 800eb1a:	f3bf 8f4f 	dsb	sy
 800eb1e:	60bb      	str	r3, [r7, #8]
 800eb20:	e7fe      	b.n	800eb20 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eb22:	4b1e      	ldr	r3, [pc, #120]	; (800eb9c <xPortStartScheduler+0x12c>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	021b      	lsls	r3, r3, #8
 800eb28:	4a1c      	ldr	r2, [pc, #112]	; (800eb9c <xPortStartScheduler+0x12c>)
 800eb2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eb2c:	4b1b      	ldr	r3, [pc, #108]	; (800eb9c <xPortStartScheduler+0x12c>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eb34:	4a19      	ldr	r2, [pc, #100]	; (800eb9c <xPortStartScheduler+0x12c>)
 800eb36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	b2da      	uxtb	r2, r3
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eb40:	4b17      	ldr	r3, [pc, #92]	; (800eba0 <xPortStartScheduler+0x130>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	4a16      	ldr	r2, [pc, #88]	; (800eba0 <xPortStartScheduler+0x130>)
 800eb46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eb4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eb4c:	4b14      	ldr	r3, [pc, #80]	; (800eba0 <xPortStartScheduler+0x130>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	4a13      	ldr	r2, [pc, #76]	; (800eba0 <xPortStartScheduler+0x130>)
 800eb52:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800eb56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eb58:	f000 f8d6 	bl	800ed08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eb5c:	4b11      	ldr	r3, [pc, #68]	; (800eba4 <xPortStartScheduler+0x134>)
 800eb5e:	2200      	movs	r2, #0
 800eb60:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800eb62:	f000 f8f5 	bl	800ed50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800eb66:	4b10      	ldr	r3, [pc, #64]	; (800eba8 <xPortStartScheduler+0x138>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	4a0f      	ldr	r2, [pc, #60]	; (800eba8 <xPortStartScheduler+0x138>)
 800eb6c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800eb70:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eb72:	f7ff ff69 	bl	800ea48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800eb76:	f7fe fd4f 	bl	800d618 <vTaskSwitchContext>
	prvTaskExitError();
 800eb7a:	f7ff ff21 	bl	800e9c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eb7e:	2300      	movs	r3, #0
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3718      	adds	r7, #24
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	e000ed00 	.word	0xe000ed00
 800eb8c:	410fc271 	.word	0x410fc271
 800eb90:	410fc270 	.word	0x410fc270
 800eb94:	e000e400 	.word	0xe000e400
 800eb98:	20002e18 	.word	0x20002e18
 800eb9c:	20002e1c 	.word	0x20002e1c
 800eba0:	e000ed20 	.word	0xe000ed20
 800eba4:	20000010 	.word	0x20000010
 800eba8:	e000ef34 	.word	0xe000ef34

0800ebac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb6:	f383 8811 	msr	BASEPRI, r3
 800ebba:	f3bf 8f6f 	isb	sy
 800ebbe:	f3bf 8f4f 	dsb	sy
 800ebc2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ebc4:	4b0e      	ldr	r3, [pc, #56]	; (800ec00 <vPortEnterCritical+0x54>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	3301      	adds	r3, #1
 800ebca:	4a0d      	ldr	r2, [pc, #52]	; (800ec00 <vPortEnterCritical+0x54>)
 800ebcc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ebce:	4b0c      	ldr	r3, [pc, #48]	; (800ec00 <vPortEnterCritical+0x54>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	2b01      	cmp	r3, #1
 800ebd4:	d10e      	bne.n	800ebf4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ebd6:	4b0b      	ldr	r3, [pc, #44]	; (800ec04 <vPortEnterCritical+0x58>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d009      	beq.n	800ebf4 <vPortEnterCritical+0x48>
 800ebe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe4:	f383 8811 	msr	BASEPRI, r3
 800ebe8:	f3bf 8f6f 	isb	sy
 800ebec:	f3bf 8f4f 	dsb	sy
 800ebf0:	603b      	str	r3, [r7, #0]
 800ebf2:	e7fe      	b.n	800ebf2 <vPortEnterCritical+0x46>
	}
}
 800ebf4:	bf00      	nop
 800ebf6:	370c      	adds	r7, #12
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr
 800ec00:	20000010 	.word	0x20000010
 800ec04:	e000ed04 	.word	0xe000ed04

0800ec08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ec08:	b480      	push	{r7}
 800ec0a:	b083      	sub	sp, #12
 800ec0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ec0e:	4b11      	ldr	r3, [pc, #68]	; (800ec54 <vPortExitCritical+0x4c>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d109      	bne.n	800ec2a <vPortExitCritical+0x22>
 800ec16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec1a:	f383 8811 	msr	BASEPRI, r3
 800ec1e:	f3bf 8f6f 	isb	sy
 800ec22:	f3bf 8f4f 	dsb	sy
 800ec26:	607b      	str	r3, [r7, #4]
 800ec28:	e7fe      	b.n	800ec28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ec2a:	4b0a      	ldr	r3, [pc, #40]	; (800ec54 <vPortExitCritical+0x4c>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	3b01      	subs	r3, #1
 800ec30:	4a08      	ldr	r2, [pc, #32]	; (800ec54 <vPortExitCritical+0x4c>)
 800ec32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ec34:	4b07      	ldr	r3, [pc, #28]	; (800ec54 <vPortExitCritical+0x4c>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d104      	bne.n	800ec46 <vPortExitCritical+0x3e>
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ec46:	bf00      	nop
 800ec48:	370c      	adds	r7, #12
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec50:	4770      	bx	lr
 800ec52:	bf00      	nop
 800ec54:	20000010 	.word	0x20000010
	...

0800ec60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ec60:	f3ef 8009 	mrs	r0, PSP
 800ec64:	f3bf 8f6f 	isb	sy
 800ec68:	4b15      	ldr	r3, [pc, #84]	; (800ecc0 <pxCurrentTCBConst>)
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	f01e 0f10 	tst.w	lr, #16
 800ec70:	bf08      	it	eq
 800ec72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ec76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec7a:	6010      	str	r0, [r2, #0]
 800ec7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ec80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ec84:	f380 8811 	msr	BASEPRI, r0
 800ec88:	f3bf 8f4f 	dsb	sy
 800ec8c:	f3bf 8f6f 	isb	sy
 800ec90:	f7fe fcc2 	bl	800d618 <vTaskSwitchContext>
 800ec94:	f04f 0000 	mov.w	r0, #0
 800ec98:	f380 8811 	msr	BASEPRI, r0
 800ec9c:	bc09      	pop	{r0, r3}
 800ec9e:	6819      	ldr	r1, [r3, #0]
 800eca0:	6808      	ldr	r0, [r1, #0]
 800eca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eca6:	f01e 0f10 	tst.w	lr, #16
 800ecaa:	bf08      	it	eq
 800ecac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ecb0:	f380 8809 	msr	PSP, r0
 800ecb4:	f3bf 8f6f 	isb	sy
 800ecb8:	4770      	bx	lr
 800ecba:	bf00      	nop
 800ecbc:	f3af 8000 	nop.w

0800ecc0 <pxCurrentTCBConst>:
 800ecc0:	200027ec 	.word	0x200027ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ecc4:	bf00      	nop
 800ecc6:	bf00      	nop

0800ecc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
	__asm volatile
 800ecce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd2:	f383 8811 	msr	BASEPRI, r3
 800ecd6:	f3bf 8f6f 	isb	sy
 800ecda:	f3bf 8f4f 	dsb	sy
 800ecde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ece0:	f7fe fbe2 	bl	800d4a8 <xTaskIncrementTick>
 800ece4:	4603      	mov	r3, r0
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d003      	beq.n	800ecf2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ecea:	4b06      	ldr	r3, [pc, #24]	; (800ed04 <SysTick_Handler+0x3c>)
 800ecec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecf0:	601a      	str	r2, [r3, #0]
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ecfc:	bf00      	nop
 800ecfe:	3708      	adds	r7, #8
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	e000ed04 	.word	0xe000ed04

0800ed08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ed08:	b480      	push	{r7}
 800ed0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ed0c:	4b0b      	ldr	r3, [pc, #44]	; (800ed3c <vPortSetupTimerInterrupt+0x34>)
 800ed0e:	2200      	movs	r2, #0
 800ed10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ed12:	4b0b      	ldr	r3, [pc, #44]	; (800ed40 <vPortSetupTimerInterrupt+0x38>)
 800ed14:	2200      	movs	r2, #0
 800ed16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ed18:	4b0a      	ldr	r3, [pc, #40]	; (800ed44 <vPortSetupTimerInterrupt+0x3c>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	4a0a      	ldr	r2, [pc, #40]	; (800ed48 <vPortSetupTimerInterrupt+0x40>)
 800ed1e:	fba2 2303 	umull	r2, r3, r2, r3
 800ed22:	099b      	lsrs	r3, r3, #6
 800ed24:	4a09      	ldr	r2, [pc, #36]	; (800ed4c <vPortSetupTimerInterrupt+0x44>)
 800ed26:	3b01      	subs	r3, #1
 800ed28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ed2a:	4b04      	ldr	r3, [pc, #16]	; (800ed3c <vPortSetupTimerInterrupt+0x34>)
 800ed2c:	2207      	movs	r2, #7
 800ed2e:	601a      	str	r2, [r3, #0]
}
 800ed30:	bf00      	nop
 800ed32:	46bd      	mov	sp, r7
 800ed34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed38:	4770      	bx	lr
 800ed3a:	bf00      	nop
 800ed3c:	e000e010 	.word	0xe000e010
 800ed40:	e000e018 	.word	0xe000e018
 800ed44:	20000004 	.word	0x20000004
 800ed48:	10624dd3 	.word	0x10624dd3
 800ed4c:	e000e014 	.word	0xe000e014

0800ed50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ed50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ed60 <vPortEnableVFP+0x10>
 800ed54:	6801      	ldr	r1, [r0, #0]
 800ed56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ed5a:	6001      	str	r1, [r0, #0]
 800ed5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ed5e:	bf00      	nop
 800ed60:	e000ed88 	.word	0xe000ed88

0800ed64 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ed64:	b480      	push	{r7}
 800ed66:	b085      	sub	sp, #20
 800ed68:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ed6a:	f3ef 8305 	mrs	r3, IPSR
 800ed6e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2b0f      	cmp	r3, #15
 800ed74:	d913      	bls.n	800ed9e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ed76:	4a16      	ldr	r2, [pc, #88]	; (800edd0 <vPortValidateInterruptPriority+0x6c>)
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ed80:	4b14      	ldr	r3, [pc, #80]	; (800edd4 <vPortValidateInterruptPriority+0x70>)
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	7afa      	ldrb	r2, [r7, #11]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d209      	bcs.n	800ed9e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800ed8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed8e:	f383 8811 	msr	BASEPRI, r3
 800ed92:	f3bf 8f6f 	isb	sy
 800ed96:	f3bf 8f4f 	dsb	sy
 800ed9a:	607b      	str	r3, [r7, #4]
 800ed9c:	e7fe      	b.n	800ed9c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ed9e:	4b0e      	ldr	r3, [pc, #56]	; (800edd8 <vPortValidateInterruptPriority+0x74>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eda6:	4b0d      	ldr	r3, [pc, #52]	; (800eddc <vPortValidateInterruptPriority+0x78>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d909      	bls.n	800edc2 <vPortValidateInterruptPriority+0x5e>
 800edae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb2:	f383 8811 	msr	BASEPRI, r3
 800edb6:	f3bf 8f6f 	isb	sy
 800edba:	f3bf 8f4f 	dsb	sy
 800edbe:	603b      	str	r3, [r7, #0]
 800edc0:	e7fe      	b.n	800edc0 <vPortValidateInterruptPriority+0x5c>
	}
 800edc2:	bf00      	nop
 800edc4:	3714      	adds	r7, #20
 800edc6:	46bd      	mov	sp, r7
 800edc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edcc:	4770      	bx	lr
 800edce:	bf00      	nop
 800edd0:	e000e3f0 	.word	0xe000e3f0
 800edd4:	20002e18 	.word	0x20002e18
 800edd8:	e000ed0c 	.word	0xe000ed0c
 800eddc:	20002e1c 	.word	0x20002e1c

0800ede0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b08a      	sub	sp, #40	; 0x28
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ede8:	2300      	movs	r3, #0
 800edea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800edec:	f7fe fa6a 	bl	800d2c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800edf0:	4b57      	ldr	r3, [pc, #348]	; (800ef50 <pvPortMalloc+0x170>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d101      	bne.n	800edfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800edf8:	f000 f90c 	bl	800f014 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800edfc:	4b55      	ldr	r3, [pc, #340]	; (800ef54 <pvPortMalloc+0x174>)
 800edfe:	681a      	ldr	r2, [r3, #0]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	4013      	ands	r3, r2
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	f040 808c 	bne.w	800ef22 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d01c      	beq.n	800ee4a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800ee10:	2208      	movs	r2, #8
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	4413      	add	r3, r2
 800ee16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f003 0307 	and.w	r3, r3, #7
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d013      	beq.n	800ee4a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f023 0307 	bic.w	r3, r3, #7
 800ee28:	3308      	adds	r3, #8
 800ee2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f003 0307 	and.w	r3, r3, #7
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d009      	beq.n	800ee4a <pvPortMalloc+0x6a>
 800ee36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee3a:	f383 8811 	msr	BASEPRI, r3
 800ee3e:	f3bf 8f6f 	isb	sy
 800ee42:	f3bf 8f4f 	dsb	sy
 800ee46:	617b      	str	r3, [r7, #20]
 800ee48:	e7fe      	b.n	800ee48 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d068      	beq.n	800ef22 <pvPortMalloc+0x142>
 800ee50:	4b41      	ldr	r3, [pc, #260]	; (800ef58 <pvPortMalloc+0x178>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	687a      	ldr	r2, [r7, #4]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d863      	bhi.n	800ef22 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ee5a:	4b40      	ldr	r3, [pc, #256]	; (800ef5c <pvPortMalloc+0x17c>)
 800ee5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ee5e:	4b3f      	ldr	r3, [pc, #252]	; (800ef5c <pvPortMalloc+0x17c>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ee64:	e004      	b.n	800ee70 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ee66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ee6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ee70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	687a      	ldr	r2, [r7, #4]
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d903      	bls.n	800ee82 <pvPortMalloc+0xa2>
 800ee7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d1f1      	bne.n	800ee66 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ee82:	4b33      	ldr	r3, [pc, #204]	; (800ef50 <pvPortMalloc+0x170>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d04a      	beq.n	800ef22 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ee8c:	6a3b      	ldr	r3, [r7, #32]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	2208      	movs	r2, #8
 800ee92:	4413      	add	r3, r2
 800ee94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ee96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	6a3b      	ldr	r3, [r7, #32]
 800ee9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ee9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea0:	685a      	ldr	r2, [r3, #4]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	1ad2      	subs	r2, r2, r3
 800eea6:	2308      	movs	r3, #8
 800eea8:	005b      	lsls	r3, r3, #1
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	d91e      	bls.n	800eeec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eeae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	4413      	add	r3, r2
 800eeb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	f003 0307 	and.w	r3, r3, #7
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d009      	beq.n	800eed4 <pvPortMalloc+0xf4>
 800eec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec4:	f383 8811 	msr	BASEPRI, r3
 800eec8:	f3bf 8f6f 	isb	sy
 800eecc:	f3bf 8f4f 	dsb	sy
 800eed0:	613b      	str	r3, [r7, #16]
 800eed2:	e7fe      	b.n	800eed2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed6:	685a      	ldr	r2, [r3, #4]
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	1ad2      	subs	r2, r2, r3
 800eedc:	69bb      	ldr	r3, [r7, #24]
 800eede:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eee6:	69b8      	ldr	r0, [r7, #24]
 800eee8:	f000 f8f6 	bl	800f0d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eeec:	4b1a      	ldr	r3, [pc, #104]	; (800ef58 <pvPortMalloc+0x178>)
 800eeee:	681a      	ldr	r2, [r3, #0]
 800eef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef2:	685b      	ldr	r3, [r3, #4]
 800eef4:	1ad3      	subs	r3, r2, r3
 800eef6:	4a18      	ldr	r2, [pc, #96]	; (800ef58 <pvPortMalloc+0x178>)
 800eef8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eefa:	4b17      	ldr	r3, [pc, #92]	; (800ef58 <pvPortMalloc+0x178>)
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	4b18      	ldr	r3, [pc, #96]	; (800ef60 <pvPortMalloc+0x180>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d203      	bcs.n	800ef0e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ef06:	4b14      	ldr	r3, [pc, #80]	; (800ef58 <pvPortMalloc+0x178>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4a15      	ldr	r2, [pc, #84]	; (800ef60 <pvPortMalloc+0x180>)
 800ef0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ef0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef10:	685a      	ldr	r2, [r3, #4]
 800ef12:	4b10      	ldr	r3, [pc, #64]	; (800ef54 <pvPortMalloc+0x174>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	431a      	orrs	r2, r3
 800ef18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ef1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef1e:	2200      	movs	r2, #0
 800ef20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ef22:	f7fe fa15 	bl	800d350 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef26:	69fb      	ldr	r3, [r7, #28]
 800ef28:	f003 0307 	and.w	r3, r3, #7
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d009      	beq.n	800ef44 <pvPortMalloc+0x164>
 800ef30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef34:	f383 8811 	msr	BASEPRI, r3
 800ef38:	f3bf 8f6f 	isb	sy
 800ef3c:	f3bf 8f4f 	dsb	sy
 800ef40:	60fb      	str	r3, [r7, #12]
 800ef42:	e7fe      	b.n	800ef42 <pvPortMalloc+0x162>
	return pvReturn;
 800ef44:	69fb      	ldr	r3, [r7, #28]
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3728      	adds	r7, #40	; 0x28
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}
 800ef4e:	bf00      	nop
 800ef50:	200068c0 	.word	0x200068c0
 800ef54:	200068cc 	.word	0x200068cc
 800ef58:	200068c4 	.word	0x200068c4
 800ef5c:	200068b8 	.word	0x200068b8
 800ef60:	200068c8 	.word	0x200068c8

0800ef64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b086      	sub	sp, #24
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d046      	beq.n	800f004 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ef76:	2308      	movs	r3, #8
 800ef78:	425b      	negs	r3, r3
 800ef7a:	697a      	ldr	r2, [r7, #20]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	685a      	ldr	r2, [r3, #4]
 800ef88:	4b20      	ldr	r3, [pc, #128]	; (800f00c <vPortFree+0xa8>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4013      	ands	r3, r2
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d109      	bne.n	800efa6 <vPortFree+0x42>
 800ef92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef96:	f383 8811 	msr	BASEPRI, r3
 800ef9a:	f3bf 8f6f 	isb	sy
 800ef9e:	f3bf 8f4f 	dsb	sy
 800efa2:	60fb      	str	r3, [r7, #12]
 800efa4:	e7fe      	b.n	800efa4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d009      	beq.n	800efc2 <vPortFree+0x5e>
 800efae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb2:	f383 8811 	msr	BASEPRI, r3
 800efb6:	f3bf 8f6f 	isb	sy
 800efba:	f3bf 8f4f 	dsb	sy
 800efbe:	60bb      	str	r3, [r7, #8]
 800efc0:	e7fe      	b.n	800efc0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	685a      	ldr	r2, [r3, #4]
 800efc6:	4b11      	ldr	r3, [pc, #68]	; (800f00c <vPortFree+0xa8>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	4013      	ands	r3, r2
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d019      	beq.n	800f004 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d115      	bne.n	800f004 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	685a      	ldr	r2, [r3, #4]
 800efdc:	4b0b      	ldr	r3, [pc, #44]	; (800f00c <vPortFree+0xa8>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	43db      	mvns	r3, r3
 800efe2:	401a      	ands	r2, r3
 800efe4:	693b      	ldr	r3, [r7, #16]
 800efe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800efe8:	f7fe f96c 	bl	800d2c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	685a      	ldr	r2, [r3, #4]
 800eff0:	4b07      	ldr	r3, [pc, #28]	; (800f010 <vPortFree+0xac>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	4413      	add	r3, r2
 800eff6:	4a06      	ldr	r2, [pc, #24]	; (800f010 <vPortFree+0xac>)
 800eff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800effa:	6938      	ldr	r0, [r7, #16]
 800effc:	f000 f86c 	bl	800f0d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f000:	f7fe f9a6 	bl	800d350 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f004:	bf00      	nop
 800f006:	3718      	adds	r7, #24
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}
 800f00c:	200068cc 	.word	0x200068cc
 800f010:	200068c4 	.word	0x200068c4

0800f014 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f014:	b480      	push	{r7}
 800f016:	b085      	sub	sp, #20
 800f018:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f01a:	f643 2398 	movw	r3, #15000	; 0x3a98
 800f01e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f020:	4b27      	ldr	r3, [pc, #156]	; (800f0c0 <prvHeapInit+0xac>)
 800f022:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	f003 0307 	and.w	r3, r3, #7
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d00c      	beq.n	800f048 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	3307      	adds	r3, #7
 800f032:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f023 0307 	bic.w	r3, r3, #7
 800f03a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f03c:	68ba      	ldr	r2, [r7, #8]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	1ad3      	subs	r3, r2, r3
 800f042:	4a1f      	ldr	r2, [pc, #124]	; (800f0c0 <prvHeapInit+0xac>)
 800f044:	4413      	add	r3, r2
 800f046:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f04c:	4a1d      	ldr	r2, [pc, #116]	; (800f0c4 <prvHeapInit+0xb0>)
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f052:	4b1c      	ldr	r3, [pc, #112]	; (800f0c4 <prvHeapInit+0xb0>)
 800f054:	2200      	movs	r2, #0
 800f056:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	68ba      	ldr	r2, [r7, #8]
 800f05c:	4413      	add	r3, r2
 800f05e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f060:	2208      	movs	r2, #8
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	1a9b      	subs	r3, r3, r2
 800f066:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f023 0307 	bic.w	r3, r3, #7
 800f06e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	4a15      	ldr	r2, [pc, #84]	; (800f0c8 <prvHeapInit+0xb4>)
 800f074:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f076:	4b14      	ldr	r3, [pc, #80]	; (800f0c8 <prvHeapInit+0xb4>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	2200      	movs	r2, #0
 800f07c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f07e:	4b12      	ldr	r3, [pc, #72]	; (800f0c8 <prvHeapInit+0xb4>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	2200      	movs	r2, #0
 800f084:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	68fa      	ldr	r2, [r7, #12]
 800f08e:	1ad2      	subs	r2, r2, r3
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f094:	4b0c      	ldr	r3, [pc, #48]	; (800f0c8 <prvHeapInit+0xb4>)
 800f096:	681a      	ldr	r2, [r3, #0]
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	4a0a      	ldr	r2, [pc, #40]	; (800f0cc <prvHeapInit+0xb8>)
 800f0a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	685b      	ldr	r3, [r3, #4]
 800f0a8:	4a09      	ldr	r2, [pc, #36]	; (800f0d0 <prvHeapInit+0xbc>)
 800f0aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f0ac:	4b09      	ldr	r3, [pc, #36]	; (800f0d4 <prvHeapInit+0xc0>)
 800f0ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f0b2:	601a      	str	r2, [r3, #0]
}
 800f0b4:	bf00      	nop
 800f0b6:	3714      	adds	r7, #20
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr
 800f0c0:	20002e20 	.word	0x20002e20
 800f0c4:	200068b8 	.word	0x200068b8
 800f0c8:	200068c0 	.word	0x200068c0
 800f0cc:	200068c8 	.word	0x200068c8
 800f0d0:	200068c4 	.word	0x200068c4
 800f0d4:	200068cc 	.word	0x200068cc

0800f0d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b085      	sub	sp, #20
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f0e0:	4b28      	ldr	r3, [pc, #160]	; (800f184 <prvInsertBlockIntoFreeList+0xac>)
 800f0e2:	60fb      	str	r3, [r7, #12]
 800f0e4:	e002      	b.n	800f0ec <prvInsertBlockIntoFreeList+0x14>
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	60fb      	str	r3, [r7, #12]
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	687a      	ldr	r2, [r7, #4]
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d8f7      	bhi.n	800f0e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	685b      	ldr	r3, [r3, #4]
 800f0fe:	68ba      	ldr	r2, [r7, #8]
 800f100:	4413      	add	r3, r2
 800f102:	687a      	ldr	r2, [r7, #4]
 800f104:	429a      	cmp	r2, r3
 800f106:	d108      	bne.n	800f11a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	685a      	ldr	r2, [r3, #4]
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	685b      	ldr	r3, [r3, #4]
 800f110:	441a      	add	r2, r3
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	685b      	ldr	r3, [r3, #4]
 800f122:	68ba      	ldr	r2, [r7, #8]
 800f124:	441a      	add	r2, r3
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d118      	bne.n	800f160 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681a      	ldr	r2, [r3, #0]
 800f132:	4b15      	ldr	r3, [pc, #84]	; (800f188 <prvInsertBlockIntoFreeList+0xb0>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	429a      	cmp	r2, r3
 800f138:	d00d      	beq.n	800f156 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	685a      	ldr	r2, [r3, #4]
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	685b      	ldr	r3, [r3, #4]
 800f144:	441a      	add	r2, r3
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	681a      	ldr	r2, [r3, #0]
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	601a      	str	r2, [r3, #0]
 800f154:	e008      	b.n	800f168 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f156:	4b0c      	ldr	r3, [pc, #48]	; (800f188 <prvInsertBlockIntoFreeList+0xb0>)
 800f158:	681a      	ldr	r2, [r3, #0]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	601a      	str	r2, [r3, #0]
 800f15e:	e003      	b.n	800f168 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681a      	ldr	r2, [r3, #0]
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f168:	68fa      	ldr	r2, [r7, #12]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d002      	beq.n	800f176 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f176:	bf00      	nop
 800f178:	3714      	adds	r7, #20
 800f17a:	46bd      	mov	sp, r7
 800f17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f180:	4770      	bx	lr
 800f182:	bf00      	nop
 800f184:	200068b8 	.word	0x200068b8
 800f188:	200068c0 	.word	0x200068c0

0800f18c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800f18c:	b480      	push	{r7}
 800f18e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800f190:	4b03      	ldr	r3, [pc, #12]	; (800f1a0 <LL_FLASH_GetUDN+0x14>)
 800f192:	681b      	ldr	r3, [r3, #0]
}
 800f194:	4618      	mov	r0, r3
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr
 800f19e:	bf00      	nop
 800f1a0:	1fff7580 	.word	0x1fff7580

0800f1a4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800f1a8:	4b03      	ldr	r3, [pc, #12]	; (800f1b8 <LL_FLASH_GetDeviceID+0x14>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	b2db      	uxtb	r3, r3
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr
 800f1b8:	1fff7584 	.word	0x1fff7584

0800f1bc <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800f1bc:	b480      	push	{r7}
 800f1be:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800f1c0:	4b03      	ldr	r3, [pc, #12]	; (800f1d0 <LL_FLASH_GetSTCompanyID+0x14>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	0a1b      	lsrs	r3, r3, #8
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr
 800f1d0:	1fff7584 	.word	0x1fff7584

0800f1d4 <APP_BLE_Init_Dyn_1>:
void LinkConfiguration(void * argument);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init_Dyn_1( void )
{
 800f1d4:	b5b0      	push	{r4, r5, r7, lr}
 800f1d6:	b08c      	sub	sp, #48	; 0x30
 800f1d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800f1da:	4b2f      	ldr	r3, [pc, #188]	; (800f298 <APP_BLE_Init_Dyn_1+0xc4>)
 800f1dc:	463c      	mov	r4, r7
 800f1de:	461d      	mov	r5, r3
 800f1e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f1e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f1e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f1ec:	c407      	stmia	r4!, {r0, r1, r2}
 800f1ee:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800f1f0:	f000 fa10 	bl	800f614 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800f1f4:	2101      	movs	r1, #1
 800f1f6:	2004      	movs	r0, #4
 800f1f8:	f001 fed2 	bl	8010fa0 <UTIL_LPM_SetOffMode>
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  HciUserEvtProcessId = osThreadNew(HciUserEvtProcess, NULL, &HciUserEvtProcess_attr);
 800f1fc:	4a27      	ldr	r2, [pc, #156]	; (800f29c <APP_BLE_Init_Dyn_1+0xc8>)
 800f1fe:	2100      	movs	r1, #0
 800f200:	4827      	ldr	r0, [pc, #156]	; (800f2a0 <APP_BLE_Init_Dyn_1+0xcc>)
 800f202:	f7fc f831 	bl	800b268 <osThreadNew>
 800f206:	4602      	mov	r2, r0
 800f208:	4b26      	ldr	r3, [pc, #152]	; (800f2a4 <APP_BLE_Init_Dyn_1+0xd0>)
 800f20a:	601a      	str	r2, [r3, #0]
//  SHCI_C2_BLE_Init( &ble_init_cmd_packet );

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800f20c:	463b      	mov	r3, r7
 800f20e:	4618      	mov	r0, r3
 800f210:	f7fa f816 	bl	8009240 <SHCI_C2_BLE_Init>
 800f214:	4603      	mov	r3, r0
 800f216:	2b00      	cmp	r3, #0
 800f218:	d001      	beq.n	800f21e <APP_BLE_Init_Dyn_1+0x4a>
  {
    Error_Handler();
 800f21a:	f7f3 f8a5 	bl	8002368 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800f21e:	f000 fa0f 	bl	800f640 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800f222:	f7f9 ff1f 	bl	8009064 <SVCCTL_Init>

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
  index_con_int = 0;
 800f226:	4b20      	ldr	r3, [pc, #128]	; (800f2a8 <APP_BLE_Init_Dyn_1+0xd4>)
 800f228:	2200      	movs	r2, #0
 800f22a:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 800f22c:	4b1f      	ldr	r3, [pc, #124]	; (800f2ac <APP_BLE_Init_Dyn_1+0xd8>)
 800f22e:	2201      	movs	r2, #1
 800f230:	701a      	strb	r2, [r3, #0]


  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f232:	4b1f      	ldr	r3, [pc, #124]	; (800f2b0 <APP_BLE_Init_Dyn_1+0xdc>)
 800f234:	2200      	movs	r2, #0
 800f236:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800f23a:	4b1d      	ldr	r3, [pc, #116]	; (800f2b0 <APP_BLE_Init_Dyn_1+0xdc>)
 800f23c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f240:	84da      	strh	r2, [r3, #38]	; 0x26
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);

  /**
   * From here, all initialization are BLE application specific
   */
  AdvUpdateProcessId = osThreadNew(AdvUpdateProcess, NULL, &AdvUpdateProcess_attr);
 800f242:	4a1c      	ldr	r2, [pc, #112]	; (800f2b4 <APP_BLE_Init_Dyn_1+0xe0>)
 800f244:	2100      	movs	r1, #0
 800f246:	481c      	ldr	r0, [pc, #112]	; (800f2b8 <APP_BLE_Init_Dyn_1+0xe4>)
 800f248:	f7fc f80e 	bl	800b268 <osThreadNew>
 800f24c:	4602      	mov	r2, r0
 800f24e:	4b1b      	ldr	r3, [pc, #108]	; (800f2bc <APP_BLE_Init_Dyn_1+0xe8>)
 800f250:	601a      	str	r2, [r3, #0]
  //ST SW Engineers converted the below statement to a FreeRTOS-friendly function: Adv_Request()
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_START_ADV_ID, UTIL_SEQ_RFU, Adv_Request);
  /**
    * Create timer for Data Throughput process (write data)
    */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(TimerDataThroughputWrite_Id), hw_ts_SingleShot, DataThroughput_proc);
 800f252:	4b1b      	ldr	r3, [pc, #108]	; (800f2c0 <APP_BLE_Init_Dyn_1+0xec>)
 800f254:	2200      	movs	r2, #0
 800f256:	491b      	ldr	r1, [pc, #108]	; (800f2c4 <APP_BLE_Init_Dyn_1+0xf0>)
 800f258:	2000      	movs	r0, #0
 800f25a:	f7f2 fd01 	bl	8001c60 <HW_TS_Create>
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_UPDATE_ID, UTIL_SEQ_RFU, Connection_Update);
#endif


  LinkConfigProcessId= osThreadNew(LinkConfiguration, NULL, &LinkConfigProcess_attr);
 800f25e:	4a1a      	ldr	r2, [pc, #104]	; (800f2c8 <APP_BLE_Init_Dyn_1+0xf4>)
 800f260:	2100      	movs	r1, #0
 800f262:	481a      	ldr	r0, [pc, #104]	; (800f2cc <APP_BLE_Init_Dyn_1+0xf8>)
 800f264:	f7fc f800 	bl	800b268 <osThreadNew>
 800f268:	4602      	mov	r2, r0
 800f26a:	4b19      	ldr	r3, [pc, #100]	; (800f2d0 <APP_BLE_Init_Dyn_1+0xfc>)
 800f26c:	601a      	str	r2, [r3, #0]

  BleApplicationContext.DeviceServerFound = NO_DEVICE_FOUND;
 800f26e:	4b10      	ldr	r3, [pc, #64]	; (800f2b0 <APP_BLE_Init_Dyn_1+0xdc>)
 800f270:	2200      	movs	r2, #0
 800f272:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

  /**
   * Clear DataBase
   */
  aci_gap_clear_security_db();
 800f276:	f7f8 fd4b 	bl	8007d10 <aci_gap_clear_security_db>

  /**
   * Initialize Data Server (GATT SERVER)
   */

  DTS_App_Init();
 800f27a:	f001 f871 	bl	8010360 <DTS_App_Init>

  //TODO: ripped from heartbeat. I think this sends the manufacturer information to the connecting device
  /**
   * Initialize DIS Application
   */
  DISAPP_Init();
 800f27e:	f000 ffed 	bl	801025c <DISAPP_Init>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
#endif
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800f282:	4b14      	ldr	r3, [pc, #80]	; (800f2d4 <APP_BLE_Init_Dyn_1+0x100>)
 800f284:	2200      	movs	r2, #0
 800f286:	4914      	ldr	r1, [pc, #80]	; (800f2d8 <APP_BLE_Init_Dyn_1+0x104>)
 800f288:	2000      	movs	r0, #0
 800f28a:	f7f2 fce9 	bl	8001c60 <HW_TS_Create>
  return;
 800f28e:	bf00      	nop
}
 800f290:	3730      	adds	r7, #48	; 0x30
 800f292:	46bd      	mov	sp, r7
 800f294:	bdb0      	pop	{r4, r5, r7, pc}
 800f296:	bf00      	nop
 800f298:	08012848 	.word	0x08012848
 800f29c:	08012c7c 	.word	0x08012c7c
 800f2a0:	0800f9c3 	.word	0x0800f9c3
 800f2a4:	20006f58 	.word	0x20006f58
 800f2a8:	20006f6d 	.word	0x20006f6d
 800f2ac:	20006f6c 	.word	0x20006f6c
 800f2b0:	2000018c 	.word	0x2000018c
 800f2b4:	08012c58 	.word	0x08012c58
 800f2b8:	0800f99b 	.word	0x0800f99b
 800f2bc:	20006f8c 	.word	0x20006f8c
 800f2c0:	0800f9dd 	.word	0x0800f9dd
 800f2c4:	20006f7c 	.word	0x20006f7c
 800f2c8:	08012ca0 	.word	0x08012ca0
 800f2cc:	0800f9f5 	.word	0x0800f9f5
 800f2d0:	20006f60 	.word	0x20006f60
 800f2d4:	0800fa2d 	.word	0x0800fa2d
 800f2d8:	2000021e 	.word	0x2000021e

0800f2dc <APP_BLE_Init_Dyn_2>:

void APP_BLE_Init_Dyn_2( void ) {
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	af00      	add	r7, sp, #0
  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL; //TODO: the heartbeat example uses: AD_TYPE_16_BIT_SERV_UUID
 800f2e0:	4b09      	ldr	r3, [pc, #36]	; (800f308 <APP_BLE_Init_Dyn_2+0x2c>)
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800f2e8:	4b07      	ldr	r3, [pc, #28]	; (800f308 <APP_BLE_Init_Dyn_2+0x2c>)
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800f2f0:	4b06      	ldr	r3, [pc, #24]	; (800f30c <APP_BLE_Init_Dyn_2+0x30>)
 800f2f2:	2280      	movs	r2, #128	; 0x80
 800f2f4:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800f2f6:	4b06      	ldr	r3, [pc, #24]	; (800f310 <APP_BLE_Init_Dyn_2+0x34>)
 800f2f8:	22a0      	movs	r2, #160	; 0xa0
 800f2fa:	801a      	strh	r2, [r3, #0]
   * Start to Advertise to be connected by P2P Client
   */
#ifndef DYNAMIC_MODE
   Adv_Request(APP_BLE_FAST_ADV);
#else
   Adv_Request(APP_BLE_LP_ADV);
 800f2fc:	2002      	movs	r0, #2
 800f2fe:	f000 fa5b 	bl	800f7b8 <Adv_Request>
#endif
/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 800f302:	bf00      	nop
}
 800f304:	bd80      	pop	{r7, pc}
 800f306:	bf00      	nop
 800f308:	2000018c 	.word	0x2000018c
 800f30c:	20000220 	.word	0x20000220
 800f310:	20000222 	.word	0x20000222

0800f314 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800f314:	b590      	push	{r4, r7, lr}
 800f316:	b093      	sub	sp, #76	; 0x4c
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  hci_le_connection_update_complete_event_rp0 *connection_update_complete;
  uint8_t event_type, event_data_size;
  int k = 0;
 800f31c:	2300      	movs	r3, #0
 800f31e:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t adtype, adlength;
  uint8_t *adv_report_data;
  float Connection_Interval;
  float Supervision_Timeout;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	3301      	adds	r3, #1
 800f324:	643b      	str	r3, [r7, #64]	; 0x40

  switch (event_pckt->evt)
 800f326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	2b3e      	cmp	r3, #62	; 0x3e
 800f32c:	d025      	beq.n	800f37a <SVCCTL_App_Notification+0x66>
 800f32e:	2bff      	cmp	r3, #255	; 0xff
 800f330:	f000 8116 	beq.w	800f560 <SVCCTL_App_Notification+0x24c>
 800f334:	2b05      	cmp	r3, #5
 800f336:	d000      	beq.n	800f33a <SVCCTL_App_Notification+0x26>

        default:
        /* USER CODE BEGIN ECODE_DEFAULT*/

        /* USER CODE END ECODE_DEFAULT*/
          break;
 800f338:	e158      	b.n	800f5ec <SVCCTL_App_Notification+0x2d8>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800f33a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f33c:	3302      	adds	r3, #2
 800f33e:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f346:	b29a      	uxth	r2, r3
 800f348:	4bab      	ldr	r3, [pc, #684]	; (800f5f8 <SVCCTL_App_Notification+0x2e4>)
 800f34a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d106      	bne.n	800f35e <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800f350:	4ba9      	ldr	r3, [pc, #676]	; (800f5f8 <SVCCTL_App_Notification+0x2e4>)
 800f352:	2200      	movs	r2, #0
 800f354:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f356:	4ba8      	ldr	r3, [pc, #672]	; (800f5f8 <SVCCTL_App_Notification+0x2e4>)
 800f358:	2200      	movs	r2, #0
 800f35a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
       Adv_Request(APP_BLE_FAST_ADV);
 800f35e:	2001      	movs	r0, #1
 800f360:	f000 fa2a 	bl	800f7b8 <Adv_Request>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800f364:	4ba5      	ldr	r3, [pc, #660]	; (800f5fc <SVCCTL_App_Notification+0x2e8>)
 800f366:	2201      	movs	r2, #1
 800f368:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800f36a:	4ba3      	ldr	r3, [pc, #652]	; (800f5f8 <SVCCTL_App_Notification+0x2e4>)
 800f36c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800f36e:	4ba3      	ldr	r3, [pc, #652]	; (800f5fc <SVCCTL_App_Notification+0x2e8>)
 800f370:	805a      	strh	r2, [r3, #2]
        P2PS_APP_Notification(&handleNotification);
 800f372:	48a2      	ldr	r0, [pc, #648]	; (800f5fc <SVCCTL_App_Notification+0x2e8>)
 800f374:	f001 fae0 	bl	8010938 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 800f378:	e138      	b.n	800f5ec <SVCCTL_App_Notification+0x2d8>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800f37a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f37c:	3302      	adds	r3, #2
 800f37e:	637b      	str	r3, [r7, #52]	; 0x34
      switch (meta_evt->subevent)
 800f380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	3b01      	subs	r3, #1
 800f386:	2b0b      	cmp	r3, #11
 800f388:	f200 80e6 	bhi.w	800f558 <SVCCTL_App_Notification+0x244>
 800f38c:	a201      	add	r2, pc, #4	; (adr r2, 800f394 <SVCCTL_App_Notification+0x80>)
 800f38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f392:	bf00      	nop
 800f394:	0800f421 	.word	0x0800f421
 800f398:	0800f47d 	.word	0x0800f47d
 800f39c:	0800f3cd 	.word	0x0800f3cd
 800f3a0:	0800f559 	.word	0x0800f559
 800f3a4:	0800f559 	.word	0x0800f559
 800f3a8:	0800f559 	.word	0x0800f559
 800f3ac:	0800f559 	.word	0x0800f559
 800f3b0:	0800f559 	.word	0x0800f559
 800f3b4:	0800f559 	.word	0x0800f559
 800f3b8:	0800f559 	.word	0x0800f559
 800f3bc:	0800f559 	.word	0x0800f559
 800f3c0:	0800f3c5 	.word	0x0800f3c5
        evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800f3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800f3ca:	e0c8      	b.n	800f55e <SVCCTL_App_Notification+0x24a>
          mutex = 1;
 800f3cc:	4b8c      	ldr	r3, [pc, #560]	; (800f600 <SVCCTL_App_Notification+0x2ec>)
 800f3ce:	2201      	movs	r2, #1
 800f3d0:	701a      	strb	r2, [r3, #0]
          connection_update_complete = (hci_le_connection_update_complete_event_rp0*)meta_evt->data;
 800f3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3d4:	3301      	adds	r3, #1
 800f3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
          Connection_Interval = connection_update_complete->Conn_Interval * 1.25;
 800f3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3da:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7f1 f887 	bl	80004f4 <__aeabi_i2d>
 800f3e6:	f04f 0200 	mov.w	r2, #0
 800f3ea:	4b86      	ldr	r3, [pc, #536]	; (800f604 <SVCCTL_App_Notification+0x2f0>)
 800f3ec:	f7f1 f8ec 	bl	80005c8 <__aeabi_dmul>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	460c      	mov	r4, r1
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	4621      	mov	r1, r4
 800f3f8:	f7f1 faf8 	bl	80009ec <__aeabi_d2f>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	62bb      	str	r3, [r7, #40]	; 0x28
          Supervision_Timeout = connection_update_complete->Supervision_Timeout * 10;
 800f400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f402:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f406:	b29b      	uxth	r3, r3
 800f408:	461a      	mov	r2, r3
 800f40a:	4613      	mov	r3, r2
 800f40c:	009b      	lsls	r3, r3, #2
 800f40e:	4413      	add	r3, r2
 800f410:	005b      	lsls	r3, r3, #1
 800f412:	ee07 3a90 	vmov	s15, r3
 800f416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f41a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
          break;
 800f41e:	e09e      	b.n	800f55e <SVCCTL_App_Notification+0x24a>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800f420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f422:	3301      	adds	r3, #1
 800f424:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800f426:	4b74      	ldr	r3, [pc, #464]	; (800f5f8 <SVCCTL_App_Notification+0x2e4>)
 800f428:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7f2 fc8d 	bl	8001d4c <HW_TS_Stop>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800f432:	4b71      	ldr	r3, [pc, #452]	; (800f5f8 <SVCCTL_App_Notification+0x2e4>)
 800f434:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800f438:	2b04      	cmp	r3, #4
 800f43a:	d104      	bne.n	800f446 <SVCCTL_App_Notification+0x132>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800f43c:	4b6e      	ldr	r3, [pc, #440]	; (800f5f8 <SVCCTL_App_Notification+0x2e4>)
 800f43e:	2206      	movs	r2, #6
 800f440:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800f444:	e003      	b.n	800f44e <SVCCTL_App_Notification+0x13a>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800f446:	4b6c      	ldr	r3, [pc, #432]	; (800f5f8 <SVCCTL_App_Notification+0x2e4>)
 800f448:	2205      	movs	r2, #5
 800f44a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                connection_complete_event->Connection_Handle;
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f454:	b29a      	uxth	r2, r3
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 800f456:	4b68      	ldr	r3, [pc, #416]	; (800f5f8 <SVCCTL_App_Notification+0x2e4>)
 800f458:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800f45a:	4b68      	ldr	r3, [pc, #416]	; (800f5fc <SVCCTL_App_Notification+0x2e8>)
 800f45c:	2200      	movs	r2, #0
 800f45e:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800f460:	4b65      	ldr	r3, [pc, #404]	; (800f5f8 <SVCCTL_App_Notification+0x2e4>)
 800f462:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800f464:	4b65      	ldr	r3, [pc, #404]	; (800f5fc <SVCCTL_App_Notification+0x2e8>)
 800f466:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800f468:	4864      	ldr	r0, [pc, #400]	; (800f5fc <SVCCTL_App_Notification+0x2e8>)
 800f46a:	f001 fa65 	bl	8010938 <P2PS_APP_Notification>
          osThreadFlagsSet( LinkConfigProcessId, 1 );
 800f46e:	4b66      	ldr	r3, [pc, #408]	; (800f608 <SVCCTL_App_Notification+0x2f4>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	2101      	movs	r1, #1
 800f474:	4618      	mov	r0, r3
 800f476:	f7fb ff9d 	bl	800b3b4 <osThreadFlagsSet>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800f47a:	e070      	b.n	800f55e <SVCCTL_App_Notification+0x24a>
          le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 800f47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f47e:	3301      	adds	r3, #1
 800f480:	623b      	str	r3, [r7, #32]
          event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 800f482:	6a3b      	ldr	r3, [r7, #32]
 800f484:	785b      	ldrb	r3, [r3, #1]
 800f486:	77fb      	strb	r3, [r7, #31]
          event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 800f488:	6a3b      	ldr	r3, [r7, #32]
 800f48a:	7a5b      	ldrb	r3, [r3, #9]
 800f48c:	77bb      	strb	r3, [r7, #30]
          adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 800f48e:	6a3b      	ldr	r3, [r7, #32]
 800f490:	3309      	adds	r3, #9
 800f492:	3301      	adds	r3, #1
 800f494:	61bb      	str	r3, [r7, #24]
          k = 0;
 800f496:	2300      	movs	r3, #0
 800f498:	647b      	str	r3, [r7, #68]	; 0x44
          if (event_type == ADV_IND)
 800f49a:	7ffb      	ldrb	r3, [r7, #31]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d15d      	bne.n	800f55c <SVCCTL_App_Notification+0x248>
            while(k < event_data_size)
 800f4a0:	e055      	b.n	800f54e <SVCCTL_App_Notification+0x23a>
              adlength = adv_report_data[k];
 800f4a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4a4:	69ba      	ldr	r2, [r7, #24]
 800f4a6:	4413      	add	r3, r2
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	75fb      	strb	r3, [r7, #23]
              adtype = adv_report_data[k + 1];
 800f4ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4ae:	3301      	adds	r3, #1
 800f4b0:	69ba      	ldr	r2, [r7, #24]
 800f4b2:	4413      	add	r3, r2
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	75bb      	strb	r3, [r7, #22]
              switch (adtype)
 800f4b8:	7dbb      	ldrb	r3, [r7, #22]
 800f4ba:	2b0a      	cmp	r3, #10
 800f4bc:	d03d      	beq.n	800f53a <SVCCTL_App_Notification+0x226>
 800f4be:	2b0a      	cmp	r3, #10
 800f4c0:	dc02      	bgt.n	800f4c8 <SVCCTL_App_Notification+0x1b4>
 800f4c2:	2b01      	cmp	r3, #1
 800f4c4:	d03b      	beq.n	800f53e <SVCCTL_App_Notification+0x22a>
                  break;
 800f4c6:	e03d      	b.n	800f544 <SVCCTL_App_Notification+0x230>
              switch (adtype)
 800f4c8:	2b16      	cmp	r3, #22
 800f4ca:	d03a      	beq.n	800f542 <SVCCTL_App_Notification+0x22e>
 800f4cc:	2bff      	cmp	r3, #255	; 0xff
 800f4ce:	d000      	beq.n	800f4d2 <SVCCTL_App_Notification+0x1be>
                  break;
 800f4d0:	e038      	b.n	800f544 <SVCCTL_App_Notification+0x230>
                  if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 800f4d2:	7dfb      	ldrb	r3, [r7, #23]
 800f4d4:	2b06      	cmp	r3, #6
 800f4d6:	d92e      	bls.n	800f536 <SVCCTL_App_Notification+0x222>
 800f4d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4da:	3302      	adds	r3, #2
 800f4dc:	69ba      	ldr	r2, [r7, #24]
 800f4de:	4413      	add	r3, r2
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	2b01      	cmp	r3, #1
 800f4e4:	d127      	bne.n	800f536 <SVCCTL_App_Notification+0x222>
                    switch (adv_report_data[k + 3])
 800f4e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4e8:	3303      	adds	r3, #3
 800f4ea:	69ba      	ldr	r2, [r7, #24]
 800f4ec:	4413      	add	r3, r2
 800f4ee:	781b      	ldrb	r3, [r3, #0]
 800f4f0:	2b88      	cmp	r3, #136	; 0x88
 800f4f2:	d000      	beq.n	800f4f6 <SVCCTL_App_Notification+0x1e2>
                        break;
 800f4f4:	e020      	b.n	800f538 <SVCCTL_App_Notification+0x224>
                        BleApplicationContext.DeviceServerFound = AT_LEAST_ONE_DEVICE_FOUND;
 800f4f6:	4b40      	ldr	r3, [pc, #256]	; (800f5f8 <SVCCTL_App_Notification+0x2e4>)
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
                        SERVER_REMOTE_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 800f4fe:	6a3b      	ldr	r3, [r7, #32]
 800f500:	78da      	ldrb	r2, [r3, #3]
 800f502:	4b42      	ldr	r3, [pc, #264]	; (800f60c <SVCCTL_App_Notification+0x2f8>)
 800f504:	701a      	strb	r2, [r3, #0]
                        SERVER_REMOTE_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800f506:	6a3b      	ldr	r3, [r7, #32]
 800f508:	791a      	ldrb	r2, [r3, #4]
 800f50a:	4b40      	ldr	r3, [pc, #256]	; (800f60c <SVCCTL_App_Notification+0x2f8>)
 800f50c:	705a      	strb	r2, [r3, #1]
                        SERVER_REMOTE_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 800f50e:	6a3b      	ldr	r3, [r7, #32]
 800f510:	795a      	ldrb	r2, [r3, #5]
 800f512:	4b3e      	ldr	r3, [pc, #248]	; (800f60c <SVCCTL_App_Notification+0x2f8>)
 800f514:	709a      	strb	r2, [r3, #2]
                        SERVER_REMOTE_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 800f516:	6a3b      	ldr	r3, [r7, #32]
 800f518:	799a      	ldrb	r2, [r3, #6]
 800f51a:	4b3c      	ldr	r3, [pc, #240]	; (800f60c <SVCCTL_App_Notification+0x2f8>)
 800f51c:	70da      	strb	r2, [r3, #3]
                        SERVER_REMOTE_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 800f51e:	6a3b      	ldr	r3, [r7, #32]
 800f520:	79da      	ldrb	r2, [r3, #7]
 800f522:	4b3a      	ldr	r3, [pc, #232]	; (800f60c <SVCCTL_App_Notification+0x2f8>)
 800f524:	711a      	strb	r2, [r3, #4]
                        SERVER_REMOTE_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 800f526:	6a3b      	ldr	r3, [r7, #32]
 800f528:	7a1a      	ldrb	r2, [r3, #8]
 800f52a:	4b38      	ldr	r3, [pc, #224]	; (800f60c <SVCCTL_App_Notification+0x2f8>)
 800f52c:	715a      	strb	r2, [r3, #5]
                        aci_gap_terminate_gap_proc(GAP_GENERAL_DISCOVERY_PROC);
 800f52e:	2002      	movs	r0, #2
 800f530:	f7f8 fc12 	bl	8007d58 <aci_gap_terminate_gap_proc>
                        break;
 800f534:	e000      	b.n	800f538 <SVCCTL_App_Notification+0x224>
                  }
 800f536:	bf00      	nop
                  break;
 800f538:	e004      	b.n	800f544 <SVCCTL_App_Notification+0x230>
                  break;
 800f53a:	bf00      	nop
 800f53c:	e002      	b.n	800f544 <SVCCTL_App_Notification+0x230>
                  break;
 800f53e:	bf00      	nop
 800f540:	e000      	b.n	800f544 <SVCCTL_App_Notification+0x230>
                  break;
 800f542:	bf00      	nop
              k += adlength + 1;
 800f544:	7dfb      	ldrb	r3, [r7, #23]
 800f546:	3301      	adds	r3, #1
 800f548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f54a:	4413      	add	r3, r2
 800f54c:	647b      	str	r3, [r7, #68]	; 0x44
            while(k < event_data_size)
 800f54e:	7fbb      	ldrb	r3, [r7, #30]
 800f550:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f552:	429a      	cmp	r2, r3
 800f554:	dba5      	blt.n	800f4a2 <SVCCTL_App_Notification+0x18e>
          break;
 800f556:	e001      	b.n	800f55c <SVCCTL_App_Notification+0x248>
          break;
 800f558:	bf00      	nop
 800f55a:	e047      	b.n	800f5ec <SVCCTL_App_Notification+0x2d8>
          break;
 800f55c:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800f55e:	e045      	b.n	800f5ec <SVCCTL_App_Notification+0x2d8>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800f560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f562:	3302      	adds	r3, #2
 800f564:	63fb      	str	r3, [r7, #60]	; 0x3c
      switch (blue_evt->ecode)
 800f566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f568:	881b      	ldrh	r3, [r3, #0]
 800f56a:	b29b      	uxth	r3, r3
 800f56c:	f240 4207 	movw	r2, #1031	; 0x407
 800f570:	4293      	cmp	r3, r2
 800f572:	d02c      	beq.n	800f5ce <SVCCTL_App_Notification+0x2ba>
 800f574:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800f578:	da08      	bge.n	800f58c <SVCCTL_App_Notification+0x278>
 800f57a:	f240 4201 	movw	r2, #1025	; 0x401
 800f57e:	4293      	cmp	r3, r2
 800f580:	d030      	beq.n	800f5e4 <SVCCTL_App_Notification+0x2d0>
 800f582:	f240 4202 	movw	r2, #1026	; 0x402
 800f586:	4293      	cmp	r3, r2
 800f588:	d00c      	beq.n	800f5a4 <SVCCTL_App_Notification+0x290>
      break; /* EVT_VENDOR */
 800f58a:	e02e      	b.n	800f5ea <SVCCTL_App_Notification+0x2d6>
      switch (blue_evt->ecode)
 800f58c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f590:	d019      	beq.n	800f5c6 <SVCCTL_App_Notification+0x2b2>
 800f592:	f640 4216 	movw	r2, #3094	; 0xc16
 800f596:	4293      	cmp	r3, r2
 800f598:	d012      	beq.n	800f5c0 <SVCCTL_App_Notification+0x2ac>
 800f59a:	f240 4209 	movw	r2, #1033	; 0x409
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	d007      	beq.n	800f5b2 <SVCCTL_App_Notification+0x29e>
      break; /* EVT_VENDOR */
 800f5a2:	e022      	b.n	800f5ea <SVCCTL_App_Notification+0x2d6>
	   aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 111111);
 800f5a4:	4b14      	ldr	r3, [pc, #80]	; (800f5f8 <SVCCTL_App_Notification+0x2e4>)
 800f5a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f5a8:	4919      	ldr	r1, [pc, #100]	; (800f610 <SVCCTL_App_Notification+0x2fc>)
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7f8 fa4e 	bl	8007a4c <aci_gap_pass_key_resp>
	 break;
 800f5b0:	e01b      	b.n	800f5ea <SVCCTL_App_Notification+0x2d6>
	   aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 800f5b2:	4b11      	ldr	r3, [pc, #68]	; (800f5f8 <SVCCTL_App_Notification+0x2e4>)
 800f5b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f5b6:	2101      	movs	r1, #1
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7f8 fc17 	bl	8007dec <aci_gap_numeric_comparison_value_confirm_yesno>
	   break;
 800f5be:	e014      	b.n	800f5ea <SVCCTL_App_Notification+0x2d6>
	   DTS_App_TxPoolAvailableNotification();
 800f5c0:	f000 ff0c 	bl	80103dc <DTS_App_TxPoolAvailableNotification>
	   break;
 800f5c4:	e011      	b.n	800f5ea <SVCCTL_App_Notification+0x2d6>
          mutex = 1;
 800f5c6:	4b0e      	ldr	r3, [pc, #56]	; (800f600 <SVCCTL_App_Notification+0x2ec>)
 800f5c8:	2201      	movs	r2, #1
 800f5ca:	701a      	strb	r2, [r3, #0]
      break;
 800f5cc:	e00d      	b.n	800f5ea <SVCCTL_App_Notification+0x2d6>
          aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blue_evt->data;
 800f5ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5d0:	3302      	adds	r3, #2
 800f5d2:	63bb      	str	r3, [r7, #56]	; 0x38
		   if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC)
 800f5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	2b02      	cmp	r3, #2
 800f5da:	d105      	bne.n	800f5e8 <SVCCTL_App_Notification+0x2d4>
			 if( gap_evt_proc_complete->Status != BLE_STATUS_SUCCESS )
 800f5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5de:	785b      	ldrb	r3, [r3, #1]
 800f5e0:	2b00      	cmp	r3, #0
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800f5e2:	e001      	b.n	800f5e8 <SVCCTL_App_Notification+0x2d4>
	   break;
 800f5e4:	bf00      	nop
 800f5e6:	e000      	b.n	800f5ea <SVCCTL_App_Notification+0x2d6>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800f5e8:	bf00      	nop
      break; /* EVT_VENDOR */
 800f5ea:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800f5ec:	2301      	movs	r3, #1
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	374c      	adds	r7, #76	; 0x4c
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd90      	pop	{r4, r7, pc}
 800f5f6:	bf00      	nop
 800f5f8:	2000018c 	.word	0x2000018c
 800f5fc:	20006f5c 	.word	0x20006f5c
 800f600:	20006f6c 	.word	0x20006f6c
 800f604:	3ff40000 	.word	0x3ff40000
 800f608:	20006f60 	.word	0x20006f60
 800f60c:	20006f70 	.word	0x20006f70
 800f610:	0001b207 	.word	0x0001b207

0800f614 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b082      	sub	sp, #8
 800f618:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800f61a:	4b06      	ldr	r3, [pc, #24]	; (800f634 <Ble_Tl_Init+0x20>)
 800f61c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800f61e:	4b06      	ldr	r3, [pc, #24]	; (800f638 <Ble_Tl_Init+0x24>)
 800f620:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800f622:	463b      	mov	r3, r7
 800f624:	4619      	mov	r1, r3
 800f626:	4805      	ldr	r0, [pc, #20]	; (800f63c <Ble_Tl_Init+0x28>)
 800f628:	f7f9 fefc 	bl	8009424 <hci_init>

  return;
 800f62c:	bf00      	nop
}
 800f62e:	3708      	adds	r7, #8
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}
 800f634:	200300d4 	.word	0x200300d4
 800f638:	0800fb85 	.word	0x0800fb85
 800f63c:	0800fb4d 	.word	0x0800fb4d

0800f640 <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 800f640:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f642:	b091      	sub	sp, #68	; 0x44
 800f644:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800f646:	2300      	movs	r3, #0
 800f648:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800f64a:	f7f9 f9b3 	bl	80089b4 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800f64e:	f000 f925 	bl	800f89c <BleGetBdAddress>
 800f652:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800f654:	6a3a      	ldr	r2, [r7, #32]
 800f656:	2106      	movs	r1, #6
 800f658:	2000      	movs	r0, #0
 800f65a:	f7f9 f8eb 	bl	8008834 <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800f65e:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800f662:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800f664:	f7ff fd92 	bl	800f18c <LL_FLASH_GetUDN>
 800f668:	4603      	mov	r3, r0
 800f66a:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800f66c:	f107 0308 	add.w	r3, r7, #8
 800f670:	461a      	mov	r2, r3
 800f672:	2106      	movs	r1, #6
 800f674:	202e      	movs	r0, #46	; 0x2e
 800f676:	f7f9 f8dd 	bl	8008834 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800f67a:	4a4a      	ldr	r2, [pc, #296]	; (800f7a4 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800f67c:	2110      	movs	r1, #16
 800f67e:	2018      	movs	r0, #24
 800f680:	f7f9 f8d8 	bl	8008834 <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800f684:	4a48      	ldr	r2, [pc, #288]	; (800f7a8 <Ble_Hci_Gap_Gatt_Init+0x168>)
 800f686:	2110      	movs	r1, #16
 800f688:	2008      	movs	r0, #8
 800f68a:	f7f9 f8d3 	bl	8008834 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800f68e:	2118      	movs	r1, #24
 800f690:	2001      	movs	r0, #1
 800f692:	f7f9 f938 	bl	8008906 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800f696:	f7f8 fc00 	bl	8007e9a <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800f69a:	2300      	movs	r3, #0
 800f69c:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800f69e:	7ffb      	ldrb	r3, [r7, #31]
 800f6a0:	f043 0301 	orr.w	r3, r3, #1
 800f6a4:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800f6a6:	7ffb      	ldrb	r3, [r7, #31]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d01e      	beq.n	800f6ea <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    const char *name = "BLEcore";
 800f6ac:	4b3f      	ldr	r3, [pc, #252]	; (800f7ac <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800f6ae:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 800f6b0:	f107 0216 	add.w	r2, r7, #22
 800f6b4:	7ff8      	ldrb	r0, [r7, #31]
 800f6b6:	f107 0312 	add.w	r3, r7, #18
 800f6ba:	9301      	str	r3, [sp, #4]
 800f6bc:	f107 0314 	add.w	r3, r7, #20
 800f6c0:	9300      	str	r3, [sp, #0]
 800f6c2:	4613      	mov	r3, r2
 800f6c4:	2207      	movs	r2, #7
 800f6c6:	2100      	movs	r1, #0
 800f6c8:	f7f8 fa17 	bl	8007afa <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800f6cc:	8afc      	ldrh	r4, [r7, #22]
 800f6ce:	8abd      	ldrh	r5, [r7, #20]
 800f6d0:	69b8      	ldr	r0, [r7, #24]
 800f6d2:	f7f0 fd5f 	bl	8000194 <strlen>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	b2da      	uxtb	r2, r3
 800f6da:	69bb      	ldr	r3, [r7, #24]
 800f6dc:	9300      	str	r3, [sp, #0]
 800f6de:	4613      	mov	r3, r2
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	4629      	mov	r1, r5
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	f7f8 fd96 	bl	8008216 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800f6ea:	8af8      	ldrh	r0, [r7, #22]
 800f6ec:	8a79      	ldrh	r1, [r7, #18]
 800f6ee:	1d3b      	adds	r3, r7, #4
 800f6f0:	9300      	str	r3, [sp, #0]
 800f6f2:	2302      	movs	r3, #2
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	f7f8 fd8e 	bl	8008216 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 800f6fa:	2202      	movs	r2, #2
 800f6fc:	2102      	movs	r1, #2
 800f6fe:	2000      	movs	r0, #0
 800f700:	f7f9 f9ed 	bl	8008ade <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800f704:	4b2a      	ldr	r3, [pc, #168]	; (800f7b0 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f706:	2200      	movs	r2, #0
 800f708:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800f70a:	4b29      	ldr	r3, [pc, #164]	; (800f7b0 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f70c:	781b      	ldrb	r3, [r3, #0]
 800f70e:	4618      	mov	r0, r3
 800f710:	f7f8 f8aa 	bl	8007868 <aci_gap_set_io_capability>
//  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
//  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
//  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
//  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
//  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
  for (index = 0; index < 16; index++)
 800f714:	2300      	movs	r3, #0
 800f716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f71a:	e00b      	b.n	800f734 <Ble_Hci_Gap_Gatt_Init+0xf4>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800f71c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f720:	4a23      	ldr	r2, [pc, #140]	; (800f7b0 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f722:	4413      	add	r3, r2
 800f724:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f728:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 800f72a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f72e:	3301      	adds	r3, #1
 800f730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f738:	2b0f      	cmp	r3, #15
 800f73a:	d9ef      	bls.n	800f71c <Ble_Hci_Gap_Gatt_Init+0xdc>
//                                         BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
//                                         BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
//                                         BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
//                                         0
//  );
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800f73c:	4b1c      	ldr	r3, [pc, #112]	; (800f7b0 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f73e:	2201      	movs	r2, #1
 800f740:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800f742:	4b1b      	ldr	r3, [pc, #108]	; (800f7b0 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f744:	2208      	movs	r2, #8
 800f746:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800f748:	4b19      	ldr	r3, [pc, #100]	; (800f7b0 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f74a:	2210      	movs	r2, #16
 800f74c:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800f74e:	4b18      	ldr	r3, [pc, #96]	; (800f7b0 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f750:	2200      	movs	r2, #0
 800f752:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800f754:	4b16      	ldr	r3, [pc, #88]	; (800f7b0 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f756:	4a17      	ldr	r2, [pc, #92]	; (800f7b4 <Ble_Hci_Gap_Gatt_Init+0x174>)
 800f758:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800f75a:	4b15      	ldr	r3, [pc, #84]	; (800f7b0 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f75c:	2201      	movs	r2, #1
 800f75e:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800f760:	4b13      	ldr	r3, [pc, #76]	; (800f7b0 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f762:	789d      	ldrb	r5, [r3, #2]
 800f764:	4b12      	ldr	r3, [pc, #72]	; (800f7b0 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f766:	785e      	ldrb	r6, [r3, #1]
 800f768:	4b11      	ldr	r3, [pc, #68]	; (800f7b0 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f76a:	7d5b      	ldrb	r3, [r3, #21]
 800f76c:	4a10      	ldr	r2, [pc, #64]	; (800f7b0 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f76e:	7d92      	ldrb	r2, [r2, #22]
 800f770:	490f      	ldr	r1, [pc, #60]	; (800f7b0 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f772:	7d09      	ldrb	r1, [r1, #20]
 800f774:	480e      	ldr	r0, [pc, #56]	; (800f7b0 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f776:	6980      	ldr	r0, [r0, #24]
 800f778:	2400      	movs	r4, #0
 800f77a:	9404      	str	r4, [sp, #16]
 800f77c:	9003      	str	r0, [sp, #12]
 800f77e:	9102      	str	r1, [sp, #8]
 800f780:	9201      	str	r2, [sp, #4]
 800f782:	9300      	str	r3, [sp, #0]
 800f784:	2300      	movs	r3, #0
 800f786:	2201      	movs	r2, #1
 800f788:	4631      	mov	r1, r6
 800f78a:	4628      	mov	r0, r5
 800f78c:	f7f8 f8b6 	bl	80078fc <aci_gap_set_authentication_requirement>
										 );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800f790:	4b07      	ldr	r3, [pc, #28]	; (800f7b0 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f792:	789b      	ldrb	r3, [r3, #2]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d001      	beq.n	800f79c <Ble_Hci_Gap_Gatt_Init+0x15c>
   {
     aci_gap_configure_whitelist();
 800f798:	f7f8 fa96 	bl	8007cc8 <aci_gap_configure_whitelist>
   }
}
 800f79c:	bf00      	nop
 800f79e:	372c      	adds	r7, #44	; 0x2c
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7a4:	08012c14 	.word	0x08012c14
 800f7a8:	08012c24 	.word	0x08012c24
 800f7ac:	0801288c 	.word	0x0801288c
 800f7b0:	2000018c 	.word	0x2000018c
 800f7b4:	0001b207 	.word	0x0001b207

0800f7b8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b08c      	sub	sp, #48	; 0x30
 800f7bc:	af08      	add	r7, sp, #32
 800f7be:	4603      	mov	r3, r0
 800f7c0:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f7c2:	2342      	movs	r3, #66	; 0x42
 800f7c4:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;
 
  if (New_Status == APP_BLE_FAST_ADV)
 800f7c6:	79fb      	ldrb	r3, [r7, #7]
 800f7c8:	2b01      	cmp	r3, #1
 800f7ca:	d106      	bne.n	800f7da <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800f7cc:	4b2c      	ldr	r3, [pc, #176]	; (800f880 <Adv_Request+0xc8>)
 800f7ce:	881b      	ldrh	r3, [r3, #0]
 800f7d0:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800f7d2:	4b2c      	ldr	r3, [pc, #176]	; (800f884 <Adv_Request+0xcc>)
 800f7d4:	881b      	ldrh	r3, [r3, #0]
 800f7d6:	81bb      	strh	r3, [r7, #12]
 800f7d8:	e005      	b.n	800f7e6 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800f7da:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800f7de:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800f7e0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800f7e4:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800f7e6:	4b28      	ldr	r3, [pc, #160]	; (800f888 <Adv_Request+0xd0>)
 800f7e8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f7f2 faad 	bl	8001d4c <HW_TS_Stop>

     APP_DBG_MSG("First index in %d state \n",
                BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 800f7f2:	79fb      	ldrb	r3, [r7, #7]
 800f7f4:	2b02      	cmp	r3, #2
 800f7f6:	d10d      	bne.n	800f814 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800f7f8:	4b23      	ldr	r3, [pc, #140]	; (800f888 <Adv_Request+0xd0>)
 800f7fa:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800f7fe:	2b01      	cmp	r3, #1
 800f800:	d004      	beq.n	800f80c <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800f802:	4b21      	ldr	r3, [pc, #132]	; (800f888 <Adv_Request+0xd0>)
 800f804:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800f808:	2b02      	cmp	r3, #2
 800f80a:	d103      	bne.n	800f814 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800f80c:	f7f7 ff2a 	bl	8007664 <aci_gap_set_non_discoverable>
 800f810:	4603      	mov	r3, r0
 800f812:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800f814:	4a1c      	ldr	r2, [pc, #112]	; (800f888 <Adv_Request+0xd0>)
 800f816:	79fb      	ldrb	r3, [r7, #7]
 800f818:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800f81c:	4b1a      	ldr	r3, [pc, #104]	; (800f888 <Adv_Request+0xd0>)
 800f81e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f822:	89b8      	ldrh	r0, [r7, #12]
 800f824:	89f9      	ldrh	r1, [r7, #14]
 800f826:	2200      	movs	r2, #0
 800f828:	9206      	str	r2, [sp, #24]
 800f82a:	2200      	movs	r2, #0
 800f82c:	9205      	str	r2, [sp, #20]
 800f82e:	4a17      	ldr	r2, [pc, #92]	; (800f88c <Adv_Request+0xd4>)
 800f830:	9204      	str	r2, [sp, #16]
 800f832:	9303      	str	r3, [sp, #12]
 800f834:	4b16      	ldr	r3, [pc, #88]	; (800f890 <Adv_Request+0xd8>)
 800f836:	9302      	str	r3, [sp, #8]
 800f838:	230a      	movs	r3, #10
 800f83a:	9301      	str	r3, [sp, #4]
 800f83c:	2300      	movs	r3, #0
 800f83e:	9300      	str	r3, [sp, #0]
 800f840:	2300      	movs	r3, #0
 800f842:	4602      	mov	r2, r0
 800f844:	2000      	movs	r0, #0
 800f846:	f7f7 ff31 	bl	80076ac <aci_gap_set_discoverable>
 800f84a:	4603      	mov	r3, r0
 800f84c:	72fb      	strb	r3, [r7, #11]
//            NO_WHITE_LIST_USE, /* use white list */
//            sizeof(local_name), (uint8_t*) local_name, 0,
//            NULL,
//            6, 8);
    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800f84e:	4911      	ldr	r1, [pc, #68]	; (800f894 <Adv_Request+0xdc>)
 800f850:	2016      	movs	r0, #22
 800f852:	f7f8 f9dd 	bl	8007c10 <aci_gap_update_adv_data>
 800f856:	4603      	mov	r3, r0
 800f858:	72fb      	strb	r3, [r7, #11]
//    ret = aci_gap_update_adv_data(22, (uint8_t*) manuf_data);

     if (ret == BLE_STATUS_SUCCESS)
 800f85a:	7afb      	ldrb	r3, [r7, #11]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d10a      	bne.n	800f876 <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800f860:	79fb      	ldrb	r3, [r7, #7]
 800f862:	2b01      	cmp	r3, #1
 800f864:	d107      	bne.n	800f876 <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800f866:	4b08      	ldr	r3, [pc, #32]	; (800f888 <Adv_Request+0xd0>)
 800f868:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f86c:	490a      	ldr	r1, [pc, #40]	; (800f898 <Adv_Request+0xe0>)
 800f86e:	4618      	mov	r0, r3
 800f870:	f7f2 faf6 	bl	8001e60 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800f874:	bf00      	nop
 800f876:	bf00      	nop
}
 800f878:	3710      	adds	r7, #16
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
 800f87e:	bf00      	nop
 800f880:	20000220 	.word	0x20000220
 800f884:	20000222 	.word	0x20000222
 800f888:	2000018c 	.word	0x2000018c
 800f88c:	200001b5 	.word	0x200001b5
 800f890:	08012c34 	.word	0x08012c34
 800f894:	08012c40 	.word	0x08012c40
 800f898:	0001e046 	.word	0x0001e046

0800f89c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b086      	sub	sp, #24
 800f8a0:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800f8a2:	f7ff fc73 	bl	800f18c <LL_FLASH_GetUDN>
 800f8a6:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800f8a8:	693b      	ldr	r3, [r7, #16]
 800f8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8ae:	d023      	beq.n	800f8f8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800f8b0:	f7ff fc84 	bl	800f1bc <LL_FLASH_GetSTCompanyID>
 800f8b4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800f8b6:	f7ff fc75 	bl	800f1a4 <LL_FLASH_GetDeviceID>
 800f8ba:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800f8bc:	693b      	ldr	r3, [r7, #16]
 800f8be:	b2da      	uxtb	r2, r3
 800f8c0:	4b16      	ldr	r3, [pc, #88]	; (800f91c <BleGetBdAddress+0x80>)
 800f8c2:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	0a1b      	lsrs	r3, r3, #8
 800f8c8:	b2da      	uxtb	r2, r3
 800f8ca:	4b14      	ldr	r3, [pc, #80]	; (800f91c <BleGetBdAddress+0x80>)
 800f8cc:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	0c1b      	lsrs	r3, r3, #16
 800f8d2:	b2da      	uxtb	r2, r3
 800f8d4:	4b11      	ldr	r3, [pc, #68]	; (800f91c <BleGetBdAddress+0x80>)
 800f8d6:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	b2da      	uxtb	r2, r3
 800f8dc:	4b0f      	ldr	r3, [pc, #60]	; (800f91c <BleGetBdAddress+0x80>)
 800f8de:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800f8e0:	68bb      	ldr	r3, [r7, #8]
 800f8e2:	b2da      	uxtb	r2, r3
 800f8e4:	4b0d      	ldr	r3, [pc, #52]	; (800f91c <BleGetBdAddress+0x80>)
 800f8e6:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	0a1b      	lsrs	r3, r3, #8
 800f8ec:	b2da      	uxtb	r2, r3
 800f8ee:	4b0b      	ldr	r3, [pc, #44]	; (800f91c <BleGetBdAddress+0x80>)
 800f8f0:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800f8f2:	4b0a      	ldr	r3, [pc, #40]	; (800f91c <BleGetBdAddress+0x80>)
 800f8f4:	617b      	str	r3, [r7, #20]
 800f8f6:	e00b      	b.n	800f910 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800f8f8:	2000      	movs	r0, #0
 800f8fa:	f7fa ff65 	bl	800a7c8 <OTP_Read>
 800f8fe:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d002      	beq.n	800f90c <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	617b      	str	r3, [r7, #20]
 800f90a:	e001      	b.n	800f910 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800f90c:	4b04      	ldr	r3, [pc, #16]	; (800f920 <BleGetBdAddress+0x84>)
 800f90e:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800f910:	697b      	ldr	r3, [r7, #20]
}
 800f912:	4618      	mov	r0, r3
 800f914:	3718      	adds	r7, #24
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}
 800f91a:	bf00      	nop
 800f91c:	200068d0 	.word	0x200068d0
 800f920:	08012c0c 	.word	0x08012c0c

0800f924 <APP_BLE_ComputeCRC8>:

/* USER CODE BEGIN FD_LOCAL_FUNCTION */
uint8_t APP_BLE_ComputeCRC8( uint8_t *DataPtr , uint8_t Datalen )
{
 800f924:	b480      	push	{r7}
 800f926:	b085      	sub	sp, #20
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	460b      	mov	r3, r1
 800f92e:	70fb      	strb	r3, [r7, #3]
  uint8_t i, j;
  const uint8_t PolynomeCRC = 0x97;
 800f930:	2397      	movs	r3, #151	; 0x97
 800f932:	733b      	strb	r3, [r7, #12]
  uint8_t CRC8 = 0x00;
 800f934:	2300      	movs	r3, #0
 800f936:	737b      	strb	r3, [r7, #13]

  for (i = 0; i < Datalen; i++)
 800f938:	2300      	movs	r3, #0
 800f93a:	73fb      	strb	r3, [r7, #15]
 800f93c:	e022      	b.n	800f984 <APP_BLE_ComputeCRC8+0x60>
  {
    CRC8 ^= DataPtr[i];
 800f93e:	7bfb      	ldrb	r3, [r7, #15]
 800f940:	687a      	ldr	r2, [r7, #4]
 800f942:	4413      	add	r3, r2
 800f944:	781a      	ldrb	r2, [r3, #0]
 800f946:	7b7b      	ldrb	r3, [r7, #13]
 800f948:	4053      	eors	r3, r2
 800f94a:	737b      	strb	r3, [r7, #13]
    for (j = 0; j < 8; j++)
 800f94c:	2300      	movs	r3, #0
 800f94e:	73bb      	strb	r3, [r7, #14]
 800f950:	e012      	b.n	800f978 <APP_BLE_ComputeCRC8+0x54>
    {
      if ((CRC8 & 0x80) != 0)
 800f952:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800f956:	2b00      	cmp	r3, #0
 800f958:	da08      	bge.n	800f96c <APP_BLE_ComputeCRC8+0x48>
      {
        CRC8 = (uint8_t) ((CRC8 << 1) ^ PolynomeCRC);
 800f95a:	7b7b      	ldrb	r3, [r7, #13]
 800f95c:	005b      	lsls	r3, r3, #1
 800f95e:	b25a      	sxtb	r2, r3
 800f960:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800f964:	4053      	eors	r3, r2
 800f966:	b25b      	sxtb	r3, r3
 800f968:	737b      	strb	r3, [r7, #13]
 800f96a:	e002      	b.n	800f972 <APP_BLE_ComputeCRC8+0x4e>
      }
      else
      {
        CRC8 <<= 1;
 800f96c:	7b7b      	ldrb	r3, [r7, #13]
 800f96e:	005b      	lsls	r3, r3, #1
 800f970:	737b      	strb	r3, [r7, #13]
    for (j = 0; j < 8; j++)
 800f972:	7bbb      	ldrb	r3, [r7, #14]
 800f974:	3301      	adds	r3, #1
 800f976:	73bb      	strb	r3, [r7, #14]
 800f978:	7bbb      	ldrb	r3, [r7, #14]
 800f97a:	2b07      	cmp	r3, #7
 800f97c:	d9e9      	bls.n	800f952 <APP_BLE_ComputeCRC8+0x2e>
  for (i = 0; i < Datalen; i++)
 800f97e:	7bfb      	ldrb	r3, [r7, #15]
 800f980:	3301      	adds	r3, #1
 800f982:	73fb      	strb	r3, [r7, #15]
 800f984:	7bfa      	ldrb	r2, [r7, #15]
 800f986:	78fb      	ldrb	r3, [r7, #3]
 800f988:	429a      	cmp	r2, r3
 800f98a:	d3d8      	bcc.n	800f93e <APP_BLE_ComputeCRC8+0x1a>
      }
    }
  }
  return (CRC8);
 800f98c:	7b7b      	ldrb	r3, [r7, #13]
}
 800f98e:	4618      	mov	r0, r3
 800f990:	3714      	adds	r7, #20
 800f992:	46bd      	mov	sp, r7
 800f994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f998:	4770      	bx	lr

0800f99a <AdvUpdateProcess>:

  return;
}

static void AdvUpdateProcess(void *argument)
{
 800f99a:	b580      	push	{r7, lr}
 800f99c:	b082      	sub	sp, #8
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800f9a2:	f04f 32ff 	mov.w	r2, #4294967295
 800f9a6:	2100      	movs	r1, #0
 800f9a8:	2001      	movs	r0, #1
 800f9aa:	f7fb fd65 	bl	800b478 <osThreadFlagsWait>
    Adv_Update( );
 800f9ae:	f000 f801 	bl	800f9b4 <Adv_Update>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800f9b2:	e7f6      	b.n	800f9a2 <AdvUpdateProcess+0x8>

0800f9b4 <Adv_Update>:
  }
  return;
}

static void Adv_Update( void )
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 800f9b8:	2002      	movs	r0, #2
 800f9ba:	f7ff fefd 	bl	800f7b8 <Adv_Request>

  return;
 800f9be:	bf00      	nop
}
 800f9c0:	bd80      	pop	{r7, pc}

0800f9c2 <HciUserEvtProcess>:

static void HciUserEvtProcess(void *argument)
{
 800f9c2:	b580      	push	{r7, lr}
 800f9c4:	b082      	sub	sp, #8
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800f9ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f9ce:	2100      	movs	r1, #0
 800f9d0:	2001      	movs	r0, #1
 800f9d2:	f7fb fd51 	bl	800b478 <osThreadFlagsWait>
    hci_user_evt_proc( );
 800f9d6:	f7f9 fd41 	bl	800945c <hci_user_evt_proc>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800f9da:	e7f6      	b.n	800f9ca <HciUserEvtProcess+0x8>

0800f9dc <DataThroughput_proc>:
//    APP_DBG_MSG("** add ADV data **  Failed \r\n\r");
//  }
//  return;
//}

static void DataThroughput_proc(){
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	af00      	add	r7, sp, #0

//  UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_WRITE_ID, CFG_SCH_PRIO_0);

  osThreadFlagsSet( DataWriteProcessId, 1 );
 800f9e0:	4b03      	ldr	r3, [pc, #12]	; (800f9f0 <DataThroughput_proc+0x14>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	2101      	movs	r1, #1
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7fb fce4 	bl	800b3b4 <osThreadFlagsSet>
}
 800f9ec:	bf00      	nop
 800f9ee:	bd80      	pop	{r7, pc}
 800f9f0:	20006f68 	.word	0x20006f68

0800f9f4 <LinkConfiguration>:
#endif

void LinkConfiguration(void * argument)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b084      	sub	sp, #16
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
		  for(;;)
		  {
			    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800f9fc:	f04f 32ff 	mov.w	r2, #4294967295
 800fa00:	2100      	movs	r1, #0
 800fa02:	2001      	movs	r0, #1
 800fa04:	f7fb fd38 	bl	800b478 <osThreadFlagsWait>
    APP_DBG_MSG("RX PHY = %d\n", rx_phy);
  }
#endif

//  APP_DBG_MSG("set data length \n");
  status = hci_le_set_data_length(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,251,2120);
 800fa08:	4b07      	ldr	r3, [pc, #28]	; (800fa28 <LinkConfiguration+0x34>)
 800fa0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fa0c:	f640 0248 	movw	r2, #2120	; 0x848
 800fa10:	21fb      	movs	r1, #251	; 0xfb
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7f8 fff2 	bl	80089fc <hci_le_set_data_length>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	73fb      	strb	r3, [r7, #15]

#if ((CFG_ENCRYPTION_ENABLE != 0) && (CFG_BLE_CENTRAL != 0))
  GapProcReq(GAP_PROC_PAIRING);
#endif

  DTC_App_LinkReadyNotification(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800fa1c:	4b02      	ldr	r3, [pc, #8]	; (800fa28 <LinkConfiguration+0x34>)
 800fa1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fa20:	4618      	mov	r0, r3
 800fa22:	f000 fc2f 	bl	8010284 <DTC_App_LinkReadyNotification>
		  {
 800fa26:	e7e9      	b.n	800f9fc <LinkConfiguration+0x8>
 800fa28:	2000018c 	.word	0x2000018c

0800fa2c <Switch_OFF_GPIO>:
/* USER CODE END Adv_Cancel_Req_2 */
  return;
}
#endif

static void Switch_OFF_GPIO(){
 800fa2c:	b480      	push	{r7}
 800fa2e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
//  BSP_LED_Off(LED_GREEN);
/* USER CODE END Switch_OFF_GPIO */
}
 800fa30:	bf00      	nop
 800fa32:	46bd      	mov	sp, r7
 800fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa38:	4770      	bx	lr
	...

0800fa3c <BLE_SVC_L2CAP_Conn_Update>:

#if(L2CAP_REQUEST_NEW_CONN_PARAM != 0)  
void BLE_SVC_L2CAP_Conn_Update(uint16_t Connection_Handle)
{
 800fa3c:	b590      	push	{r4, r7, lr}
 800fa3e:	b089      	sub	sp, #36	; 0x24
 800fa40:	af02      	add	r7, sp, #8
 800fa42:	4603      	mov	r3, r0
 800fa44:	80fb      	strh	r3, [r7, #6]
/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

/* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */
  if(mutex == 1) { 
 800fa46:	4b24      	ldr	r3, [pc, #144]	; (800fad8 <BLE_SVC_L2CAP_Conn_Update+0x9c>)
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	2b01      	cmp	r3, #1
 800fa4c:	d13f      	bne.n	800face <BLE_SVC_L2CAP_Conn_Update+0x92>
    mutex = 0;
 800fa4e:	4b22      	ldr	r3, [pc, #136]	; (800fad8 <BLE_SVC_L2CAP_Conn_Update+0x9c>)
 800fa50:	2200      	movs	r2, #0
 800fa52:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 800fa54:	4b21      	ldr	r3, [pc, #132]	; (800fadc <BLE_SVC_L2CAP_Conn_Update+0xa0>)
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	3301      	adds	r3, #1
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	f003 0301 	and.w	r3, r3, #1
 800fa60:	bfb8      	it	lt
 800fa62:	425b      	neglt	r3, r3
 800fa64:	b2da      	uxtb	r2, r3
 800fa66:	4b1d      	ldr	r3, [pc, #116]	; (800fadc <BLE_SVC_L2CAP_Conn_Update+0xa0>)
 800fa68:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(tab_conn_interval[index_con_int]);
 800fa6a:	4b1c      	ldr	r3, [pc, #112]	; (800fadc <BLE_SVC_L2CAP_Conn_Update+0xa0>)
 800fa6c:	781b      	ldrb	r3, [r3, #0]
 800fa6e:	4a1c      	ldr	r2, [pc, #112]	; (800fae0 <BLE_SVC_L2CAP_Conn_Update+0xa4>)
 800fa70:	009b      	lsls	r3, r3, #2
 800fa72:	4413      	add	r3, r2
 800fa74:	ed93 7a00 	vldr	s14, [r3]
 800fa78:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 800fa7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fa80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa84:	ee17 3a90 	vmov	r3, s15
 800fa88:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(tab_conn_interval[index_con_int]);
 800fa8a:	4b14      	ldr	r3, [pc, #80]	; (800fadc <BLE_SVC_L2CAP_Conn_Update+0xa0>)
 800fa8c:	781b      	ldrb	r3, [r3, #0]
 800fa8e:	4a14      	ldr	r2, [pc, #80]	; (800fae0 <BLE_SVC_L2CAP_Conn_Update+0xa4>)
 800fa90:	009b      	lsls	r3, r3, #2
 800fa92:	4413      	add	r3, r2
 800fa94:	ed93 7a00 	vldr	s14, [r3]
 800fa98:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 800fa9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800faa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800faa4:	ee17 3a90 	vmov	r3, s15
 800faa8:	82bb      	strh	r3, [r7, #20]
    uint16_t slave_latency = L2CAP_SLAVE_LATENCY;
 800faaa:	2300      	movs	r3, #0
 800faac:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 800faae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800fab2:	823b      	strh	r3, [r7, #16]
    tBleStatus result;

    result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800fab4:	4b0b      	ldr	r3, [pc, #44]	; (800fae4 <BLE_SVC_L2CAP_Conn_Update+0xa8>)
 800fab6:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 800fab8:	8a7c      	ldrh	r4, [r7, #18]
 800faba:	8aba      	ldrh	r2, [r7, #20]
 800fabc:	8af9      	ldrh	r1, [r7, #22]
 800fabe:	8a3b      	ldrh	r3, [r7, #16]
 800fac0:	9300      	str	r3, [sp, #0]
 800fac2:	4623      	mov	r3, r4
 800fac4:	f7f9 f872 	bl	8008bac <aci_l2cap_connection_parameter_update_req>
 800fac8:	4603      	mov	r3, r0
 800faca:	73fb      	strb	r3, [r7, #15]
    }
  }
/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

/* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */
  return;
 800facc:	bf00      	nop
 800face:	bf00      	nop
}
 800fad0:	371c      	adds	r7, #28
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd90      	pop	{r4, r7, pc}
 800fad6:	bf00      	nop
 800fad8:	20006f6c 	.word	0x20006f6c
 800fadc:	20006f6d 	.word	0x20006f6d
 800fae0:	20000014 	.word	0x20000014
 800fae4:	2000018c 	.word	0x2000018c

0800fae8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( HciUserEvtProcessId, 1 );
 800faf0:	4b04      	ldr	r3, [pc, #16]	; (800fb04 <hci_notify_asynch_evt+0x1c>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	2101      	movs	r1, #1
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7fb fc5c 	bl	800b3b4 <osThreadFlagsSet>
  return;
 800fafc:	bf00      	nop
}
 800fafe:	3708      	adds	r7, #8
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}
 800fb04:	20006f58 	.word	0x20006f58

0800fb08 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemHciId );
 800fb10:	4b04      	ldr	r3, [pc, #16]	; (800fb24 <hci_cmd_resp_release+0x1c>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7fb ffbd 	bl	800ba94 <osSemaphoreRelease>
  return;
 800fb1a:	bf00      	nop
}
 800fb1c:	3708      	adds	r7, #8
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
 800fb22:	bf00      	nop
 800fb24:	20006f54 	.word	0x20006f54

0800fb28 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b082      	sub	sp, #8
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemHciId, osWaitForever );
 800fb30:	4b05      	ldr	r3, [pc, #20]	; (800fb48 <hci_cmd_resp_wait+0x20>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	f04f 31ff 	mov.w	r1, #4294967295
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7fb ff45 	bl	800b9c8 <osSemaphoreAcquire>
  return;
 800fb3e:	bf00      	nop
}
 800fb40:	3708      	adds	r7, #8
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	20006f54 	.word	0x20006f54

0800fb4c <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b084      	sub	sp, #16
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	685b      	ldr	r3, [r3, #4]
 800fb5c:	3308      	adds	r3, #8
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7f9 face 	bl	8009100 <SVCCTL_UserEvtRx>
 800fb64:	4603      	mov	r3, r0
 800fb66:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800fb68:	7afb      	ldrb	r3, [r7, #11]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d003      	beq.n	800fb76 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	2201      	movs	r2, #1
 800fb72:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800fb74:	e002      	b.n	800fb7c <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	701a      	strb	r2, [r3, #0]
}
 800fb7c:	bf00      	nop
 800fb7e:	3710      	adds	r7, #16
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}

0800fb84 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b082      	sub	sp, #8
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	71fb      	strb	r3, [r7, #7]
  switch (status)
 800fb8e:	79fb      	ldrb	r3, [r7, #7]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d002      	beq.n	800fb9a <BLE_StatusNot+0x16>
 800fb94:	2b01      	cmp	r3, #1
 800fb96:	d008      	beq.n	800fbaa <BLE_StatusNot+0x26>
    case HCI_TL_CmdAvailable:
      osMutexRelease( MtxHciId );
      break;

    default:
      break;
 800fb98:	e00d      	b.n	800fbb6 <BLE_StatusNot+0x32>
      osMutexAcquire( MtxHciId, osWaitForever );
 800fb9a:	4b09      	ldr	r3, [pc, #36]	; (800fbc0 <BLE_StatusNot+0x3c>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	f04f 31ff 	mov.w	r1, #4294967295
 800fba2:	4618      	mov	r0, r3
 800fba4:	f7fb fdc4 	bl	800b730 <osMutexAcquire>
      break;
 800fba8:	e005      	b.n	800fbb6 <BLE_StatusNot+0x32>
      osMutexRelease( MtxHciId );
 800fbaa:	4b05      	ldr	r3, [pc, #20]	; (800fbc0 <BLE_StatusNot+0x3c>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7fb fe1c 	bl	800b7ec <osMutexRelease>
      break;
 800fbb4:	bf00      	nop
  }
  return;
 800fbb6:	bf00      	nop
}
 800fbb8:	3708      	adds	r7, #8
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}
 800fbbe:	bf00      	nop
 800fbc0:	20006f78 	.word	0x20006f78

0800fbc4 <SVCCTL_InitCustomSvc>:
  return;
}

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void SVCCTL_InitCustomSvc( void )
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	af00      	add	r7, sp, #0
  DTS_STM_Init();
 800fbc8:	f000 fde0 	bl	801078c <DTS_STM_Init>
}
 800fbcc:	bf00      	nop
 800fbce:	bd80      	pop	{r7, pc}

0800fbd0 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b082      	sub	sp, #8
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	3b0c      	subs	r3, #12
 800fbde:	2b12      	cmp	r3, #18
 800fbe0:	d850      	bhi.n	800fc84 <APP_THREAD_Error+0xb4>
 800fbe2:	a201      	add	r2, pc, #4	; (adr r2, 800fbe8 <APP_THREAD_Error+0x18>)
 800fbe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe8:	0800fc35 	.word	0x0800fc35
 800fbec:	0800fc3f 	.word	0x0800fc3f
 800fbf0:	0800fc49 	.word	0x0800fc49
 800fbf4:	0800fc53 	.word	0x0800fc53
 800fbf8:	0800fc5d 	.word	0x0800fc5d
 800fbfc:	0800fc67 	.word	0x0800fc67
 800fc00:	0800fc85 	.word	0x0800fc85
 800fc04:	0800fc85 	.word	0x0800fc85
 800fc08:	0800fc85 	.word	0x0800fc85
 800fc0c:	0800fc85 	.word	0x0800fc85
 800fc10:	0800fc85 	.word	0x0800fc85
 800fc14:	0800fc85 	.word	0x0800fc85
 800fc18:	0800fc85 	.word	0x0800fc85
 800fc1c:	0800fc85 	.word	0x0800fc85
 800fc20:	0800fc85 	.word	0x0800fc85
 800fc24:	0800fc85 	.word	0x0800fc85
 800fc28:	0800fc71 	.word	0x0800fc71
 800fc2c:	0800fc85 	.word	0x0800fc85
 800fc30:	0800fc7b 	.word	0x0800fc7b
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 800fc34:	6839      	ldr	r1, [r7, #0]
 800fc36:	4818      	ldr	r0, [pc, #96]	; (800fc98 <APP_THREAD_Error+0xc8>)
 800fc38:	f000 f8ca 	bl	800fdd0 <APP_THREAD_TraceError>
    break;
 800fc3c:	e027      	b.n	800fc8e <APP_THREAD_Error+0xbe>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 800fc3e:	6839      	ldr	r1, [r7, #0]
 800fc40:	4816      	ldr	r0, [pc, #88]	; (800fc9c <APP_THREAD_Error+0xcc>)
 800fc42:	f000 f8c5 	bl	800fdd0 <APP_THREAD_TraceError>
    break;
 800fc46:	e022      	b.n	800fc8e <APP_THREAD_Error+0xbe>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 800fc48:	6839      	ldr	r1, [r7, #0]
 800fc4a:	4815      	ldr	r0, [pc, #84]	; (800fca0 <APP_THREAD_Error+0xd0>)
 800fc4c:	f000 f8c0 	bl	800fdd0 <APP_THREAD_TraceError>
    break;
 800fc50:	e01d      	b.n	800fc8e <APP_THREAD_Error+0xbe>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 800fc52:	6839      	ldr	r1, [r7, #0]
 800fc54:	4813      	ldr	r0, [pc, #76]	; (800fca4 <APP_THREAD_Error+0xd4>)
 800fc56:	f000 f8bb 	bl	800fdd0 <APP_THREAD_TraceError>
    break;
 800fc5a:	e018      	b.n	800fc8e <APP_THREAD_Error+0xbe>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 800fc5c:	6839      	ldr	r1, [r7, #0]
 800fc5e:	4812      	ldr	r0, [pc, #72]	; (800fca8 <APP_THREAD_Error+0xd8>)
 800fc60:	f000 f8b6 	bl	800fdd0 <APP_THREAD_TraceError>
    break;
 800fc64:	e013      	b.n	800fc8e <APP_THREAD_Error+0xbe>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 800fc66:	6839      	ldr	r1, [r7, #0]
 800fc68:	4810      	ldr	r0, [pc, #64]	; (800fcac <APP_THREAD_Error+0xdc>)
 800fc6a:	f000 f8b1 	bl	800fdd0 <APP_THREAD_TraceError>
    break;
 800fc6e:	e00e      	b.n	800fc8e <APP_THREAD_Error+0xbe>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 800fc70:	6839      	ldr	r1, [r7, #0]
 800fc72:	480f      	ldr	r0, [pc, #60]	; (800fcb0 <APP_THREAD_Error+0xe0>)
 800fc74:	f000 f8ac 	bl	800fdd0 <APP_THREAD_TraceError>
    break;
 800fc78:	e009      	b.n	800fc8e <APP_THREAD_Error+0xbe>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 800fc7a:	6839      	ldr	r1, [r7, #0]
 800fc7c:	480d      	ldr	r0, [pc, #52]	; (800fcb4 <APP_THREAD_Error+0xe4>)
 800fc7e:	f000 f8a7 	bl	800fdd0 <APP_THREAD_TraceError>
    break;
 800fc82:	e004      	b.n	800fc8e <APP_THREAD_Error+0xbe>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 800fc84:	2100      	movs	r1, #0
 800fc86:	480c      	ldr	r0, [pc, #48]	; (800fcb8 <APP_THREAD_Error+0xe8>)
 800fc88:	f000 f8a2 	bl	800fdd0 <APP_THREAD_TraceError>
    break;
 800fc8c:	bf00      	nop
  }
}
 800fc8e:	bf00      	nop
 800fc90:	3708      	adds	r7, #8
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}
 800fc96:	bf00      	nop
 800fc98:	080128d4 	.word	0x080128d4
 800fc9c:	080128f8 	.word	0x080128f8
 800fca0:	0801291c 	.word	0x0801291c
 800fca4:	0801293c 	.word	0x0801293c
 800fca8:	0801295c 	.word	0x0801295c
 800fcac:	0801297c 	.word	0x0801297c
 800fcb0:	08012998 	.word	0x08012998
 800fcb4:	080129c4 	.word	0x080129c4
 800fcb8:	080129e8 	.word	0x080129e8

0800fcbc <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b082      	sub	sp, #8
 800fcc0:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 800fcc2:	2000      	movs	r0, #0
 800fcc4:	f7fa f9b6 	bl	800a034 <otInstanceErasePersistentInfo>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800fccc:	79fb      	ldrb	r3, [r7, #7]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d004      	beq.n	800fcdc <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 800fcd2:	79fb      	ldrb	r3, [r7, #7]
 800fcd4:	4619      	mov	r1, r3
 800fcd6:	201c      	movs	r0, #28
 800fcd8:	f7ff ff7a 	bl	800fbd0 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 800fcdc:	2000      	movs	r0, #0
 800fcde:	f7fa f94c 	bl	8009f7a <otInstanceFinalize>
  otInstanceInitSingle();
 800fce2:	f7fa f923 	bl	8009f2c <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 800fce6:	2200      	movs	r2, #0
 800fce8:	4925      	ldr	r1, [pc, #148]	; (800fd80 <APP_THREAD_DeviceConfig+0xc4>)
 800fcea:	2000      	movs	r0, #0
 800fcec:	f7fa f96c 	bl	8009fc8 <otSetStateChangedCallback>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800fcf4:	79fb      	ldrb	r3, [r7, #7]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d004      	beq.n	800fd04 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 800fcfa:	79fb      	ldrb	r3, [r7, #7]
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	200d      	movs	r0, #13
 800fd00:	f7ff ff66 	bl	800fbd0 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 800fd04:	2117      	movs	r1, #23
 800fd06:	2000      	movs	r0, #0
 800fd08:	f7fa f9ed 	bl	800a0e6 <otLinkSetChannel>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800fd10:	79fb      	ldrb	r3, [r7, #7]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d004      	beq.n	800fd20 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 800fd16:	79fb      	ldrb	r3, [r7, #7]
 800fd18:	4619      	mov	r1, r3
 800fd1a:	200e      	movs	r0, #14
 800fd1c:	f7ff ff58 	bl	800fbd0 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 800fd20:	f241 2134 	movw	r1, #4660	; 0x1234
 800fd24:	2000      	movs	r0, #0
 800fd26:	f7fa fa0e 	bl	800a146 <otLinkSetPanId>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800fd2e:	79fb      	ldrb	r3, [r7, #7]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d004      	beq.n	800fd3e <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 800fd34:	79fb      	ldrb	r3, [r7, #7]
 800fd36:	4619      	mov	r1, r3
 800fd38:	200f      	movs	r0, #15
 800fd3a:	f7ff ff49 	bl	800fbd0 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 800fd3e:	2101      	movs	r1, #1
 800fd40:	2000      	movs	r0, #0
 800fd42:	f7fa f9a0 	bl	800a086 <otIp6SetEnabled>
 800fd46:	4603      	mov	r3, r0
 800fd48:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800fd4a:	79fb      	ldrb	r3, [r7, #7]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d004      	beq.n	800fd5a <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 800fd50:	79fb      	ldrb	r3, [r7, #7]
 800fd52:	4619      	mov	r1, r3
 800fd54:	2010      	movs	r0, #16
 800fd56:	f7ff ff3b 	bl	800fbd0 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 800fd5a:	2101      	movs	r1, #1
 800fd5c:	2000      	movs	r0, #0
 800fd5e:	f7fa fc29 	bl	800a5b4 <otThreadSetEnabled>
 800fd62:	4603      	mov	r3, r0
 800fd64:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800fd66:	79fb      	ldrb	r3, [r7, #7]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d004      	beq.n	800fd76 <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 800fd6c:	79fb      	ldrb	r3, [r7, #7]
 800fd6e:	4619      	mov	r1, r3
 800fd70:	2011      	movs	r0, #17
 800fd72:	f7ff ff2d 	bl	800fbd0 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */

  /* USER CODE END DEVICECONFIG */
}
 800fd76:	bf00      	nop
 800fd78:	3708      	adds	r7, #8
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
 800fd7e:	bf00      	nop
 800fd80:	0800fd85 	.word	0x0800fd85

0800fd84 <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b082      	sub	sp, #8
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f003 0304 	and.w	r3, r3, #4
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d013      	beq.n	800fdc0 <APP_THREAD_StateNotif+0x3c>
  {
    switch (otThreadGetDeviceRole(NULL))
 800fd98:	2000      	movs	r0, #0
 800fd9a:	f7fa fc3b 	bl	800a614 <otThreadGetDeviceRole>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	2b04      	cmp	r3, #4
 800fda2:	d80f      	bhi.n	800fdc4 <APP_THREAD_StateNotif+0x40>
 800fda4:	a201      	add	r2, pc, #4	; (adr r2, 800fdac <APP_THREAD_StateNotif+0x28>)
 800fda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdaa:	bf00      	nop
 800fdac:	0800fdc5 	.word	0x0800fdc5
 800fdb0:	0800fdc5 	.word	0x0800fdc5
 800fdb4:	0800fdc5 	.word	0x0800fdc5
 800fdb8:	0800fdc5 	.word	0x0800fdc5
 800fdbc:	0800fdc5 	.word	0x0800fdc5
      /* USER CODE BEGIN DEFAULT */

      /* USER CODE END DEFAULT */
      break;
    }
  }
 800fdc0:	bf00      	nop
 800fdc2:	e000      	b.n	800fdc6 <APP_THREAD_StateNotif+0x42>
      break;
 800fdc4:	bf00      	nop
}
 800fdc6:	bf00      	nop
 800fdc8:	3708      	adds	r7, #8
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}
 800fdce:	bf00      	nop

0800fdd0 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
 800fdd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 800fdda:	bf00      	nop
 800fddc:	370c      	adds	r7, #12
 800fdde:	46bd      	mov	sp, r7
 800fde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde4:	4770      	bx	lr
	...

0800fde8 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b088      	sub	sp, #32
 800fdec:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 800fdee:	1d3b      	adds	r3, r7, #4
 800fdf0:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800fdf2:	6978      	ldr	r0, [r7, #20]
 800fdf4:	f7f9 fa68 	bl	80092c8 <SHCI_GetWirelessFwInfo>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d004      	beq.n	800fe08 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800fdfe:	2101      	movs	r1, #1
 800fe00:	201e      	movs	r0, #30
 800fe02:	f7ff fee5 	bl	800fbd0 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 800fe06:	e03d      	b.n	800fe84 <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 800fe08:	4a20      	ldr	r2, [pc, #128]	; (800fe8c <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 800fe0a:	2101      	movs	r1, #1
 800fe0c:	2000      	movs	r0, #0
 800fe0e:	f7f2 fccd 	bl	80027ac <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 800fe12:	4a1f      	ldr	r2, [pc, #124]	; (800fe90 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 800fe14:	2101      	movs	r1, #1
 800fe16:	2000      	movs	r0, #0
 800fe18:	f7f2 fcc8 	bl	80027ac <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	781b      	ldrb	r3, [r3, #0]
 800fe20:	4619      	mov	r1, r3
 800fe22:	697b      	ldr	r3, [r7, #20]
 800fe24:	785b      	ldrb	r3, [r3, #1]
 800fe26:	461a      	mov	r2, r3
 800fe28:	697b      	ldr	r3, [r7, #20]
 800fe2a:	789b      	ldrb	r3, [r3, #2]
 800fe2c:	9301      	str	r3, [sp, #4]
 800fe2e:	9200      	str	r2, [sp, #0]
 800fe30:	460b      	mov	r3, r1
 800fe32:	4a18      	ldr	r2, [pc, #96]	; (800fe94 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 800fe34:	2101      	movs	r1, #1
 800fe36:	2000      	movs	r0, #0
 800fe38:	f7f2 fcb8 	bl	80027ac <logApplication>
    switch(p_wireless_info->StackType)
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	7a5b      	ldrb	r3, [r3, #9]
 800fe40:	2b11      	cmp	r3, #17
 800fe42:	d009      	beq.n	800fe58 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 800fe44:	2b50      	cmp	r3, #80	; 0x50
 800fe46:	d00d      	beq.n	800fe64 <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 800fe48:	2b10      	cmp	r3, #16
 800fe4a:	d111      	bne.n	800fe70 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 800fe4c:	4a12      	ldr	r2, [pc, #72]	; (800fe98 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 800fe4e:	2101      	movs	r1, #1
 800fe50:	2000      	movs	r0, #0
 800fe52:	f7f2 fcab 	bl	80027ac <logApplication>
      break;
 800fe56:	e010      	b.n	800fe7a <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 800fe58:	4a10      	ldr	r2, [pc, #64]	; (800fe9c <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 800fe5a:	2101      	movs	r1, #1
 800fe5c:	2000      	movs	r0, #0
 800fe5e:	f7f2 fca5 	bl	80027ac <logApplication>
      break;
 800fe62:	e00a      	b.n	800fe7a <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 800fe64:	4a0e      	ldr	r2, [pc, #56]	; (800fea0 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 800fe66:	2101      	movs	r1, #1
 800fe68:	2000      	movs	r0, #0
 800fe6a:	f7f2 fc9f 	bl	80027ac <logApplication>
      break;
 800fe6e:	e004      	b.n	800fe7a <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800fe70:	2101      	movs	r1, #1
 800fe72:	201e      	movs	r0, #30
 800fe74:	f7ff feac 	bl	800fbd0 <APP_THREAD_Error>
      break;
 800fe78:	bf00      	nop
    APP_DBG("**********************************************************");
 800fe7a:	4a04      	ldr	r2, [pc, #16]	; (800fe8c <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 800fe7c:	2101      	movs	r1, #1
 800fe7e:	2000      	movs	r0, #0
 800fe80:	f7f2 fc94 	bl	80027ac <logApplication>
}
 800fe84:	bf00      	nop
 800fe86:	3718      	adds	r7, #24
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}
 800fe8c:	080129f8 	.word	0x080129f8
 800fe90:	08012a34 	.word	0x08012a34
 800fe94:	08012a50 	.word	0x08012a50
 800fe98:	08012a68 	.word	0x08012a68
 800fe9c:	08012a80 	.word	0x08012a80
 800fea0:	08012a98 	.word	0x08012a98

0800fea4 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800feac:	f04f 32ff 	mov.w	r2, #4294967295
 800feb0:	2101      	movs	r1, #1
 800feb2:	2001      	movs	r0, #1
 800feb4:	f7fb fae0 	bl	800b478 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 800feb8:	f000 f9b8 	bl	801022c <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800febc:	e7f6      	b.n	800feac <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

0800febe <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 800febe:	b580      	push	{r7, lr}
 800fec0:	b082      	sub	sp, #8
 800fec2:	af00      	add	r7, sp, #0
 800fec4:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800fec6:	f04f 32ff 	mov.w	r2, #4294967295
 800feca:	2101      	movs	r1, #1
 800fecc:	2001      	movs	r0, #1
 800fece:	f7fb fad3 	bl	800b478 <osThreadFlagsWait>
    Send_CLI_To_M0();
 800fed2:	f000 f90f 	bl	80100f4 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800fed6:	e7f6      	b.n	800fec6 <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

0800fed8 <APP_THREAD_Init_Dyn_1>:
 * @brief Main entry point for the Thread Application
 * @param  none
 * @retval None
 */
void APP_THREAD_Init_Dyn_1( void )
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 800fede:	f7ff ff83 	bl	800fde8 <APP_THREAD_CheckWirelessFirmwareInfo>

#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 800fee2:	480d      	ldr	r0, [pc, #52]	; (800ff18 <APP_THREAD_Init_Dyn_1+0x40>)
 800fee4:	f000 f826 	bl	800ff34 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 800fee8:	2101      	movs	r1, #1
 800feea:	2002      	movs	r0, #2
 800feec:	f001 f858 	bl	8010fa0 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 800fef0:	f000 f958 	bl	80101a4 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 800fef4:	f000 f938 	bl	8010168 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 800fef8:	f7f9 f9b9 	bl	800926e <SHCI_C2_THREAD_Init>
 800fefc:	4603      	mov	r3, r0
 800fefe:	71fb      	strb	r3, [r7, #7]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ThreadInitStatus);

  // TODO: added this call and remove the lines after since (I think) they are unnecessary
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 800ff00:	4a06      	ldr	r2, [pc, #24]	; (800ff1c <APP_THREAD_Init_Dyn_1+0x44>)
 800ff02:	2100      	movs	r1, #0
 800ff04:	4806      	ldr	r0, [pc, #24]	; (800ff20 <APP_THREAD_Init_Dyn_1+0x48>)
 800ff06:	f7fb f9af 	bl	800b268 <osThreadNew>
 800ff0a:	4602      	mov	r2, r0
 800ff0c:	4b05      	ldr	r3, [pc, #20]	; (800ff24 <APP_THREAD_Init_Dyn_1+0x4c>)
 800ff0e:	601a      	str	r2, [r3, #0]
//  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_MSG_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_THREAD_ProcessMsgM0ToM4);
//  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_COAP_MSG_BUTTON, UTIL_SEQ_RFU, APP_THREAD_SendCoapMsg);
//
//  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_COAP_SEND_MSG, UTIL_SEQ_RFU,APP_THREAD_SendCoapMsg);
//  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_SET_THREAD_MODE, UTIL_SEQ_RFU,APP_THREAD_SetSleepyEndDeviceMode);
}
 800ff10:	bf00      	nop
 800ff12:	3708      	adds	r7, #8
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	20030a5c 	.word	0x20030a5c
 800ff1c:	08012cc4 	.word	0x08012cc4
 800ff20:	0800fea5 	.word	0x0800fea5
 800ff24:	20006aec 	.word	0x20006aec

0800ff28 <APP_THREAD_Init_Dyn_2>:

void APP_THREAD_Init_Dyn_2(void) {
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	af00      	add	r7, sp, #0
  /* Initialize and configure the Thread device*/
  APP_THREAD_DeviceConfig();
 800ff2c:	f7ff fec6 	bl	800fcbc <APP_THREAD_DeviceConfig>
  /**
   * Create timer to handle COAP request sending
   */
//  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &sedCoapTimerID, hw_ts_Repeated, APP_THREAD_CoapTimingElapsed);
  /* Allow the 800_15_4 IP to enter in low power mode */
}
 800ff30:	bf00      	nop
 800ff32:	bd80      	pop	{r7, pc}

0800ff34 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 800ff34:	b480      	push	{r7}
 800ff36:	b083      	sub	sp, #12
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 800ff3c:	4a04      	ldr	r2, [pc, #16]	; (800ff50 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6013      	str	r3, [r2, #0]
}
 800ff42:	bf00      	nop
 800ff44:	370c      	adds	r7, #12
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr
 800ff4e:	bf00      	nop
 800ff50:	20006adc 	.word	0x20006adc

0800ff54 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 800ff54:	b480      	push	{r7}
 800ff56:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 800ff58:	4b03      	ldr	r3, [pc, #12]	; (800ff68 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	330c      	adds	r3, #12
}
 800ff5e:	4618      	mov	r0, r3
 800ff60:	46bd      	mov	sp, r7
 800ff62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff66:	4770      	bx	lr
 800ff68:	20006adc 	.word	0x20006adc

0800ff6c <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 800ff6c:	b480      	push	{r7}
 800ff6e:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 800ff70:	4b03      	ldr	r3, [pc, #12]	; (800ff80 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	330b      	adds	r3, #11
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr
 800ff80:	20006adc 	.word	0x20006adc

0800ff84 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 800ff84:	b480      	push	{r7}
 800ff86:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 800ff88:	4b03      	ldr	r3, [pc, #12]	; (800ff98 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	330b      	adds	r3, #11
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	4770      	bx	lr
 800ff98:	20006ae0 	.word	0x20006ae0

0800ff9c <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b082      	sub	sp, #8
 800ffa0:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 800ffa2:	4b0f      	ldr	r3, [pc, #60]	; (800ffe0 <Ot_Cmd_Transfer+0x44>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ffac:	725a      	strb	r2, [r3, #9]
 800ffae:	2200      	movs	r2, #0
 800ffb0:	f042 0202 	orr.w	r2, r2, #2
 800ffb4:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 800ffb6:	4b0a      	ldr	r3, [pc, #40]	; (800ffe0 <Ot_Cmd_Transfer+0x44>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	330c      	adds	r3, #12
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	3302      	adds	r3, #2
 800ffc0:	009b      	lsls	r3, r3, #2
 800ffc2:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 800ffc4:	4b06      	ldr	r3, [pc, #24]	; (800ffe0 <Ot_Cmd_Transfer+0x44>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	687a      	ldr	r2, [r7, #4]
 800ffca:	b2d2      	uxtb	r2, r2
 800ffcc:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 800ffce:	f7f9 fe57 	bl	8009c80 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 800ffd2:	f000 f829 	bl	8010028 <Wait_Getting_Ack_From_M0>
}
 800ffd6:	bf00      	nop
 800ffd8:	3708      	adds	r7, #8
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd80      	pop	{r7, pc}
 800ffde:	bf00      	nop
 800ffe0:	20006adc 	.word	0x20006adc

0800ffe4 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b082      	sub	sp, #8
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 800ffec:	f000 f82e 	bl	801004c <Receive_Ack_From_M0>
}
 800fff0:	bf00      	nop
 800fff2:	3708      	adds	r7, #8
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}

0800fff8 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b082      	sub	sp, #8
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 8010000:	4a04      	ldr	r2, [pc, #16]	; (8010014 <TL_THREAD_NotReceived+0x1c>)
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8010006:	f000 f82d 	bl	8010064 <Receive_Notification_From_M0>
}
 801000a:	bf00      	nop
 801000c:	3708      	adds	r7, #8
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}
 8010012:	bf00      	nop
 8010014:	20006ae0 	.word	0x20006ae0

08010018 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 8010018:	b480      	push	{r7}
 801001a:	af00      	add	r7, sp, #0

}
 801001c:	bf00      	nop
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr
	...

08010028 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 8010028:	b480      	push	{r7}
 801002a:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 801002c:	bf00      	nop
 801002e:	4b06      	ldr	r3, [pc, #24]	; (8010048 <Wait_Getting_Ack_From_M0+0x20>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d0fb      	beq.n	801002e <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 8010036:	4b04      	ldr	r3, [pc, #16]	; (8010048 <Wait_Getting_Ack_From_M0+0x20>)
 8010038:	2200      	movs	r2, #0
 801003a:	601a      	str	r2, [r3, #0]
}
 801003c:	bf00      	nop
 801003e:	46bd      	mov	sp, r7
 8010040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010044:	4770      	bx	lr
 8010046:	bf00      	nop
 8010048:	20006ae8 	.word	0x20006ae8

0801004c <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 801004c:	b480      	push	{r7}
 801004e:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 8010050:	4b03      	ldr	r3, [pc, #12]	; (8010060 <Receive_Ack_From_M0+0x14>)
 8010052:	2201      	movs	r2, #1
 8010054:	601a      	str	r2, [r3, #0]
}
 8010056:	bf00      	nop
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr
 8010060:	20006ae8 	.word	0x20006ae8

08010064 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8010068:	4b06      	ldr	r3, [pc, #24]	; (8010084 <Receive_Notification_From_M0+0x20>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	3301      	adds	r3, #1
 801006e:	4a05      	ldr	r2, [pc, #20]	; (8010084 <Receive_Notification_From_M0+0x20>)
 8010070:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 8010072:	4b05      	ldr	r3, [pc, #20]	; (8010088 <Receive_Notification_From_M0+0x24>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	2101      	movs	r1, #1
 8010078:	4618      	mov	r0, r3
 801007a:	f7fb f99b 	bl	800b3b4 <osThreadFlagsSet>
}
 801007e:	bf00      	nop
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop
 8010084:	20006ae4 	.word	0x20006ae4
 8010088:	20006aec 	.word	0x20006aec

0801008c <RxCpltCallback>:

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
static void RxCpltCallback(void)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8010090:	4b12      	ldr	r3, [pc, #72]	; (80100dc <RxCpltCallback+0x50>)
 8010092:	881b      	ldrh	r3, [r3, #0]
 8010094:	b29b      	uxth	r3, r3
 8010096:	2bff      	cmp	r3, #255	; 0xff
 8010098:	d818      	bhi.n	80100cc <RxCpltCallback+0x40>
  {
    CommandString[indexReceiveChar++] = aRxBuffer[0];
 801009a:	4b10      	ldr	r3, [pc, #64]	; (80100dc <RxCpltCallback+0x50>)
 801009c:	881b      	ldrh	r3, [r3, #0]
 801009e:	b29b      	uxth	r3, r3
 80100a0:	1c5a      	adds	r2, r3, #1
 80100a2:	b291      	uxth	r1, r2
 80100a4:	4a0d      	ldr	r2, [pc, #52]	; (80100dc <RxCpltCallback+0x50>)
 80100a6:	8011      	strh	r1, [r2, #0]
 80100a8:	461a      	mov	r2, r3
 80100aa:	4b0d      	ldr	r3, [pc, #52]	; (80100e0 <RxCpltCallback+0x54>)
 80100ac:	7819      	ldrb	r1, [r3, #0]
 80100ae:	4b0d      	ldr	r3, [pc, #52]	; (80100e4 <RxCpltCallback+0x58>)
 80100b0:	5499      	strb	r1, [r3, r2]
    if (aRxBuffer[0] == '\r')
 80100b2:	4b0b      	ldr	r3, [pc, #44]	; (80100e0 <RxCpltCallback+0x54>)
 80100b4:	781b      	ldrb	r3, [r3, #0]
 80100b6:	2b0d      	cmp	r3, #13
 80100b8:	d108      	bne.n	80100cc <RxCpltCallback+0x40>
    {
      CptReceiveCmdFromUser = 1U;
 80100ba:	4b0b      	ldr	r3, [pc, #44]	; (80100e8 <RxCpltCallback+0x5c>)
 80100bc:	2201      	movs	r2, #1
 80100be:	801a      	strh	r2, [r3, #0]

      /* UART task scheduling*/
      osThreadFlagsSet(OsTaskCliId,1);
 80100c0:	4b0a      	ldr	r3, [pc, #40]	; (80100ec <RxCpltCallback+0x60>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	2101      	movs	r1, #1
 80100c6:	4618      	mov	r0, r3
 80100c8:	f7fb f974 	bl	800b3b4 <osThreadFlagsSet>
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1U, RxCpltCallback);
 80100cc:	4b08      	ldr	r3, [pc, #32]	; (80100f0 <RxCpltCallback+0x64>)
 80100ce:	2201      	movs	r2, #1
 80100d0:	4903      	ldr	r1, [pc, #12]	; (80100e0 <RxCpltCallback+0x54>)
 80100d2:	2000      	movs	r0, #0
 80100d4:	f7f1 ff58 	bl	8001f88 <HW_UART_Receive_IT>
}
 80100d8:	bf00      	nop
 80100da:	bd80      	pop	{r7, pc}
 80100dc:	20006ad8 	.word	0x20006ad8
 80100e0:	200068d8 	.word	0x200068d8
 80100e4:	200069d8 	.word	0x200069d8
 80100e8:	20006ada 	.word	0x20006ada
 80100ec:	20006af0 	.word	0x20006af0
 80100f0:	0801008d 	.word	0x0801008d

080100f4 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 80100f8:	22ff      	movs	r2, #255	; 0xff
 80100fa:	2100      	movs	r1, #0
 80100fc:	4812      	ldr	r0, [pc, #72]	; (8010148 <Send_CLI_To_M0+0x54>)
 80100fe:	f001 f8e2 	bl	80112c6 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 8010102:	4b12      	ldr	r3, [pc, #72]	; (801014c <Send_CLI_To_M0+0x58>)
 8010104:	881b      	ldrh	r3, [r3, #0]
 8010106:	b29b      	uxth	r3, r3
 8010108:	461a      	mov	r2, r3
 801010a:	4911      	ldr	r1, [pc, #68]	; (8010150 <Send_CLI_To_M0+0x5c>)
 801010c:	480e      	ldr	r0, [pc, #56]	; (8010148 <Send_CLI_To_M0+0x54>)
 801010e:	f001 f8cf 	bl	80112b0 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 8010112:	4b0e      	ldr	r3, [pc, #56]	; (801014c <Send_CLI_To_M0+0x58>)
 8010114:	881b      	ldrh	r3, [r3, #0]
 8010116:	b29b      	uxth	r3, r3
 8010118:	b2da      	uxtb	r2, r3
 801011a:	4b0e      	ldr	r3, [pc, #56]	; (8010154 <Send_CLI_To_M0+0x60>)
 801011c:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 801011e:	4b0d      	ldr	r3, [pc, #52]	; (8010154 <Send_CLI_To_M0+0x60>)
 8010120:	2200      	movs	r2, #0
 8010122:	725a      	strb	r2, [r3, #9]
 8010124:	2200      	movs	r2, #0
 8010126:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 8010128:	4b0b      	ldr	r3, [pc, #44]	; (8010158 <Send_CLI_To_M0+0x64>)
 801012a:	2200      	movs	r2, #0
 801012c:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 801012e:	4b07      	ldr	r3, [pc, #28]	; (801014c <Send_CLI_To_M0+0x58>)
 8010130:	2200      	movs	r2, #0
 8010132:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 8010134:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010138:	2100      	movs	r1, #0
 801013a:	4805      	ldr	r0, [pc, #20]	; (8010150 <Send_CLI_To_M0+0x5c>)
 801013c:	f001 f8c3 	bl	80112c6 <memset>

  TL_CLI_SendCmd();
 8010140:	f7f9 fdac 	bl	8009c9c <TL_CLI_SendCmd>
}
 8010144:	bf00      	nop
 8010146:	bd80      	pop	{r7, pc}
 8010148:	20030c80 	.word	0x20030c80
 801014c:	20006ad8 	.word	0x20006ad8
 8010150:	200069d8 	.word	0x200069d8
 8010154:	20030c74 	.word	0x20030c74
 8010158:	20006ada 	.word	0x20006ada

0801015c <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8010160:	f7f9 fdb8 	bl	8009cd4 <TL_THREAD_CliSendAck>
}
 8010164:	bf00      	nop
 8010166:	bd80      	pop	{r7, pc}

08010168 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 801016c:	4a08      	ldr	r2, [pc, #32]	; (8010190 <APP_THREAD_Init_UART_CLI+0x28>)
 801016e:	2100      	movs	r1, #0
 8010170:	4808      	ldr	r0, [pc, #32]	; (8010194 <APP_THREAD_Init_UART_CLI+0x2c>)
 8010172:	f7fb f879 	bl	800b268 <osThreadNew>
 8010176:	4602      	mov	r2, r0
 8010178:	4b07      	ldr	r3, [pc, #28]	; (8010198 <APP_THREAD_Init_UART_CLI+0x30>)
 801017a:	601a      	str	r2, [r3, #0]
#endif /* (CFG_FULL_LOW_POWER == 0) */

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
  MX_USART1_UART_Init();
 801017c:	f7f2 fd14 	bl	8002ba8 <MX_USART1_UART_Init>
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
 8010180:	4b06      	ldr	r3, [pc, #24]	; (801019c <APP_THREAD_Init_UART_CLI+0x34>)
 8010182:	2201      	movs	r2, #1
 8010184:	4906      	ldr	r1, [pc, #24]	; (80101a0 <APP_THREAD_Init_UART_CLI+0x38>)
 8010186:	2000      	movs	r0, #0
 8010188:	f7f1 fefe 	bl	8001f88 <HW_UART_Receive_IT>
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 801018c:	bf00      	nop
 801018e:	bd80      	pop	{r7, pc}
 8010190:	08012ce8 	.word	0x08012ce8
 8010194:	0800febf 	.word	0x0800febf
 8010198:	20006af0 	.word	0x20006af0
 801019c:	0801008d 	.word	0x0801008d
 80101a0:	200068d8 	.word	0x200068d8

080101a4 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 80101a8:	4b06      	ldr	r3, [pc, #24]	; (80101c4 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80101aa:	4a07      	ldr	r2, [pc, #28]	; (80101c8 <APP_THREAD_TL_THREAD_INIT+0x24>)
 80101ac:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 80101ae:	4b05      	ldr	r3, [pc, #20]	; (80101c4 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80101b0:	4a06      	ldr	r2, [pc, #24]	; (80101cc <APP_THREAD_TL_THREAD_INIT+0x28>)
 80101b2:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 80101b4:	4b03      	ldr	r3, [pc, #12]	; (80101c4 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80101b6:	4a06      	ldr	r2, [pc, #24]	; (80101d0 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 80101b8:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 80101ba:	4802      	ldr	r0, [pc, #8]	; (80101c4 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80101bc:	f7f9 fd44 	bl	8009c48 <TL_THREAD_Init>
}
 80101c0:	bf00      	nop
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	200301e0 	.word	0x200301e0
 80101c8:	20030a5c 	.word	0x20030a5c
 80101cc:	20030b68 	.word	0x20030b68
 80101d0:	20030c74 	.word	0x20030c74

080101d4 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b084      	sub	sp, #16
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	7adb      	ldrb	r3, [r3, #11]
 80101e4:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	330c      	adds	r3, #12
 80101ea:	490b      	ldr	r1, [pc, #44]	; (8010218 <TL_THREAD_CliNotReceived+0x44>)
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7ef ffc7 	bl	8000180 <strcmp>
 80101f2:	4603      	mov	r3, r0
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d009      	beq.n	801020c <TL_THREAD_CliNotReceived+0x38>
  {
    /* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	f103 010c 	add.w	r1, r3, #12
 80101fe:	7afb      	ldrb	r3, [r7, #11]
 8010200:	b29a      	uxth	r2, r3
 8010202:	4b06      	ldr	r3, [pc, #24]	; (801021c <TL_THREAD_CliNotReceived+0x48>)
 8010204:	2000      	movs	r0, #0
 8010206:	f7f1 fef9 	bl	8001ffc <HW_UART_Transmit_IT>
  }
  else
  {
    Send_CLI_Ack_For_OT();
  }
}
 801020a:	e001      	b.n	8010210 <TL_THREAD_CliNotReceived+0x3c>
    Send_CLI_Ack_For_OT();
 801020c:	f7ff ffa6 	bl	801015c <Send_CLI_Ack_For_OT>
}
 8010210:	bf00      	nop
 8010212:	3710      	adds	r7, #16
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}
 8010218:	08012ac4 	.word	0x08012ac4
 801021c:	08010221 	.word	0x08010221

08010220 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	af00      	add	r7, sp, #0
  Send_CLI_Ack_For_OT();
 8010224:	f7ff ff9a 	bl	801015c <Send_CLI_Ack_For_OT>
}
 8010228:	bf00      	nop
 801022a:	bd80      	pop	{r7, pc}

0801022c <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8010230:	4b09      	ldr	r3, [pc, #36]	; (8010258 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d00d      	beq.n	8010254 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8010238:	4b07      	ldr	r3, [pc, #28]	; (8010258 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	2b01      	cmp	r3, #1
 801023e:	d904      	bls.n	801024a <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8010240:	2100      	movs	r1, #0
 8010242:	200c      	movs	r0, #12
 8010244:	f7ff fcc4 	bl	800fbd0 <APP_THREAD_Error>
 8010248:	e001      	b.n	801024e <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 801024a:	f7f9 ffad 	bl	800a1a8 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 801024e:	4b02      	ldr	r3, [pc, #8]	; (8010258 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8010250:	2200      	movs	r2, #0
 8010252:	601a      	str	r2, [r3, #0]
  }
}
 8010254:	bf00      	nop
 8010256:	bd80      	pop	{r7, pc}
 8010258:	20006ae4 	.word	0x20006ae4

0801025c <DISAPP_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void DISAPP_Init(void)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b082      	sub	sp, #8
 8010260:	af00      	add	r7, sp, #0
   *
   * @param UUID
   * @param pPData
   * @return
   */
  dis_information_data.pPayload = (uint8_t*)DISAPP_MANUFACTURER_NAME;
 8010262:	4b07      	ldr	r3, [pc, #28]	; (8010280 <DISAPP_Init+0x24>)
 8010264:	603b      	str	r3, [r7, #0]
  dis_information_data.Length = sizeof(DISAPP_MANUFACTURER_NAME);
 8010266:	2304      	movs	r3, #4
 8010268:	713b      	strb	r3, [r7, #4]
  DIS_UpdateChar(MANUFACTURER_NAME_UUID, &dis_information_data);
 801026a:	463b      	mov	r3, r7
 801026c:	4619      	mov	r1, r3
 801026e:	f642 2029 	movw	r0, #10793	; 0x2a29
 8010272:	f7f8 fd75 	bl	8008d60 <DIS_UpdateChar>
  dis_information_data.pPayload = (uint8_t *)pnp_id;
  dis_information_data.Length = BLE_CFG_DIS_PNP_ID_LEN_MAX;
  DIS_UpdateChar(PNP_ID_UUID, &dis_information_data);
#endif
/* USER CODE END DISAPP_Init */
}
 8010276:	bf00      	nop
 8010278:	3708      	adds	r7, #8
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}
 801027e:	bf00      	nop
 8010280:	08012ac8 	.word	0x08012ac8

08010284 <DTC_App_LinkReadyNotification>:

  return;
}

void DTC_App_LinkReadyNotification(uint16_t ConnectionHandle)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b084      	sub	sp, #16
 8010288:	af00      	add	r7, sp, #0
 801028a:	4603      	mov	r3, r0
 801028c:	80fb      	strh	r3, [r7, #6]
#if(CFG_SERVER_ONLY != 1)
  tBleStatus status;
  uint16_t enable_notification = 0x0001;
 801028e:	2301      	movs	r3, #1
 8010290:	81bb      	strh	r3, [r7, #12]
#endif  

  DataTransferClientContext.connHandle = ConnectionHandle;
 8010292:	4a0f      	ldr	r2, [pc, #60]	; (80102d0 <DTC_App_LinkReadyNotification+0x4c>)
 8010294:	88fb      	ldrh	r3, [r7, #6]
 8010296:	8013      	strh	r3, [r2, #0]

#if(CFG_BLE_CENTRAL != 1)
  GattProcReq(GATT_PROC_MTU_UPDATE);
 8010298:	2000      	movs	r0, #0
 801029a:	f000 f81b 	bl	80102d4 <GattProcReq>
#endif
#if(CFG_SERVER_ONLY != 1)
  GattProcReq(GATT_PROC_DISC_ALL_PRIMARY_SERVICES);
 801029e:	2001      	movs	r0, #1
 80102a0:	f000 f818 	bl	80102d4 <GattProcReq>
  GattProcReq(GATT_PROC_DISC_ALL_CHAR_OF_DT_SERVICE);
 80102a4:	2002      	movs	r0, #2
 80102a6:	f000 f815 	bl	80102d4 <GattProcReq>
  GattProcReq(GATT_PROC_DISC_TX_CHAR_DESC);
 80102aa:	2003      	movs	r0, #3
 80102ac:	f000 f812 	bl	80102d4 <GattProcReq>
  /**
   * Enable notification on the remote server
   */
  APP_DBG_MSG("Enable notification on the remote server\n");

  status = aci_gatt_write_char_desc(
 80102b0:	4b07      	ldr	r3, [pc, #28]	; (80102d0 <DTC_App_LinkReadyNotification+0x4c>)
 80102b2:	8818      	ldrh	r0, [r3, #0]
 80102b4:	4b06      	ldr	r3, [pc, #24]	; (80102d0 <DTC_App_LinkReadyNotification+0x4c>)
 80102b6:	8919      	ldrh	r1, [r3, #8]
 80102b8:	f107 030c 	add.w	r3, r7, #12
 80102bc:	2202      	movs	r2, #2
 80102be:	f7f8 f9a3 	bl	8008608 <aci_gatt_write_char_desc>
 80102c2:	4603      	mov	r3, r0
 80102c4:	73fb      	strb	r3, [r7, #15]
#endif
  
#if(CFG_BLE_CENTRAL != 0)
    UTIL_SEQ_SetTask(1<<CFG_TASK_CONN_UPDATE_ID, CFG_SCH_PRIO_0); 
#endif
  return;
 80102c6:	bf00      	nop
}
 80102c8:	3710      	adds	r7, #16
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}
 80102ce:	bf00      	nop
 80102d0:	20006f94 	.word	0x20006f94

080102d4 <GattProcReq>:
//    UTIL_SEQ_SetTask(1 << CFG_TASK_APP_DATA_THROUGHPUT_ID, CFG_SCH_PRIO_0);
    return;
  }

  static void GattProcReq(GattProcId_t GattProcId)
  {
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b084      	sub	sp, #16
 80102d8:	af00      	add	r7, sp, #0
 80102da:	4603      	mov	r3, r0
 80102dc:	71fb      	strb	r3, [r7, #7]
    tBleStatus status;

    switch(GattProcId)
 80102de:	79fb      	ldrb	r3, [r7, #7]
 80102e0:	2b03      	cmp	r3, #3
 80102e2:	d835      	bhi.n	8010350 <GattProcReq+0x7c>
 80102e4:	a201      	add	r2, pc, #4	; (adr r2, 80102ec <GattProcReq+0x18>)
 80102e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102ea:	bf00      	nop
 80102ec:	080102fd 	.word	0x080102fd
 80102f0:	0801030d 	.word	0x0801030d
 80102f4:	0801031d 	.word	0x0801031d
 80102f8:	08010335 	.word	0x08010335
    {
      case GATT_PROC_MTU_UPDATE:
        APP_DBG_MSG("change ATT MTU size \n");

        status = aci_gatt_exchange_config(DataTransferClientContext.connHandle);
 80102fc:	4b17      	ldr	r3, [pc, #92]	; (801035c <GattProcReq+0x88>)
 80102fe:	881b      	ldrh	r3, [r3, #0]
 8010300:	4618      	mov	r0, r3
 8010302:	f7f8 f80f 	bl	8008324 <aci_gatt_exchange_config>
 8010306:	4603      	mov	r3, r0
 8010308:	73fb      	strb	r3, [r7, #15]
          APP_DBG_MSG("change MTU cmd failure: 0x%x\n", status);
        }
//        UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_GATT_PROC_COMPLETE);

        APP_DBG_MSG("GATT_PROC_MTU_UPDATE complete event received \n");
        break;
 801030a:	e022      	b.n	8010352 <GattProcReq+0x7e>

      case GATT_PROC_DISC_ALL_PRIMARY_SERVICES:
        APP_DBG_MSG("Discover all primary services \n");

        status = aci_gatt_disc_all_primary_services(DataTransferClientContext.connHandle);
 801030c:	4b13      	ldr	r3, [pc, #76]	; (801035c <GattProcReq+0x88>)
 801030e:	881b      	ldrh	r3, [r3, #0]
 8010310:	4618      	mov	r0, r3
 8010312:	f7f8 f855 	bl	80083c0 <aci_gatt_disc_all_primary_services>
 8010316:	4603      	mov	r3, r0
 8010318:	73fb      	strb	r3, [r7, #15]
          APP_DBG_MSG("Discover all primary services cmd failure: 0x%x\n", status);
        }
//        UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_GATT_PROC_COMPLETE);

        APP_DBG_MSG("GATT_PROC_DISC_ALL_PRIMARY_SERVICES complete event received \n");
        break;
 801031a:	e01a      	b.n	8010352 <GattProcReq+0x7e>

      case GATT_PROC_DISC_ALL_CHAR_OF_DT_SERVICE:
        APP_DBG_MSG("Discover all char of service \n");

        status = aci_gatt_disc_all_char_of_service(
 801031c:	4b0f      	ldr	r3, [pc, #60]	; (801035c <GattProcReq+0x88>)
 801031e:	8818      	ldrh	r0, [r3, #0]
 8010320:	4b0e      	ldr	r3, [pc, #56]	; (801035c <GattProcReq+0x88>)
 8010322:	8859      	ldrh	r1, [r3, #2]
 8010324:	4b0d      	ldr	r3, [pc, #52]	; (801035c <GattProcReq+0x88>)
 8010326:	889b      	ldrh	r3, [r3, #4]
 8010328:	461a      	mov	r2, r3
 801032a:	f7f8 f897 	bl	800845c <aci_gatt_disc_all_char_of_service>
 801032e:	4603      	mov	r3, r0
 8010330:	73fb      	strb	r3, [r7, #15]
          APP_DBG_MSG("Discover all char of service cmd failure: 0x%x\n", status);
        }
//        UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_GATT_PROC_COMPLETE);

        APP_DBG_MSG("GATT_PROC_DISC_ALL_CHAR_OF_DT_SERVICE complete event received \n");
        break;
 8010332:	e00e      	b.n	8010352 <GattProcReq+0x7e>

      case GATT_PROC_DISC_TX_CHAR_DESC:
        APP_DBG_MSG("Discover Tx char descriptors \n");

        status = aci_gatt_disc_all_char_desc(
 8010334:	4b09      	ldr	r3, [pc, #36]	; (801035c <GattProcReq+0x88>)
 8010336:	8818      	ldrh	r0, [r3, #0]
 8010338:	4b08      	ldr	r3, [pc, #32]	; (801035c <GattProcReq+0x88>)
 801033a:	88d9      	ldrh	r1, [r3, #6]
            DataTransferClientContext.connHandle,
            DataTransferClientContext.DataTransferTxCharHdle,
            DataTransferClientContext.DataTransferTxCharHdle + 2);
 801033c:	4b07      	ldr	r3, [pc, #28]	; (801035c <GattProcReq+0x88>)
 801033e:	88db      	ldrh	r3, [r3, #6]
        status = aci_gatt_disc_all_char_desc(
 8010340:	3302      	adds	r3, #2
 8010342:	b29b      	uxth	r3, r3
 8010344:	461a      	mov	r2, r3
 8010346:	f7f8 f8f4 	bl	8008532 <aci_gatt_disc_all_char_desc>
 801034a:	4603      	mov	r3, r0
 801034c:	73fb      	strb	r3, [r7, #15]
          APP_DBG_MSG("Discover Tx char descriptors cmd failure: 0x%x\n", status);
        }
//        UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_GATT_PROC_COMPLETE);

        APP_DBG_MSG("GATT_PROC_DISC_TX_CHAR_DESC complete event received \n");
        break;
 801034e:	e000      	b.n	8010352 <GattProcReq+0x7e>

      default:
        break;
 8010350:	bf00      	nop
    }
    return;
 8010352:	bf00      	nop
  }
 8010354:	3710      	adds	r7, #16
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}
 801035a:	bf00      	nop
 801035c:	20006f94 	.word	0x20006f94

08010360 <DTS_App_Init>:
 *
 * PUBLIC FUNCTIONS
 *
 *************************************************************/
void DTS_App_Init(void)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b082      	sub	sp, #8
 8010364:	af00      	add	r7, sp, #0
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_SW2_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, DT_App_Button2_Trigger_Received);
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_SW3_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, DT_App_Button3_Trigger_Received);
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_DATA_TRANSFER_UPDATE_ID, UTIL_SEQ_RFU, SendData);
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_DATA_WRITE_ID, UTIL_SEQ_RFU, BLE_App_Delay_DataThroughput);

  DataWriteProcessId= osThreadNew(BLE_App_Delay_DataThroughput, NULL, &DataWriteProcess_attr);
 8010366:	4a15      	ldr	r2, [pc, #84]	; (80103bc <DTS_App_Init+0x5c>)
 8010368:	2100      	movs	r1, #0
 801036a:	4815      	ldr	r0, [pc, #84]	; (80103c0 <DTS_App_Init+0x60>)
 801036c:	f7fa ff7c 	bl	800b268 <osThreadNew>
 8010370:	4602      	mov	r2, r0
 8010372:	4b14      	ldr	r3, [pc, #80]	; (80103c4 <DTS_App_Init+0x64>)
 8010374:	601a      	str	r2, [r3, #0]
  DataTransferProcessId= osThreadNew(SendData, NULL, &DataTransferProcess_attr);
 8010376:	4a14      	ldr	r2, [pc, #80]	; (80103c8 <DTS_App_Init+0x68>)
 8010378:	2100      	movs	r1, #0
 801037a:	4814      	ldr	r0, [pc, #80]	; (80103cc <DTS_App_Init+0x6c>)
 801037c:	f7fa ff74 	bl	800b268 <osThreadNew>
 8010380:	4602      	mov	r2, r0
 8010382:	4b13      	ldr	r3, [pc, #76]	; (80103d0 <DTS_App_Init+0x70>)
 8010384:	601a      	str	r2, [r3, #0]


  /**
   * Initialize data buffer
   */
  for (i=0 ; i<(DATA_NOTIFICATION_MAX_PACKET_SIZE-1) ; i++)
 8010386:	2300      	movs	r3, #0
 8010388:	71fb      	strb	r3, [r7, #7]
 801038a:	e006      	b.n	801039a <DTS_App_Init+0x3a>
  {
    Notification_Data_Buffer[i] = i;
 801038c:	79fb      	ldrb	r3, [r7, #7]
 801038e:	4911      	ldr	r1, [pc, #68]	; (80103d4 <DTS_App_Init+0x74>)
 8010390:	79fa      	ldrb	r2, [r7, #7]
 8010392:	54ca      	strb	r2, [r1, r3]
  for (i=0 ; i<(DATA_NOTIFICATION_MAX_PACKET_SIZE-1) ; i++)
 8010394:	79fb      	ldrb	r3, [r7, #7]
 8010396:	3301      	adds	r3, #1
 8010398:	71fb      	strb	r3, [r7, #7]
 801039a:	79fb      	ldrb	r3, [r7, #7]
 801039c:	2bee      	cmp	r3, #238	; 0xee
 801039e:	d9f5      	bls.n	801038c <DTS_App_Init+0x2c>
  }

  DataTransferServerContext.NotificationTransferReq = DTS_APP_TRANSFER_REQ_OFF;
 80103a0:	4b0d      	ldr	r3, [pc, #52]	; (80103d8 <DTS_App_Init+0x78>)
 80103a2:	2200      	movs	r2, #0
 80103a4:	741a      	strb	r2, [r3, #16]
  DataTransferServerContext.ButtonTransferReq = DTS_APP_TRANSFER_REQ_OFF;
 80103a6:	4b0c      	ldr	r3, [pc, #48]	; (80103d8 <DTS_App_Init+0x78>)
 80103a8:	2200      	movs	r2, #0
 80103aa:	745a      	strb	r2, [r3, #17]
  DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_ON;
 80103ac:	4b0a      	ldr	r3, [pc, #40]	; (80103d8 <DTS_App_Init+0x78>)
 80103ae:	2201      	movs	r2, #1
 80103b0:	749a      	strb	r2, [r3, #18]
}
 80103b2:	bf00      	nop
 80103b4:	3708      	adds	r7, #8
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
 80103ba:	bf00      	nop
 80103bc:	08012d0c 	.word	0x08012d0c
 80103c0:	08010579 	.word	0x08010579
 80103c4:	20006f68 	.word	0x20006f68
 80103c8:	08012d30 	.word	0x08012d30
 80103cc:	080104c1 	.word	0x080104c1
 80103d0:	20006f88 	.word	0x20006f88
 80103d4:	20006af4 	.word	0x20006af4
 80103d8:	20006fa4 	.word	0x20006fa4

080103dc <DTS_App_TxPoolAvailableNotification>:
//    UTIL_SEQ_SetTask(1 << CFG_TASK_SW3_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
	  osThreadFlagsSet( Button_SW2_ProcessId, 1 );
}

void DTS_App_TxPoolAvailableNotification(void)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	af00      	add	r7, sp, #0
  DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_ON;
 80103e0:	4b05      	ldr	r3, [pc, #20]	; (80103f8 <DTS_App_TxPoolAvailableNotification+0x1c>)
 80103e2:	2201      	movs	r2, #1
 80103e4:	749a      	strb	r2, [r3, #18]
//  UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_TRANSFER_UPDATE_ID, CFG_SCH_PRIO_0);
  osThreadFlagsSet( DataTransferProcessId, 1 );
 80103e6:	4b05      	ldr	r3, [pc, #20]	; (80103fc <DTS_App_TxPoolAvailableNotification+0x20>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	2101      	movs	r1, #1
 80103ec:	4618      	mov	r0, r3
 80103ee:	f7fa ffe1 	bl	800b3b4 <osThreadFlagsSet>

  return;
 80103f2:	bf00      	nop
}
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop
 80103f8:	20006fa4 	.word	0x20006fa4
 80103fc:	20006f88 	.word	0x20006f88

08010400 <DTS_Notification>:
 *
 * CALLBACK FUNCTIONS
 *
 *************************************************************/
void DTS_Notification( DTS_STM_App_Notification_evt_t *pNotification )
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b082      	sub	sp, #8
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
  switch (pNotification->Evt_Opcode)
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	785b      	ldrb	r3, [r3, #1]
 801040c:	2b05      	cmp	r3, #5
 801040e:	d848      	bhi.n	80104a2 <DTS_Notification+0xa2>
 8010410:	a201      	add	r2, pc, #4	; (adr r2, 8010418 <DTS_Notification+0x18>)
 8010412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010416:	bf00      	nop
 8010418:	08010431 	.word	0x08010431
 801041c:	08010445 	.word	0x08010445
 8010420:	0801048f 	.word	0x0801048f
 8010424:	0801044d 	.word	0x0801044d
 8010428:	080104a3 	.word	0x080104a3
 801042c:	08010459 	.word	0x08010459
  {
    case DTS_STM__NOTIFICATION_ENABLED:
      DataTransferServerContext.NotificationTransferReq = DTS_APP_TRANSFER_REQ_ON;
 8010430:	4b1e      	ldr	r3, [pc, #120]	; (80104ac <DTS_Notification+0xac>)
 8010432:	2201      	movs	r2, #1
 8010434:	741a      	strb	r2, [r3, #16]
//      UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_TRANSFER_UPDATE_ID, CFG_SCH_PRIO_0);
      osThreadFlagsSet( DataTransferProcessId, 1 );
 8010436:	4b1e      	ldr	r3, [pc, #120]	; (80104b0 <DTS_Notification+0xb0>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	2101      	movs	r1, #1
 801043c:	4618      	mov	r0, r3
 801043e:	f7fa ffb9 	bl	800b3b4 <osThreadFlagsSet>
      break;
 8010442:	e02f      	b.n	80104a4 <DTS_Notification+0xa4>

    case DTS_STM_NOTIFICATION_DISABLED:
      DataTransferServerContext.NotificationTransferReq = DTS_APP_TRANSFER_REQ_OFF;
 8010444:	4b19      	ldr	r3, [pc, #100]	; (80104ac <DTS_Notification+0xac>)
 8010446:	2200      	movs	r2, #0
 8010448:	741a      	strb	r2, [r3, #16]
      break;
 801044a:	e02b      	b.n	80104a4 <DTS_Notification+0xa4>
      
    case DTC_NOTIFICATION_ENABLED:
//      BLE_SVC_L2CAP_Conn_Update_7_5();
      BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 801044c:	4b19      	ldr	r3, [pc, #100]	; (80104b4 <DTS_Notification+0xb4>)
 801044e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010450:	4618      	mov	r0, r3
 8010452:	f7ff faf3 	bl	800fa3c <BLE_SVC_L2CAP_Conn_Update>

      //DataTransferServerContext.NotificationClientTransferFlag = 0x01;
      break;
 8010456:	e025      	b.n	80104a4 <DTS_Notification+0xa4>
      //DataTransferServerContext.NotificationClientTransferFlag = 0x00;
      APP_DBG_MSG("write data notification disabled \n");
      break;
      
    case DTS_STM_DATA_RECEIVED:
      if (DataReceived == 0)
 8010458:	4b17      	ldr	r3, [pc, #92]	; (80104b8 <DTS_Notification+0xb8>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d10e      	bne.n	801047e <DTS_Notification+0x7e>
      {
        /* start timer */
        DataReceived += pNotification->DataTransfered.Length;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	691a      	ldr	r2, [r3, #16]
 8010464:	4b14      	ldr	r3, [pc, #80]	; (80104b8 <DTS_Notification+0xb8>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	4413      	add	r3, r2
 801046a:	4a13      	ldr	r2, [pc, #76]	; (80104b8 <DTS_Notification+0xb8>)
 801046c:	6013      	str	r3, [r2, #0]
        HW_TS_Start(TimerDataThroughputWrite_Id, DELAY_1s);
 801046e:	4b13      	ldr	r3, [pc, #76]	; (80104bc <DTS_Notification+0xbc>)
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	f640 0101 	movw	r1, #2049	; 0x801
 8010476:	4618      	mov	r0, r3
 8010478:	f7f1 fcf2 	bl	8001e60 <HW_TS_Start>
      }
      else
      {
        DataReceived += pNotification->DataTransfered.Length;
      }
      break;
 801047c:	e012      	b.n	80104a4 <DTS_Notification+0xa4>
        DataReceived += pNotification->DataTransfered.Length;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	691a      	ldr	r2, [r3, #16]
 8010482:	4b0d      	ldr	r3, [pc, #52]	; (80104b8 <DTS_Notification+0xb8>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	4413      	add	r3, r2
 8010488:	4a0b      	ldr	r2, [pc, #44]	; (80104b8 <DTS_Notification+0xb8>)
 801048a:	6013      	str	r3, [r2, #0]
      break;
 801048c:	e00a      	b.n	80104a4 <DTS_Notification+0xa4>

    case DTS_STM_GATT_TX_POOL_AVAILABLE:
      DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_ON;
 801048e:	4b07      	ldr	r3, [pc, #28]	; (80104ac <DTS_Notification+0xac>)
 8010490:	2201      	movs	r2, #1
 8010492:	749a      	strb	r2, [r3, #18]
//      UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_TRANSFER_UPDATE_ID, CFG_SCH_PRIO_0);
      osThreadFlagsSet( DataTransferProcessId, 1 );
 8010494:	4b06      	ldr	r3, [pc, #24]	; (80104b0 <DTS_Notification+0xb0>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	2101      	movs	r1, #1
 801049a:	4618      	mov	r0, r3
 801049c:	f7fa ff8a 	bl	800b3b4 <osThreadFlagsSet>
      break;
 80104a0:	e000      	b.n	80104a4 <DTS_Notification+0xa4>

    default:
      break;
 80104a2:	bf00      	nop
  }

  return;
 80104a4:	bf00      	nop
}
 80104a6:	3708      	adds	r7, #8
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}
 80104ac:	20006fa4 	.word	0x20006fa4
 80104b0:	20006f88 	.word	0x20006f88
 80104b4:	2000018c 	.word	0x2000018c
 80104b8:	20006fa0 	.word	0x20006fa0
 80104bc:	20006f7c 	.word	0x20006f7c

080104c0 <SendData>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
void SendData( void * argument )
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b084      	sub	sp, #16
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	  for(;;)
	  {
	    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80104c8:	f04f 32ff 	mov.w	r2, #4294967295
 80104cc:	2100      	movs	r1, #0
 80104ce:	2001      	movs	r0, #1
 80104d0:	f7fa ffd2 	bl	800b478 <osThreadFlagsWait>

  tBleStatus status = BLE_STATUS_INVALID_PARAMS;
 80104d4:	2342      	movs	r3, #66	; 0x42
 80104d6:	73fb      	strb	r3, [r7, #15]
  uint8_t crc_result;

  if( (DataTransferServerContext.ButtonTransferReq != DTS_APP_TRANSFER_REQ_OFF)
 80104d8:	4b1e      	ldr	r3, [pc, #120]	; (8010554 <SendData+0x94>)
 80104da:	7c5b      	ldrb	r3, [r3, #17]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d0f3      	beq.n	80104c8 <SendData+0x8>
      && (DataTransferServerContext.NotificationTransferReq != DTS_APP_TRANSFER_REQ_OFF)
 80104e0:	4b1c      	ldr	r3, [pc, #112]	; (8010554 <SendData+0x94>)
 80104e2:	7c1b      	ldrb	r3, [r3, #16]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d0ef      	beq.n	80104c8 <SendData+0x8>
      && (DataTransferServerContext.DtFlowStatus != DTS_APP_FLOW_OFF) )
 80104e8:	4b1a      	ldr	r3, [pc, #104]	; (8010554 <SendData+0x94>)
 80104ea:	7c9b      	ldrb	r3, [r3, #18]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d0eb      	beq.n	80104c8 <SendData+0x8>
  {   
    /*Data Packet to send to remote*/
    Notification_Data_Buffer[0] += 1;
 80104f0:	4b19      	ldr	r3, [pc, #100]	; (8010558 <SendData+0x98>)
 80104f2:	781b      	ldrb	r3, [r3, #0]
 80104f4:	3301      	adds	r3, #1
 80104f6:	b2da      	uxtb	r2, r3
 80104f8:	4b17      	ldr	r3, [pc, #92]	; (8010558 <SendData+0x98>)
 80104fa:	701a      	strb	r2, [r3, #0]
    /* compute CRC */
    crc_result = APP_BLE_ComputeCRC8((uint8_t*) Notification_Data_Buffer, (DATA_NOTIFICATION_MAX_PACKET_SIZE - 1));
 80104fc:	21ef      	movs	r1, #239	; 0xef
 80104fe:	4816      	ldr	r0, [pc, #88]	; (8010558 <SendData+0x98>)
 8010500:	f7ff fa10 	bl	800f924 <APP_BLE_ComputeCRC8>
 8010504:	4603      	mov	r3, r0
 8010506:	73bb      	strb	r3, [r7, #14]
    Notification_Data_Buffer[DATA_NOTIFICATION_MAX_PACKET_SIZE - 1] = crc_result;
 8010508:	4a13      	ldr	r2, [pc, #76]	; (8010558 <SendData+0x98>)
 801050a:	7bbb      	ldrb	r3, [r7, #14]
 801050c:	f882 30ef 	strb.w	r3, [r2, #239]	; 0xef

    DataTransferServerContext.TxData.pPayload = Notification_Data_Buffer;
 8010510:	4b10      	ldr	r3, [pc, #64]	; (8010554 <SendData+0x94>)
 8010512:	4a11      	ldr	r2, [pc, #68]	; (8010558 <SendData+0x98>)
 8010514:	601a      	str	r2, [r3, #0]
    //DataTransferServerContext.TxData.Length = DATA_NOTIFICATION_MAX_PACKET_SIZE; /* DATA_NOTIFICATION_MAX_PACKET_SIZE */
    DataTransferServerContext.TxData.Length =  DATA_NOTIFICATION_MAX_PACKET_SIZE; //Att_Mtu_Exchanged-10;
 8010516:	4b0f      	ldr	r3, [pc, #60]	; (8010554 <SendData+0x94>)
 8010518:	22f0      	movs	r2, #240	; 0xf0
 801051a:	60da      	str	r2, [r3, #12]

    status = DTS_STM_UpdateChar(DATA_TRANSFER_TX_CHAR_UUID, (uint8_t *) &DataTransferServerContext.TxData);
 801051c:	490d      	ldr	r1, [pc, #52]	; (8010554 <SendData+0x94>)
 801051e:	f64f 6081 	movw	r0, #65153	; 0xfe81
 8010522:	f000 f99b 	bl	801085c <DTS_STM_UpdateChar>
 8010526:	4603      	mov	r3, r0
 8010528:	73fb      	strb	r3, [r7, #15]
    if (status == BLE_STATUS_INSUFFICIENT_RESOURCES)
 801052a:	7bfb      	ldrb	r3, [r7, #15]
 801052c:	2b64      	cmp	r3, #100	; 0x64
 801052e:	d109      	bne.n	8010544 <SendData+0x84>
    {
      DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_OFF;
 8010530:	4b08      	ldr	r3, [pc, #32]	; (8010554 <SendData+0x94>)
 8010532:	2200      	movs	r2, #0
 8010534:	749a      	strb	r2, [r3, #18]
      (Notification_Data_Buffer[0])-=1;
 8010536:	4b08      	ldr	r3, [pc, #32]	; (8010558 <SendData+0x98>)
 8010538:	781b      	ldrb	r3, [r3, #0]
 801053a:	3b01      	subs	r3, #1
 801053c:	b2da      	uxtb	r2, r3
 801053e:	4b06      	ldr	r3, [pc, #24]	; (8010558 <SendData+0x98>)
 8010540:	701a      	strb	r2, [r3, #0]
 8010542:	e7c1      	b.n	80104c8 <SendData+0x8>
    }
    else
    {
//      UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_TRANSFER_UPDATE_ID, CFG_SCH_PRIO_0);
    	osThreadFlagsSet( DataTransferProcessId, 1 );
 8010544:	4b05      	ldr	r3, [pc, #20]	; (801055c <SendData+0x9c>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	2101      	movs	r1, #1
 801054a:	4618      	mov	r0, r3
 801054c:	f7fa ff32 	bl	800b3b4 <osThreadFlagsSet>
	  {
 8010550:	e7ba      	b.n	80104c8 <SendData+0x8>
 8010552:	bf00      	nop
 8010554:	20006fa4 	.word	0x20006fa4
 8010558:	20006af4 	.word	0x20006af4
 801055c:	20006f88 	.word	0x20006f88

08010560 <Resume_Notification>:
  }
	  }
//  return;
}
void Resume_Notification(void)
{
 8010560:	b480      	push	{r7}
 8010562:	af00      	add	r7, sp, #0
  DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_ON;
 8010564:	4b03      	ldr	r3, [pc, #12]	; (8010574 <Resume_Notification+0x14>)
 8010566:	2201      	movs	r2, #1
 8010568:	749a      	strb	r2, [r3, #18]
}
 801056a:	bf00      	nop
 801056c:	46bd      	mov	sp, r7
 801056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010572:	4770      	bx	lr
 8010574:	20006fa4 	.word	0x20006fa4

08010578 <BLE_App_Delay_DataThroughput>:
//  Appli_UpdateButtonState(BSP_PB_GetState(BUTTON_SW3) == BUTTON_PRESSED);
	  }
}

void BLE_App_Delay_DataThroughput(void * argument)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b088      	sub	sp, #32
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	  for(;;)
	  {
	    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8010580:	f04f 32ff 	mov.w	r2, #4294967295
 8010584:	2100      	movs	r1, #0
 8010586:	2001      	movs	r0, #1
 8010588:	f7fa ff76 	bl	800b478 <osThreadFlagsWait>
  uint32_t DataThroughput;
  DTS_STM_Payload_t ThroughputToSend; 
  
  DataThroughput = (uint32_t)(DataReceived/TIMEUNIT);
 801058c:	4b08      	ldr	r3, [pc, #32]	; (80105b0 <BLE_App_Delay_DataThroughput+0x38>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	61fb      	str	r3, [r7, #28]
  APP_DBG_MSG("DataThroughput = %ld  bytes/s\n", DataThroughput);
  
  ThroughputToSend.Length = 4;
 8010592:	2304      	movs	r3, #4
 8010594:	61bb      	str	r3, [r7, #24]
  ThroughputToSend.pPayload = (uint8_t*)&DataThroughput;
 8010596:	f107 031c 	add.w	r3, r7, #28
 801059a:	60fb      	str	r3, [r7, #12]
  
  DTS_STM_UpdateCharThroughput( (DTS_STM_Payload_t*) &ThroughputToSend);  
 801059c:	f107 030c 	add.w	r3, r7, #12
 80105a0:	4618      	mov	r0, r3
 80105a2:	f000 f975 	bl	8010890 <DTS_STM_UpdateCharThroughput>
  DataReceived = 0;
 80105a6:	4b02      	ldr	r3, [pc, #8]	; (80105b0 <BLE_App_Delay_DataThroughput+0x38>)
 80105a8:	2200      	movs	r2, #0
 80105aa:	601a      	str	r2, [r3, #0]
	  {
 80105ac:	e7e8      	b.n	8010580 <BLE_App_Delay_DataThroughput+0x8>
 80105ae:	bf00      	nop
 80105b0:	20006fa0 	.word	0x20006fa0

080105b4 <DTS_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t DTS_Event_Handler( void *Event )
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b090      	sub	sp, #64	; 0x40
 80105b8:	af02      	add	r7, sp, #8
 80105ba:	6078      	str	r0, [r7, #4]
  aci_att_exchange_mtu_resp_event_rp0 * exchange_mtu_resp;
  aci_gatt_write_permit_req_event_rp0 * write_permit_req ;

  DTS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 80105bc:	2300      	movs	r3, #0
 80105be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  event_pckt = (hci_event_pckt *) (((hci_uart_pckt*) Event)->data);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	3301      	adds	r3, #1
 80105c6:	633b      	str	r3, [r7, #48]	; 0x30

  switch (event_pckt->evt)
 80105c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ca:	781b      	ldrb	r3, [r3, #0]
 80105cc:	2bff      	cmp	r3, #255	; 0xff
 80105ce:	d000      	beq.n	80105d2 <DTS_Event_Handler+0x1e>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 80105d0:	e0b5      	b.n	801073e <DTS_Event_Handler+0x18a>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 80105d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d4:	3302      	adds	r3, #2
 80105d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      switch (blue_evt->ecode)
 80105d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105da:	881b      	ldrh	r3, [r3, #0]
 80105dc:	b29b      	uxth	r3, r3
 80105de:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 80105e2:	2b15      	cmp	r3, #21
 80105e4:	f200 80a7 	bhi.w	8010736 <DTS_Event_Handler+0x182>
 80105e8:	a201      	add	r2, pc, #4	; (adr r2, 80105f0 <DTS_Event_Handler+0x3c>)
 80105ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105ee:	bf00      	nop
 80105f0:	0801065b 	.word	0x0801065b
 80105f4:	08010737 	.word	0x08010737
 80105f8:	08010649 	.word	0x08010649
 80105fc:	08010737 	.word	0x08010737
 8010600:	08010737 	.word	0x08010737
 8010604:	08010737 	.word	0x08010737
 8010608:	08010737 	.word	0x08010737
 801060c:	08010737 	.word	0x08010737
 8010610:	08010737 	.word	0x08010737
 8010614:	08010737 	.word	0x08010737
 8010618:	08010737 	.word	0x08010737
 801061c:	08010737 	.word	0x08010737
 8010620:	08010737 	.word	0x08010737
 8010624:	08010737 	.word	0x08010737
 8010628:	08010737 	.word	0x08010737
 801062c:	08010737 	.word	0x08010737
 8010630:	08010737 	.word	0x08010737
 8010634:	08010737 	.word	0x08010737
 8010638:	0801070f 	.word	0x0801070f
 801063c:	08010737 	.word	0x08010737
 8010640:	08010737 	.word	0x08010737
 8010644:	08010709 	.word	0x08010709
          exchange_mtu_resp = (aci_att_exchange_mtu_resp_event_rp0 *)blue_evt->data;
 8010648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064a:	3302      	adds	r3, #2
 801064c:	627b      	str	r3, [r7, #36]	; 0x24
          Att_Mtu_Exchanged = exchange_mtu_resp->Server_RX_MTU;
 801064e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010650:	885b      	ldrh	r3, [r3, #2]
 8010652:	b29a      	uxth	r2, r3
 8010654:	4b3d      	ldr	r3, [pc, #244]	; (801074c <DTS_Event_Handler+0x198>)
 8010656:	801a      	strh	r2, [r3, #0]
          break;
 8010658:	e070      	b.n	801073c <DTS_Event_Handler+0x188>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*) blue_evt->data;
 801065a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065c:	3302      	adds	r3, #2
 801065e:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (aDataTransferContext.DataTransferTxCharHdle + 2))
 8010660:	6a3b      	ldr	r3, [r7, #32]
 8010662:	885b      	ldrh	r3, [r3, #2]
 8010664:	b29b      	uxth	r3, r3
 8010666:	461a      	mov	r2, r3
 8010668:	4b39      	ldr	r3, [pc, #228]	; (8010750 <DTS_Event_Handler+0x19c>)
 801066a:	885b      	ldrh	r3, [r3, #2]
 801066c:	3302      	adds	r3, #2
 801066e:	429a      	cmp	r2, r3
 8010670:	d114      	bne.n	801069c <DTS_Event_Handler+0xe8>
            if (attribute_modified->Attr_Data[0] & DTS_STM_NOTIFICATION_MASK)
 8010672:	6a3b      	ldr	r3, [r7, #32]
 8010674:	7a1b      	ldrb	r3, [r3, #8]
 8010676:	f003 0301 	and.w	r3, r3, #1
 801067a:	2b00      	cmp	r3, #0
 801067c:	d007      	beq.n	801068e <DTS_Event_Handler+0xda>
              Notification.Evt_Opcode = DTS_STM__NOTIFICATION_ENABLED;
 801067e:	2300      	movs	r3, #0
 8010680:	737b      	strb	r3, [r7, #13]
              DTS_Notification(&Notification);
 8010682:	f107 030c 	add.w	r3, r7, #12
 8010686:	4618      	mov	r0, r3
 8010688:	f7ff feba 	bl	8010400 <DTS_Notification>
 801068c:	e006      	b.n	801069c <DTS_Event_Handler+0xe8>
              Notification.Evt_Opcode = DTS_STM_NOTIFICATION_DISABLED;
 801068e:	2301      	movs	r3, #1
 8010690:	737b      	strb	r3, [r7, #13]
              DTS_Notification(&Notification);
 8010692:	f107 030c 	add.w	r3, r7, #12
 8010696:	4618      	mov	r0, r3
 8010698:	f7ff feb2 	bl	8010400 <DTS_Notification>
          if (attribute_modified->Attr_Handle == (aDataTransferContext.DataTransferTxChar3Hdle + 5))
 801069c:	6a3b      	ldr	r3, [r7, #32]
 801069e:	885b      	ldrh	r3, [r3, #2]
 80106a0:	b29b      	uxth	r3, r3
 80106a2:	461a      	mov	r2, r3
 80106a4:	4b2a      	ldr	r3, [pc, #168]	; (8010750 <DTS_Event_Handler+0x19c>)
 80106a6:	88db      	ldrh	r3, [r3, #6]
 80106a8:	3305      	adds	r3, #5
 80106aa:	429a      	cmp	r2, r3
 80106ac:	d114      	bne.n	80106d8 <DTS_Event_Handler+0x124>
            if (attribute_modified->Attr_Data[0] & DTS_STM_NOTIFICATION_MASK)
 80106ae:	6a3b      	ldr	r3, [r7, #32]
 80106b0:	7a1b      	ldrb	r3, [r3, #8]
 80106b2:	f003 0301 	and.w	r3, r3, #1
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d007      	beq.n	80106ca <DTS_Event_Handler+0x116>
              Notification.Evt_Opcode = DTC_NOTIFICATION_ENABLED;
 80106ba:	2303      	movs	r3, #3
 80106bc:	737b      	strb	r3, [r7, #13]
              DTS_Notification(&Notification);
 80106be:	f107 030c 	add.w	r3, r7, #12
 80106c2:	4618      	mov	r0, r3
 80106c4:	f7ff fe9c 	bl	8010400 <DTS_Notification>
 80106c8:	e006      	b.n	80106d8 <DTS_Event_Handler+0x124>
              Notification.Evt_Opcode = DTC_NOTIFICATION_DISABLED;
 80106ca:	2304      	movs	r3, #4
 80106cc:	737b      	strb	r3, [r7, #13]
              DTS_Notification(&Notification);
 80106ce:	f107 030c 	add.w	r3, r7, #12
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7ff fe94 	bl	8010400 <DTS_Notification>
          if(attribute_modified->Attr_Handle == (aDataTransferContext.DataTransferRxCharHdle + 1))
 80106d8:	6a3b      	ldr	r3, [r7, #32]
 80106da:	885b      	ldrh	r3, [r3, #2]
 80106dc:	b29b      	uxth	r3, r3
 80106de:	461a      	mov	r2, r3
 80106e0:	4b1b      	ldr	r3, [pc, #108]	; (8010750 <DTS_Event_Handler+0x19c>)
 80106e2:	889b      	ldrh	r3, [r3, #4]
 80106e4:	3301      	adds	r3, #1
 80106e6:	429a      	cmp	r2, r3
 80106e8:	d127      	bne.n	801073a <DTS_Event_Handler+0x186>
            return_value = SVCCTL_EvtAckFlowEnable;
 80106ea:	2301      	movs	r3, #1
 80106ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            Notification.Evt_Opcode = DTS_STM_DATA_RECEIVED;
 80106f0:	2305      	movs	r3, #5
 80106f2:	737b      	strb	r3, [r7, #13]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 80106f4:	6a3b      	ldr	r3, [r7, #32]
 80106f6:	88db      	ldrh	r3, [r3, #6]
 80106f8:	b29b      	uxth	r3, r3
 80106fa:	61fb      	str	r3, [r7, #28]
            DTS_Notification(&Notification); 
 80106fc:	f107 030c 	add.w	r3, r7, #12
 8010700:	4618      	mov	r0, r3
 8010702:	f7ff fe7d 	bl	8010400 <DTS_Notification>
          break;
 8010706:	e018      	b.n	801073a <DTS_Event_Handler+0x186>
          Resume_Notification();
 8010708:	f7ff ff2a 	bl	8010560 <Resume_Notification>
          break; 
 801070c:	e016      	b.n	801073c <DTS_Event_Handler+0x188>
        write_permit_req = (aci_gatt_write_permit_req_event_rp0 *) blue_evt->data;
 801070e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010710:	3302      	adds	r3, #2
 8010712:	62bb      	str	r3, [r7, #40]	; 0x28
        aci_gatt_write_resp( write_permit_req->Connection_Handle, write_permit_req->Attribute_Handle, 0, 0, write_permit_req->Data_Length, write_permit_req->Data);        
 8010714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010716:	881b      	ldrh	r3, [r3, #0]
 8010718:	b298      	uxth	r0, r3
 801071a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801071c:	885b      	ldrh	r3, [r3, #2]
 801071e:	b299      	uxth	r1, r3
 8010720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010722:	791b      	ldrb	r3, [r3, #4]
 8010724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010726:	3205      	adds	r2, #5
 8010728:	9201      	str	r2, [sp, #4]
 801072a:	9300      	str	r3, [sp, #0]
 801072c:	2300      	movs	r3, #0
 801072e:	2200      	movs	r2, #0
 8010730:	f7f7 ffef 	bl	8008712 <aci_gatt_write_resp>
        break;
 8010734:	e002      	b.n	801073c <DTS_Event_Handler+0x188>
          break;
 8010736:	bf00      	nop
 8010738:	e000      	b.n	801073c <DTS_Event_Handler+0x188>
          break;
 801073a:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 801073c:	bf00      	nop
  }

  return (return_value);
 801073e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}/* end SVCCTL_EvtAckStatus_t */
 8010742:	4618      	mov	r0, r3
 8010744:	3738      	adds	r7, #56	; 0x38
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	20006f90 	.word	0x20006f90
 8010750:	20006be4 	.word	0x20006be4

08010754 <TX_Update_Char>:
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * @param  pFeatureValue: The address of the new value to be written
 * @retval None
 */
static tBleStatus TX_Update_Char( DTS_STM_Payload_t *pDataValue )
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b086      	sub	sp, #24
 8010758:	af02      	add	r7, sp, #8
 801075a:	6078      	str	r0, [r7, #4]
  tBleStatus ret;

  /**
   *  Notification Data Transfer Packet
   */
  ret = aci_gatt_update_char_value(
 801075c:	4b0a      	ldr	r3, [pc, #40]	; (8010788 <TX_Update_Char+0x34>)
 801075e:	8818      	ldrh	r0, [r3, #0]
 8010760:	4b09      	ldr	r3, [pc, #36]	; (8010788 <TX_Update_Char+0x34>)
 8010762:	8859      	ldrh	r1, [r3, #2]
                                   aDataTransferContext.DataTransferSvcHdle,
                                   aDataTransferContext.DataTransferTxCharHdle,
                                   0, /* charValOffset */
                                   pDataValue->Length, /* charValueLen */
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	68db      	ldr	r3, [r3, #12]
  ret = aci_gatt_update_char_value(
 8010768:	b2da      	uxtb	r2, r3
                                   (uint8_t *) pDataValue->pPayload);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
  ret = aci_gatt_update_char_value(
 801076e:	9300      	str	r3, [sp, #0]
 8010770:	4613      	mov	r3, r2
 8010772:	2200      	movs	r2, #0
 8010774:	f7f7 fd4f 	bl	8008216 <aci_gatt_update_char_value>
 8010778:	4603      	mov	r3, r0
 801077a:	73fb      	strb	r3, [r7, #15]

  return ret;
 801077c:	7bfb      	ldrb	r3, [r7, #15]
}/* end TX_Update_Char() */
 801077e:	4618      	mov	r0, r3
 8010780:	3710      	adds	r7, #16
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}
 8010786:	bf00      	nop
 8010788:	20006be4 	.word	0x20006be4

0801078c <DTS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DTS_STM_Init( void )
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b088      	sub	sp, #32
 8010790:	af06      	add	r7, sp, #24
  tBleStatus hciCmdResult = BLE_STATUS_FAILED;
 8010792:	2341      	movs	r3, #65	; 0x41
 8010794:	71fb      	strb	r3, [r7, #7]

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(DTS_Event_Handler);
 8010796:	4828      	ldr	r0, [pc, #160]	; (8010838 <DTS_STM_Init+0xac>)
 8010798:	f7f8 fc98 	bl	80090cc <SVCCTL_RegisterSvcHandler>

  /* DT service and characteristics */
  hciCmdResult = aci_gatt_add_service(DT_UUID_LENGTH, (Service_UUID_t *) DT_REQ_SERV_UUID,
 801079c:	4b27      	ldr	r3, [pc, #156]	; (801083c <DTS_STM_Init+0xb0>)
 801079e:	9300      	str	r3, [sp, #0]
 80107a0:	230a      	movs	r3, #10
 80107a2:	2201      	movs	r2, #1
 80107a4:	4926      	ldr	r1, [pc, #152]	; (8010840 <DTS_STM_Init+0xb4>)
 80107a6:	2002      	movs	r0, #2
 80107a8:	f7f7 fb9c 	bl	8007ee4 <aci_gatt_add_service>
 80107ac:	4603      	mov	r3, r0
 80107ae:	71fb      	strb	r3, [r7, #7]
  }

  /**
   *  Add Data Transfer TX Characteristic
   */
  hciCmdResult = aci_gatt_add_char(aDataTransferContext.DataTransferSvcHdle,
 80107b0:	4b22      	ldr	r3, [pc, #136]	; (801083c <DTS_STM_Init+0xb0>)
 80107b2:	8818      	ldrh	r0, [r3, #0]
 80107b4:	4b23      	ldr	r3, [pc, #140]	; (8010844 <DTS_STM_Init+0xb8>)
 80107b6:	9305      	str	r3, [sp, #20]
 80107b8:	2301      	movs	r3, #1
 80107ba:	9304      	str	r3, [sp, #16]
 80107bc:	230a      	movs	r3, #10
 80107be:	9303      	str	r3, [sp, #12]
 80107c0:	2300      	movs	r3, #0
 80107c2:	9302      	str	r3, [sp, #8]
 80107c4:	2300      	movs	r3, #0
 80107c6:	9301      	str	r3, [sp, #4]
 80107c8:	2310      	movs	r3, #16
 80107ca:	9300      	str	r3, [sp, #0]
 80107cc:	23ff      	movs	r3, #255	; 0xff
 80107ce:	4a1e      	ldr	r2, [pc, #120]	; (8010848 <DTS_STM_Init+0xbc>)
 80107d0:	2102      	movs	r1, #2
 80107d2:	f7f7 fc36 	bl	8008042 <aci_gatt_add_char>
 80107d6:	4603      	mov	r3, r0
 80107d8:	71fb      	strb	r3, [r7, #7]
  }

  /**
   *  Add Data Transfer RX Characteristic
   */
  hciCmdResult = aci_gatt_add_char(aDataTransferContext.DataTransferSvcHdle,
 80107da:	4b18      	ldr	r3, [pc, #96]	; (801083c <DTS_STM_Init+0xb0>)
 80107dc:	8818      	ldrh	r0, [r3, #0]
 80107de:	4b1b      	ldr	r3, [pc, #108]	; (801084c <DTS_STM_Init+0xc0>)
 80107e0:	9305      	str	r3, [sp, #20]
 80107e2:	2301      	movs	r3, #1
 80107e4:	9304      	str	r3, [sp, #16]
 80107e6:	230a      	movs	r3, #10
 80107e8:	9303      	str	r3, [sp, #12]
 80107ea:	2301      	movs	r3, #1
 80107ec:	9302      	str	r3, [sp, #8]
 80107ee:	2300      	movs	r3, #0
 80107f0:	9301      	str	r3, [sp, #4]
 80107f2:	2304      	movs	r3, #4
 80107f4:	9300      	str	r3, [sp, #0]
 80107f6:	23ff      	movs	r3, #255	; 0xff
 80107f8:	4a15      	ldr	r2, [pc, #84]	; (8010850 <DTS_STM_Init+0xc4>)
 80107fa:	2102      	movs	r1, #2
 80107fc:	f7f7 fc21 	bl	8008042 <aci_gatt_add_char>
 8010800:	4603      	mov	r3, r0
 8010802:	71fb      	strb	r3, [r7, #7]
  }
  
  /**
   *  Add Data Transfer TX Characteristic
   */
  hciCmdResult = aci_gatt_add_char(aDataTransferContext.DataTransferSvcHdle,
 8010804:	4b0d      	ldr	r3, [pc, #52]	; (801083c <DTS_STM_Init+0xb0>)
 8010806:	8818      	ldrh	r0, [r3, #0]
 8010808:	4b12      	ldr	r3, [pc, #72]	; (8010854 <DTS_STM_Init+0xc8>)
 801080a:	9305      	str	r3, [sp, #20]
 801080c:	2301      	movs	r3, #1
 801080e:	9304      	str	r3, [sp, #16]
 8010810:	230a      	movs	r3, #10
 8010812:	9303      	str	r3, [sp, #12]
 8010814:	2300      	movs	r3, #0
 8010816:	9302      	str	r3, [sp, #8]
 8010818:	2300      	movs	r3, #0
 801081a:	9301      	str	r3, [sp, #4]
 801081c:	2310      	movs	r3, #16
 801081e:	9300      	str	r3, [sp, #0]
 8010820:	23ff      	movs	r3, #255	; 0xff
 8010822:	4a0d      	ldr	r2, [pc, #52]	; (8010858 <DTS_STM_Init+0xcc>)
 8010824:	2102      	movs	r1, #2
 8010826:	f7f7 fc0c 	bl	8008042 <aci_gatt_add_char>
 801082a:	4603      	mov	r3, r0
 801082c:	71fb      	strb	r3, [r7, #7]
  if (hciCmdResult != 0)
  {
    APP_DBG_MSG("error add char Tx\n");
  }
  
  return;
 801082e:	bf00      	nop
}
 8010830:	3708      	adds	r7, #8
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}
 8010836:	bf00      	nop
 8010838:	080105b5 	.word	0x080105b5
 801083c:	20006be4 	.word	0x20006be4
 8010840:	08012d84 	.word	0x08012d84
 8010844:	20006be6 	.word	0x20006be6
 8010848:	08012d54 	.word	0x08012d54
 801084c:	20006be8 	.word	0x20006be8
 8010850:	08012d64 	.word	0x08012d64
 8010854:	20006bea 	.word	0x20006bea
 8010858:	08012d74 	.word	0x08012d74

0801085c <DTS_STM_UpdateChar>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus DTS_STM_UpdateChar( uint16_t UUID , uint8_t *pPayload )
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b084      	sub	sp, #16
 8010860:	af00      	add	r7, sp, #0
 8010862:	4603      	mov	r3, r0
 8010864:	6039      	str	r1, [r7, #0]
 8010866:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8010868:	2342      	movs	r3, #66	; 0x42
 801086a:	73fb      	strb	r3, [r7, #15]
  switch (UUID)
 801086c:	88fb      	ldrh	r3, [r7, #6]
 801086e:	f64f 6281 	movw	r2, #65153	; 0xfe81
 8010872:	4293      	cmp	r3, r2
 8010874:	d000      	beq.n	8010878 <DTS_STM_UpdateChar+0x1c>
    case DATA_TRANSFER_TX_CHAR_UUID:
      result = TX_Update_Char((DTS_STM_Payload_t*) pPayload);
      break;

    default:
      break;
 8010876:	e005      	b.n	8010884 <DTS_STM_UpdateChar+0x28>
      result = TX_Update_Char((DTS_STM_Payload_t*) pPayload);
 8010878:	6838      	ldr	r0, [r7, #0]
 801087a:	f7ff ff6b 	bl	8010754 <TX_Update_Char>
 801087e:	4603      	mov	r3, r0
 8010880:	73fb      	strb	r3, [r7, #15]
      break;
 8010882:	bf00      	nop
  }
  return result;
 8010884:	7bfb      	ldrb	r3, [r7, #15]
}/* end DTS_STM_UpdateChar() */
 8010886:	4618      	mov	r0, r3
 8010888:	3710      	adds	r7, #16
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}
	...

08010890 <DTS_STM_UpdateCharThroughput>:

tBleStatus DTS_STM_UpdateCharThroughput(DTS_STM_Payload_t *pDataValue )
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b086      	sub	sp, #24
 8010894:	af02      	add	r7, sp, #8
 8010896:	6078      	str	r0, [r7, #4]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8010898:	2342      	movs	r3, #66	; 0x42
 801089a:	73fb      	strb	r3, [r7, #15]
  /**
   *  Notification Data Transfer Packet
   */
  result = aci_gatt_update_char_value(
 801089c:	4b0a      	ldr	r3, [pc, #40]	; (80108c8 <DTS_STM_UpdateCharThroughput+0x38>)
 801089e:	8818      	ldrh	r0, [r3, #0]
 80108a0:	4b09      	ldr	r3, [pc, #36]	; (80108c8 <DTS_STM_UpdateCharThroughput+0x38>)
 80108a2:	88d9      	ldrh	r1, [r3, #6]
                                   aDataTransferContext.DataTransferSvcHdle,
                                   aDataTransferContext.DataTransferTxChar3Hdle,
                                   0, /* charValOffset */
                                   pDataValue->Length, /* charValueLen */
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	68db      	ldr	r3, [r3, #12]
  result = aci_gatt_update_char_value(
 80108a8:	b2da      	uxtb	r2, r3
                                   (uint8_t *) pDataValue->pPayload);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
  result = aci_gatt_update_char_value(
 80108ae:	9300      	str	r3, [sp, #0]
 80108b0:	4613      	mov	r3, r2
 80108b2:	2200      	movs	r2, #0
 80108b4:	f7f7 fcaf 	bl	8008216 <aci_gatt_update_char_value>
 80108b8:	4603      	mov	r3, r0
 80108ba:	73fb      	strb	r3, [r7, #15]
  return result;
 80108bc:	7bfb      	ldrb	r3, [r7, #15]
}/* end DTS_STM_UpdateChar() */
 80108be:	4618      	mov	r0, r3
 80108c0:	3710      	adds	r7, #16
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	20006be4 	.word	0x20006be4

080108cc <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 80108cc:	b480      	push	{r7}
 80108ce:	b083      	sub	sp, #12
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	2b01      	cmp	r3, #1
 80108da:	d008      	beq.n	80108ee <P2PS_STM_App_Notification+0x22>
 80108dc:	2b03      	cmp	r3, #3
 80108de:	d00a      	beq.n	80108f6 <P2PS_STM_App_Notification+0x2a>
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d000      	beq.n	80108e6 <P2PS_STM_App_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 80108e4:	e01f      	b.n	8010926 <P2PS_STM_App_Notification+0x5a>
      P2P_Server_App_Context.Notification_Status = 1;
 80108e6:	4b13      	ldr	r3, [pc, #76]	; (8010934 <P2PS_STM_App_Notification+0x68>)
 80108e8:	2201      	movs	r2, #1
 80108ea:	701a      	strb	r2, [r3, #0]
      break;
 80108ec:	e01b      	b.n	8010926 <P2PS_STM_App_Notification+0x5a>
      P2P_Server_App_Context.Notification_Status = 0;
 80108ee:	4b11      	ldr	r3, [pc, #68]	; (8010934 <P2PS_STM_App_Notification+0x68>)
 80108f0:	2200      	movs	r2, #0
 80108f2:	701a      	strb	r2, [r3, #0]
      break;
 80108f4:	e017      	b.n	8010926 <P2PS_STM_App_Notification+0x5a>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	685b      	ldr	r3, [r3, #4]
 80108fa:	781b      	ldrb	r3, [r3, #0]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d111      	bne.n	8010924 <P2PS_STM_App_Notification+0x58>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	3301      	adds	r3, #1
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	2b01      	cmp	r3, #1
 801090a:	d102      	bne.n	8010912 <P2PS_STM_App_Notification+0x46>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 801090c:	4b09      	ldr	r3, [pc, #36]	; (8010934 <P2PS_STM_App_Notification+0x68>)
 801090e:	2201      	movs	r2, #1
 8010910:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	3301      	adds	r3, #1
 8010918:	781b      	ldrb	r3, [r3, #0]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d102      	bne.n	8010924 <P2PS_STM_App_Notification+0x58>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 801091e:	4b05      	ldr	r3, [pc, #20]	; (8010934 <P2PS_STM_App_Notification+0x68>)
 8010920:	2200      	movs	r2, #0
 8010922:	709a      	strb	r2, [r3, #2]
      break;
 8010924:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8010926:	bf00      	nop
}
 8010928:	370c      	adds	r7, #12
 801092a:	46bd      	mov	sp, r7
 801092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010930:	4770      	bx	lr
 8010932:	bf00      	nop
 8010934:	20000224 	.word	0x20000224

08010938 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b082      	sub	sp, #8
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	781b      	ldrb	r3, [r3, #0]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d005      	beq.n	8010954 <P2PS_APP_Notification+0x1c>
 8010948:	2b01      	cmp	r3, #1
 801094a:	d000      	beq.n	801094e <P2PS_APP_Notification+0x16>
    
    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 801094c:	e003      	b.n	8010956 <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 801094e:	f000 f806 	bl	801095e <P2PS_APP_LED_BUTTON_context_Init>
    break;
 8010952:	e000      	b.n	8010956 <P2PS_APP_Notification+0x1e>
    break;
 8010954:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8010956:	bf00      	nop
}
 8010958:	3708      	adds	r7, #8
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}

0801095e <P2PS_APP_LED_BUTTON_context_Init>:
/* USER CODE END P2PS_APP_Init */
  return;
}

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 801095e:	b480      	push	{r7}
 8010960:	af00      	add	r7, sp, #0
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 8010962:	bf00      	nop
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr

0801096c <LL_PWR_EnableBootC2>:
{
 801096c:	b480      	push	{r7}
 801096e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8010970:	4b05      	ldr	r3, [pc, #20]	; (8010988 <LL_PWR_EnableBootC2+0x1c>)
 8010972:	68db      	ldr	r3, [r3, #12]
 8010974:	4a04      	ldr	r2, [pc, #16]	; (8010988 <LL_PWR_EnableBootC2+0x1c>)
 8010976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801097a:	60d3      	str	r3, [r2, #12]
}
 801097c:	bf00      	nop
 801097e:	46bd      	mov	sp, r7
 8010980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010984:	4770      	bx	lr
 8010986:	bf00      	nop
 8010988:	58000400 	.word	0x58000400

0801098c <LL_C2_EXTI_EnableEvent_32_63>:
{
 801098c:	b480      	push	{r7}
 801098e:	b083      	sub	sp, #12
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8010994:	4b06      	ldr	r3, [pc, #24]	; (80109b0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8010996:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 801099a:	4905      	ldr	r1, [pc, #20]	; (80109b0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	4313      	orrs	r3, r2
 80109a0:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80109a4:	bf00      	nop
 80109a6:	370c      	adds	r7, #12
 80109a8:	46bd      	mov	sp, r7
 80109aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ae:	4770      	bx	lr
 80109b0:	58000800 	.word	0x58000800

080109b4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80109b4:	b480      	push	{r7}
 80109b6:	b083      	sub	sp, #12
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80109bc:	4b05      	ldr	r3, [pc, #20]	; (80109d4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80109be:	6a1a      	ldr	r2, [r3, #32]
 80109c0:	4904      	ldr	r1, [pc, #16]	; (80109d4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	4313      	orrs	r3, r2
 80109c6:	620b      	str	r3, [r1, #32]
}
 80109c8:	bf00      	nop
 80109ca:	370c      	adds	r7, #12
 80109cc:	46bd      	mov	sp, r7
 80109ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d2:	4770      	bx	lr
 80109d4:	58000800 	.word	0x58000800

080109d8 <LL_AHB3_GRP1_EnableClock>:
{
 80109d8:	b480      	push	{r7}
 80109da:	b085      	sub	sp, #20
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80109e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80109e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80109e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	4313      	orrs	r3, r2
 80109ee:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80109f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80109f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	4013      	ands	r3, r2
 80109fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80109fc:	68fb      	ldr	r3, [r7, #12]
}
 80109fe:	bf00      	nop
 8010a00:	3714      	adds	r7, #20
 8010a02:	46bd      	mov	sp, r7
 8010a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a08:	4770      	bx	lr

08010a0a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8010a0a:	b480      	push	{r7}
 8010a0c:	b085      	sub	sp, #20
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8010a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010a16:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8010a1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	4313      	orrs	r3, r2
 8010a22:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8010a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010a2a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	4013      	ands	r3, r2
 8010a32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010a34:	68fb      	ldr	r3, [r7, #12]
}
 8010a36:	bf00      	nop
 8010a38:	3714      	adds	r7, #20
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a40:	4770      	bx	lr

08010a42 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8010a42:	b480      	push	{r7}
 8010a44:	b083      	sub	sp, #12
 8010a46:	af00      	add	r7, sp, #0
 8010a48:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	601a      	str	r2, [r3, #0]
}
 8010a56:	bf00      	nop
 8010a58:	370c      	adds	r7, #12
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a60:	4770      	bx	lr

08010a62 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8010a62:	b480      	push	{r7}
 8010a64:	b083      	sub	sp, #12
 8010a66:	af00      	add	r7, sp, #0
 8010a68:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	f043 0201 	orr.w	r2, r3, #1
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	601a      	str	r2, [r3, #0]
}
 8010a76:	bf00      	nop
 8010a78:	370c      	adds	r7, #12
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a80:	4770      	bx	lr

08010a82 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010a82:	b480      	push	{r7}
 8010a84:	b083      	sub	sp, #12
 8010a86:	af00      	add	r7, sp, #0
 8010a88:	6078      	str	r0, [r7, #4]
 8010a8a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	685a      	ldr	r2, [r3, #4]
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	041b      	lsls	r3, r3, #16
 8010a94:	43db      	mvns	r3, r3
 8010a96:	401a      	ands	r2, r3
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	605a      	str	r2, [r3, #4]
}
 8010a9c:	bf00      	nop
 8010a9e:	370c      	adds	r7, #12
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa6:	4770      	bx	lr

08010aa8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010aa8:	b480      	push	{r7}
 8010aaa:	b083      	sub	sp, #12
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
 8010ab0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	685a      	ldr	r2, [r3, #4]
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	041b      	lsls	r3, r3, #16
 8010aba:	431a      	orrs	r2, r3
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	605a      	str	r2, [r3, #4]
}
 8010ac0:	bf00      	nop
 8010ac2:	370c      	adds	r7, #12
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aca:	4770      	bx	lr

08010acc <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010acc:	b480      	push	{r7}
 8010ace:	b083      	sub	sp, #12
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
 8010ad4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	685a      	ldr	r2, [r3, #4]
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	43db      	mvns	r3, r3
 8010ade:	401a      	ands	r2, r3
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	605a      	str	r2, [r3, #4]
}
 8010ae4:	bf00      	nop
 8010ae6:	370c      	adds	r7, #12
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aee:	4770      	bx	lr

08010af0 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010af0:	b480      	push	{r7}
 8010af2:	b083      	sub	sp, #12
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	685a      	ldr	r2, [r3, #4]
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	431a      	orrs	r2, r3
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	605a      	str	r2, [r3, #4]
}
 8010b06:	bf00      	nop
 8010b08:	370c      	adds	r7, #12
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b10:	4770      	bx	lr

08010b12 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010b12:	b480      	push	{r7}
 8010b14:	b083      	sub	sp, #12
 8010b16:	af00      	add	r7, sp, #0
 8010b18:	6078      	str	r0, [r7, #4]
 8010b1a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	683a      	ldr	r2, [r7, #0]
 8010b20:	609a      	str	r2, [r3, #8]
}
 8010b22:	bf00      	nop
 8010b24:	370c      	adds	r7, #12
 8010b26:	46bd      	mov	sp, r7
 8010b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2c:	4770      	bx	lr

08010b2e <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010b2e:	b480      	push	{r7}
 8010b30:	b083      	sub	sp, #12
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	6078      	str	r0, [r7, #4]
 8010b36:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	041a      	lsls	r2, r3, #16
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	609a      	str	r2, [r3, #8]
}
 8010b40:	bf00      	nop
 8010b42:	370c      	adds	r7, #12
 8010b44:	46bd      	mov	sp, r7
 8010b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4a:	4770      	bx	lr

08010b4c <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b083      	sub	sp, #12
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
 8010b54:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	68da      	ldr	r2, [r3, #12]
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	4013      	ands	r3, r2
 8010b5e:	683a      	ldr	r2, [r7, #0]
 8010b60:	429a      	cmp	r2, r3
 8010b62:	d101      	bne.n	8010b68 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8010b64:	2301      	movs	r3, #1
 8010b66:	e000      	b.n	8010b6a <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8010b68:	2300      	movs	r3, #0
}
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	370c      	adds	r7, #12
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b74:	4770      	bx	lr

08010b76 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8010b76:	b480      	push	{r7}
 8010b78:	b083      	sub	sp, #12
 8010b7a:	af00      	add	r7, sp, #0
 8010b7c:	6078      	str	r0, [r7, #4]
 8010b7e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	69da      	ldr	r2, [r3, #28]
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	4013      	ands	r3, r2
 8010b88:	683a      	ldr	r2, [r7, #0]
 8010b8a:	429a      	cmp	r2, r3
 8010b8c:	d101      	bne.n	8010b92 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8010b8e:	2301      	movs	r3, #1
 8010b90:	e000      	b.n	8010b94 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8010b92:	2300      	movs	r3, #0
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	370c      	adds	r7, #12
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9e:	4770      	bx	lr

08010ba0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8010ba4:	2102      	movs	r1, #2
 8010ba6:	482a      	ldr	r0, [pc, #168]	; (8010c50 <HW_IPCC_Rx_Handler+0xb0>)
 8010ba8:	f7ff ffe5 	bl	8010b76 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010bac:	4603      	mov	r3, r0
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d009      	beq.n	8010bc6 <HW_IPCC_Rx_Handler+0x26>
 8010bb2:	4b27      	ldr	r3, [pc, #156]	; (8010c50 <HW_IPCC_Rx_Handler+0xb0>)
 8010bb4:	685b      	ldr	r3, [r3, #4]
 8010bb6:	43db      	mvns	r3, r3
 8010bb8:	f003 0302 	and.w	r3, r3, #2
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d002      	beq.n	8010bc6 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8010bc0:	f000 f91e 	bl	8010e00 <HW_IPCC_SYS_EvtHandler>
 8010bc4:	e041      	b.n	8010c4a <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8010bc6:	2104      	movs	r1, #4
 8010bc8:	4821      	ldr	r0, [pc, #132]	; (8010c50 <HW_IPCC_Rx_Handler+0xb0>)
 8010bca:	f7ff ffd4 	bl	8010b76 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010bce:	4603      	mov	r3, r0
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d009      	beq.n	8010be8 <HW_IPCC_Rx_Handler+0x48>
 8010bd4:	4b1e      	ldr	r3, [pc, #120]	; (8010c50 <HW_IPCC_Rx_Handler+0xb0>)
 8010bd6:	685b      	ldr	r3, [r3, #4]
 8010bd8:	43db      	mvns	r3, r3
 8010bda:	f003 0304 	and.w	r3, r3, #4
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d002      	beq.n	8010be8 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8010be2:	f000 f967 	bl	8010eb4 <HW_IPCC_THREAD_NotEvtHandler>
 8010be6:	e030      	b.n	8010c4a <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8010be8:	2110      	movs	r1, #16
 8010bea:	4819      	ldr	r0, [pc, #100]	; (8010c50 <HW_IPCC_Rx_Handler+0xb0>)
 8010bec:	f7ff ffc3 	bl	8010b76 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d009      	beq.n	8010c0a <HW_IPCC_Rx_Handler+0x6a>
 8010bf6:	4b16      	ldr	r3, [pc, #88]	; (8010c50 <HW_IPCC_Rx_Handler+0xb0>)
 8010bf8:	685b      	ldr	r3, [r3, #4]
 8010bfa:	43db      	mvns	r3, r3
 8010bfc:	f003 0310 	and.w	r3, r3, #16
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d002      	beq.n	8010c0a <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8010c04:	f000 f962 	bl	8010ecc <HW_IPCC_THREAD_CliNotEvtHandler>
 8010c08:	e01f      	b.n	8010c4a <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8010c0a:	2101      	movs	r1, #1
 8010c0c:	4810      	ldr	r0, [pc, #64]	; (8010c50 <HW_IPCC_Rx_Handler+0xb0>)
 8010c0e:	f7ff ffb2 	bl	8010b76 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010c12:	4603      	mov	r3, r0
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d008      	beq.n	8010c2a <HW_IPCC_Rx_Handler+0x8a>
 8010c18:	4b0d      	ldr	r3, [pc, #52]	; (8010c50 <HW_IPCC_Rx_Handler+0xb0>)
 8010c1a:	685b      	ldr	r3, [r3, #4]
 8010c1c:	f003 0301 	and.w	r3, r3, #1
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d102      	bne.n	8010c2a <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8010c24:	f000 f8b0 	bl	8010d88 <HW_IPCC_BLE_EvtHandler>
 8010c28:	e00f      	b.n	8010c4a <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8010c2a:	2108      	movs	r1, #8
 8010c2c:	4808      	ldr	r0, [pc, #32]	; (8010c50 <HW_IPCC_Rx_Handler+0xb0>)
 8010c2e:	f7ff ffa2 	bl	8010b76 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010c32:	4603      	mov	r3, r0
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d009      	beq.n	8010c4c <HW_IPCC_Rx_Handler+0xac>
 8010c38:	4b05      	ldr	r3, [pc, #20]	; (8010c50 <HW_IPCC_Rx_Handler+0xb0>)
 8010c3a:	685b      	ldr	r3, [r3, #4]
 8010c3c:	43db      	mvns	r3, r3
 8010c3e:	f003 0308 	and.w	r3, r3, #8
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d002      	beq.n	8010c4c <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8010c46:	f000 f98d 	bl	8010f64 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8010c4a:	bf00      	nop
 8010c4c:	bf00      	nop
}
 8010c4e:	bd80      	pop	{r7, pc}
 8010c50:	58000c00 	.word	0x58000c00

08010c54 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8010c58:	2102      	movs	r1, #2
 8010c5a:	482b      	ldr	r0, [pc, #172]	; (8010d08 <HW_IPCC_Tx_Handler+0xb4>)
 8010c5c:	f7ff ff76 	bl	8010b4c <LL_C1_IPCC_IsActiveFlag_CHx>
 8010c60:	4603      	mov	r3, r0
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d109      	bne.n	8010c7a <HW_IPCC_Tx_Handler+0x26>
 8010c66:	4b28      	ldr	r3, [pc, #160]	; (8010d08 <HW_IPCC_Tx_Handler+0xb4>)
 8010c68:	685b      	ldr	r3, [r3, #4]
 8010c6a:	43db      	mvns	r3, r3
 8010c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d002      	beq.n	8010c7a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8010c74:	f000 f8b8 	bl	8010de8 <HW_IPCC_SYS_CmdEvtHandler>
 8010c78:	e042      	b.n	8010d00 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8010c7a:	2104      	movs	r1, #4
 8010c7c:	4822      	ldr	r0, [pc, #136]	; (8010d08 <HW_IPCC_Tx_Handler+0xb4>)
 8010c7e:	f7ff ff65 	bl	8010b4c <LL_C1_IPCC_IsActiveFlag_CHx>
 8010c82:	4603      	mov	r3, r0
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d109      	bne.n	8010c9c <HW_IPCC_Tx_Handler+0x48>
 8010c88:	4b1f      	ldr	r3, [pc, #124]	; (8010d08 <HW_IPCC_Tx_Handler+0xb4>)
 8010c8a:	685b      	ldr	r3, [r3, #4]
 8010c8c:	43db      	mvns	r3, r3
 8010c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d002      	beq.n	8010c9c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8010c96:	f000 f901 	bl	8010e9c <HW_IPCC_OT_CmdEvtHandler>
 8010c9a:	e031      	b.n	8010d00 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8010c9c:	2102      	movs	r1, #2
 8010c9e:	481a      	ldr	r0, [pc, #104]	; (8010d08 <HW_IPCC_Tx_Handler+0xb4>)
 8010ca0:	f7ff ff54 	bl	8010b4c <LL_C1_IPCC_IsActiveFlag_CHx>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d109      	bne.n	8010cbe <HW_IPCC_Tx_Handler+0x6a>
 8010caa:	4b17      	ldr	r3, [pc, #92]	; (8010d08 <HW_IPCC_Tx_Handler+0xb4>)
 8010cac:	685b      	ldr	r3, [r3, #4]
 8010cae:	43db      	mvns	r3, r3
 8010cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d002      	beq.n	8010cbe <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8010cb8:	f000 f896 	bl	8010de8 <HW_IPCC_SYS_CmdEvtHandler>
 8010cbc:	e020      	b.n	8010d00 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8010cbe:	2108      	movs	r1, #8
 8010cc0:	4811      	ldr	r0, [pc, #68]	; (8010d08 <HW_IPCC_Tx_Handler+0xb4>)
 8010cc2:	f7ff ff43 	bl	8010b4c <LL_C1_IPCC_IsActiveFlag_CHx>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d109      	bne.n	8010ce0 <HW_IPCC_Tx_Handler+0x8c>
 8010ccc:	4b0e      	ldr	r3, [pc, #56]	; (8010d08 <HW_IPCC_Tx_Handler+0xb4>)
 8010cce:	685b      	ldr	r3, [r3, #4]
 8010cd0:	43db      	mvns	r3, r3
 8010cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d002      	beq.n	8010ce0 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 8010cda:	f000 f925 	bl	8010f28 <HW_IPCC_MM_FreeBufHandler>
 8010cde:	e00f      	b.n	8010d00 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8010ce0:	2120      	movs	r1, #32
 8010ce2:	4809      	ldr	r0, [pc, #36]	; (8010d08 <HW_IPCC_Tx_Handler+0xb4>)
 8010ce4:	f7ff ff32 	bl	8010b4c <LL_C1_IPCC_IsActiveFlag_CHx>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d109      	bne.n	8010d02 <HW_IPCC_Tx_Handler+0xae>
 8010cee:	4b06      	ldr	r3, [pc, #24]	; (8010d08 <HW_IPCC_Tx_Handler+0xb4>)
 8010cf0:	685b      	ldr	r3, [r3, #4]
 8010cf2:	43db      	mvns	r3, r3
 8010cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d002      	beq.n	8010d02 <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8010cfc:	f000 f850 	bl	8010da0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8010d00:	bf00      	nop
 8010d02:	bf00      	nop
}
 8010d04:	bd80      	pop	{r7, pc}
 8010d06:	bf00      	nop
 8010d08:	58000c00 	.word	0x58000c00

08010d0c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8010d10:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010d14:	f7ff fe79 	bl	8010a0a <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8010d18:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010d1c:	f7ff fe36 	bl	801098c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8010d20:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010d24:	f7ff fe46 	bl	80109b4 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8010d28:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8010d2a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8010d2c:	f7ff fe1e 	bl	801096c <LL_PWR_EnableBootC2>

  return;
 8010d30:	bf00      	nop
}
 8010d32:	bd80      	pop	{r7, pc}

08010d34 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8010d38:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010d3c:	f7ff fe4c 	bl	80109d8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8010d40:	4806      	ldr	r0, [pc, #24]	; (8010d5c <HW_IPCC_Init+0x28>)
 8010d42:	f7ff fe8e 	bl	8010a62 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8010d46:	4805      	ldr	r0, [pc, #20]	; (8010d5c <HW_IPCC_Init+0x28>)
 8010d48:	f7ff fe7b 	bl	8010a42 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8010d4c:	202c      	movs	r0, #44	; 0x2c
 8010d4e:	f7f2 fa12 	bl	8003176 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8010d52:	202d      	movs	r0, #45	; 0x2d
 8010d54:	f7f2 fa0f 	bl	8003176 <HAL_NVIC_EnableIRQ>

  return;
 8010d58:	bf00      	nop
}
 8010d5a:	bd80      	pop	{r7, pc}
 8010d5c:	58000c00 	.word	0x58000c00

08010d60 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8010d64:	2101      	movs	r1, #1
 8010d66:	4802      	ldr	r0, [pc, #8]	; (8010d70 <HW_IPCC_BLE_Init+0x10>)
 8010d68:	f7ff feb0 	bl	8010acc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010d6c:	bf00      	nop
}
 8010d6e:	bd80      	pop	{r7, pc}
 8010d70:	58000c00 	.word	0x58000c00

08010d74 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8010d78:	2101      	movs	r1, #1
 8010d7a:	4802      	ldr	r0, [pc, #8]	; (8010d84 <HW_IPCC_BLE_SendCmd+0x10>)
 8010d7c:	f7ff fed7 	bl	8010b2e <LL_C1_IPCC_SetFlag_CHx>

  return;
 8010d80:	bf00      	nop
}
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	58000c00 	.word	0x58000c00

08010d88 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8010d8c:	f7f8 fea4 	bl	8009ad8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8010d90:	2101      	movs	r1, #1
 8010d92:	4802      	ldr	r0, [pc, #8]	; (8010d9c <HW_IPCC_BLE_EvtHandler+0x14>)
 8010d94:	f7ff febd 	bl	8010b12 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010d98:	bf00      	nop
}
 8010d9a:	bd80      	pop	{r7, pc}
 8010d9c:	58000c00 	.word	0x58000c00

08010da0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8010da4:	2120      	movs	r1, #32
 8010da6:	4803      	ldr	r0, [pc, #12]	; (8010db4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8010da8:	f7ff fe7e 	bl	8010aa8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8010dac:	f7f8 fec4 	bl	8009b38 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8010db0:	bf00      	nop
}
 8010db2:	bd80      	pop	{r7, pc}
 8010db4:	58000c00 	.word	0x58000c00

08010db8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8010dbc:	2102      	movs	r1, #2
 8010dbe:	4802      	ldr	r0, [pc, #8]	; (8010dc8 <HW_IPCC_SYS_Init+0x10>)
 8010dc0:	f7ff fe84 	bl	8010acc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010dc4:	bf00      	nop
}
 8010dc6:	bd80      	pop	{r7, pc}
 8010dc8:	58000c00 	.word	0x58000c00

08010dcc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010dd0:	2102      	movs	r1, #2
 8010dd2:	4804      	ldr	r0, [pc, #16]	; (8010de4 <HW_IPCC_SYS_SendCmd+0x18>)
 8010dd4:	f7ff feab 	bl	8010b2e <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010dd8:	2102      	movs	r1, #2
 8010dda:	4802      	ldr	r0, [pc, #8]	; (8010de4 <HW_IPCC_SYS_SendCmd+0x18>)
 8010ddc:	f7ff fe51 	bl	8010a82 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8010de0:	bf00      	nop
}
 8010de2:	bd80      	pop	{r7, pc}
 8010de4:	58000c00 	.word	0x58000c00

08010de8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010dec:	2102      	movs	r1, #2
 8010dee:	4803      	ldr	r0, [pc, #12]	; (8010dfc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8010df0:	f7ff fe5a 	bl	8010aa8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8010df4:	f7f8 fef0 	bl	8009bd8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8010df8:	bf00      	nop
}
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	58000c00 	.word	0x58000c00

08010e00 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8010e04:	f7f8 fefe 	bl	8009c04 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8010e08:	2102      	movs	r1, #2
 8010e0a:	4802      	ldr	r0, [pc, #8]	; (8010e14 <HW_IPCC_SYS_EvtHandler+0x14>)
 8010e0c:	f7ff fe81 	bl	8010b12 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010e10:	bf00      	nop
}
 8010e12:	bd80      	pop	{r7, pc}
 8010e14:	58000c00 	.word	0x58000c00

08010e18 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8010e1c:	2104      	movs	r1, #4
 8010e1e:	4804      	ldr	r0, [pc, #16]	; (8010e30 <HW_IPCC_THREAD_Init+0x18>)
 8010e20:	f7ff fe54 	bl	8010acc <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8010e24:	2110      	movs	r1, #16
 8010e26:	4802      	ldr	r0, [pc, #8]	; (8010e30 <HW_IPCC_THREAD_Init+0x18>)
 8010e28:	f7ff fe50 	bl	8010acc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010e2c:	bf00      	nop
}
 8010e2e:	bd80      	pop	{r7, pc}
 8010e30:	58000c00 	.word	0x58000c00

08010e34 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8010e38:	2104      	movs	r1, #4
 8010e3a:	4804      	ldr	r0, [pc, #16]	; (8010e4c <HW_IPCC_OT_SendCmd+0x18>)
 8010e3c:	f7ff fe77 	bl	8010b2e <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8010e40:	2104      	movs	r1, #4
 8010e42:	4802      	ldr	r0, [pc, #8]	; (8010e4c <HW_IPCC_OT_SendCmd+0x18>)
 8010e44:	f7ff fe1d 	bl	8010a82 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8010e48:	bf00      	nop
}
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	58000c00 	.word	0x58000c00

08010e50 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8010e54:	2110      	movs	r1, #16
 8010e56:	4802      	ldr	r0, [pc, #8]	; (8010e60 <HW_IPCC_CLI_SendCmd+0x10>)
 8010e58:	f7ff fe69 	bl	8010b2e <LL_C1_IPCC_SetFlag_CHx>

  return;
 8010e5c:	bf00      	nop
}
 8010e5e:	bd80      	pop	{r7, pc}
 8010e60:	58000c00 	.word	0x58000c00

08010e64 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8010e68:	2104      	movs	r1, #4
 8010e6a:	4804      	ldr	r0, [pc, #16]	; (8010e7c <HW_IPCC_THREAD_SendAck+0x18>)
 8010e6c:	f7ff fe51 	bl	8010b12 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8010e70:	2104      	movs	r1, #4
 8010e72:	4802      	ldr	r0, [pc, #8]	; (8010e7c <HW_IPCC_THREAD_SendAck+0x18>)
 8010e74:	f7ff fe2a 	bl	8010acc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010e78:	bf00      	nop
}
 8010e7a:	bd80      	pop	{r7, pc}
 8010e7c:	58000c00 	.word	0x58000c00

08010e80 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8010e84:	2110      	movs	r1, #16
 8010e86:	4804      	ldr	r0, [pc, #16]	; (8010e98 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8010e88:	f7ff fe43 	bl	8010b12 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8010e8c:	2110      	movs	r1, #16
 8010e8e:	4802      	ldr	r0, [pc, #8]	; (8010e98 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8010e90:	f7ff fe1c 	bl	8010acc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010e94:	bf00      	nop
}
 8010e96:	bd80      	pop	{r7, pc}
 8010e98:	58000c00 	.word	0x58000c00

08010e9c <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8010ea0:	2104      	movs	r1, #4
 8010ea2:	4803      	ldr	r0, [pc, #12]	; (8010eb0 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8010ea4:	f7ff fe00 	bl	8010aa8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8010ea8:	f7f8 ff22 	bl	8009cf0 <HW_IPCC_OT_CmdEvtNot>

  return;
 8010eac:	bf00      	nop
}
 8010eae:	bd80      	pop	{r7, pc}
 8010eb0:	58000c00 	.word	0x58000c00

08010eb4 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8010eb8:	2104      	movs	r1, #4
 8010eba:	4803      	ldr	r0, [pc, #12]	; (8010ec8 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8010ebc:	f7ff fe18 	bl	8010af0 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8010ec0:	f7f8 ff22 	bl	8009d08 <HW_IPCC_THREAD_EvtNot>

  return;
 8010ec4:	bf00      	nop
}
 8010ec6:	bd80      	pop	{r7, pc}
 8010ec8:	58000c00 	.word	0x58000c00

08010ecc <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8010ed0:	2110      	movs	r1, #16
 8010ed2:	4803      	ldr	r0, [pc, #12]	; (8010ee0 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8010ed4:	f7ff fe0c 	bl	8010af0 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8010ed8:	f7f8 ff22 	bl	8009d20 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8010edc:	bf00      	nop
}
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	58000c00 	.word	0x58000c00

08010ee4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b082      	sub	sp, #8
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8010eec:	2108      	movs	r1, #8
 8010eee:	480c      	ldr	r0, [pc, #48]	; (8010f20 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010ef0:	f7ff fe2c 	bl	8010b4c <LL_C1_IPCC_IsActiveFlag_CHx>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d007      	beq.n	8010f0a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8010efa:	4a0a      	ldr	r2, [pc, #40]	; (8010f24 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010f00:	2108      	movs	r1, #8
 8010f02:	4807      	ldr	r0, [pc, #28]	; (8010f20 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010f04:	f7ff fdbd 	bl	8010a82 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8010f08:	e006      	b.n	8010f18 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010f0e:	2108      	movs	r1, #8
 8010f10:	4803      	ldr	r0, [pc, #12]	; (8010f20 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010f12:	f7ff fe0c 	bl	8010b2e <LL_C1_IPCC_SetFlag_CHx>
  return;
 8010f16:	bf00      	nop
}
 8010f18:	3708      	adds	r7, #8
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
 8010f1e:	bf00      	nop
 8010f20:	58000c00 	.word	0x58000c00
 8010f24:	20006bec 	.word	0x20006bec

08010f28 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010f2c:	2108      	movs	r1, #8
 8010f2e:	4806      	ldr	r0, [pc, #24]	; (8010f48 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8010f30:	f7ff fdba 	bl	8010aa8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8010f34:	4b05      	ldr	r3, [pc, #20]	; (8010f4c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010f3a:	2108      	movs	r1, #8
 8010f3c:	4802      	ldr	r0, [pc, #8]	; (8010f48 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8010f3e:	f7ff fdf6 	bl	8010b2e <LL_C1_IPCC_SetFlag_CHx>

  return;
 8010f42:	bf00      	nop
}
 8010f44:	bd80      	pop	{r7, pc}
 8010f46:	bf00      	nop
 8010f48:	58000c00 	.word	0x58000c00
 8010f4c:	20006bec 	.word	0x20006bec

08010f50 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8010f54:	2108      	movs	r1, #8
 8010f56:	4802      	ldr	r0, [pc, #8]	; (8010f60 <HW_IPCC_TRACES_Init+0x10>)
 8010f58:	f7ff fdb8 	bl	8010acc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010f5c:	bf00      	nop
}
 8010f5e:	bd80      	pop	{r7, pc}
 8010f60:	58000c00 	.word	0x58000c00

08010f64 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8010f68:	f7f8 ff6c 	bl	8009e44 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8010f6c:	2108      	movs	r1, #8
 8010f6e:	4802      	ldr	r0, [pc, #8]	; (8010f78 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8010f70:	f7ff fdcf 	bl	8010b12 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010f74:	bf00      	nop
}
 8010f76:	bd80      	pop	{r7, pc}
 8010f78:	58000c00 	.word	0x58000c00

08010f7c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8010f80:	4b05      	ldr	r3, [pc, #20]	; (8010f98 <UTIL_LPM_Init+0x1c>)
 8010f82:	2200      	movs	r2, #0
 8010f84:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8010f86:	4b05      	ldr	r3, [pc, #20]	; (8010f9c <UTIL_LPM_Init+0x20>)
 8010f88:	2200      	movs	r2, #0
 8010f8a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8010f8c:	bf00      	nop
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f94:	4770      	bx	lr
 8010f96:	bf00      	nop
 8010f98:	20006bf0 	.word	0x20006bf0
 8010f9c:	20006bf4 	.word	0x20006bf4

08010fa0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b087      	sub	sp, #28
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	460b      	mov	r3, r1
 8010faa:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010fac:	f3ef 8310 	mrs	r3, PRIMASK
 8010fb0:	613b      	str	r3, [r7, #16]
  return(result);
 8010fb2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8010fb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010fb6:	b672      	cpsid	i
  
  switch(state)
 8010fb8:	78fb      	ldrb	r3, [r7, #3]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d009      	beq.n	8010fd2 <UTIL_LPM_SetOffMode+0x32>
 8010fbe:	2b01      	cmp	r3, #1
 8010fc0:	d000      	beq.n	8010fc4 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 8010fc2:	e00e      	b.n	8010fe2 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8010fc4:	4b0c      	ldr	r3, [pc, #48]	; (8010ff8 <UTIL_LPM_SetOffMode+0x58>)
 8010fc6:	681a      	ldr	r2, [r3, #0]
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	4313      	orrs	r3, r2
 8010fcc:	4a0a      	ldr	r2, [pc, #40]	; (8010ff8 <UTIL_LPM_SetOffMode+0x58>)
 8010fce:	6013      	str	r3, [r2, #0]
      break;
 8010fd0:	e007      	b.n	8010fe2 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	43da      	mvns	r2, r3
 8010fd6:	4b08      	ldr	r3, [pc, #32]	; (8010ff8 <UTIL_LPM_SetOffMode+0x58>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	4013      	ands	r3, r2
 8010fdc:	4a06      	ldr	r2, [pc, #24]	; (8010ff8 <UTIL_LPM_SetOffMode+0x58>)
 8010fde:	6013      	str	r3, [r2, #0]
      break;
 8010fe0:	bf00      	nop
 8010fe2:	697b      	ldr	r3, [r7, #20]
 8010fe4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010fec:	bf00      	nop
 8010fee:	371c      	adds	r7, #28
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff6:	4770      	bx	lr
 8010ff8:	20006bf4 	.word	0x20006bf4

08010ffc <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b08c      	sub	sp, #48	; 0x30
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8011004:	4b65      	ldr	r3, [pc, #404]	; (801119c <UTIL_SEQ_Run+0x1a0>)
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801100a:	4b64      	ldr	r3, [pc, #400]	; (801119c <UTIL_SEQ_Run+0x1a0>)
 801100c:	681a      	ldr	r2, [r3, #0]
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	4013      	ands	r3, r2
 8011012:	4a62      	ldr	r2, [pc, #392]	; (801119c <UTIL_SEQ_Run+0x1a0>)
 8011014:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8011016:	e081      	b.n	801111c <UTIL_SEQ_Run+0x120>
  {
    counter = 0U;
 8011018:	2300      	movs	r3, #0
 801101a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801101c:	e002      	b.n	8011024 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801101e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011020:	3301      	adds	r3, #1
 8011022:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8011024:	4a5e      	ldr	r2, [pc, #376]	; (80111a0 <UTIL_SEQ_Run+0x1a4>)
 8011026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011028:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801102c:	4b5d      	ldr	r3, [pc, #372]	; (80111a4 <UTIL_SEQ_Run+0x1a8>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	401a      	ands	r2, r3
 8011032:	4b5a      	ldr	r3, [pc, #360]	; (801119c <UTIL_SEQ_Run+0x1a0>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	4013      	ands	r3, r2
 8011038:	2b00      	cmp	r3, #0
 801103a:	d0f0      	beq.n	801101e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801103c:	4a58      	ldr	r2, [pc, #352]	; (80111a0 <UTIL_SEQ_Run+0x1a4>)
 801103e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011040:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011044:	4b57      	ldr	r3, [pc, #348]	; (80111a4 <UTIL_SEQ_Run+0x1a8>)
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	401a      	ands	r2, r3
 801104a:	4b54      	ldr	r3, [pc, #336]	; (801119c <UTIL_SEQ_Run+0x1a0>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	4013      	ands	r3, r2
 8011050:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8011052:	4a53      	ldr	r2, [pc, #332]	; (80111a0 <UTIL_SEQ_Run+0x1a4>)
 8011054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011056:	00db      	lsls	r3, r3, #3
 8011058:	4413      	add	r3, r2
 801105a:	685a      	ldr	r2, [r3, #4]
 801105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105e:	4013      	ands	r3, r2
 8011060:	2b00      	cmp	r3, #0
 8011062:	d106      	bne.n	8011072 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8011064:	4a4e      	ldr	r2, [pc, #312]	; (80111a0 <UTIL_SEQ_Run+0x1a4>)
 8011066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011068:	00db      	lsls	r3, r3, #3
 801106a:	4413      	add	r3, r2
 801106c:	f04f 32ff 	mov.w	r2, #4294967295
 8011070:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8011072:	4a4b      	ldr	r2, [pc, #300]	; (80111a0 <UTIL_SEQ_Run+0x1a4>)
 8011074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011076:	00db      	lsls	r3, r3, #3
 8011078:	4413      	add	r3, r2
 801107a:	685a      	ldr	r2, [r3, #4]
 801107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801107e:	4013      	ands	r3, r2
 8011080:	4618      	mov	r0, r3
 8011082:	f000 f8b1 	bl	80111e8 <SEQ_BitPosition>
 8011086:	4603      	mov	r3, r0
 8011088:	461a      	mov	r2, r3
 801108a:	4b47      	ldr	r3, [pc, #284]	; (80111a8 <UTIL_SEQ_Run+0x1ac>)
 801108c:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801108e:	4a44      	ldr	r2, [pc, #272]	; (80111a0 <UTIL_SEQ_Run+0x1a4>)
 8011090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011092:	00db      	lsls	r3, r3, #3
 8011094:	4413      	add	r3, r2
 8011096:	685a      	ldr	r2, [r3, #4]
 8011098:	4b43      	ldr	r3, [pc, #268]	; (80111a8 <UTIL_SEQ_Run+0x1ac>)
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	2101      	movs	r1, #1
 801109e:	fa01 f303 	lsl.w	r3, r1, r3
 80110a2:	43db      	mvns	r3, r3
 80110a4:	401a      	ands	r2, r3
 80110a6:	493e      	ldr	r1, [pc, #248]	; (80111a0 <UTIL_SEQ_Run+0x1a4>)
 80110a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110aa:	00db      	lsls	r3, r3, #3
 80110ac:	440b      	add	r3, r1
 80110ae:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80110b0:	f3ef 8310 	mrs	r3, PRIMASK
 80110b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80110b6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80110b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80110ba:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80110bc:	4b3a      	ldr	r3, [pc, #232]	; (80111a8 <UTIL_SEQ_Run+0x1ac>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	2201      	movs	r2, #1
 80110c2:	fa02 f303 	lsl.w	r3, r2, r3
 80110c6:	43da      	mvns	r2, r3
 80110c8:	4b38      	ldr	r3, [pc, #224]	; (80111ac <UTIL_SEQ_Run+0x1b0>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	4013      	ands	r3, r2
 80110ce:	4a37      	ldr	r2, [pc, #220]	; (80111ac <UTIL_SEQ_Run+0x1b0>)
 80110d0:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80110d2:	2302      	movs	r3, #2
 80110d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110d6:	e013      	b.n	8011100 <UTIL_SEQ_Run+0x104>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80110d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110da:	3b01      	subs	r3, #1
 80110dc:	4a30      	ldr	r2, [pc, #192]	; (80111a0 <UTIL_SEQ_Run+0x1a4>)
 80110de:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80110e2:	4b31      	ldr	r3, [pc, #196]	; (80111a8 <UTIL_SEQ_Run+0x1ac>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	2201      	movs	r2, #1
 80110e8:	fa02 f303 	lsl.w	r3, r2, r3
 80110ec:	43da      	mvns	r2, r3
 80110ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f0:	3b01      	subs	r3, #1
 80110f2:	400a      	ands	r2, r1
 80110f4:	492a      	ldr	r1, [pc, #168]	; (80111a0 <UTIL_SEQ_Run+0x1a4>)
 80110f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80110fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110fc:	3b01      	subs	r3, #1
 80110fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011102:	2b00      	cmp	r3, #0
 8011104:	d1e8      	bne.n	80110d8 <UTIL_SEQ_Run+0xdc>
 8011106:	6a3b      	ldr	r3, [r7, #32]
 8011108:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8011110:	4b25      	ldr	r3, [pc, #148]	; (80111a8 <UTIL_SEQ_Run+0x1ac>)
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	4a26      	ldr	r2, [pc, #152]	; (80111b0 <UTIL_SEQ_Run+0x1b4>)
 8011116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801111a:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801111c:	4b23      	ldr	r3, [pc, #140]	; (80111ac <UTIL_SEQ_Run+0x1b0>)
 801111e:	681a      	ldr	r2, [r3, #0]
 8011120:	4b20      	ldr	r3, [pc, #128]	; (80111a4 <UTIL_SEQ_Run+0x1a8>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	401a      	ands	r2, r3
 8011126:	4b1d      	ldr	r3, [pc, #116]	; (801119c <UTIL_SEQ_Run+0x1a0>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	4013      	ands	r3, r2
 801112c:	2b00      	cmp	r3, #0
 801112e:	d007      	beq.n	8011140 <UTIL_SEQ_Run+0x144>
 8011130:	4b20      	ldr	r3, [pc, #128]	; (80111b4 <UTIL_SEQ_Run+0x1b8>)
 8011132:	681a      	ldr	r2, [r3, #0]
 8011134:	4b20      	ldr	r3, [pc, #128]	; (80111b8 <UTIL_SEQ_Run+0x1bc>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	4013      	ands	r3, r2
 801113a:	2b00      	cmp	r3, #0
 801113c:	f43f af6c 	beq.w	8011018 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8011140:	4b19      	ldr	r3, [pc, #100]	; (80111a8 <UTIL_SEQ_Run+0x1ac>)
 8011142:	f04f 32ff 	mov.w	r2, #4294967295
 8011146:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8011148:	f000 f83f 	bl	80111ca <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801114c:	f3ef 8310 	mrs	r3, PRIMASK
 8011150:	613b      	str	r3, [r7, #16]
  return(result);
 8011152:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8011154:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8011156:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8011158:	4b14      	ldr	r3, [pc, #80]	; (80111ac <UTIL_SEQ_Run+0x1b0>)
 801115a:	681a      	ldr	r2, [r3, #0]
 801115c:	4b11      	ldr	r3, [pc, #68]	; (80111a4 <UTIL_SEQ_Run+0x1a8>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	401a      	ands	r2, r3
 8011162:	4b0e      	ldr	r3, [pc, #56]	; (801119c <UTIL_SEQ_Run+0x1a0>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	4013      	ands	r3, r2
 8011168:	2b00      	cmp	r3, #0
 801116a:	d108      	bne.n	801117e <UTIL_SEQ_Run+0x182>
 801116c:	4b11      	ldr	r3, [pc, #68]	; (80111b4 <UTIL_SEQ_Run+0x1b8>)
 801116e:	681a      	ldr	r2, [r3, #0]
 8011170:	4b11      	ldr	r3, [pc, #68]	; (80111b8 <UTIL_SEQ_Run+0x1bc>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	4013      	ands	r3, r2
 8011176:	2b00      	cmp	r3, #0
 8011178:	d101      	bne.n	801117e <UTIL_SEQ_Run+0x182>
  {
	UTIL_SEQ_Idle( );
 801117a:	f000 f81f 	bl	80111bc <UTIL_SEQ_Idle>
 801117e:	69fb      	ldr	r3, [r7, #28]
 8011180:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 8011188:	f000 f826 	bl	80111d8 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801118c:	4a03      	ldr	r2, [pc, #12]	; (801119c <UTIL_SEQ_Run+0x1a0>)
 801118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011190:	6013      	str	r3, [r2, #0]

  return;
 8011192:	bf00      	nop
}
 8011194:	3730      	adds	r7, #48	; 0x30
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}
 801119a:	bf00      	nop
 801119c:	20000020 	.word	0x20000020
 80111a0:	20006c88 	.word	0x20006c88
 80111a4:	2000001c 	.word	0x2000001c
 80111a8:	20006c04 	.word	0x20006c04
 80111ac:	20006bf8 	.word	0x20006bf8
 80111b0:	20006c08 	.word	0x20006c08
 80111b4:	20006bfc 	.word	0x20006bfc
 80111b8:	20006c00 	.word	0x20006c00

080111bc <UTIL_SEQ_Idle>:
  UTIL_SEQ_Run(~TaskId_bm);
  return;
}

__WEAK void UTIL_SEQ_Idle( void )
{
 80111bc:	b480      	push	{r7}
 80111be:	af00      	add	r7, sp, #0
  return;
 80111c0:	bf00      	nop
}
 80111c2:	46bd      	mov	sp, r7
 80111c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c8:	4770      	bx	lr

080111ca <UTIL_SEQ_PreIdle>:

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80111ca:	b480      	push	{r7}
 80111cc:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80111ce:	bf00      	nop
}
 80111d0:	46bd      	mov	sp, r7
 80111d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d6:	4770      	bx	lr

080111d8 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80111d8:	b480      	push	{r7}
 80111da:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80111dc:	bf00      	nop
}
 80111de:	46bd      	mov	sp, r7
 80111e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e4:	4770      	bx	lr
	...

080111e8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80111e8:	b480      	push	{r7}
 80111ea:	b085      	sub	sp, #20
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 80111f0:	2300      	movs	r3, #0
 80111f2:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	0c1b      	lsrs	r3, r3, #16
 80111f8:	041b      	lsls	r3, r3, #16
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d104      	bne.n	8011208 <SEQ_BitPosition+0x20>
 80111fe:	2310      	movs	r3, #16
 8011200:	73fb      	strb	r3, [r7, #15]
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	041b      	lsls	r3, r3, #16
 8011206:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801120e:	2b00      	cmp	r3, #0
 8011210:	d105      	bne.n	801121e <SEQ_BitPosition+0x36>
 8011212:	7bfb      	ldrb	r3, [r7, #15]
 8011214:	3308      	adds	r3, #8
 8011216:	73fb      	strb	r3, [r7, #15]
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	021b      	lsls	r3, r3, #8
 801121c:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011224:	2b00      	cmp	r3, #0
 8011226:	d105      	bne.n	8011234 <SEQ_BitPosition+0x4c>
 8011228:	7bfb      	ldrb	r3, [r7, #15]
 801122a:	3304      	adds	r3, #4
 801122c:	73fb      	strb	r3, [r7, #15]
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	011b      	lsls	r3, r3, #4
 8011232:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	0f1b      	lsrs	r3, r3, #28
 8011238:	4a07      	ldr	r2, [pc, #28]	; (8011258 <SEQ_BitPosition+0x70>)
 801123a:	5cd2      	ldrb	r2, [r2, r3]
 801123c:	7bfb      	ldrb	r3, [r7, #15]
 801123e:	4413      	add	r3, r2
 8011240:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8011242:	7bfb      	ldrb	r3, [r7, #15]
 8011244:	f1c3 031f 	rsb	r3, r3, #31
 8011248:	b2db      	uxtb	r3, r3
}
 801124a:	4618      	mov	r0, r3
 801124c:	3714      	adds	r7, #20
 801124e:	46bd      	mov	sp, r7
 8011250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011254:	4770      	bx	lr
 8011256:	bf00      	nop
 8011258:	08012d94 	.word	0x08012d94

0801125c <__errno>:
 801125c:	4b01      	ldr	r3, [pc, #4]	; (8011264 <__errno+0x8>)
 801125e:	6818      	ldr	r0, [r3, #0]
 8011260:	4770      	bx	lr
 8011262:	bf00      	nop
 8011264:	20000024 	.word	0x20000024

08011268 <__libc_init_array>:
 8011268:	b570      	push	{r4, r5, r6, lr}
 801126a:	4e0d      	ldr	r6, [pc, #52]	; (80112a0 <__libc_init_array+0x38>)
 801126c:	4c0d      	ldr	r4, [pc, #52]	; (80112a4 <__libc_init_array+0x3c>)
 801126e:	1ba4      	subs	r4, r4, r6
 8011270:	10a4      	asrs	r4, r4, #2
 8011272:	2500      	movs	r5, #0
 8011274:	42a5      	cmp	r5, r4
 8011276:	d109      	bne.n	801128c <__libc_init_array+0x24>
 8011278:	4e0b      	ldr	r6, [pc, #44]	; (80112a8 <__libc_init_array+0x40>)
 801127a:	4c0c      	ldr	r4, [pc, #48]	; (80112ac <__libc_init_array+0x44>)
 801127c:	f001 f97c 	bl	8012578 <_init>
 8011280:	1ba4      	subs	r4, r4, r6
 8011282:	10a4      	asrs	r4, r4, #2
 8011284:	2500      	movs	r5, #0
 8011286:	42a5      	cmp	r5, r4
 8011288:	d105      	bne.n	8011296 <__libc_init_array+0x2e>
 801128a:	bd70      	pop	{r4, r5, r6, pc}
 801128c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011290:	4798      	blx	r3
 8011292:	3501      	adds	r5, #1
 8011294:	e7ee      	b.n	8011274 <__libc_init_array+0xc>
 8011296:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801129a:	4798      	blx	r3
 801129c:	3501      	adds	r5, #1
 801129e:	e7f2      	b.n	8011286 <__libc_init_array+0x1e>
 80112a0:	08012e44 	.word	0x08012e44
 80112a4:	08012e44 	.word	0x08012e44
 80112a8:	08012e44 	.word	0x08012e44
 80112ac:	08012e48 	.word	0x08012e48

080112b0 <memcpy>:
 80112b0:	b510      	push	{r4, lr}
 80112b2:	1e43      	subs	r3, r0, #1
 80112b4:	440a      	add	r2, r1
 80112b6:	4291      	cmp	r1, r2
 80112b8:	d100      	bne.n	80112bc <memcpy+0xc>
 80112ba:	bd10      	pop	{r4, pc}
 80112bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80112c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80112c4:	e7f7      	b.n	80112b6 <memcpy+0x6>

080112c6 <memset>:
 80112c6:	4402      	add	r2, r0
 80112c8:	4603      	mov	r3, r0
 80112ca:	4293      	cmp	r3, r2
 80112cc:	d100      	bne.n	80112d0 <memset+0xa>
 80112ce:	4770      	bx	lr
 80112d0:	f803 1b01 	strb.w	r1, [r3], #1
 80112d4:	e7f9      	b.n	80112ca <memset+0x4>
	...

080112d8 <iprintf>:
 80112d8:	b40f      	push	{r0, r1, r2, r3}
 80112da:	4b0a      	ldr	r3, [pc, #40]	; (8011304 <iprintf+0x2c>)
 80112dc:	b513      	push	{r0, r1, r4, lr}
 80112de:	681c      	ldr	r4, [r3, #0]
 80112e0:	b124      	cbz	r4, 80112ec <iprintf+0x14>
 80112e2:	69a3      	ldr	r3, [r4, #24]
 80112e4:	b913      	cbnz	r3, 80112ec <iprintf+0x14>
 80112e6:	4620      	mov	r0, r4
 80112e8:	f000 fa90 	bl	801180c <__sinit>
 80112ec:	ab05      	add	r3, sp, #20
 80112ee:	9a04      	ldr	r2, [sp, #16]
 80112f0:	68a1      	ldr	r1, [r4, #8]
 80112f2:	9301      	str	r3, [sp, #4]
 80112f4:	4620      	mov	r0, r4
 80112f6:	f000 fd9b 	bl	8011e30 <_vfiprintf_r>
 80112fa:	b002      	add	sp, #8
 80112fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011300:	b004      	add	sp, #16
 8011302:	4770      	bx	lr
 8011304:	20000024 	.word	0x20000024

08011308 <_puts_r>:
 8011308:	b570      	push	{r4, r5, r6, lr}
 801130a:	460e      	mov	r6, r1
 801130c:	4605      	mov	r5, r0
 801130e:	b118      	cbz	r0, 8011318 <_puts_r+0x10>
 8011310:	6983      	ldr	r3, [r0, #24]
 8011312:	b90b      	cbnz	r3, 8011318 <_puts_r+0x10>
 8011314:	f000 fa7a 	bl	801180c <__sinit>
 8011318:	69ab      	ldr	r3, [r5, #24]
 801131a:	68ac      	ldr	r4, [r5, #8]
 801131c:	b913      	cbnz	r3, 8011324 <_puts_r+0x1c>
 801131e:	4628      	mov	r0, r5
 8011320:	f000 fa74 	bl	801180c <__sinit>
 8011324:	4b23      	ldr	r3, [pc, #140]	; (80113b4 <_puts_r+0xac>)
 8011326:	429c      	cmp	r4, r3
 8011328:	d117      	bne.n	801135a <_puts_r+0x52>
 801132a:	686c      	ldr	r4, [r5, #4]
 801132c:	89a3      	ldrh	r3, [r4, #12]
 801132e:	071b      	lsls	r3, r3, #28
 8011330:	d51d      	bpl.n	801136e <_puts_r+0x66>
 8011332:	6923      	ldr	r3, [r4, #16]
 8011334:	b1db      	cbz	r3, 801136e <_puts_r+0x66>
 8011336:	3e01      	subs	r6, #1
 8011338:	68a3      	ldr	r3, [r4, #8]
 801133a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801133e:	3b01      	subs	r3, #1
 8011340:	60a3      	str	r3, [r4, #8]
 8011342:	b9e9      	cbnz	r1, 8011380 <_puts_r+0x78>
 8011344:	2b00      	cmp	r3, #0
 8011346:	da2e      	bge.n	80113a6 <_puts_r+0x9e>
 8011348:	4622      	mov	r2, r4
 801134a:	210a      	movs	r1, #10
 801134c:	4628      	mov	r0, r5
 801134e:	f000 f8ad 	bl	80114ac <__swbuf_r>
 8011352:	3001      	adds	r0, #1
 8011354:	d011      	beq.n	801137a <_puts_r+0x72>
 8011356:	200a      	movs	r0, #10
 8011358:	e011      	b.n	801137e <_puts_r+0x76>
 801135a:	4b17      	ldr	r3, [pc, #92]	; (80113b8 <_puts_r+0xb0>)
 801135c:	429c      	cmp	r4, r3
 801135e:	d101      	bne.n	8011364 <_puts_r+0x5c>
 8011360:	68ac      	ldr	r4, [r5, #8]
 8011362:	e7e3      	b.n	801132c <_puts_r+0x24>
 8011364:	4b15      	ldr	r3, [pc, #84]	; (80113bc <_puts_r+0xb4>)
 8011366:	429c      	cmp	r4, r3
 8011368:	bf08      	it	eq
 801136a:	68ec      	ldreq	r4, [r5, #12]
 801136c:	e7de      	b.n	801132c <_puts_r+0x24>
 801136e:	4621      	mov	r1, r4
 8011370:	4628      	mov	r0, r5
 8011372:	f000 f8ed 	bl	8011550 <__swsetup_r>
 8011376:	2800      	cmp	r0, #0
 8011378:	d0dd      	beq.n	8011336 <_puts_r+0x2e>
 801137a:	f04f 30ff 	mov.w	r0, #4294967295
 801137e:	bd70      	pop	{r4, r5, r6, pc}
 8011380:	2b00      	cmp	r3, #0
 8011382:	da04      	bge.n	801138e <_puts_r+0x86>
 8011384:	69a2      	ldr	r2, [r4, #24]
 8011386:	429a      	cmp	r2, r3
 8011388:	dc06      	bgt.n	8011398 <_puts_r+0x90>
 801138a:	290a      	cmp	r1, #10
 801138c:	d004      	beq.n	8011398 <_puts_r+0x90>
 801138e:	6823      	ldr	r3, [r4, #0]
 8011390:	1c5a      	adds	r2, r3, #1
 8011392:	6022      	str	r2, [r4, #0]
 8011394:	7019      	strb	r1, [r3, #0]
 8011396:	e7cf      	b.n	8011338 <_puts_r+0x30>
 8011398:	4622      	mov	r2, r4
 801139a:	4628      	mov	r0, r5
 801139c:	f000 f886 	bl	80114ac <__swbuf_r>
 80113a0:	3001      	adds	r0, #1
 80113a2:	d1c9      	bne.n	8011338 <_puts_r+0x30>
 80113a4:	e7e9      	b.n	801137a <_puts_r+0x72>
 80113a6:	6823      	ldr	r3, [r4, #0]
 80113a8:	200a      	movs	r0, #10
 80113aa:	1c5a      	adds	r2, r3, #1
 80113ac:	6022      	str	r2, [r4, #0]
 80113ae:	7018      	strb	r0, [r3, #0]
 80113b0:	e7e5      	b.n	801137e <_puts_r+0x76>
 80113b2:	bf00      	nop
 80113b4:	08012dc8 	.word	0x08012dc8
 80113b8:	08012de8 	.word	0x08012de8
 80113bc:	08012da8 	.word	0x08012da8

080113c0 <puts>:
 80113c0:	4b02      	ldr	r3, [pc, #8]	; (80113cc <puts+0xc>)
 80113c2:	4601      	mov	r1, r0
 80113c4:	6818      	ldr	r0, [r3, #0]
 80113c6:	f7ff bf9f 	b.w	8011308 <_puts_r>
 80113ca:	bf00      	nop
 80113cc:	20000024 	.word	0x20000024

080113d0 <sniprintf>:
 80113d0:	b40c      	push	{r2, r3}
 80113d2:	b530      	push	{r4, r5, lr}
 80113d4:	4b17      	ldr	r3, [pc, #92]	; (8011434 <sniprintf+0x64>)
 80113d6:	1e0c      	subs	r4, r1, #0
 80113d8:	b09d      	sub	sp, #116	; 0x74
 80113da:	681d      	ldr	r5, [r3, #0]
 80113dc:	da08      	bge.n	80113f0 <sniprintf+0x20>
 80113de:	238b      	movs	r3, #139	; 0x8b
 80113e0:	602b      	str	r3, [r5, #0]
 80113e2:	f04f 30ff 	mov.w	r0, #4294967295
 80113e6:	b01d      	add	sp, #116	; 0x74
 80113e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80113ec:	b002      	add	sp, #8
 80113ee:	4770      	bx	lr
 80113f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80113f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80113f8:	bf14      	ite	ne
 80113fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80113fe:	4623      	moveq	r3, r4
 8011400:	9304      	str	r3, [sp, #16]
 8011402:	9307      	str	r3, [sp, #28]
 8011404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011408:	9002      	str	r0, [sp, #8]
 801140a:	9006      	str	r0, [sp, #24]
 801140c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011410:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011412:	ab21      	add	r3, sp, #132	; 0x84
 8011414:	a902      	add	r1, sp, #8
 8011416:	4628      	mov	r0, r5
 8011418:	9301      	str	r3, [sp, #4]
 801141a:	f000 fbe7 	bl	8011bec <_svfiprintf_r>
 801141e:	1c43      	adds	r3, r0, #1
 8011420:	bfbc      	itt	lt
 8011422:	238b      	movlt	r3, #139	; 0x8b
 8011424:	602b      	strlt	r3, [r5, #0]
 8011426:	2c00      	cmp	r4, #0
 8011428:	d0dd      	beq.n	80113e6 <sniprintf+0x16>
 801142a:	9b02      	ldr	r3, [sp, #8]
 801142c:	2200      	movs	r2, #0
 801142e:	701a      	strb	r2, [r3, #0]
 8011430:	e7d9      	b.n	80113e6 <sniprintf+0x16>
 8011432:	bf00      	nop
 8011434:	20000024 	.word	0x20000024

08011438 <_vsniprintf_r>:
 8011438:	b530      	push	{r4, r5, lr}
 801143a:	1e14      	subs	r4, r2, #0
 801143c:	4605      	mov	r5, r0
 801143e:	b09b      	sub	sp, #108	; 0x6c
 8011440:	4618      	mov	r0, r3
 8011442:	da05      	bge.n	8011450 <_vsniprintf_r+0x18>
 8011444:	238b      	movs	r3, #139	; 0x8b
 8011446:	602b      	str	r3, [r5, #0]
 8011448:	f04f 30ff 	mov.w	r0, #4294967295
 801144c:	b01b      	add	sp, #108	; 0x6c
 801144e:	bd30      	pop	{r4, r5, pc}
 8011450:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011454:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011458:	bf14      	ite	ne
 801145a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801145e:	4623      	moveq	r3, r4
 8011460:	9302      	str	r3, [sp, #8]
 8011462:	9305      	str	r3, [sp, #20]
 8011464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011468:	9100      	str	r1, [sp, #0]
 801146a:	9104      	str	r1, [sp, #16]
 801146c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011470:	4602      	mov	r2, r0
 8011472:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011474:	4669      	mov	r1, sp
 8011476:	4628      	mov	r0, r5
 8011478:	f000 fbb8 	bl	8011bec <_svfiprintf_r>
 801147c:	1c43      	adds	r3, r0, #1
 801147e:	bfbc      	itt	lt
 8011480:	238b      	movlt	r3, #139	; 0x8b
 8011482:	602b      	strlt	r3, [r5, #0]
 8011484:	2c00      	cmp	r4, #0
 8011486:	d0e1      	beq.n	801144c <_vsniprintf_r+0x14>
 8011488:	9b00      	ldr	r3, [sp, #0]
 801148a:	2200      	movs	r2, #0
 801148c:	701a      	strb	r2, [r3, #0]
 801148e:	e7dd      	b.n	801144c <_vsniprintf_r+0x14>

08011490 <vsniprintf>:
 8011490:	b507      	push	{r0, r1, r2, lr}
 8011492:	9300      	str	r3, [sp, #0]
 8011494:	4613      	mov	r3, r2
 8011496:	460a      	mov	r2, r1
 8011498:	4601      	mov	r1, r0
 801149a:	4803      	ldr	r0, [pc, #12]	; (80114a8 <vsniprintf+0x18>)
 801149c:	6800      	ldr	r0, [r0, #0]
 801149e:	f7ff ffcb 	bl	8011438 <_vsniprintf_r>
 80114a2:	b003      	add	sp, #12
 80114a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80114a8:	20000024 	.word	0x20000024

080114ac <__swbuf_r>:
 80114ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114ae:	460e      	mov	r6, r1
 80114b0:	4614      	mov	r4, r2
 80114b2:	4605      	mov	r5, r0
 80114b4:	b118      	cbz	r0, 80114be <__swbuf_r+0x12>
 80114b6:	6983      	ldr	r3, [r0, #24]
 80114b8:	b90b      	cbnz	r3, 80114be <__swbuf_r+0x12>
 80114ba:	f000 f9a7 	bl	801180c <__sinit>
 80114be:	4b21      	ldr	r3, [pc, #132]	; (8011544 <__swbuf_r+0x98>)
 80114c0:	429c      	cmp	r4, r3
 80114c2:	d12a      	bne.n	801151a <__swbuf_r+0x6e>
 80114c4:	686c      	ldr	r4, [r5, #4]
 80114c6:	69a3      	ldr	r3, [r4, #24]
 80114c8:	60a3      	str	r3, [r4, #8]
 80114ca:	89a3      	ldrh	r3, [r4, #12]
 80114cc:	071a      	lsls	r2, r3, #28
 80114ce:	d52e      	bpl.n	801152e <__swbuf_r+0x82>
 80114d0:	6923      	ldr	r3, [r4, #16]
 80114d2:	b363      	cbz	r3, 801152e <__swbuf_r+0x82>
 80114d4:	6923      	ldr	r3, [r4, #16]
 80114d6:	6820      	ldr	r0, [r4, #0]
 80114d8:	1ac0      	subs	r0, r0, r3
 80114da:	6963      	ldr	r3, [r4, #20]
 80114dc:	b2f6      	uxtb	r6, r6
 80114de:	4283      	cmp	r3, r0
 80114e0:	4637      	mov	r7, r6
 80114e2:	dc04      	bgt.n	80114ee <__swbuf_r+0x42>
 80114e4:	4621      	mov	r1, r4
 80114e6:	4628      	mov	r0, r5
 80114e8:	f000 f926 	bl	8011738 <_fflush_r>
 80114ec:	bb28      	cbnz	r0, 801153a <__swbuf_r+0x8e>
 80114ee:	68a3      	ldr	r3, [r4, #8]
 80114f0:	3b01      	subs	r3, #1
 80114f2:	60a3      	str	r3, [r4, #8]
 80114f4:	6823      	ldr	r3, [r4, #0]
 80114f6:	1c5a      	adds	r2, r3, #1
 80114f8:	6022      	str	r2, [r4, #0]
 80114fa:	701e      	strb	r6, [r3, #0]
 80114fc:	6963      	ldr	r3, [r4, #20]
 80114fe:	3001      	adds	r0, #1
 8011500:	4283      	cmp	r3, r0
 8011502:	d004      	beq.n	801150e <__swbuf_r+0x62>
 8011504:	89a3      	ldrh	r3, [r4, #12]
 8011506:	07db      	lsls	r3, r3, #31
 8011508:	d519      	bpl.n	801153e <__swbuf_r+0x92>
 801150a:	2e0a      	cmp	r6, #10
 801150c:	d117      	bne.n	801153e <__swbuf_r+0x92>
 801150e:	4621      	mov	r1, r4
 8011510:	4628      	mov	r0, r5
 8011512:	f000 f911 	bl	8011738 <_fflush_r>
 8011516:	b190      	cbz	r0, 801153e <__swbuf_r+0x92>
 8011518:	e00f      	b.n	801153a <__swbuf_r+0x8e>
 801151a:	4b0b      	ldr	r3, [pc, #44]	; (8011548 <__swbuf_r+0x9c>)
 801151c:	429c      	cmp	r4, r3
 801151e:	d101      	bne.n	8011524 <__swbuf_r+0x78>
 8011520:	68ac      	ldr	r4, [r5, #8]
 8011522:	e7d0      	b.n	80114c6 <__swbuf_r+0x1a>
 8011524:	4b09      	ldr	r3, [pc, #36]	; (801154c <__swbuf_r+0xa0>)
 8011526:	429c      	cmp	r4, r3
 8011528:	bf08      	it	eq
 801152a:	68ec      	ldreq	r4, [r5, #12]
 801152c:	e7cb      	b.n	80114c6 <__swbuf_r+0x1a>
 801152e:	4621      	mov	r1, r4
 8011530:	4628      	mov	r0, r5
 8011532:	f000 f80d 	bl	8011550 <__swsetup_r>
 8011536:	2800      	cmp	r0, #0
 8011538:	d0cc      	beq.n	80114d4 <__swbuf_r+0x28>
 801153a:	f04f 37ff 	mov.w	r7, #4294967295
 801153e:	4638      	mov	r0, r7
 8011540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011542:	bf00      	nop
 8011544:	08012dc8 	.word	0x08012dc8
 8011548:	08012de8 	.word	0x08012de8
 801154c:	08012da8 	.word	0x08012da8

08011550 <__swsetup_r>:
 8011550:	4b32      	ldr	r3, [pc, #200]	; (801161c <__swsetup_r+0xcc>)
 8011552:	b570      	push	{r4, r5, r6, lr}
 8011554:	681d      	ldr	r5, [r3, #0]
 8011556:	4606      	mov	r6, r0
 8011558:	460c      	mov	r4, r1
 801155a:	b125      	cbz	r5, 8011566 <__swsetup_r+0x16>
 801155c:	69ab      	ldr	r3, [r5, #24]
 801155e:	b913      	cbnz	r3, 8011566 <__swsetup_r+0x16>
 8011560:	4628      	mov	r0, r5
 8011562:	f000 f953 	bl	801180c <__sinit>
 8011566:	4b2e      	ldr	r3, [pc, #184]	; (8011620 <__swsetup_r+0xd0>)
 8011568:	429c      	cmp	r4, r3
 801156a:	d10f      	bne.n	801158c <__swsetup_r+0x3c>
 801156c:	686c      	ldr	r4, [r5, #4]
 801156e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011572:	b29a      	uxth	r2, r3
 8011574:	0715      	lsls	r5, r2, #28
 8011576:	d42c      	bmi.n	80115d2 <__swsetup_r+0x82>
 8011578:	06d0      	lsls	r0, r2, #27
 801157a:	d411      	bmi.n	80115a0 <__swsetup_r+0x50>
 801157c:	2209      	movs	r2, #9
 801157e:	6032      	str	r2, [r6, #0]
 8011580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011584:	81a3      	strh	r3, [r4, #12]
 8011586:	f04f 30ff 	mov.w	r0, #4294967295
 801158a:	e03e      	b.n	801160a <__swsetup_r+0xba>
 801158c:	4b25      	ldr	r3, [pc, #148]	; (8011624 <__swsetup_r+0xd4>)
 801158e:	429c      	cmp	r4, r3
 8011590:	d101      	bne.n	8011596 <__swsetup_r+0x46>
 8011592:	68ac      	ldr	r4, [r5, #8]
 8011594:	e7eb      	b.n	801156e <__swsetup_r+0x1e>
 8011596:	4b24      	ldr	r3, [pc, #144]	; (8011628 <__swsetup_r+0xd8>)
 8011598:	429c      	cmp	r4, r3
 801159a:	bf08      	it	eq
 801159c:	68ec      	ldreq	r4, [r5, #12]
 801159e:	e7e6      	b.n	801156e <__swsetup_r+0x1e>
 80115a0:	0751      	lsls	r1, r2, #29
 80115a2:	d512      	bpl.n	80115ca <__swsetup_r+0x7a>
 80115a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115a6:	b141      	cbz	r1, 80115ba <__swsetup_r+0x6a>
 80115a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80115ac:	4299      	cmp	r1, r3
 80115ae:	d002      	beq.n	80115b6 <__swsetup_r+0x66>
 80115b0:	4630      	mov	r0, r6
 80115b2:	f000 fa19 	bl	80119e8 <_free_r>
 80115b6:	2300      	movs	r3, #0
 80115b8:	6363      	str	r3, [r4, #52]	; 0x34
 80115ba:	89a3      	ldrh	r3, [r4, #12]
 80115bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80115c0:	81a3      	strh	r3, [r4, #12]
 80115c2:	2300      	movs	r3, #0
 80115c4:	6063      	str	r3, [r4, #4]
 80115c6:	6923      	ldr	r3, [r4, #16]
 80115c8:	6023      	str	r3, [r4, #0]
 80115ca:	89a3      	ldrh	r3, [r4, #12]
 80115cc:	f043 0308 	orr.w	r3, r3, #8
 80115d0:	81a3      	strh	r3, [r4, #12]
 80115d2:	6923      	ldr	r3, [r4, #16]
 80115d4:	b94b      	cbnz	r3, 80115ea <__swsetup_r+0x9a>
 80115d6:	89a3      	ldrh	r3, [r4, #12]
 80115d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80115dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80115e0:	d003      	beq.n	80115ea <__swsetup_r+0x9a>
 80115e2:	4621      	mov	r1, r4
 80115e4:	4630      	mov	r0, r6
 80115e6:	f000 f9bf 	bl	8011968 <__smakebuf_r>
 80115ea:	89a2      	ldrh	r2, [r4, #12]
 80115ec:	f012 0301 	ands.w	r3, r2, #1
 80115f0:	d00c      	beq.n	801160c <__swsetup_r+0xbc>
 80115f2:	2300      	movs	r3, #0
 80115f4:	60a3      	str	r3, [r4, #8]
 80115f6:	6963      	ldr	r3, [r4, #20]
 80115f8:	425b      	negs	r3, r3
 80115fa:	61a3      	str	r3, [r4, #24]
 80115fc:	6923      	ldr	r3, [r4, #16]
 80115fe:	b953      	cbnz	r3, 8011616 <__swsetup_r+0xc6>
 8011600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011604:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011608:	d1ba      	bne.n	8011580 <__swsetup_r+0x30>
 801160a:	bd70      	pop	{r4, r5, r6, pc}
 801160c:	0792      	lsls	r2, r2, #30
 801160e:	bf58      	it	pl
 8011610:	6963      	ldrpl	r3, [r4, #20]
 8011612:	60a3      	str	r3, [r4, #8]
 8011614:	e7f2      	b.n	80115fc <__swsetup_r+0xac>
 8011616:	2000      	movs	r0, #0
 8011618:	e7f7      	b.n	801160a <__swsetup_r+0xba>
 801161a:	bf00      	nop
 801161c:	20000024 	.word	0x20000024
 8011620:	08012dc8 	.word	0x08012dc8
 8011624:	08012de8 	.word	0x08012de8
 8011628:	08012da8 	.word	0x08012da8

0801162c <__sflush_r>:
 801162c:	898a      	ldrh	r2, [r1, #12]
 801162e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011632:	4605      	mov	r5, r0
 8011634:	0710      	lsls	r0, r2, #28
 8011636:	460c      	mov	r4, r1
 8011638:	d458      	bmi.n	80116ec <__sflush_r+0xc0>
 801163a:	684b      	ldr	r3, [r1, #4]
 801163c:	2b00      	cmp	r3, #0
 801163e:	dc05      	bgt.n	801164c <__sflush_r+0x20>
 8011640:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011642:	2b00      	cmp	r3, #0
 8011644:	dc02      	bgt.n	801164c <__sflush_r+0x20>
 8011646:	2000      	movs	r0, #0
 8011648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801164c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801164e:	2e00      	cmp	r6, #0
 8011650:	d0f9      	beq.n	8011646 <__sflush_r+0x1a>
 8011652:	2300      	movs	r3, #0
 8011654:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011658:	682f      	ldr	r7, [r5, #0]
 801165a:	6a21      	ldr	r1, [r4, #32]
 801165c:	602b      	str	r3, [r5, #0]
 801165e:	d032      	beq.n	80116c6 <__sflush_r+0x9a>
 8011660:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011662:	89a3      	ldrh	r3, [r4, #12]
 8011664:	075a      	lsls	r2, r3, #29
 8011666:	d505      	bpl.n	8011674 <__sflush_r+0x48>
 8011668:	6863      	ldr	r3, [r4, #4]
 801166a:	1ac0      	subs	r0, r0, r3
 801166c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801166e:	b10b      	cbz	r3, 8011674 <__sflush_r+0x48>
 8011670:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011672:	1ac0      	subs	r0, r0, r3
 8011674:	2300      	movs	r3, #0
 8011676:	4602      	mov	r2, r0
 8011678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801167a:	6a21      	ldr	r1, [r4, #32]
 801167c:	4628      	mov	r0, r5
 801167e:	47b0      	blx	r6
 8011680:	1c43      	adds	r3, r0, #1
 8011682:	89a3      	ldrh	r3, [r4, #12]
 8011684:	d106      	bne.n	8011694 <__sflush_r+0x68>
 8011686:	6829      	ldr	r1, [r5, #0]
 8011688:	291d      	cmp	r1, #29
 801168a:	d848      	bhi.n	801171e <__sflush_r+0xf2>
 801168c:	4a29      	ldr	r2, [pc, #164]	; (8011734 <__sflush_r+0x108>)
 801168e:	40ca      	lsrs	r2, r1
 8011690:	07d6      	lsls	r6, r2, #31
 8011692:	d544      	bpl.n	801171e <__sflush_r+0xf2>
 8011694:	2200      	movs	r2, #0
 8011696:	6062      	str	r2, [r4, #4]
 8011698:	04d9      	lsls	r1, r3, #19
 801169a:	6922      	ldr	r2, [r4, #16]
 801169c:	6022      	str	r2, [r4, #0]
 801169e:	d504      	bpl.n	80116aa <__sflush_r+0x7e>
 80116a0:	1c42      	adds	r2, r0, #1
 80116a2:	d101      	bne.n	80116a8 <__sflush_r+0x7c>
 80116a4:	682b      	ldr	r3, [r5, #0]
 80116a6:	b903      	cbnz	r3, 80116aa <__sflush_r+0x7e>
 80116a8:	6560      	str	r0, [r4, #84]	; 0x54
 80116aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80116ac:	602f      	str	r7, [r5, #0]
 80116ae:	2900      	cmp	r1, #0
 80116b0:	d0c9      	beq.n	8011646 <__sflush_r+0x1a>
 80116b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80116b6:	4299      	cmp	r1, r3
 80116b8:	d002      	beq.n	80116c0 <__sflush_r+0x94>
 80116ba:	4628      	mov	r0, r5
 80116bc:	f000 f994 	bl	80119e8 <_free_r>
 80116c0:	2000      	movs	r0, #0
 80116c2:	6360      	str	r0, [r4, #52]	; 0x34
 80116c4:	e7c0      	b.n	8011648 <__sflush_r+0x1c>
 80116c6:	2301      	movs	r3, #1
 80116c8:	4628      	mov	r0, r5
 80116ca:	47b0      	blx	r6
 80116cc:	1c41      	adds	r1, r0, #1
 80116ce:	d1c8      	bne.n	8011662 <__sflush_r+0x36>
 80116d0:	682b      	ldr	r3, [r5, #0]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d0c5      	beq.n	8011662 <__sflush_r+0x36>
 80116d6:	2b1d      	cmp	r3, #29
 80116d8:	d001      	beq.n	80116de <__sflush_r+0xb2>
 80116da:	2b16      	cmp	r3, #22
 80116dc:	d101      	bne.n	80116e2 <__sflush_r+0xb6>
 80116de:	602f      	str	r7, [r5, #0]
 80116e0:	e7b1      	b.n	8011646 <__sflush_r+0x1a>
 80116e2:	89a3      	ldrh	r3, [r4, #12]
 80116e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116e8:	81a3      	strh	r3, [r4, #12]
 80116ea:	e7ad      	b.n	8011648 <__sflush_r+0x1c>
 80116ec:	690f      	ldr	r7, [r1, #16]
 80116ee:	2f00      	cmp	r7, #0
 80116f0:	d0a9      	beq.n	8011646 <__sflush_r+0x1a>
 80116f2:	0793      	lsls	r3, r2, #30
 80116f4:	680e      	ldr	r6, [r1, #0]
 80116f6:	bf08      	it	eq
 80116f8:	694b      	ldreq	r3, [r1, #20]
 80116fa:	600f      	str	r7, [r1, #0]
 80116fc:	bf18      	it	ne
 80116fe:	2300      	movne	r3, #0
 8011700:	eba6 0807 	sub.w	r8, r6, r7
 8011704:	608b      	str	r3, [r1, #8]
 8011706:	f1b8 0f00 	cmp.w	r8, #0
 801170a:	dd9c      	ble.n	8011646 <__sflush_r+0x1a>
 801170c:	4643      	mov	r3, r8
 801170e:	463a      	mov	r2, r7
 8011710:	6a21      	ldr	r1, [r4, #32]
 8011712:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011714:	4628      	mov	r0, r5
 8011716:	47b0      	blx	r6
 8011718:	2800      	cmp	r0, #0
 801171a:	dc06      	bgt.n	801172a <__sflush_r+0xfe>
 801171c:	89a3      	ldrh	r3, [r4, #12]
 801171e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011722:	81a3      	strh	r3, [r4, #12]
 8011724:	f04f 30ff 	mov.w	r0, #4294967295
 8011728:	e78e      	b.n	8011648 <__sflush_r+0x1c>
 801172a:	4407      	add	r7, r0
 801172c:	eba8 0800 	sub.w	r8, r8, r0
 8011730:	e7e9      	b.n	8011706 <__sflush_r+0xda>
 8011732:	bf00      	nop
 8011734:	20400001 	.word	0x20400001

08011738 <_fflush_r>:
 8011738:	b538      	push	{r3, r4, r5, lr}
 801173a:	690b      	ldr	r3, [r1, #16]
 801173c:	4605      	mov	r5, r0
 801173e:	460c      	mov	r4, r1
 8011740:	b1db      	cbz	r3, 801177a <_fflush_r+0x42>
 8011742:	b118      	cbz	r0, 801174c <_fflush_r+0x14>
 8011744:	6983      	ldr	r3, [r0, #24]
 8011746:	b90b      	cbnz	r3, 801174c <_fflush_r+0x14>
 8011748:	f000 f860 	bl	801180c <__sinit>
 801174c:	4b0c      	ldr	r3, [pc, #48]	; (8011780 <_fflush_r+0x48>)
 801174e:	429c      	cmp	r4, r3
 8011750:	d109      	bne.n	8011766 <_fflush_r+0x2e>
 8011752:	686c      	ldr	r4, [r5, #4]
 8011754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011758:	b17b      	cbz	r3, 801177a <_fflush_r+0x42>
 801175a:	4621      	mov	r1, r4
 801175c:	4628      	mov	r0, r5
 801175e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011762:	f7ff bf63 	b.w	801162c <__sflush_r>
 8011766:	4b07      	ldr	r3, [pc, #28]	; (8011784 <_fflush_r+0x4c>)
 8011768:	429c      	cmp	r4, r3
 801176a:	d101      	bne.n	8011770 <_fflush_r+0x38>
 801176c:	68ac      	ldr	r4, [r5, #8]
 801176e:	e7f1      	b.n	8011754 <_fflush_r+0x1c>
 8011770:	4b05      	ldr	r3, [pc, #20]	; (8011788 <_fflush_r+0x50>)
 8011772:	429c      	cmp	r4, r3
 8011774:	bf08      	it	eq
 8011776:	68ec      	ldreq	r4, [r5, #12]
 8011778:	e7ec      	b.n	8011754 <_fflush_r+0x1c>
 801177a:	2000      	movs	r0, #0
 801177c:	bd38      	pop	{r3, r4, r5, pc}
 801177e:	bf00      	nop
 8011780:	08012dc8 	.word	0x08012dc8
 8011784:	08012de8 	.word	0x08012de8
 8011788:	08012da8 	.word	0x08012da8

0801178c <std>:
 801178c:	2300      	movs	r3, #0
 801178e:	b510      	push	{r4, lr}
 8011790:	4604      	mov	r4, r0
 8011792:	e9c0 3300 	strd	r3, r3, [r0]
 8011796:	6083      	str	r3, [r0, #8]
 8011798:	8181      	strh	r1, [r0, #12]
 801179a:	6643      	str	r3, [r0, #100]	; 0x64
 801179c:	81c2      	strh	r2, [r0, #14]
 801179e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80117a2:	6183      	str	r3, [r0, #24]
 80117a4:	4619      	mov	r1, r3
 80117a6:	2208      	movs	r2, #8
 80117a8:	305c      	adds	r0, #92	; 0x5c
 80117aa:	f7ff fd8c 	bl	80112c6 <memset>
 80117ae:	4b05      	ldr	r3, [pc, #20]	; (80117c4 <std+0x38>)
 80117b0:	6263      	str	r3, [r4, #36]	; 0x24
 80117b2:	4b05      	ldr	r3, [pc, #20]	; (80117c8 <std+0x3c>)
 80117b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80117b6:	4b05      	ldr	r3, [pc, #20]	; (80117cc <std+0x40>)
 80117b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80117ba:	4b05      	ldr	r3, [pc, #20]	; (80117d0 <std+0x44>)
 80117bc:	6224      	str	r4, [r4, #32]
 80117be:	6323      	str	r3, [r4, #48]	; 0x30
 80117c0:	bd10      	pop	{r4, pc}
 80117c2:	bf00      	nop
 80117c4:	0801238d 	.word	0x0801238d
 80117c8:	080123af 	.word	0x080123af
 80117cc:	080123e7 	.word	0x080123e7
 80117d0:	0801240b 	.word	0x0801240b

080117d4 <_cleanup_r>:
 80117d4:	4901      	ldr	r1, [pc, #4]	; (80117dc <_cleanup_r+0x8>)
 80117d6:	f000 b885 	b.w	80118e4 <_fwalk_reent>
 80117da:	bf00      	nop
 80117dc:	08011739 	.word	0x08011739

080117e0 <__sfmoreglue>:
 80117e0:	b570      	push	{r4, r5, r6, lr}
 80117e2:	1e4a      	subs	r2, r1, #1
 80117e4:	2568      	movs	r5, #104	; 0x68
 80117e6:	4355      	muls	r5, r2
 80117e8:	460e      	mov	r6, r1
 80117ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80117ee:	f000 f949 	bl	8011a84 <_malloc_r>
 80117f2:	4604      	mov	r4, r0
 80117f4:	b140      	cbz	r0, 8011808 <__sfmoreglue+0x28>
 80117f6:	2100      	movs	r1, #0
 80117f8:	e9c0 1600 	strd	r1, r6, [r0]
 80117fc:	300c      	adds	r0, #12
 80117fe:	60a0      	str	r0, [r4, #8]
 8011800:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011804:	f7ff fd5f 	bl	80112c6 <memset>
 8011808:	4620      	mov	r0, r4
 801180a:	bd70      	pop	{r4, r5, r6, pc}

0801180c <__sinit>:
 801180c:	6983      	ldr	r3, [r0, #24]
 801180e:	b510      	push	{r4, lr}
 8011810:	4604      	mov	r4, r0
 8011812:	bb33      	cbnz	r3, 8011862 <__sinit+0x56>
 8011814:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011818:	6503      	str	r3, [r0, #80]	; 0x50
 801181a:	4b12      	ldr	r3, [pc, #72]	; (8011864 <__sinit+0x58>)
 801181c:	4a12      	ldr	r2, [pc, #72]	; (8011868 <__sinit+0x5c>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	6282      	str	r2, [r0, #40]	; 0x28
 8011822:	4298      	cmp	r0, r3
 8011824:	bf04      	itt	eq
 8011826:	2301      	moveq	r3, #1
 8011828:	6183      	streq	r3, [r0, #24]
 801182a:	f000 f81f 	bl	801186c <__sfp>
 801182e:	6060      	str	r0, [r4, #4]
 8011830:	4620      	mov	r0, r4
 8011832:	f000 f81b 	bl	801186c <__sfp>
 8011836:	60a0      	str	r0, [r4, #8]
 8011838:	4620      	mov	r0, r4
 801183a:	f000 f817 	bl	801186c <__sfp>
 801183e:	2200      	movs	r2, #0
 8011840:	60e0      	str	r0, [r4, #12]
 8011842:	2104      	movs	r1, #4
 8011844:	6860      	ldr	r0, [r4, #4]
 8011846:	f7ff ffa1 	bl	801178c <std>
 801184a:	2201      	movs	r2, #1
 801184c:	2109      	movs	r1, #9
 801184e:	68a0      	ldr	r0, [r4, #8]
 8011850:	f7ff ff9c 	bl	801178c <std>
 8011854:	2202      	movs	r2, #2
 8011856:	2112      	movs	r1, #18
 8011858:	68e0      	ldr	r0, [r4, #12]
 801185a:	f7ff ff97 	bl	801178c <std>
 801185e:	2301      	movs	r3, #1
 8011860:	61a3      	str	r3, [r4, #24]
 8011862:	bd10      	pop	{r4, pc}
 8011864:	08012da4 	.word	0x08012da4
 8011868:	080117d5 	.word	0x080117d5

0801186c <__sfp>:
 801186c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801186e:	4b1b      	ldr	r3, [pc, #108]	; (80118dc <__sfp+0x70>)
 8011870:	681e      	ldr	r6, [r3, #0]
 8011872:	69b3      	ldr	r3, [r6, #24]
 8011874:	4607      	mov	r7, r0
 8011876:	b913      	cbnz	r3, 801187e <__sfp+0x12>
 8011878:	4630      	mov	r0, r6
 801187a:	f7ff ffc7 	bl	801180c <__sinit>
 801187e:	3648      	adds	r6, #72	; 0x48
 8011880:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011884:	3b01      	subs	r3, #1
 8011886:	d503      	bpl.n	8011890 <__sfp+0x24>
 8011888:	6833      	ldr	r3, [r6, #0]
 801188a:	b133      	cbz	r3, 801189a <__sfp+0x2e>
 801188c:	6836      	ldr	r6, [r6, #0]
 801188e:	e7f7      	b.n	8011880 <__sfp+0x14>
 8011890:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011894:	b16d      	cbz	r5, 80118b2 <__sfp+0x46>
 8011896:	3468      	adds	r4, #104	; 0x68
 8011898:	e7f4      	b.n	8011884 <__sfp+0x18>
 801189a:	2104      	movs	r1, #4
 801189c:	4638      	mov	r0, r7
 801189e:	f7ff ff9f 	bl	80117e0 <__sfmoreglue>
 80118a2:	6030      	str	r0, [r6, #0]
 80118a4:	2800      	cmp	r0, #0
 80118a6:	d1f1      	bne.n	801188c <__sfp+0x20>
 80118a8:	230c      	movs	r3, #12
 80118aa:	603b      	str	r3, [r7, #0]
 80118ac:	4604      	mov	r4, r0
 80118ae:	4620      	mov	r0, r4
 80118b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118b2:	4b0b      	ldr	r3, [pc, #44]	; (80118e0 <__sfp+0x74>)
 80118b4:	6665      	str	r5, [r4, #100]	; 0x64
 80118b6:	e9c4 5500 	strd	r5, r5, [r4]
 80118ba:	60a5      	str	r5, [r4, #8]
 80118bc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80118c0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80118c4:	2208      	movs	r2, #8
 80118c6:	4629      	mov	r1, r5
 80118c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80118cc:	f7ff fcfb 	bl	80112c6 <memset>
 80118d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80118d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80118d8:	e7e9      	b.n	80118ae <__sfp+0x42>
 80118da:	bf00      	nop
 80118dc:	08012da4 	.word	0x08012da4
 80118e0:	ffff0001 	.word	0xffff0001

080118e4 <_fwalk_reent>:
 80118e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118e8:	4680      	mov	r8, r0
 80118ea:	4689      	mov	r9, r1
 80118ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80118f0:	2600      	movs	r6, #0
 80118f2:	b914      	cbnz	r4, 80118fa <_fwalk_reent+0x16>
 80118f4:	4630      	mov	r0, r6
 80118f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118fa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80118fe:	3f01      	subs	r7, #1
 8011900:	d501      	bpl.n	8011906 <_fwalk_reent+0x22>
 8011902:	6824      	ldr	r4, [r4, #0]
 8011904:	e7f5      	b.n	80118f2 <_fwalk_reent+0xe>
 8011906:	89ab      	ldrh	r3, [r5, #12]
 8011908:	2b01      	cmp	r3, #1
 801190a:	d907      	bls.n	801191c <_fwalk_reent+0x38>
 801190c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011910:	3301      	adds	r3, #1
 8011912:	d003      	beq.n	801191c <_fwalk_reent+0x38>
 8011914:	4629      	mov	r1, r5
 8011916:	4640      	mov	r0, r8
 8011918:	47c8      	blx	r9
 801191a:	4306      	orrs	r6, r0
 801191c:	3568      	adds	r5, #104	; 0x68
 801191e:	e7ee      	b.n	80118fe <_fwalk_reent+0x1a>

08011920 <__swhatbuf_r>:
 8011920:	b570      	push	{r4, r5, r6, lr}
 8011922:	460e      	mov	r6, r1
 8011924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011928:	2900      	cmp	r1, #0
 801192a:	b096      	sub	sp, #88	; 0x58
 801192c:	4614      	mov	r4, r2
 801192e:	461d      	mov	r5, r3
 8011930:	da07      	bge.n	8011942 <__swhatbuf_r+0x22>
 8011932:	2300      	movs	r3, #0
 8011934:	602b      	str	r3, [r5, #0]
 8011936:	89b3      	ldrh	r3, [r6, #12]
 8011938:	061a      	lsls	r2, r3, #24
 801193a:	d410      	bmi.n	801195e <__swhatbuf_r+0x3e>
 801193c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011940:	e00e      	b.n	8011960 <__swhatbuf_r+0x40>
 8011942:	466a      	mov	r2, sp
 8011944:	f000 fd88 	bl	8012458 <_fstat_r>
 8011948:	2800      	cmp	r0, #0
 801194a:	dbf2      	blt.n	8011932 <__swhatbuf_r+0x12>
 801194c:	9a01      	ldr	r2, [sp, #4]
 801194e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011952:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011956:	425a      	negs	r2, r3
 8011958:	415a      	adcs	r2, r3
 801195a:	602a      	str	r2, [r5, #0]
 801195c:	e7ee      	b.n	801193c <__swhatbuf_r+0x1c>
 801195e:	2340      	movs	r3, #64	; 0x40
 8011960:	2000      	movs	r0, #0
 8011962:	6023      	str	r3, [r4, #0]
 8011964:	b016      	add	sp, #88	; 0x58
 8011966:	bd70      	pop	{r4, r5, r6, pc}

08011968 <__smakebuf_r>:
 8011968:	898b      	ldrh	r3, [r1, #12]
 801196a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801196c:	079d      	lsls	r5, r3, #30
 801196e:	4606      	mov	r6, r0
 8011970:	460c      	mov	r4, r1
 8011972:	d507      	bpl.n	8011984 <__smakebuf_r+0x1c>
 8011974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011978:	6023      	str	r3, [r4, #0]
 801197a:	6123      	str	r3, [r4, #16]
 801197c:	2301      	movs	r3, #1
 801197e:	6163      	str	r3, [r4, #20]
 8011980:	b002      	add	sp, #8
 8011982:	bd70      	pop	{r4, r5, r6, pc}
 8011984:	ab01      	add	r3, sp, #4
 8011986:	466a      	mov	r2, sp
 8011988:	f7ff ffca 	bl	8011920 <__swhatbuf_r>
 801198c:	9900      	ldr	r1, [sp, #0]
 801198e:	4605      	mov	r5, r0
 8011990:	4630      	mov	r0, r6
 8011992:	f000 f877 	bl	8011a84 <_malloc_r>
 8011996:	b948      	cbnz	r0, 80119ac <__smakebuf_r+0x44>
 8011998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801199c:	059a      	lsls	r2, r3, #22
 801199e:	d4ef      	bmi.n	8011980 <__smakebuf_r+0x18>
 80119a0:	f023 0303 	bic.w	r3, r3, #3
 80119a4:	f043 0302 	orr.w	r3, r3, #2
 80119a8:	81a3      	strh	r3, [r4, #12]
 80119aa:	e7e3      	b.n	8011974 <__smakebuf_r+0xc>
 80119ac:	4b0d      	ldr	r3, [pc, #52]	; (80119e4 <__smakebuf_r+0x7c>)
 80119ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80119b0:	89a3      	ldrh	r3, [r4, #12]
 80119b2:	6020      	str	r0, [r4, #0]
 80119b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119b8:	81a3      	strh	r3, [r4, #12]
 80119ba:	9b00      	ldr	r3, [sp, #0]
 80119bc:	6163      	str	r3, [r4, #20]
 80119be:	9b01      	ldr	r3, [sp, #4]
 80119c0:	6120      	str	r0, [r4, #16]
 80119c2:	b15b      	cbz	r3, 80119dc <__smakebuf_r+0x74>
 80119c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119c8:	4630      	mov	r0, r6
 80119ca:	f000 fd57 	bl	801247c <_isatty_r>
 80119ce:	b128      	cbz	r0, 80119dc <__smakebuf_r+0x74>
 80119d0:	89a3      	ldrh	r3, [r4, #12]
 80119d2:	f023 0303 	bic.w	r3, r3, #3
 80119d6:	f043 0301 	orr.w	r3, r3, #1
 80119da:	81a3      	strh	r3, [r4, #12]
 80119dc:	89a3      	ldrh	r3, [r4, #12]
 80119de:	431d      	orrs	r5, r3
 80119e0:	81a5      	strh	r5, [r4, #12]
 80119e2:	e7cd      	b.n	8011980 <__smakebuf_r+0x18>
 80119e4:	080117d5 	.word	0x080117d5

080119e8 <_free_r>:
 80119e8:	b538      	push	{r3, r4, r5, lr}
 80119ea:	4605      	mov	r5, r0
 80119ec:	2900      	cmp	r1, #0
 80119ee:	d045      	beq.n	8011a7c <_free_r+0x94>
 80119f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119f4:	1f0c      	subs	r4, r1, #4
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	bfb8      	it	lt
 80119fa:	18e4      	addlt	r4, r4, r3
 80119fc:	f000 fd79 	bl	80124f2 <__malloc_lock>
 8011a00:	4a1f      	ldr	r2, [pc, #124]	; (8011a80 <_free_r+0x98>)
 8011a02:	6813      	ldr	r3, [r2, #0]
 8011a04:	4610      	mov	r0, r2
 8011a06:	b933      	cbnz	r3, 8011a16 <_free_r+0x2e>
 8011a08:	6063      	str	r3, [r4, #4]
 8011a0a:	6014      	str	r4, [r2, #0]
 8011a0c:	4628      	mov	r0, r5
 8011a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a12:	f000 bd6f 	b.w	80124f4 <__malloc_unlock>
 8011a16:	42a3      	cmp	r3, r4
 8011a18:	d90c      	bls.n	8011a34 <_free_r+0x4c>
 8011a1a:	6821      	ldr	r1, [r4, #0]
 8011a1c:	1862      	adds	r2, r4, r1
 8011a1e:	4293      	cmp	r3, r2
 8011a20:	bf04      	itt	eq
 8011a22:	681a      	ldreq	r2, [r3, #0]
 8011a24:	685b      	ldreq	r3, [r3, #4]
 8011a26:	6063      	str	r3, [r4, #4]
 8011a28:	bf04      	itt	eq
 8011a2a:	1852      	addeq	r2, r2, r1
 8011a2c:	6022      	streq	r2, [r4, #0]
 8011a2e:	6004      	str	r4, [r0, #0]
 8011a30:	e7ec      	b.n	8011a0c <_free_r+0x24>
 8011a32:	4613      	mov	r3, r2
 8011a34:	685a      	ldr	r2, [r3, #4]
 8011a36:	b10a      	cbz	r2, 8011a3c <_free_r+0x54>
 8011a38:	42a2      	cmp	r2, r4
 8011a3a:	d9fa      	bls.n	8011a32 <_free_r+0x4a>
 8011a3c:	6819      	ldr	r1, [r3, #0]
 8011a3e:	1858      	adds	r0, r3, r1
 8011a40:	42a0      	cmp	r0, r4
 8011a42:	d10b      	bne.n	8011a5c <_free_r+0x74>
 8011a44:	6820      	ldr	r0, [r4, #0]
 8011a46:	4401      	add	r1, r0
 8011a48:	1858      	adds	r0, r3, r1
 8011a4a:	4282      	cmp	r2, r0
 8011a4c:	6019      	str	r1, [r3, #0]
 8011a4e:	d1dd      	bne.n	8011a0c <_free_r+0x24>
 8011a50:	6810      	ldr	r0, [r2, #0]
 8011a52:	6852      	ldr	r2, [r2, #4]
 8011a54:	605a      	str	r2, [r3, #4]
 8011a56:	4401      	add	r1, r0
 8011a58:	6019      	str	r1, [r3, #0]
 8011a5a:	e7d7      	b.n	8011a0c <_free_r+0x24>
 8011a5c:	d902      	bls.n	8011a64 <_free_r+0x7c>
 8011a5e:	230c      	movs	r3, #12
 8011a60:	602b      	str	r3, [r5, #0]
 8011a62:	e7d3      	b.n	8011a0c <_free_r+0x24>
 8011a64:	6820      	ldr	r0, [r4, #0]
 8011a66:	1821      	adds	r1, r4, r0
 8011a68:	428a      	cmp	r2, r1
 8011a6a:	bf04      	itt	eq
 8011a6c:	6811      	ldreq	r1, [r2, #0]
 8011a6e:	6852      	ldreq	r2, [r2, #4]
 8011a70:	6062      	str	r2, [r4, #4]
 8011a72:	bf04      	itt	eq
 8011a74:	1809      	addeq	r1, r1, r0
 8011a76:	6021      	streq	r1, [r4, #0]
 8011a78:	605c      	str	r4, [r3, #4]
 8011a7a:	e7c7      	b.n	8011a0c <_free_r+0x24>
 8011a7c:	bd38      	pop	{r3, r4, r5, pc}
 8011a7e:	bf00      	nop
 8011a80:	20006c98 	.word	0x20006c98

08011a84 <_malloc_r>:
 8011a84:	b570      	push	{r4, r5, r6, lr}
 8011a86:	1ccd      	adds	r5, r1, #3
 8011a88:	f025 0503 	bic.w	r5, r5, #3
 8011a8c:	3508      	adds	r5, #8
 8011a8e:	2d0c      	cmp	r5, #12
 8011a90:	bf38      	it	cc
 8011a92:	250c      	movcc	r5, #12
 8011a94:	2d00      	cmp	r5, #0
 8011a96:	4606      	mov	r6, r0
 8011a98:	db01      	blt.n	8011a9e <_malloc_r+0x1a>
 8011a9a:	42a9      	cmp	r1, r5
 8011a9c:	d903      	bls.n	8011aa6 <_malloc_r+0x22>
 8011a9e:	230c      	movs	r3, #12
 8011aa0:	6033      	str	r3, [r6, #0]
 8011aa2:	2000      	movs	r0, #0
 8011aa4:	bd70      	pop	{r4, r5, r6, pc}
 8011aa6:	f000 fd24 	bl	80124f2 <__malloc_lock>
 8011aaa:	4a21      	ldr	r2, [pc, #132]	; (8011b30 <_malloc_r+0xac>)
 8011aac:	6814      	ldr	r4, [r2, #0]
 8011aae:	4621      	mov	r1, r4
 8011ab0:	b991      	cbnz	r1, 8011ad8 <_malloc_r+0x54>
 8011ab2:	4c20      	ldr	r4, [pc, #128]	; (8011b34 <_malloc_r+0xb0>)
 8011ab4:	6823      	ldr	r3, [r4, #0]
 8011ab6:	b91b      	cbnz	r3, 8011ac0 <_malloc_r+0x3c>
 8011ab8:	4630      	mov	r0, r6
 8011aba:	f000 fc57 	bl	801236c <_sbrk_r>
 8011abe:	6020      	str	r0, [r4, #0]
 8011ac0:	4629      	mov	r1, r5
 8011ac2:	4630      	mov	r0, r6
 8011ac4:	f000 fc52 	bl	801236c <_sbrk_r>
 8011ac8:	1c43      	adds	r3, r0, #1
 8011aca:	d124      	bne.n	8011b16 <_malloc_r+0x92>
 8011acc:	230c      	movs	r3, #12
 8011ace:	6033      	str	r3, [r6, #0]
 8011ad0:	4630      	mov	r0, r6
 8011ad2:	f000 fd0f 	bl	80124f4 <__malloc_unlock>
 8011ad6:	e7e4      	b.n	8011aa2 <_malloc_r+0x1e>
 8011ad8:	680b      	ldr	r3, [r1, #0]
 8011ada:	1b5b      	subs	r3, r3, r5
 8011adc:	d418      	bmi.n	8011b10 <_malloc_r+0x8c>
 8011ade:	2b0b      	cmp	r3, #11
 8011ae0:	d90f      	bls.n	8011b02 <_malloc_r+0x7e>
 8011ae2:	600b      	str	r3, [r1, #0]
 8011ae4:	50cd      	str	r5, [r1, r3]
 8011ae6:	18cc      	adds	r4, r1, r3
 8011ae8:	4630      	mov	r0, r6
 8011aea:	f000 fd03 	bl	80124f4 <__malloc_unlock>
 8011aee:	f104 000b 	add.w	r0, r4, #11
 8011af2:	1d23      	adds	r3, r4, #4
 8011af4:	f020 0007 	bic.w	r0, r0, #7
 8011af8:	1ac3      	subs	r3, r0, r3
 8011afa:	d0d3      	beq.n	8011aa4 <_malloc_r+0x20>
 8011afc:	425a      	negs	r2, r3
 8011afe:	50e2      	str	r2, [r4, r3]
 8011b00:	e7d0      	b.n	8011aa4 <_malloc_r+0x20>
 8011b02:	428c      	cmp	r4, r1
 8011b04:	684b      	ldr	r3, [r1, #4]
 8011b06:	bf16      	itet	ne
 8011b08:	6063      	strne	r3, [r4, #4]
 8011b0a:	6013      	streq	r3, [r2, #0]
 8011b0c:	460c      	movne	r4, r1
 8011b0e:	e7eb      	b.n	8011ae8 <_malloc_r+0x64>
 8011b10:	460c      	mov	r4, r1
 8011b12:	6849      	ldr	r1, [r1, #4]
 8011b14:	e7cc      	b.n	8011ab0 <_malloc_r+0x2c>
 8011b16:	1cc4      	adds	r4, r0, #3
 8011b18:	f024 0403 	bic.w	r4, r4, #3
 8011b1c:	42a0      	cmp	r0, r4
 8011b1e:	d005      	beq.n	8011b2c <_malloc_r+0xa8>
 8011b20:	1a21      	subs	r1, r4, r0
 8011b22:	4630      	mov	r0, r6
 8011b24:	f000 fc22 	bl	801236c <_sbrk_r>
 8011b28:	3001      	adds	r0, #1
 8011b2a:	d0cf      	beq.n	8011acc <_malloc_r+0x48>
 8011b2c:	6025      	str	r5, [r4, #0]
 8011b2e:	e7db      	b.n	8011ae8 <_malloc_r+0x64>
 8011b30:	20006c98 	.word	0x20006c98
 8011b34:	20006c9c 	.word	0x20006c9c

08011b38 <__ssputs_r>:
 8011b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b3c:	688e      	ldr	r6, [r1, #8]
 8011b3e:	429e      	cmp	r6, r3
 8011b40:	4682      	mov	sl, r0
 8011b42:	460c      	mov	r4, r1
 8011b44:	4690      	mov	r8, r2
 8011b46:	4699      	mov	r9, r3
 8011b48:	d837      	bhi.n	8011bba <__ssputs_r+0x82>
 8011b4a:	898a      	ldrh	r2, [r1, #12]
 8011b4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011b50:	d031      	beq.n	8011bb6 <__ssputs_r+0x7e>
 8011b52:	6825      	ldr	r5, [r4, #0]
 8011b54:	6909      	ldr	r1, [r1, #16]
 8011b56:	1a6f      	subs	r7, r5, r1
 8011b58:	6965      	ldr	r5, [r4, #20]
 8011b5a:	2302      	movs	r3, #2
 8011b5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b60:	fb95 f5f3 	sdiv	r5, r5, r3
 8011b64:	f109 0301 	add.w	r3, r9, #1
 8011b68:	443b      	add	r3, r7
 8011b6a:	429d      	cmp	r5, r3
 8011b6c:	bf38      	it	cc
 8011b6e:	461d      	movcc	r5, r3
 8011b70:	0553      	lsls	r3, r2, #21
 8011b72:	d530      	bpl.n	8011bd6 <__ssputs_r+0x9e>
 8011b74:	4629      	mov	r1, r5
 8011b76:	f7ff ff85 	bl	8011a84 <_malloc_r>
 8011b7a:	4606      	mov	r6, r0
 8011b7c:	b950      	cbnz	r0, 8011b94 <__ssputs_r+0x5c>
 8011b7e:	230c      	movs	r3, #12
 8011b80:	f8ca 3000 	str.w	r3, [sl]
 8011b84:	89a3      	ldrh	r3, [r4, #12]
 8011b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b8a:	81a3      	strh	r3, [r4, #12]
 8011b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b94:	463a      	mov	r2, r7
 8011b96:	6921      	ldr	r1, [r4, #16]
 8011b98:	f7ff fb8a 	bl	80112b0 <memcpy>
 8011b9c:	89a3      	ldrh	r3, [r4, #12]
 8011b9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ba6:	81a3      	strh	r3, [r4, #12]
 8011ba8:	6126      	str	r6, [r4, #16]
 8011baa:	6165      	str	r5, [r4, #20]
 8011bac:	443e      	add	r6, r7
 8011bae:	1bed      	subs	r5, r5, r7
 8011bb0:	6026      	str	r6, [r4, #0]
 8011bb2:	60a5      	str	r5, [r4, #8]
 8011bb4:	464e      	mov	r6, r9
 8011bb6:	454e      	cmp	r6, r9
 8011bb8:	d900      	bls.n	8011bbc <__ssputs_r+0x84>
 8011bba:	464e      	mov	r6, r9
 8011bbc:	4632      	mov	r2, r6
 8011bbe:	4641      	mov	r1, r8
 8011bc0:	6820      	ldr	r0, [r4, #0]
 8011bc2:	f000 fc7d 	bl	80124c0 <memmove>
 8011bc6:	68a3      	ldr	r3, [r4, #8]
 8011bc8:	1b9b      	subs	r3, r3, r6
 8011bca:	60a3      	str	r3, [r4, #8]
 8011bcc:	6823      	ldr	r3, [r4, #0]
 8011bce:	441e      	add	r6, r3
 8011bd0:	6026      	str	r6, [r4, #0]
 8011bd2:	2000      	movs	r0, #0
 8011bd4:	e7dc      	b.n	8011b90 <__ssputs_r+0x58>
 8011bd6:	462a      	mov	r2, r5
 8011bd8:	f000 fc8d 	bl	80124f6 <_realloc_r>
 8011bdc:	4606      	mov	r6, r0
 8011bde:	2800      	cmp	r0, #0
 8011be0:	d1e2      	bne.n	8011ba8 <__ssputs_r+0x70>
 8011be2:	6921      	ldr	r1, [r4, #16]
 8011be4:	4650      	mov	r0, sl
 8011be6:	f7ff feff 	bl	80119e8 <_free_r>
 8011bea:	e7c8      	b.n	8011b7e <__ssputs_r+0x46>

08011bec <_svfiprintf_r>:
 8011bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bf0:	461d      	mov	r5, r3
 8011bf2:	898b      	ldrh	r3, [r1, #12]
 8011bf4:	061f      	lsls	r7, r3, #24
 8011bf6:	b09d      	sub	sp, #116	; 0x74
 8011bf8:	4680      	mov	r8, r0
 8011bfa:	460c      	mov	r4, r1
 8011bfc:	4616      	mov	r6, r2
 8011bfe:	d50f      	bpl.n	8011c20 <_svfiprintf_r+0x34>
 8011c00:	690b      	ldr	r3, [r1, #16]
 8011c02:	b96b      	cbnz	r3, 8011c20 <_svfiprintf_r+0x34>
 8011c04:	2140      	movs	r1, #64	; 0x40
 8011c06:	f7ff ff3d 	bl	8011a84 <_malloc_r>
 8011c0a:	6020      	str	r0, [r4, #0]
 8011c0c:	6120      	str	r0, [r4, #16]
 8011c0e:	b928      	cbnz	r0, 8011c1c <_svfiprintf_r+0x30>
 8011c10:	230c      	movs	r3, #12
 8011c12:	f8c8 3000 	str.w	r3, [r8]
 8011c16:	f04f 30ff 	mov.w	r0, #4294967295
 8011c1a:	e0c8      	b.n	8011dae <_svfiprintf_r+0x1c2>
 8011c1c:	2340      	movs	r3, #64	; 0x40
 8011c1e:	6163      	str	r3, [r4, #20]
 8011c20:	2300      	movs	r3, #0
 8011c22:	9309      	str	r3, [sp, #36]	; 0x24
 8011c24:	2320      	movs	r3, #32
 8011c26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c2a:	2330      	movs	r3, #48	; 0x30
 8011c2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c30:	9503      	str	r5, [sp, #12]
 8011c32:	f04f 0b01 	mov.w	fp, #1
 8011c36:	4637      	mov	r7, r6
 8011c38:	463d      	mov	r5, r7
 8011c3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011c3e:	b10b      	cbz	r3, 8011c44 <_svfiprintf_r+0x58>
 8011c40:	2b25      	cmp	r3, #37	; 0x25
 8011c42:	d13e      	bne.n	8011cc2 <_svfiprintf_r+0xd6>
 8011c44:	ebb7 0a06 	subs.w	sl, r7, r6
 8011c48:	d00b      	beq.n	8011c62 <_svfiprintf_r+0x76>
 8011c4a:	4653      	mov	r3, sl
 8011c4c:	4632      	mov	r2, r6
 8011c4e:	4621      	mov	r1, r4
 8011c50:	4640      	mov	r0, r8
 8011c52:	f7ff ff71 	bl	8011b38 <__ssputs_r>
 8011c56:	3001      	adds	r0, #1
 8011c58:	f000 80a4 	beq.w	8011da4 <_svfiprintf_r+0x1b8>
 8011c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c5e:	4453      	add	r3, sl
 8011c60:	9309      	str	r3, [sp, #36]	; 0x24
 8011c62:	783b      	ldrb	r3, [r7, #0]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	f000 809d 	beq.w	8011da4 <_svfiprintf_r+0x1b8>
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8011c70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c74:	9304      	str	r3, [sp, #16]
 8011c76:	9307      	str	r3, [sp, #28]
 8011c78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c7c:	931a      	str	r3, [sp, #104]	; 0x68
 8011c7e:	462f      	mov	r7, r5
 8011c80:	2205      	movs	r2, #5
 8011c82:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011c86:	4850      	ldr	r0, [pc, #320]	; (8011dc8 <_svfiprintf_r+0x1dc>)
 8011c88:	f7ee fa92 	bl	80001b0 <memchr>
 8011c8c:	9b04      	ldr	r3, [sp, #16]
 8011c8e:	b9d0      	cbnz	r0, 8011cc6 <_svfiprintf_r+0xda>
 8011c90:	06d9      	lsls	r1, r3, #27
 8011c92:	bf44      	itt	mi
 8011c94:	2220      	movmi	r2, #32
 8011c96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011c9a:	071a      	lsls	r2, r3, #28
 8011c9c:	bf44      	itt	mi
 8011c9e:	222b      	movmi	r2, #43	; 0x2b
 8011ca0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011ca4:	782a      	ldrb	r2, [r5, #0]
 8011ca6:	2a2a      	cmp	r2, #42	; 0x2a
 8011ca8:	d015      	beq.n	8011cd6 <_svfiprintf_r+0xea>
 8011caa:	9a07      	ldr	r2, [sp, #28]
 8011cac:	462f      	mov	r7, r5
 8011cae:	2000      	movs	r0, #0
 8011cb0:	250a      	movs	r5, #10
 8011cb2:	4639      	mov	r1, r7
 8011cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011cb8:	3b30      	subs	r3, #48	; 0x30
 8011cba:	2b09      	cmp	r3, #9
 8011cbc:	d94d      	bls.n	8011d5a <_svfiprintf_r+0x16e>
 8011cbe:	b1b8      	cbz	r0, 8011cf0 <_svfiprintf_r+0x104>
 8011cc0:	e00f      	b.n	8011ce2 <_svfiprintf_r+0xf6>
 8011cc2:	462f      	mov	r7, r5
 8011cc4:	e7b8      	b.n	8011c38 <_svfiprintf_r+0x4c>
 8011cc6:	4a40      	ldr	r2, [pc, #256]	; (8011dc8 <_svfiprintf_r+0x1dc>)
 8011cc8:	1a80      	subs	r0, r0, r2
 8011cca:	fa0b f000 	lsl.w	r0, fp, r0
 8011cce:	4318      	orrs	r0, r3
 8011cd0:	9004      	str	r0, [sp, #16]
 8011cd2:	463d      	mov	r5, r7
 8011cd4:	e7d3      	b.n	8011c7e <_svfiprintf_r+0x92>
 8011cd6:	9a03      	ldr	r2, [sp, #12]
 8011cd8:	1d11      	adds	r1, r2, #4
 8011cda:	6812      	ldr	r2, [r2, #0]
 8011cdc:	9103      	str	r1, [sp, #12]
 8011cde:	2a00      	cmp	r2, #0
 8011ce0:	db01      	blt.n	8011ce6 <_svfiprintf_r+0xfa>
 8011ce2:	9207      	str	r2, [sp, #28]
 8011ce4:	e004      	b.n	8011cf0 <_svfiprintf_r+0x104>
 8011ce6:	4252      	negs	r2, r2
 8011ce8:	f043 0302 	orr.w	r3, r3, #2
 8011cec:	9207      	str	r2, [sp, #28]
 8011cee:	9304      	str	r3, [sp, #16]
 8011cf0:	783b      	ldrb	r3, [r7, #0]
 8011cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8011cf4:	d10c      	bne.n	8011d10 <_svfiprintf_r+0x124>
 8011cf6:	787b      	ldrb	r3, [r7, #1]
 8011cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8011cfa:	d133      	bne.n	8011d64 <_svfiprintf_r+0x178>
 8011cfc:	9b03      	ldr	r3, [sp, #12]
 8011cfe:	1d1a      	adds	r2, r3, #4
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	9203      	str	r2, [sp, #12]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	bfb8      	it	lt
 8011d08:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d0c:	3702      	adds	r7, #2
 8011d0e:	9305      	str	r3, [sp, #20]
 8011d10:	4d2e      	ldr	r5, [pc, #184]	; (8011dcc <_svfiprintf_r+0x1e0>)
 8011d12:	7839      	ldrb	r1, [r7, #0]
 8011d14:	2203      	movs	r2, #3
 8011d16:	4628      	mov	r0, r5
 8011d18:	f7ee fa4a 	bl	80001b0 <memchr>
 8011d1c:	b138      	cbz	r0, 8011d2e <_svfiprintf_r+0x142>
 8011d1e:	2340      	movs	r3, #64	; 0x40
 8011d20:	1b40      	subs	r0, r0, r5
 8011d22:	fa03 f000 	lsl.w	r0, r3, r0
 8011d26:	9b04      	ldr	r3, [sp, #16]
 8011d28:	4303      	orrs	r3, r0
 8011d2a:	3701      	adds	r7, #1
 8011d2c:	9304      	str	r3, [sp, #16]
 8011d2e:	7839      	ldrb	r1, [r7, #0]
 8011d30:	4827      	ldr	r0, [pc, #156]	; (8011dd0 <_svfiprintf_r+0x1e4>)
 8011d32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d36:	2206      	movs	r2, #6
 8011d38:	1c7e      	adds	r6, r7, #1
 8011d3a:	f7ee fa39 	bl	80001b0 <memchr>
 8011d3e:	2800      	cmp	r0, #0
 8011d40:	d038      	beq.n	8011db4 <_svfiprintf_r+0x1c8>
 8011d42:	4b24      	ldr	r3, [pc, #144]	; (8011dd4 <_svfiprintf_r+0x1e8>)
 8011d44:	bb13      	cbnz	r3, 8011d8c <_svfiprintf_r+0x1a0>
 8011d46:	9b03      	ldr	r3, [sp, #12]
 8011d48:	3307      	adds	r3, #7
 8011d4a:	f023 0307 	bic.w	r3, r3, #7
 8011d4e:	3308      	adds	r3, #8
 8011d50:	9303      	str	r3, [sp, #12]
 8011d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d54:	444b      	add	r3, r9
 8011d56:	9309      	str	r3, [sp, #36]	; 0x24
 8011d58:	e76d      	b.n	8011c36 <_svfiprintf_r+0x4a>
 8011d5a:	fb05 3202 	mla	r2, r5, r2, r3
 8011d5e:	2001      	movs	r0, #1
 8011d60:	460f      	mov	r7, r1
 8011d62:	e7a6      	b.n	8011cb2 <_svfiprintf_r+0xc6>
 8011d64:	2300      	movs	r3, #0
 8011d66:	3701      	adds	r7, #1
 8011d68:	9305      	str	r3, [sp, #20]
 8011d6a:	4619      	mov	r1, r3
 8011d6c:	250a      	movs	r5, #10
 8011d6e:	4638      	mov	r0, r7
 8011d70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d74:	3a30      	subs	r2, #48	; 0x30
 8011d76:	2a09      	cmp	r2, #9
 8011d78:	d903      	bls.n	8011d82 <_svfiprintf_r+0x196>
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d0c8      	beq.n	8011d10 <_svfiprintf_r+0x124>
 8011d7e:	9105      	str	r1, [sp, #20]
 8011d80:	e7c6      	b.n	8011d10 <_svfiprintf_r+0x124>
 8011d82:	fb05 2101 	mla	r1, r5, r1, r2
 8011d86:	2301      	movs	r3, #1
 8011d88:	4607      	mov	r7, r0
 8011d8a:	e7f0      	b.n	8011d6e <_svfiprintf_r+0x182>
 8011d8c:	ab03      	add	r3, sp, #12
 8011d8e:	9300      	str	r3, [sp, #0]
 8011d90:	4622      	mov	r2, r4
 8011d92:	4b11      	ldr	r3, [pc, #68]	; (8011dd8 <_svfiprintf_r+0x1ec>)
 8011d94:	a904      	add	r1, sp, #16
 8011d96:	4640      	mov	r0, r8
 8011d98:	f3af 8000 	nop.w
 8011d9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011da0:	4681      	mov	r9, r0
 8011da2:	d1d6      	bne.n	8011d52 <_svfiprintf_r+0x166>
 8011da4:	89a3      	ldrh	r3, [r4, #12]
 8011da6:	065b      	lsls	r3, r3, #25
 8011da8:	f53f af35 	bmi.w	8011c16 <_svfiprintf_r+0x2a>
 8011dac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011dae:	b01d      	add	sp, #116	; 0x74
 8011db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011db4:	ab03      	add	r3, sp, #12
 8011db6:	9300      	str	r3, [sp, #0]
 8011db8:	4622      	mov	r2, r4
 8011dba:	4b07      	ldr	r3, [pc, #28]	; (8011dd8 <_svfiprintf_r+0x1ec>)
 8011dbc:	a904      	add	r1, sp, #16
 8011dbe:	4640      	mov	r0, r8
 8011dc0:	f000 f9c2 	bl	8012148 <_printf_i>
 8011dc4:	e7ea      	b.n	8011d9c <_svfiprintf_r+0x1b0>
 8011dc6:	bf00      	nop
 8011dc8:	08012e08 	.word	0x08012e08
 8011dcc:	08012e0e 	.word	0x08012e0e
 8011dd0:	08012e12 	.word	0x08012e12
 8011dd4:	00000000 	.word	0x00000000
 8011dd8:	08011b39 	.word	0x08011b39

08011ddc <__sfputc_r>:
 8011ddc:	6893      	ldr	r3, [r2, #8]
 8011dde:	3b01      	subs	r3, #1
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	b410      	push	{r4}
 8011de4:	6093      	str	r3, [r2, #8]
 8011de6:	da08      	bge.n	8011dfa <__sfputc_r+0x1e>
 8011de8:	6994      	ldr	r4, [r2, #24]
 8011dea:	42a3      	cmp	r3, r4
 8011dec:	db01      	blt.n	8011df2 <__sfputc_r+0x16>
 8011dee:	290a      	cmp	r1, #10
 8011df0:	d103      	bne.n	8011dfa <__sfputc_r+0x1e>
 8011df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011df6:	f7ff bb59 	b.w	80114ac <__swbuf_r>
 8011dfa:	6813      	ldr	r3, [r2, #0]
 8011dfc:	1c58      	adds	r0, r3, #1
 8011dfe:	6010      	str	r0, [r2, #0]
 8011e00:	7019      	strb	r1, [r3, #0]
 8011e02:	4608      	mov	r0, r1
 8011e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e08:	4770      	bx	lr

08011e0a <__sfputs_r>:
 8011e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e0c:	4606      	mov	r6, r0
 8011e0e:	460f      	mov	r7, r1
 8011e10:	4614      	mov	r4, r2
 8011e12:	18d5      	adds	r5, r2, r3
 8011e14:	42ac      	cmp	r4, r5
 8011e16:	d101      	bne.n	8011e1c <__sfputs_r+0x12>
 8011e18:	2000      	movs	r0, #0
 8011e1a:	e007      	b.n	8011e2c <__sfputs_r+0x22>
 8011e1c:	463a      	mov	r2, r7
 8011e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e22:	4630      	mov	r0, r6
 8011e24:	f7ff ffda 	bl	8011ddc <__sfputc_r>
 8011e28:	1c43      	adds	r3, r0, #1
 8011e2a:	d1f3      	bne.n	8011e14 <__sfputs_r+0xa>
 8011e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011e30 <_vfiprintf_r>:
 8011e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e34:	460c      	mov	r4, r1
 8011e36:	b09d      	sub	sp, #116	; 0x74
 8011e38:	4617      	mov	r7, r2
 8011e3a:	461d      	mov	r5, r3
 8011e3c:	4606      	mov	r6, r0
 8011e3e:	b118      	cbz	r0, 8011e48 <_vfiprintf_r+0x18>
 8011e40:	6983      	ldr	r3, [r0, #24]
 8011e42:	b90b      	cbnz	r3, 8011e48 <_vfiprintf_r+0x18>
 8011e44:	f7ff fce2 	bl	801180c <__sinit>
 8011e48:	4b7c      	ldr	r3, [pc, #496]	; (801203c <_vfiprintf_r+0x20c>)
 8011e4a:	429c      	cmp	r4, r3
 8011e4c:	d158      	bne.n	8011f00 <_vfiprintf_r+0xd0>
 8011e4e:	6874      	ldr	r4, [r6, #4]
 8011e50:	89a3      	ldrh	r3, [r4, #12]
 8011e52:	0718      	lsls	r0, r3, #28
 8011e54:	d55e      	bpl.n	8011f14 <_vfiprintf_r+0xe4>
 8011e56:	6923      	ldr	r3, [r4, #16]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d05b      	beq.n	8011f14 <_vfiprintf_r+0xe4>
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8011e60:	2320      	movs	r3, #32
 8011e62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e66:	2330      	movs	r3, #48	; 0x30
 8011e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e6c:	9503      	str	r5, [sp, #12]
 8011e6e:	f04f 0b01 	mov.w	fp, #1
 8011e72:	46b8      	mov	r8, r7
 8011e74:	4645      	mov	r5, r8
 8011e76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011e7a:	b10b      	cbz	r3, 8011e80 <_vfiprintf_r+0x50>
 8011e7c:	2b25      	cmp	r3, #37	; 0x25
 8011e7e:	d154      	bne.n	8011f2a <_vfiprintf_r+0xfa>
 8011e80:	ebb8 0a07 	subs.w	sl, r8, r7
 8011e84:	d00b      	beq.n	8011e9e <_vfiprintf_r+0x6e>
 8011e86:	4653      	mov	r3, sl
 8011e88:	463a      	mov	r2, r7
 8011e8a:	4621      	mov	r1, r4
 8011e8c:	4630      	mov	r0, r6
 8011e8e:	f7ff ffbc 	bl	8011e0a <__sfputs_r>
 8011e92:	3001      	adds	r0, #1
 8011e94:	f000 80c2 	beq.w	801201c <_vfiprintf_r+0x1ec>
 8011e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e9a:	4453      	add	r3, sl
 8011e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8011e9e:	f898 3000 	ldrb.w	r3, [r8]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	f000 80ba 	beq.w	801201c <_vfiprintf_r+0x1ec>
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8011eae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011eb2:	9304      	str	r3, [sp, #16]
 8011eb4:	9307      	str	r3, [sp, #28]
 8011eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011eba:	931a      	str	r3, [sp, #104]	; 0x68
 8011ebc:	46a8      	mov	r8, r5
 8011ebe:	2205      	movs	r2, #5
 8011ec0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011ec4:	485e      	ldr	r0, [pc, #376]	; (8012040 <_vfiprintf_r+0x210>)
 8011ec6:	f7ee f973 	bl	80001b0 <memchr>
 8011eca:	9b04      	ldr	r3, [sp, #16]
 8011ecc:	bb78      	cbnz	r0, 8011f2e <_vfiprintf_r+0xfe>
 8011ece:	06d9      	lsls	r1, r3, #27
 8011ed0:	bf44      	itt	mi
 8011ed2:	2220      	movmi	r2, #32
 8011ed4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011ed8:	071a      	lsls	r2, r3, #28
 8011eda:	bf44      	itt	mi
 8011edc:	222b      	movmi	r2, #43	; 0x2b
 8011ede:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011ee2:	782a      	ldrb	r2, [r5, #0]
 8011ee4:	2a2a      	cmp	r2, #42	; 0x2a
 8011ee6:	d02a      	beq.n	8011f3e <_vfiprintf_r+0x10e>
 8011ee8:	9a07      	ldr	r2, [sp, #28]
 8011eea:	46a8      	mov	r8, r5
 8011eec:	2000      	movs	r0, #0
 8011eee:	250a      	movs	r5, #10
 8011ef0:	4641      	mov	r1, r8
 8011ef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ef6:	3b30      	subs	r3, #48	; 0x30
 8011ef8:	2b09      	cmp	r3, #9
 8011efa:	d969      	bls.n	8011fd0 <_vfiprintf_r+0x1a0>
 8011efc:	b360      	cbz	r0, 8011f58 <_vfiprintf_r+0x128>
 8011efe:	e024      	b.n	8011f4a <_vfiprintf_r+0x11a>
 8011f00:	4b50      	ldr	r3, [pc, #320]	; (8012044 <_vfiprintf_r+0x214>)
 8011f02:	429c      	cmp	r4, r3
 8011f04:	d101      	bne.n	8011f0a <_vfiprintf_r+0xda>
 8011f06:	68b4      	ldr	r4, [r6, #8]
 8011f08:	e7a2      	b.n	8011e50 <_vfiprintf_r+0x20>
 8011f0a:	4b4f      	ldr	r3, [pc, #316]	; (8012048 <_vfiprintf_r+0x218>)
 8011f0c:	429c      	cmp	r4, r3
 8011f0e:	bf08      	it	eq
 8011f10:	68f4      	ldreq	r4, [r6, #12]
 8011f12:	e79d      	b.n	8011e50 <_vfiprintf_r+0x20>
 8011f14:	4621      	mov	r1, r4
 8011f16:	4630      	mov	r0, r6
 8011f18:	f7ff fb1a 	bl	8011550 <__swsetup_r>
 8011f1c:	2800      	cmp	r0, #0
 8011f1e:	d09d      	beq.n	8011e5c <_vfiprintf_r+0x2c>
 8011f20:	f04f 30ff 	mov.w	r0, #4294967295
 8011f24:	b01d      	add	sp, #116	; 0x74
 8011f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f2a:	46a8      	mov	r8, r5
 8011f2c:	e7a2      	b.n	8011e74 <_vfiprintf_r+0x44>
 8011f2e:	4a44      	ldr	r2, [pc, #272]	; (8012040 <_vfiprintf_r+0x210>)
 8011f30:	1a80      	subs	r0, r0, r2
 8011f32:	fa0b f000 	lsl.w	r0, fp, r0
 8011f36:	4318      	orrs	r0, r3
 8011f38:	9004      	str	r0, [sp, #16]
 8011f3a:	4645      	mov	r5, r8
 8011f3c:	e7be      	b.n	8011ebc <_vfiprintf_r+0x8c>
 8011f3e:	9a03      	ldr	r2, [sp, #12]
 8011f40:	1d11      	adds	r1, r2, #4
 8011f42:	6812      	ldr	r2, [r2, #0]
 8011f44:	9103      	str	r1, [sp, #12]
 8011f46:	2a00      	cmp	r2, #0
 8011f48:	db01      	blt.n	8011f4e <_vfiprintf_r+0x11e>
 8011f4a:	9207      	str	r2, [sp, #28]
 8011f4c:	e004      	b.n	8011f58 <_vfiprintf_r+0x128>
 8011f4e:	4252      	negs	r2, r2
 8011f50:	f043 0302 	orr.w	r3, r3, #2
 8011f54:	9207      	str	r2, [sp, #28]
 8011f56:	9304      	str	r3, [sp, #16]
 8011f58:	f898 3000 	ldrb.w	r3, [r8]
 8011f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8011f5e:	d10e      	bne.n	8011f7e <_vfiprintf_r+0x14e>
 8011f60:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011f64:	2b2a      	cmp	r3, #42	; 0x2a
 8011f66:	d138      	bne.n	8011fda <_vfiprintf_r+0x1aa>
 8011f68:	9b03      	ldr	r3, [sp, #12]
 8011f6a:	1d1a      	adds	r2, r3, #4
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	9203      	str	r2, [sp, #12]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	bfb8      	it	lt
 8011f74:	f04f 33ff 	movlt.w	r3, #4294967295
 8011f78:	f108 0802 	add.w	r8, r8, #2
 8011f7c:	9305      	str	r3, [sp, #20]
 8011f7e:	4d33      	ldr	r5, [pc, #204]	; (801204c <_vfiprintf_r+0x21c>)
 8011f80:	f898 1000 	ldrb.w	r1, [r8]
 8011f84:	2203      	movs	r2, #3
 8011f86:	4628      	mov	r0, r5
 8011f88:	f7ee f912 	bl	80001b0 <memchr>
 8011f8c:	b140      	cbz	r0, 8011fa0 <_vfiprintf_r+0x170>
 8011f8e:	2340      	movs	r3, #64	; 0x40
 8011f90:	1b40      	subs	r0, r0, r5
 8011f92:	fa03 f000 	lsl.w	r0, r3, r0
 8011f96:	9b04      	ldr	r3, [sp, #16]
 8011f98:	4303      	orrs	r3, r0
 8011f9a:	f108 0801 	add.w	r8, r8, #1
 8011f9e:	9304      	str	r3, [sp, #16]
 8011fa0:	f898 1000 	ldrb.w	r1, [r8]
 8011fa4:	482a      	ldr	r0, [pc, #168]	; (8012050 <_vfiprintf_r+0x220>)
 8011fa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011faa:	2206      	movs	r2, #6
 8011fac:	f108 0701 	add.w	r7, r8, #1
 8011fb0:	f7ee f8fe 	bl	80001b0 <memchr>
 8011fb4:	2800      	cmp	r0, #0
 8011fb6:	d037      	beq.n	8012028 <_vfiprintf_r+0x1f8>
 8011fb8:	4b26      	ldr	r3, [pc, #152]	; (8012054 <_vfiprintf_r+0x224>)
 8011fba:	bb1b      	cbnz	r3, 8012004 <_vfiprintf_r+0x1d4>
 8011fbc:	9b03      	ldr	r3, [sp, #12]
 8011fbe:	3307      	adds	r3, #7
 8011fc0:	f023 0307 	bic.w	r3, r3, #7
 8011fc4:	3308      	adds	r3, #8
 8011fc6:	9303      	str	r3, [sp, #12]
 8011fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fca:	444b      	add	r3, r9
 8011fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8011fce:	e750      	b.n	8011e72 <_vfiprintf_r+0x42>
 8011fd0:	fb05 3202 	mla	r2, r5, r2, r3
 8011fd4:	2001      	movs	r0, #1
 8011fd6:	4688      	mov	r8, r1
 8011fd8:	e78a      	b.n	8011ef0 <_vfiprintf_r+0xc0>
 8011fda:	2300      	movs	r3, #0
 8011fdc:	f108 0801 	add.w	r8, r8, #1
 8011fe0:	9305      	str	r3, [sp, #20]
 8011fe2:	4619      	mov	r1, r3
 8011fe4:	250a      	movs	r5, #10
 8011fe6:	4640      	mov	r0, r8
 8011fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fec:	3a30      	subs	r2, #48	; 0x30
 8011fee:	2a09      	cmp	r2, #9
 8011ff0:	d903      	bls.n	8011ffa <_vfiprintf_r+0x1ca>
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d0c3      	beq.n	8011f7e <_vfiprintf_r+0x14e>
 8011ff6:	9105      	str	r1, [sp, #20]
 8011ff8:	e7c1      	b.n	8011f7e <_vfiprintf_r+0x14e>
 8011ffa:	fb05 2101 	mla	r1, r5, r1, r2
 8011ffe:	2301      	movs	r3, #1
 8012000:	4680      	mov	r8, r0
 8012002:	e7f0      	b.n	8011fe6 <_vfiprintf_r+0x1b6>
 8012004:	ab03      	add	r3, sp, #12
 8012006:	9300      	str	r3, [sp, #0]
 8012008:	4622      	mov	r2, r4
 801200a:	4b13      	ldr	r3, [pc, #76]	; (8012058 <_vfiprintf_r+0x228>)
 801200c:	a904      	add	r1, sp, #16
 801200e:	4630      	mov	r0, r6
 8012010:	f3af 8000 	nop.w
 8012014:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012018:	4681      	mov	r9, r0
 801201a:	d1d5      	bne.n	8011fc8 <_vfiprintf_r+0x198>
 801201c:	89a3      	ldrh	r3, [r4, #12]
 801201e:	065b      	lsls	r3, r3, #25
 8012020:	f53f af7e 	bmi.w	8011f20 <_vfiprintf_r+0xf0>
 8012024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012026:	e77d      	b.n	8011f24 <_vfiprintf_r+0xf4>
 8012028:	ab03      	add	r3, sp, #12
 801202a:	9300      	str	r3, [sp, #0]
 801202c:	4622      	mov	r2, r4
 801202e:	4b0a      	ldr	r3, [pc, #40]	; (8012058 <_vfiprintf_r+0x228>)
 8012030:	a904      	add	r1, sp, #16
 8012032:	4630      	mov	r0, r6
 8012034:	f000 f888 	bl	8012148 <_printf_i>
 8012038:	e7ec      	b.n	8012014 <_vfiprintf_r+0x1e4>
 801203a:	bf00      	nop
 801203c:	08012dc8 	.word	0x08012dc8
 8012040:	08012e08 	.word	0x08012e08
 8012044:	08012de8 	.word	0x08012de8
 8012048:	08012da8 	.word	0x08012da8
 801204c:	08012e0e 	.word	0x08012e0e
 8012050:	08012e12 	.word	0x08012e12
 8012054:	00000000 	.word	0x00000000
 8012058:	08011e0b 	.word	0x08011e0b

0801205c <_printf_common>:
 801205c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012060:	4691      	mov	r9, r2
 8012062:	461f      	mov	r7, r3
 8012064:	688a      	ldr	r2, [r1, #8]
 8012066:	690b      	ldr	r3, [r1, #16]
 8012068:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801206c:	4293      	cmp	r3, r2
 801206e:	bfb8      	it	lt
 8012070:	4613      	movlt	r3, r2
 8012072:	f8c9 3000 	str.w	r3, [r9]
 8012076:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801207a:	4606      	mov	r6, r0
 801207c:	460c      	mov	r4, r1
 801207e:	b112      	cbz	r2, 8012086 <_printf_common+0x2a>
 8012080:	3301      	adds	r3, #1
 8012082:	f8c9 3000 	str.w	r3, [r9]
 8012086:	6823      	ldr	r3, [r4, #0]
 8012088:	0699      	lsls	r1, r3, #26
 801208a:	bf42      	ittt	mi
 801208c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012090:	3302      	addmi	r3, #2
 8012092:	f8c9 3000 	strmi.w	r3, [r9]
 8012096:	6825      	ldr	r5, [r4, #0]
 8012098:	f015 0506 	ands.w	r5, r5, #6
 801209c:	d107      	bne.n	80120ae <_printf_common+0x52>
 801209e:	f104 0a19 	add.w	sl, r4, #25
 80120a2:	68e3      	ldr	r3, [r4, #12]
 80120a4:	f8d9 2000 	ldr.w	r2, [r9]
 80120a8:	1a9b      	subs	r3, r3, r2
 80120aa:	42ab      	cmp	r3, r5
 80120ac:	dc28      	bgt.n	8012100 <_printf_common+0xa4>
 80120ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80120b2:	6822      	ldr	r2, [r4, #0]
 80120b4:	3300      	adds	r3, #0
 80120b6:	bf18      	it	ne
 80120b8:	2301      	movne	r3, #1
 80120ba:	0692      	lsls	r2, r2, #26
 80120bc:	d42d      	bmi.n	801211a <_printf_common+0xbe>
 80120be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80120c2:	4639      	mov	r1, r7
 80120c4:	4630      	mov	r0, r6
 80120c6:	47c0      	blx	r8
 80120c8:	3001      	adds	r0, #1
 80120ca:	d020      	beq.n	801210e <_printf_common+0xb2>
 80120cc:	6823      	ldr	r3, [r4, #0]
 80120ce:	68e5      	ldr	r5, [r4, #12]
 80120d0:	f8d9 2000 	ldr.w	r2, [r9]
 80120d4:	f003 0306 	and.w	r3, r3, #6
 80120d8:	2b04      	cmp	r3, #4
 80120da:	bf08      	it	eq
 80120dc:	1aad      	subeq	r5, r5, r2
 80120de:	68a3      	ldr	r3, [r4, #8]
 80120e0:	6922      	ldr	r2, [r4, #16]
 80120e2:	bf0c      	ite	eq
 80120e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80120e8:	2500      	movne	r5, #0
 80120ea:	4293      	cmp	r3, r2
 80120ec:	bfc4      	itt	gt
 80120ee:	1a9b      	subgt	r3, r3, r2
 80120f0:	18ed      	addgt	r5, r5, r3
 80120f2:	f04f 0900 	mov.w	r9, #0
 80120f6:	341a      	adds	r4, #26
 80120f8:	454d      	cmp	r5, r9
 80120fa:	d11a      	bne.n	8012132 <_printf_common+0xd6>
 80120fc:	2000      	movs	r0, #0
 80120fe:	e008      	b.n	8012112 <_printf_common+0xb6>
 8012100:	2301      	movs	r3, #1
 8012102:	4652      	mov	r2, sl
 8012104:	4639      	mov	r1, r7
 8012106:	4630      	mov	r0, r6
 8012108:	47c0      	blx	r8
 801210a:	3001      	adds	r0, #1
 801210c:	d103      	bne.n	8012116 <_printf_common+0xba>
 801210e:	f04f 30ff 	mov.w	r0, #4294967295
 8012112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012116:	3501      	adds	r5, #1
 8012118:	e7c3      	b.n	80120a2 <_printf_common+0x46>
 801211a:	18e1      	adds	r1, r4, r3
 801211c:	1c5a      	adds	r2, r3, #1
 801211e:	2030      	movs	r0, #48	; 0x30
 8012120:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012124:	4422      	add	r2, r4
 8012126:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801212a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801212e:	3302      	adds	r3, #2
 8012130:	e7c5      	b.n	80120be <_printf_common+0x62>
 8012132:	2301      	movs	r3, #1
 8012134:	4622      	mov	r2, r4
 8012136:	4639      	mov	r1, r7
 8012138:	4630      	mov	r0, r6
 801213a:	47c0      	blx	r8
 801213c:	3001      	adds	r0, #1
 801213e:	d0e6      	beq.n	801210e <_printf_common+0xb2>
 8012140:	f109 0901 	add.w	r9, r9, #1
 8012144:	e7d8      	b.n	80120f8 <_printf_common+0x9c>
	...

08012148 <_printf_i>:
 8012148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801214c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012150:	460c      	mov	r4, r1
 8012152:	7e09      	ldrb	r1, [r1, #24]
 8012154:	b085      	sub	sp, #20
 8012156:	296e      	cmp	r1, #110	; 0x6e
 8012158:	4617      	mov	r7, r2
 801215a:	4606      	mov	r6, r0
 801215c:	4698      	mov	r8, r3
 801215e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012160:	f000 80b3 	beq.w	80122ca <_printf_i+0x182>
 8012164:	d822      	bhi.n	80121ac <_printf_i+0x64>
 8012166:	2963      	cmp	r1, #99	; 0x63
 8012168:	d036      	beq.n	80121d8 <_printf_i+0x90>
 801216a:	d80a      	bhi.n	8012182 <_printf_i+0x3a>
 801216c:	2900      	cmp	r1, #0
 801216e:	f000 80b9 	beq.w	80122e4 <_printf_i+0x19c>
 8012172:	2958      	cmp	r1, #88	; 0x58
 8012174:	f000 8083 	beq.w	801227e <_printf_i+0x136>
 8012178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801217c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012180:	e032      	b.n	80121e8 <_printf_i+0xa0>
 8012182:	2964      	cmp	r1, #100	; 0x64
 8012184:	d001      	beq.n	801218a <_printf_i+0x42>
 8012186:	2969      	cmp	r1, #105	; 0x69
 8012188:	d1f6      	bne.n	8012178 <_printf_i+0x30>
 801218a:	6820      	ldr	r0, [r4, #0]
 801218c:	6813      	ldr	r3, [r2, #0]
 801218e:	0605      	lsls	r5, r0, #24
 8012190:	f103 0104 	add.w	r1, r3, #4
 8012194:	d52a      	bpl.n	80121ec <_printf_i+0xa4>
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	6011      	str	r1, [r2, #0]
 801219a:	2b00      	cmp	r3, #0
 801219c:	da03      	bge.n	80121a6 <_printf_i+0x5e>
 801219e:	222d      	movs	r2, #45	; 0x2d
 80121a0:	425b      	negs	r3, r3
 80121a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80121a6:	486f      	ldr	r0, [pc, #444]	; (8012364 <_printf_i+0x21c>)
 80121a8:	220a      	movs	r2, #10
 80121aa:	e039      	b.n	8012220 <_printf_i+0xd8>
 80121ac:	2973      	cmp	r1, #115	; 0x73
 80121ae:	f000 809d 	beq.w	80122ec <_printf_i+0x1a4>
 80121b2:	d808      	bhi.n	80121c6 <_printf_i+0x7e>
 80121b4:	296f      	cmp	r1, #111	; 0x6f
 80121b6:	d020      	beq.n	80121fa <_printf_i+0xb2>
 80121b8:	2970      	cmp	r1, #112	; 0x70
 80121ba:	d1dd      	bne.n	8012178 <_printf_i+0x30>
 80121bc:	6823      	ldr	r3, [r4, #0]
 80121be:	f043 0320 	orr.w	r3, r3, #32
 80121c2:	6023      	str	r3, [r4, #0]
 80121c4:	e003      	b.n	80121ce <_printf_i+0x86>
 80121c6:	2975      	cmp	r1, #117	; 0x75
 80121c8:	d017      	beq.n	80121fa <_printf_i+0xb2>
 80121ca:	2978      	cmp	r1, #120	; 0x78
 80121cc:	d1d4      	bne.n	8012178 <_printf_i+0x30>
 80121ce:	2378      	movs	r3, #120	; 0x78
 80121d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80121d4:	4864      	ldr	r0, [pc, #400]	; (8012368 <_printf_i+0x220>)
 80121d6:	e055      	b.n	8012284 <_printf_i+0x13c>
 80121d8:	6813      	ldr	r3, [r2, #0]
 80121da:	1d19      	adds	r1, r3, #4
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	6011      	str	r1, [r2, #0]
 80121e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80121e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80121e8:	2301      	movs	r3, #1
 80121ea:	e08c      	b.n	8012306 <_printf_i+0x1be>
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	6011      	str	r1, [r2, #0]
 80121f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80121f4:	bf18      	it	ne
 80121f6:	b21b      	sxthne	r3, r3
 80121f8:	e7cf      	b.n	801219a <_printf_i+0x52>
 80121fa:	6813      	ldr	r3, [r2, #0]
 80121fc:	6825      	ldr	r5, [r4, #0]
 80121fe:	1d18      	adds	r0, r3, #4
 8012200:	6010      	str	r0, [r2, #0]
 8012202:	0628      	lsls	r0, r5, #24
 8012204:	d501      	bpl.n	801220a <_printf_i+0xc2>
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	e002      	b.n	8012210 <_printf_i+0xc8>
 801220a:	0668      	lsls	r0, r5, #25
 801220c:	d5fb      	bpl.n	8012206 <_printf_i+0xbe>
 801220e:	881b      	ldrh	r3, [r3, #0]
 8012210:	4854      	ldr	r0, [pc, #336]	; (8012364 <_printf_i+0x21c>)
 8012212:	296f      	cmp	r1, #111	; 0x6f
 8012214:	bf14      	ite	ne
 8012216:	220a      	movne	r2, #10
 8012218:	2208      	moveq	r2, #8
 801221a:	2100      	movs	r1, #0
 801221c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012220:	6865      	ldr	r5, [r4, #4]
 8012222:	60a5      	str	r5, [r4, #8]
 8012224:	2d00      	cmp	r5, #0
 8012226:	f2c0 8095 	blt.w	8012354 <_printf_i+0x20c>
 801222a:	6821      	ldr	r1, [r4, #0]
 801222c:	f021 0104 	bic.w	r1, r1, #4
 8012230:	6021      	str	r1, [r4, #0]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d13d      	bne.n	80122b2 <_printf_i+0x16a>
 8012236:	2d00      	cmp	r5, #0
 8012238:	f040 808e 	bne.w	8012358 <_printf_i+0x210>
 801223c:	4665      	mov	r5, ip
 801223e:	2a08      	cmp	r2, #8
 8012240:	d10b      	bne.n	801225a <_printf_i+0x112>
 8012242:	6823      	ldr	r3, [r4, #0]
 8012244:	07db      	lsls	r3, r3, #31
 8012246:	d508      	bpl.n	801225a <_printf_i+0x112>
 8012248:	6923      	ldr	r3, [r4, #16]
 801224a:	6862      	ldr	r2, [r4, #4]
 801224c:	429a      	cmp	r2, r3
 801224e:	bfde      	ittt	le
 8012250:	2330      	movle	r3, #48	; 0x30
 8012252:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012256:	f105 35ff 	addle.w	r5, r5, #4294967295
 801225a:	ebac 0305 	sub.w	r3, ip, r5
 801225e:	6123      	str	r3, [r4, #16]
 8012260:	f8cd 8000 	str.w	r8, [sp]
 8012264:	463b      	mov	r3, r7
 8012266:	aa03      	add	r2, sp, #12
 8012268:	4621      	mov	r1, r4
 801226a:	4630      	mov	r0, r6
 801226c:	f7ff fef6 	bl	801205c <_printf_common>
 8012270:	3001      	adds	r0, #1
 8012272:	d14d      	bne.n	8012310 <_printf_i+0x1c8>
 8012274:	f04f 30ff 	mov.w	r0, #4294967295
 8012278:	b005      	add	sp, #20
 801227a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801227e:	4839      	ldr	r0, [pc, #228]	; (8012364 <_printf_i+0x21c>)
 8012280:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012284:	6813      	ldr	r3, [r2, #0]
 8012286:	6821      	ldr	r1, [r4, #0]
 8012288:	1d1d      	adds	r5, r3, #4
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	6015      	str	r5, [r2, #0]
 801228e:	060a      	lsls	r2, r1, #24
 8012290:	d50b      	bpl.n	80122aa <_printf_i+0x162>
 8012292:	07ca      	lsls	r2, r1, #31
 8012294:	bf44      	itt	mi
 8012296:	f041 0120 	orrmi.w	r1, r1, #32
 801229a:	6021      	strmi	r1, [r4, #0]
 801229c:	b91b      	cbnz	r3, 80122a6 <_printf_i+0x15e>
 801229e:	6822      	ldr	r2, [r4, #0]
 80122a0:	f022 0220 	bic.w	r2, r2, #32
 80122a4:	6022      	str	r2, [r4, #0]
 80122a6:	2210      	movs	r2, #16
 80122a8:	e7b7      	b.n	801221a <_printf_i+0xd2>
 80122aa:	064d      	lsls	r5, r1, #25
 80122ac:	bf48      	it	mi
 80122ae:	b29b      	uxthmi	r3, r3
 80122b0:	e7ef      	b.n	8012292 <_printf_i+0x14a>
 80122b2:	4665      	mov	r5, ip
 80122b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80122b8:	fb02 3311 	mls	r3, r2, r1, r3
 80122bc:	5cc3      	ldrb	r3, [r0, r3]
 80122be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80122c2:	460b      	mov	r3, r1
 80122c4:	2900      	cmp	r1, #0
 80122c6:	d1f5      	bne.n	80122b4 <_printf_i+0x16c>
 80122c8:	e7b9      	b.n	801223e <_printf_i+0xf6>
 80122ca:	6813      	ldr	r3, [r2, #0]
 80122cc:	6825      	ldr	r5, [r4, #0]
 80122ce:	6961      	ldr	r1, [r4, #20]
 80122d0:	1d18      	adds	r0, r3, #4
 80122d2:	6010      	str	r0, [r2, #0]
 80122d4:	0628      	lsls	r0, r5, #24
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	d501      	bpl.n	80122de <_printf_i+0x196>
 80122da:	6019      	str	r1, [r3, #0]
 80122dc:	e002      	b.n	80122e4 <_printf_i+0x19c>
 80122de:	066a      	lsls	r2, r5, #25
 80122e0:	d5fb      	bpl.n	80122da <_printf_i+0x192>
 80122e2:	8019      	strh	r1, [r3, #0]
 80122e4:	2300      	movs	r3, #0
 80122e6:	6123      	str	r3, [r4, #16]
 80122e8:	4665      	mov	r5, ip
 80122ea:	e7b9      	b.n	8012260 <_printf_i+0x118>
 80122ec:	6813      	ldr	r3, [r2, #0]
 80122ee:	1d19      	adds	r1, r3, #4
 80122f0:	6011      	str	r1, [r2, #0]
 80122f2:	681d      	ldr	r5, [r3, #0]
 80122f4:	6862      	ldr	r2, [r4, #4]
 80122f6:	2100      	movs	r1, #0
 80122f8:	4628      	mov	r0, r5
 80122fa:	f7ed ff59 	bl	80001b0 <memchr>
 80122fe:	b108      	cbz	r0, 8012304 <_printf_i+0x1bc>
 8012300:	1b40      	subs	r0, r0, r5
 8012302:	6060      	str	r0, [r4, #4]
 8012304:	6863      	ldr	r3, [r4, #4]
 8012306:	6123      	str	r3, [r4, #16]
 8012308:	2300      	movs	r3, #0
 801230a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801230e:	e7a7      	b.n	8012260 <_printf_i+0x118>
 8012310:	6923      	ldr	r3, [r4, #16]
 8012312:	462a      	mov	r2, r5
 8012314:	4639      	mov	r1, r7
 8012316:	4630      	mov	r0, r6
 8012318:	47c0      	blx	r8
 801231a:	3001      	adds	r0, #1
 801231c:	d0aa      	beq.n	8012274 <_printf_i+0x12c>
 801231e:	6823      	ldr	r3, [r4, #0]
 8012320:	079b      	lsls	r3, r3, #30
 8012322:	d413      	bmi.n	801234c <_printf_i+0x204>
 8012324:	68e0      	ldr	r0, [r4, #12]
 8012326:	9b03      	ldr	r3, [sp, #12]
 8012328:	4298      	cmp	r0, r3
 801232a:	bfb8      	it	lt
 801232c:	4618      	movlt	r0, r3
 801232e:	e7a3      	b.n	8012278 <_printf_i+0x130>
 8012330:	2301      	movs	r3, #1
 8012332:	464a      	mov	r2, r9
 8012334:	4639      	mov	r1, r7
 8012336:	4630      	mov	r0, r6
 8012338:	47c0      	blx	r8
 801233a:	3001      	adds	r0, #1
 801233c:	d09a      	beq.n	8012274 <_printf_i+0x12c>
 801233e:	3501      	adds	r5, #1
 8012340:	68e3      	ldr	r3, [r4, #12]
 8012342:	9a03      	ldr	r2, [sp, #12]
 8012344:	1a9b      	subs	r3, r3, r2
 8012346:	42ab      	cmp	r3, r5
 8012348:	dcf2      	bgt.n	8012330 <_printf_i+0x1e8>
 801234a:	e7eb      	b.n	8012324 <_printf_i+0x1dc>
 801234c:	2500      	movs	r5, #0
 801234e:	f104 0919 	add.w	r9, r4, #25
 8012352:	e7f5      	b.n	8012340 <_printf_i+0x1f8>
 8012354:	2b00      	cmp	r3, #0
 8012356:	d1ac      	bne.n	80122b2 <_printf_i+0x16a>
 8012358:	7803      	ldrb	r3, [r0, #0]
 801235a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801235e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012362:	e76c      	b.n	801223e <_printf_i+0xf6>
 8012364:	08012e19 	.word	0x08012e19
 8012368:	08012e2a 	.word	0x08012e2a

0801236c <_sbrk_r>:
 801236c:	b538      	push	{r3, r4, r5, lr}
 801236e:	4c06      	ldr	r4, [pc, #24]	; (8012388 <_sbrk_r+0x1c>)
 8012370:	2300      	movs	r3, #0
 8012372:	4605      	mov	r5, r0
 8012374:	4608      	mov	r0, r1
 8012376:	6023      	str	r3, [r4, #0]
 8012378:	f7f0 faf2 	bl	8002960 <_sbrk>
 801237c:	1c43      	adds	r3, r0, #1
 801237e:	d102      	bne.n	8012386 <_sbrk_r+0x1a>
 8012380:	6823      	ldr	r3, [r4, #0]
 8012382:	b103      	cbz	r3, 8012386 <_sbrk_r+0x1a>
 8012384:	602b      	str	r3, [r5, #0]
 8012386:	bd38      	pop	{r3, r4, r5, pc}
 8012388:	20006fb8 	.word	0x20006fb8

0801238c <__sread>:
 801238c:	b510      	push	{r4, lr}
 801238e:	460c      	mov	r4, r1
 8012390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012394:	f000 f8d6 	bl	8012544 <_read_r>
 8012398:	2800      	cmp	r0, #0
 801239a:	bfab      	itete	ge
 801239c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801239e:	89a3      	ldrhlt	r3, [r4, #12]
 80123a0:	181b      	addge	r3, r3, r0
 80123a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80123a6:	bfac      	ite	ge
 80123a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80123aa:	81a3      	strhlt	r3, [r4, #12]
 80123ac:	bd10      	pop	{r4, pc}

080123ae <__swrite>:
 80123ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123b2:	461f      	mov	r7, r3
 80123b4:	898b      	ldrh	r3, [r1, #12]
 80123b6:	05db      	lsls	r3, r3, #23
 80123b8:	4605      	mov	r5, r0
 80123ba:	460c      	mov	r4, r1
 80123bc:	4616      	mov	r6, r2
 80123be:	d505      	bpl.n	80123cc <__swrite+0x1e>
 80123c0:	2302      	movs	r3, #2
 80123c2:	2200      	movs	r2, #0
 80123c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123c8:	f000 f868 	bl	801249c <_lseek_r>
 80123cc:	89a3      	ldrh	r3, [r4, #12]
 80123ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80123d6:	81a3      	strh	r3, [r4, #12]
 80123d8:	4632      	mov	r2, r6
 80123da:	463b      	mov	r3, r7
 80123dc:	4628      	mov	r0, r5
 80123de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123e2:	f000 b817 	b.w	8012414 <_write_r>

080123e6 <__sseek>:
 80123e6:	b510      	push	{r4, lr}
 80123e8:	460c      	mov	r4, r1
 80123ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123ee:	f000 f855 	bl	801249c <_lseek_r>
 80123f2:	1c43      	adds	r3, r0, #1
 80123f4:	89a3      	ldrh	r3, [r4, #12]
 80123f6:	bf15      	itete	ne
 80123f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80123fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80123fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012402:	81a3      	strheq	r3, [r4, #12]
 8012404:	bf18      	it	ne
 8012406:	81a3      	strhne	r3, [r4, #12]
 8012408:	bd10      	pop	{r4, pc}

0801240a <__sclose>:
 801240a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801240e:	f000 b813 	b.w	8012438 <_close_r>
	...

08012414 <_write_r>:
 8012414:	b538      	push	{r3, r4, r5, lr}
 8012416:	4c07      	ldr	r4, [pc, #28]	; (8012434 <_write_r+0x20>)
 8012418:	4605      	mov	r5, r0
 801241a:	4608      	mov	r0, r1
 801241c:	4611      	mov	r1, r2
 801241e:	2200      	movs	r2, #0
 8012420:	6022      	str	r2, [r4, #0]
 8012422:	461a      	mov	r2, r3
 8012424:	f7f8 f96c 	bl	800a700 <_write>
 8012428:	1c43      	adds	r3, r0, #1
 801242a:	d102      	bne.n	8012432 <_write_r+0x1e>
 801242c:	6823      	ldr	r3, [r4, #0]
 801242e:	b103      	cbz	r3, 8012432 <_write_r+0x1e>
 8012430:	602b      	str	r3, [r5, #0]
 8012432:	bd38      	pop	{r3, r4, r5, pc}
 8012434:	20006fb8 	.word	0x20006fb8

08012438 <_close_r>:
 8012438:	b538      	push	{r3, r4, r5, lr}
 801243a:	4c06      	ldr	r4, [pc, #24]	; (8012454 <_close_r+0x1c>)
 801243c:	2300      	movs	r3, #0
 801243e:	4605      	mov	r5, r0
 8012440:	4608      	mov	r0, r1
 8012442:	6023      	str	r3, [r4, #0]
 8012444:	f7f0 fa57 	bl	80028f6 <_close>
 8012448:	1c43      	adds	r3, r0, #1
 801244a:	d102      	bne.n	8012452 <_close_r+0x1a>
 801244c:	6823      	ldr	r3, [r4, #0]
 801244e:	b103      	cbz	r3, 8012452 <_close_r+0x1a>
 8012450:	602b      	str	r3, [r5, #0]
 8012452:	bd38      	pop	{r3, r4, r5, pc}
 8012454:	20006fb8 	.word	0x20006fb8

08012458 <_fstat_r>:
 8012458:	b538      	push	{r3, r4, r5, lr}
 801245a:	4c07      	ldr	r4, [pc, #28]	; (8012478 <_fstat_r+0x20>)
 801245c:	2300      	movs	r3, #0
 801245e:	4605      	mov	r5, r0
 8012460:	4608      	mov	r0, r1
 8012462:	4611      	mov	r1, r2
 8012464:	6023      	str	r3, [r4, #0]
 8012466:	f7f0 fa52 	bl	800290e <_fstat>
 801246a:	1c43      	adds	r3, r0, #1
 801246c:	d102      	bne.n	8012474 <_fstat_r+0x1c>
 801246e:	6823      	ldr	r3, [r4, #0]
 8012470:	b103      	cbz	r3, 8012474 <_fstat_r+0x1c>
 8012472:	602b      	str	r3, [r5, #0]
 8012474:	bd38      	pop	{r3, r4, r5, pc}
 8012476:	bf00      	nop
 8012478:	20006fb8 	.word	0x20006fb8

0801247c <_isatty_r>:
 801247c:	b538      	push	{r3, r4, r5, lr}
 801247e:	4c06      	ldr	r4, [pc, #24]	; (8012498 <_isatty_r+0x1c>)
 8012480:	2300      	movs	r3, #0
 8012482:	4605      	mov	r5, r0
 8012484:	4608      	mov	r0, r1
 8012486:	6023      	str	r3, [r4, #0]
 8012488:	f7f0 fa51 	bl	800292e <_isatty>
 801248c:	1c43      	adds	r3, r0, #1
 801248e:	d102      	bne.n	8012496 <_isatty_r+0x1a>
 8012490:	6823      	ldr	r3, [r4, #0]
 8012492:	b103      	cbz	r3, 8012496 <_isatty_r+0x1a>
 8012494:	602b      	str	r3, [r5, #0]
 8012496:	bd38      	pop	{r3, r4, r5, pc}
 8012498:	20006fb8 	.word	0x20006fb8

0801249c <_lseek_r>:
 801249c:	b538      	push	{r3, r4, r5, lr}
 801249e:	4c07      	ldr	r4, [pc, #28]	; (80124bc <_lseek_r+0x20>)
 80124a0:	4605      	mov	r5, r0
 80124a2:	4608      	mov	r0, r1
 80124a4:	4611      	mov	r1, r2
 80124a6:	2200      	movs	r2, #0
 80124a8:	6022      	str	r2, [r4, #0]
 80124aa:	461a      	mov	r2, r3
 80124ac:	f7f0 fa4a 	bl	8002944 <_lseek>
 80124b0:	1c43      	adds	r3, r0, #1
 80124b2:	d102      	bne.n	80124ba <_lseek_r+0x1e>
 80124b4:	6823      	ldr	r3, [r4, #0]
 80124b6:	b103      	cbz	r3, 80124ba <_lseek_r+0x1e>
 80124b8:	602b      	str	r3, [r5, #0]
 80124ba:	bd38      	pop	{r3, r4, r5, pc}
 80124bc:	20006fb8 	.word	0x20006fb8

080124c0 <memmove>:
 80124c0:	4288      	cmp	r0, r1
 80124c2:	b510      	push	{r4, lr}
 80124c4:	eb01 0302 	add.w	r3, r1, r2
 80124c8:	d807      	bhi.n	80124da <memmove+0x1a>
 80124ca:	1e42      	subs	r2, r0, #1
 80124cc:	4299      	cmp	r1, r3
 80124ce:	d00a      	beq.n	80124e6 <memmove+0x26>
 80124d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80124d4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80124d8:	e7f8      	b.n	80124cc <memmove+0xc>
 80124da:	4283      	cmp	r3, r0
 80124dc:	d9f5      	bls.n	80124ca <memmove+0xa>
 80124de:	1881      	adds	r1, r0, r2
 80124e0:	1ad2      	subs	r2, r2, r3
 80124e2:	42d3      	cmn	r3, r2
 80124e4:	d100      	bne.n	80124e8 <memmove+0x28>
 80124e6:	bd10      	pop	{r4, pc}
 80124e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80124ec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80124f0:	e7f7      	b.n	80124e2 <memmove+0x22>

080124f2 <__malloc_lock>:
 80124f2:	4770      	bx	lr

080124f4 <__malloc_unlock>:
 80124f4:	4770      	bx	lr

080124f6 <_realloc_r>:
 80124f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124f8:	4607      	mov	r7, r0
 80124fa:	4614      	mov	r4, r2
 80124fc:	460e      	mov	r6, r1
 80124fe:	b921      	cbnz	r1, 801250a <_realloc_r+0x14>
 8012500:	4611      	mov	r1, r2
 8012502:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012506:	f7ff babd 	b.w	8011a84 <_malloc_r>
 801250a:	b922      	cbnz	r2, 8012516 <_realloc_r+0x20>
 801250c:	f7ff fa6c 	bl	80119e8 <_free_r>
 8012510:	4625      	mov	r5, r4
 8012512:	4628      	mov	r0, r5
 8012514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012516:	f000 f827 	bl	8012568 <_malloc_usable_size_r>
 801251a:	42a0      	cmp	r0, r4
 801251c:	d20f      	bcs.n	801253e <_realloc_r+0x48>
 801251e:	4621      	mov	r1, r4
 8012520:	4638      	mov	r0, r7
 8012522:	f7ff faaf 	bl	8011a84 <_malloc_r>
 8012526:	4605      	mov	r5, r0
 8012528:	2800      	cmp	r0, #0
 801252a:	d0f2      	beq.n	8012512 <_realloc_r+0x1c>
 801252c:	4631      	mov	r1, r6
 801252e:	4622      	mov	r2, r4
 8012530:	f7fe febe 	bl	80112b0 <memcpy>
 8012534:	4631      	mov	r1, r6
 8012536:	4638      	mov	r0, r7
 8012538:	f7ff fa56 	bl	80119e8 <_free_r>
 801253c:	e7e9      	b.n	8012512 <_realloc_r+0x1c>
 801253e:	4635      	mov	r5, r6
 8012540:	e7e7      	b.n	8012512 <_realloc_r+0x1c>
	...

08012544 <_read_r>:
 8012544:	b538      	push	{r3, r4, r5, lr}
 8012546:	4c07      	ldr	r4, [pc, #28]	; (8012564 <_read_r+0x20>)
 8012548:	4605      	mov	r5, r0
 801254a:	4608      	mov	r0, r1
 801254c:	4611      	mov	r1, r2
 801254e:	2200      	movs	r2, #0
 8012550:	6022      	str	r2, [r4, #0]
 8012552:	461a      	mov	r2, r3
 8012554:	f7f0 f9b2 	bl	80028bc <_read>
 8012558:	1c43      	adds	r3, r0, #1
 801255a:	d102      	bne.n	8012562 <_read_r+0x1e>
 801255c:	6823      	ldr	r3, [r4, #0]
 801255e:	b103      	cbz	r3, 8012562 <_read_r+0x1e>
 8012560:	602b      	str	r3, [r5, #0]
 8012562:	bd38      	pop	{r3, r4, r5, pc}
 8012564:	20006fb8 	.word	0x20006fb8

08012568 <_malloc_usable_size_r>:
 8012568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801256c:	1f18      	subs	r0, r3, #4
 801256e:	2b00      	cmp	r3, #0
 8012570:	bfbc      	itt	lt
 8012572:	580b      	ldrlt	r3, [r1, r0]
 8012574:	18c0      	addlt	r0, r0, r3
 8012576:	4770      	bx	lr

08012578 <_init>:
 8012578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801257a:	bf00      	nop
 801257c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801257e:	bc08      	pop	{r3}
 8012580:	469e      	mov	lr, r3
 8012582:	4770      	bx	lr

08012584 <_fini>:
 8012584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012586:	bf00      	nop
 8012588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801258a:	bc08      	pop	{r3}
 801258c:	469e      	mov	lr, r3
 801258e:	4770      	bx	lr
