
TEST_BLE_OT_CONC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d38  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001450  08012e78  08012e78  00022e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080142c8  080142c8  000242c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080142d0  080142d0  000242d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080142d4  080142d4  000242d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000004  080142d8  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000094  08014368  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000051  20000130  08014401  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000184  08014452  00030184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a0  20000198  08014463  00030198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006dbc  20000238  08014503  00030238  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20006ff4  08014503  00036ff4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 15 MB_MEM1       000001c4  20030028  20030028  00040000  2**2
                  ALLOC
 16 MB_MEM2       00000b93  200301ec  200301ec  00040000  2**2
                  ALLOC
 17 .debug_info   0005bb8d  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 0000a2f8  00000000  00000000  0008bdf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003a78  00000000  00000000  000960f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00003610  00000000  00000000  00099b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  000358bb  00000000  00000000  0009d178  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0003b5ac  00000000  00000000  000d2a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00114876  00000000  00000000  0010dfdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  00222855  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000f8e8  00000000  00000000  002228d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000238 	.word	0x20000238
 800015c:	00000000 	.word	0x00000000
 8000160:	08012e60 	.word	0x08012e60

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000023c 	.word	0x2000023c
 800017c:	08012e60 	.word	0x08012e60

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800038e:	f1a4 0401 	sub.w	r4, r4, #1
 8000392:	d1e9      	bne.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__aeabi_d2f>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009f4:	bf24      	itt	cs
 80009f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009fe:	d90d      	bls.n	8000a1c <__aeabi_d2f+0x30>
 8000a00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a14:	bf08      	it	eq
 8000a16:	f020 0001 	biceq.w	r0, r0, #1
 8000a1a:	4770      	bx	lr
 8000a1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a20:	d121      	bne.n	8000a66 <__aeabi_d2f+0x7a>
 8000a22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a26:	bfbc      	itt	lt
 8000a28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	4770      	bxlt	lr
 8000a2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a36:	f1c2 0218 	rsb	r2, r2, #24
 8000a3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a42:	fa20 f002 	lsr.w	r0, r0, r2
 8000a46:	bf18      	it	ne
 8000a48:	f040 0001 	orrne.w	r0, r0, #1
 8000a4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a58:	ea40 000c 	orr.w	r0, r0, ip
 8000a5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a64:	e7cc      	b.n	8000a00 <__aeabi_d2f+0x14>
 8000a66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a6a:	d107      	bne.n	8000a7c <__aeabi_d2f+0x90>
 8000a6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a70:	bf1e      	ittt	ne
 8000a72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a7a:	4770      	bxne	lr
 8000a7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b972 	b.w	8000d88 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4688      	mov	r8, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14b      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4615      	mov	r5, r2
 8000ace:	d967      	bls.n	8000ba0 <__udivmoddi4+0xe4>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0720 	rsb	r7, r2, #32
 8000ada:	fa01 f302 	lsl.w	r3, r1, r2
 8000ade:	fa20 f707 	lsr.w	r7, r0, r7
 8000ae2:	4095      	lsls	r5, r2
 8000ae4:	ea47 0803 	orr.w	r8, r7, r3
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aee:	0c23      	lsrs	r3, r4, #16
 8000af0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000af4:	fa1f fc85 	uxth.w	ip, r5
 8000af8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000afc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b00:	fb07 f10c 	mul.w	r1, r7, ip
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d909      	bls.n	8000b1c <__udivmoddi4+0x60>
 8000b08:	18eb      	adds	r3, r5, r3
 8000b0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b0e:	f080 811b 	bcs.w	8000d48 <__udivmoddi4+0x28c>
 8000b12:	4299      	cmp	r1, r3
 8000b14:	f240 8118 	bls.w	8000d48 <__udivmoddi4+0x28c>
 8000b18:	3f02      	subs	r7, #2
 8000b1a:	442b      	add	r3, r5
 8000b1c:	1a5b      	subs	r3, r3, r1
 8000b1e:	b2a4      	uxth	r4, r4
 8000b20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b30:	45a4      	cmp	ip, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x8c>
 8000b34:	192c      	adds	r4, r5, r4
 8000b36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3a:	f080 8107 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	f240 8104 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b44:	3802      	subs	r0, #2
 8000b46:	442c      	add	r4, r5
 8000b48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4c:	eba4 040c 	sub.w	r4, r4, ip
 8000b50:	2700      	movs	r7, #0
 8000b52:	b11e      	cbz	r6, 8000b5c <__udivmoddi4+0xa0>
 8000b54:	40d4      	lsrs	r4, r2
 8000b56:	2300      	movs	r3, #0
 8000b58:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d909      	bls.n	8000b7a <__udivmoddi4+0xbe>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80eb 	beq.w	8000d42 <__udivmoddi4+0x286>
 8000b6c:	2700      	movs	r7, #0
 8000b6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b72:	4638      	mov	r0, r7
 8000b74:	4639      	mov	r1, r7
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	fab3 f783 	clz	r7, r3
 8000b7e:	2f00      	cmp	r7, #0
 8000b80:	d147      	bne.n	8000c12 <__udivmoddi4+0x156>
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xd0>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 80fa 	bhi.w	8000d80 <__udivmoddi4+0x2c4>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4698      	mov	r8, r3
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d0e0      	beq.n	8000b5c <__udivmoddi4+0xa0>
 8000b9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b9e:	e7dd      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ba0:	b902      	cbnz	r2, 8000ba4 <__udivmoddi4+0xe8>
 8000ba2:	deff      	udf	#255	; 0xff
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	f040 808f 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bae:	1b49      	subs	r1, r1, r5
 8000bb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bb4:	fa1f f885 	uxth.w	r8, r5
 8000bb8:	2701      	movs	r7, #1
 8000bba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bbe:	0c23      	lsrs	r3, r4, #16
 8000bc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bd0:	18eb      	adds	r3, r5, r3
 8000bd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4299      	cmp	r1, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2bc>
 8000bde:	4684      	mov	ip, r0
 8000be0:	1a59      	subs	r1, r3, r1
 8000be2:	b2a3      	uxth	r3, r4
 8000be4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bf0:	fb08 f800 	mul.w	r8, r8, r0
 8000bf4:	45a0      	cmp	r8, r4
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x14c>
 8000bf8:	192c      	adds	r4, r5, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x14a>
 8000c00:	45a0      	cmp	r8, r4
 8000c02:	f200 80b6 	bhi.w	8000d72 <__udivmoddi4+0x2b6>
 8000c06:	4618      	mov	r0, r3
 8000c08:	eba4 0408 	sub.w	r4, r4, r8
 8000c0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c10:	e79f      	b.n	8000b52 <__udivmoddi4+0x96>
 8000c12:	f1c7 0c20 	rsb	ip, r7, #32
 8000c16:	40bb      	lsls	r3, r7
 8000c18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c20:	fa01 f407 	lsl.w	r4, r1, r7
 8000c24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c30:	4325      	orrs	r5, r4
 8000c32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c36:	0c2c      	lsrs	r4, r5, #16
 8000c38:	fb08 3319 	mls	r3, r8, r9, r3
 8000c3c:	fa1f fa8e 	uxth.w	sl, lr
 8000c40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c44:	fb09 f40a 	mul.w	r4, r9, sl
 8000c48:	429c      	cmp	r4, r3
 8000c4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1e 0303 	adds.w	r3, lr, r3
 8000c58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c5c:	f080 8087 	bcs.w	8000d6e <__udivmoddi4+0x2b2>
 8000c60:	429c      	cmp	r4, r3
 8000c62:	f240 8084 	bls.w	8000d6e <__udivmoddi4+0x2b2>
 8000c66:	f1a9 0902 	sub.w	r9, r9, #2
 8000c6a:	4473      	add	r3, lr
 8000c6c:	1b1b      	subs	r3, r3, r4
 8000c6e:	b2ad      	uxth	r5, r5
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c80:	45a2      	cmp	sl, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1e 0404 	adds.w	r4, lr, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	d26b      	bcs.n	8000d66 <__udivmoddi4+0x2aa>
 8000c8e:	45a2      	cmp	sl, r4
 8000c90:	d969      	bls.n	8000d66 <__udivmoddi4+0x2aa>
 8000c92:	3802      	subs	r0, #2
 8000c94:	4474      	add	r4, lr
 8000c96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9e:	eba4 040a 	sub.w	r4, r4, sl
 8000ca2:	454c      	cmp	r4, r9
 8000ca4:	46c2      	mov	sl, r8
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	d354      	bcc.n	8000d54 <__udivmoddi4+0x298>
 8000caa:	d051      	beq.n	8000d50 <__udivmoddi4+0x294>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d069      	beq.n	8000d84 <__udivmoddi4+0x2c8>
 8000cb0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cb4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cb8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cbc:	40fd      	lsrs	r5, r7
 8000cbe:	40fc      	lsrs	r4, r7
 8000cc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e747      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cd4:	4095      	lsls	r5, r2
 8000cd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cda:	fa21 f303 	lsr.w	r3, r1, r3
 8000cde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce2:	4338      	orrs	r0, r7
 8000ce4:	0c01      	lsrs	r1, r0, #16
 8000ce6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cea:	fa1f f885 	uxth.w	r8, r5
 8000cee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb07 f308 	mul.w	r3, r7, r8
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x256>
 8000d02:	1869      	adds	r1, r5, r1
 8000d04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d08:	d22f      	bcs.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d92d      	bls.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0e:	3f02      	subs	r7, #2
 8000d10:	4429      	add	r1, r5
 8000d12:	1acb      	subs	r3, r1, r3
 8000d14:	b281      	uxth	r1, r0
 8000d16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d22:	fb00 f308 	mul.w	r3, r0, r8
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d907      	bls.n	8000d3a <__udivmoddi4+0x27e>
 8000d2a:	1869      	adds	r1, r5, r1
 8000d2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d30:	d217      	bcs.n	8000d62 <__udivmoddi4+0x2a6>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d915      	bls.n	8000d62 <__udivmoddi4+0x2a6>
 8000d36:	3802      	subs	r0, #2
 8000d38:	4429      	add	r1, r5
 8000d3a:	1ac9      	subs	r1, r1, r3
 8000d3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d40:	e73b      	b.n	8000bba <__udivmoddi4+0xfe>
 8000d42:	4637      	mov	r7, r6
 8000d44:	4630      	mov	r0, r6
 8000d46:	e709      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000d48:	4607      	mov	r7, r0
 8000d4a:	e6e7      	b.n	8000b1c <__udivmoddi4+0x60>
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	e6fb      	b.n	8000b48 <__udivmoddi4+0x8c>
 8000d50:	4541      	cmp	r1, r8
 8000d52:	d2ab      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d58:	eb69 020e 	sbc.w	r2, r9, lr
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	4613      	mov	r3, r2
 8000d60:	e7a4      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d62:	4660      	mov	r0, ip
 8000d64:	e7e9      	b.n	8000d3a <__udivmoddi4+0x27e>
 8000d66:	4618      	mov	r0, r3
 8000d68:	e795      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6a:	4667      	mov	r7, ip
 8000d6c:	e7d1      	b.n	8000d12 <__udivmoddi4+0x256>
 8000d6e:	4681      	mov	r9, r0
 8000d70:	e77c      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d72:	3802      	subs	r0, #2
 8000d74:	442c      	add	r4, r5
 8000d76:	e747      	b.n	8000c08 <__udivmoddi4+0x14c>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	442b      	add	r3, r5
 8000d7e:	e72f      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d80:	4638      	mov	r0, r7
 8000d82:	e708      	b.n	8000b96 <__udivmoddi4+0xda>
 8000d84:	4637      	mov	r7, r6
 8000d86:	e6e9      	b.n	8000b5c <__udivmoddi4+0xa0>

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d94:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d9a:	f023 0207 	bic.w	r2, r3, #7
 8000d9e:	4905      	ldr	r1, [pc, #20]	; (8000db4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	58000400 	.word	0x58000400

08000db8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <LL_EXTI_EnableIT_32_63+0x24>)
 8000dc2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000dc6:	4905      	ldr	r1, [pc, #20]	; (8000ddc <LL_EXTI_EnableIT_32_63+0x24>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	58000800 	.word	0x58000800

08000de0 <LL_C2_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8000dea:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8000dee:	4905      	ldr	r1, [pc, #20]	; (8000e04 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	58000800 	.word	0x58000800

08000e08 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	608b      	str	r3, [r1, #8]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000e34:	f000 f838 	bl	8000ea8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000e38:	490c      	ldr	r1, [pc, #48]	; (8000e6c <APPE_Init+0x3c>)
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 fe34 	bl	8001aa8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  /* initialize debugger module if supported and debug trace if activated */
  Init_Debug();
 8000e40:	f000 f822 	bl	8000e88 <Init_Debug>

  //TODO: remove displayConcurrentMode() call since just used for debugging
  /* Display Dynamic concurrent mode (BLE and Thread)  */
  displayConcurrentMode();
 8000e44:	f000 f814 	bl	8000e70 <displayConcurrentMode>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000e48:	2101      	movs	r1, #1
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f010 fd1c 	bl	8011888 <UTIL_LPM_SetOffMode>

  BSP_LED_Init(LED_BLUE);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f001 fa99 	bl	8002388 <BSP_LED_Init>
   BSP_LED_Init(LED_GREEN);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f001 fa96 	bl	8002388 <BSP_LED_Init>
   BSP_LED_Init(LED_RED);
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	f001 fa93 	bl	8002388 <BSP_LED_Init>

//   BSP_LED_On(LED_GREEN);

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000e62:	f000 f82f 	bl	8000ec4 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000e66:	bf00      	nop
}
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20006cf8 	.word	0x20006cf8

08000e70 <displayConcurrentMode>:
/* USER CODE BEGIN FD */
//TODO: remove function
static void displayConcurrentMode()
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
    APP_DBG("Dynamic Concurrent Mode BLE/OpenThread starting...");
 8000e74:	4a03      	ldr	r2, [pc, #12]	; (8000e84 <displayConcurrentMode+0x14>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f001 fd0d 	bl	8002898 <logApplication>
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	08012e90 	.word	0x08012e90

08000e88 <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug( void )
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000e8c:	f002 f89e 	bl	8002fcc <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000e90:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000e94:	f7ff ff90 	bl	8000db8 <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000e98:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000e9c:	f7ff ffa0 	bl	8000de0 <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000ea0:	f009 fc9a 	bl	800a7d8 <DbgTraceInit>
#endif

  return;
 8000ea4:	bf00      	nop
}
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000eac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000eb0:	f7ff ffaa 	bl	8000e08 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000eb4:	f010 fcd6 	bl	8011864 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000eb8:	2004      	movs	r0, #4
 8000eba:	f7ff ff67 	bl	8000d8c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000ebe:	bf00      	nop
}
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000eca:	f008 fdfd 	bl	8009ac8 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f00a fc16 	bl	800b700 <osMutexNew>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <appe_Tl_Init+0x70>)
 8000ed8:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f00a fd56 	bl	800b990 <osSemaphoreNew>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <appe_Tl_Init+0x74>)
 8000ee8:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8000eea:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <appe_Tl_Init+0x78>)
 8000eec:	2100      	movs	r1, #0
 8000eee:	4814      	ldr	r0, [pc, #80]	; (8000f40 <appe_Tl_Init+0x7c>)
 8000ef0:	f00a fa3c 	bl	800b36c <osThreadNew>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <appe_Tl_Init+0x80>)
 8000ef8:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <appe_Tl_Init+0x84>)
 8000efc:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <appe_Tl_Init+0x88>)
 8000f00:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000f02:	463b      	mov	r3, r7
 8000f04:	4619      	mov	r1, r3
 8000f06:	4812      	ldr	r0, [pc, #72]	; (8000f50 <appe_Tl_Init+0x8c>)
 8000f08:	f008 fca4 	bl	8009854 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <appe_Tl_Init+0x90>)
 8000f0e:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <appe_Tl_Init+0x94>)
 8000f12:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <appe_Tl_Init+0x98>)
 8000f16:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000f18:	f240 533c 	movw	r3, #1340	; 0x53c
 8000f1c:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	4618      	mov	r0, r3
 8000f24:	f008 ff8a 	bl	8009e3c <TL_MM_Init>

  TL_Enable();
 8000f28:	f008 fdc8 	bl	8009abc <TL_Enable>

  return;
 8000f2c:	bf00      	nop
}
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20006cd8 	.word	0x20006cd8
 8000f38:	20006ce0 	.word	0x20006ce0
 8000f3c:	08013f90 	.word	0x08013f90
 8000f40:	08001085 	.word	0x08001085
 8000f44:	20006cdc 	.word	0x20006cdc
 8000f48:	20030728 	.word	0x20030728
 8000f4c:	08000f61 	.word	0x08000f61
 8000f50:	08000fa1 	.word	0x08000fa1
 8000f54:	20030940 	.word	0x20030940
 8000f58:	20030834 	.word	0x20030834
 8000f5c:	200301ec 	.word	0x200301ec

08000f60 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <APPE_SysStatusNot+0x16>
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d008      	beq.n	8000f86 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8000f74:	e00d      	b.n	8000f92 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <APPE_SysStatusNot+0x3c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f00a fc58 	bl	800b834 <osMutexAcquire>
      break;
 8000f84:	e005      	b.n	8000f92 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <APPE_SysStatusNot+0x3c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f00a fcb0 	bl	800b8f0 <osMutexRelease>
      break;
 8000f90:	bf00      	nop
  }
  return;
 8000f92:	bf00      	nop
}
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20006cd8 	.word	0x20006cd8

08000fa0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	330b      	adds	r3, #11
 8000fae:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8000fba:	d004      	beq.n	8000fc6 <APPE_SysUserEvtRx+0x26>
 8000fbc:	f249 2201 	movw	r2, #37377	; 0x9201
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d003      	beq.n	8000fcc <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8000fc4:	e008      	b.n	8000fd8 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8000fc6:	f000 f833 	bl	8001030 <APPE_SysEvtReadyProcessing>
         break;
 8000fca:	e005      	b.n	8000fd8 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	789b      	ldrb	r3, [r3, #2]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f805 	bl	8000fe0 <APPE_SysEvtError>
         break;
 8000fd6:	bf00      	nop
  }
  return;
 8000fd8:	bf00      	nop
}
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b7d      	cmp	r3, #125	; 0x7d
 8000fee:	d002      	beq.n	8000ff6 <APPE_SysEvtError+0x16>
 8000ff0:	2b7e      	cmp	r3, #126	; 0x7e
 8000ff2:	d006      	beq.n	8001002 <APPE_SysEvtError+0x22>
 8000ff4:	e00b      	b.n	800100e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <APPE_SysEvtError+0x44>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f001 fc4c 	bl	8002898 <logApplication>
       break;
 8001000:	e00c      	b.n	800101c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001002:	4a09      	ldr	r2, [pc, #36]	; (8001028 <APPE_SysEvtError+0x48>)
 8001004:	2101      	movs	r1, #1
 8001006:	2000      	movs	r0, #0
 8001008:	f001 fc46 	bl	8002898 <logApplication>
       break;
 800100c:	e006      	b.n	800101c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	4a06      	ldr	r2, [pc, #24]	; (800102c <APPE_SysEvtError+0x4c>)
 8001012:	2101      	movs	r1, #1
 8001014:	2000      	movs	r0, #0
 8001016:	f001 fc3f 	bl	8002898 <logApplication>
       break;
 800101a:	bf00      	nop
  }
  return;
 800101c:	bf00      	nop
}
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	08012ec4 	.word	0x08012ec4
 8001028:	08012ee8 	.word	0x08012ee8
 800102c:	08012f08 	.word	0x08012f08

08001030 <APPE_SysEvtReadyProcessing>:
//  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
//  return;
//}

static void APPE_SysEvtReadyProcessing( void )
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001034:	f008 ff76 	bl	8009f24 <TL_TRACES_Init>
   * APP_THREAD_Init_Dyn_1() : Thread Stack Init until it's ready to be configured (default channel, PID, etc...)
   * APP_BLE_Init_Dyn_2()    : Start ADV
   * APP_THREAD_Init_Dyn_2() : Thread Stack configuration (default channel, PID, etc...) to be able to start scanning
   *                           or joining a Thread Network
   */
  APP_DBG("1- Initialisation of BLE Stack...");
 8001038:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <APPE_SysEvtReadyProcessing+0x44>)
 800103a:	2101      	movs	r1, #1
 800103c:	2000      	movs	r0, #0
 800103e:	f001 fc2b 	bl	8002898 <logApplication>
  APP_BLE_Init_Dyn_1();
 8001042:	f00e f947 	bl	800f2d4 <APP_BLE_Init_Dyn_1>
  APP_DBG("2- Initialisation of OpenThread Stack. FW info :");
 8001046:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <APPE_SysEvtReadyProcessing+0x48>)
 8001048:	2101      	movs	r1, #1
 800104a:	2000      	movs	r0, #0
 800104c:	f001 fc24 	bl	8002898 <logApplication>
  APP_THREAD_Init_Dyn_1();
 8001050:	f00f f89a 	bl	8010188 <APP_THREAD_Init_Dyn_1>

  APP_DBG("3- Start BLE ADV...");
 8001054:	4a09      	ldr	r2, [pc, #36]	; (800107c <APPE_SysEvtReadyProcessing+0x4c>)
 8001056:	2101      	movs	r1, #1
 8001058:	2000      	movs	r0, #0
 800105a:	f001 fc1d 	bl	8002898 <logApplication>
  APP_BLE_Init_Dyn_2();
 800105e:	f00e f9b5 	bl	800f3cc <APP_BLE_Init_Dyn_2>
  APP_DBG("4- Configure OpenThread (Channel, PANID, IPv6 stack, ...) and Start it...");
 8001062:	4a07      	ldr	r2, [pc, #28]	; (8001080 <APPE_SysEvtReadyProcessing+0x50>)
 8001064:	2101      	movs	r1, #1
 8001066:	2000      	movs	r0, #0
 8001068:	f001 fc16 	bl	8002898 <logApplication>
  APP_THREAD_Init_Dyn_2();
 800106c:	f00f f8b4 	bl	80101d8 <APP_THREAD_Init_Dyn_2>
  /* Thread stack is initialized, low power mode can be enabled */
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
  UTIL_LPM_SetStopMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
#endif

  return;
 8001070:	bf00      	nop
}
 8001072:	bd80      	pop	{r7, pc}
 8001074:	08012f28 	.word	0x08012f28
 8001078:	08012f4c 	.word	0x08012f4c
 800107c:	08012f80 	.word	0x08012f80
 8001080:	08012f94 	.word	0x08012f94

08001084 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	2100      	movs	r1, #0
 8001092:	2001      	movs	r0, #1
 8001094:	f00a fa72 	bl	800b57c <osThreadFlagsWait>
     shci_user_evt_proc();
 8001098:	f008 fbf8 	bl	800988c <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 800109c:	e7f6      	b.n	800108c <ShciUserEvtProcess+0x8>
	...

080010a0 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <shci_notify_asynch_evt+0x1c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2101      	movs	r1, #1
 80010ae:	4618      	mov	r0, r3
 80010b0:	f00a fa02 	bl	800b4b8 <osThreadFlagsSet>
  return;
 80010b4:	bf00      	nop
}
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20006cdc 	.word	0x20006cdc

080010c0 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <shci_cmd_resp_release+0x1c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f00a fd63 	bl	800bb98 <osSemaphoreRelease>
  return;
 80010d2:	bf00      	nop
}
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20006ce0 	.word	0x20006ce0

080010e0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <shci_cmd_resp_wait+0x20>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	4618      	mov	r0, r3
 80010f2:	f00a fceb 	bl	800bacc <osSemaphoreAcquire>
  return;
 80010f6:	bf00      	nop
}
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20006ce0 	.word	0x20006ce0

08001104 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
#if(CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	330b      	adds	r3, #11
 8001110:	1c99      	adds	r1, r3, #2
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7a9b      	ldrb	r3, [r3, #10]
 8001116:	3b02      	subs	r3, #2
 8001118:	461a      	mov	r2, r3
 800111a:	2001      	movs	r0, #1
 800111c:	f009 fb82 	bl	800a824 <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f008 fec7 	bl	8009eb4 <TL_MM_EvtDone>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
#ifdef CFG_DEBUG_TRACE_UART
  MX_LPUART1_UART_Init();
 8001132:	f001 fd63 	bl	8002bfc <MX_LPUART1_UART_Init>
  return;
 8001136:	bf00      	nop
#endif
}
 8001138:	bd80      	pop	{r7, pc}

0800113a <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	460b      	mov	r3, r1
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001148:	897a      	ldrh	r2, [r7, #10]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68f9      	ldr	r1, [r7, #12]
 800114e:	2002      	movs	r0, #2
 8001150:	f000 ff98 	bl	8002084 <HW_UART_Transmit_DMA>

  return;
 8001154:	bf00      	nop
}
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001160:	4a05      	ldr	r2, [pc, #20]	; (8001178 <MX_FREERTOS_Init+0x1c>)
 8001162:	2100      	movs	r1, #0
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_FREERTOS_Init+0x20>)
 8001166:	f00a f901 	bl	800b36c <osThreadNew>
 800116a:	4602      	mov	r2, r0
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <MX_FREERTOS_Init+0x24>)
 800116e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  APPE_Init();
 8001170:	f7ff fe5e 	bl	8000e30 <APPE_Init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	08013fb4 	.word	0x08013fb4
 800117c:	08001185 	.word	0x08001185
 8001180:	20006ce4 	.word	0x20006ce4

08001184 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800118c:	2001      	movs	r0, #1
 800118e:	f00a fa89 	bl	800b6a4 <osDelay>
 8001192:	e7fb      	b.n	800118c <StartDefaultTask+0x8>

08001194 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800119c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4013      	ands	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011b8:	68fb      	ldr	r3, [r7, #12]
}
 80011ba:	bf00      	nop
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011ca:	2004      	movs	r0, #4
 80011cc:	f7ff ffe2 	bl	8001194 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d0:	2001      	movs	r0, #1
 80011d2:	f7ff ffdf 	bl	8001194 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011d6:	2002      	movs	r0, #2
 80011d8:	f7ff ffdc 	bl	8001194 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2105      	movs	r1, #5
 80011e0:	200e      	movs	r0, #14
 80011e2:	f002 f824 	bl	800322e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80011e6:	200e      	movs	r0, #14
 80011e8:	f002 f83b 	bl	8003262 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2105      	movs	r1, #5
 80011f0:	203a      	movs	r0, #58	; 0x3a
 80011f2:	f002 f81c 	bl	800322e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80011f6:	203a      	movs	r0, #58	; 0x3a
 80011f8:	f002 f833 	bl	8003262 <HAL_NVIC_EnableIRQ>

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800121c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001220:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001222:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4313      	orrs	r3, r2
 800122a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800122c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001230:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001238:	68fb      	ldr	r3, [r7, #12]
}
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124a:	2004      	movs	r0, #4
 800124c:	f7ff ffe2 	bl	8001214 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001250:	2001      	movs	r0, #1
 8001252:	f7ff ffdf 	bl	8001214 <LL_AHB2_GRP1_EnableClock>

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <LL_EXTI_EnableIT_0_31>:
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <LL_EXTI_EnableIT_0_31+0x24>)
 8001266:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800126a:	4905      	ldr	r1, [pc, #20]	; (8001280 <LL_EXTI_EnableIT_0_31+0x24>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4313      	orrs	r3, r2
 8001270:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	58000800 	.word	0x58000800

08001284 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4904      	ldr	r1, [pc, #16]	; (80012a4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4313      	orrs	r3, r2
 8001296:	600b      	str	r3, [r1, #0]

}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	58000800 	.word	0x58000800

080012a8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <ReadRtcSsrValue+0x3c>)
 80012b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <ReadRtcSsrValue+0x3c>)
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80012be:	e005      	b.n	80012cc <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <ReadRtcSsrValue+0x3c>)
 80012c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d1f5      	bne.n	80012c0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80012d4:	683b      	ldr	r3, [r7, #0]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40002800 	.word	0x40002800

080012e8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	4613      	mov	r3, r2
 80012f6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80012f8:	79ba      	ldrb	r2, [r7, #6]
 80012fa:	491d      	ldr	r1, [pc, #116]	; (8001370 <LinkTimerAfter+0x88>)
 80012fc:	4613      	mov	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	440b      	add	r3, r1
 8001306:	3315      	adds	r3, #21
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	2b06      	cmp	r3, #6
 8001310:	d009      	beq.n	8001326 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001312:	7bfa      	ldrb	r2, [r7, #15]
 8001314:	4916      	ldr	r1, [pc, #88]	; (8001370 <LinkTimerAfter+0x88>)
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	3314      	adds	r3, #20
 8001322:	79fa      	ldrb	r2, [r7, #7]
 8001324:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001326:	79fa      	ldrb	r2, [r7, #7]
 8001328:	4911      	ldr	r1, [pc, #68]	; (8001370 <LinkTimerAfter+0x88>)
 800132a:	4613      	mov	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	440b      	add	r3, r1
 8001334:	3315      	adds	r3, #21
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800133a:	79fa      	ldrb	r2, [r7, #7]
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <LinkTimerAfter+0x88>)
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	440b      	add	r3, r1
 8001348:	3314      	adds	r3, #20
 800134a:	79ba      	ldrb	r2, [r7, #6]
 800134c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800134e:	79ba      	ldrb	r2, [r7, #6]
 8001350:	4907      	ldr	r1, [pc, #28]	; (8001370 <LinkTimerAfter+0x88>)
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	440b      	add	r3, r1
 800135c:	3315      	adds	r3, #21
 800135e:	79fa      	ldrb	r2, [r7, #7]
 8001360:	701a      	strb	r2, [r3, #0]

  return;
 8001362:	bf00      	nop
}
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000094 	.word	0x20000094

08001374 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	460a      	mov	r2, r1
 800137e:	71fb      	strb	r3, [r7, #7]
 8001380:	4613      	mov	r3, r2
 8001382:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <LinkTimerBefore+0xb8>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	79ba      	ldrb	r2, [r7, #6]
 800138c:	429a      	cmp	r2, r3
 800138e:	d032      	beq.n	80013f6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001390:	79ba      	ldrb	r2, [r7, #6]
 8001392:	4927      	ldr	r1, [pc, #156]	; (8001430 <LinkTimerBefore+0xbc>)
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	440b      	add	r3, r1
 800139e:	3314      	adds	r3, #20
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	4922      	ldr	r1, [pc, #136]	; (8001430 <LinkTimerBefore+0xbc>)
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	440b      	add	r3, r1
 80013b2:	3315      	adds	r3, #21
 80013b4:	79fa      	ldrb	r2, [r7, #7]
 80013b6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80013b8:	79fa      	ldrb	r2, [r7, #7]
 80013ba:	491d      	ldr	r1, [pc, #116]	; (8001430 <LinkTimerBefore+0xbc>)
 80013bc:	4613      	mov	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4413      	add	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	440b      	add	r3, r1
 80013c6:	3315      	adds	r3, #21
 80013c8:	79ba      	ldrb	r2, [r7, #6]
 80013ca:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80013cc:	79fa      	ldrb	r2, [r7, #7]
 80013ce:	4918      	ldr	r1, [pc, #96]	; (8001430 <LinkTimerBefore+0xbc>)
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	440b      	add	r3, r1
 80013da:	3314      	adds	r3, #20
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80013e0:	79ba      	ldrb	r2, [r7, #6]
 80013e2:	4913      	ldr	r1, [pc, #76]	; (8001430 <LinkTimerBefore+0xbc>)
 80013e4:	4613      	mov	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4413      	add	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	440b      	add	r3, r1
 80013ee:	3314      	adds	r3, #20
 80013f0:	79fa      	ldrb	r2, [r7, #7]
 80013f2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80013f4:	e014      	b.n	8001420 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80013f6:	79fa      	ldrb	r2, [r7, #7]
 80013f8:	490d      	ldr	r1, [pc, #52]	; (8001430 <LinkTimerBefore+0xbc>)
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	440b      	add	r3, r1
 8001404:	3315      	adds	r3, #21
 8001406:	79ba      	ldrb	r2, [r7, #6]
 8001408:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800140a:	79ba      	ldrb	r2, [r7, #6]
 800140c:	4908      	ldr	r1, [pc, #32]	; (8001430 <LinkTimerBefore+0xbc>)
 800140e:	4613      	mov	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	440b      	add	r3, r1
 8001418:	3314      	adds	r3, #20
 800141a:	79fa      	ldrb	r2, [r7, #7]
 800141c:	701a      	strb	r2, [r3, #0]
  return;
 800141e:	bf00      	nop
}
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20000124 	.word	0x20000124
 8001430:	20000094 	.word	0x20000094

08001434 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800143e:	4b4e      	ldr	r3, [pc, #312]	; (8001578 <linkTimer+0x144>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b06      	cmp	r3, #6
 8001446:	d118      	bne.n	800147a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001448:	4b4b      	ldr	r3, [pc, #300]	; (8001578 <linkTimer+0x144>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4b4b      	ldr	r3, [pc, #300]	; (800157c <linkTimer+0x148>)
 8001450:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001452:	4a49      	ldr	r2, [pc, #292]	; (8001578 <linkTimer+0x144>)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001458:	79fa      	ldrb	r2, [r7, #7]
 800145a:	4949      	ldr	r1, [pc, #292]	; (8001580 <linkTimer+0x14c>)
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	440b      	add	r3, r1
 8001466:	3315      	adds	r3, #21
 8001468:	2206      	movs	r2, #6
 800146a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800146c:	4b45      	ldr	r3, [pc, #276]	; (8001584 <linkTimer+0x150>)
 800146e:	f04f 32ff 	mov.w	r2, #4294967295
 8001472:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	81fb      	strh	r3, [r7, #14]
 8001478:	e078      	b.n	800156c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800147a:	f000 f909 	bl	8001690 <ReturnTimeElapsed>
 800147e:	4603      	mov	r3, r0
 8001480:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	493e      	ldr	r1, [pc, #248]	; (8001580 <linkTimer+0x14c>)
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	3308      	adds	r3, #8
 8001492:	6819      	ldr	r1, [r3, #0]
 8001494:	89fb      	ldrh	r3, [r7, #14]
 8001496:	79fa      	ldrb	r2, [r7, #7]
 8001498:	4419      	add	r1, r3
 800149a:	4839      	ldr	r0, [pc, #228]	; (8001580 <linkTimer+0x14c>)
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4403      	add	r3, r0
 80014a6:	3308      	adds	r3, #8
 80014a8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80014aa:	79fa      	ldrb	r2, [r7, #7]
 80014ac:	4934      	ldr	r1, [pc, #208]	; (8001580 <linkTimer+0x14c>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	440b      	add	r3, r1
 80014b8:	3308      	adds	r3, #8
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80014be:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <linkTimer+0x144>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	4619      	mov	r1, r3
 80014c6:	4a2e      	ldr	r2, [pc, #184]	; (8001580 <linkTimer+0x14c>)
 80014c8:	460b      	mov	r3, r1
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	440b      	add	r3, r1
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4413      	add	r3, r2
 80014d2:	3308      	adds	r3, #8
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d337      	bcc.n	800154c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80014dc:	4b26      	ldr	r3, [pc, #152]	; (8001578 <linkTimer+0x144>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80014e2:	7b7a      	ldrb	r2, [r7, #13]
 80014e4:	4926      	ldr	r1, [pc, #152]	; (8001580 <linkTimer+0x14c>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	440b      	add	r3, r1
 80014f0:	3315      	adds	r3, #21
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80014f6:	e013      	b.n	8001520 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80014f8:	7b7a      	ldrb	r2, [r7, #13]
 80014fa:	4921      	ldr	r1, [pc, #132]	; (8001580 <linkTimer+0x14c>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	440b      	add	r3, r1
 8001506:	3315      	adds	r3, #21
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800150c:	7b7a      	ldrb	r2, [r7, #13]
 800150e:	491c      	ldr	r1, [pc, #112]	; (8001580 <linkTimer+0x14c>)
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	440b      	add	r3, r1
 800151a:	3315      	adds	r3, #21
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001520:	7b3b      	ldrb	r3, [r7, #12]
 8001522:	2b06      	cmp	r3, #6
 8001524:	d00b      	beq.n	800153e <linkTimer+0x10a>
 8001526:	7b3a      	ldrb	r2, [r7, #12]
 8001528:	4915      	ldr	r1, [pc, #84]	; (8001580 <linkTimer+0x14c>)
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	440b      	add	r3, r1
 8001534:	3308      	adds	r3, #8
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	429a      	cmp	r2, r3
 800153c:	d2dc      	bcs.n	80014f8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800153e:	7b7a      	ldrb	r2, [r7, #13]
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fecf 	bl	80012e8 <LinkTimerAfter>
 800154a:	e00f      	b.n	800156c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <linkTimer+0x144>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ff0c 	bl	8001374 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <linkTimer+0x144>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <linkTimer+0x148>)
 8001564:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <linkTimer+0x144>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800156c:	89fb      	ldrh	r3, [r7, #14]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000124 	.word	0x20000124
 800157c:	20000125 	.word	0x20000125
 8001580:	20000094 	.word	0x20000094
 8001584:	20000128 	.word	0x20000128

08001588 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	460a      	mov	r2, r1
 8001592:	71fb      	strb	r3, [r7, #7]
 8001594:	4613      	mov	r3, r2
 8001596:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001598:	4b39      	ldr	r3, [pc, #228]	; (8001680 <UnlinkTimer+0xf8>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	79fa      	ldrb	r2, [r7, #7]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d111      	bne.n	80015c8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <UnlinkTimer+0xf8>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b36      	ldr	r3, [pc, #216]	; (8001684 <UnlinkTimer+0xfc>)
 80015ac:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80015ae:	79fa      	ldrb	r2, [r7, #7]
 80015b0:	4935      	ldr	r1, [pc, #212]	; (8001688 <UnlinkTimer+0x100>)
 80015b2:	4613      	mov	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	440b      	add	r3, r1
 80015bc:	3315      	adds	r3, #21
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <UnlinkTimer+0xf8>)
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	e03e      	b.n	8001646 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80015c8:	79fa      	ldrb	r2, [r7, #7]
 80015ca:	492f      	ldr	r1, [pc, #188]	; (8001688 <UnlinkTimer+0x100>)
 80015cc:	4613      	mov	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	3314      	adds	r3, #20
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80015dc:	79fa      	ldrb	r2, [r7, #7]
 80015de:	492a      	ldr	r1, [pc, #168]	; (8001688 <UnlinkTimer+0x100>)
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	440b      	add	r3, r1
 80015ea:	3315      	adds	r3, #21
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80015f0:	79f9      	ldrb	r1, [r7, #7]
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	4824      	ldr	r0, [pc, #144]	; (8001688 <UnlinkTimer+0x100>)
 80015f6:	460b      	mov	r3, r1
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	440b      	add	r3, r1
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4403      	add	r3, r0
 8001600:	3315      	adds	r3, #21
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b2d8      	uxtb	r0, r3
 8001606:	4920      	ldr	r1, [pc, #128]	; (8001688 <UnlinkTimer+0x100>)
 8001608:	4613      	mov	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	440b      	add	r3, r1
 8001612:	3315      	adds	r3, #21
 8001614:	4602      	mov	r2, r0
 8001616:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001618:	7bbb      	ldrb	r3, [r7, #14]
 800161a:	2b06      	cmp	r3, #6
 800161c:	d013      	beq.n	8001646 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800161e:	79f9      	ldrb	r1, [r7, #7]
 8001620:	7bba      	ldrb	r2, [r7, #14]
 8001622:	4819      	ldr	r0, [pc, #100]	; (8001688 <UnlinkTimer+0x100>)
 8001624:	460b      	mov	r3, r1
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	440b      	add	r3, r1
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4403      	add	r3, r0
 800162e:	3314      	adds	r3, #20
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b2d8      	uxtb	r0, r3
 8001634:	4914      	ldr	r1, [pc, #80]	; (8001688 <UnlinkTimer+0x100>)
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	440b      	add	r3, r1
 8001640:	3314      	adds	r3, #20
 8001642:	4602      	mov	r2, r0
 8001644:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001646:	79fa      	ldrb	r2, [r7, #7]
 8001648:	490f      	ldr	r1, [pc, #60]	; (8001688 <UnlinkTimer+0x100>)
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	440b      	add	r3, r1
 8001654:	330c      	adds	r3, #12
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <UnlinkTimer+0xf8>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b06      	cmp	r3, #6
 8001662:	d107      	bne.n	8001674 <UnlinkTimer+0xec>
 8001664:	79bb      	ldrb	r3, [r7, #6]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d104      	bne.n	8001674 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <UnlinkTimer+0x104>)
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	601a      	str	r2, [r3, #0]
  }

  return;
 8001672:	bf00      	nop
 8001674:	bf00      	nop
}
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	20000124 	.word	0x20000124
 8001684:	20000125 	.word	0x20000125
 8001688:	20000094 	.word	0x20000094
 800168c:	20000128 	.word	0x20000128

08001690 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <ReturnTimeElapsed+0x70>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169e:	d026      	beq.n	80016ee <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80016a0:	f7ff fe02 	bl	80012a8 <ReadRtcSsrValue>
 80016a4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <ReturnTimeElapsed+0x70>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d805      	bhi.n	80016bc <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <ReturnTimeElapsed+0x70>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	e00a      	b.n	80016d2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <ReturnTimeElapsed+0x74>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80016c8:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <ReturnTimeElapsed+0x70>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <ReturnTimeElapsed+0x78>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <ReturnTimeElapsed+0x7c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	40d3      	lsrs	r3, r2
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	e001      	b.n	80016f2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	b29b      	uxth	r3, r3
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000128 	.word	0x20000128
 8001704:	2000025a 	.word	0x2000025a
 8001708:	20000259 	.word	0x20000259
 800170c:	20000258 	.word	0x20000258

08001710 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d108      	bne.n	8001732 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001720:	f7ff fdc2 	bl	80012a8 <ReadRtcSsrValue>
 8001724:	4602      	mov	r2, r0
 8001726:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <RestartWakeupCounter+0xa8>)
 8001728:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800172a:	2003      	movs	r0, #3
 800172c:	f001 fdb9 	bl	80032a2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001730:	e03e      	b.n	80017b0 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d803      	bhi.n	8001740 <RestartWakeupCounter+0x30>
 8001738:	4b20      	ldr	r3, [pc, #128]	; (80017bc <RestartWakeupCounter+0xac>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d002      	beq.n	8001746 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	3b01      	subs	r3, #1
 8001744:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001746:	bf00      	nop
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <RestartWakeupCounter+0xb0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f7      	beq.n	8001748 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <RestartWakeupCounter+0xb0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <RestartWakeupCounter+0xb0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800176c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <RestartWakeupCounter+0xb4>)
 8001770:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001774:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001776:	2003      	movs	r0, #3
 8001778:	f001 fda1 	bl	80032be <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <RestartWakeupCounter+0xb8>)
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	0c1b      	lsrs	r3, r3, #16
 8001782:	041b      	lsls	r3, r3, #16
 8001784:	88fa      	ldrh	r2, [r7, #6]
 8001786:	4910      	ldr	r1, [pc, #64]	; (80017c8 <RestartWakeupCounter+0xb8>)
 8001788:	4313      	orrs	r3, r2
 800178a:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800178c:	f7ff fd8c 	bl	80012a8 <ReadRtcSsrValue>
 8001790:	4602      	mov	r2, r0
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <RestartWakeupCounter+0xa8>)
 8001794:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <RestartWakeupCounter+0xb0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <RestartWakeupCounter+0xb0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017a8:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80017aa:	f3af 8000 	nop.w
  return ;
 80017ae:	bf00      	nop
}
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000128 	.word	0x20000128
 80017bc:	20000258 	.word	0x20000258
 80017c0:	20000254 	.word	0x20000254
 80017c4:	58000800 	.word	0x58000800
 80017c8:	40002800 	.word	0x40002800

080017cc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80017d2:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <RescheduleTimerList+0x124>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017de:	d108      	bne.n	80017f2 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80017e0:	bf00      	nop
 80017e2:	4b44      	ldr	r3, [pc, #272]	; (80018f4 <RescheduleTimerList+0x128>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f7      	bne.n	80017e2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80017f2:	4b40      	ldr	r3, [pc, #256]	; (80018f4 <RescheduleTimerList+0x128>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	4b3e      	ldr	r3, [pc, #248]	; (80018f4 <RescheduleTimerList+0x128>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001804:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001806:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <RescheduleTimerList+0x12c>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800180c:	7bfa      	ldrb	r2, [r7, #15]
 800180e:	493b      	ldr	r1, [pc, #236]	; (80018fc <RescheduleTimerList+0x130>)
 8001810:	4613      	mov	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	440b      	add	r3, r1
 800181a:	3308      	adds	r3, #8
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001820:	f7ff ff36 	bl	8001690 <ReturnTimeElapsed>
 8001824:	4603      	mov	r3, r0
 8001826:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	429a      	cmp	r2, r3
 800182e:	d205      	bcs.n	800183c <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001834:	4b32      	ldr	r3, [pc, #200]	; (8001900 <RescheduleTimerList+0x134>)
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
 800183a:	e04d      	b.n	80018d8 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800183c:	88fb      	ldrh	r3, [r7, #6]
 800183e:	4a31      	ldr	r2, [pc, #196]	; (8001904 <RescheduleTimerList+0x138>)
 8001840:	8812      	ldrh	r2, [r2, #0]
 8001842:	b292      	uxth	r2, r2
 8001844:	4413      	add	r3, r2
 8001846:	461a      	mov	r2, r3
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4293      	cmp	r3, r2
 800184c:	d906      	bls.n	800185c <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800184e:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <RescheduleTimerList+0x138>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001854:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <RescheduleTimerList+0x134>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e03d      	b.n	80018d8 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	b29a      	uxth	r2, r3
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001866:	4b26      	ldr	r3, [pc, #152]	; (8001900 <RescheduleTimerList+0x134>)
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800186c:	e034      	b.n	80018d8 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	4922      	ldr	r1, [pc, #136]	; (80018fc <RescheduleTimerList+0x130>)
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	440b      	add	r3, r1
 800187c:	3308      	adds	r3, #8
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	429a      	cmp	r2, r3
 8001884:	d20a      	bcs.n	800189c <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001886:	7bfa      	ldrb	r2, [r7, #15]
 8001888:	491c      	ldr	r1, [pc, #112]	; (80018fc <RescheduleTimerList+0x130>)
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	440b      	add	r3, r1
 8001894:	3308      	adds	r3, #8
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e013      	b.n	80018c4 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	4917      	ldr	r1, [pc, #92]	; (80018fc <RescheduleTimerList+0x130>)
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	3308      	adds	r3, #8
 80018ac:	6819      	ldr	r1, [r3, #0]
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	7bfa      	ldrb	r2, [r7, #15]
 80018b2:	1ac9      	subs	r1, r1, r3
 80018b4:	4811      	ldr	r0, [pc, #68]	; (80018fc <RescheduleTimerList+0x130>)
 80018b6:	4613      	mov	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4403      	add	r3, r0
 80018c0:	3308      	adds	r3, #8
 80018c2:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80018c4:	7bfa      	ldrb	r2, [r7, #15]
 80018c6:	490d      	ldr	r1, [pc, #52]	; (80018fc <RescheduleTimerList+0x130>)
 80018c8:	4613      	mov	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	440b      	add	r3, r1
 80018d2:	3315      	adds	r3, #21
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d1c7      	bne.n	800186e <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80018de:	89bb      	ldrh	r3, [r7, #12]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff15 	bl	8001710 <RestartWakeupCounter>

  return ;
 80018e6:	bf00      	nop
}
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40002800 	.word	0x40002800
 80018f4:	20000254 	.word	0x20000254
 80018f8:	20000124 	.word	0x20000124
 80018fc:	20000094 	.word	0x20000094
 8001900:	2000012c 	.word	0x2000012c
 8001904:	2000025c 	.word	0x2000025c

08001908 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800190e:	f3ef 8310 	mrs	r3, PRIMASK
 8001912:	617b      	str	r3, [r7, #20]
  return(result);
 8001914:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001918:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800191a:	4b5e      	ldr	r3, [pc, #376]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	22ca      	movs	r2, #202	; 0xca
 8001922:	625a      	str	r2, [r3, #36]	; 0x24
 8001924:	4b5b      	ldr	r3, [pc, #364]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2253      	movs	r2, #83	; 0x53
 800192c:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 800192e:	4b59      	ldr	r3, [pc, #356]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	4b57      	ldr	r3, [pc, #348]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001940:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001942:	4b55      	ldr	r3, [pc, #340]	; (8001a98 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800194a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800194e:	4953      	ldr	r1, [pc, #332]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	330c      	adds	r3, #12
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d170      	bne.n	8001a46 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001964:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001968:	494c      	ldr	r1, [pc, #304]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	440b      	add	r3, r1
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001978:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800197c:	4947      	ldr	r1, [pc, #284]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	440b      	add	r3, r1
 8001988:	3310      	adds	r3, #16
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800198e:	4b44      	ldr	r3, [pc, #272]	; (8001aa0 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d04e      	beq.n	8001a36 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001998:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800199c:	493f      	ldr	r1, [pc, #252]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	440b      	add	r3, r1
 80019a8:	330d      	adds	r3, #13
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d125      	bne.n	80019fe <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80019b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019b6:	2101      	movs	r1, #1
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fde5 	bl	8001588 <UnlinkTimer>
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80019c8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019cc:	4933      	ldr	r1, [pc, #204]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	440b      	add	r3, r1
 80019d8:	3304      	adds	r3, #4
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019e0:	4611      	mov	r1, r2
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 fa46 	bl	8001e74 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80019e8:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	22ca      	movs	r2, #202	; 0xca
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24
 80019f2:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2253      	movs	r2, #83	; 0x53
 80019fa:	625a      	str	r2, [r3, #36]	; 0x24
 80019fc:	e013      	b.n	8001a26 <HW_TS_RTC_Wakeup_Handler+0x11e>
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001a08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 f9a7 	bl	8001d60 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	22ca      	movs	r2, #202	; 0xca
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2253      	movs	r2, #83	; 0x53
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001a26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	69b8      	ldr	r0, [r7, #24]
 8001a30:	f000 faa6 	bl	8001f80 <HW_TS_RTC_Int_AppNot>
 8001a34:	e024      	b.n	8001a80 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8001a36:	f7ff fec9 	bl	80017cc <RescheduleTimerList>
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	f383 8810 	msr	PRIMASK, r3
 8001a44:	e01c      	b.n	8001a80 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001a46:	bf00      	nop
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f7      	beq.n	8001a48 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a58:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001a6c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001a70:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	22ff      	movs	r2, #255	; 0xff
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001a8a:	bf00      	nop
}
 8001a8c:	3728      	adds	r7, #40	; 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000254 	.word	0x20000254
 8001a98:	20000124 	.word	0x20000124
 8001a9c:	20000094 	.word	0x20000094
 8001aa0:	2000012c 	.word	0x2000012c
 8001aa4:	58000800 	.word	0x58000800

08001aa8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001ab4:	4a64      	ldr	r2, [pc, #400]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001aba:	4b63      	ldr	r3, [pc, #396]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	22ca      	movs	r2, #202	; 0xca
 8001ac2:	625a      	str	r2, [r3, #36]	; 0x24
 8001ac4:	4b60      	ldr	r3, [pc, #384]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2253      	movs	r2, #83	; 0x53
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001ace:	4b5f      	ldr	r3, [pc, #380]	; (8001c4c <HW_TS_Init+0x1a4>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	4a5e      	ldr	r2, [pc, #376]	; (8001c4c <HW_TS_Init+0x1a4>)
 8001ad4:	f043 0320 	orr.w	r3, r3, #32
 8001ad8:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001ada:	4b5c      	ldr	r3, [pc, #368]	; (8001c4c <HW_TS_Init+0x1a4>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	f1c3 0304 	rsb	r3, r3, #4
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	4b58      	ldr	r3, [pc, #352]	; (8001c50 <HW_TS_Init+0x1a8>)
 8001aee:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001af0:	4b56      	ldr	r3, [pc, #344]	; (8001c4c <HW_TS_Init+0x1a4>)
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001af8:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001afc:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	fa92 f2a2 	rbit	r2, r2
 8001b04:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	2a00      	cmp	r2, #0
 8001b0e:	d101      	bne.n	8001b14 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001b10:	2220      	movs	r2, #32
 8001b12:	e003      	b.n	8001b1c <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	fab2 f282 	clz	r2, r2
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	40d3      	lsrs	r3, r2
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	3301      	adds	r3, #1
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <HW_TS_Init+0x1ac>)
 8001b26:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001b28:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <HW_TS_Init+0x1a4>)
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	3301      	adds	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HW_TS_Init+0x1b0>)
 8001b3a:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001b3c:	4b46      	ldr	r3, [pc, #280]	; (8001c58 <HW_TS_Init+0x1b0>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	4a44      	ldr	r2, [pc, #272]	; (8001c54 <HW_TS_Init+0x1ac>)
 8001b44:	7812      	ldrb	r2, [r2, #0]
 8001b46:	fb02 f303 	mul.w	r3, r2, r3
 8001b4a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b4e:	4a40      	ldr	r2, [pc, #256]	; (8001c50 <HW_TS_Init+0x1a8>)
 8001b50:	7812      	ldrb	r2, [r2, #0]
 8001b52:	40d3      	lsrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d904      	bls.n	8001b6a <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001b60:	4b3e      	ldr	r3, [pc, #248]	; (8001c5c <HW_TS_Init+0x1b4>)
 8001b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b66:	801a      	strh	r2, [r3, #0]
 8001b68:	e003      	b.n	8001b72 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <HW_TS_Init+0x1b4>)
 8001b70:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001b72:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b76:	f7ff fb85 	bl	8001284 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001b7a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b7e:	f7ff fb6d 	bl	800125c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d143      	bne.n	8001c10 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b88:	4b35      	ldr	r3, [pc, #212]	; (8001c60 <HW_TS_Init+0x1b8>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b8e:	4b35      	ldr	r3, [pc, #212]	; (8001c64 <HW_TS_Init+0x1bc>)
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	77fb      	strb	r3, [r7, #31]
 8001b9a:	e00c      	b.n	8001bb6 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001b9c:	7ffa      	ldrb	r2, [r7, #31]
 8001b9e:	4932      	ldr	r1, [pc, #200]	; (8001c68 <HW_TS_Init+0x1c0>)
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	330c      	adds	r3, #12
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001bb0:	7ffb      	ldrb	r3, [r7, #31]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	77fb      	strb	r3, [r7, #31]
 8001bb6:	7ffb      	ldrb	r3, [r7, #31]
 8001bb8:	2b05      	cmp	r3, #5
 8001bba:	d9ef      	bls.n	8001b9c <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <HW_TS_Init+0x1c4>)
 8001bbe:	2206      	movs	r2, #6
 8001bc0:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001bc2:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bd4:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001bea:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001bec:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <HW_TS_Init+0x1c8>)
 8001bee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bf2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	f001 fb62 	bl	80032be <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	e00a      	b.n	8001c26 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f001 fb3e 	bl	80032a2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	22ff      	movs	r2, #255	; 0xff
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001c30:	2200      	movs	r2, #0
 8001c32:	2106      	movs	r1, #6
 8001c34:	2003      	movs	r0, #3
 8001c36:	f001 fafa 	bl	800322e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001c3a:	2003      	movs	r0, #3
 8001c3c:	f001 fb11 	bl	8003262 <HAL_NVIC_EnableIRQ>

  return;
 8001c40:	bf00      	nop
}
 8001c42:	3720      	adds	r7, #32
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000254 	.word	0x20000254
 8001c4c:	40002800 	.word	0x40002800
 8001c50:	20000258 	.word	0x20000258
 8001c54:	20000259 	.word	0x20000259
 8001c58:	2000025a 	.word	0x2000025a
 8001c5c:	2000025c 	.word	0x2000025c
 8001c60:	2000012c 	.word	0x2000012c
 8001c64:	20000128 	.word	0x20000128
 8001c68:	20000094 	.word	0x20000094
 8001c6c:	20000124 	.word	0x20000124
 8001c70:	58000800 	.word	0x58000800

08001c74 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b08b      	sub	sp, #44	; 0x2c
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	4613      	mov	r3, r2
 8001c82:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c8e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001c90:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001c92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c94:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001c96:	e004      	b.n	8001ca2 <HW_TS_Create+0x2e>
  {
    loop++;
 8001c98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001ca2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	d80c      	bhi.n	8001cc4 <HW_TS_Create+0x50>
 8001caa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001cae:	492b      	ldr	r1, [pc, #172]	; (8001d5c <HW_TS_Create+0xe8>)
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	440b      	add	r3, r1
 8001cba:	330c      	adds	r3, #12
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1e9      	bne.n	8001c98 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001cc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cc8:	2b06      	cmp	r3, #6
 8001cca:	d037      	beq.n	8001d3c <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001ccc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001cd0:	4922      	ldr	r1, [pc, #136]	; (8001d5c <HW_TS_Create+0xe8>)
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	440b      	add	r3, r1
 8001cdc:	330c      	adds	r3, #12
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001cec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001cf0:	491a      	ldr	r1, [pc, #104]	; (8001d5c <HW_TS_Create+0xe8>)
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	440b      	add	r3, r1
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001d02:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001d06:	4915      	ldr	r1, [pc, #84]	; (8001d5c <HW_TS_Create+0xe8>)
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	440b      	add	r3, r1
 8001d12:	330d      	adds	r3, #13
 8001d14:	79fa      	ldrb	r2, [r7, #7]
 8001d16:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001d18:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001d1c:	490f      	ldr	r1, [pc, #60]	; (8001d5c <HW_TS_Create+0xe8>)
 8001d1e:	4613      	mov	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	440b      	add	r3, r1
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001d32:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d3a:	e007      	b.n	8001d4c <HW_TS_Create+0xd8>
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	372c      	adds	r7, #44	; 0x2c
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	20000094 	.word	0x20000094

08001d60 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8001d6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d70:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001d72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d74:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001d76:	2003      	movs	r0, #3
 8001d78:	f001 fa81 	bl	800327e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001d7c:	4b37      	ldr	r3, [pc, #220]	; (8001e5c <HW_TS_Stop+0xfc>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	22ca      	movs	r2, #202	; 0xca
 8001d84:	625a      	str	r2, [r3, #36]	; 0x24
 8001d86:	4b35      	ldr	r3, [pc, #212]	; (8001e5c <HW_TS_Stop+0xfc>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2253      	movs	r2, #83	; 0x53
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001d90:	79fa      	ldrb	r2, [r7, #7]
 8001d92:	4933      	ldr	r1, [pc, #204]	; (8001e60 <HW_TS_Stop+0x100>)
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	440b      	add	r3, r1
 8001d9e:	330c      	adds	r3, #12
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d148      	bne.n	8001e3a <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fbeb 	bl	8001588 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001db2:	4b2c      	ldr	r3, [pc, #176]	; (8001e64 <HW_TS_Stop+0x104>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001db8:	7cfb      	ldrb	r3, [r7, #19]
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d135      	bne.n	8001e2a <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001dbe:	4b2a      	ldr	r3, [pc, #168]	; (8001e68 <HW_TS_Stop+0x108>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dca:	d108      	bne.n	8001dde <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001dcc:	bf00      	nop
 8001dce:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <HW_TS_Stop+0xfc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f7      	bne.n	8001dce <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001dde:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <HW_TS_Stop+0xfc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HW_TS_Stop+0xfc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001df0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001df2:	bf00      	nop
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <HW_TS_Stop+0xfc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f7      	beq.n	8001df4 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HW_TS_Stop+0xfc>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <HW_TS_Stop+0xfc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001e18:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <HW_TS_Stop+0x10c>)
 8001e1c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e20:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001e22:	2003      	movs	r0, #3
 8001e24:	f001 fa4b 	bl	80032be <HAL_NVIC_ClearPendingIRQ>
 8001e28:	e007      	b.n	8001e3a <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HW_TS_Stop+0x110>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	7cfa      	ldrb	r2, [r7, #19]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d001      	beq.n	8001e3a <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8001e36:	f7ff fcc9 	bl	80017cc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001e3a:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <HW_TS_Stop+0xfc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	22ff      	movs	r2, #255	; 0xff
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001e44:	2003      	movs	r0, #3
 8001e46:	f001 fa0c 	bl	8003262 <HAL_NVIC_EnableIRQ>
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001e54:	bf00      	nop
}
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000254 	.word	0x20000254
 8001e60:	20000094 	.word	0x20000094
 8001e64:	20000124 	.word	0x20000124
 8001e68:	40002800 	.word	0x40002800
 8001e6c:	58000800 	.word	0x58000800
 8001e70:	20000125 	.word	0x20000125

08001e74 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001e80:	79fa      	ldrb	r2, [r7, #7]
 8001e82:	493b      	ldr	r1, [pc, #236]	; (8001f70 <HW_TS_Start+0xfc>)
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	440b      	add	r3, r1
 8001e8e:	330c      	adds	r3, #12
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d103      	bne.n	8001ea0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff60 	bl	8001d60 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8001ea4:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ea8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001eaa:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001eac:	2003      	movs	r0, #3
 8001eae:	f001 f9e6 	bl	800327e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001eb2:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <HW_TS_Start+0x100>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	22ca      	movs	r2, #202	; 0xca
 8001eba:	625a      	str	r2, [r3, #36]	; 0x24
 8001ebc:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <HW_TS_Start+0x100>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2253      	movs	r2, #83	; 0x53
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001ec6:	79fa      	ldrb	r2, [r7, #7]
 8001ec8:	4929      	ldr	r1, [pc, #164]	; (8001f70 <HW_TS_Start+0xfc>)
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	330c      	adds	r3, #12
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001eda:	79fa      	ldrb	r2, [r7, #7]
 8001edc:	4924      	ldr	r1, [pc, #144]	; (8001f70 <HW_TS_Start+0xfc>)
 8001ede:	4613      	mov	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	440b      	add	r3, r1
 8001ee8:	3308      	adds	r3, #8
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001eee:	79fa      	ldrb	r2, [r7, #7]
 8001ef0:	491f      	ldr	r1, [pc, #124]	; (8001f70 <HW_TS_Start+0xfc>)
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	440b      	add	r3, r1
 8001efc:	3304      	adds	r3, #4
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fa95 	bl	8001434 <linkTimer>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <HW_TS_Start+0x104>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HW_TS_Start+0x108>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	7c7a      	ldrb	r2, [r7, #17]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d002      	beq.n	8001f26 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8001f20:	f7ff fc54 	bl	80017cc <RescheduleTimerList>
 8001f24:	e013      	b.n	8001f4e <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001f26:	79fa      	ldrb	r2, [r7, #7]
 8001f28:	4911      	ldr	r1, [pc, #68]	; (8001f70 <HW_TS_Start+0xfc>)
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	440b      	add	r3, r1
 8001f34:	3308      	adds	r3, #8
 8001f36:	6819      	ldr	r1, [r3, #0]
 8001f38:	8a7b      	ldrh	r3, [r7, #18]
 8001f3a:	79fa      	ldrb	r2, [r7, #7]
 8001f3c:	1ac9      	subs	r1, r1, r3
 8001f3e:	480c      	ldr	r0, [pc, #48]	; (8001f70 <HW_TS_Start+0xfc>)
 8001f40:	4613      	mov	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4403      	add	r3, r0
 8001f4a:	3308      	adds	r3, #8
 8001f4c:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HW_TS_Start+0x100>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	22ff      	movs	r2, #255	; 0xff
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001f58:	2003      	movs	r0, #3
 8001f5a:	f001 f982 	bl	8003262 <HAL_NVIC_EnableIRQ>
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001f68:	bf00      	nop
}
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000094 	.word	0x20000094
 8001f74:	20000254 	.word	0x20000254
 8001f78:	20000124 	.word	0x20000124
 8001f7c:	20000125 	.word	0x20000125

08001f80 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4798      	blx	r3

  return;
 8001f92:	bf00      	nop
}
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607b      	str	r3, [r7, #4]
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	73fb      	strb	r3, [r7, #15]
 8001faa:	4613      	mov	r3, r2
 8001fac:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <HW_UART_Receive_IT+0x1e>
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d00d      	beq.n	8001fd4 <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8001fb8:	e019      	b.n	8001fee <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 8001fba:	4a0f      	ldr	r2, [pc, #60]	; (8001ff8 <HW_UART_Receive_IT+0x5c>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HW_UART_Receive_IT+0x60>)
 8001fc2:	4a0f      	ldr	r2, [pc, #60]	; (8002000 <HW_UART_Receive_IT+0x64>)
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	89bb      	ldrh	r3, [r7, #12]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68b9      	ldr	r1, [r7, #8]
 8001fcc:	480b      	ldr	r0, [pc, #44]	; (8001ffc <HW_UART_Receive_IT+0x60>)
 8001fce:	f004 f883 	bl	80060d8 <HAL_UART_Receive_IT>
            break;
 8001fd2:	e00c      	b.n	8001fee <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 8001fd4:	4a0b      	ldr	r2, [pc, #44]	; (8002004 <HW_UART_Receive_IT+0x68>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HW_UART_Receive_IT+0x6c>)
 8001fdc:	4a0b      	ldr	r2, [pc, #44]	; (800200c <HW_UART_Receive_IT+0x70>)
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	89bb      	ldrh	r3, [r7, #12]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	4808      	ldr	r0, [pc, #32]	; (8002008 <HW_UART_Receive_IT+0x6c>)
 8001fe8:	f004 f876 	bl	80060d8 <HAL_UART_Receive_IT>
            break;
 8001fec:	bf00      	nop
    }

    return;
 8001fee:	bf00      	nop
}
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20006cec 	.word	0x20006cec
 8001ffc:	20006e54 	.word	0x20006e54
 8002000:	40013800 	.word	0x40013800
 8002004:	20006cf0 	.word	0x20006cf0
 8002008:	20006d68 	.word	0x20006d68
 800200c:	40008000 	.word	0x40008000

08002010 <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	4603      	mov	r3, r0
 800201c:	73fb      	strb	r3, [r7, #15]
 800201e:	4613      	mov	r3, r2
 8002020:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <HW_UART_Transmit_IT+0x1e>
 8002028:	2b02      	cmp	r3, #2
 800202a:	d00d      	beq.n	8002048 <HW_UART_Transmit_IT+0x38>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 800202c:	e019      	b.n	8002062 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(huart1, USART1);
 800202e:	4a0f      	ldr	r2, [pc, #60]	; (800206c <HW_UART_Transmit_IT+0x5c>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HW_UART_Transmit_IT+0x60>)
 8002036:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <HW_UART_Transmit_IT+0x64>)
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	89bb      	ldrh	r3, [r7, #12]
 800203c:	461a      	mov	r2, r3
 800203e:	68b9      	ldr	r1, [r7, #8]
 8002040:	480b      	ldr	r0, [pc, #44]	; (8002070 <HW_UART_Transmit_IT+0x60>)
 8002042:	f003 ffc5 	bl	8005fd0 <HAL_UART_Transmit_IT>
            break;
 8002046:	e00c      	b.n	8002062 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(hlpuart1, LPUART1);
 8002048:	4a0b      	ldr	r2, [pc, #44]	; (8002078 <HW_UART_Transmit_IT+0x68>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HW_UART_Transmit_IT+0x6c>)
 8002050:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <HW_UART_Transmit_IT+0x70>)
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	89bb      	ldrh	r3, [r7, #12]
 8002056:	461a      	mov	r2, r3
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	4808      	ldr	r0, [pc, #32]	; (800207c <HW_UART_Transmit_IT+0x6c>)
 800205c:	f003 ffb8 	bl	8005fd0 <HAL_UART_Transmit_IT>
            break;
 8002060:	bf00      	nop
    }

    return;
 8002062:	bf00      	nop
}
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20006cf4 	.word	0x20006cf4
 8002070:	20006e54 	.word	0x20006e54
 8002074:	40013800 	.word	0x40013800
 8002078:	20006ce8 	.word	0x20006ce8
 800207c:	20006d68 	.word	0x20006d68
 8002080:	40008000 	.word	0x40008000

08002084 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	4603      	mov	r3, r0
 8002090:	73fb      	strb	r3, [r7, #15]
 8002092:	4613      	mov	r3, r2
 8002094:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800209a:	2300      	movs	r3, #0
 800209c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <HW_UART_Transmit_DMA+0x26>
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d00f      	beq.n	80020c8 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80020a8:	e01d      	b.n	80020e6 <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 80020aa:	4a1f      	ldr	r2, [pc, #124]	; (8002128 <HW_UART_Transmit_DMA+0xa4>)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80020b0:	4b1e      	ldr	r3, [pc, #120]	; (800212c <HW_UART_Transmit_DMA+0xa8>)
 80020b2:	4a1f      	ldr	r2, [pc, #124]	; (8002130 <HW_UART_Transmit_DMA+0xac>)
 80020b4:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80020b6:	89bb      	ldrh	r3, [r7, #12]
 80020b8:	461a      	mov	r2, r3
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	481b      	ldr	r0, [pc, #108]	; (800212c <HW_UART_Transmit_DMA+0xa8>)
 80020be:	f004 f8e3 	bl	8006288 <HAL_UART_Transmit_DMA>
 80020c2:	4603      	mov	r3, r0
 80020c4:	75fb      	strb	r3, [r7, #23]
            break;
 80020c6:	e00e      	b.n	80020e6 <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 80020c8:	4a1a      	ldr	r2, [pc, #104]	; (8002134 <HW_UART_Transmit_DMA+0xb0>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <HW_UART_Transmit_DMA+0xb4>)
 80020d0:	4a1a      	ldr	r2, [pc, #104]	; (800213c <HW_UART_Transmit_DMA+0xb8>)
 80020d2:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 80020d4:	89bb      	ldrh	r3, [r7, #12]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	4817      	ldr	r0, [pc, #92]	; (8002138 <HW_UART_Transmit_DMA+0xb4>)
 80020dc:	f004 f8d4 	bl	8006288 <HAL_UART_Transmit_DMA>
 80020e0:	4603      	mov	r3, r0
 80020e2:	75fb      	strb	r3, [r7, #23]
            break;
 80020e4:	bf00      	nop
    }

    switch (hal_status)
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d817      	bhi.n	800211c <HW_UART_Transmit_DMA+0x98>
 80020ec:	a201      	add	r2, pc, #4	; (adr r2, 80020f4 <HW_UART_Transmit_DMA+0x70>)
 80020ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f2:	bf00      	nop
 80020f4:	08002105 	.word	0x08002105
 80020f8:	0800210b 	.word	0x0800210b
 80020fc:	08002111 	.word	0x08002111
 8002100:	08002117 	.word	0x08002117
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002104:	2300      	movs	r3, #0
 8002106:	75bb      	strb	r3, [r7, #22]
            break;
 8002108:	e009      	b.n	800211e <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800210a:	2301      	movs	r3, #1
 800210c:	75bb      	strb	r3, [r7, #22]
            break;
 800210e:	e006      	b.n	800211e <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002110:	2302      	movs	r3, #2
 8002112:	75bb      	strb	r3, [r7, #22]
            break;
 8002114:	e003      	b.n	800211e <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002116:	2303      	movs	r3, #3
 8002118:	75bb      	strb	r3, [r7, #22]
            break;
 800211a:	e000      	b.n	800211e <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 800211c:	bf00      	nop
    }

    return hw_status;
 800211e:	7dbb      	ldrb	r3, [r7, #22]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20006cf4 	.word	0x20006cf4
 800212c:	20006e54 	.word	0x20006e54
 8002130:	40013800 	.word	0x40013800
 8002134:	20006ce8 	.word	0x20006ce8
 8002138:	20006d68 	.word	0x20006d68
 800213c:	40008000 	.word	0x40008000

08002140 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0e      	ldr	r2, [pc, #56]	; (8002188 <HAL_UART_RxCpltCallback+0x48>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d00b      	beq.n	800216a <HAL_UART_RxCpltCallback+0x2a>
 8002152:	4a0e      	ldr	r2, [pc, #56]	; (800218c <HAL_UART_RxCpltCallback+0x4c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d000      	beq.n	800215a <HAL_UART_RxCpltCallback+0x1a>
            }
            break;
#endif

        default:
            break;
 8002158:	e012      	b.n	8002180 <HAL_UART_RxCpltCallback+0x40>
            if(HW_huart1RxCb)
 800215a:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <HAL_UART_RxCpltCallback+0x50>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00b      	beq.n	800217a <HAL_UART_RxCpltCallback+0x3a>
                HW_huart1RxCb();
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_UART_RxCpltCallback+0x50>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4798      	blx	r3
            break;
 8002168:	e007      	b.n	800217a <HAL_UART_RxCpltCallback+0x3a>
            if(HW_hlpuart1RxCb)
 800216a:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <HAL_UART_RxCpltCallback+0x54>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_UART_RxCpltCallback+0x3e>
                HW_hlpuart1RxCb();
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_UART_RxCpltCallback+0x54>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4798      	blx	r3
            break;
 8002178:	e001      	b.n	800217e <HAL_UART_RxCpltCallback+0x3e>
            break;
 800217a:	bf00      	nop
 800217c:	e000      	b.n	8002180 <HAL_UART_RxCpltCallback+0x40>
            break;
 800217e:	bf00      	nop
    }

    return;
 8002180:	bf00      	nop
}
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40008000 	.word	0x40008000
 800218c:	40013800 	.word	0x40013800
 8002190:	20006cec 	.word	0x20006cec
 8002194:	20006cf0 	.word	0x20006cf0

08002198 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0e      	ldr	r2, [pc, #56]	; (80021e0 <HAL_UART_TxCpltCallback+0x48>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00b      	beq.n	80021c2 <HAL_UART_TxCpltCallback+0x2a>
 80021aa:	4a0e      	ldr	r2, [pc, #56]	; (80021e4 <HAL_UART_TxCpltCallback+0x4c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d000      	beq.n	80021b2 <HAL_UART_TxCpltCallback+0x1a>
            }
            break;
#endif

        default:
            break;
 80021b0:	e012      	b.n	80021d8 <HAL_UART_TxCpltCallback+0x40>
            if(HW_huart1TxCb)
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_UART_TxCpltCallback+0x50>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00b      	beq.n	80021d2 <HAL_UART_TxCpltCallback+0x3a>
                HW_huart1TxCb();
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_UART_TxCpltCallback+0x50>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4798      	blx	r3
            break;
 80021c0:	e007      	b.n	80021d2 <HAL_UART_TxCpltCallback+0x3a>
            if(HW_hlpuart1TxCb)
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_UART_TxCpltCallback+0x54>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d005      	beq.n	80021d6 <HAL_UART_TxCpltCallback+0x3e>
                HW_hlpuart1TxCb();
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_UART_TxCpltCallback+0x54>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4798      	blx	r3
            break;
 80021d0:	e001      	b.n	80021d6 <HAL_UART_TxCpltCallback+0x3e>
            break;
 80021d2:	bf00      	nop
 80021d4:	e000      	b.n	80021d8 <HAL_UART_TxCpltCallback+0x40>
            break;
 80021d6:	bf00      	nop
    }

    return;
 80021d8:	bf00      	nop
}
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40008000 	.word	0x40008000
 80021e4:	40013800 	.word	0x40013800
 80021e8:	20006cf4 	.word	0x20006cf4
 80021ec:	20006ce8 	.word	0x20006ce8

080021f0 <LL_RCC_LSE_SetDriveCapability>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80021f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002200:	f023 0218 	bic.w	r2, r3, #24
 8002204:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_AHB2_GRP1_EnableClock>:
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002228:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800222a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4313      	orrs	r3, r2
 8002232:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002238:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4013      	ands	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002240:	68fb      	ldr	r3, [r7, #12]
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002252:	f000 fe6f 	bl	8002f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002256:	f000 f817 	bl	8002288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800225a:	f7fe fff4 	bl	8001246 <MX_GPIO_Init>
  MX_DMA_Init();
 800225e:	f7fe ffb2 	bl	80011c6 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002262:	f000 fccb 	bl	8002bfc <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8002266:	f000 f92b 	bl	80024c0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800226a:	f000 fd13 	bl	8002c94 <MX_USART1_UART_Init>
  MX_RF_Init();
 800226e:	f000 f8f5 	bl	800245c <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002272:	f009 f811 	bl	800b298 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002276:	f7fe ff71 	bl	800115c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800227a:	f009 f841 	bl	800b300 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 800227e:	f04f 30ff 	mov.w	r0, #4294967295
 8002282:	f00f fb2f 	bl	80118e4 <UTIL_SEQ_Run>
 8002286:	e7fa      	b.n	800227e <main+0x30>

08002288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b0ae      	sub	sp, #184	; 0xb8
 800228c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800228e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002292:	2248      	movs	r2, #72	; 0x48
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f00f fc89 	bl	8011bae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800229c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
 80022ac:	615a      	str	r2, [r3, #20]
 80022ae:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	2250      	movs	r2, #80	; 0x50
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f00f fc79 	bl	8011bae <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80022bc:	f001 fc8e 	bl	8003bdc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7ff ff95 	bl	80021f0 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022c6:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <SystemClock_Config+0xfc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022ce:	4a2d      	ldr	r2, [pc, #180]	; (8002384 <SystemClock_Config+0xfc>)
 80022d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <SystemClock_Config+0xfc>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80022e2:	2307      	movs	r3, #7
 80022e4:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ea:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80022ec:	2301      	movs	r3, #1
 80022ee:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022f6:	2340      	movs	r3, #64	; 0x40
 80022f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002302:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002306:	4618      	mov	r0, r3
 8002308:	f002 f808 	bl	800431c <HAL_RCC_OscConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002312:	f000 f89f 	bl	8002454 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002316:	236f      	movs	r3, #111	; 0x6f
 8002318:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800231a:	2302      	movs	r3, #2
 800231c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800231e:	2300      	movs	r3, #0
 8002320:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002322:	2300      	movs	r3, #0
 8002324:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002326:	2300      	movs	r3, #0
 8002328:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800232a:	2300      	movs	r3, #0
 800232c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800232e:	2300      	movs	r3, #0
 8002330:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002332:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002336:	2101      	movs	r1, #1
 8002338:	4618      	mov	r0, r3
 800233a:	f002 fb7b 	bl	8004a34 <HAL_RCC_ClockConfig>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002344:	f000 f886 	bl	8002454 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002348:	f643 0303 	movw	r3, #14339	; 0x3803
 800234c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800235a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 800235c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002360:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002362:	2300      	movs	r3, #0
 8002364:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002366:	2310      	movs	r3, #16
 8002368:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	4618      	mov	r0, r3
 800236e:	f002 ffd2 	bl	8005316 <HAL_RCCEx_PeriphCLKConfig>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002378:	f000 f86c 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800237c:	bf00      	nop
 800237e:	37b8      	adds	r7, #184	; 0xb8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	58000400 	.word	0x58000400

08002388 <BSP_LED_Init>:

/* USER CODE BEGIN 4 */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8002392:	f107 030c 	add.w	r3, r7, #12
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	60da      	str	r2, [r3, #12]
 80023a0:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80023a2:	2002      	movs	r0, #2
 80023a4:	f7ff ff3a 	bl	800221c <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <BSP_LED_Init+0x6c>)
 80023ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023b0:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b2:	2301      	movs	r3, #1
 80023b4:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ba:	2302      	movs	r3, #2
 80023bc:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	4a0d      	ldr	r2, [pc, #52]	; (80023f8 <BSP_LED_Init+0x70>)
 80023c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c6:	f107 020c 	add.w	r2, r7, #12
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f001 fa59 	bl	8003884 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	4a08      	ldr	r2, [pc, #32]	; (80023f8 <BSP_LED_Init+0x70>)
 80023d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <BSP_LED_Init+0x6c>)
 80023de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023e2:	2200      	movs	r2, #0
 80023e4:	4619      	mov	r1, r3
 80023e6:	f001 fbbd 	bl	8003b64 <HAL_GPIO_WritePin>
}
 80023ea:	bf00      	nop
 80023ec:	3720      	adds	r7, #32
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	08013fd8 	.word	0x08013fd8
 80023f8:	20000004 	.word	0x20000004

080023fc <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <BSP_LED_On+0x2c>)
 800240a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	4a06      	ldr	r2, [pc, #24]	; (800242c <BSP_LED_On+0x30>)
 8002412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002416:	2201      	movs	r2, #1
 8002418:	4619      	mov	r1, r3
 800241a:	f001 fba3 	bl	8003b64 <HAL_GPIO_WritePin>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000004 	.word	0x20000004
 800242c:	08013fd8 	.word	0x08013fd8

08002430 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a04      	ldr	r2, [pc, #16]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d101      	bne.n	8002446 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002442:	f000 fd97 	bl	8002f74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40014800 	.word	0x40014800

08002454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002458:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800245a:	e7fe      	b.n	800245a <Error_Handler+0x6>

0800245c <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0

}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800246e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800247a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800247e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002498:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800249a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80024a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4013      	ands	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024b0:	68fb      	ldr	r3, [r7, #12]
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <MX_RTC_Init+0x4c>)
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <MX_RTC_Init+0x50>)
 80024c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <MX_RTC_Init+0x4c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80024d0:	4b0e      	ldr	r3, [pc, #56]	; (800250c <MX_RTC_Init+0x4c>)
 80024d2:	220f      	movs	r2, #15
 80024d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80024d6:	4b0d      	ldr	r3, [pc, #52]	; (800250c <MX_RTC_Init+0x4c>)
 80024d8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80024dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <MX_RTC_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <MX_RTC_Init+0x4c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <MX_RTC_Init+0x4c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <MX_RTC_Init+0x4c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024f6:	4805      	ldr	r0, [pc, #20]	; (800250c <MX_RTC_Init+0x4c>)
 80024f8:	f003 f993 	bl	8005822 <HAL_RTC_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002502:	f7ff ffa7 	bl	8002454 <Error_Handler>
  }

}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20006cf8 	.word	0x20006cf8
 8002510:	40002800 	.word	0x40002800

08002514 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a06      	ldr	r2, [pc, #24]	; (800253c <HAL_RTC_MspInit+0x28>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d105      	bne.n	8002532 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002526:	f7ff ffa0 	bl	800246a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800252a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800252e:	f7ff ffad 	bl	800248c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40002800 	.word	0x40002800

08002540 <LL_AHB3_GRP1_EnableClock>:
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800254e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4313      	orrs	r3, r2
 8002556:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002564:	68fb      	ldr	r3, [r7, #12]
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002576:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800257a:	f7ff ffe1 	bl	8002540 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	210f      	movs	r1, #15
 8002582:	f06f 0001 	mvn.w	r0, #1
 8002586:	f000 fe52 	bl	800322e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2105      	movs	r1, #5
 800258e:	202e      	movs	r0, #46	; 0x2e
 8002590:	f000 fe4d 	bl	800322e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002594:	202e      	movs	r0, #46	; 0x2e
 8002596:	f000 fe64 	bl	8003262 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	210f      	movs	r1, #15
 800259e:	202c      	movs	r0, #44	; 0x2c
 80025a0:	f000 fe45 	bl	800322e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 80025a4:	2200      	movs	r2, #0
 80025a6:	210f      	movs	r1, #15
 80025a8:	202d      	movs	r0, #45	; 0x2d
 80025aa:	f000 fe40 	bl	800322e <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b085      	sub	sp, #20
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80025ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80025ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4013      	ands	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025d6:	68fb      	ldr	r3, [r7, #12]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08c      	sub	sp, #48	; 0x30
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	201a      	movs	r0, #26
 80025fa:	f000 fe18 	bl	800322e <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80025fe:	201a      	movs	r0, #26
 8002600:	f000 fe2f 	bl	8003262 <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002604:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002608:	f7ff ffd3 	bl	80025b2 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800260c:	f107 0208 	add.w	r2, r7, #8
 8002610:	f107 030c 	add.w	r3, r7, #12
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f002 fbf6 	bl	8004e08 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800261c:	f002 fbde 	bl	8004ddc <HAL_RCC_GetPCLK2Freq>
 8002620:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002624:	4a12      	ldr	r2, [pc, #72]	; (8002670 <HAL_InitTick+0x8c>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	0c9b      	lsrs	r3, r3, #18
 800262c:	3b01      	subs	r3, #1
 800262e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002630:	4b10      	ldr	r3, [pc, #64]	; (8002674 <HAL_InitTick+0x90>)
 8002632:	4a11      	ldr	r2, [pc, #68]	; (8002678 <HAL_InitTick+0x94>)
 8002634:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8002636:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <HAL_InitTick+0x90>)
 8002638:	f240 32e7 	movw	r2, #999	; 0x3e7
 800263c:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800263e:	4a0d      	ldr	r2, [pc, #52]	; (8002674 <HAL_InitTick+0x90>)
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_InitTick+0x90>)
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_InitTick+0x90>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002650:	4808      	ldr	r0, [pc, #32]	; (8002674 <HAL_InitTick+0x90>)
 8002652:	f003 f9d4 	bl	80059fe <HAL_TIM_Base_Init>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d104      	bne.n	8002666 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 800265c:	4805      	ldr	r0, [pc, #20]	; (8002674 <HAL_InitTick+0x90>)
 800265e:	f003 fa2f 	bl	8005ac0 <HAL_TIM_Base_Start_IT>
 8002662:	4603      	mov	r3, r0
 8002664:	e000      	b.n	8002668 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
}
 8002668:	4618      	mov	r0, r3
 800266a:	3730      	adds	r7, #48	; 0x30
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	431bde83 	.word	0x431bde83
 8002674:	20006d1c 	.word	0x20006d1c
 8002678:	40014800 	.word	0x40014800

0800267c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002680:	e7fe      	b.n	8002680 <NMI_Handler+0x4>

08002682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002686:	e7fe      	b.n	8002686 <HardFault_Handler+0x4>

08002688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800268c:	e7fe      	b.n	800268c <MemManage_Handler+0x4>

0800268e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002692:	e7fe      	b.n	8002692 <BusFault_Handler+0x4>

08002694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002698:	e7fe      	b.n	8002698 <UsageFault_Handler+0x4>

0800269a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800269a:	b480      	push	{r7}
 800269c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80026ac:	4802      	ldr	r0, [pc, #8]	; (80026b8 <DMA1_Channel4_IRQHandler+0x10>)
 80026ae:	f000 ff97 	bl	80035e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20006ee0 	.word	0x20006ee0

080026bc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80026c0:	4802      	ldr	r0, [pc, #8]	; (80026cc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80026c2:	f003 fa4b 	bl	8005b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20006d1c 	.word	0x20006d1c

080026d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026d4:	4802      	ldr	r0, [pc, #8]	; (80026e0 <USART1_IRQHandler+0x10>)
 80026d6:	f003 fe57 	bl	8006388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20006e54 	.word	0x20006e54

080026e4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80026e8:	4802      	ldr	r0, [pc, #8]	; (80026f4 <LPUART1_IRQHandler+0x10>)
 80026ea:	f003 fe4d 	bl	8006388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20006d68 	.word	0x20006d68

080026f8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80026fc:	f001 fa4a 	bl	8003b94 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}

08002704 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002708:	4802      	ldr	r0, [pc, #8]	; (8002714 <DMA2_Channel4_IRQHandler+0x10>)
 800270a:	f000 ff69 	bl	80035e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20006df4 	.word	0x20006df4

08002718 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 800271c:	f7ff f8f4 	bl	8001908 <HW_TS_RTC_Wakeup_Handler>
}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}

08002724 <IPCC_C1_TX_IRQHandler>:
void IPCC_C1_TX_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8002728:	f00e ff08 	bl	801153c <HW_IPCC_Tx_Handler>
  return;
 800272c:	bf00      	nop
}
 800272e:	bd80      	pop	{r7, pc}

08002730 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8002734:	f00e fea8 	bl	8011488 <HW_IPCC_Rx_Handler>
  return;
 8002738:	bf00      	nop
}
 800273a:	bd80      	pop	{r7, pc}

0800273c <logRegion>:
 *
 * @returns  String with a log level color value.
 */
static inline uint16_t logRegion(char *aLogString, uint16_t aMaxSize,
        appliLogRegion_t aLogRegion)
{
 800273c:	b5b0      	push	{r4, r5, r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
 8002748:	4613      	mov	r3, r2
 800274a:	707b      	strb	r3, [r7, #1]
  char logRegionString[30U];

  switch (aLogRegion)
 800274c:	787b      	ldrb	r3, [r7, #1]
 800274e:	3b01      	subs	r3, #1
 8002750:	2b04      	cmp	r3, #4
 8002752:	d83e      	bhi.n	80027d2 <logRegion+0x96>
 8002754:	a201      	add	r2, pc, #4	; (adr r2, 800275c <logRegion+0x20>)
 8002756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275a:	bf00      	nop
 800275c:	08002771 	.word	0x08002771
 8002760:	08002785 	.word	0x08002785
 8002764:	08002799 	.word	0x08002799
 8002768:	080027ab 	.word	0x080027ab
 800276c:	080027bf 	.word	0x080027bf
  {
    case APPLI_LOG_REGION_GENERAL:
      strcpy(logRegionString, "[M4 APPLICATION]");
 8002770:	f107 0308 	add.w	r3, r7, #8
 8002774:	4a22      	ldr	r2, [pc, #136]	; (8002800 <logRegion+0xc4>)
 8002776:	461c      	mov	r4, r3
 8002778:	4615      	mov	r5, r2
 800277a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800277c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800277e:	682b      	ldr	r3, [r5, #0]
 8002780:	7023      	strb	r3, [r4, #0]
      break;
 8002782:	e02f      	b.n	80027e4 <logRegion+0xa8>
    case APPLI_LOG_REGION_OPENTHREAD_API:
      strcpy(logRegionString, "[M4 OPENTHREAD API]");
 8002784:	f107 0308 	add.w	r3, r7, #8
 8002788:	4a1e      	ldr	r2, [pc, #120]	; (8002804 <logRegion+0xc8>)
 800278a:	461c      	mov	r4, r3
 800278c:	4615      	mov	r5, r2
 800278e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002792:	682b      	ldr	r3, [r5, #0]
 8002794:	6023      	str	r3, [r4, #0]
      break;
 8002796:	e025      	b.n	80027e4 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_LINK:
      strcpy(logRegionString, "[M4 LINK API]");
 8002798:	f107 0308 	add.w	r3, r7, #8
 800279c:	4a1a      	ldr	r2, [pc, #104]	; (8002808 <logRegion+0xcc>)
 800279e:	461c      	mov	r4, r3
 80027a0:	4613      	mov	r3, r2
 80027a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027a4:	c407      	stmia	r4!, {r0, r1, r2}
 80027a6:	8023      	strh	r3, [r4, #0]
      break;
 80027a8:	e01c      	b.n	80027e4 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_INSTANCE:
      strcpy(logRegionString, "[M4 INSTANCE API]");
 80027aa:	f107 0308 	add.w	r3, r7, #8
 80027ae:	4a17      	ldr	r2, [pc, #92]	; (800280c <logRegion+0xd0>)
 80027b0:	461c      	mov	r4, r3
 80027b2:	4615      	mov	r5, r2
 80027b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027b8:	682b      	ldr	r3, [r5, #0]
 80027ba:	8023      	strh	r3, [r4, #0]
      break;
 80027bc:	e012      	b.n	80027e4 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_MESSAGE:
      strcpy(logRegionString, "[M4 MESSAGE API]");
 80027be:	f107 0308 	add.w	r3, r7, #8
 80027c2:	4a13      	ldr	r2, [pc, #76]	; (8002810 <logRegion+0xd4>)
 80027c4:	461c      	mov	r4, r3
 80027c6:	4615      	mov	r5, r2
 80027c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027cc:	682b      	ldr	r3, [r5, #0]
 80027ce:	7023      	strb	r3, [r4, #0]
      break;
 80027d0:	e008      	b.n	80027e4 <logRegion+0xa8>
    default:
      strcpy(logRegionString, "[M4]");
 80027d2:	f107 0308 	add.w	r3, r7, #8
 80027d6:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <logRegion+0xd8>)
 80027d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027dc:	6018      	str	r0, [r3, #0]
 80027de:	3304      	adds	r3, #4
 80027e0:	7019      	strb	r1, [r3, #0]
      break;
 80027e2:	bf00      	nop
  }

  return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 80027e4:	8879      	ldrh	r1, [r7, #2]
 80027e6:	f107 0308 	add.w	r3, r7, #8
 80027ea:	4a0b      	ldr	r2, [pc, #44]	; (8002818 <logRegion+0xdc>)
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f00f fa63 	bl	8011cb8 <sniprintf>
 80027f2:	4603      	mov	r3, r0
 80027f4:	b29b      	uxth	r3, r3
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3728      	adds	r7, #40	; 0x28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bdb0      	pop	{r4, r5, r7, pc}
 80027fe:	bf00      	nop
 8002800:	08012fec 	.word	0x08012fec
 8002804:	08013000 	.word	0x08013000
 8002808:	08013014 	.word	0x08013014
 800280c:	08013024 	.word	0x08013024
 8002810:	08013038 	.word	0x08013038
 8002814:	0801304c 	.word	0x0801304c
 8002818:	08013054 	.word	0x08013054

0800281c <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d005      	beq.n	8002838 <levelToString+0x1c>
 800282c:	2b03      	cmp	r3, #3
 800282e:	d005      	beq.n	800283c <levelToString+0x20>
 8002830:	2b01      	cmp	r3, #1
 8002832:	d105      	bne.n	8002840 <levelToString+0x24>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <levelToString+0x34>)
 8002836:	e004      	b.n	8002842 <levelToString+0x26>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <levelToString+0x38>)
 800283a:	e002      	b.n	8002842 <levelToString+0x26>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <levelToString+0x3c>)
 800283e:	e000      	b.n	8002842 <levelToString+0x26>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <levelToString+0x40>)
  }
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	08013058 	.word	0x08013058
 8002854:	08013060 	.word	0x08013060
 8002858:	08013068 	.word	0x08013068
 800285c:	08013070 	.word	0x08013070

08002860 <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
 800286c:	4613      	mov	r3, r2
 800286e:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 8002870:	887c      	ldrh	r4, [r7, #2]
 8002872:	787b      	ldrb	r3, [r7, #1]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff ffd1 	bl	800281c <levelToString>
 800287a:	4603      	mov	r3, r0
 800287c:	4a05      	ldr	r2, [pc, #20]	; (8002894 <logLevel+0x34>)
 800287e:	4621      	mov	r1, r4
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f00f fa19 	bl	8011cb8 <sniprintf>
 8002886:	4603      	mov	r3, r0
 8002888:	b29b      	uxth	r3, r3
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bd90      	pop	{r4, r7, pc}
 8002892:	bf00      	nop
 8002894:	08013078 	.word	0x08013078

08002898 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8002898:	b40c      	push	{r2, r3}
 800289a:	b580      	push	{r7, lr}
 800289c:	b0c4      	sub	sp, #272	; 0x110
 800289e:	af00      	add	r7, sp, #0
 80028a0:	4602      	mov	r2, r0
 80028a2:	1dfb      	adds	r3, r7, #7
 80028a4:	701a      	strb	r2, [r3, #0]
 80028a6:	1dbb      	adds	r3, r7, #6
 80028a8:	460a      	mov	r2, r1
 80028aa:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 80028b2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80028b6:	f107 020c 	add.w	r2, r7, #12
 80028ba:	18d0      	adds	r0, r2, r3
 80028bc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80028c0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80028c4:	b299      	uxth	r1, r3
 80028c6:	1dfb      	adds	r3, r7, #7
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	f7ff ffc8 	bl	8002860 <logLevel>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461a      	mov	r2, r3
 80028d4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80028d8:	4413      	add	r3, r2
 80028da:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 80028de:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80028e2:	f107 020c 	add.w	r2, r7, #12
 80028e6:	18d0      	adds	r0, r2, r3
 80028e8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80028ec:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80028f0:	b299      	uxth	r1, r3
 80028f2:	1dbb      	adds	r3, r7, #6
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	f7ff ff20 	bl	800273c <logRegion>
 80028fc:	4603      	mov	r3, r0
 80028fe:	461a      	mov	r2, r3
 8002900:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002904:	4413      	add	r3, r2
 8002906:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogRegion);
#endif

  /* Parse user string */
  va_list paramList;
  va_start(paramList, aFormat);
 800290a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800290e:	f107 0308 	add.w	r3, r7, #8
 8002912:	601a      	str	r2, [r3, #0]
  length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8002914:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002918:	f107 020c 	add.w	r2, r7, #12
 800291c:	18d0      	adds	r0, r2, r3
 800291e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002922:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8002926:	f107 0308 	add.w	r3, r7, #8
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002930:	f00f fa22 	bl	8011d78 <vsniprintf>
 8002934:	4603      	mov	r3, r0
 8002936:	b29a      	uxth	r2, r3
 8002938:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800293c:	4413      	add	r3, r2
 800293e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aFormat, paramList);
  logString[length++] = '\r';
 8002942:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 800294c:	461a      	mov	r2, r3
 800294e:	f107 030c 	add.w	r3, r7, #12
 8002952:	210d      	movs	r1, #13
 8002954:	5499      	strb	r1, [r3, r2]
  logString[length++] = '\n';
 8002956:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8002960:	461a      	mov	r2, r3
 8002962:	f107 030c 	add.w	r3, r7, #12
 8002966:	210a      	movs	r1, #10
 8002968:	5499      	strb	r1, [r3, r2]
  logString[length++] = 0;
 800296a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8002974:	461a      	mov	r2, r3
 8002976:	f107 030c 	add.w	r3, r7, #12
 800297a:	2100      	movs	r1, #0
 800297c:	5499      	strb	r1, [r3, r2]
  va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 800297e:	1dfb      	adds	r3, r7, #7
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b03      	cmp	r3, #3
 8002984:	d805      	bhi.n	8002992 <logApplication+0xfa>
  {
    printf("%s", logString);
 8002986:	f107 030c 	add.w	r3, r7, #12
 800298a:	4619      	mov	r1, r3
 800298c:	4805      	ldr	r0, [pc, #20]	; (80029a4 <logApplication+0x10c>)
 800298e:	f00f f917 	bl	8011bc0 <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8002992:	bf00      	nop
 8002994:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002998:	46bd      	mov	sp, r7
 800299a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800299e:	b002      	add	sp, #8
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	08013078 	.word	0x08013078

080029a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	e00a      	b.n	80029d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029ba:	f3af 8000 	nop.w
 80029be:	4601      	mov	r1, r0
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	60ba      	str	r2, [r7, #8]
 80029c6:	b2ca      	uxtb	r2, r1
 80029c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	3301      	adds	r3, #1
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	dbf0      	blt.n	80029ba <_read+0x12>
	}

return len;
 80029d8:	687b      	ldr	r3, [r7, #4]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
	return -1;
 80029ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a0a:	605a      	str	r2, [r3, #4]
	return 0;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <_isatty>:

int _isatty(int file)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
	return 1;
 8002a22:	2301      	movs	r3, #1
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
	return 0;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a54:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <_sbrk+0x5c>)
 8002a56:	4b15      	ldr	r3, [pc, #84]	; (8002aac <_sbrk+0x60>)
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a60:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <_sbrk+0x64>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d102      	bne.n	8002a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <_sbrk+0x64>)
 8002a6a:	4a12      	ldr	r2, [pc, #72]	; (8002ab4 <_sbrk+0x68>)
 8002a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a6e:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <_sbrk+0x64>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d207      	bcs.n	8002a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a7c:	f00f f862 	bl	8011b44 <__errno>
 8002a80:	4602      	mov	r2, r0
 8002a82:	230c      	movs	r3, #12
 8002a84:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8a:	e009      	b.n	8002aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a8c:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <_sbrk+0x64>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a92:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <_sbrk+0x64>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	4a05      	ldr	r2, [pc, #20]	; (8002ab0 <_sbrk+0x64>)
 8002a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20030000 	.word	0x20030000
 8002aac:	00000400 	.word	0x00000400
 8002ab0:	20000260 	.word	0x20000260
 8002ab4:	20006ff8 	.word	0x20006ff8

08002ab8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002abc:	4b26      	ldr	r3, [pc, #152]	; (8002b58 <SystemInit+0xa0>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002ac2:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <SystemInit+0xa0>)
 8002ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac8:	4a23      	ldr	r2, [pc, #140]	; (8002b58 <SystemInit+0xa0>)
 8002aca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ace:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002aea:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002af6:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <SystemInit+0xa4>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b08:	f023 0305 	bic.w	r3, r3, #5
 8002b0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b28:	4a0d      	ldr	r2, [pc, #52]	; (8002b60 <SystemInit+0xa8>)
 8002b2a:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b30:	4a0b      	ldr	r2, [pc, #44]	; (8002b60 <SystemInit+0xa8>)
 8002b32:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b48:	2200      	movs	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	e000ed00 	.word	0xe000ed00
 8002b5c:	faf6fefb 	.word	0xfaf6fefb
 8002b60:	22041000 	.word	0x22041000

08002b64 <LL_AHB2_GRP1_EnableClock>:
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4013      	ands	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b88:	68fb      	ldr	r3, [r7, #12]
}
 8002b8a:	bf00      	nop
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <LL_APB1_GRP2_EnableClock>:
{
 8002b96:	b480      	push	{r7}
 8002b98:	b085      	sub	sp, #20
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ba4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bba:	68fb      	ldr	r3, [r7, #12]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <LL_APB2_GRP1_EnableClock>:
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4013      	ands	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bec:	68fb      	ldr	r3, [r7, #12]
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8002c00:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <MX_LPUART1_UART_Init+0x90>)
 8002c02:	4a23      	ldr	r2, [pc, #140]	; (8002c90 <MX_LPUART1_UART_Init+0x94>)
 8002c04:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002c06:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <MX_LPUART1_UART_Init+0x90>)
 8002c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c0c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c0e:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <MX_LPUART1_UART_Init+0x90>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002c14:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <MX_LPUART1_UART_Init+0x90>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <MX_LPUART1_UART_Init+0x90>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002c20:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <MX_LPUART1_UART_Init+0x90>)
 8002c22:	220c      	movs	r2, #12
 8002c24:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c26:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <MX_LPUART1_UART_Init+0x90>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c2c:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <MX_LPUART1_UART_Init+0x90>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c32:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <MX_LPUART1_UART_Init+0x90>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c38:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <MX_LPUART1_UART_Init+0x90>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002c3e:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <MX_LPUART1_UART_Init+0x90>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002c44:	4811      	ldr	r0, [pc, #68]	; (8002c8c <MX_LPUART1_UART_Init+0x90>)
 8002c46:	f003 f973 	bl	8005f30 <HAL_UART_Init>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002c50:	f7ff fc00 	bl	8002454 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c54:	2100      	movs	r1, #0
 8002c56:	480d      	ldr	r0, [pc, #52]	; (8002c8c <MX_LPUART1_UART_Init+0x90>)
 8002c58:	f004 fcad 	bl	80075b6 <HAL_UARTEx_SetTxFifoThreshold>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002c62:	f7ff fbf7 	bl	8002454 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c66:	2100      	movs	r1, #0
 8002c68:	4808      	ldr	r0, [pc, #32]	; (8002c8c <MX_LPUART1_UART_Init+0x90>)
 8002c6a:	f004 fce2 	bl	8007632 <HAL_UARTEx_SetRxFifoThreshold>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002c74:	f7ff fbee 	bl	8002454 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002c78:	4804      	ldr	r0, [pc, #16]	; (8002c8c <MX_LPUART1_UART_Init+0x90>)
 8002c7a:	f004 fc63 	bl	8007544 <HAL_UARTEx_DisableFifoMode>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002c84:	f7ff fbe6 	bl	8002454 <Error_Handler>
  }

}
 8002c88:	bf00      	nop
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20006d68 	.word	0x20006d68
 8002c90:	40008000 	.word	0x40008000

08002c94 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002c98:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002c9a:	4a24      	ldr	r2, [pc, #144]	; (8002d2c <MX_USART1_UART_Init+0x98>)
 8002c9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c9e:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ca4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ca6:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cac:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cba:	220c      	movs	r2, #12
 8002cbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002cc4:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cc6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002cca:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ccc:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cd2:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cd8:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cde:	4812      	ldr	r0, [pc, #72]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002ce0:	f003 f926 	bl	8005f30 <HAL_UART_Init>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002cea:	f7ff fbb3 	bl	8002454 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cee:	2100      	movs	r1, #0
 8002cf0:	480d      	ldr	r0, [pc, #52]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cf2:	f004 fc60 	bl	80075b6 <HAL_UARTEx_SetTxFifoThreshold>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002cfc:	f7ff fbaa 	bl	8002454 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d00:	2100      	movs	r1, #0
 8002d02:	4809      	ldr	r0, [pc, #36]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002d04:	f004 fc95 	bl	8007632 <HAL_UARTEx_SetRxFifoThreshold>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002d0e:	f7ff fba1 	bl	8002454 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d12:	4805      	ldr	r0, [pc, #20]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002d14:	f004 fc16 	bl	8007544 <HAL_UARTEx_DisableFifoMode>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002d1e:	f7ff fb99 	bl	8002454 <Error_Handler>
  }

}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20006e54 	.word	0x20006e54
 8002d2c:	40013800 	.word	0x40013800

08002d30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d38:	f107 030c 	add.w	r3, r7, #12
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a4f      	ldr	r2, [pc, #316]	; (8002e8c <HAL_UART_MspInit+0x15c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d148      	bne.n	8002de4 <HAL_UART_MspInit+0xb4>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002d52:	2001      	movs	r0, #1
 8002d54:	f7ff ff1f 	bl	8002b96 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d58:	2001      	movs	r0, #1
 8002d5a:	f7ff ff03 	bl	8002b64 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d5e:	230c      	movs	r3, #12
 8002d60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d62:	2302      	movs	r3, #2
 8002d64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002d6e:	2308      	movs	r3, #8
 8002d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d72:	f107 030c 	add.w	r3, r7, #12
 8002d76:	4619      	mov	r1, r3
 8002d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d7c:	f000 fd82 	bl	8003884 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8002d80:	4b43      	ldr	r3, [pc, #268]	; (8002e90 <HAL_UART_MspInit+0x160>)
 8002d82:	4a44      	ldr	r2, [pc, #272]	; (8002e94 <HAL_UART_MspInit+0x164>)
 8002d84:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002d86:	4b42      	ldr	r3, [pc, #264]	; (8002e90 <HAL_UART_MspInit+0x160>)
 8002d88:	2211      	movs	r2, #17
 8002d8a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d8c:	4b40      	ldr	r3, [pc, #256]	; (8002e90 <HAL_UART_MspInit+0x160>)
 8002d8e:	2210      	movs	r2, #16
 8002d90:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d92:	4b3f      	ldr	r3, [pc, #252]	; (8002e90 <HAL_UART_MspInit+0x160>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d98:	4b3d      	ldr	r3, [pc, #244]	; (8002e90 <HAL_UART_MspInit+0x160>)
 8002d9a:	2280      	movs	r2, #128	; 0x80
 8002d9c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d9e:	4b3c      	ldr	r3, [pc, #240]	; (8002e90 <HAL_UART_MspInit+0x160>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002da4:	4b3a      	ldr	r3, [pc, #232]	; (8002e90 <HAL_UART_MspInit+0x160>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002daa:	4b39      	ldr	r3, [pc, #228]	; (8002e90 <HAL_UART_MspInit+0x160>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002db0:	4b37      	ldr	r3, [pc, #220]	; (8002e90 <HAL_UART_MspInit+0x160>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002db6:	4836      	ldr	r0, [pc, #216]	; (8002e90 <HAL_UART_MspInit+0x160>)
 8002db8:	f000 fa90 	bl	80032dc <HAL_DMA_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 8002dc2:	f7ff fb47 	bl	8002454 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a31      	ldr	r2, [pc, #196]	; (8002e90 <HAL_UART_MspInit+0x160>)
 8002dca:	675a      	str	r2, [r3, #116]	; 0x74
 8002dcc:	4a30      	ldr	r2, [pc, #192]	; (8002e90 <HAL_UART_MspInit+0x160>)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2105      	movs	r1, #5
 8002dd6:	2025      	movs	r0, #37	; 0x25
 8002dd8:	f000 fa29 	bl	800322e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002ddc:	2025      	movs	r0, #37	; 0x25
 8002dde:	f000 fa40 	bl	8003262 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002de2:	e04e      	b.n	8002e82 <HAL_UART_MspInit+0x152>
  else if(uartHandle->Instance==USART1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a2b      	ldr	r2, [pc, #172]	; (8002e98 <HAL_UART_MspInit+0x168>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d149      	bne.n	8002e82 <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002df2:	f7ff fee9 	bl	8002bc8 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df6:	2001      	movs	r0, #1
 8002df8:	f7ff feb4 	bl	8002b64 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002dfc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e02:	2302      	movs	r3, #2
 8002e04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e0e:	2307      	movs	r3, #7
 8002e10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e12:	f107 030c 	add.w	r3, r7, #12
 8002e16:	4619      	mov	r1, r3
 8002e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e1c:	f000 fd32 	bl	8003884 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002e20:	4b1e      	ldr	r3, [pc, #120]	; (8002e9c <HAL_UART_MspInit+0x16c>)
 8002e22:	4a1f      	ldr	r2, [pc, #124]	; (8002ea0 <HAL_UART_MspInit+0x170>)
 8002e24:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_UART_MspInit+0x16c>)
 8002e28:	220f      	movs	r2, #15
 8002e2a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e2c:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <HAL_UART_MspInit+0x16c>)
 8002e2e:	2210      	movs	r2, #16
 8002e30:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e32:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <HAL_UART_MspInit+0x16c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e38:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <HAL_UART_MspInit+0x16c>)
 8002e3a:	2280      	movs	r2, #128	; 0x80
 8002e3c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e3e:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <HAL_UART_MspInit+0x16c>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e44:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <HAL_UART_MspInit+0x16c>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002e4a:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <HAL_UART_MspInit+0x16c>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_UART_MspInit+0x16c>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002e56:	4811      	ldr	r0, [pc, #68]	; (8002e9c <HAL_UART_MspInit+0x16c>)
 8002e58:	f000 fa40 	bl	80032dc <HAL_DMA_Init>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_UART_MspInit+0x136>
      Error_Handler();
 8002e62:	f7ff faf7 	bl	8002454 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a0c      	ldr	r2, [pc, #48]	; (8002e9c <HAL_UART_MspInit+0x16c>)
 8002e6a:	675a      	str	r2, [r3, #116]	; 0x74
 8002e6c:	4a0b      	ldr	r2, [pc, #44]	; (8002e9c <HAL_UART_MspInit+0x16c>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2105      	movs	r1, #5
 8002e76:	2024      	movs	r0, #36	; 0x24
 8002e78:	f000 f9d9 	bl	800322e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e7c:	2024      	movs	r0, #36	; 0x24
 8002e7e:	f000 f9f0 	bl	8003262 <HAL_NVIC_EnableIRQ>
}
 8002e82:	bf00      	nop
 8002e84:	3720      	adds	r7, #32
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40008000 	.word	0x40008000
 8002e90:	20006ee0 	.word	0x20006ee0
 8002e94:	40020044 	.word	0x40020044
 8002e98:	40013800 	.word	0x40013800
 8002e9c:	20006df4 	.word	0x20006df4
 8002ea0:	40020444 	.word	0x40020444

08002ea4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002ea4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ea6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ea8:	3304      	adds	r3, #4

08002eaa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eaa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eac:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002eae:	d3f9      	bcc.n	8002ea4 <CopyDataInit>
  bx lr
 8002eb0:	4770      	bx	lr

08002eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002eb2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002eb4:	3004      	adds	r0, #4

08002eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002eb6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002eb8:	d3fb      	bcc.n	8002eb2 <FillZerobss>
  bx lr
 8002eba:	4770      	bx	lr

08002ebc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ebc:	480c      	ldr	r0, [pc, #48]	; (8002ef0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002ebe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002ec0:	f7ff fdfa 	bl	8002ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002ec4:	480b      	ldr	r0, [pc, #44]	; (8002ef4 <LoopForever+0x8>)
 8002ec6:	490c      	ldr	r1, [pc, #48]	; (8002ef8 <LoopForever+0xc>)
 8002ec8:	4a0c      	ldr	r2, [pc, #48]	; (8002efc <LoopForever+0x10>)
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f7ff ffed 	bl	8002eaa <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002ed0:	480b      	ldr	r0, [pc, #44]	; (8002f00 <LoopForever+0x14>)
 8002ed2:	490c      	ldr	r1, [pc, #48]	; (8002f04 <LoopForever+0x18>)
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f7ff ffee 	bl	8002eb6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002eda:	480b      	ldr	r0, [pc, #44]	; (8002f08 <LoopForever+0x1c>)
 8002edc:	490b      	ldr	r1, [pc, #44]	; (8002f0c <LoopForever+0x20>)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f7ff ffe9 	bl	8002eb6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ee4:	f00e fe34 	bl	8011b50 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002ee8:	f7ff f9b1 	bl	800224e <main>

08002eec <LoopForever>:

LoopForever:
  b LoopForever
 8002eec:	e7fe      	b.n	8002eec <LoopForever>
 8002eee:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002ef0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002ef4:	20000004 	.word	0x20000004
 8002ef8:	20000094 	.word	0x20000094
 8002efc:	080142d8 	.word	0x080142d8
  INIT_BSS _sbss, _ebss
 8002f00:	20000238 	.word	0x20000238
 8002f04:	20006ff4 	.word	0x20006ff4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002f08:	200301ec 	.word	0x200301ec
 8002f0c:	20030d7f 	.word	0x20030d7f

08002f10 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f10:	e7fe      	b.n	8002f10 <ADC1_IRQHandler>
	...

08002f14 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	6053      	str	r3, [r2, #4]
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	e0042000 	.word	0xe0042000

08002f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <HAL_Init+0x3c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a0b      	ldr	r2, [pc, #44]	; (8002f70 <HAL_Init+0x3c>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f48:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f4a:	2003      	movs	r0, #3
 8002f4c:	f000 f964 	bl	8003218 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f50:	2000      	movs	r0, #0
 8002f52:	f7ff fb47 	bl	80025e4 <HAL_InitTick>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	71fb      	strb	r3, [r7, #7]
 8002f60:	e001      	b.n	8002f66 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f62:	f7ff fb06 	bl	8002572 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f66:	79fb      	ldrb	r3, [r7, #7]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	58004000 	.word	0x58004000

08002f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_IncTick+0x20>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <HAL_IncTick+0x24>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4413      	add	r3, r2
 8002f84:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <HAL_IncTick+0x24>)
 8002f86:	6013      	str	r3, [r2, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20000018 	.word	0x20000018
 8002f98:	20006f40 	.word	0x20006f40

08002f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_GetTick+0x14>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20006f40 	.word	0x20006f40

08002fb4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <HAL_GetTickPrio+0x14>)
 8002fba:	681b      	ldr	r3, [r3, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20000014 	.word	0x20000014

08002fcc <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002fd0:	f7ff ffa0 	bl	8002f14 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002fd4:	bf00      	nop
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <__NVIC_SetPriorityGrouping+0x44>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800300a:	4a04      	ldr	r2, [pc, #16]	; (800301c <__NVIC_SetPriorityGrouping+0x44>)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	60d3      	str	r3, [r2, #12]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <__NVIC_GetPriorityGrouping+0x18>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	f003 0307 	and.w	r3, r3, #7
}
 800302e:	4618      	mov	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	2b00      	cmp	r3, #0
 800304c:	db0b      	blt.n	8003066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	f003 021f 	and.w	r2, r3, #31
 8003054:	4907      	ldr	r1, [pc, #28]	; (8003074 <__NVIC_EnableIRQ+0x38>)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	2001      	movs	r0, #1
 800305e:	fa00 f202 	lsl.w	r2, r0, r2
 8003062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	e000e100 	.word	0xe000e100

08003078 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	2b00      	cmp	r3, #0
 8003088:	db10      	blt.n	80030ac <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	f003 021f 	and.w	r2, r3, #31
 8003090:	4909      	ldr	r1, [pc, #36]	; (80030b8 <__NVIC_DisableIRQ+0x40>)
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	2001      	movs	r0, #1
 800309a:	fa00 f202 	lsl.w	r2, r0, r2
 800309e:	3320      	adds	r3, #32
 80030a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80030a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80030a8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	e000e100 	.word	0xe000e100

080030bc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	db0c      	blt.n	80030e8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	f003 021f 	and.w	r2, r3, #31
 80030d4:	4907      	ldr	r1, [pc, #28]	; (80030f4 <__NVIC_SetPendingIRQ+0x38>)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	2001      	movs	r0, #1
 80030de:	fa00 f202 	lsl.w	r2, r0, r2
 80030e2:	3340      	adds	r3, #64	; 0x40
 80030e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	e000e100 	.word	0xe000e100

080030f8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	2b00      	cmp	r3, #0
 8003108:	db0c      	blt.n	8003124 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	f003 021f 	and.w	r2, r3, #31
 8003110:	4907      	ldr	r1, [pc, #28]	; (8003130 <__NVIC_ClearPendingIRQ+0x38>)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	2001      	movs	r0, #1
 800311a:	fa00 f202 	lsl.w	r2, r0, r2
 800311e:	3360      	adds	r3, #96	; 0x60
 8003120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000e100 	.word	0xe000e100

08003134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	6039      	str	r1, [r7, #0]
 800313e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003144:	2b00      	cmp	r3, #0
 8003146:	db0a      	blt.n	800315e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	490c      	ldr	r1, [pc, #48]	; (8003180 <__NVIC_SetPriority+0x4c>)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	0112      	lsls	r2, r2, #4
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	440b      	add	r3, r1
 8003158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800315c:	e00a      	b.n	8003174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	4908      	ldr	r1, [pc, #32]	; (8003184 <__NVIC_SetPriority+0x50>)
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	3b04      	subs	r3, #4
 800316c:	0112      	lsls	r2, r2, #4
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	440b      	add	r3, r1
 8003172:	761a      	strb	r2, [r3, #24]
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	e000e100 	.word	0xe000e100
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003188:	b480      	push	{r7}
 800318a:	b089      	sub	sp, #36	; 0x24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f1c3 0307 	rsb	r3, r3, #7
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	bf28      	it	cs
 80031a6:	2304      	movcs	r3, #4
 80031a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3304      	adds	r3, #4
 80031ae:	2b06      	cmp	r3, #6
 80031b0:	d902      	bls.n	80031b8 <NVIC_EncodePriority+0x30>
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3b03      	subs	r3, #3
 80031b6:	e000      	b.n	80031ba <NVIC_EncodePriority+0x32>
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	f04f 32ff 	mov.w	r2, #4294967295
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43da      	mvns	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	401a      	ands	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d0:	f04f 31ff 	mov.w	r1, #4294967295
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	fa01 f303 	lsl.w	r3, r1, r3
 80031da:	43d9      	mvns	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e0:	4313      	orrs	r3, r2
         );
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3724      	adds	r7, #36	; 0x24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
	...

080031f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80031f4:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <__NVIC_SystemReset+0x20>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003200:	4903      	ldr	r1, [pc, #12]	; (8003210 <__NVIC_SystemReset+0x20>)
 8003202:	4b04      	ldr	r3, [pc, #16]	; (8003214 <__NVIC_SystemReset+0x24>)
 8003204:	4313      	orrs	r3, r2
 8003206:	60cb      	str	r3, [r1, #12]
 8003208:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800320c:	bf00      	nop
 800320e:	e7fd      	b.n	800320c <__NVIC_SystemReset+0x1c>
 8003210:	e000ed00 	.word	0xe000ed00
 8003214:	05fa0004 	.word	0x05fa0004

08003218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff fed9 	bl	8002fd8 <__NVIC_SetPriorityGrouping>
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b086      	sub	sp, #24
 8003232:	af00      	add	r7, sp, #0
 8003234:	4603      	mov	r3, r0
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800323c:	f7ff fef0 	bl	8003020 <__NVIC_GetPriorityGrouping>
 8003240:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	6978      	ldr	r0, [r7, #20]
 8003248:	f7ff ff9e 	bl	8003188 <NVIC_EncodePriority>
 800324c:	4602      	mov	r2, r0
 800324e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ff6d 	bl	8003134 <__NVIC_SetPriority>
}
 800325a:	bf00      	nop
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	4603      	mov	r3, r0
 800326a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800326c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fee3 	bl	800303c <__NVIC_EnableIRQ>
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	4603      	mov	r3, r0
 8003286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fef3 	bl	8003078 <__NVIC_DisableIRQ>
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800329e:	f7ff ffa7 	bl	80031f0 <__NVIC_SystemReset>

080032a2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	4603      	mov	r3, r0
 80032aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80032ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ff03 	bl	80030bc <__NVIC_SetPendingIRQ>
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b082      	sub	sp, #8
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	4603      	mov	r3, r0
 80032c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80032c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff13 	bl	80030f8 <__NVIC_ClearPendingIRQ>
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e08e      	b.n	800340c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	4b47      	ldr	r3, [pc, #284]	; (8003414 <HAL_DMA_Init+0x138>)
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d80f      	bhi.n	800331a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	4b45      	ldr	r3, [pc, #276]	; (8003418 <HAL_DMA_Init+0x13c>)
 8003302:	4413      	add	r3, r2
 8003304:	4a45      	ldr	r2, [pc, #276]	; (800341c <HAL_DMA_Init+0x140>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	091b      	lsrs	r3, r3, #4
 800330c:	009a      	lsls	r2, r3, #2
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a42      	ldr	r2, [pc, #264]	; (8003420 <HAL_DMA_Init+0x144>)
 8003316:	641a      	str	r2, [r3, #64]	; 0x40
 8003318:	e00e      	b.n	8003338 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	4b40      	ldr	r3, [pc, #256]	; (8003424 <HAL_DMA_Init+0x148>)
 8003322:	4413      	add	r3, r2
 8003324:	4a3d      	ldr	r2, [pc, #244]	; (800341c <HAL_DMA_Init+0x140>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	091b      	lsrs	r3, r3, #4
 800332c:	009a      	lsls	r2, r3, #2
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a3c      	ldr	r2, [pc, #240]	; (8003428 <HAL_DMA_Init+0x14c>)
 8003336:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800334e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003352:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800335c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003368:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003374:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fa16 	bl	80037bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003398:	d102      	bne.n	80033a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80033ac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80033b6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d010      	beq.n	80033e2 <HAL_DMA_Init+0x106>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d80c      	bhi.n	80033e2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fa35 	bl	8003838 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033de:	605a      	str	r2, [r3, #4]
 80033e0:	e008      	b.n	80033f4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40020407 	.word	0x40020407
 8003418:	bffdfff8 	.word	0xbffdfff8
 800341c:	cccccccd 	.word	0xcccccccd
 8003420:	40020000 	.word	0x40020000
 8003424:	bffdfbf8 	.word	0xbffdfbf8
 8003428:	40020400 	.word	0x40020400

0800342c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_DMA_Start_IT+0x20>
 8003448:	2302      	movs	r3, #2
 800344a:	e066      	b.n	800351a <HAL_DMA_Start_IT+0xee>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b01      	cmp	r3, #1
 800345e:	d155      	bne.n	800350c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0201 	bic.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	68b9      	ldr	r1, [r7, #8]
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f95a 	bl	800373e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	2b00      	cmp	r3, #0
 8003490:	d008      	beq.n	80034a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 020e 	orr.w	r2, r2, #14
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	e00f      	b.n	80034c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0204 	bic.w	r2, r2, #4
 80034b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 020a 	orr.w	r2, r2, #10
 80034c2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d007      	beq.n	80034e2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034e0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0201 	orr.w	r2, r2, #1
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	e005      	b.n	8003518 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003514:	2302      	movs	r3, #2
 8003516:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003518:	7dfb      	ldrb	r3, [r7, #23]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d005      	beq.n	8003546 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2204      	movs	r2, #4
 800353e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
 8003544:	e047      	b.n	80035d6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 020e 	bic.w	r2, r2, #14
 8003554:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0201 	bic.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003574:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357a:	f003 021c 	and.w	r2, r3, #28
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	2101      	movs	r1, #1
 8003584:	fa01 f202 	lsl.w	r2, r1, r2
 8003588:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003592:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00c      	beq.n	80035b6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035b4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	4798      	blx	r3
    }
  }
  return status;
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fc:	f003 031c 	and.w	r3, r3, #28
 8003600:	2204      	movs	r2, #4
 8003602:	409a      	lsls	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d026      	beq.n	800365a <HAL_DMA_IRQHandler+0x7a>
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b00      	cmp	r3, #0
 8003614:	d021      	beq.n	800365a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b00      	cmp	r3, #0
 8003622:	d107      	bne.n	8003634 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0204 	bic.w	r2, r2, #4
 8003632:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003638:	f003 021c 	and.w	r2, r3, #28
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	2104      	movs	r1, #4
 8003642:	fa01 f202 	lsl.w	r2, r1, r2
 8003646:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	2b00      	cmp	r3, #0
 800364e:	d071      	beq.n	8003734 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003658:	e06c      	b.n	8003734 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f003 031c 	and.w	r3, r3, #28
 8003662:	2202      	movs	r2, #2
 8003664:	409a      	lsls	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4013      	ands	r3, r2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d02e      	beq.n	80036cc <HAL_DMA_IRQHandler+0xec>
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d029      	beq.n	80036cc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10b      	bne.n	800369e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 020a 	bic.w	r2, r2, #10
 8003694:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	f003 021c 	and.w	r2, r3, #28
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	2102      	movs	r1, #2
 80036ac:	fa01 f202 	lsl.w	r2, r1, r2
 80036b0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d038      	beq.n	8003734 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80036ca:	e033      	b.n	8003734 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	f003 031c 	and.w	r3, r3, #28
 80036d4:	2208      	movs	r2, #8
 80036d6:	409a      	lsls	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d02a      	beq.n	8003736 <HAL_DMA_IRQHandler+0x156>
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d025      	beq.n	8003736 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 020e 	bic.w	r2, r2, #14
 80036f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	f003 021c 	and.w	r2, r3, #28
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	2101      	movs	r1, #1
 8003708:	fa01 f202 	lsl.w	r2, r1, r2
 800370c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003728:	2b00      	cmp	r3, #0
 800372a:	d004      	beq.n	8003736 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003734:	bf00      	nop
 8003736:	bf00      	nop
}
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800373e:	b480      	push	{r7}
 8003740:	b085      	sub	sp, #20
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	607a      	str	r2, [r7, #4]
 800374a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003754:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375a:	2b00      	cmp	r3, #0
 800375c:	d004      	beq.n	8003768 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003766:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	f003 021c 	and.w	r2, r3, #28
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	2101      	movs	r1, #1
 8003776:	fa01 f202 	lsl.w	r2, r1, r2
 800377a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b10      	cmp	r3, #16
 800378a:	d108      	bne.n	800379e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800379c:	e007      	b.n	80037ae <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	60da      	str	r2, [r3, #12]
}
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	4b17      	ldr	r3, [pc, #92]	; (8003828 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d80a      	bhi.n	80037e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d4:	089b      	lsrs	r3, r3, #2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037dc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6493      	str	r3, [r2, #72]	; 0x48
 80037e4:	e007      	b.n	80037f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	089b      	lsrs	r3, r3, #2
 80037ec:	009a      	lsls	r2, r3, #2
 80037ee:	4b0f      	ldr	r3, [pc, #60]	; (800382c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80037f0:	4413      	add	r3, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	3b08      	subs	r3, #8
 80037fe:	4a0c      	ldr	r2, [pc, #48]	; (8003830 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003800:	fba2 2303 	umull	r2, r3, r2, r3
 8003804:	091b      	lsrs	r3, r3, #4
 8003806:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800380c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	2201      	movs	r2, #1
 8003816:	409a      	lsls	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	40020407 	.word	0x40020407
 800382c:	4002081c 	.word	0x4002081c
 8003830:	cccccccd 	.word	0xcccccccd
 8003834:	40020880 	.word	0x40020880

08003838 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003848:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	461a      	mov	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a09      	ldr	r2, [pc, #36]	; (8003880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800385c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	3b01      	subs	r3, #1
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2201      	movs	r2, #1
 8003868:	409a      	lsls	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800386e:	bf00      	nop
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	1000823f 	.word	0x1000823f
 8003880:	40020940 	.word	0x40020940

08003884 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003892:	e14c      	b.n	8003b2e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	2101      	movs	r1, #1
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	fa01 f303 	lsl.w	r3, r1, r3
 80038a0:	4013      	ands	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 813e 	beq.w	8003b28 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d00b      	beq.n	80038cc <HAL_GPIO_Init+0x48>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d007      	beq.n	80038cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038c0:	2b11      	cmp	r3, #17
 80038c2:	d003      	beq.n	80038cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b12      	cmp	r3, #18
 80038ca:	d130      	bne.n	800392e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	2203      	movs	r2, #3
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4013      	ands	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003902:	2201      	movs	r2, #1
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43db      	mvns	r3, r3
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4013      	ands	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	f003 0201 	and.w	r2, r3, #1
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	2203      	movs	r2, #3
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b02      	cmp	r3, #2
 8003964:	d003      	beq.n	800396e <HAL_GPIO_Init+0xea>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b12      	cmp	r3, #18
 800396c:	d123      	bne.n	80039b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	08da      	lsrs	r2, r3, #3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3208      	adds	r2, #8
 8003976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800397a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	220f      	movs	r2, #15
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43db      	mvns	r3, r3
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4013      	ands	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	08da      	lsrs	r2, r3, #3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3208      	adds	r2, #8
 80039b0:	6939      	ldr	r1, [r7, #16]
 80039b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	2203      	movs	r2, #3
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4013      	ands	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f003 0203 	and.w	r2, r3, #3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 8098 	beq.w	8003b28 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80039f8:	4a54      	ldr	r2, [pc, #336]	; (8003b4c <HAL_GPIO_Init+0x2c8>)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	089b      	lsrs	r3, r3, #2
 80039fe:	3302      	adds	r3, #2
 8003a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	220f      	movs	r2, #15
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a22:	d019      	beq.n	8003a58 <HAL_GPIO_Init+0x1d4>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a4a      	ldr	r2, [pc, #296]	; (8003b50 <HAL_GPIO_Init+0x2cc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d013      	beq.n	8003a54 <HAL_GPIO_Init+0x1d0>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a49      	ldr	r2, [pc, #292]	; (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00d      	beq.n	8003a50 <HAL_GPIO_Init+0x1cc>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a48      	ldr	r2, [pc, #288]	; (8003b58 <HAL_GPIO_Init+0x2d4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d007      	beq.n	8003a4c <HAL_GPIO_Init+0x1c8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a47      	ldr	r2, [pc, #284]	; (8003b5c <HAL_GPIO_Init+0x2d8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d101      	bne.n	8003a48 <HAL_GPIO_Init+0x1c4>
 8003a44:	2304      	movs	r3, #4
 8003a46:	e008      	b.n	8003a5a <HAL_GPIO_Init+0x1d6>
 8003a48:	2307      	movs	r3, #7
 8003a4a:	e006      	b.n	8003a5a <HAL_GPIO_Init+0x1d6>
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e004      	b.n	8003a5a <HAL_GPIO_Init+0x1d6>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e002      	b.n	8003a5a <HAL_GPIO_Init+0x1d6>
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <HAL_GPIO_Init+0x1d6>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	f002 0203 	and.w	r2, r2, #3
 8003a60:	0092      	lsls	r2, r2, #2
 8003a62:	4093      	lsls	r3, r2
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a6a:	4938      	ldr	r1, [pc, #224]	; (8003b4c <HAL_GPIO_Init+0x2c8>)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	089b      	lsrs	r3, r3, #2
 8003a70:	3302      	adds	r3, #2
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a78:	4b39      	ldr	r3, [pc, #228]	; (8003b60 <HAL_GPIO_Init+0x2dc>)
 8003a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	43db      	mvns	r3, r3
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4013      	ands	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a9e:	4a30      	ldr	r2, [pc, #192]	; (8003b60 <HAL_GPIO_Init+0x2dc>)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003aa6:	4b2e      	ldr	r3, [pc, #184]	; (8003b60 <HAL_GPIO_Init+0x2dc>)
 8003aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003acc:	4a24      	ldr	r2, [pc, #144]	; (8003b60 <HAL_GPIO_Init+0x2dc>)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ad4:	4b22      	ldr	r3, [pc, #136]	; (8003b60 <HAL_GPIO_Init+0x2dc>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	43db      	mvns	r3, r3
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003af8:	4a19      	ldr	r2, [pc, #100]	; (8003b60 <HAL_GPIO_Init+0x2dc>)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003afe:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <HAL_GPIO_Init+0x2dc>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	43db      	mvns	r3, r3
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b22:	4a0f      	ldr	r2, [pc, #60]	; (8003b60 <HAL_GPIO_Init+0x2dc>)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	fa22 f303 	lsr.w	r3, r2, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f47f aeab 	bne.w	8003894 <HAL_GPIO_Init+0x10>
  }
}
 8003b3e:	bf00      	nop
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40010000 	.word	0x40010000
 8003b50:	48000400 	.word	0x48000400
 8003b54:	48000800 	.word	0x48000800
 8003b58:	48000c00 	.word	0x48000c00
 8003b5c:	48001000 	.word	0x48001000
 8003b60:	58000800 	.word	0x58000800

08003b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	807b      	strh	r3, [r7, #2]
 8003b70:	4613      	mov	r3, r2
 8003b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b74:	787b      	ldrb	r3, [r7, #1]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b7a:	887a      	ldrh	r2, [r7, #2]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b80:	e002      	b.n	8003b88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b82:	887a      	ldrh	r2, [r7, #2]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <HAL_HSEM_IRQHandler+0x30>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003ba0:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <HAL_HSEM_IRQHandler+0x30>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	4906      	ldr	r1, [pc, #24]	; (8003bc4 <HAL_HSEM_IRQHandler+0x30>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003bae:	4a05      	ldr	r2, [pc, #20]	; (8003bc4 <HAL_HSEM_IRQHandler+0x30>)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f807 	bl	8003bc8 <HAL_HSEM_FreeCallback>
}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	58001500 	.word	0x58001500

08003bc8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a04      	ldr	r2, [pc, #16]	; (8003bf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bea:	6013      	str	r3, [r2, #0]
}
 8003bec:	bf00      	nop
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	58000400 	.word	0x58000400

08003bfc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c00:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	58000400 	.word	0x58000400

08003c18 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2a:	d101      	bne.n	8003c30 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e000      	b.n	8003c32 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <LL_RCC_HSE_Enable>:
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4e:	6013      	str	r3, [r2, #0]
}
 8003c50:	bf00      	nop
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <LL_RCC_HSE_Disable>:
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c6c:	6013      	str	r3, [r2, #0]
}
 8003c6e:	bf00      	nop
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <LL_RCC_HSE_IsReady>:
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c8a:	d101      	bne.n	8003c90 <LL_RCC_HSE_IsReady+0x18>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <LL_RCC_HSE_IsReady+0x1a>
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_RCC_HSI_Enable>:
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cae:	6013      	str	r3, [r2, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <LL_RCC_HSI_Disable>:
{
 8003cba:	b480      	push	{r7}
 8003cbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ccc:	6013      	str	r3, [r2, #0]
}
 8003cce:	bf00      	nop
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <LL_RCC_HSI_IsReady>:
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cea:	d101      	bne.n	8003cf0 <LL_RCC_HSI_IsReady+0x18>
 8003cec:	2301      	movs	r3, #1
 8003cee:	e000      	b.n	8003cf2 <LL_RCC_HSI_IsReady+0x1a>
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <LL_RCC_HSI_SetCalibTrimming>:
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d16:	4313      	orrs	r3, r2
 8003d18:	604b      	str	r3, [r1, #4]
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <LL_RCC_HSI48_Enable>:
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003d3e:	bf00      	nop
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <LL_RCC_HSI48_Disable>:
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d58:	f023 0301 	bic.w	r3, r3, #1
 8003d5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <LL_RCC_HSI48_IsReady>:
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d101      	bne.n	8003d82 <LL_RCC_HSI48_IsReady+0x18>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <LL_RCC_HSI48_IsReady+0x1a>
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <LL_RCC_LSE_Enable>:
{
 8003d8e:	b480      	push	{r7}
 8003d90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003da6:	bf00      	nop
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <LL_RCC_LSE_Disable>:
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003dc8:	bf00      	nop
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <LL_RCC_LSE_EnableBypass>:
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003de2:	f043 0304 	orr.w	r3, r3, #4
 8003de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003dea:	bf00      	nop
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <LL_RCC_LSE_DisableBypass>:
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e04:	f023 0304 	bic.w	r3, r3, #4
 8003e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e0c:	bf00      	nop
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <LL_RCC_LSE_IsReady>:
{
 8003e16:	b480      	push	{r7}
 8003e18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d101      	bne.n	8003e2e <LL_RCC_LSE_IsReady+0x18>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <LL_RCC_LSE_IsReady+0x1a>
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <LL_RCC_LSI1_Enable>:
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003e52:	bf00      	nop
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <LL_RCC_LSI1_Disable>:
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <LL_RCC_LSI1_IsReady>:
{
 8003e7e:	b480      	push	{r7}
 8003e80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d101      	bne.n	8003e96 <LL_RCC_LSI1_IsReady+0x18>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <LL_RCC_LSI1_IsReady+0x1a>
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <LL_RCC_LSI2_Enable>:
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb2:	f043 0304 	orr.w	r3, r3, #4
 8003eb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003eba:	bf00      	nop
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <LL_RCC_LSI2_Disable>:
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ed4:	f023 0304 	bic.w	r3, r3, #4
 8003ed8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003edc:	bf00      	nop
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <LL_RCC_LSI2_IsReady>:
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d101      	bne.n	8003efe <LL_RCC_LSI2_IsReady+0x18>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <LL_RCC_LSI2_IsReady+0x1a>
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <LL_RCC_LSI2_SetTrimming>:
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <LL_RCC_MSI_Enable>:
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	6013      	str	r3, [r2, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <LL_RCC_MSI_Disable>:
{
 8003f56:	b480      	push	{r7}
 8003f58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f64:	f023 0301 	bic.w	r3, r3, #1
 8003f68:	6013      	str	r3, [r2, #0]
}
 8003f6a:	bf00      	nop
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <LL_RCC_MSI_IsReady>:
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d101      	bne.n	8003f8a <LL_RCC_MSI_IsReady+0x16>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <LL_RCC_MSI_IsReady+0x18>
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <LL_RCC_MSI_SetRange>:
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	600b      	str	r3, [r1, #0]
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <LL_RCC_MSI_GetRange>:
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fce:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2bb0      	cmp	r3, #176	; 0xb0
 8003fd4:	d901      	bls.n	8003fda <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003fd6:	23b0      	movs	r3, #176	; 0xb0
 8003fd8:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003fda:	687b      	ldr	r3, [r7, #4]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	021b      	lsls	r3, r3, #8
 8003ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004002:	4313      	orrs	r3, r2
 8004004:	604b      	str	r3, [r1, #4]
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <LL_RCC_SetSysClkSource>:
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800401a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f023 0203 	bic.w	r2, r3, #3
 8004024:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <LL_RCC_GetSysClkSource>:
{
 800403a:	b480      	push	{r7}
 800403c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800403e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 030c 	and.w	r3, r3, #12
}
 8004048:	4618      	mov	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <LL_RCC_SetAHBPrescaler>:
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800405a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004064:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4313      	orrs	r3, r2
 800406c:	608b      	str	r3, [r1, #8]
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <LL_C2_RCC_SetAHBPrescaler>:
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004086:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800408a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800408e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <LL_RCC_SetAHB4Prescaler>:
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80040ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040b6:	f023 020f 	bic.w	r2, r3, #15
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	091b      	lsrs	r3, r3, #4
 80040be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <LL_RCC_SetAPB1Prescaler>:
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80040dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	608b      	str	r3, [r1, #8]
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <LL_RCC_SetAPB2Prescaler>:
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800410e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4313      	orrs	r3, r2
 8004116:	608b      	str	r3, [r1, #8]
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <LL_RCC_GetAHBPrescaler>:
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004132:	4618      	mov	r0, r3
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <LL_C2_RCC_GetAHBPrescaler>:
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8004140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004144:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800414c:	4618      	mov	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <LL_RCC_GetAHB4Prescaler>:
{
 8004156:	b480      	push	{r7}
 8004158:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800415a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800415e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004168:	4618      	mov	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <LL_RCC_GetAPB1Prescaler>:
{
 8004172:	b480      	push	{r7}
 8004174:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004180:	4618      	mov	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <LL_RCC_GetAPB2Prescaler>:
{
 800418a:	b480      	push	{r7}
 800418c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800418e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004198:	4618      	mov	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80041a2:	b480      	push	{r7}
 80041a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80041a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041b4:	6013      	str	r3, [r2, #0]
}
 80041b6:	bf00      	nop
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80041c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041d2:	6013      	str	r3, [r2, #0]
}
 80041d4:	bf00      	nop
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80041de:	b480      	push	{r7}
 80041e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80041e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041f0:	d101      	bne.n	80041f6 <LL_RCC_PLL_IsReady+0x18>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <LL_RCC_PLL_IsReady+0x1a>
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004202:	b480      	push	{r7}
 8004204:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	0a1b      	lsrs	r3, r3, #8
 800420e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004212:	4618      	mov	r0, r3
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800422a:	4618      	mov	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004242:	4618      	mov	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0303 	and.w	r3, r3, #3
}
 800425a:	4618      	mov	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004276:	d101      	bne.n	800427c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800428c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004290:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004298:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800429c:	d101      	bne.n	80042a2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80042ae:	b480      	push	{r7}
 80042b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80042b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c2:	d101      	bne.n	80042c8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80042d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042e6:	d101      	bne.n	80042ec <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80042fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004306:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800430a:	d101      	bne.n	8004310 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800431c:	b590      	push	{r4, r7, lr}
 800431e:	b08d      	sub	sp, #52	; 0x34
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e37e      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 8092 	beq.w	8004460 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800433c:	f7ff fe7d 	bl	800403a <LL_RCC_GetSysClkSource>
 8004340:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004342:	f7ff ff83 	bl	800424c <LL_RCC_PLL_GetMainSource>
 8004346:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <HAL_RCC_OscConfig+0x3e>
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	2b0c      	cmp	r3, #12
 8004352:	d14c      	bne.n	80043ee <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	2b01      	cmp	r3, #1
 8004358:	d149      	bne.n	80043ee <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800435a:	f7ff fe0b 	bl	8003f74 <LL_RCC_MSI_IsReady>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <HAL_RCC_OscConfig+0x54>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e35d      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004374:	f7ff fe23 	bl	8003fbe <LL_RCC_MSI_GetRange>
 8004378:	4603      	mov	r3, r0
 800437a:	429c      	cmp	r4, r3
 800437c:	d914      	bls.n	80043a8 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fd72 	bl	8004e6c <RCC_SetFlashLatencyFromMSIRange>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e34c      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff fdfd 	bl	8003f96 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff fe21 	bl	8003fe8 <LL_RCC_MSI_SetCalibTrimming>
 80043a6:	e013      	b.n	80043d0 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff fdf2 	bl	8003f96 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fe16 	bl	8003fe8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fd53 	bl	8004e6c <RCC_SetFlashLatencyFromMSIRange>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e32d      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80043d0:	f000 fcda 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 80043d4:	4602      	mov	r2, r0
 80043d6:	4bb3      	ldr	r3, [pc, #716]	; (80046a4 <HAL_RCC_OscConfig+0x388>)
 80043d8:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043da:	4bb3      	ldr	r3, [pc, #716]	; (80046a8 <HAL_RCC_OscConfig+0x38c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fe f900 	bl	80025e4 <HAL_InitTick>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d039      	beq.n	800445e <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e31e      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d01e      	beq.n	8004434 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043f6:	f7ff fd9f 	bl	8003f38 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043fa:	f7fe fdcf 	bl	8002f9c <HAL_GetTick>
 80043fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004402:	f7fe fdcb 	bl	8002f9c <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e30b      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004414:	f7ff fdae 	bl	8003f74 <LL_RCC_MSI_IsReady>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f1      	beq.n	8004402 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff fdb7 	bl	8003f96 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff fddb 	bl	8003fe8 <LL_RCC_MSI_SetCalibTrimming>
 8004432:	e015      	b.n	8004460 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004434:	f7ff fd8f 	bl	8003f56 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004438:	f7fe fdb0 	bl	8002f9c <HAL_GetTick>
 800443c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004440:	f7fe fdac 	bl	8002f9c <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e2ec      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004452:	f7ff fd8f 	bl	8003f74 <LL_RCC_MSI_IsReady>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f1      	bne.n	8004440 <HAL_RCC_OscConfig+0x124>
 800445c:	e000      	b.n	8004460 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800445e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d04e      	beq.n	800450a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800446c:	f7ff fde5 	bl	800403a <LL_RCC_GetSysClkSource>
 8004470:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004472:	f7ff feeb 	bl	800424c <LL_RCC_PLL_GetMainSource>
 8004476:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	2b08      	cmp	r3, #8
 800447c:	d005      	beq.n	800448a <HAL_RCC_OscConfig+0x16e>
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	2b0c      	cmp	r3, #12
 8004482:	d10d      	bne.n	80044a0 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	2b03      	cmp	r3, #3
 8004488:	d10a      	bne.n	80044a0 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800448a:	f7ff fbf5 	bl	8003c78 <LL_RCC_HSE_IsReady>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d039      	beq.n	8004508 <HAL_RCC_OscConfig+0x1ec>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d135      	bne.n	8004508 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e2c5      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a8:	d102      	bne.n	80044b0 <HAL_RCC_OscConfig+0x194>
 80044aa:	f7ff fbc7 	bl	8003c3c <LL_RCC_HSE_Enable>
 80044ae:	e001      	b.n	80044b4 <HAL_RCC_OscConfig+0x198>
 80044b0:	f7ff fbd3 	bl	8003c5a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d012      	beq.n	80044e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044bc:	f7fe fd6e 	bl	8002f9c <HAL_GetTick>
 80044c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044c4:	f7fe fd6a 	bl	8002f9c <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b64      	cmp	r3, #100	; 0x64
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e2aa      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80044d6:	f7ff fbcf 	bl	8003c78 <LL_RCC_HSE_IsReady>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f1      	beq.n	80044c4 <HAL_RCC_OscConfig+0x1a8>
 80044e0:	e013      	b.n	800450a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e2:	f7fe fd5b 	bl	8002f9c <HAL_GetTick>
 80044e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ea:	f7fe fd57 	bl	8002f9c <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b64      	cmp	r3, #100	; 0x64
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e297      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 80044fc:	f7ff fbbc 	bl	8003c78 <LL_RCC_HSE_IsReady>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f1      	bne.n	80044ea <HAL_RCC_OscConfig+0x1ce>
 8004506:	e000      	b.n	800450a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d051      	beq.n	80045ba <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004516:	f7ff fd90 	bl	800403a <LL_RCC_GetSysClkSource>
 800451a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800451c:	f7ff fe96 	bl	800424c <LL_RCC_PLL_GetMainSource>
 8004520:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2b04      	cmp	r3, #4
 8004526:	d005      	beq.n	8004534 <HAL_RCC_OscConfig+0x218>
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	2b0c      	cmp	r3, #12
 800452c:	d113      	bne.n	8004556 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b02      	cmp	r3, #2
 8004532:	d110      	bne.n	8004556 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004534:	f7ff fbd0 	bl	8003cd8 <LL_RCC_HSI_IsReady>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d005      	beq.n	800454a <HAL_RCC_OscConfig+0x22e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e270      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff fbd4 	bl	8003cfc <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004554:	e031      	b.n	80045ba <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d019      	beq.n	8004592 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800455e:	f7ff fb9d 	bl	8003c9c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004562:	f7fe fd1b 	bl	8002f9c <HAL_GetTick>
 8004566:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800456a:	f7fe fd17 	bl	8002f9c <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e257      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 800457c:	f7ff fbac 	bl	8003cd8 <LL_RCC_HSI_IsReady>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f1      	beq.n	800456a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fbb6 	bl	8003cfc <LL_RCC_HSI_SetCalibTrimming>
 8004590:	e013      	b.n	80045ba <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004592:	f7ff fb92 	bl	8003cba <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004596:	f7fe fd01 	bl	8002f9c <HAL_GetTick>
 800459a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800459e:	f7fe fcfd 	bl	8002f9c <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e23d      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80045b0:	f7ff fb92 	bl	8003cd8 <LL_RCC_HSI_IsReady>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f1      	bne.n	800459e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d106      	bne.n	80045d4 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 80a3 	beq.w	800471a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d076      	beq.n	80046ca <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d046      	beq.n	8004676 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80045e8:	f7ff fc49 	bl	8003e7e <LL_RCC_LSI1_IsReady>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d113      	bne.n	800461a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80045f2:	f7ff fc22 	bl	8003e3a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045f6:	f7fe fcd1 	bl	8002f9c <HAL_GetTick>
 80045fa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80045fe:	f7fe fccd 	bl	8002f9c <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e20d      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004610:	f7ff fc35 	bl	8003e7e <LL_RCC_LSI1_IsReady>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f1      	beq.n	80045fe <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800461a:	f7ff fc42 	bl	8003ea2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461e:	f7fe fcbd 	bl	8002f9c <HAL_GetTick>
 8004622:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004626:	f7fe fcb9 	bl	8002f9c <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b03      	cmp	r3, #3
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e1f9      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004638:	f7ff fc55 	bl	8003ee6 <LL_RCC_LSI2_IsReady>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f1      	beq.n	8004626 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fc5f 	bl	8003f0a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800464c:	f7ff fc06 	bl	8003e5c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fe fca4 	bl	8002f9c <HAL_GetTick>
 8004654:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004658:	f7fe fca0 	bl	8002f9c <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e1e0      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800466a:	f7ff fc08 	bl	8003e7e <LL_RCC_LSI1_IsReady>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f1      	bne.n	8004658 <HAL_RCC_OscConfig+0x33c>
 8004674:	e051      	b.n	800471a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004676:	f7ff fbe0 	bl	8003e3a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467a:	f7fe fc8f 	bl	8002f9c <HAL_GetTick>
 800467e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004682:	f7fe fc8b 	bl	8002f9c <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e1cb      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004694:	f7ff fbf3 	bl	8003e7e <LL_RCC_LSI1_IsReady>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f1      	beq.n	8004682 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800469e:	f7ff fc11 	bl	8003ec4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80046a2:	e00c      	b.n	80046be <HAL_RCC_OscConfig+0x3a2>
 80046a4:	20000010 	.word	0x20000010
 80046a8:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80046ac:	f7fe fc76 	bl	8002f9c <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e1b6      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80046be:	f7ff fc12 	bl	8003ee6 <LL_RCC_LSI2_IsReady>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1f1      	bne.n	80046ac <HAL_RCC_OscConfig+0x390>
 80046c8:	e027      	b.n	800471a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80046ca:	f7ff fbfb 	bl	8003ec4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ce:	f7fe fc65 	bl	8002f9c <HAL_GetTick>
 80046d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80046d6:	f7fe fc61 	bl	8002f9c <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e1a1      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80046e8:	f7ff fbfd 	bl	8003ee6 <LL_RCC_LSI2_IsReady>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f1      	bne.n	80046d6 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80046f2:	f7ff fbb3 	bl	8003e5c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f6:	f7fe fc51 	bl	8002f9c <HAL_GetTick>
 80046fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80046fe:	f7fe fc4d 	bl	8002f9c <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e18d      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004710:	f7ff fbb5 	bl	8003e7e <LL_RCC_LSI1_IsReady>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f1      	bne.n	80046fe <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b00      	cmp	r3, #0
 8004724:	d05b      	beq.n	80047de <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004726:	4bb5      	ldr	r3, [pc, #724]	; (80049fc <HAL_RCC_OscConfig+0x6e0>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472e:	2b00      	cmp	r3, #0
 8004730:	d114      	bne.n	800475c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004732:	f7ff fa53 	bl	8003bdc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004736:	f7fe fc31 	bl	8002f9c <HAL_GetTick>
 800473a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800473e:	f7fe fc2d 	bl	8002f9c <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e16d      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004750:	4baa      	ldr	r3, [pc, #680]	; (80049fc <HAL_RCC_OscConfig+0x6e0>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d102      	bne.n	800476a <HAL_RCC_OscConfig+0x44e>
 8004764:	f7ff fb13 	bl	8003d8e <LL_RCC_LSE_Enable>
 8004768:	e00c      	b.n	8004784 <HAL_RCC_OscConfig+0x468>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b05      	cmp	r3, #5
 8004770:	d104      	bne.n	800477c <HAL_RCC_OscConfig+0x460>
 8004772:	f7ff fb2e 	bl	8003dd2 <LL_RCC_LSE_EnableBypass>
 8004776:	f7ff fb0a 	bl	8003d8e <LL_RCC_LSE_Enable>
 800477a:	e003      	b.n	8004784 <HAL_RCC_OscConfig+0x468>
 800477c:	f7ff fb18 	bl	8003db0 <LL_RCC_LSE_Disable>
 8004780:	f7ff fb38 	bl	8003df4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d014      	beq.n	80047b6 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478c:	f7fe fc06 	bl	8002f9c <HAL_GetTick>
 8004790:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004792:	e00a      	b.n	80047aa <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004794:	f7fe fc02 	bl	8002f9c <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e140      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80047aa:	f7ff fb34 	bl	8003e16 <LL_RCC_LSE_IsReady>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0ef      	beq.n	8004794 <HAL_RCC_OscConfig+0x478>
 80047b4:	e013      	b.n	80047de <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b6:	f7fe fbf1 	bl	8002f9c <HAL_GetTick>
 80047ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80047bc:	e00a      	b.n	80047d4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047be:	f7fe fbed 	bl	8002f9c <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e12b      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80047d4:	f7ff fb1f 	bl	8003e16 <LL_RCC_LSE_IsReady>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1ef      	bne.n	80047be <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d02c      	beq.n	8004844 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d014      	beq.n	800481c <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047f2:	f7ff fa98 	bl	8003d26 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f6:	f7fe fbd1 	bl	8002f9c <HAL_GetTick>
 80047fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047fe:	f7fe fbcd 	bl	8002f9c <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e10d      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004810:	f7ff faab 	bl	8003d6a <LL_RCC_HSI48_IsReady>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0f1      	beq.n	80047fe <HAL_RCC_OscConfig+0x4e2>
 800481a:	e013      	b.n	8004844 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800481c:	f7ff fa94 	bl	8003d48 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004820:	f7fe fbbc 	bl	8002f9c <HAL_GetTick>
 8004824:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004828:	f7fe fbb8 	bl	8002f9c <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e0f8      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800483a:	f7ff fa96 	bl	8003d6a <LL_RCC_HSI48_IsReady>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1f1      	bne.n	8004828 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80ee 	beq.w	8004a2a <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800484e:	f7ff fbf4 	bl	800403a <LL_RCC_GetSysClkSource>
 8004852:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	2b02      	cmp	r3, #2
 8004862:	f040 80af 	bne.w	80049c4 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f003 0203 	and.w	r2, r3, #3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	429a      	cmp	r2, r3
 8004872:	d123      	bne.n	80048bc <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487e:	429a      	cmp	r2, r3
 8004880:	d11c      	bne.n	80048bc <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	0a1b      	lsrs	r3, r3, #8
 8004886:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800488e:	429a      	cmp	r2, r3
 8004890:	d114      	bne.n	80048bc <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800489c:	429a      	cmp	r2, r3
 800489e:	d10d      	bne.n	80048bc <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d106      	bne.n	80048bc <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d05d      	beq.n	8004978 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	2b0c      	cmp	r3, #12
 80048c0:	d058      	beq.n	8004974 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0ab      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048d4:	f7ff fc74 	bl	80041c0 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048d8:	f7fe fb60 	bl	8002f9c <HAL_GetTick>
 80048dc:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e0:	f7fe fb5c 	bl	8002f9c <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e09c      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1ef      	bne.n	80048e0 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	4b3e      	ldr	r3, [pc, #248]	; (8004a00 <HAL_RCC_OscConfig+0x6e4>)
 8004908:	4013      	ands	r3, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004912:	4311      	orrs	r1, r2
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004918:	0212      	lsls	r2, r2, #8
 800491a:	4311      	orrs	r1, r2
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004920:	4311      	orrs	r1, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004926:	4311      	orrs	r1, r2
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800492c:	430a      	orrs	r2, r1
 800492e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004932:	4313      	orrs	r3, r2
 8004934:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004936:	f7ff fc34 	bl	80041a2 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800493a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004948:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800494a:	f7fe fb27 	bl	8002f9c <HAL_GetTick>
 800494e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004952:	f7fe fb23 	bl	8002f9c <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e063      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0ef      	beq.n	8004952 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004972:	e05a      	b.n	8004a2a <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e059      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d151      	bne.n	8004a2a <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004986:	f7ff fc0c 	bl	80041a2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800498a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004998:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800499a:	f7fe faff 	bl	8002f9c <HAL_GetTick>
 800499e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a2:	f7fe fafb 	bl	8002f9c <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e03b      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0ef      	beq.n	80049a2 <HAL_RCC_OscConfig+0x686>
 80049c2:	e032      	b.n	8004a2a <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	2b0c      	cmp	r3, #12
 80049c8:	d02d      	beq.n	8004a26 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ca:	f7ff fbf9 	bl	80041c0 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80049ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049d8:	f023 0303 	bic.w	r3, r3, #3
 80049dc:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80049de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049e8:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80049ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f2:	f7fe fad3 	bl	8002f9c <HAL_GetTick>
 80049f6:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f8:	e00d      	b.n	8004a16 <HAL_RCC_OscConfig+0x6fa>
 80049fa:	bf00      	nop
 80049fc:	58000400 	.word	0x58000400
 8004a00:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a04:	f7fe faca 	bl	8002f9c <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e00a      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1ef      	bne.n	8004a04 <HAL_RCC_OscConfig+0x6e8>
 8004a24:	e001      	b.n	8004a2a <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3734      	adds	r7, #52	; 0x34
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd90      	pop	{r4, r7, pc}

08004a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e12d      	b.n	8004ca4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a48:	4b98      	ldr	r3, [pc, #608]	; (8004cac <HAL_RCC_ClockConfig+0x278>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d91b      	bls.n	8004a8e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a56:	4b95      	ldr	r3, [pc, #596]	; (8004cac <HAL_RCC_ClockConfig+0x278>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f023 0207 	bic.w	r2, r3, #7
 8004a5e:	4993      	ldr	r1, [pc, #588]	; (8004cac <HAL_RCC_ClockConfig+0x278>)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a66:	f7fe fa99 	bl	8002f9c <HAL_GetTick>
 8004a6a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6c:	e008      	b.n	8004a80 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a6e:	f7fe fa95 	bl	8002f9c <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e111      	b.n	8004ca4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a80:	4b8a      	ldr	r3, [pc, #552]	; (8004cac <HAL_RCC_ClockConfig+0x278>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d1ef      	bne.n	8004a6e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d016      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fad7 	bl	8004052 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004aa4:	f7fe fa7a 	bl	8002f9c <HAL_GetTick>
 8004aa8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004aac:	f7fe fa76 	bl	8002f9c <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e0f2      	b.n	8004ca4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004abe:	f7ff fbd1 	bl	8004264 <LL_RCC_IsActiveFlag_HPRE>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0f1      	beq.n	8004aac <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0320 	and.w	r3, r3, #32
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d016      	beq.n	8004b02 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff face 	bl	800407a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ade:	f7fe fa5d 	bl	8002f9c <HAL_GetTick>
 8004ae2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ae6:	f7fe fa59 	bl	8002f9c <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e0d5      	b.n	8004ca4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004af8:	f7ff fbc6 	bl	8004288 <LL_RCC_IsActiveFlag_C2HPRE>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f1      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d016      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff fac7 	bl	80040a6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b18:	f7fe fa40 	bl	8002f9c <HAL_GetTick>
 8004b1c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b20:	f7fe fa3c 	bl	8002f9c <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e0b8      	b.n	8004ca4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004b32:	f7ff fbbc 	bl	80042ae <LL_RCC_IsActiveFlag_SHDHPRE>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0f1      	beq.n	8004b20 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d016      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff fac1 	bl	80040d4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b52:	f7fe fa23 	bl	8002f9c <HAL_GetTick>
 8004b56:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b5a:	f7fe fa1f 	bl	8002f9c <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e09b      	b.n	8004ca4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004b6c:	f7ff fbb2 	bl	80042d4 <LL_RCC_IsActiveFlag_PPRE1>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0f1      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d017      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff fab7 	bl	80040fc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b8e:	f7fe fa05 	bl	8002f9c <HAL_GetTick>
 8004b92:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b96:	f7fe fa01 	bl	8002f9c <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e07d      	b.n	8004ca4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004ba8:	f7ff fba6 	bl	80042f8 <LL_RCC_IsActiveFlag_PPRE2>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f1      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d043      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d106      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004bc6:	f7ff f857 	bl	8003c78 <LL_RCC_HSE_IsReady>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d11e      	bne.n	8004c0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e067      	b.n	8004ca4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d106      	bne.n	8004bea <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004bdc:	f7ff faff 	bl	80041de <LL_RCC_PLL_IsReady>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d113      	bne.n	8004c0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e05c      	b.n	8004ca4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004bf2:	f7ff f9bf 	bl	8003f74 <LL_RCC_MSI_IsReady>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d108      	bne.n	8004c0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e051      	b.n	8004ca4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004c00:	f7ff f86a 	bl	8003cd8 <LL_RCC_HSI_IsReady>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e04a      	b.n	8004ca4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff f9fd 	bl	8004012 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c18:	f7fe f9c0 	bl	8002f9c <HAL_GetTick>
 8004c1c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1e:	e00a      	b.n	8004c36 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c20:	f7fe f9bc 	bl	8002f9c <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e036      	b.n	8004ca4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c36:	f7ff fa00 	bl	800403a <LL_RCC_GetSysClkSource>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d1ec      	bne.n	8004c20 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c46:	4b19      	ldr	r3, [pc, #100]	; (8004cac <HAL_RCC_ClockConfig+0x278>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d21b      	bcs.n	8004c8c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c54:	4b15      	ldr	r3, [pc, #84]	; (8004cac <HAL_RCC_ClockConfig+0x278>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f023 0207 	bic.w	r2, r3, #7
 8004c5c:	4913      	ldr	r1, [pc, #76]	; (8004cac <HAL_RCC_ClockConfig+0x278>)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c64:	f7fe f99a 	bl	8002f9c <HAL_GetTick>
 8004c68:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c6c:	f7fe f996 	bl	8002f9c <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e012      	b.n	8004ca4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7e:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <HAL_RCC_ClockConfig+0x278>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d1ef      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004c8c:	f000 f87c 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8004c90:	4602      	mov	r2, r0
 8004c92:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <HAL_RCC_ClockConfig+0x27c>)
 8004c94:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004c96:	f7fe f98d 	bl	8002fb4 <HAL_GetTickPrio>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fd fca1 	bl	80025e4 <HAL_InitTick>
 8004ca2:	4603      	mov	r3, r0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	58004000 	.word	0x58004000
 8004cb0:	20000010 	.word	0x20000010

08004cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb4:	b590      	push	{r4, r7, lr}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cba:	f7ff f9be 	bl	800403a <LL_RCC_GetSysClkSource>
 8004cbe:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10a      	bne.n	8004cdc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004cc6:	f7ff f97a 	bl	8003fbe <LL_RCC_MSI_GetRange>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	091b      	lsrs	r3, r3, #4
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	4a2a      	ldr	r2, [pc, #168]	; (8004d7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	e04a      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d102      	bne.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ce2:	4b27      	ldr	r3, [pc, #156]	; (8004d80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	e044      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d10a      	bne.n	8004d04 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004cee:	f7fe ff93 	bl	8003c18 <LL_RCC_HSE_IsEnabledDiv2>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d102      	bne.n	8004cfe <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004cf8:	4b21      	ldr	r3, [pc, #132]	; (8004d80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	e039      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004cfe:	4b21      	ldr	r3, [pc, #132]	; (8004d84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	e036      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004d04:	f7ff faa2 	bl	800424c <LL_RCC_PLL_GetMainSource>
 8004d08:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d002      	beq.n	8004d16 <HAL_RCC_GetSysClockFreq+0x62>
 8004d10:	2b03      	cmp	r3, #3
 8004d12:	d003      	beq.n	8004d1c <HAL_RCC_GetSysClockFreq+0x68>
 8004d14:	e00d      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004d16:	4b1a      	ldr	r3, [pc, #104]	; (8004d80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d18:	60bb      	str	r3, [r7, #8]
        break;
 8004d1a:	e015      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004d1c:	f7fe ff7c 	bl	8003c18 <LL_RCC_HSE_IsEnabledDiv2>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d102      	bne.n	8004d2c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004d26:	4b16      	ldr	r3, [pc, #88]	; (8004d80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d28:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004d2a:	e00d      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8004d2c:	4b15      	ldr	r3, [pc, #84]	; (8004d84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d2e:	60bb      	str	r3, [r7, #8]
        break;
 8004d30:	e00a      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004d32:	f7ff f944 	bl	8003fbe <LL_RCC_MSI_GetRange>
 8004d36:	4603      	mov	r3, r0
 8004d38:	091b      	lsrs	r3, r3, #4
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	4a0f      	ldr	r2, [pc, #60]	; (8004d7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d44:	60bb      	str	r3, [r7, #8]
        break;
 8004d46:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004d48:	f7ff fa5b 	bl	8004202 <LL_RCC_PLL_GetN>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	fb03 f402 	mul.w	r4, r3, r2
 8004d54:	f7ff fa6e 	bl	8004234 <LL_RCC_PLL_GetDivider>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	091b      	lsrs	r3, r3, #4
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	fbb4 f4f3 	udiv	r4, r4, r3
 8004d62:	f7ff fa5b 	bl	800421c <LL_RCC_PLL_GetR>
 8004d66:	4603      	mov	r3, r0
 8004d68:	0f5b      	lsrs	r3, r3, #29
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	fbb4 f3f3 	udiv	r3, r4, r3
 8004d70:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004d72:	68fb      	ldr	r3, [r7, #12]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd90      	pop	{r4, r7, pc}
 8004d7c:	08014040 	.word	0x08014040
 8004d80:	00f42400 	.word	0x00f42400
 8004d84:	01e84800 	.word	0x01e84800

08004d88 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d88:	b598      	push	{r3, r4, r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004d8c:	f7ff ff92 	bl	8004cb4 <HAL_RCC_GetSysClockFreq>
 8004d90:	4604      	mov	r4, r0
 8004d92:	f7ff f9c7 	bl	8004124 <LL_RCC_GetAHBPrescaler>
 8004d96:	4603      	mov	r3, r0
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	4a03      	ldr	r2, [pc, #12]	; (8004dac <HAL_RCC_GetHCLKFreq+0x24>)
 8004da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	bd98      	pop	{r3, r4, r7, pc}
 8004dac:	08013fe0 	.word	0x08013fe0

08004db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004db0:	b598      	push	{r3, r4, r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004db4:	f7ff ffe8 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8004db8:	4604      	mov	r4, r0
 8004dba:	f7ff f9da 	bl	8004172 <LL_RCC_GetAPB1Prescaler>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	0a1b      	lsrs	r3, r3, #8
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	4a04      	ldr	r2, [pc, #16]	; (8004dd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dcc:	f003 031f 	and.w	r3, r3, #31
 8004dd0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	bd98      	pop	{r3, r4, r7, pc}
 8004dd8:	08014020 	.word	0x08014020

08004ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ddc:	b598      	push	{r3, r4, r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004de0:	f7ff ffd2 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8004de4:	4604      	mov	r4, r0
 8004de6:	f7ff f9d0 	bl	800418a <LL_RCC_GetAPB2Prescaler>
 8004dea:	4603      	mov	r3, r0
 8004dec:	0adb      	lsrs	r3, r3, #11
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	4a04      	ldr	r2, [pc, #16]	; (8004e04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df8:	f003 031f 	and.w	r3, r3, #31
 8004dfc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	bd98      	pop	{r3, r4, r7, pc}
 8004e04:	08014020 	.word	0x08014020

08004e08 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	226f      	movs	r2, #111	; 0x6f
 8004e16:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8004e18:	f7ff f90f 	bl	800403a <LL_RCC_GetSysClkSource>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8004e22:	f7ff f97f 	bl	8004124 <LL_RCC_GetAHBPrescaler>
 8004e26:	4602      	mov	r2, r0
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8004e2c:	f7ff f9a1 	bl	8004172 <LL_RCC_GetAPB1Prescaler>
 8004e30:	4602      	mov	r2, r0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8004e36:	f7ff f9a8 	bl	800418a <LL_RCC_GetAPB2Prescaler>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8004e40:	f7ff f97c 	bl	800413c <LL_C2_RCC_GetAHBPrescaler>
 8004e44:	4602      	mov	r2, r0
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8004e4a:	f7ff f984 	bl	8004156 <LL_RCC_GetAHB4Prescaler>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004e54:	4b04      	ldr	r3, [pc, #16]	; (8004e68 <HAL_RCC_GetClockConfig+0x60>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0207 	and.w	r2, r3, #7
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	601a      	str	r2, [r3, #0]
}
 8004e60:	bf00      	nop
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	58004000 	.word	0x58004000

08004e6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004e6c:	b590      	push	{r4, r7, lr}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2bb0      	cmp	r3, #176	; 0xb0
 8004e78:	d903      	bls.n	8004e82 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004e7a:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	e007      	b.n	8004e92 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	091b      	lsrs	r3, r3, #4
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	4a11      	ldr	r2, [pc, #68]	; (8004ed0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e90:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004e92:	f7ff f960 	bl	8004156 <LL_RCC_GetAHB4Prescaler>
 8004e96:	4603      	mov	r3, r0
 8004e98:	091b      	lsrs	r3, r3, #4
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	4a0d      	ldr	r2, [pc, #52]	; (8004ed4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eaa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4a0a      	ldr	r2, [pc, #40]	; (8004ed8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb4:	0c9c      	lsrs	r4, r3, #18
 8004eb6:	f7fe fea1 	bl	8003bfc <HAL_PWREx_GetVoltageRange>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f000 f80c 	bl	8004edc <RCC_SetFlashLatency>
 8004ec4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd90      	pop	{r4, r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	08014040 	.word	0x08014040
 8004ed4:	08013fe0 	.word	0x08013fe0
 8004ed8:	431bde83 	.word	0x431bde83

08004edc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004edc:	b590      	push	{r4, r7, lr}
 8004ede:	b093      	sub	sp, #76	; 0x4c
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004ee6:	4b39      	ldr	r3, [pc, #228]	; (8004fcc <RCC_SetFlashLatency+0xf0>)
 8004ee8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004eec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004eee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004ef2:	4a37      	ldr	r2, [pc, #220]	; (8004fd0 <RCC_SetFlashLatency+0xf4>)
 8004ef4:	f107 031c 	add.w	r3, r7, #28
 8004ef8:	ca07      	ldmia	r2, {r0, r1, r2}
 8004efa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004efe:	4b35      	ldr	r3, [pc, #212]	; (8004fd4 <RCC_SetFlashLatency+0xf8>)
 8004f00:	f107 040c 	add.w	r4, r7, #12
 8004f04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f14:	d11c      	bne.n	8004f50 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004f16:	2300      	movs	r3, #0
 8004f18:	643b      	str	r3, [r7, #64]	; 0x40
 8004f1a:	e015      	b.n	8004f48 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004f24:	4413      	add	r3, r2
 8004f26:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d808      	bhi.n	8004f42 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004f38:	4413      	add	r3, r2
 8004f3a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004f3e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004f40:	e022      	b.n	8004f88 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f44:	3301      	adds	r3, #1
 8004f46:	643b      	str	r3, [r7, #64]	; 0x40
 8004f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d9e6      	bls.n	8004f1c <RCC_SetFlashLatency+0x40>
 8004f4e:	e01b      	b.n	8004f88 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004f50:	2300      	movs	r3, #0
 8004f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f54:	e015      	b.n	8004f82 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004f5e:	4413      	add	r3, r2
 8004f60:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d808      	bhi.n	8004f7c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004f72:	4413      	add	r3, r2
 8004f74:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004f78:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004f7a:	e005      	b.n	8004f88 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f7e:	3301      	adds	r3, #1
 8004f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d9e6      	bls.n	8004f56 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004f88:	4b13      	ldr	r3, [pc, #76]	; (8004fd8 <RCC_SetFlashLatency+0xfc>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f023 0207 	bic.w	r2, r3, #7
 8004f90:	4911      	ldr	r1, [pc, #68]	; (8004fd8 <RCC_SetFlashLatency+0xfc>)
 8004f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f94:	4313      	orrs	r3, r2
 8004f96:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f98:	f7fe f800 	bl	8002f9c <HAL_GetTick>
 8004f9c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004f9e:	e008      	b.n	8004fb2 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004fa0:	f7fd fffc 	bl	8002f9c <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e007      	b.n	8004fc2 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004fb2:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <RCC_SetFlashLatency+0xfc>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d1ef      	bne.n	8004fa0 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	374c      	adds	r7, #76	; 0x4c
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd90      	pop	{r4, r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	0801307c 	.word	0x0801307c
 8004fd0:	0801308c 	.word	0x0801308c
 8004fd4:	08013098 	.word	0x08013098
 8004fd8:	58004000 	.word	0x58004000

08004fdc <LL_RCC_LSE_IsEnabled>:
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <LL_RCC_LSE_IsEnabled+0x18>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <LL_RCC_LSE_IsEnabled+0x1a>
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <LL_RCC_LSE_IsReady>:
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b02      	cmp	r3, #2
 8005012:	d101      	bne.n	8005018 <LL_RCC_LSE_IsReady+0x18>
 8005014:	2301      	movs	r3, #1
 8005016:	e000      	b.n	800501a <LL_RCC_LSE_IsReady+0x1a>
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <LL_RCC_SetRFWKPClockSource>:
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800502c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005034:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005038:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <LL_RCC_SetSMPSClockSource>:
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	f023 0203 	bic.w	r2, r3, #3
 8005062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4313      	orrs	r3, r2
 800506a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <LL_RCC_SetSMPSPrescaler>:
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800508a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4313      	orrs	r3, r2
 8005092:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <LL_RCC_SetUSARTClockSource>:
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80050a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b0:	f023 0203 	bic.w	r2, r3, #3
 80050b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <LL_RCC_SetLPUARTClockSource>:
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80050d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <LL_RCC_SetI2CClockSource>:
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005104:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	091b      	lsrs	r3, r3, #4
 800510c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005110:	43db      	mvns	r3, r3
 8005112:	401a      	ands	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800511c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <LL_RCC_SetLPTIMClockSource>:
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800513a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800513e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	0c1b      	lsrs	r3, r3, #16
 8005146:	041b      	lsls	r3, r3, #16
 8005148:	43db      	mvns	r3, r3
 800514a:	401a      	ands	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	041b      	lsls	r3, r3, #16
 8005150:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005154:	4313      	orrs	r3, r2
 8005156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <LL_RCC_SetSAIClockSource>:
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800516e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005176:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800517a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <LL_RCC_SetRNGClockSource>:
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800519a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80051a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <LL_RCC_SetCLK48ClockSource>:
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80051c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <LL_RCC_SetUSBClockSource>:
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b082      	sub	sp, #8
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7ff ffe3 	bl	80051be <LL_RCC_SetCLK48ClockSource>
}
 80051f8:	bf00      	nop
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <LL_RCC_SetADCClockSource>:
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005210:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005214:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <LL_RCC_SetRTCClockSource>:
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005240:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <LL_RCC_GetRTCClockSource>:
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800525c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005264:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005268:	4618      	mov	r0, r3
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <LL_RCC_ForceBackupDomainReset>:
{
 8005272:	b480      	push	{r7}
 8005274:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800527a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800528a:	bf00      	nop
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80052ac:	bf00      	nop
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <LL_RCC_PLLSAI1_Enable>:
{
 80052b6:	b480      	push	{r7}
 80052b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80052ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052c8:	6013      	str	r3, [r2, #0]
}
 80052ca:	bf00      	nop
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <LL_RCC_PLLSAI1_Disable>:
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80052d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052e6:	6013      	str	r3, [r2, #0]
}
 80052e8:	bf00      	nop
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <LL_RCC_PLLSAI1_IsReady>:
{
 80052f2:	b480      	push	{r7}
 80052f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80052f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005304:	d101      	bne.n	800530a <LL_RCC_PLLSAI1_IsReady+0x18>
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b088      	sub	sp, #32
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800531e:	2300      	movs	r3, #0
 8005320:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005322:	2300      	movs	r3, #0
 8005324:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d033      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800533a:	d00c      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800533c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005340:	d802      	bhi.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005342:	2b00      	cmp	r3, #0
 8005344:	d010      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005346:	e017      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005348:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800534c:	d017      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x68>
 800534e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005352:	d016      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8005354:	e010      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005364:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005366:	e00d      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3304      	adds	r3, #4
 800536c:	4618      	mov	r0, r3
 800536e:	f000 f947 	bl	8005600 <RCCEx_PLLSAI1_ConfigNP>
 8005372:	4603      	mov	r3, r0
 8005374:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005376:	e005      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	77fb      	strb	r3, [r7, #31]
        break;
 800537c:	e002      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800537e:	bf00      	nop
 8005380:	e000      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8005382:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005384:	7ffb      	ldrb	r3, [r7, #31]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d105      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fee9 	bl	8005166 <LL_RCC_SetSAIClockSource>
 8005394:	e001      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005396:	7ffb      	ldrb	r3, [r7, #31]
 8005398:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d046      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80053a6:	f7ff ff57 	bl	8005258 <LL_RCC_GetRTCClockSource>
 80053aa:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d03c      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80053b6:	f7fe fc11 	bl	8003bdc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d105      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7ff ff31 	bl	800522c <LL_RCC_SetRTCClockSource>
 80053ca:	e02e      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80053cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80053d6:	f7ff ff4c 	bl	8005272 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80053da:	f7ff ff5b 	bl	8005294 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	4313      	orrs	r3, r2
 80053ea:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80053ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80053f6:	f7ff fdf1 	bl	8004fdc <LL_RCC_LSE_IsEnabled>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d114      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005400:	f7fd fdcc 	bl	8002f9c <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005406:	e00b      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005408:	f7fd fdc8 	bl	8002f9c <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	f241 3288 	movw	r2, #5000	; 0x1388
 8005416:	4293      	cmp	r3, r2
 8005418:	d902      	bls.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	77fb      	strb	r3, [r7, #31]
              break;
 800541e:	e004      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005420:	f7ff fdee 	bl	8005000 <LL_RCC_LSE_IsReady>
 8005424:	4603      	mov	r3, r0
 8005426:	2b01      	cmp	r3, #1
 8005428:	d1ee      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800542a:	7ffb      	ldrb	r3, [r7, #31]
 800542c:	77bb      	strb	r3, [r7, #30]
 800542e:	e001      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005430:	7ffb      	ldrb	r3, [r7, #31]
 8005432:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d004      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff fe2b 	bl	80050a0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d004      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff fe36 	bl	80050cc <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0310 	and.w	r3, r3, #16
 8005468:	2b00      	cmp	r3, #0
 800546a:	d004      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	4618      	mov	r0, r3
 8005472:	f7ff fe5e 	bl	8005132 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0320 	and.w	r3, r3, #32
 800547e:	2b00      	cmp	r3, #0
 8005480:	d004      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff fe53 	bl	8005132 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b00      	cmp	r3, #0
 8005496:	d004      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff fe2b 	bl	80050f8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d004      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff fe20 	bl	80050f8 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d022      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7ff fe8e 	bl	80051ea <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054d6:	d107      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80054d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054e6:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054f0:	d10b      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3304      	adds	r3, #4
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 f8dd 	bl	80056b6 <RCCEx_PLLSAI1_ConfigNQ>
 80054fc:	4603      	mov	r3, r0
 80054fe:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005500:	7ffb      	ldrb	r3, [r7, #31]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8005506:	7ffb      	ldrb	r3, [r7, #31]
 8005508:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005512:	2b00      	cmp	r3, #0
 8005514:	d02b      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551e:	d008      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005528:	d003      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552e:	2b00      	cmp	r3, #0
 8005530:	d105      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x228>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005536:	4618      	mov	r0, r3
 8005538:	f7ff fe2b 	bl	8005192 <LL_RCC_SetRNGClockSource>
 800553c:	e00a      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	2000      	movs	r0, #0
 800554a:	f7ff fe22 	bl	8005192 <LL_RCC_SetRNGClockSource>
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f7ff fe35 	bl	80051be <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800555c:	d107      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800555e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005568:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800556c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005576:	2b00      	cmp	r3, #0
 8005578:	d022      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff fe3e 	bl	8005200 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800558c:	d107      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800558e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800559c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055a6:	d10b      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3304      	adds	r3, #4
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 f8dd 	bl	800576c <RCCEx_PLLSAI1_ConfigNR>
 80055b2:	4603      	mov	r3, r0
 80055b4:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80055b6:	7ffb      	ldrb	r3, [r7, #31]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 80055bc:	7ffb      	ldrb	r3, [r7, #31]
 80055be:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d004      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7ff fd27 	bl	8005024 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7ff fd46 	bl	8005078 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7ff fd2d 	bl	8005050 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80055f6:	7fbb      	ldrb	r3, [r7, #30]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3720      	adds	r7, #32
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005608:	2300      	movs	r3, #0
 800560a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800560c:	f7ff fe62 	bl	80052d4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005610:	f7fd fcc4 	bl	8002f9c <HAL_GetTick>
 8005614:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005616:	e009      	b.n	800562c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005618:	f7fd fcc0 	bl	8002f9c <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d902      	bls.n	800562c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	73fb      	strb	r3, [r7, #15]
      break;
 800562a:	e004      	b.n	8005636 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800562c:	f7ff fe61 	bl	80052f2 <LL_RCC_PLLSAI1_IsReady>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f0      	bne.n	8005618 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005636:	7bfb      	ldrb	r3, [r7, #15]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d137      	bne.n	80056ac <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800563c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	021b      	lsls	r3, r3, #8
 800564c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005650:	4313      	orrs	r3, r2
 8005652:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005666:	4313      	orrs	r3, r2
 8005668:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800566a:	f7ff fe24 	bl	80052b6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800566e:	f7fd fc95 	bl	8002f9c <HAL_GetTick>
 8005672:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005674:	e009      	b.n	800568a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005676:	f7fd fc91 	bl	8002f9c <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b02      	cmp	r3, #2
 8005682:	d902      	bls.n	800568a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	73fb      	strb	r3, [r7, #15]
        break;
 8005688:	e004      	b.n	8005694 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800568a:	f7ff fe32 	bl	80052f2 <LL_RCC_PLLSAI1_IsReady>
 800568e:	4603      	mov	r3, r0
 8005690:	2b01      	cmp	r3, #1
 8005692:	d1f0      	bne.n	8005676 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d108      	bne.n	80056ac <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800569a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056a8:	4313      	orrs	r3, r2
 80056aa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b084      	sub	sp, #16
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80056c2:	f7ff fe07 	bl	80052d4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80056c6:	f7fd fc69 	bl	8002f9c <HAL_GetTick>
 80056ca:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80056cc:	e009      	b.n	80056e2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056ce:	f7fd fc65 	bl	8002f9c <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d902      	bls.n	80056e2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	73fb      	strb	r3, [r7, #15]
      break;
 80056e0:	e004      	b.n	80056ec <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80056e2:	f7ff fe06 	bl	80052f2 <LL_RCC_PLLSAI1_IsReady>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1f0      	bne.n	80056ce <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d137      	bne.n	8005762 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80056f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005706:	4313      	orrs	r3, r2
 8005708:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800570a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800571c:	4313      	orrs	r3, r2
 800571e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005720:	f7ff fdc9 	bl	80052b6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005724:	f7fd fc3a 	bl	8002f9c <HAL_GetTick>
 8005728:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800572a:	e009      	b.n	8005740 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800572c:	f7fd fc36 	bl	8002f9c <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d902      	bls.n	8005740 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	73fb      	strb	r3, [r7, #15]
        break;
 800573e:	e004      	b.n	800574a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005740:	f7ff fdd7 	bl	80052f2 <LL_RCC_PLLSAI1_IsReady>
 8005744:	4603      	mov	r3, r0
 8005746:	2b01      	cmp	r3, #1
 8005748:	d1f0      	bne.n	800572c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d108      	bne.n	8005762 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005754:	691a      	ldr	r2, [r3, #16]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800575e:	4313      	orrs	r3, r2
 8005760:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005762:	7bfb      	ldrb	r3, [r7, #15]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005774:	2300      	movs	r3, #0
 8005776:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005778:	f7ff fdac 	bl	80052d4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800577c:	f7fd fc0e 	bl	8002f9c <HAL_GetTick>
 8005780:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005782:	e009      	b.n	8005798 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005784:	f7fd fc0a 	bl	8002f9c <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d902      	bls.n	8005798 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	73fb      	strb	r3, [r7, #15]
      break;
 8005796:	e004      	b.n	80057a2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005798:	f7ff fdab 	bl	80052f2 <LL_RCC_PLLSAI1_IsReady>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f0      	bne.n	8005784 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d137      	bne.n	8005818 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80057a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057bc:	4313      	orrs	r3, r2
 80057be:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80057c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057d2:	4313      	orrs	r3, r2
 80057d4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80057d6:	f7ff fd6e 	bl	80052b6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057da:	f7fd fbdf 	bl	8002f9c <HAL_GetTick>
 80057de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80057e0:	e009      	b.n	80057f6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057e2:	f7fd fbdb 	bl	8002f9c <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d902      	bls.n	80057f6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	73fb      	strb	r3, [r7, #15]
        break;
 80057f4:	e004      	b.n	8005800 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80057f6:	f7ff fd7c 	bl	80052f2 <LL_RCC_PLLSAI1_IsReady>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d1f0      	bne.n	80057e2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005800:	7bfb      	ldrb	r3, [r7, #15]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d108      	bne.n	8005818 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005814:	4313      	orrs	r3, r2
 8005816:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005818:	7bfb      	ldrb	r3, [r7, #15]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b082      	sub	sp, #8
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e090      	b.n	8005956 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d106      	bne.n	800584e <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7fc fe63 	bl	8002514 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2202      	movs	r2, #2
 8005852:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	22ca      	movs	r2, #202	; 0xca
 800585c:	625a      	str	r2, [r3, #36]	; 0x24
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2253      	movs	r2, #83	; 0x53
 8005864:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f89f 	bl	80059aa <RTC_EnterInitMode>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	22ff      	movs	r2, #255	; 0xff
 8005878:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2204      	movs	r2, #4
 800587e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e067      	b.n	8005956 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6812      	ldr	r2, [r2, #0]
 8005890:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005898:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6899      	ldr	r1, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	68d2      	ldr	r2, [r2, #12]
 80058c0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6919      	ldr	r1, [r3, #16]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	041a      	lsls	r2, r3, #16
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058e4:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0203 	bic.w	r2, r2, #3
 80058f4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	69da      	ldr	r2, [r3, #28]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f003 0320 	and.w	r3, r3, #32
 8005918:	2b00      	cmp	r3, #0
 800591a:	d113      	bne.n	8005944 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 f81e 	bl	800595e <HAL_RTC_WaitForSynchro>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00d      	beq.n	8005944 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	22ff      	movs	r2, #255	; 0xff
 800592e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2204      	movs	r2, #4
 8005934:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e008      	b.n	8005956 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	22ff      	movs	r2, #255	; 0xff
 800594a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8005954:	2300      	movs	r3, #0
  }
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005974:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005976:	f7fd fb11 	bl	8002f9c <HAL_GetTick>
 800597a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800597c:	e009      	b.n	8005992 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800597e:	f7fd fb0d 	bl	8002f9c <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800598c:	d901      	bls.n	8005992 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e007      	b.n	80059a2 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f003 0320 	and.w	r3, r3, #32
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0ee      	beq.n	800597e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b084      	sub	sp, #16
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d119      	bne.n	80059f4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f04f 32ff 	mov.w	r2, #4294967295
 80059c8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80059ca:	f7fd fae7 	bl	8002f9c <HAL_GetTick>
 80059ce:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80059d0:	e009      	b.n	80059e6 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80059d2:	f7fd fae3 	bl	8002f9c <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059e0:	d901      	bls.n	80059e6 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e007      	b.n	80059f6 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0ee      	beq.n	80059d2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b082      	sub	sp, #8
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e049      	b.n	8005aa4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d106      	bne.n	8005a2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f841 	bl	8005aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	f000 f9d5 	bl	8005dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d001      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e036      	b.n	8005b46 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0201 	orr.w	r2, r2, #1
 8005aee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a17      	ldr	r2, [pc, #92]	; (8005b54 <HAL_TIM_Base_Start_IT+0x94>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d004      	beq.n	8005b04 <HAL_TIM_Base_Start_IT+0x44>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b02:	d115      	bne.n	8005b30 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	4b13      	ldr	r3, [pc, #76]	; (8005b58 <HAL_TIM_Base_Start_IT+0x98>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b06      	cmp	r3, #6
 8005b14:	d015      	beq.n	8005b42 <HAL_TIM_Base_Start_IT+0x82>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b1c:	d011      	beq.n	8005b42 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0201 	orr.w	r2, r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b2e:	e008      	b.n	8005b42 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0201 	orr.w	r2, r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	e000      	b.n	8005b44 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40012c00 	.word	0x40012c00
 8005b58:	00010007 	.word	0x00010007

08005b5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d122      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d11b      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0202 	mvn.w	r2, #2
 8005b88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f905 	bl	8005dae <HAL_TIM_IC_CaptureCallback>
 8005ba4:	e005      	b.n	8005bb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f8f7 	bl	8005d9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f908 	bl	8005dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0304 	and.w	r3, r3, #4
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d122      	bne.n	8005c0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d11b      	bne.n	8005c0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0204 	mvn.w	r2, #4
 8005bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2202      	movs	r2, #2
 8005be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f8db 	bl	8005dae <HAL_TIM_IC_CaptureCallback>
 8005bf8:	e005      	b.n	8005c06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f8cd 	bl	8005d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f8de 	bl	8005dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0308 	and.w	r3, r3, #8
 8005c16:	2b08      	cmp	r3, #8
 8005c18:	d122      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0308 	and.w	r3, r3, #8
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d11b      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0208 	mvn.w	r2, #8
 8005c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2204      	movs	r2, #4
 8005c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f8b1 	bl	8005dae <HAL_TIM_IC_CaptureCallback>
 8005c4c:	e005      	b.n	8005c5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f8a3 	bl	8005d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f8b4 	bl	8005dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0310 	and.w	r3, r3, #16
 8005c6a:	2b10      	cmp	r3, #16
 8005c6c:	d122      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b10      	cmp	r3, #16
 8005c7a:	d11b      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0210 	mvn.w	r2, #16
 8005c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2208      	movs	r2, #8
 8005c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f887 	bl	8005dae <HAL_TIM_IC_CaptureCallback>
 8005ca0:	e005      	b.n	8005cae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f879 	bl	8005d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f88a 	bl	8005dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d10e      	bne.n	8005ce0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d107      	bne.n	8005ce0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f06f 0201 	mvn.w	r2, #1
 8005cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fc fba8 	bl	8002430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cea:	2b80      	cmp	r3, #128	; 0x80
 8005cec:	d10e      	bne.n	8005d0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf8:	2b80      	cmp	r3, #128	; 0x80
 8005cfa:	d107      	bne.n	8005d0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f8de 	bl	8005ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d1a:	d10e      	bne.n	8005d3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d26:	2b80      	cmp	r3, #128	; 0x80
 8005d28:	d107      	bne.n	8005d3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f8d1 	bl	8005edc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d44:	2b40      	cmp	r3, #64	; 0x40
 8005d46:	d10e      	bne.n	8005d66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d52:	2b40      	cmp	r3, #64	; 0x40
 8005d54:	d107      	bne.n	8005d66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f838 	bl	8005dd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d10e      	bne.n	8005d92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d107      	bne.n	8005d92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f06f 0220 	mvn.w	r2, #32
 8005d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f891 	bl	8005eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d92:	bf00      	nop
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dca:	bf00      	nop
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b083      	sub	sp, #12
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dde:	bf00      	nop
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
	...

08005dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a2a      	ldr	r2, [pc, #168]	; (8005ea8 <TIM_Base_SetConfig+0xbc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d003      	beq.n	8005e0c <TIM_Base_SetConfig+0x20>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e0a:	d108      	bne.n	8005e1e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a21      	ldr	r2, [pc, #132]	; (8005ea8 <TIM_Base_SetConfig+0xbc>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00b      	beq.n	8005e3e <TIM_Base_SetConfig+0x52>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e2c:	d007      	beq.n	8005e3e <TIM_Base_SetConfig+0x52>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a1e      	ldr	r2, [pc, #120]	; (8005eac <TIM_Base_SetConfig+0xc0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d003      	beq.n	8005e3e <TIM_Base_SetConfig+0x52>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a1d      	ldr	r2, [pc, #116]	; (8005eb0 <TIM_Base_SetConfig+0xc4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d108      	bne.n	8005e50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a0c      	ldr	r2, [pc, #48]	; (8005ea8 <TIM_Base_SetConfig+0xbc>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d007      	beq.n	8005e8c <TIM_Base_SetConfig+0xa0>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a0b      	ldr	r2, [pc, #44]	; (8005eac <TIM_Base_SetConfig+0xc0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d003      	beq.n	8005e8c <TIM_Base_SetConfig+0xa0>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a0a      	ldr	r2, [pc, #40]	; (8005eb0 <TIM_Base_SetConfig+0xc4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d103      	bne.n	8005e94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	615a      	str	r2, [r3, #20]
}
 8005e9a:	bf00      	nop
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	40012c00 	.word	0x40012c00
 8005eac:	40014400 	.word	0x40014400
 8005eb0:	40014800 	.word	0x40014800

08005eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <LL_RCC_GetUSARTClockSource>:
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005efc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4013      	ands	r3, r2
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <LL_RCC_GetLPUARTClockSource>:
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4013      	ands	r3, r2
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e042      	b.n	8005fc8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d106      	bne.n	8005f5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7fc feeb 	bl	8002d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2224      	movs	r2, #36	; 0x24
 8005f5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0201 	bic.w	r2, r2, #1
 8005f70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fb9c 	bl	80066b0 <UART_SetConfig>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e022      	b.n	8005fc8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fd9e 	bl	8006acc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689a      	ldr	r2, [r3, #8]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0201 	orr.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fe25 	bl	8006c10 <UART_CheckIdleState>
 8005fc6:	4603      	mov	r3, r0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fe4:	2b20      	cmp	r3, #32
 8005fe6:	d168      	bne.n	80060ba <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <HAL_UART_Transmit_IT+0x24>
 8005fee:	88fb      	ldrh	r3, [r7, #6]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e061      	b.n	80060bc <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d101      	bne.n	8006006 <HAL_UART_Transmit_IT+0x36>
 8006002:	2302      	movs	r3, #2
 8006004:	e05a      	b.n	80060bc <HAL_UART_Transmit_IT+0xec>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	88fa      	ldrh	r2, [r7, #6]
 8006018:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	88fa      	ldrh	r2, [r7, #6]
 8006020:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2221      	movs	r2, #33	; 0x21
 8006036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800603e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006042:	d11c      	bne.n	800607e <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800604c:	d107      	bne.n	800605e <HAL_UART_Transmit_IT+0x8e>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d103      	bne.n	800605e <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	4a1b      	ldr	r2, [pc, #108]	; (80060c8 <HAL_UART_Transmit_IT+0xf8>)
 800605a:	671a      	str	r2, [r3, #112]	; 0x70
 800605c:	e002      	b.n	8006064 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4a1a      	ldr	r2, [pc, #104]	; (80060cc <HAL_UART_Transmit_IT+0xfc>)
 8006062:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800607a:	609a      	str	r2, [r3, #8]
 800607c:	e01b      	b.n	80060b6 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006086:	d107      	bne.n	8006098 <HAL_UART_Transmit_IT+0xc8>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d103      	bne.n	8006098 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4a0f      	ldr	r2, [pc, #60]	; (80060d0 <HAL_UART_Transmit_IT+0x100>)
 8006094:	671a      	str	r2, [r3, #112]	; 0x70
 8006096:	e002      	b.n	800609e <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4a0e      	ldr	r2, [pc, #56]	; (80060d4 <HAL_UART_Transmit_IT+0x104>)
 800609c:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060b4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	e000      	b.n	80060bc <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 80060ba:	2302      	movs	r3, #2
  }
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	080070cb 	.word	0x080070cb
 80060cc:	08007031 	.word	0x08007031
 80060d0:	08006fb3 	.word	0x08006fb3
 80060d4:	08006f3f 	.word	0x08006f3f

080060d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	4613      	mov	r3, r2
 80060e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	f040 80bc 	bne.w	800626a <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <HAL_UART_Receive_IT+0x26>
 80060f8:	88fb      	ldrh	r3, [r7, #6]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e0b4      	b.n	800626c <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_UART_Receive_IT+0x38>
 800610c:	2302      	movs	r3, #2
 800610e:	e0ad      	b.n	800626c <HAL_UART_Receive_IT+0x194>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	88fa      	ldrh	r2, [r7, #6]
 8006122:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	88fa      	ldrh	r2, [r7, #6]
 800612a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800613c:	d10e      	bne.n	800615c <HAL_UART_Receive_IT+0x84>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d105      	bne.n	8006152 <HAL_UART_Receive_IT+0x7a>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f240 12ff 	movw	r2, #511	; 0x1ff
 800614c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006150:	e02d      	b.n	80061ae <HAL_UART_Receive_IT+0xd6>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	22ff      	movs	r2, #255	; 0xff
 8006156:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800615a:	e028      	b.n	80061ae <HAL_UART_Receive_IT+0xd6>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10d      	bne.n	8006180 <HAL_UART_Receive_IT+0xa8>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d104      	bne.n	8006176 <HAL_UART_Receive_IT+0x9e>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	22ff      	movs	r2, #255	; 0xff
 8006170:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006174:	e01b      	b.n	80061ae <HAL_UART_Receive_IT+0xd6>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	227f      	movs	r2, #127	; 0x7f
 800617a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800617e:	e016      	b.n	80061ae <HAL_UART_Receive_IT+0xd6>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006188:	d10d      	bne.n	80061a6 <HAL_UART_Receive_IT+0xce>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d104      	bne.n	800619c <HAL_UART_Receive_IT+0xc4>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	227f      	movs	r2, #127	; 0x7f
 8006196:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800619a:	e008      	b.n	80061ae <HAL_UART_Receive_IT+0xd6>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	223f      	movs	r2, #63	; 0x3f
 80061a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80061a4:	e003      	b.n	80061ae <HAL_UART_Receive_IT+0xd6>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2222      	movs	r2, #34	; 0x22
 80061ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f042 0201 	orr.w	r2, r2, #1
 80061cc:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061d6:	d12a      	bne.n	800622e <HAL_UART_Receive_IT+0x156>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80061de:	88fa      	ldrh	r2, [r7, #6]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d324      	bcc.n	800622e <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ec:	d107      	bne.n	80061fe <HAL_UART_Receive_IT+0x126>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d103      	bne.n	80061fe <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	4a1f      	ldr	r2, [pc, #124]	; (8006278 <HAL_UART_Receive_IT+0x1a0>)
 80061fa:	66da      	str	r2, [r3, #108]	; 0x6c
 80061fc:	e002      	b.n	8006204 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4a1e      	ldr	r2, [pc, #120]	; (800627c <HAL_UART_Receive_IT+0x1a4>)
 8006202:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800621a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800622a:	609a      	str	r2, [r3, #8]
 800622c:	e01b      	b.n	8006266 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006236:	d107      	bne.n	8006248 <HAL_UART_Receive_IT+0x170>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d103      	bne.n	8006248 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4a0f      	ldr	r2, [pc, #60]	; (8006280 <HAL_UART_Receive_IT+0x1a8>)
 8006244:	66da      	str	r2, [r3, #108]	; 0x6c
 8006246:	e002      	b.n	800624e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4a0e      	ldr	r2, [pc, #56]	; (8006284 <HAL_UART_Receive_IT+0x1ac>)
 800624c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006264:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	e000      	b.n	800626c <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800626a:	2302      	movs	r3, #2
  }
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	08007401 	.word	0x08007401
 800627c:	080072f9 	.word	0x080072f9
 8006280:	0800724d 	.word	0x0800724d
 8006284:	080071a3 	.word	0x080071a3

08006288 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	4613      	mov	r3, r2
 8006294:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800629c:	2b20      	cmp	r3, #32
 800629e:	d168      	bne.n	8006372 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <HAL_UART_Transmit_DMA+0x24>
 80062a6:	88fb      	ldrh	r3, [r7, #6]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e061      	b.n	8006374 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d101      	bne.n	80062be <HAL_UART_Transmit_DMA+0x36>
 80062ba:	2302      	movs	r3, #2
 80062bc:	e05a      	b.n	8006374 <HAL_UART_Transmit_DMA+0xec>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	88fa      	ldrh	r2, [r7, #6]
 80062d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	88fa      	ldrh	r2, [r7, #6]
 80062d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2221      	movs	r2, #33	; 0x21
 80062e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d02c      	beq.n	800634e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062f8:	4a20      	ldr	r2, [pc, #128]	; (800637c <HAL_UART_Transmit_DMA+0xf4>)
 80062fa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006300:	4a1f      	ldr	r2, [pc, #124]	; (8006380 <HAL_UART_Transmit_DMA+0xf8>)
 8006302:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006308:	4a1e      	ldr	r2, [pc, #120]	; (8006384 <HAL_UART_Transmit_DMA+0xfc>)
 800630a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006310:	2200      	movs	r2, #0
 8006312:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800631c:	4619      	mov	r1, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3328      	adds	r3, #40	; 0x28
 8006324:	461a      	mov	r2, r3
 8006326:	88fb      	ldrh	r3, [r7, #6]
 8006328:	f7fd f880 	bl	800342c <HAL_DMA_Start_IT>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00d      	beq.n	800634e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2210      	movs	r2, #16
 8006336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2220      	movs	r2, #32
 8006346:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e012      	b.n	8006374 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2240      	movs	r2, #64	; 0x40
 8006354:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800636c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	e000      	b.n	8006374 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8006372:	2302      	movs	r3, #2
  }
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	08006e23 	.word	0x08006e23
 8006380:	08006e77 	.word	0x08006e77
 8006384:	08006e93 	.word	0x08006e93

08006388 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80063a8:	69fa      	ldr	r2, [r7, #28]
 80063aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80063ae:	4013      	ands	r3, r2
 80063b0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d118      	bne.n	80063ea <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d013      	beq.n	80063ea <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	f003 0320 	and.w	r3, r3, #32
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d104      	bne.n	80063d6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d009      	beq.n	80063ea <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 8145 	beq.w	800666a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	4798      	blx	r3
      }
      return;
 80063e8:	e13f      	b.n	800666a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 80e8 	beq.w	80065c2 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4ba1      	ldr	r3, [pc, #644]	; (800667c <HAL_UART_IRQHandler+0x2f4>)
 80063f6:	4013      	ands	r3, r2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d105      	bne.n	8006408 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	4ba0      	ldr	r3, [pc, #640]	; (8006680 <HAL_UART_IRQHandler+0x2f8>)
 8006400:	4013      	ands	r3, r2
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 80dd 	beq.w	80065c2 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d010      	beq.n	8006434 <HAL_UART_IRQHandler+0xac>
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00b      	beq.n	8006434 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2201      	movs	r2, #1
 8006422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642a:	f043 0201 	orr.w	r2, r3, #1
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d010      	beq.n	8006460 <HAL_UART_IRQHandler+0xd8>
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00b      	beq.n	8006460 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2202      	movs	r2, #2
 800644e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006456:	f043 0204 	orr.w	r2, r3, #4
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	f003 0304 	and.w	r3, r3, #4
 8006466:	2b00      	cmp	r3, #0
 8006468:	d010      	beq.n	800648c <HAL_UART_IRQHandler+0x104>
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00b      	beq.n	800648c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2204      	movs	r2, #4
 800647a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006482:	f043 0202 	orr.w	r2, r3, #2
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	f003 0308 	and.w	r3, r3, #8
 8006492:	2b00      	cmp	r3, #0
 8006494:	d015      	beq.n	80064c2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	f003 0320 	and.w	r3, r3, #32
 800649c:	2b00      	cmp	r3, #0
 800649e:	d104      	bne.n	80064aa <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	4b76      	ldr	r3, [pc, #472]	; (800667c <HAL_UART_IRQHandler+0x2f4>)
 80064a4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00b      	beq.n	80064c2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2208      	movs	r2, #8
 80064b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b8:	f043 0208 	orr.w	r2, r3, #8
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d011      	beq.n	80064f0 <HAL_UART_IRQHandler+0x168>
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00c      	beq.n	80064f0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e6:	f043 0220 	orr.w	r2, r3, #32
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 80b9 	beq.w	800666e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f003 0320 	and.w	r3, r3, #32
 8006502:	2b00      	cmp	r3, #0
 8006504:	d011      	beq.n	800652a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	f003 0320 	and.w	r3, r3, #32
 800650c:	2b00      	cmp	r3, #0
 800650e:	d104      	bne.n	800651a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d007      	beq.n	800652a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006530:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800653c:	2b40      	cmp	r3, #64	; 0x40
 800653e:	d004      	beq.n	800654a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006546:	2b00      	cmp	r3, #0
 8006548:	d031      	beq.n	80065ae <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fc46 	bl	8006ddc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	2b40      	cmp	r3, #64	; 0x40
 800655c:	d123      	bne.n	80065a6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800656c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006572:	2b00      	cmp	r3, #0
 8006574:	d013      	beq.n	800659e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800657a:	4a42      	ldr	r2, [pc, #264]	; (8006684 <HAL_UART_IRQHandler+0x2fc>)
 800657c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006582:	4618      	mov	r0, r3
 8006584:	f7fc ffcd 	bl	8003522 <HAL_DMA_Abort_IT>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d017      	beq.n	80065be <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8006598:	4610      	mov	r0, r2
 800659a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800659c:	e00f      	b.n	80065be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f87c 	bl	800669c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a4:	e00b      	b.n	80065be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f878 	bl	800669c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ac:	e007      	b.n	80065be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f874 	bl	800669c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80065bc:	e057      	b.n	800666e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065be:	bf00      	nop
    return;
 80065c0:	e055      	b.n	800666e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00d      	beq.n	80065e8 <HAL_UART_IRQHandler+0x260>
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d008      	beq.n	80065e8 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80065de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 ff91 	bl	8007508 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065e6:	e045      	b.n	8006674 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d012      	beq.n	8006618 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d104      	bne.n	8006606 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d008      	beq.n	8006618 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660a:	2b00      	cmp	r3, #0
 800660c:	d031      	beq.n	8006672 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	4798      	blx	r3
    }
    return;
 8006616:	e02c      	b.n	8006672 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661e:	2b00      	cmp	r3, #0
 8006620:	d008      	beq.n	8006634 <HAL_UART_IRQHandler+0x2ac>
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fd9e 	bl	800716e <UART_EndTransmit_IT>
    return;
 8006632:	e01f      	b.n	8006674 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d008      	beq.n	8006650 <HAL_UART_IRQHandler+0x2c8>
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 ff71 	bl	8007530 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800664e:	e011      	b.n	8006674 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00c      	beq.n	8006674 <HAL_UART_IRQHandler+0x2ec>
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	da09      	bge.n	8006674 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 ff5b 	bl	800751c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006666:	bf00      	nop
 8006668:	e004      	b.n	8006674 <HAL_UART_IRQHandler+0x2ec>
      return;
 800666a:	bf00      	nop
 800666c:	e002      	b.n	8006674 <HAL_UART_IRQHandler+0x2ec>
    return;
 800666e:	bf00      	nop
 8006670:	e000      	b.n	8006674 <HAL_UART_IRQHandler+0x2ec>
    return;
 8006672:	bf00      	nop
  }
}
 8006674:	3720      	adds	r7, #32
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	10000001 	.word	0x10000001
 8006680:	04000120 	.word	0x04000120
 8006684:	08006f13 	.word	0x08006f13

08006688 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066b0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80066b4:	b088      	sub	sp, #32
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689a      	ldr	r2, [r3, #8]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	431a      	orrs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	431a      	orrs	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066da:	69fa      	ldr	r2, [r7, #28]
 80066dc:	4313      	orrs	r3, r2
 80066de:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	4ba4      	ldr	r3, [pc, #656]	; (8006978 <UART_SetConfig+0x2c8>)
 80066e8:	4013      	ands	r3, r2
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	6812      	ldr	r2, [r2, #0]
 80066ee:	69f9      	ldr	r1, [r7, #28]
 80066f0:	430b      	orrs	r3, r1
 80066f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a99      	ldr	r2, [pc, #612]	; (800697c <UART_SetConfig+0x2cc>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d004      	beq.n	8006724 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	69fa      	ldr	r2, [r7, #28]
 8006720:	4313      	orrs	r3, r2
 8006722:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800672e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	6812      	ldr	r2, [r2, #0]
 8006736:	69f9      	ldr	r1, [r7, #28]
 8006738:	430b      	orrs	r3, r1
 800673a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006742:	f023 010f 	bic.w	r1, r3, #15
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a8a      	ldr	r2, [pc, #552]	; (8006980 <UART_SetConfig+0x2d0>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d121      	bne.n	80067a0 <UART_SetConfig+0xf0>
 800675c:	2003      	movs	r0, #3
 800675e:	f7ff fbc7 	bl	8005ef0 <LL_RCC_GetUSARTClockSource>
 8006762:	4603      	mov	r3, r0
 8006764:	2b03      	cmp	r3, #3
 8006766:	d817      	bhi.n	8006798 <UART_SetConfig+0xe8>
 8006768:	a201      	add	r2, pc, #4	; (adr r2, 8006770 <UART_SetConfig+0xc0>)
 800676a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676e:	bf00      	nop
 8006770:	08006781 	.word	0x08006781
 8006774:	0800678d 	.word	0x0800678d
 8006778:	08006787 	.word	0x08006787
 800677c:	08006793 	.word	0x08006793
 8006780:	2301      	movs	r3, #1
 8006782:	76fb      	strb	r3, [r7, #27]
 8006784:	e038      	b.n	80067f8 <UART_SetConfig+0x148>
 8006786:	2302      	movs	r3, #2
 8006788:	76fb      	strb	r3, [r7, #27]
 800678a:	e035      	b.n	80067f8 <UART_SetConfig+0x148>
 800678c:	2304      	movs	r3, #4
 800678e:	76fb      	strb	r3, [r7, #27]
 8006790:	e032      	b.n	80067f8 <UART_SetConfig+0x148>
 8006792:	2308      	movs	r3, #8
 8006794:	76fb      	strb	r3, [r7, #27]
 8006796:	e02f      	b.n	80067f8 <UART_SetConfig+0x148>
 8006798:	2310      	movs	r3, #16
 800679a:	76fb      	strb	r3, [r7, #27]
 800679c:	bf00      	nop
 800679e:	e02b      	b.n	80067f8 <UART_SetConfig+0x148>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a75      	ldr	r2, [pc, #468]	; (800697c <UART_SetConfig+0x2cc>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d124      	bne.n	80067f4 <UART_SetConfig+0x144>
 80067aa:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80067ae:	f7ff fbaf 	bl	8005f10 <LL_RCC_GetLPUARTClockSource>
 80067b2:	4603      	mov	r3, r0
 80067b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b8:	d012      	beq.n	80067e0 <UART_SetConfig+0x130>
 80067ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067be:	d802      	bhi.n	80067c6 <UART_SetConfig+0x116>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d007      	beq.n	80067d4 <UART_SetConfig+0x124>
 80067c4:	e012      	b.n	80067ec <UART_SetConfig+0x13c>
 80067c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ca:	d006      	beq.n	80067da <UART_SetConfig+0x12a>
 80067cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067d0:	d009      	beq.n	80067e6 <UART_SetConfig+0x136>
 80067d2:	e00b      	b.n	80067ec <UART_SetConfig+0x13c>
 80067d4:	2300      	movs	r3, #0
 80067d6:	76fb      	strb	r3, [r7, #27]
 80067d8:	e00e      	b.n	80067f8 <UART_SetConfig+0x148>
 80067da:	2302      	movs	r3, #2
 80067dc:	76fb      	strb	r3, [r7, #27]
 80067de:	e00b      	b.n	80067f8 <UART_SetConfig+0x148>
 80067e0:	2304      	movs	r3, #4
 80067e2:	76fb      	strb	r3, [r7, #27]
 80067e4:	e008      	b.n	80067f8 <UART_SetConfig+0x148>
 80067e6:	2308      	movs	r3, #8
 80067e8:	76fb      	strb	r3, [r7, #27]
 80067ea:	e005      	b.n	80067f8 <UART_SetConfig+0x148>
 80067ec:	2310      	movs	r3, #16
 80067ee:	76fb      	strb	r3, [r7, #27]
 80067f0:	bf00      	nop
 80067f2:	e001      	b.n	80067f8 <UART_SetConfig+0x148>
 80067f4:	2310      	movs	r3, #16
 80067f6:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a5f      	ldr	r2, [pc, #380]	; (800697c <UART_SetConfig+0x2cc>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	f040 808e 	bne.w	8006920 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006804:	7efb      	ldrb	r3, [r7, #27]
 8006806:	2b08      	cmp	r3, #8
 8006808:	d823      	bhi.n	8006852 <UART_SetConfig+0x1a2>
 800680a:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <UART_SetConfig+0x160>)
 800680c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006810:	08006835 	.word	0x08006835
 8006814:	08006853 	.word	0x08006853
 8006818:	0800683d 	.word	0x0800683d
 800681c:	08006853 	.word	0x08006853
 8006820:	08006843 	.word	0x08006843
 8006824:	08006853 	.word	0x08006853
 8006828:	08006853 	.word	0x08006853
 800682c:	08006853 	.word	0x08006853
 8006830:	0800684b 	.word	0x0800684b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006834:	f7fe fabc 	bl	8004db0 <HAL_RCC_GetPCLK1Freq>
 8006838:	6178      	str	r0, [r7, #20]
        break;
 800683a:	e00f      	b.n	800685c <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800683c:	4b51      	ldr	r3, [pc, #324]	; (8006984 <UART_SetConfig+0x2d4>)
 800683e:	617b      	str	r3, [r7, #20]
        break;
 8006840:	e00c      	b.n	800685c <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006842:	f7fe fa37 	bl	8004cb4 <HAL_RCC_GetSysClockFreq>
 8006846:	6178      	str	r0, [r7, #20]
        break;
 8006848:	e008      	b.n	800685c <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800684a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800684e:	617b      	str	r3, [r7, #20]
        break;
 8006850:	e004      	b.n	800685c <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	76bb      	strb	r3, [r7, #26]
        break;
 800685a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 811c 	beq.w	8006a9c <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	4a47      	ldr	r2, [pc, #284]	; (8006988 <UART_SetConfig+0x2d8>)
 800686a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800686e:	461a      	mov	r2, r3
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	fbb3 f3f2 	udiv	r3, r3, r2
 8006876:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	4613      	mov	r3, r2
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	4413      	add	r3, r2
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	429a      	cmp	r2, r3
 8006886:	d305      	bcc.n	8006894 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	429a      	cmp	r2, r3
 8006892:	d902      	bls.n	800689a <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	76bb      	strb	r3, [r7, #26]
 8006898:	e100      	b.n	8006a9c <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	4618      	mov	r0, r3
 800689e:	f04f 0100 	mov.w	r1, #0
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	4a38      	ldr	r2, [pc, #224]	; (8006988 <UART_SetConfig+0x2d8>)
 80068a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	f04f 0400 	mov.w	r4, #0
 80068b2:	461a      	mov	r2, r3
 80068b4:	4623      	mov	r3, r4
 80068b6:	f7fa f8e9 	bl	8000a8c <__aeabi_uldivmod>
 80068ba:	4603      	mov	r3, r0
 80068bc:	460c      	mov	r4, r1
 80068be:	4619      	mov	r1, r3
 80068c0:	4622      	mov	r2, r4
 80068c2:	f04f 0300 	mov.w	r3, #0
 80068c6:	f04f 0400 	mov.w	r4, #0
 80068ca:	0214      	lsls	r4, r2, #8
 80068cc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80068d0:	020b      	lsls	r3, r1, #8
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	6852      	ldr	r2, [r2, #4]
 80068d6:	0852      	lsrs	r2, r2, #1
 80068d8:	4611      	mov	r1, r2
 80068da:	f04f 0200 	mov.w	r2, #0
 80068de:	eb13 0b01 	adds.w	fp, r3, r1
 80068e2:	eb44 0c02 	adc.w	ip, r4, r2
 80068e6:	4658      	mov	r0, fp
 80068e8:	4661      	mov	r1, ip
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f04f 0400 	mov.w	r4, #0
 80068f2:	461a      	mov	r2, r3
 80068f4:	4623      	mov	r3, r4
 80068f6:	f7fa f8c9 	bl	8000a8c <__aeabi_uldivmod>
 80068fa:	4603      	mov	r3, r0
 80068fc:	460c      	mov	r4, r1
 80068fe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006906:	d308      	bcc.n	800691a <UART_SetConfig+0x26a>
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800690e:	d204      	bcs.n	800691a <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	60da      	str	r2, [r3, #12]
 8006918:	e0c0      	b.n	8006a9c <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	76bb      	strb	r3, [r7, #26]
 800691e:	e0bd      	b.n	8006a9c <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006928:	d169      	bne.n	80069fe <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800692a:	7efb      	ldrb	r3, [r7, #27]
 800692c:	3b01      	subs	r3, #1
 800692e:	2b07      	cmp	r3, #7
 8006930:	d82c      	bhi.n	800698c <UART_SetConfig+0x2dc>
 8006932:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <UART_SetConfig+0x288>)
 8006934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006938:	08006959 	.word	0x08006959
 800693c:	08006961 	.word	0x08006961
 8006940:	0800698d 	.word	0x0800698d
 8006944:	08006967 	.word	0x08006967
 8006948:	0800698d 	.word	0x0800698d
 800694c:	0800698d 	.word	0x0800698d
 8006950:	0800698d 	.word	0x0800698d
 8006954:	0800696f 	.word	0x0800696f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006958:	f7fe fa40 	bl	8004ddc <HAL_RCC_GetPCLK2Freq>
 800695c:	6178      	str	r0, [r7, #20]
        break;
 800695e:	e01a      	b.n	8006996 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006960:	4b08      	ldr	r3, [pc, #32]	; (8006984 <UART_SetConfig+0x2d4>)
 8006962:	617b      	str	r3, [r7, #20]
        break;
 8006964:	e017      	b.n	8006996 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006966:	f7fe f9a5 	bl	8004cb4 <HAL_RCC_GetSysClockFreq>
 800696a:	6178      	str	r0, [r7, #20]
        break;
 800696c:	e013      	b.n	8006996 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800696e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006972:	617b      	str	r3, [r7, #20]
        break;
 8006974:	e00f      	b.n	8006996 <UART_SetConfig+0x2e6>
 8006976:	bf00      	nop
 8006978:	cfff69f3 	.word	0xcfff69f3
 800697c:	40008000 	.word	0x40008000
 8006980:	40013800 	.word	0x40013800
 8006984:	00f42400 	.word	0x00f42400
 8006988:	08014080 	.word	0x08014080
      default:
        pclk = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	76bb      	strb	r3, [r7, #26]
        break;
 8006994:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d07f      	beq.n	8006a9c <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	4a48      	ldr	r2, [pc, #288]	; (8006ac4 <UART_SetConfig+0x414>)
 80069a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069a6:	461a      	mov	r2, r3
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80069ae:	005a      	lsls	r2, r3, #1
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	085b      	lsrs	r3, r3, #1
 80069b6:	441a      	add	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	2b0f      	cmp	r3, #15
 80069c8:	d916      	bls.n	80069f8 <UART_SetConfig+0x348>
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d0:	d212      	bcs.n	80069f8 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	f023 030f 	bic.w	r3, r3, #15
 80069da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	085b      	lsrs	r3, r3, #1
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f003 0307 	and.w	r3, r3, #7
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	89fb      	ldrh	r3, [r7, #14]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	89fa      	ldrh	r2, [r7, #14]
 80069f4:	60da      	str	r2, [r3, #12]
 80069f6:	e051      	b.n	8006a9c <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	76bb      	strb	r3, [r7, #26]
 80069fc:	e04e      	b.n	8006a9c <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069fe:	7efb      	ldrb	r3, [r7, #27]
 8006a00:	3b01      	subs	r3, #1
 8006a02:	2b07      	cmp	r3, #7
 8006a04:	d821      	bhi.n	8006a4a <UART_SetConfig+0x39a>
 8006a06:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <UART_SetConfig+0x35c>)
 8006a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0c:	08006a2d 	.word	0x08006a2d
 8006a10:	08006a35 	.word	0x08006a35
 8006a14:	08006a4b 	.word	0x08006a4b
 8006a18:	08006a3b 	.word	0x08006a3b
 8006a1c:	08006a4b 	.word	0x08006a4b
 8006a20:	08006a4b 	.word	0x08006a4b
 8006a24:	08006a4b 	.word	0x08006a4b
 8006a28:	08006a43 	.word	0x08006a43
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a2c:	f7fe f9d6 	bl	8004ddc <HAL_RCC_GetPCLK2Freq>
 8006a30:	6178      	str	r0, [r7, #20]
        break;
 8006a32:	e00f      	b.n	8006a54 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a34:	4b24      	ldr	r3, [pc, #144]	; (8006ac8 <UART_SetConfig+0x418>)
 8006a36:	617b      	str	r3, [r7, #20]
        break;
 8006a38:	e00c      	b.n	8006a54 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a3a:	f7fe f93b 	bl	8004cb4 <HAL_RCC_GetSysClockFreq>
 8006a3e:	6178      	str	r0, [r7, #20]
        break;
 8006a40:	e008      	b.n	8006a54 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a46:	617b      	str	r3, [r7, #20]
        break;
 8006a48:	e004      	b.n	8006a54 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	76bb      	strb	r3, [r7, #26]
        break;
 8006a52:	bf00      	nop
    }

    if (pclk != 0U)
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d020      	beq.n	8006a9c <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	4a19      	ldr	r2, [pc, #100]	; (8006ac4 <UART_SetConfig+0x414>)
 8006a60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a64:	461a      	mov	r2, r3
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	085b      	lsrs	r3, r3, #1
 8006a72:	441a      	add	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	2b0f      	cmp	r3, #15
 8006a84:	d908      	bls.n	8006a98 <UART_SetConfig+0x3e8>
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a8c:	d204      	bcs.n	8006a98 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	60da      	str	r2, [r3, #12]
 8006a96:	e001      	b.n	8006a9c <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006ab8:	7ebb      	ldrb	r3, [r7, #26]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3720      	adds	r7, #32
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006ac4:	08014080 	.word	0x08014080
 8006ac8:	00f42400 	.word	0x00f42400

08006acc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00a      	beq.n	8006af6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1c:	f003 0304 	and.w	r3, r3, #4
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00a      	beq.n	8006b3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3e:	f003 0308 	and.w	r3, r3, #8
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00a      	beq.n	8006b5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b60:	f003 0310 	and.w	r3, r3, #16
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00a      	beq.n	8006b7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b82:	f003 0320 	and.w	r3, r3, #32
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d01a      	beq.n	8006be2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bca:	d10a      	bne.n	8006be2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	605a      	str	r2, [r3, #4]
  }
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006c20:	f7fc f9bc 	bl	8002f9c <HAL_GetTick>
 8006c24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0308 	and.w	r3, r3, #8
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d10e      	bne.n	8006c52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f82c 	bl	8006ca0 <UART_WaitOnFlagUntilTimeout>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e022      	b.n	8006c98 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d10e      	bne.n	8006c7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f816 	bl	8006ca0 <UART_WaitOnFlagUntilTimeout>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d001      	beq.n	8006c7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e00c      	b.n	8006c98 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2220      	movs	r2, #32
 8006c82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	603b      	str	r3, [r7, #0]
 8006cac:	4613      	mov	r3, r2
 8006cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cb0:	e062      	b.n	8006d78 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb8:	d05e      	beq.n	8006d78 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cba:	f7fc f96f 	bl	8002f9c <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d302      	bcc.n	8006cd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d11d      	bne.n	8006d0c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006cde:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689a      	ldr	r2, [r3, #8]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0201 	bic.w	r2, r2, #1
 8006cee:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e045      	b.n	8006d98 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0304 	and.w	r3, r3, #4
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d02e      	beq.n	8006d78 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d28:	d126      	bne.n	8006d78 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d32:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d42:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689a      	ldr	r2, [r3, #8]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 0201 	bic.w	r2, r2, #1
 8006d52:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2220      	movs	r2, #32
 8006d68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e00f      	b.n	8006d98 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	69da      	ldr	r2, [r3, #28]
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	4013      	ands	r3, r2
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	bf0c      	ite	eq
 8006d88:	2301      	moveq	r3, #1
 8006d8a:	2300      	movne	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	461a      	mov	r2, r3
 8006d90:	79fb      	ldrb	r3, [r7, #7]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d08d      	beq.n	8006cb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006db6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689a      	ldr	r2, [r3, #8]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006dc6:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006df2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	6812      	ldr	r2, [r2, #0]
 8006dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e02:	f023 0301 	bic.w	r3, r3, #1
 8006e06:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0320 	and.w	r3, r3, #32
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d114      	bne.n	8006e68 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e54:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e64:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e66:	e002      	b.n	8006e6e <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f7fb f995 	bl	8002198 <HAL_UART_TxCpltCallback>
}
 8006e6e:	bf00      	nop
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e82:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f7ff fbff 	bl	8006688 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e8a:	bf00      	nop
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b086      	sub	sp, #24
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ea6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eba:	2b80      	cmp	r3, #128	; 0x80
 8006ebc:	d109      	bne.n	8006ed2 <UART_DMAError+0x40>
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	2b21      	cmp	r3, #33	; 0x21
 8006ec2:	d106      	bne.n	8006ed2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006ecc:	6978      	ldr	r0, [r7, #20]
 8006ece:	f7ff ff67 	bl	8006da0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006edc:	2b40      	cmp	r3, #64	; 0x40
 8006ede:	d109      	bne.n	8006ef4 <UART_DMAError+0x62>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2b22      	cmp	r3, #34	; 0x22
 8006ee4:	d106      	bne.n	8006ef4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006eee:	6978      	ldr	r0, [r7, #20]
 8006ef0:	f7ff ff74 	bl	8006ddc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006efa:	f043 0210 	orr.w	r2, r3, #16
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f04:	6978      	ldr	r0, [r7, #20]
 8006f06:	f7ff fbc9 	bl	800669c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f0a:	bf00      	nop
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b084      	sub	sp, #16
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f7ff fbb3 	bl	800669c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f36:	bf00      	nop
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f4c:	2b21      	cmp	r3, #33	; 0x21
 8006f4e:	d12a      	bne.n	8006fa6 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d110      	bne.n	8006f7e <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f6a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f7a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006f7c:	e013      	b.n	8006fa6 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f82:	781a      	ldrb	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b085      	sub	sp, #20
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fc0:	2b21      	cmp	r3, #33	; 0x21
 8006fc2:	d12f      	bne.n	8007024 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d110      	bne.n	8006ff2 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fde:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fee:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006ff0:	e018      	b.n	8007024 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff6:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	881b      	ldrh	r3, [r3, #0]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007006:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700c:	1c9a      	adds	r2, r3, #2
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007018:	b29b      	uxth	r3, r3
 800701a:	3b01      	subs	r3, #1
 800701c:	b29a      	uxth	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007024:	bf00      	nop
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800703e:	2b21      	cmp	r3, #33	; 0x21
 8007040:	d13d      	bne.n	80070be <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007048:	81fb      	strh	r3, [r7, #14]
 800704a:	e035      	b.n	80070b8 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007052:	b29b      	uxth	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	d111      	bne.n	800707c <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	689a      	ldr	r2, [r3, #8]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007066:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007076:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8007078:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800707a:	e020      	b.n	80070be <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007086:	2b00      	cmp	r3, #0
 8007088:	d013      	beq.n	80070b2 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708e:	781a      	ldrb	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800709a:	1c5a      	adds	r2, r3, #1
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	3b01      	subs	r3, #1
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80070b2:	89fb      	ldrh	r3, [r7, #14]
 80070b4:	3b01      	subs	r3, #1
 80070b6:	81fb      	strh	r3, [r7, #14]
 80070b8:	89fb      	ldrh	r3, [r7, #14]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1c6      	bne.n	800704c <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 80070be:	bf00      	nop
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b085      	sub	sp, #20
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070d8:	2b21      	cmp	r3, #33	; 0x21
 80070da:	d142      	bne.n	8007162 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80070e2:	81fb      	strh	r3, [r7, #14]
 80070e4:	e03a      	b.n	800715c <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d111      	bne.n	8007116 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007100:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007110:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8007112:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8007114:	e025      	b.n	8007162 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007120:	2b00      	cmp	r3, #0
 8007122:	d018      	beq.n	8007156 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007128:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007138:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800713e:	1c9a      	adds	r2, r3, #2
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800714a:	b29b      	uxth	r3, r3
 800714c:	3b01      	subs	r3, #1
 800714e:	b29a      	uxth	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007156:	89fb      	ldrh	r3, [r7, #14]
 8007158:	3b01      	subs	r3, #1
 800715a:	81fb      	strh	r3, [r7, #14]
 800715c:	89fb      	ldrh	r3, [r7, #14]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1c1      	bne.n	80070e6 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8007162:	bf00      	nop
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b082      	sub	sp, #8
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007184:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2220      	movs	r2, #32
 800718a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7fa ffff 	bl	8002198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800719a:	bf00      	nop
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b084      	sub	sp, #16
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80071b0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071b8:	2b22      	cmp	r3, #34	; 0x22
 80071ba:	d13b      	bne.n	8007234 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80071c4:	89bb      	ldrh	r3, [r7, #12]
 80071c6:	b2d9      	uxtb	r1, r3
 80071c8:	89fb      	ldrh	r3, [r7, #14]
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d0:	400a      	ands	r2, r1
 80071d2:	b2d2      	uxtb	r2, r2
 80071d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071da:	1c5a      	adds	r2, r3, #1
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	3b01      	subs	r3, #1
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d122      	bne.n	8007244 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800720c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	689a      	ldr	r2, [r3, #8]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f022 0201 	bic.w	r2, r2, #1
 800721c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2220      	movs	r2, #32
 8007222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f7fa ff87 	bl	8002140 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007232:	e007      	b.n	8007244 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	699a      	ldr	r2, [r3, #24]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0208 	orr.w	r2, r2, #8
 8007242:	619a      	str	r2, [r3, #24]
}
 8007244:	bf00      	nop
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800725a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007262:	2b22      	cmp	r3, #34	; 0x22
 8007264:	d13b      	bne.n	80072de <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007272:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007274:	89ba      	ldrh	r2, [r7, #12]
 8007276:	89fb      	ldrh	r3, [r7, #14]
 8007278:	4013      	ands	r3, r2
 800727a:	b29a      	uxth	r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007284:	1c9a      	adds	r2, r3, #2
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007290:	b29b      	uxth	r3, r3
 8007292:	3b01      	subs	r3, #1
 8007294:	b29a      	uxth	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d122      	bne.n	80072ee <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80072b6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689a      	ldr	r2, [r3, #8]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0201 	bic.w	r2, r2, #1
 80072c6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7fa ff32 	bl	8002140 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072dc:	e007      	b.n	80072ee <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	699a      	ldr	r2, [r3, #24]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f042 0208 	orr.w	r2, r2, #8
 80072ec:	619a      	str	r2, [r3, #24]
}
 80072ee:	bf00      	nop
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007306:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800730e:	2b22      	cmp	r3, #34	; 0x22
 8007310:	d168      	bne.n	80073e4 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007318:	81fb      	strh	r3, [r7, #14]
 800731a:	e03f      	b.n	800739c <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007324:	893b      	ldrh	r3, [r7, #8]
 8007326:	b2d9      	uxtb	r1, r3
 8007328:	89bb      	ldrh	r3, [r7, #12]
 800732a:	b2da      	uxtb	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007330:	400a      	ands	r2, r1
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007346:	b29b      	uxth	r3, r3
 8007348:	3b01      	subs	r3, #1
 800734a:	b29a      	uxth	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007358:	b29b      	uxth	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d11b      	bne.n	8007396 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800736c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	6812      	ldr	r2, [r2, #0]
 8007378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800737c:	f023 0301 	bic.w	r3, r3, #1
 8007380:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2220      	movs	r2, #32
 8007386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7fa fed5 	bl	8002140 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8007396:	89fb      	ldrh	r3, [r7, #14]
 8007398:	3b01      	subs	r3, #1
 800739a:	81fb      	strh	r3, [r7, #14]
 800739c:	89fb      	ldrh	r3, [r7, #14]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1bc      	bne.n	800731c <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073a8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80073aa:	897b      	ldrh	r3, [r7, #10]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d021      	beq.n	80073f4 <UART_RxISR_8BIT_FIFOEN+0xfc>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80073b6:	897a      	ldrh	r2, [r7, #10]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d21b      	bcs.n	80073f4 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689a      	ldr	r2, [r3, #8]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80073ca:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a0b      	ldr	r2, [pc, #44]	; (80073fc <UART_RxISR_8BIT_FIFOEN+0x104>)
 80073d0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f042 0220 	orr.w	r2, r2, #32
 80073e0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073e2:	e007      	b.n	80073f4 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699a      	ldr	r2, [r3, #24]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0208 	orr.w	r2, r2, #8
 80073f2:	619a      	str	r2, [r3, #24]
}
 80073f4:	bf00      	nop
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	080071a3 	.word	0x080071a3

08007400 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800740e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007416:	2b22      	cmp	r3, #34	; 0x22
 8007418:	d168      	bne.n	80074ec <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007420:	82fb      	strh	r3, [r7, #22]
 8007422:	e03f      	b.n	80074a4 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742a:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007430:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8007432:	8a3a      	ldrh	r2, [r7, #16]
 8007434:	8abb      	ldrh	r3, [r7, #20]
 8007436:	4013      	ands	r3, r2
 8007438:	b29a      	uxth	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007442:	1c9a      	adds	r2, r3, #2
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800744e:	b29b      	uxth	r3, r3
 8007450:	3b01      	subs	r3, #1
 8007452:	b29a      	uxth	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007460:	b29b      	uxth	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d11b      	bne.n	800749e <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007474:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6812      	ldr	r2, [r2, #0]
 8007480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007484:	f023 0301 	bic.w	r3, r3, #1
 8007488:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2220      	movs	r2, #32
 800748e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7fa fe51 	bl	8002140 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800749e:	8afb      	ldrh	r3, [r7, #22]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	82fb      	strh	r3, [r7, #22]
 80074a4:	8afb      	ldrh	r3, [r7, #22]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1bc      	bne.n	8007424 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074b0:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80074b2:	8a7b      	ldrh	r3, [r7, #18]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d021      	beq.n	80074fc <UART_RxISR_16BIT_FIFOEN+0xfc>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80074be:	8a7a      	ldrh	r2, [r7, #18]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d21b      	bcs.n	80074fc <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	689a      	ldr	r2, [r3, #8]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80074d2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a0b      	ldr	r2, [pc, #44]	; (8007504 <UART_RxISR_16BIT_FIFOEN+0x104>)
 80074d8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f042 0220 	orr.w	r2, r2, #32
 80074e8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074ea:	e007      	b.n	80074fc <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	699a      	ldr	r2, [r3, #24]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f042 0208 	orr.w	r2, r2, #8
 80074fa:	619a      	str	r2, [r3, #24]
}
 80074fc:	bf00      	nop
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	0800724d 	.word	0x0800724d

08007508 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007552:	2b01      	cmp	r3, #1
 8007554:	d101      	bne.n	800755a <HAL_UARTEx_DisableFifoMode+0x16>
 8007556:	2302      	movs	r3, #2
 8007558:	e027      	b.n	80075aa <HAL_UARTEx_DisableFifoMode+0x66>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2224      	movs	r2, #36	; 0x24
 8007566:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 0201 	bic.w	r2, r2, #1
 8007580:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007588:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2220      	movs	r2, #32
 800759c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b084      	sub	sp, #16
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d101      	bne.n	80075ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80075ca:	2302      	movs	r3, #2
 80075cc:	e02d      	b.n	800762a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2224      	movs	r2, #36	; 0x24
 80075da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 0201 	bic.w	r2, r2, #1
 80075f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f850 	bl	80076b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2220      	movs	r2, #32
 800761c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007642:	2b01      	cmp	r3, #1
 8007644:	d101      	bne.n	800764a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007646:	2302      	movs	r3, #2
 8007648:	e02d      	b.n	80076a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2224      	movs	r2, #36	; 0x24
 8007656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0201 	bic.w	r2, r2, #1
 8007670:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f812 	bl	80076b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2220      	movs	r2, #32
 8007698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b089      	sub	sp, #36	; 0x24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80076b8:	4a2f      	ldr	r2, [pc, #188]	; (8007778 <UARTEx_SetNbDataToProcess+0xc8>)
 80076ba:	f107 0314 	add.w	r3, r7, #20
 80076be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80076c2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80076c6:	4a2d      	ldr	r2, [pc, #180]	; (800777c <UARTEx_SetNbDataToProcess+0xcc>)
 80076c8:	f107 030c 	add.w	r3, r7, #12
 80076cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80076d0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d108      	bne.n	80076ee <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80076ec:	e03d      	b.n	800776a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80076ee:	2308      	movs	r3, #8
 80076f0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80076f2:	2308      	movs	r3, #8
 80076f4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	0e5b      	lsrs	r3, r3, #25
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	f003 0307 	and.w	r3, r3, #7
 8007704:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	0f5b      	lsrs	r3, r3, #29
 800770e:	b2db      	uxtb	r3, r3
 8007710:	f003 0307 	and.w	r3, r3, #7
 8007714:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007716:	7fbb      	ldrb	r3, [r7, #30]
 8007718:	7f3a      	ldrb	r2, [r7, #28]
 800771a:	f107 0120 	add.w	r1, r7, #32
 800771e:	440a      	add	r2, r1
 8007720:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007724:	fb02 f303 	mul.w	r3, r2, r3
 8007728:	7f3a      	ldrb	r2, [r7, #28]
 800772a:	f107 0120 	add.w	r1, r7, #32
 800772e:	440a      	add	r2, r1
 8007730:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007734:	fb93 f3f2 	sdiv	r3, r3, r2
 8007738:	b29a      	uxth	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007740:	7ffb      	ldrb	r3, [r7, #31]
 8007742:	7f7a      	ldrb	r2, [r7, #29]
 8007744:	f107 0120 	add.w	r1, r7, #32
 8007748:	440a      	add	r2, r1
 800774a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800774e:	fb02 f303 	mul.w	r3, r2, r3
 8007752:	7f7a      	ldrb	r2, [r7, #29]
 8007754:	f107 0120 	add.w	r1, r7, #32
 8007758:	440a      	add	r2, r1
 800775a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800775e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007762:	b29a      	uxth	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800776a:	bf00      	nop
 800776c:	3724      	adds	r7, #36	; 0x24
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	080130a8 	.word	0x080130a8
 800777c:	080130b0 	.word	0x080130b0

08007780 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b088      	sub	sp, #32
 8007784:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007786:	2300      	movs	r3, #0
 8007788:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800778a:	f107 0308 	add.w	r3, r7, #8
 800778e:	2218      	movs	r2, #24
 8007790:	2100      	movs	r1, #0
 8007792:	4618      	mov	r0, r3
 8007794:	f001 fb2b 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 8007798:	233f      	movs	r3, #63	; 0x3f
 800779a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800779c:	2381      	movs	r3, #129	; 0x81
 800779e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80077a0:	1dfb      	adds	r3, r7, #7
 80077a2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80077a4:	2301      	movs	r3, #1
 80077a6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80077a8:	f107 0308 	add.w	r3, r7, #8
 80077ac:	2100      	movs	r1, #0
 80077ae:	4618      	mov	r0, r3
 80077b0:	f001 ff24 	bl	80095fc <hci_send_req>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	da01      	bge.n	80077be <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80077ba:	23ff      	movs	r3, #255	; 0xff
 80077bc:	e000      	b.n	80077c0 <aci_gap_set_non_discoverable+0x40>
  return status;
 80077be:	79fb      	ldrb	r3, [r7, #7]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3720      	adds	r7, #32
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80077c8:	b5b0      	push	{r4, r5, r7, lr}
 80077ca:	b0ce      	sub	sp, #312	; 0x138
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	4605      	mov	r5, r0
 80077d0:	460c      	mov	r4, r1
 80077d2:	4610      	mov	r0, r2
 80077d4:	4619      	mov	r1, r3
 80077d6:	1dfb      	adds	r3, r7, #7
 80077d8:	462a      	mov	r2, r5
 80077da:	701a      	strb	r2, [r3, #0]
 80077dc:	1d3b      	adds	r3, r7, #4
 80077de:	4622      	mov	r2, r4
 80077e0:	801a      	strh	r2, [r3, #0]
 80077e2:	1cbb      	adds	r3, r7, #2
 80077e4:	4602      	mov	r2, r0
 80077e6:	801a      	strh	r2, [r3, #0]
 80077e8:	1dbb      	adds	r3, r7, #6
 80077ea:	460a      	mov	r2, r1
 80077ec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80077ee:	f107 0310 	add.w	r3, r7, #16
 80077f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80077f6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80077fa:	3308      	adds	r3, #8
 80077fc:	f107 0210 	add.w	r2, r7, #16
 8007800:	4413      	add	r3, r2
 8007802:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8007806:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800780a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800780e:	4413      	add	r3, r2
 8007810:	3309      	adds	r3, #9
 8007812:	f107 0210 	add.w	r2, r7, #16
 8007816:	4413      	add	r3, r2
 8007818:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800781c:	f107 030f 	add.w	r3, r7, #15
 8007820:	2200      	movs	r2, #0
 8007822:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007824:	2300      	movs	r3, #0
 8007826:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800782a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800782e:	1dfa      	adds	r2, r7, #7
 8007830:	7812      	ldrb	r2, [r2, #0]
 8007832:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007834:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007838:	3301      	adds	r3, #1
 800783a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800783e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007842:	1d3a      	adds	r2, r7, #4
 8007844:	8812      	ldrh	r2, [r2, #0]
 8007846:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800784a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800784e:	3302      	adds	r3, #2
 8007850:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8007854:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007858:	1cba      	adds	r2, r7, #2
 800785a:	8812      	ldrh	r2, [r2, #0]
 800785c:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007860:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007864:	3302      	adds	r3, #2
 8007866:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800786a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800786e:	1dba      	adds	r2, r7, #6
 8007870:	7812      	ldrb	r2, [r2, #0]
 8007872:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007874:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007878:	3301      	adds	r3, #1
 800787a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800787e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007882:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007886:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007888:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800788c:	3301      	adds	r3, #1
 800788e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007892:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007896:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800789a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800789c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078a0:	3301      	adds	r3, #1
 80078a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80078a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80078aa:	3308      	adds	r3, #8
 80078ac:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80078b0:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80078b4:	4618      	mov	r0, r3
 80078b6:	f001 fa8a 	bl	8008dce <Osal_MemCpy>
    index_input += Local_Name_Length;
 80078ba:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80078be:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80078c2:	4413      	add	r3, r2
 80078c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80078c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80078cc:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80078d0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80078d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078d6:	3301      	adds	r3, #1
 80078d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80078dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80078e0:	3301      	adds	r3, #1
 80078e2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80078e6:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80078ea:	4618      	mov	r0, r3
 80078ec:	f001 fa6f 	bl	8008dce <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80078f0:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80078f4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80078f8:	4413      	add	r3, r2
 80078fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80078fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007902:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8007906:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007908:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800790c:	3302      	adds	r3, #2
 800790e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8007912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007916:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800791a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800791c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007920:	3302      	adds	r3, #2
 8007922:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007926:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800792a:	2218      	movs	r2, #24
 800792c:	2100      	movs	r1, #0
 800792e:	4618      	mov	r0, r3
 8007930:	f001 fa5d 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 8007934:	233f      	movs	r3, #63	; 0x3f
 8007936:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800793a:	2383      	movs	r3, #131	; 0x83
 800793c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007940:	f107 0310 	add.w	r3, r7, #16
 8007944:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007948:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800794c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007950:	f107 030f 	add.w	r3, r7, #15
 8007954:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007958:	2301      	movs	r3, #1
 800795a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800795e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007962:	2100      	movs	r1, #0
 8007964:	4618      	mov	r0, r3
 8007966:	f001 fe49 	bl	80095fc <hci_send_req>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	da01      	bge.n	8007974 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8007970:	23ff      	movs	r3, #255	; 0xff
 8007972:	e002      	b.n	800797a <aci_gap_set_discoverable+0x1b2>
  return status;
 8007974:	f107 030f 	add.w	r3, r7, #15
 8007978:	781b      	ldrb	r3, [r3, #0]
}
 800797a:	4618      	mov	r0, r3
 800797c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007980:	46bd      	mov	sp, r7
 8007982:	bdb0      	pop	{r4, r5, r7, pc}

08007984 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b0cc      	sub	sp, #304	; 0x130
 8007988:	af00      	add	r7, sp, #0
 800798a:	4602      	mov	r2, r0
 800798c:	1dfb      	adds	r3, r7, #7
 800798e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007990:	f107 0310 	add.w	r3, r7, #16
 8007994:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007998:	f107 030f 	add.w	r3, r7, #15
 800799c:	2200      	movs	r2, #0
 800799e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80079a0:	2300      	movs	r3, #0
 80079a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80079a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079aa:	1dfa      	adds	r2, r7, #7
 80079ac:	7812      	ldrb	r2, [r2, #0]
 80079ae:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80079b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079b4:	3301      	adds	r3, #1
 80079b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80079ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079be:	2218      	movs	r2, #24
 80079c0:	2100      	movs	r1, #0
 80079c2:	4618      	mov	r0, r3
 80079c4:	f001 fa13 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 80079c8:	233f      	movs	r3, #63	; 0x3f
 80079ca:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80079ce:	2385      	movs	r3, #133	; 0x85
 80079d0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80079d4:	f107 0310 	add.w	r3, r7, #16
 80079d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80079dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80079e4:	f107 030f 	add.w	r3, r7, #15
 80079e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80079ec:	2301      	movs	r3, #1
 80079ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079f6:	2100      	movs	r1, #0
 80079f8:	4618      	mov	r0, r3
 80079fa:	f001 fdff 	bl	80095fc <hci_send_req>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	da01      	bge.n	8007a08 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8007a04:	23ff      	movs	r3, #255	; 0xff
 8007a06:	e002      	b.n	8007a0e <aci_gap_set_io_capability+0x8a>
  return status;
 8007a08:	f107 030f 	add.w	r3, r7, #15
 8007a0c:	781b      	ldrb	r3, [r3, #0]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007a18:	b5b0      	push	{r4, r5, r7, lr}
 8007a1a:	b0cc      	sub	sp, #304	; 0x130
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	4605      	mov	r5, r0
 8007a20:	460c      	mov	r4, r1
 8007a22:	4610      	mov	r0, r2
 8007a24:	4619      	mov	r1, r3
 8007a26:	1dfb      	adds	r3, r7, #7
 8007a28:	462a      	mov	r2, r5
 8007a2a:	701a      	strb	r2, [r3, #0]
 8007a2c:	1dbb      	adds	r3, r7, #6
 8007a2e:	4622      	mov	r2, r4
 8007a30:	701a      	strb	r2, [r3, #0]
 8007a32:	1d7b      	adds	r3, r7, #5
 8007a34:	4602      	mov	r2, r0
 8007a36:	701a      	strb	r2, [r3, #0]
 8007a38:	1d3b      	adds	r3, r7, #4
 8007a3a:	460a      	mov	r2, r1
 8007a3c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007a3e:	f107 0310 	add.w	r3, r7, #16
 8007a42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007a46:	f107 030f 	add.w	r3, r7, #15
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a58:	1dfa      	adds	r2, r7, #7
 8007a5a:	7812      	ldrb	r2, [r2, #0]
 8007a5c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007a5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a62:	3301      	adds	r3, #1
 8007a64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a6c:	1dba      	adds	r2, r7, #6
 8007a6e:	7812      	ldrb	r2, [r2, #0]
 8007a70:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007a72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a76:	3301      	adds	r3, #1
 8007a78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007a7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a80:	1d7a      	adds	r2, r7, #5
 8007a82:	7812      	ldrb	r2, [r2, #0]
 8007a84:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007a86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a94:	1d3a      	adds	r2, r7, #4
 8007a96:	7812      	ldrb	r2, [r2, #0]
 8007a98:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007a9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aa8:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007aac:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007aae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8007ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007abc:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007ac0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007ac2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ad0:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007ad4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007ad6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ada:	3301      	adds	r3, #1
 8007adc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ae4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007ae8:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007aec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007af0:	3304      	adds	r3, #4
 8007af2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007afa:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007afe:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007b00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b04:	3301      	adds	r3, #1
 8007b06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b0e:	2218      	movs	r2, #24
 8007b10:	2100      	movs	r1, #0
 8007b12:	4618      	mov	r0, r3
 8007b14:	f001 f96b 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b18:	233f      	movs	r3, #63	; 0x3f
 8007b1a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007b1e:	2386      	movs	r3, #134	; 0x86
 8007b20:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007b24:	f107 0310 	add.w	r3, r7, #16
 8007b28:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007b2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007b34:	f107 030f 	add.w	r3, r7, #15
 8007b38:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b46:	2100      	movs	r1, #0
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f001 fd57 	bl	80095fc <hci_send_req>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	da01      	bge.n	8007b58 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8007b54:	23ff      	movs	r3, #255	; 0xff
 8007b56:	e002      	b.n	8007b5e <aci_gap_set_authentication_requirement+0x146>
  return status;
 8007b58:	f107 030f 	add.w	r3, r7, #15
 8007b5c:	781b      	ldrb	r3, [r3, #0]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bdb0      	pop	{r4, r5, r7, pc}

08007b68 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b0cc      	sub	sp, #304	; 0x130
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4602      	mov	r2, r0
 8007b70:	463b      	mov	r3, r7
 8007b72:	6019      	str	r1, [r3, #0]
 8007b74:	1dbb      	adds	r3, r7, #6
 8007b76:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8007b78:	f107 0310 	add.w	r3, r7, #16
 8007b7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007b80:	f107 030f 	add.w	r3, r7, #15
 8007b84:	2200      	movs	r2, #0
 8007b86:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007b8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b92:	1dba      	adds	r2, r7, #6
 8007b94:	8812      	ldrh	r2, [r2, #0]
 8007b96:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007b98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b9c:	3302      	adds	r3, #2
 8007b9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8007ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba6:	463a      	mov	r2, r7
 8007ba8:	6812      	ldr	r2, [r2, #0]
 8007baa:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8007bae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007bb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bbc:	2218      	movs	r2, #24
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f001 f914 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 8007bc6:	233f      	movs	r3, #63	; 0x3f
 8007bc8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8007bcc:	2388      	movs	r3, #136	; 0x88
 8007bce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007bd2:	f107 0310 	add.w	r3, r7, #16
 8007bd6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007bda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007be2:	f107 030f 	add.w	r3, r7, #15
 8007be6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007bea:	2301      	movs	r3, #1
 8007bec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007bf0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f001 fd00 	bl	80095fc <hci_send_req>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	da01      	bge.n	8007c06 <aci_gap_pass_key_resp+0x9e>
    return BLE_STATUS_TIMEOUT;
 8007c02:	23ff      	movs	r3, #255	; 0xff
 8007c04:	e002      	b.n	8007c0c <aci_gap_pass_key_resp+0xa4>
  return status;
 8007c06:	f107 030f 	add.w	r3, r7, #15
 8007c0a:	781b      	ldrb	r3, [r3, #0]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007c16:	b590      	push	{r4, r7, lr}
 8007c18:	b0cd      	sub	sp, #308	; 0x134
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	4608      	mov	r0, r1
 8007c20:	4611      	mov	r1, r2
 8007c22:	463a      	mov	r2, r7
 8007c24:	6013      	str	r3, [r2, #0]
 8007c26:	1dfb      	adds	r3, r7, #7
 8007c28:	4622      	mov	r2, r4
 8007c2a:	701a      	strb	r2, [r3, #0]
 8007c2c:	1dbb      	adds	r3, r7, #6
 8007c2e:	4602      	mov	r2, r0
 8007c30:	701a      	strb	r2, [r3, #0]
 8007c32:	1d7b      	adds	r3, r7, #5
 8007c34:	460a      	mov	r2, r1
 8007c36:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007c38:	f107 0310 	add.w	r3, r7, #16
 8007c3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007c40:	f107 0308 	add.w	r3, r7, #8
 8007c44:	2207      	movs	r2, #7
 8007c46:	2100      	movs	r1, #0
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f001 f8d0 	bl	8008dee <Osal_MemSet>
  int index_input = 0;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c58:	1dfa      	adds	r2, r7, #7
 8007c5a:	7812      	ldrb	r2, [r2, #0]
 8007c5c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007c5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c62:	3301      	adds	r3, #1
 8007c64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8007c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c6c:	1dba      	adds	r2, r7, #6
 8007c6e:	7812      	ldrb	r2, [r2, #0]
 8007c70:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007c72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c76:	3301      	adds	r3, #1
 8007c78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c80:	1d7a      	adds	r2, r7, #5
 8007c82:	7812      	ldrb	r2, [r2, #0]
 8007c84:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007c86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c94:	2218      	movs	r2, #24
 8007c96:	2100      	movs	r1, #0
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f001 f8a8 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c9e:	233f      	movs	r3, #63	; 0x3f
 8007ca0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8007ca4:	238a      	movs	r3, #138	; 0x8a
 8007ca6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007caa:	f107 0310 	add.w	r3, r7, #16
 8007cae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007cb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007cba:	f107 0308 	add.w	r3, r7, #8
 8007cbe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007cc2:	2307      	movs	r3, #7
 8007cc4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007cc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ccc:	2100      	movs	r1, #0
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f001 fc94 	bl	80095fc <hci_send_req>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	da01      	bge.n	8007cde <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8007cda:	23ff      	movs	r3, #255	; 0xff
 8007cdc:	e021      	b.n	8007d22 <aci_gap_init+0x10c>
  if ( resp.Status )
 8007cde:	f107 0308 	add.w	r3, r7, #8
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d003      	beq.n	8007cf0 <aci_gap_init+0xda>
    return resp.Status;
 8007ce8:	f107 0308 	add.w	r3, r7, #8
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	e018      	b.n	8007d22 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8007cf0:	f107 0308 	add.w	r3, r7, #8
 8007cf4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	463b      	mov	r3, r7
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007d00:	f107 0308 	add.w	r3, r7, #8
 8007d04:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007d0e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007d10:	f107 0308 	add.w	r3, r7, #8
 8007d14:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007d1e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd90      	pop	{r4, r7, pc}

08007d2c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b0cc      	sub	sp, #304	; 0x130
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	4602      	mov	r2, r0
 8007d34:	463b      	mov	r3, r7
 8007d36:	6019      	str	r1, [r3, #0]
 8007d38:	1dfb      	adds	r3, r7, #7
 8007d3a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007d3c:	f107 0310 	add.w	r3, r7, #16
 8007d40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007d44:	f107 030f 	add.w	r3, r7, #15
 8007d48:	2200      	movs	r2, #0
 8007d4a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8007d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d56:	1dfa      	adds	r2, r7, #7
 8007d58:	7812      	ldrb	r2, [r2, #0]
 8007d5a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007d5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d60:	3301      	adds	r3, #1
 8007d62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8007d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d6a:	1c58      	adds	r0, r3, #1
 8007d6c:	1dfb      	adds	r3, r7, #7
 8007d6e:	781a      	ldrb	r2, [r3, #0]
 8007d70:	463b      	mov	r3, r7
 8007d72:	6819      	ldr	r1, [r3, #0]
 8007d74:	f001 f82b 	bl	8008dce <Osal_MemCpy>
  index_input += AdvDataLen;
 8007d78:	1dfb      	adds	r3, r7, #7
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007d80:	4413      	add	r3, r2
 8007d82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d8a:	2218      	movs	r2, #24
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f001 f82d 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d94:	233f      	movs	r3, #63	; 0x3f
 8007d96:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007d9a:	238e      	movs	r3, #142	; 0x8e
 8007d9c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007da0:	f107 0310 	add.w	r3, r7, #16
 8007da4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007da8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007db0:	f107 030f 	add.w	r3, r7, #15
 8007db4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007db8:	2301      	movs	r3, #1
 8007dba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007dbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f001 fc19 	bl	80095fc <hci_send_req>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	da01      	bge.n	8007dd4 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8007dd0:	23ff      	movs	r3, #255	; 0xff
 8007dd2:	e002      	b.n	8007dda <aci_gap_update_adv_data+0xae>
  return status;
 8007dd4:	f107 030f 	add.w	r3, r7, #15
 8007dd8:	781b      	ldrb	r3, [r3, #0]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b088      	sub	sp, #32
 8007de8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007dea:	2300      	movs	r3, #0
 8007dec:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007dee:	f107 0308 	add.w	r3, r7, #8
 8007df2:	2218      	movs	r2, #24
 8007df4:	2100      	movs	r1, #0
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 fff9 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 8007dfc:	233f      	movs	r3, #63	; 0x3f
 8007dfe:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007e00:	2392      	movs	r3, #146	; 0x92
 8007e02:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007e04:	1dfb      	adds	r3, r7, #7
 8007e06:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e0c:	f107 0308 	add.w	r3, r7, #8
 8007e10:	2100      	movs	r1, #0
 8007e12:	4618      	mov	r0, r3
 8007e14:	f001 fbf2 	bl	80095fc <hci_send_req>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	da01      	bge.n	8007e22 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007e1e:	23ff      	movs	r3, #255	; 0xff
 8007e20:	e000      	b.n	8007e24 <aci_gap_configure_whitelist+0x40>
  return status;
 8007e22:	79fb      	ldrb	r3, [r7, #7]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3720      	adds	r7, #32
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <aci_gap_clear_security_db>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_clear_security_db( void )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b088      	sub	sp, #32
 8007e30:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007e32:	2300      	movs	r3, #0
 8007e34:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e36:	f107 0308 	add.w	r3, r7, #8
 8007e3a:	2218      	movs	r2, #24
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 ffd5 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e44:	233f      	movs	r3, #63	; 0x3f
 8007e46:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x094;
 8007e48:	2394      	movs	r3, #148	; 0x94
 8007e4a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007e4c:	1dfb      	adds	r3, r7, #7
 8007e4e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007e50:	2301      	movs	r3, #1
 8007e52:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e54:	f107 0308 	add.w	r3, r7, #8
 8007e58:	2100      	movs	r1, #0
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f001 fbce 	bl	80095fc <hci_send_req>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	da01      	bge.n	8007e6a <aci_gap_clear_security_db+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007e66:	23ff      	movs	r3, #255	; 0xff
 8007e68:	e000      	b.n	8007e6c <aci_gap_clear_security_db+0x40>
  return status;
 8007e6a:	79fb      	ldrb	r3, [r7, #7]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3720      	adds	r7, #32
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <aci_gap_terminate_gap_proc>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_terminate_gap_proc( uint8_t Procedure_Code )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b0cc      	sub	sp, #304	; 0x130
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	1dfb      	adds	r3, r7, #7
 8007e7e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 8007e80:	f107 0310 	add.w	r3, r7, #16
 8007e84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007e88:	f107 030f 	add.w	r3, r7, #15
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e90:	2300      	movs	r3, #0
 8007e92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Procedure_Code = Procedure_Code;
 8007e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e9a:	1dfa      	adds	r2, r7, #7
 8007e9c:	7812      	ldrb	r2, [r2, #0]
 8007e9e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007ea0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007eaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007eae:	2218      	movs	r2, #24
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 ff9b 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 8007eb8:	233f      	movs	r3, #63	; 0x3f
 8007eba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 8007ebe:	239d      	movs	r3, #157	; 0x9d
 8007ec0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007ec4:	f107 0310 	add.w	r3, r7, #16
 8007ec8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007ecc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ed0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007ed4:	f107 030f 	add.w	r3, r7, #15
 8007ed8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007edc:	2301      	movs	r3, #1
 8007ede:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ee2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f001 fb87 	bl	80095fc <hci_send_req>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	da01      	bge.n	8007ef8 <aci_gap_terminate_gap_proc+0x84>
    return BLE_STATUS_TIMEOUT;
 8007ef4:	23ff      	movs	r3, #255	; 0xff
 8007ef6:	e002      	b.n	8007efe <aci_gap_terminate_gap_proc+0x8a>
  return status;
 8007ef8:	f107 030f 	add.w	r3, r7, #15
 8007efc:	781b      	ldrb	r3, [r3, #0]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b0cc      	sub	sp, #304	; 0x130
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	4602      	mov	r2, r0
 8007f10:	1dbb      	adds	r3, r7, #6
 8007f12:	801a      	strh	r2, [r3, #0]
 8007f14:	1d7b      	adds	r3, r7, #5
 8007f16:	460a      	mov	r2, r1
 8007f18:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8007f1a:	f107 0310 	add.w	r3, r7, #16
 8007f1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007f22:	f107 030f 	add.w	r3, r7, #15
 8007f26:	2200      	movs	r2, #0
 8007f28:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f34:	1dba      	adds	r2, r7, #6
 8007f36:	8812      	ldrh	r2, [r2, #0]
 8007f38:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007f3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f3e:	3302      	adds	r3, #2
 8007f40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8007f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f48:	1d7a      	adds	r2, r7, #5
 8007f4a:	7812      	ldrb	r2, [r2, #0]
 8007f4c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007f4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f52:	3301      	adds	r3, #1
 8007f54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f5c:	2218      	movs	r2, #24
 8007f5e:	2100      	movs	r1, #0
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 ff44 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f66:	233f      	movs	r3, #63	; 0x3f
 8007f68:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8007f6c:	23a5      	movs	r3, #165	; 0xa5
 8007f6e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007f72:	f107 0310 	add.w	r3, r7, #16
 8007f76:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007f7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007f82:	f107 030f 	add.w	r3, r7, #15
 8007f86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f94:	2100      	movs	r1, #0
 8007f96:	4618      	mov	r0, r3
 8007f98:	f001 fb30 	bl	80095fc <hci_send_req>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	da01      	bge.n	8007fa6 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 8007fa2:	23ff      	movs	r3, #255	; 0xff
 8007fa4:	e002      	b.n	8007fac <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 8007fa6:	f107 030f 	add.w	r3, r7, #15
 8007faa:	781b      	ldrb	r3, [r3, #0]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b088      	sub	sp, #32
 8007fba:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007fc0:	f107 0308 	add.w	r3, r7, #8
 8007fc4:	2218      	movs	r2, #24
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 ff10 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 8007fce:	233f      	movs	r3, #63	; 0x3f
 8007fd0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8007fd2:	f240 1301 	movw	r3, #257	; 0x101
 8007fd6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007fd8:	1dfb      	adds	r3, r7, #7
 8007fda:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007fe0:	f107 0308 	add.w	r3, r7, #8
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f001 fb08 	bl	80095fc <hci_send_req>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	da01      	bge.n	8007ff6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8007ff2:	23ff      	movs	r3, #255	; 0xff
 8007ff4:	e000      	b.n	8007ff8 <aci_gatt_init+0x42>
  return status;
 8007ff6:	79fb      	ldrb	r3, [r7, #7]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3720      	adds	r7, #32
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008000:	b590      	push	{r4, r7, lr}
 8008002:	b0cf      	sub	sp, #316	; 0x13c
 8008004:	af00      	add	r7, sp, #0
 8008006:	4604      	mov	r4, r0
 8008008:	4638      	mov	r0, r7
 800800a:	6001      	str	r1, [r0, #0]
 800800c:	4610      	mov	r0, r2
 800800e:	4619      	mov	r1, r3
 8008010:	1dfb      	adds	r3, r7, #7
 8008012:	4622      	mov	r2, r4
 8008014:	701a      	strb	r2, [r3, #0]
 8008016:	1dbb      	adds	r3, r7, #6
 8008018:	4602      	mov	r2, r0
 800801a:	701a      	strb	r2, [r3, #0]
 800801c:	1d7b      	adds	r3, r7, #5
 800801e:	460a      	mov	r2, r1
 8008020:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008022:	f107 0310 	add.w	r3, r7, #16
 8008026:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800802a:	1dfb      	adds	r3, r7, #7
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d007      	beq.n	8008042 <aci_gatt_add_service+0x42>
 8008032:	1dfb      	adds	r3, r7, #7
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	2b02      	cmp	r3, #2
 8008038:	d101      	bne.n	800803e <aci_gatt_add_service+0x3e>
 800803a:	2311      	movs	r3, #17
 800803c:	e002      	b.n	8008044 <aci_gatt_add_service+0x44>
 800803e:	2301      	movs	r3, #1
 8008040:	e000      	b.n	8008044 <aci_gatt_add_service+0x44>
 8008042:	2303      	movs	r3, #3
 8008044:	f107 0210 	add.w	r2, r7, #16
 8008048:	4413      	add	r3, r2
 800804a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800804e:	f107 030c 	add.w	r3, r7, #12
 8008052:	2203      	movs	r2, #3
 8008054:	2100      	movs	r1, #0
 8008056:	4618      	mov	r0, r3
 8008058:	f000 fec9 	bl	8008dee <Osal_MemSet>
  int index_input = 0;
 800805c:	2300      	movs	r3, #0
 800805e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8008062:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008066:	1dfa      	adds	r2, r7, #7
 8008068:	7812      	ldrb	r2, [r2, #0]
 800806a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800806c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008070:	3301      	adds	r3, #1
 8008072:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008076:	1dfb      	adds	r3, r7, #7
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d002      	beq.n	8008084 <aci_gatt_add_service+0x84>
 800807e:	2b02      	cmp	r3, #2
 8008080:	d004      	beq.n	800808c <aci_gatt_add_service+0x8c>
 8008082:	e007      	b.n	8008094 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8008084:	2302      	movs	r3, #2
 8008086:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800808a:	e005      	b.n	8008098 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800808c:	2310      	movs	r3, #16
 800808e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008092:	e001      	b.n	8008098 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8008094:	2347      	movs	r3, #71	; 0x47
 8008096:	e05d      	b.n	8008154 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8008098:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800809c:	1c58      	adds	r0, r3, #1
 800809e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80080a2:	463b      	mov	r3, r7
 80080a4:	6819      	ldr	r1, [r3, #0]
 80080a6:	f000 fe92 	bl	8008dce <Osal_MemCpy>
    index_input += size;
 80080aa:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80080ae:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80080b2:	4413      	add	r3, r2
 80080b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80080b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080bc:	1dba      	adds	r2, r7, #6
 80080be:	7812      	ldrb	r2, [r2, #0]
 80080c0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80080c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080c6:	3301      	adds	r3, #1
 80080c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80080cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080d0:	1d7a      	adds	r2, r7, #5
 80080d2:	7812      	ldrb	r2, [r2, #0]
 80080d4:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80080d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080da:	3301      	adds	r3, #1
 80080dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80080e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080e4:	2218      	movs	r2, #24
 80080e6:	2100      	movs	r1, #0
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 fe80 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 80080ee:	233f      	movs	r3, #63	; 0x3f
 80080f0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80080f4:	f44f 7381 	mov.w	r3, #258	; 0x102
 80080f8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80080fc:	f107 0310 	add.w	r3, r7, #16
 8008100:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008104:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008108:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800810c:	f107 030c 	add.w	r3, r7, #12
 8008110:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008114:	2303      	movs	r3, #3
 8008116:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800811a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800811e:	2100      	movs	r1, #0
 8008120:	4618      	mov	r0, r3
 8008122:	f001 fa6b 	bl	80095fc <hci_send_req>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	da01      	bge.n	8008130 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800812c:	23ff      	movs	r3, #255	; 0xff
 800812e:	e011      	b.n	8008154 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8008130:	f107 030c 	add.w	r3, r7, #12
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <aci_gatt_add_service+0x142>
    return resp.Status;
 800813a:	f107 030c 	add.w	r3, r7, #12
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	e008      	b.n	8008154 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8008142:	f107 030c 	add.w	r3, r7, #12
 8008146:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800814a:	b29a      	uxth	r2, r3
 800814c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008150:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800815a:	46bd      	mov	sp, r7
 800815c:	bd90      	pop	{r4, r7, pc}

0800815e <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800815e:	b590      	push	{r4, r7, lr}
 8008160:	b0d1      	sub	sp, #324	; 0x144
 8008162:	af00      	add	r7, sp, #0
 8008164:	4604      	mov	r4, r0
 8008166:	4608      	mov	r0, r1
 8008168:	f107 0108 	add.w	r1, r7, #8
 800816c:	600a      	str	r2, [r1, #0]
 800816e:	4619      	mov	r1, r3
 8008170:	f107 030e 	add.w	r3, r7, #14
 8008174:	4622      	mov	r2, r4
 8008176:	801a      	strh	r2, [r3, #0]
 8008178:	f107 030d 	add.w	r3, r7, #13
 800817c:	4602      	mov	r2, r0
 800817e:	701a      	strb	r2, [r3, #0]
 8008180:	1dbb      	adds	r3, r7, #6
 8008182:	460a      	mov	r2, r1
 8008184:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8008186:	f107 0318 	add.w	r3, r7, #24
 800818a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800818e:	f107 030d 	add.w	r3, r7, #13
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d008      	beq.n	80081aa <aci_gatt_add_char+0x4c>
 8008198:	f107 030d 	add.w	r3, r7, #13
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d101      	bne.n	80081a6 <aci_gatt_add_char+0x48>
 80081a2:	2313      	movs	r3, #19
 80081a4:	e002      	b.n	80081ac <aci_gatt_add_char+0x4e>
 80081a6:	2303      	movs	r3, #3
 80081a8:	e000      	b.n	80081ac <aci_gatt_add_char+0x4e>
 80081aa:	2305      	movs	r3, #5
 80081ac:	f107 0218 	add.w	r2, r7, #24
 80081b0:	4413      	add	r3, r2
 80081b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80081b6:	f107 0314 	add.w	r3, r7, #20
 80081ba:	2203      	movs	r2, #3
 80081bc:	2100      	movs	r1, #0
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 fe15 	bl	8008dee <Osal_MemSet>
  int index_input = 0;
 80081c4:	2300      	movs	r3, #0
 80081c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80081ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80081ce:	f107 020e 	add.w	r2, r7, #14
 80081d2:	8812      	ldrh	r2, [r2, #0]
 80081d4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80081d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80081da:	3302      	adds	r3, #2
 80081dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80081e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80081e4:	f107 020d 	add.w	r2, r7, #13
 80081e8:	7812      	ldrb	r2, [r2, #0]
 80081ea:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80081ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80081f0:	3301      	adds	r3, #1
 80081f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80081f6:	f107 030d 	add.w	r3, r7, #13
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d002      	beq.n	8008206 <aci_gatt_add_char+0xa8>
 8008200:	2b02      	cmp	r3, #2
 8008202:	d004      	beq.n	800820e <aci_gatt_add_char+0xb0>
 8008204:	e007      	b.n	8008216 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8008206:	2302      	movs	r3, #2
 8008208:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800820c:	e005      	b.n	800821a <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800820e:	2310      	movs	r3, #16
 8008210:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008214:	e001      	b.n	800821a <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8008216:	2347      	movs	r3, #71	; 0x47
 8008218:	e086      	b.n	8008328 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800821a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800821e:	1cd8      	adds	r0, r3, #3
 8008220:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8008224:	f107 0308 	add.w	r3, r7, #8
 8008228:	6819      	ldr	r1, [r3, #0]
 800822a:	f000 fdd0 	bl	8008dce <Osal_MemCpy>
    index_input += size;
 800822e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8008232:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008236:	4413      	add	r3, r2
 8008238:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800823c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008240:	1dba      	adds	r2, r7, #6
 8008242:	8812      	ldrh	r2, [r2, #0]
 8008244:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008246:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800824a:	3302      	adds	r3, #2
 800824c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8008250:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008254:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008258:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800825a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800825e:	3301      	adds	r3, #1
 8008260:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8008264:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008268:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800826c:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800826e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008272:	3301      	adds	r3, #1
 8008274:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8008278:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800827c:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8008280:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8008282:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008286:	3301      	adds	r3, #1
 8008288:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800828c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008290:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8008294:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8008296:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800829a:	3301      	adds	r3, #1
 800829c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80082a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80082a4:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80082a8:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80082aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082ae:	3301      	adds	r3, #1
 80082b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80082b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80082b8:	2218      	movs	r2, #24
 80082ba:	2100      	movs	r1, #0
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 fd96 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 80082c2:	233f      	movs	r3, #63	; 0x3f
 80082c4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80082c8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80082cc:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80082d0:	f107 0318 	add.w	r3, r7, #24
 80082d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80082d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80082e0:	f107 0314 	add.w	r3, r7, #20
 80082e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80082e8:	2303      	movs	r3, #3
 80082ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80082ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80082f2:	2100      	movs	r1, #0
 80082f4:	4618      	mov	r0, r3
 80082f6:	f001 f981 	bl	80095fc <hci_send_req>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	da01      	bge.n	8008304 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8008300:	23ff      	movs	r3, #255	; 0xff
 8008302:	e011      	b.n	8008328 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8008304:	f107 0314 	add.w	r3, r7, #20
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d003      	beq.n	8008316 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 800830e:	f107 0314 	add.w	r3, r7, #20
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	e008      	b.n	8008328 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8008316:	f107 0314 	add.w	r3, r7, #20
 800831a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800831e:	b29a      	uxth	r2, r3
 8008320:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008324:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800832e:	46bd      	mov	sp, r7
 8008330:	bd90      	pop	{r4, r7, pc}

08008332 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008332:	b5b0      	push	{r4, r5, r7, lr}
 8008334:	b0cc      	sub	sp, #304	; 0x130
 8008336:	af00      	add	r7, sp, #0
 8008338:	4605      	mov	r5, r0
 800833a:	460c      	mov	r4, r1
 800833c:	4610      	mov	r0, r2
 800833e:	4619      	mov	r1, r3
 8008340:	1dbb      	adds	r3, r7, #6
 8008342:	462a      	mov	r2, r5
 8008344:	801a      	strh	r2, [r3, #0]
 8008346:	1d3b      	adds	r3, r7, #4
 8008348:	4622      	mov	r2, r4
 800834a:	801a      	strh	r2, [r3, #0]
 800834c:	1cfb      	adds	r3, r7, #3
 800834e:	4602      	mov	r2, r0
 8008350:	701a      	strb	r2, [r3, #0]
 8008352:	1cbb      	adds	r3, r7, #2
 8008354:	460a      	mov	r2, r1
 8008356:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008358:	f107 0310 	add.w	r3, r7, #16
 800835c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008360:	f107 030f 	add.w	r3, r7, #15
 8008364:	2200      	movs	r2, #0
 8008366:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008368:	2300      	movs	r3, #0
 800836a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800836e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008372:	1dba      	adds	r2, r7, #6
 8008374:	8812      	ldrh	r2, [r2, #0]
 8008376:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008378:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800837c:	3302      	adds	r3, #2
 800837e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8008382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008386:	1d3a      	adds	r2, r7, #4
 8008388:	8812      	ldrh	r2, [r2, #0]
 800838a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800838c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008390:	3302      	adds	r3, #2
 8008392:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8008396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800839a:	1cfa      	adds	r2, r7, #3
 800839c:	7812      	ldrb	r2, [r2, #0]
 800839e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80083a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083a4:	3301      	adds	r3, #1
 80083a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80083aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083ae:	1cba      	adds	r2, r7, #2
 80083b0:	7812      	ldrb	r2, [r2, #0]
 80083b2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80083b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083b8:	3301      	adds	r3, #1
 80083ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80083be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083c2:	1d98      	adds	r0, r3, #6
 80083c4:	1cbb      	adds	r3, r7, #2
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	461a      	mov	r2, r3
 80083ca:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80083ce:	f000 fcfe 	bl	8008dce <Osal_MemCpy>
  index_input += Char_Value_Length;
 80083d2:	1cbb      	adds	r3, r7, #2
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80083da:	4413      	add	r3, r2
 80083dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80083e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80083e4:	2218      	movs	r2, #24
 80083e6:	2100      	movs	r1, #0
 80083e8:	4618      	mov	r0, r3
 80083ea:	f000 fd00 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 80083ee:	233f      	movs	r3, #63	; 0x3f
 80083f0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80083f4:	f44f 7383 	mov.w	r3, #262	; 0x106
 80083f8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80083fc:	f107 0310 	add.w	r3, r7, #16
 8008400:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008404:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008408:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800840c:	f107 030f 	add.w	r3, r7, #15
 8008410:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008414:	2301      	movs	r3, #1
 8008416:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800841a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800841e:	2100      	movs	r1, #0
 8008420:	4618      	mov	r0, r3
 8008422:	f001 f8eb 	bl	80095fc <hci_send_req>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	da01      	bge.n	8008430 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800842c:	23ff      	movs	r3, #255	; 0xff
 800842e:	e002      	b.n	8008436 <aci_gatt_update_char_value+0x104>
  return status;
 8008430:	f107 030f 	add.w	r3, r7, #15
 8008434:	781b      	ldrb	r3, [r3, #0]
}
 8008436:	4618      	mov	r0, r3
 8008438:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800843c:	46bd      	mov	sp, r7
 800843e:	bdb0      	pop	{r4, r5, r7, pc}

08008440 <aci_gatt_exchange_config>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_exchange_config( uint16_t Connection_Handle )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b0cc      	sub	sp, #304	; 0x130
 8008444:	af00      	add	r7, sp, #0
 8008446:	4602      	mov	r2, r0
 8008448:	1dbb      	adds	r3, r7, #6
 800844a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
 800844c:	f107 0310 	add.w	r3, r7, #16
 8008450:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008454:	f107 030f 	add.w	r3, r7, #15
 8008458:	2200      	movs	r2, #0
 800845a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800845c:	2300      	movs	r3, #0
 800845e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008462:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008466:	1dba      	adds	r2, r7, #6
 8008468:	8812      	ldrh	r2, [r2, #0]
 800846a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800846c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008470:	3302      	adds	r3, #2
 8008472:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008476:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800847a:	2218      	movs	r2, #24
 800847c:	2100      	movs	r1, #0
 800847e:	4618      	mov	r0, r3
 8008480:	f000 fcb5 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 8008484:	233f      	movs	r3, #63	; 0x3f
 8008486:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x10b;
 800848a:	f240 130b 	movw	r3, #267	; 0x10b
 800848e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008492:	230f      	movs	r3, #15
 8008494:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008498:	f107 0310 	add.w	r3, r7, #16
 800849c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80084a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80084a8:	f107 030f 	add.w	r3, r7, #15
 80084ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80084b0:	2301      	movs	r3, #1
 80084b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80084b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80084ba:	2100      	movs	r1, #0
 80084bc:	4618      	mov	r0, r3
 80084be:	f001 f89d 	bl	80095fc <hci_send_req>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	da01      	bge.n	80084cc <aci_gatt_exchange_config+0x8c>
    return BLE_STATUS_TIMEOUT;
 80084c8:	23ff      	movs	r3, #255	; 0xff
 80084ca:	e002      	b.n	80084d2 <aci_gatt_exchange_config+0x92>
  return status;
 80084cc:	f107 030f 	add.w	r3, r7, #15
 80084d0:	781b      	ldrb	r3, [r3, #0]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <aci_gatt_disc_all_primary_services>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_disc_all_primary_services( uint16_t Connection_Handle )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b0cc      	sub	sp, #304	; 0x130
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	4602      	mov	r2, r0
 80084e4:	1dbb      	adds	r3, r7, #6
 80084e6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 80084e8:	f107 0310 	add.w	r3, r7, #16
 80084ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80084f0:	f107 030f 	add.w	r3, r7, #15
 80084f4:	2200      	movs	r2, #0
 80084f6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80084f8:	2300      	movs	r3, #0
 80084fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80084fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008502:	1dba      	adds	r2, r7, #6
 8008504:	8812      	ldrh	r2, [r2, #0]
 8008506:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008508:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800850c:	3302      	adds	r3, #2
 800850e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008512:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008516:	2218      	movs	r2, #24
 8008518:	2100      	movs	r1, #0
 800851a:	4618      	mov	r0, r3
 800851c:	f000 fc67 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 8008520:	233f      	movs	r3, #63	; 0x3f
 8008522:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 8008526:	f44f 7389 	mov.w	r3, #274	; 0x112
 800852a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800852e:	230f      	movs	r3, #15
 8008530:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008534:	f107 0310 	add.w	r3, r7, #16
 8008538:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800853c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008540:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008544:	f107 030f 	add.w	r3, r7, #15
 8008548:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800854c:	2301      	movs	r3, #1
 800854e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008552:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008556:	2100      	movs	r1, #0
 8008558:	4618      	mov	r0, r3
 800855a:	f001 f84f 	bl	80095fc <hci_send_req>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	da01      	bge.n	8008568 <aci_gatt_disc_all_primary_services+0x8c>
    return BLE_STATUS_TIMEOUT;
 8008564:	23ff      	movs	r3, #255	; 0xff
 8008566:	e002      	b.n	800856e <aci_gatt_disc_all_primary_services+0x92>
  return status;
 8008568:	f107 030f 	add.w	r3, r7, #15
 800856c:	781b      	ldrb	r3, [r3, #0]
}
 800856e:	4618      	mov	r0, r3
 8008570:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service( uint16_t Connection_Handle,
                                              uint16_t Start_Handle,
                                              uint16_t End_Handle )
{
 8008578:	b590      	push	{r4, r7, lr}
 800857a:	b0cd      	sub	sp, #308	; 0x134
 800857c:	af00      	add	r7, sp, #0
 800857e:	4604      	mov	r4, r0
 8008580:	4608      	mov	r0, r1
 8008582:	4611      	mov	r1, r2
 8008584:	1dbb      	adds	r3, r7, #6
 8008586:	4622      	mov	r2, r4
 8008588:	801a      	strh	r2, [r3, #0]
 800858a:	1d3b      	adds	r3, r7, #4
 800858c:	4602      	mov	r2, r0
 800858e:	801a      	strh	r2, [r3, #0]
 8008590:	1cbb      	adds	r3, r7, #2
 8008592:	460a      	mov	r2, r1
 8008594:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 8008596:	f107 0310 	add.w	r3, r7, #16
 800859a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800859e:	f107 030f 	add.w	r3, r7, #15
 80085a2:	2200      	movs	r2, #0
 80085a4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80085a6:	2300      	movs	r3, #0
 80085a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80085ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085b0:	1dba      	adds	r2, r7, #6
 80085b2:	8812      	ldrh	r2, [r2, #0]
 80085b4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80085b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085ba:	3302      	adds	r3, #2
 80085bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = Start_Handle;
 80085c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085c4:	1d3a      	adds	r2, r7, #4
 80085c6:	8812      	ldrh	r2, [r2, #0]
 80085c8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80085ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085ce:	3302      	adds	r3, #2
 80085d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 80085d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085d8:	1cba      	adds	r2, r7, #2
 80085da:	8812      	ldrh	r2, [r2, #0]
 80085dc:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80085de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085e2:	3302      	adds	r3, #2
 80085e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80085e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80085ec:	2218      	movs	r2, #24
 80085ee:	2100      	movs	r1, #0
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 fbfc 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 80085f6:	233f      	movs	r3, #63	; 0x3f
 80085f8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 80085fc:	f240 1315 	movw	r3, #277	; 0x115
 8008600:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008604:	230f      	movs	r3, #15
 8008606:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800860a:	f107 0310 	add.w	r3, r7, #16
 800860e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008612:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008616:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800861a:	f107 030f 	add.w	r3, r7, #15
 800861e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008622:	2301      	movs	r3, #1
 8008624:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008628:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800862c:	2100      	movs	r1, #0
 800862e:	4618      	mov	r0, r3
 8008630:	f000 ffe4 	bl	80095fc <hci_send_req>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	da01      	bge.n	800863e <aci_gatt_disc_all_char_of_service+0xc6>
    return BLE_STATUS_TIMEOUT;
 800863a:	23ff      	movs	r3, #255	; 0xff
 800863c:	e002      	b.n	8008644 <aci_gatt_disc_all_char_of_service+0xcc>
  return status;
 800863e:	f107 030f 	add.w	r3, r7, #15
 8008642:	781b      	ldrb	r3, [r3, #0]
}
 8008644:	4618      	mov	r0, r3
 8008646:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800864a:	46bd      	mov	sp, r7
 800864c:	bd90      	pop	{r4, r7, pc}

0800864e <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc( uint16_t Connection_Handle,
                                        uint16_t Char_Handle,
                                        uint16_t End_Handle )
{
 800864e:	b590      	push	{r4, r7, lr}
 8008650:	b0cd      	sub	sp, #308	; 0x134
 8008652:	af00      	add	r7, sp, #0
 8008654:	4604      	mov	r4, r0
 8008656:	4608      	mov	r0, r1
 8008658:	4611      	mov	r1, r2
 800865a:	1dbb      	adds	r3, r7, #6
 800865c:	4622      	mov	r2, r4
 800865e:	801a      	strh	r2, [r3, #0]
 8008660:	1d3b      	adds	r3, r7, #4
 8008662:	4602      	mov	r2, r0
 8008664:	801a      	strh	r2, [r3, #0]
 8008666:	1cbb      	adds	r3, r7, #2
 8008668:	460a      	mov	r2, r1
 800866a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 800866c:	f107 0310 	add.w	r3, r7, #16
 8008670:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008674:	f107 030f 	add.w	r3, r7, #15
 8008678:	2200      	movs	r2, #0
 800867a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800867c:	2300      	movs	r3, #0
 800867e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008686:	1dba      	adds	r2, r7, #6
 8008688:	8812      	ldrh	r2, [r2, #0]
 800868a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800868c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008690:	3302      	adds	r3, #2
 8008692:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8008696:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800869a:	1d3a      	adds	r2, r7, #4
 800869c:	8812      	ldrh	r2, [r2, #0]
 800869e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80086a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086a4:	3302      	adds	r3, #2
 80086a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 80086aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ae:	1cba      	adds	r2, r7, #2
 80086b0:	8812      	ldrh	r2, [r2, #0]
 80086b2:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80086b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086b8:	3302      	adds	r3, #2
 80086ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80086be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80086c2:	2218      	movs	r2, #24
 80086c4:	2100      	movs	r1, #0
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 fb91 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 80086cc:	233f      	movs	r3, #63	; 0x3f
 80086ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 80086d2:	f240 1317 	movw	r3, #279	; 0x117
 80086d6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80086da:	230f      	movs	r3, #15
 80086dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80086e0:	f107 0310 	add.w	r3, r7, #16
 80086e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80086e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80086f0:	f107 030f 	add.w	r3, r7, #15
 80086f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80086f8:	2301      	movs	r3, #1
 80086fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80086fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008702:	2100      	movs	r1, #0
 8008704:	4618      	mov	r0, r3
 8008706:	f000 ff79 	bl	80095fc <hci_send_req>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	da01      	bge.n	8008714 <aci_gatt_disc_all_char_desc+0xc6>
    return BLE_STATUS_TIMEOUT;
 8008710:	23ff      	movs	r3, #255	; 0xff
 8008712:	e002      	b.n	800871a <aci_gatt_disc_all_char_desc+0xcc>
  return status;
 8008714:	f107 030f 	add.w	r3, r7, #15
 8008718:	781b      	ldrb	r3, [r3, #0]
}
 800871a:	4618      	mov	r0, r3
 800871c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008720:	46bd      	mov	sp, r7
 8008722:	bd90      	pop	{r4, r7, pc}

08008724 <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc( uint16_t Connection_Handle,
                                     uint16_t Attr_Handle,
                                     uint8_t Attribute_Val_Length,
                                     const uint8_t* Attribute_Val )
{
 8008724:	b590      	push	{r4, r7, lr}
 8008726:	b0cf      	sub	sp, #316	; 0x13c
 8008728:	af00      	add	r7, sp, #0
 800872a:	4604      	mov	r4, r0
 800872c:	4608      	mov	r0, r1
 800872e:	4611      	mov	r1, r2
 8008730:	1d3a      	adds	r2, r7, #4
 8008732:	6013      	str	r3, [r2, #0]
 8008734:	f107 030e 	add.w	r3, r7, #14
 8008738:	4622      	mov	r2, r4
 800873a:	801a      	strh	r2, [r3, #0]
 800873c:	f107 030c 	add.w	r3, r7, #12
 8008740:	4602      	mov	r2, r0
 8008742:	801a      	strh	r2, [r3, #0]
 8008744:	f107 030b 	add.w	r3, r7, #11
 8008748:	460a      	mov	r2, r1
 800874a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 800874c:	f107 0318 	add.w	r3, r7, #24
 8008750:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8008754:	f107 0317 	add.w	r3, r7, #23
 8008758:	2200      	movs	r2, #0
 800875a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800875c:	2300      	movs	r3, #0
 800875e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8008762:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008766:	f107 020e 	add.w	r2, r7, #14
 800876a:	8812      	ldrh	r2, [r2, #0]
 800876c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800876e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008772:	3302      	adds	r3, #2
 8008774:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 8008778:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800877c:	f107 020c 	add.w	r2, r7, #12
 8008780:	8812      	ldrh	r2, [r2, #0]
 8008782:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008784:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008788:	3302      	adds	r3, #2
 800878a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 800878e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008792:	f107 020b 	add.w	r2, r7, #11
 8008796:	7812      	ldrb	r2, [r2, #0]
 8008798:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800879a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800879e:	3301      	adds	r3, #1
 80087a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 80087a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80087a8:	1d58      	adds	r0, r3, #5
 80087aa:	f107 030b 	add.w	r3, r7, #11
 80087ae:	781a      	ldrb	r2, [r3, #0]
 80087b0:	1d3b      	adds	r3, r7, #4
 80087b2:	6819      	ldr	r1, [r3, #0]
 80087b4:	f000 fb0b 	bl	8008dce <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 80087b8:	f107 030b 	add.w	r3, r7, #11
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80087c2:	4413      	add	r3, r2
 80087c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80087c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80087cc:	2218      	movs	r2, #24
 80087ce:	2100      	movs	r1, #0
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 fb0c 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 80087d6:	233f      	movs	r3, #63	; 0x3f
 80087d8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 80087dc:	f240 1321 	movw	r3, #289	; 0x121
 80087e0:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 80087e4:	230f      	movs	r3, #15
 80087e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 80087ea:	f107 0318 	add.w	r3, r7, #24
 80087ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80087f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80087f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 80087fa:	f107 0317 	add.w	r3, r7, #23
 80087fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8008802:	2301      	movs	r3, #1
 8008804:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008808:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800880c:	2100      	movs	r1, #0
 800880e:	4618      	mov	r0, r3
 8008810:	f000 fef4 	bl	80095fc <hci_send_req>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	da01      	bge.n	800881e <aci_gatt_write_char_desc+0xfa>
    return BLE_STATUS_TIMEOUT;
 800881a:	23ff      	movs	r3, #255	; 0xff
 800881c:	e002      	b.n	8008824 <aci_gatt_write_char_desc+0x100>
  return status;
 800881e:	f107 0317 	add.w	r3, r7, #23
 8008822:	781b      	ldrb	r3, [r3, #0]
}
 8008824:	4618      	mov	r0, r3
 8008826:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800882a:	46bd      	mov	sp, r7
 800882c:	bd90      	pop	{r4, r7, pc}

0800882e <aci_gatt_write_resp>:
                                uint16_t Attr_Handle,
                                uint8_t Write_status,
                                uint8_t Error_Code,
                                uint8_t Attribute_Val_Length,
                                const uint8_t* Attribute_Val )
{
 800882e:	b5b0      	push	{r4, r5, r7, lr}
 8008830:	b0cc      	sub	sp, #304	; 0x130
 8008832:	af00      	add	r7, sp, #0
 8008834:	4605      	mov	r5, r0
 8008836:	460c      	mov	r4, r1
 8008838:	4610      	mov	r0, r2
 800883a:	4619      	mov	r1, r3
 800883c:	1dbb      	adds	r3, r7, #6
 800883e:	462a      	mov	r2, r5
 8008840:	801a      	strh	r2, [r3, #0]
 8008842:	1d3b      	adds	r3, r7, #4
 8008844:	4622      	mov	r2, r4
 8008846:	801a      	strh	r2, [r3, #0]
 8008848:	1cfb      	adds	r3, r7, #3
 800884a:	4602      	mov	r2, r0
 800884c:	701a      	strb	r2, [r3, #0]
 800884e:	1cbb      	adds	r3, r7, #2
 8008850:	460a      	mov	r2, r1
 8008852:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_resp_cp0 *cp0 = (aci_gatt_write_resp_cp0*)(cmd_buffer);
 8008854:	f107 0310 	add.w	r3, r7, #16
 8008858:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800885c:	f107 030f 	add.w	r3, r7, #15
 8008860:	2200      	movs	r2, #0
 8008862:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008864:	2300      	movs	r3, #0
 8008866:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800886a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800886e:	1dba      	adds	r2, r7, #6
 8008870:	8812      	ldrh	r2, [r2, #0]
 8008872:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008874:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008878:	3302      	adds	r3, #2
 800887a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attr_Handle = Attr_Handle;
 800887e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008882:	1d3a      	adds	r2, r7, #4
 8008884:	8812      	ldrh	r2, [r2, #0]
 8008886:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008888:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800888c:	3302      	adds	r3, #2
 800888e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Write_status = Write_status;
 8008892:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008896:	1cfa      	adds	r2, r7, #3
 8008898:	7812      	ldrb	r2, [r2, #0]
 800889a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800889c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088a0:	3301      	adds	r3, #1
 80088a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Error_Code = Error_Code;
 80088a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088aa:	1cba      	adds	r2, r7, #2
 80088ac:	7812      	ldrb	r2, [r2, #0]
 80088ae:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80088b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088b4:	3301      	adds	r3, #1
 80088b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 80088ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088be:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80088c2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80088c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088c8:	3301      	adds	r3, #1
 80088ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 80088ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088d2:	3307      	adds	r3, #7
 80088d4:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80088d8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80088dc:	4618      	mov	r0, r3
 80088de:	f000 fa76 	bl	8008dce <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 80088e2:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 80088e6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80088ea:	4413      	add	r3, r2
 80088ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088f4:	2218      	movs	r2, #24
 80088f6:	2100      	movs	r1, #0
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 fa78 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 80088fe:	233f      	movs	r3, #63	; 0x3f
 8008900:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x126;
 8008904:	f44f 7393 	mov.w	r3, #294	; 0x126
 8008908:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800890c:	f107 0310 	add.w	r3, r7, #16
 8008910:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008914:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008918:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800891c:	f107 030f 	add.w	r3, r7, #15
 8008920:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008924:	2301      	movs	r3, #1
 8008926:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800892a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800892e:	2100      	movs	r1, #0
 8008930:	4618      	mov	r0, r3
 8008932:	f000 fe63 	bl	80095fc <hci_send_req>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	da01      	bge.n	8008940 <aci_gatt_write_resp+0x112>
    return BLE_STATUS_TIMEOUT;
 800893c:	23ff      	movs	r3, #255	; 0xff
 800893e:	e002      	b.n	8008946 <aci_gatt_write_resp+0x118>
  return status;
 8008940:	f107 030f 	add.w	r3, r7, #15
 8008944:	781b      	ldrb	r3, [r3, #0]
}
 8008946:	4618      	mov	r0, r3
 8008948:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800894c:	46bd      	mov	sp, r7
 800894e:	bdb0      	pop	{r4, r5, r7, pc}

08008950 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b0cc      	sub	sp, #304	; 0x130
 8008954:	af00      	add	r7, sp, #0
 8008956:	463b      	mov	r3, r7
 8008958:	601a      	str	r2, [r3, #0]
 800895a:	1dfb      	adds	r3, r7, #7
 800895c:	4602      	mov	r2, r0
 800895e:	701a      	strb	r2, [r3, #0]
 8008960:	1dbb      	adds	r3, r7, #6
 8008962:	460a      	mov	r2, r1
 8008964:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8008966:	f107 0310 	add.w	r3, r7, #16
 800896a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800896e:	f107 030f 	add.w	r3, r7, #15
 8008972:	2200      	movs	r2, #0
 8008974:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008976:	2300      	movs	r3, #0
 8008978:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800897c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008980:	1dfa      	adds	r2, r7, #7
 8008982:	7812      	ldrb	r2, [r2, #0]
 8008984:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008986:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800898a:	3301      	adds	r3, #1
 800898c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8008990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008994:	1dba      	adds	r2, r7, #6
 8008996:	7812      	ldrb	r2, [r2, #0]
 8008998:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800899a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800899e:	3301      	adds	r3, #1
 80089a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80089a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089a8:	1c98      	adds	r0, r3, #2
 80089aa:	1dbb      	adds	r3, r7, #6
 80089ac:	781a      	ldrb	r2, [r3, #0]
 80089ae:	463b      	mov	r3, r7
 80089b0:	6819      	ldr	r1, [r3, #0]
 80089b2:	f000 fa0c 	bl	8008dce <Osal_MemCpy>
  index_input += Length;
 80089b6:	1dbb      	adds	r3, r7, #6
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80089be:	4413      	add	r3, r2
 80089c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80089c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089c8:	2218      	movs	r2, #24
 80089ca:	2100      	movs	r1, #0
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 fa0e 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 80089d2:	233f      	movs	r3, #63	; 0x3f
 80089d4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80089d8:	230c      	movs	r3, #12
 80089da:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80089de:	f107 0310 	add.w	r3, r7, #16
 80089e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80089e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80089ee:	f107 030f 	add.w	r3, r7, #15
 80089f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80089f6:	2301      	movs	r3, #1
 80089f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80089fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a00:	2100      	movs	r1, #0
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 fdfa 	bl	80095fc <hci_send_req>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	da01      	bge.n	8008a12 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8008a0e:	23ff      	movs	r3, #255	; 0xff
 8008a10:	e002      	b.n	8008a18 <aci_hal_write_config_data+0xc8>
  return status;
 8008a12:	f107 030f 	add.w	r3, r7, #15
 8008a16:	781b      	ldrb	r3, [r3, #0]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b0cc      	sub	sp, #304	; 0x130
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	4602      	mov	r2, r0
 8008a2a:	1dfb      	adds	r3, r7, #7
 8008a2c:	701a      	strb	r2, [r3, #0]
 8008a2e:	1dbb      	adds	r3, r7, #6
 8008a30:	460a      	mov	r2, r1
 8008a32:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8008a34:	f107 0310 	add.w	r3, r7, #16
 8008a38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008a3c:	f107 030f 	add.w	r3, r7, #15
 8008a40:	2200      	movs	r2, #0
 8008a42:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008a44:	2300      	movs	r3, #0
 8008a46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8008a4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a4e:	1dfa      	adds	r2, r7, #7
 8008a50:	7812      	ldrb	r2, [r2, #0]
 8008a52:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008a54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a58:	3301      	adds	r3, #1
 8008a5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8008a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a62:	1dba      	adds	r2, r7, #6
 8008a64:	7812      	ldrb	r2, [r2, #0]
 8008a66:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008a68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a76:	2218      	movs	r2, #24
 8008a78:	2100      	movs	r1, #0
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 f9b7 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a80:	233f      	movs	r3, #63	; 0x3f
 8008a82:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8008a86:	230f      	movs	r3, #15
 8008a88:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008a8c:	f107 0310 	add.w	r3, r7, #16
 8008a90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008a94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008a9c:	f107 030f 	add.w	r3, r7, #15
 8008aa0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008aaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008aae:	2100      	movs	r1, #0
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 fda3 	bl	80095fc <hci_send_req>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	da01      	bge.n	8008ac0 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8008abc:	23ff      	movs	r3, #255	; 0xff
 8008abe:	e002      	b.n	8008ac6 <aci_hal_set_tx_power_level+0xa4>
  return status;
 8008ac0:	f107 030f 	add.w	r3, r7, #15
 8008ac4:	781b      	ldrb	r3, [r3, #0]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b088      	sub	sp, #32
 8008ad4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008ada:	f107 0308 	add.w	r3, r7, #8
 8008ade:	2218      	movs	r2, #24
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 f983 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x03;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8008aec:	2303      	movs	r3, #3
 8008aee:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008af0:	1dfb      	adds	r3, r7, #7
 8008af2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008af4:	2301      	movs	r3, #1
 8008af6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008af8:	f107 0308 	add.w	r3, r7, #8
 8008afc:	2100      	movs	r1, #0
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 fd7c 	bl	80095fc <hci_send_req>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	da01      	bge.n	8008b0e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008b0a:	23ff      	movs	r3, #255	; 0xff
 8008b0c:	e000      	b.n	8008b10 <hci_reset+0x40>
  return status;
 8008b0e:	79fb      	ldrb	r3, [r7, #7]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3720      	adds	r7, #32
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <hci_le_set_data_length>:
}

tBleStatus hci_le_set_data_length( uint16_t Connection_Handle,
                                   uint16_t TxOctets,
                                   uint16_t TxTime )
{
 8008b18:	b590      	push	{r4, r7, lr}
 8008b1a:	b0cd      	sub	sp, #308	; 0x134
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	4604      	mov	r4, r0
 8008b20:	4608      	mov	r0, r1
 8008b22:	4611      	mov	r1, r2
 8008b24:	1dbb      	adds	r3, r7, #6
 8008b26:	4622      	mov	r2, r4
 8008b28:	801a      	strh	r2, [r3, #0]
 8008b2a:	1d3b      	adds	r3, r7, #4
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	801a      	strh	r2, [r3, #0]
 8008b30:	1cbb      	adds	r3, r7, #2
 8008b32:	460a      	mov	r2, r1
 8008b34:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_data_length_cp0 *cp0 = (hci_le_set_data_length_cp0*)(cmd_buffer);
 8008b36:	f107 0310 	add.w	r3, r7, #16
 8008b3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  hci_le_set_data_length_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008b3e:	f107 030c 	add.w	r3, r7, #12
 8008b42:	2203      	movs	r2, #3
 8008b44:	2100      	movs	r1, #0
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 f951 	bl	8008dee <Osal_MemSet>
  int index_input = 0;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008b52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b56:	1dba      	adds	r2, r7, #6
 8008b58:	8812      	ldrh	r2, [r2, #0]
 8008b5a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008b5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b60:	3302      	adds	r3, #2
 8008b62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TxOctets = TxOctets;
 8008b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b6a:	1d3a      	adds	r2, r7, #4
 8008b6c:	8812      	ldrh	r2, [r2, #0]
 8008b6e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008b70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b74:	3302      	adds	r3, #2
 8008b76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TxTime = TxTime;
 8008b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b7e:	1cba      	adds	r2, r7, #2
 8008b80:	8812      	ldrh	r2, [r2, #0]
 8008b82:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8008b84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b88:	3302      	adds	r3, #2
 8008b8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b92:	2218      	movs	r2, #24
 8008b94:	2100      	movs	r1, #0
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 f929 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x08;
 8008b9c:	2308      	movs	r3, #8
 8008b9e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x022;
 8008ba2:	2322      	movs	r3, #34	; 0x22
 8008ba4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008ba8:	f107 0310 	add.w	r3, r7, #16
 8008bac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008bb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bb4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008bb8:	f107 030c 	add.w	r3, r7, #12
 8008bbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008bc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008bca:	2100      	movs	r1, #0
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f000 fd15 	bl	80095fc <hci_send_req>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	da01      	bge.n	8008bdc <hci_le_set_data_length+0xc4>
    return BLE_STATUS_TIMEOUT;
 8008bd8:	23ff      	movs	r3, #255	; 0xff
 8008bda:	e009      	b.n	8008bf0 <hci_le_set_data_length+0xd8>
  if ( resp.Status )
 8008bdc:	f107 030c 	add.w	r3, r7, #12
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <hci_le_set_data_length+0xd6>
    return resp.Status;
 8008be6:	f107 030c 	add.w	r3, r7, #12
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	e000      	b.n	8008bf0 <hci_le_set_data_length+0xd8>
  return BLE_STATUS_SUCCESS;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd90      	pop	{r4, r7, pc}

08008bfa <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8008bfa:	b590      	push	{r4, r7, lr}
 8008bfc:	b0cd      	sub	sp, #308	; 0x134
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	4604      	mov	r4, r0
 8008c02:	4608      	mov	r0, r1
 8008c04:	4611      	mov	r1, r2
 8008c06:	1dfb      	adds	r3, r7, #7
 8008c08:	4622      	mov	r2, r4
 8008c0a:	701a      	strb	r2, [r3, #0]
 8008c0c:	1dbb      	adds	r3, r7, #6
 8008c0e:	4602      	mov	r2, r0
 8008c10:	701a      	strb	r2, [r3, #0]
 8008c12:	1d7b      	adds	r3, r7, #5
 8008c14:	460a      	mov	r2, r1
 8008c16:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8008c18:	f107 0310 	add.w	r3, r7, #16
 8008c1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008c20:	f107 030f 	add.w	r3, r7, #15
 8008c24:	2200      	movs	r2, #0
 8008c26:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8008c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c32:	1dfa      	adds	r2, r7, #7
 8008c34:	7812      	ldrb	r2, [r2, #0]
 8008c36:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008c38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8008c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c46:	1dba      	adds	r2, r7, #6
 8008c48:	7812      	ldrb	r2, [r2, #0]
 8008c4a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008c4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c50:	3301      	adds	r3, #1
 8008c52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8008c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c5a:	1d7a      	adds	r2, r7, #5
 8008c5c:	7812      	ldrb	r2, [r2, #0]
 8008c5e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008c60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c64:	3301      	adds	r3, #1
 8008c66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c6e:	2218      	movs	r2, #24
 8008c70:	2100      	movs	r1, #0
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 f8bb 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x08;
 8008c78:	2308      	movs	r3, #8
 8008c7a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8008c7e:	2331      	movs	r3, #49	; 0x31
 8008c80:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008c84:	f107 0310 	add.w	r3, r7, #16
 8008c88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008c8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008c94:	f107 030f 	add.w	r3, r7, #15
 8008c98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ca2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 fca7 	bl	80095fc <hci_send_req>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	da01      	bge.n	8008cb8 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8008cb4:	23ff      	movs	r3, #255	; 0xff
 8008cb6:	e002      	b.n	8008cbe <hci_le_set_default_phy+0xc4>
  return status;
 8008cb8:	f107 030f 	add.w	r3, r7, #15
 8008cbc:	781b      	ldrb	r3, [r3, #0]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd90      	pop	{r4, r7, pc}

08008cc8 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Slave_latency,
                                                      uint16_t Timeout_Multiplier )
{
 8008cc8:	b5b0      	push	{r4, r5, r7, lr}
 8008cca:	b0cc      	sub	sp, #304	; 0x130
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	4605      	mov	r5, r0
 8008cd0:	460c      	mov	r4, r1
 8008cd2:	4610      	mov	r0, r2
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	1dbb      	adds	r3, r7, #6
 8008cd8:	462a      	mov	r2, r5
 8008cda:	801a      	strh	r2, [r3, #0]
 8008cdc:	1d3b      	adds	r3, r7, #4
 8008cde:	4622      	mov	r2, r4
 8008ce0:	801a      	strh	r2, [r3, #0]
 8008ce2:	1cbb      	adds	r3, r7, #2
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	801a      	strh	r2, [r3, #0]
 8008ce8:	463b      	mov	r3, r7
 8008cea:	460a      	mov	r2, r1
 8008cec:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 8008cee:	f107 0310 	add.w	r3, r7, #16
 8008cf2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008cf6:	f107 030f 	add.w	r3, r7, #15
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d08:	1dba      	adds	r2, r7, #6
 8008d0a:	8812      	ldrh	r2, [r2, #0]
 8008d0c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008d0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d12:	3302      	adds	r3, #2
 8008d14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8008d18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d1c:	1d3a      	adds	r2, r7, #4
 8008d1e:	8812      	ldrh	r2, [r2, #0]
 8008d20:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008d22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d26:	3302      	adds	r3, #2
 8008d28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8008d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d30:	1cba      	adds	r2, r7, #2
 8008d32:	8812      	ldrh	r2, [r2, #0]
 8008d34:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8008d36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d3a:	3302      	adds	r3, #2
 8008d3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = Slave_latency;
 8008d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d44:	463a      	mov	r2, r7
 8008d46:	8812      	ldrh	r2, [r2, #0]
 8008d48:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8008d4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d4e:	3302      	adds	r3, #2
 8008d50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8008d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d58:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8008d5c:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8008d5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d62:	3302      	adds	r3, #2
 8008d64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d6c:	2218      	movs	r2, #24
 8008d6e:	2100      	movs	r1, #0
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 f83c 	bl	8008dee <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d76:	233f      	movs	r3, #63	; 0x3f
 8008d78:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 8008d7c:	f240 1381 	movw	r3, #385	; 0x181
 8008d80:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008d84:	230f      	movs	r3, #15
 8008d86:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008d8a:	f107 0310 	add.w	r3, r7, #16
 8008d8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008d92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008d9a:	f107 030f 	add.w	r3, r7, #15
 8008d9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008da2:	2301      	movs	r3, #1
 8008da4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008da8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008dac:	2100      	movs	r1, #0
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 fc24 	bl	80095fc <hci_send_req>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	da01      	bge.n	8008dbe <aci_l2cap_connection_parameter_update_req+0xf6>
    return BLE_STATUS_TIMEOUT;
 8008dba:	23ff      	movs	r3, #255	; 0xff
 8008dbc:	e002      	b.n	8008dc4 <aci_l2cap_connection_parameter_update_req+0xfc>
  return status;
 8008dbe:	f107 030f 	add.w	r3, r7, #15
 8008dc2:	781b      	ldrb	r3, [r3, #0]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bdb0      	pop	{r4, r5, r7, pc}

08008dce <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	60f8      	str	r0, [r7, #12]
 8008dd6:	60b9      	str	r1, [r7, #8]
 8008dd8:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	68b9      	ldr	r1, [r7, #8]
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f008 feda 	bl	8011b98 <memcpy>
 8008de4:	4603      	mov	r3, r0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b084      	sub	sp, #16
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	60f8      	str	r0, [r7, #12]
 8008df6:	60b9      	str	r1, [r7, #8]
 8008df8:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	68b9      	ldr	r1, [r7, #8]
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f008 fed5 	bl	8011bae <memset>
 8008e04:	4603      	mov	r3, r0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
	...

08008e10 <DIS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DIS_Init(void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b088      	sub	sp, #32
 8008e14:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult;

  memset ( &DIS_Context, 0, sizeof(DIS_Context_t) );
 8008e16:	2204      	movs	r2, #4
 8008e18:	2100      	movs	r1, #0
 8008e1a:	4816      	ldr	r0, [pc, #88]	; (8008e74 <DIS_Init+0x64>)
 8008e1c:	f008 fec7 	bl	8011bae <memset>
   */

  /**
   *  Add Device Information Service
   */
  uuid = DEVICE_INFORMATION_SERVICE_UUID;
 8008e20:	f641 030a 	movw	r3, #6154	; 0x180a
 8008e24:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 8008e26:	1d39      	adds	r1, r7, #4
 8008e28:	4b12      	ldr	r3, [pc, #72]	; (8008e74 <DIS_Init+0x64>)
 8008e2a:	9300      	str	r3, [sp, #0]
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	2201      	movs	r2, #1
 8008e30:	2001      	movs	r0, #1
 8008e32:	f7ff f8e5 	bl	8008000 <aci_gatt_add_service>
 8008e36:	4603      	mov	r3, r0
 8008e38:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
  /**
   *  Add Manufacturer Name String Characteristic
   */
  uuid = MANUFACTURER_NAME_UUID;
 8008e3a:	f642 2329 	movw	r3, #10793	; 0x2a29
 8008e3e:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(DIS_Context.DeviceInformationSvcHdle,
 8008e40:	4b0c      	ldr	r3, [pc, #48]	; (8008e74 <DIS_Init+0x64>)
 8008e42:	8818      	ldrh	r0, [r3, #0]
 8008e44:	1d3a      	adds	r2, r7, #4
 8008e46:	4b0c      	ldr	r3, [pc, #48]	; (8008e78 <DIS_Init+0x68>)
 8008e48:	9305      	str	r3, [sp, #20]
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	9304      	str	r3, [sp, #16]
 8008e4e:	230a      	movs	r3, #10
 8008e50:	9303      	str	r3, [sp, #12]
 8008e52:	2300      	movs	r3, #0
 8008e54:	9302      	str	r3, [sp, #8]
 8008e56:	2300      	movs	r3, #0
 8008e58:	9301      	str	r3, [sp, #4]
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	2320      	movs	r3, #32
 8008e60:	2101      	movs	r1, #1
 8008e62:	f7ff f97c 	bl	800815e <aci_gatt_add_char>
 8008e66:	4603      	mov	r3, r0
 8008e68:	71fb      	strb	r3, [r7, #7]
    BLE_DBG_DIS_MSG ("FAILED to add PNP ID Characteristic, Error: %02X !!\n", 
                hciCmdResult);
  }
#endif
      
  return;
 8008e6a:	bf00      	nop
}
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	20000130 	.word	0x20000130
 8008e78:	20000132 	.word	0x20000132

08008e7c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b08a      	sub	sp, #40	; 0x28
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8008e84:	2300      	movs	r3, #0
 8008e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	2bff      	cmp	r3, #255	; 0xff
 8008e96:	d000      	beq.n	8008e9a <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8008e98:	e04d      	b.n	8008f36 <PeerToPeer_Event_Handler+0xba>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8008e9a:	6a3b      	ldr	r3, [r7, #32]
 8008e9c:	3302      	adds	r3, #2
 8008e9e:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	881b      	ldrh	r3, [r3, #0]
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	f640 4301 	movw	r3, #3073	; 0xc01
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d000      	beq.n	8008eb2 <PeerToPeer_Event_Handler+0x36>
          break;
 8008eb0:	e040      	b.n	8008f34 <PeerToPeer_Event_Handler+0xb8>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	3302      	adds	r3, #2
 8008eb6:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	885b      	ldrh	r3, [r3, #2]
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	4b20      	ldr	r3, [pc, #128]	; (8008f44 <PeerToPeer_Event_Handler+0xc8>)
 8008ec2:	889b      	ldrh	r3, [r3, #4]
 8008ec4:	3302      	adds	r3, #2
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d118      	bne.n	8008efc <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	7a1b      	ldrb	r3, [r3, #8]
 8008ed4:	f003 0301 	and.w	r3, r3, #1
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d007      	beq.n	8008eec <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8008edc:	2300      	movs	r3, #0
 8008ede:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8008ee0:	f107 0308 	add.w	r3, r7, #8
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f008 f945 	bl	8011174 <P2PS_STM_App_Notification>
        break;
 8008eea:	e022      	b.n	8008f32 <PeerToPeer_Event_Handler+0xb6>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8008eec:	2301      	movs	r3, #1
 8008eee:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8008ef0:	f107 0308 	add.w	r3, r7, #8
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f008 f93d 	bl	8011174 <P2PS_STM_App_Notification>
        break;
 8008efa:	e01a      	b.n	8008f32 <PeerToPeer_Event_Handler+0xb6>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	885b      	ldrh	r3, [r3, #2]
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	461a      	mov	r2, r3
 8008f04:	4b0f      	ldr	r3, [pc, #60]	; (8008f44 <PeerToPeer_Event_Handler+0xc8>)
 8008f06:	885b      	ldrh	r3, [r3, #2]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d111      	bne.n	8008f32 <PeerToPeer_Event_Handler+0xb6>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 8008f0e:	480e      	ldr	r0, [pc, #56]	; (8008f48 <PeerToPeer_Event_Handler+0xcc>)
 8008f10:	f008 feca 	bl	8011ca8 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8008f14:	2303      	movs	r3, #3
 8008f16:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	88db      	ldrh	r3, [r3, #6]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	3308      	adds	r3, #8
 8008f26:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8008f28:	f107 0308 	add.w	r3, r7, #8
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f008 f921 	bl	8011174 <P2PS_STM_App_Notification>
        break;
 8008f32:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 8008f34:	bf00      	nop
  }

  return(return_value);
 8008f36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3728      	adds	r7, #40	; 0x28
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	20000134 	.word	0x20000134
 8008f48:	080130b8 	.word	0x080130b8

08008f4c <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b08a      	sub	sp, #40	; 0x28
 8008f50:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8008f52:	484a      	ldr	r0, [pc, #296]	; (800907c <P2PS_STM_Init+0x130>)
 8008f54:	f000 f922 	bl	800919c <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8008f58:	238f      	movs	r3, #143	; 0x8f
 8008f5a:	703b      	strb	r3, [r7, #0]
 8008f5c:	23e5      	movs	r3, #229	; 0xe5
 8008f5e:	707b      	strb	r3, [r7, #1]
 8008f60:	23b3      	movs	r3, #179	; 0xb3
 8008f62:	70bb      	strb	r3, [r7, #2]
 8008f64:	23d5      	movs	r3, #213	; 0xd5
 8008f66:	70fb      	strb	r3, [r7, #3]
 8008f68:	232e      	movs	r3, #46	; 0x2e
 8008f6a:	713b      	strb	r3, [r7, #4]
 8008f6c:	237f      	movs	r3, #127	; 0x7f
 8008f6e:	717b      	strb	r3, [r7, #5]
 8008f70:	234a      	movs	r3, #74	; 0x4a
 8008f72:	71bb      	strb	r3, [r7, #6]
 8008f74:	2398      	movs	r3, #152	; 0x98
 8008f76:	71fb      	strb	r3, [r7, #7]
 8008f78:	232a      	movs	r3, #42	; 0x2a
 8008f7a:	723b      	strb	r3, [r7, #8]
 8008f7c:	2348      	movs	r3, #72	; 0x48
 8008f7e:	727b      	strb	r3, [r7, #9]
 8008f80:	237a      	movs	r3, #122	; 0x7a
 8008f82:	72bb      	strb	r3, [r7, #10]
 8008f84:	23cc      	movs	r3, #204	; 0xcc
 8008f86:	72fb      	strb	r3, [r7, #11]
 8008f88:	2340      	movs	r3, #64	; 0x40
 8008f8a:	733b      	strb	r3, [r7, #12]
 8008f8c:	23fe      	movs	r3, #254	; 0xfe
 8008f8e:	737b      	strb	r3, [r7, #13]
 8008f90:	2300      	movs	r3, #0
 8008f92:	73bb      	strb	r3, [r7, #14]
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8008f98:	4639      	mov	r1, r7
 8008f9a:	4b39      	ldr	r3, [pc, #228]	; (8009080 <P2PS_STM_Init+0x134>)
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	2308      	movs	r3, #8
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	2002      	movs	r0, #2
 8008fa4:	f7ff f82c 	bl	8008000 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8008fa8:	2319      	movs	r3, #25
 8008faa:	703b      	strb	r3, [r7, #0]
 8008fac:	23ed      	movs	r3, #237	; 0xed
 8008fae:	707b      	strb	r3, [r7, #1]
 8008fb0:	2382      	movs	r3, #130	; 0x82
 8008fb2:	70bb      	strb	r3, [r7, #2]
 8008fb4:	23ae      	movs	r3, #174	; 0xae
 8008fb6:	70fb      	strb	r3, [r7, #3]
 8008fb8:	23ed      	movs	r3, #237	; 0xed
 8008fba:	713b      	strb	r3, [r7, #4]
 8008fbc:	2321      	movs	r3, #33	; 0x21
 8008fbe:	717b      	strb	r3, [r7, #5]
 8008fc0:	234c      	movs	r3, #76	; 0x4c
 8008fc2:	71bb      	strb	r3, [r7, #6]
 8008fc4:	239d      	movs	r3, #157	; 0x9d
 8008fc6:	71fb      	strb	r3, [r7, #7]
 8008fc8:	2341      	movs	r3, #65	; 0x41
 8008fca:	723b      	strb	r3, [r7, #8]
 8008fcc:	2345      	movs	r3, #69	; 0x45
 8008fce:	727b      	strb	r3, [r7, #9]
 8008fd0:	2322      	movs	r3, #34	; 0x22
 8008fd2:	72bb      	strb	r3, [r7, #10]
 8008fd4:	238e      	movs	r3, #142	; 0x8e
 8008fd6:	72fb      	strb	r3, [r7, #11]
 8008fd8:	2341      	movs	r3, #65	; 0x41
 8008fda:	733b      	strb	r3, [r7, #12]
 8008fdc:	23fe      	movs	r3, #254	; 0xfe
 8008fde:	737b      	strb	r3, [r7, #13]
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	73bb      	strb	r3, [r7, #14]
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8008fe8:	4b25      	ldr	r3, [pc, #148]	; (8009080 <P2PS_STM_Init+0x134>)
 8008fea:	8818      	ldrh	r0, [r3, #0]
 8008fec:	463a      	mov	r2, r7
 8008fee:	4b25      	ldr	r3, [pc, #148]	; (8009084 <P2PS_STM_Init+0x138>)
 8008ff0:	9305      	str	r3, [sp, #20]
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	9304      	str	r3, [sp, #16]
 8008ff6:	230a      	movs	r3, #10
 8008ff8:	9303      	str	r3, [sp, #12]
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	9302      	str	r3, [sp, #8]
 8008ffe:	2300      	movs	r3, #0
 8009000:	9301      	str	r3, [sp, #4]
 8009002:	2306      	movs	r3, #6
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	2302      	movs	r3, #2
 8009008:	2102      	movs	r1, #2
 800900a:	f7ff f8a8 	bl	800815e <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800900e:	2319      	movs	r3, #25
 8009010:	703b      	strb	r3, [r7, #0]
 8009012:	23ed      	movs	r3, #237	; 0xed
 8009014:	707b      	strb	r3, [r7, #1]
 8009016:	2382      	movs	r3, #130	; 0x82
 8009018:	70bb      	strb	r3, [r7, #2]
 800901a:	23ae      	movs	r3, #174	; 0xae
 800901c:	70fb      	strb	r3, [r7, #3]
 800901e:	23ed      	movs	r3, #237	; 0xed
 8009020:	713b      	strb	r3, [r7, #4]
 8009022:	2321      	movs	r3, #33	; 0x21
 8009024:	717b      	strb	r3, [r7, #5]
 8009026:	234c      	movs	r3, #76	; 0x4c
 8009028:	71bb      	strb	r3, [r7, #6]
 800902a:	239d      	movs	r3, #157	; 0x9d
 800902c:	71fb      	strb	r3, [r7, #7]
 800902e:	2341      	movs	r3, #65	; 0x41
 8009030:	723b      	strb	r3, [r7, #8]
 8009032:	2345      	movs	r3, #69	; 0x45
 8009034:	727b      	strb	r3, [r7, #9]
 8009036:	2322      	movs	r3, #34	; 0x22
 8009038:	72bb      	strb	r3, [r7, #10]
 800903a:	238e      	movs	r3, #142	; 0x8e
 800903c:	72fb      	strb	r3, [r7, #11]
 800903e:	2342      	movs	r3, #66	; 0x42
 8009040:	733b      	strb	r3, [r7, #12]
 8009042:	23fe      	movs	r3, #254	; 0xfe
 8009044:	737b      	strb	r3, [r7, #13]
 8009046:	2300      	movs	r3, #0
 8009048:	73bb      	strb	r3, [r7, #14]
 800904a:	2300      	movs	r3, #0
 800904c:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800904e:	4b0c      	ldr	r3, [pc, #48]	; (8009080 <P2PS_STM_Init+0x134>)
 8009050:	8818      	ldrh	r0, [r3, #0]
 8009052:	463a      	mov	r2, r7
 8009054:	4b0c      	ldr	r3, [pc, #48]	; (8009088 <P2PS_STM_Init+0x13c>)
 8009056:	9305      	str	r3, [sp, #20]
 8009058:	2301      	movs	r3, #1
 800905a:	9304      	str	r3, [sp, #16]
 800905c:	230a      	movs	r3, #10
 800905e:	9303      	str	r3, [sp, #12]
 8009060:	2301      	movs	r3, #1
 8009062:	9302      	str	r3, [sp, #8]
 8009064:	2300      	movs	r3, #0
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	2310      	movs	r3, #16
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	2302      	movs	r3, #2
 800906e:	2102      	movs	r1, #2
 8009070:	f7ff f875 	bl	800815e <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8009074:	bf00      	nop
}
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	08008e7d 	.word	0x08008e7d
 8009080:	20000134 	.word	0x20000134
 8009084:	20000136 	.word	0x20000136
 8009088:	20000138 	.word	0x20000138

0800908c <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0
  return;
 8009090:	bf00      	nop
}
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800909a:	b480      	push	{r7}
 800909c:	af00      	add	r7, sp, #0
  return;
 800909e:	bf00      	nop
}
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <EDS_STM_Init>:
__weak void DIS_Init( void )
{
  return;
}
__weak void EDS_STM_Init( void )
{
 80090a8:	b480      	push	{r7}
 80090aa:	af00      	add	r7, sp, #0
  return;
 80090ac:	bf00      	nop
}
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 80090b6:	b480      	push	{r7}
 80090b8:	af00      	add	r7, sp, #0
  return;
 80090ba:	bf00      	nop
}
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <HRS_Init>:
__weak void HRS_Init( void )
{
 80090c4:	b480      	push	{r7}
 80090c6:	af00      	add	r7, sp, #0
  return;
 80090c8:	bf00      	nop
}
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <HTS_Init>:
__weak void HTS_Init( void )
{
 80090d2:	b480      	push	{r7}
 80090d4:	af00      	add	r7, sp, #0
  return;
 80090d6:	bf00      	nop
}
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <IAS_Init>:
__weak void IAS_Init( void )
{
 80090e0:	b480      	push	{r7}
 80090e2:	af00      	add	r7, sp, #0
  return;
 80090e4:	bf00      	nop
}
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <LLS_Init>:
__weak void LLS_Init( void )
{
 80090ee:	b480      	push	{r7}
 80090f0:	af00      	add	r7, sp, #0
  return;
 80090f2:	bf00      	nop
}
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <MOTENV_STM_Init>:
__weak void TPS_Init( void )
{
  return;
}
__weak void MOTENV_STM_Init( void )
{
 80090fc:	b480      	push	{r7}
 80090fe:	af00      	add	r7, sp, #0
  return;
 8009100:	bf00      	nop
}
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800910a:	b480      	push	{r7}
 800910c:	af00      	add	r7, sp, #0
  return;
 800910e:	bf00      	nop
}
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <MESH_Init>:
__weak void MESH_Init( void )
{
 8009118:	b480      	push	{r7}
 800911a:	af00      	add	r7, sp, #0
  return;
 800911c:	bf00      	nop
}
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8009126:	b480      	push	{r7}
 8009128:	af00      	add	r7, sp, #0
  return;
 800912a:	bf00      	nop
}
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009138:	4b04      	ldr	r3, [pc, #16]	; (800914c <SVCCTL_Init+0x18>)
 800913a:	2200      	movs	r2, #0
 800913c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800913e:	4b04      	ldr	r3, [pc, #16]	; (8009150 <SVCCTL_Init+0x1c>)
 8009140:	2200      	movs	r2, #0
 8009142:	731a      	strb	r2, [r3, #12]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009144:	f000 f806 	bl	8009154 <SVCCTL_SvcInit>

  return;
 8009148:	bf00      	nop
}
 800914a:	bd80      	pop	{r7, pc}
 800914c:	2000013c 	.word	0x2000013c
 8009150:	2000015c 	.word	0x2000015c

08009154 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	af00      	add	r7, sp, #0
  BLS_Init();
 8009158:	f7ff ff98 	bl	800908c <BLS_Init>

  CRS_STM_Init();
 800915c:	f7ff ff9d 	bl	800909a <CRS_STM_Init>

  DIS_Init();
 8009160:	f7ff fe56 	bl	8008e10 <DIS_Init>

  EDS_STM_Init();
 8009164:	f7ff ffa0 	bl	80090a8 <EDS_STM_Init>

  HIDS_Init();
 8009168:	f7ff ffa5 	bl	80090b6 <HIDS_Init>

  HRS_Init();
 800916c:	f7ff ffaa 	bl	80090c4 <HRS_Init>

  HTS_Init();
 8009170:	f7ff ffaf 	bl	80090d2 <HTS_Init>

  IAS_Init();
 8009174:	f7ff ffb4 	bl	80090e0 <IAS_Init>

  LLS_Init();
 8009178:	f7ff ffb9 	bl	80090ee <LLS_Init>

  TPS_Init();
 800917c:	f000 f8b0 	bl	80092e0 <TPS_Init>

  MOTENV_STM_Init();
 8009180:	f7ff ffbc 	bl	80090fc <MOTENV_STM_Init>

  P2PS_STM_Init();
 8009184:	f7ff fee2 	bl	8008f4c <P2PS_STM_Init>

  OTAS_STM_Init();
 8009188:	f7ff ffbf 	bl	800910a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800918c:	f7ff ffcb 	bl	8009126 <BVOPUS_STM_Init>

  MESH_Init();
 8009190:	f7ff ffc2 	bl	8009118 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8009194:	f006 fe6e 	bl	800fe74 <SVCCTL_InitCustomSvc>
  
  return;
 8009198:	bf00      	nop
}
 800919a:	bd80      	pop	{r7, pc}

0800919c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80091a4:	4b09      	ldr	r3, [pc, #36]	; (80091cc <SVCCTL_RegisterSvcHandler+0x30>)
 80091a6:	7f1b      	ldrb	r3, [r3, #28]
 80091a8:	4619      	mov	r1, r3
 80091aa:	4a08      	ldr	r2, [pc, #32]	; (80091cc <SVCCTL_RegisterSvcHandler+0x30>)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80091b2:	4b06      	ldr	r3, [pc, #24]	; (80091cc <SVCCTL_RegisterSvcHandler+0x30>)
 80091b4:	7f1b      	ldrb	r3, [r3, #28]
 80091b6:	3301      	adds	r3, #1
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	4b04      	ldr	r3, [pc, #16]	; (80091cc <SVCCTL_RegisterSvcHandler+0x30>)
 80091bc:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80091be:	bf00      	nop
}
 80091c0:	370c      	adds	r7, #12
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	2000013c 	.word	0x2000013c

080091d0 <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 80091d8:	4b09      	ldr	r3, [pc, #36]	; (8009200 <SVCCTL_RegisterCltHandler+0x30>)
 80091da:	7b1b      	ldrb	r3, [r3, #12]
 80091dc:	4619      	mov	r1, r3
 80091de:	4a08      	ldr	r2, [pc, #32]	; (8009200 <SVCCTL_RegisterCltHandler+0x30>)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 80091e6:	4b06      	ldr	r3, [pc, #24]	; (8009200 <SVCCTL_RegisterCltHandler+0x30>)
 80091e8:	7b1b      	ldrb	r3, [r3, #12]
 80091ea:	3301      	adds	r3, #1
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	4b04      	ldr	r3, [pc, #16]	; (8009200 <SVCCTL_RegisterCltHandler+0x30>)
 80091f0:	731a      	strb	r2, [r3, #12]
#else
  (void)(pfBLE_SVC_Client_Event_Handler);
#endif

  return;
 80091f2:	bf00      	nop
}
 80091f4:	370c      	adds	r7, #12
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	2000015c 	.word	0x2000015c

08009204 <SVCCTL_UserEvtRx>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	3301      	adds	r3, #1
 8009210:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8009212:	2300      	movs	r3, #0
 8009214:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	2bff      	cmp	r3, #255	; 0xff
 800921c:	d000      	beq.n	8009220 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800921e:	e03f      	b.n	80092a0 <SVCCTL_UserEvtRx+0x9c>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	3302      	adds	r3, #2
 8009224:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	881b      	ldrh	r3, [r3, #0]
 800922a:	b29b      	uxth	r3, r3
 800922c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009230:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009234:	d000      	beq.n	8009238 <SVCCTL_UserEvtRx+0x34>
          break;
 8009236:	e032      	b.n	800929e <SVCCTL_UserEvtRx+0x9a>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009238:	2300      	movs	r3, #0
 800923a:	757b      	strb	r3, [r7, #21]
 800923c:	e00d      	b.n	800925a <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800923e:	7d7b      	ldrb	r3, [r7, #21]
 8009240:	4a25      	ldr	r2, [pc, #148]	; (80092d8 <SVCCTL_UserEvtRx+0xd4>)
 8009242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	4798      	blx	r3
 800924a:	4603      	mov	r3, r0
 800924c:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800924e:	7dfb      	ldrb	r3, [r7, #23]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d108      	bne.n	8009266 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009254:	7d7b      	ldrb	r3, [r7, #21]
 8009256:	3301      	adds	r3, #1
 8009258:	757b      	strb	r3, [r7, #21]
 800925a:	4b1f      	ldr	r3, [pc, #124]	; (80092d8 <SVCCTL_UserEvtRx+0xd4>)
 800925c:	7f1b      	ldrb	r3, [r3, #28]
 800925e:	7d7a      	ldrb	r2, [r7, #21]
 8009260:	429a      	cmp	r2, r3
 8009262:	d3ec      	bcc.n	800923e <SVCCTL_UserEvtRx+0x3a>
 8009264:	e000      	b.n	8009268 <SVCCTL_UserEvtRx+0x64>
              break;
 8009266:	bf00      	nop
          event_notification_status = SVCCTL_EvtNotAck;
 8009268:	2300      	movs	r3, #0
 800926a:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800926c:	2300      	movs	r3, #0
 800926e:	757b      	strb	r3, [r7, #21]
 8009270:	e00d      	b.n	800928e <SVCCTL_UserEvtRx+0x8a>
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 8009272:	7d7b      	ldrb	r3, [r7, #21]
 8009274:	4a19      	ldr	r2, [pc, #100]	; (80092dc <SVCCTL_UserEvtRx+0xd8>)
 8009276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	4798      	blx	r3
 800927e:	4603      	mov	r3, r0
 8009280:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 8009282:	7dfb      	ldrb	r3, [r7, #23]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d108      	bne.n	800929a <SVCCTL_UserEvtRx+0x96>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8009288:	7d7b      	ldrb	r3, [r7, #21]
 800928a:	3301      	adds	r3, #1
 800928c:	757b      	strb	r3, [r7, #21]
 800928e:	4b13      	ldr	r3, [pc, #76]	; (80092dc <SVCCTL_UserEvtRx+0xd8>)
 8009290:	7b1b      	ldrb	r3, [r3, #12]
 8009292:	7d7a      	ldrb	r2, [r7, #21]
 8009294:	429a      	cmp	r2, r3
 8009296:	d3ec      	bcc.n	8009272 <SVCCTL_UserEvtRx+0x6e>
          break;
 8009298:	e000      	b.n	800929c <SVCCTL_UserEvtRx+0x98>
              break;
 800929a:	bf00      	nop
          break;
 800929c:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800929e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 80092a0:	7dfb      	ldrb	r3, [r7, #23]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d009      	beq.n	80092ba <SVCCTL_UserEvtRx+0xb6>
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d00a      	beq.n	80092c0 <SVCCTL_UserEvtRx+0xbc>
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10b      	bne.n	80092c6 <SVCCTL_UserEvtRx+0xc2>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f006 f8a8 	bl	800f404 <SVCCTL_App_Notification>
 80092b4:	4603      	mov	r3, r0
 80092b6:	75bb      	strb	r3, [r7, #22]
      break;
 80092b8:	e008      	b.n	80092cc <SVCCTL_UserEvtRx+0xc8>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80092ba:	2301      	movs	r3, #1
 80092bc:	75bb      	strb	r3, [r7, #22]
      break;
 80092be:	e005      	b.n	80092cc <SVCCTL_UserEvtRx+0xc8>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80092c0:	2300      	movs	r3, #0
 80092c2:	75bb      	strb	r3, [r7, #22]
      break;
 80092c4:	e002      	b.n	80092cc <SVCCTL_UserEvtRx+0xc8>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80092c6:	2301      	movs	r3, #1
 80092c8:	75bb      	strb	r3, [r7, #22]
      break;
 80092ca:	bf00      	nop
  }

  return (return_status);
 80092cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3718      	adds	r7, #24
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	2000013c 	.word	0x2000013c
 80092dc:	2000015c 	.word	0x2000015c

080092e0 <TPS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void TPS_Init(void)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b088      	sub	sp, #32
 80092e4:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult = BLE_STATUS_SUCCESS;
 80092e6:	2300      	movs	r3, #0
 80092e8:	71fb      	strb	r3, [r7, #7]
   *
   * Max_Attribute_Records = 2*no_of_char + 1
   * service_max_attribute_record = 1 for Tx Power service +
   *                                2 for Tx Power Level measurement characteristic +
   */
  uuid = TX_POWER_SERVICE_UUID;
 80092ea:	f641 0304 	movw	r3, #6148	; 0x1804
 80092ee:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 80092f0:	1d39      	adds	r1, r7, #4
 80092f2:	4b12      	ldr	r3, [pc, #72]	; (800933c <TPS_Init+0x5c>)
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	2303      	movs	r3, #3
 80092f8:	2201      	movs	r2, #1
 80092fa:	2001      	movs	r0, #1
 80092fc:	f7fe fe80 	bl	8008000 <aci_gatt_add_service>
 8009300:	4603      	mov	r3, r0
 8009302:	71fb      	strb	r3, [r7, #7]
  }
  
  /**
   *  Add Tx Power Level Characteristic
   */
  uuid = TX_POWER_LEVEL_CHARACTERISTIC_UUID;
 8009304:	f642 2307 	movw	r3, #10759	; 0x2a07
 8009308:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(TPS_Context.SvcHdle,
 800930a:	4b0c      	ldr	r3, [pc, #48]	; (800933c <TPS_Init+0x5c>)
 800930c:	8818      	ldrh	r0, [r3, #0]
 800930e:	1d3a      	adds	r2, r7, #4
 8009310:	4b0b      	ldr	r3, [pc, #44]	; (8009340 <TPS_Init+0x60>)
 8009312:	9305      	str	r3, [sp, #20]
 8009314:	2301      	movs	r3, #1
 8009316:	9304      	str	r3, [sp, #16]
 8009318:	230a      	movs	r3, #10
 800931a:	9303      	str	r3, [sp, #12]
 800931c:	2300      	movs	r3, #0
 800931e:	9302      	str	r3, [sp, #8]
 8009320:	2300      	movs	r3, #0
 8009322:	9301      	str	r3, [sp, #4]
 8009324:	2302      	movs	r3, #2
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	2301      	movs	r3, #1
 800932a:	2101      	movs	r1, #1
 800932c:	f7fe ff17 	bl	800815e <aci_gatt_add_char>
 8009330:	4603      	mov	r3, r0
 8009332:	71fb      	strb	r3, [r7, #7]
  {
    BLE_DBG_TPS_MSG ("FAILED to add Tx Power Level Characteristic, Error: %02X !!\n", 
                        hciCmdResult);
  }

  return;
 8009334:	bf00      	nop
}
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	2000016c 	.word	0x2000016c
 8009340:	2000016e 	.word	0x2000016e

08009344 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b088      	sub	sp, #32
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800934c:	f107 030c 	add.w	r3, r7, #12
 8009350:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	2121      	movs	r1, #33	; 0x21
 800935c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009360:	f000 fae2 	bl	8009928 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	330b      	adds	r3, #11
 8009368:	78db      	ldrb	r3, [r3, #3]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3720      	adds	r7, #32
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <SHCI_C2_THREAD_Init>:

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b086      	sub	sp, #24
 8009376:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009378:	1d3b      	adds	r3, r7, #4
 800937a:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	2200      	movs	r2, #0
 8009380:	2100      	movs	r1, #0
 8009382:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8009386:	f000 facf 	bl	8009928 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	330b      	adds	r3, #11
 800938e:	78db      	ldrb	r3, [r3, #3]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b088      	sub	sp, #32
 800939c:	af00      	add	r7, sp, #0
 800939e:	4603      	mov	r3, r0
 80093a0:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80093a2:	f107 030c 	add.w	r3, r7, #12
 80093a6:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 80093a8:	79fb      	ldrb	r3, [r7, #7]
 80093aa:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 80093ac:	f107 020c 	add.w	r2, r7, #12
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	2101      	movs	r1, #1
 80093b4:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 80093b8:	f000 fab6 	bl	8009928 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	330b      	adds	r3, #11
 80093c0:	78db      	ldrb	r3, [r3, #3]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3720      	adds	r7, #32
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
	...

080093cc <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80093cc:	b480      	push	{r7}
 80093ce:	b08b      	sub	sp, #44	; 0x2c
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80093d4:	2300      	movs	r3, #0
 80093d6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80093d8:	2300      	movs	r3, #0
 80093da:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80093dc:	2300      	movs	r3, #0
 80093de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80093e0:	2300      	movs	r3, #0
 80093e2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80093e4:	2300      	movs	r3, #0
 80093e6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80093e8:	2300      	movs	r3, #0
 80093ea:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80093ec:	2300      	movs	r3, #0
 80093ee:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80093f4:	4b4a      	ldr	r3, [pc, #296]	; (8009520 <SHCI_GetWirelessFwInfo+0x154>)
 80093f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80093fc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009406:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a44      	ldr	r2, [pc, #272]	; (8009524 <SHCI_GetWirelessFwInfo+0x158>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d10f      	bne.n	8009438 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	695b      	ldr	r3, [r3, #20]
 800941c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	69db      	ldr	r3, [r3, #28]
 8009428:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	617b      	str	r3, [r7, #20]
 8009436:	e01a      	b.n	800946e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */

    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009440:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009444:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	695b      	ldr	r3, [r3, #20]
 8009454:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800946e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009470:	0e1b      	lsrs	r3, r3, #24
 8009472:	b2da      	uxtb	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947a:	0c1b      	lsrs	r3, r3, #16
 800947c:	b2da      	uxtb	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009484:	0a1b      	lsrs	r3, r3, #8
 8009486:	b2da      	uxtb	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	091b      	lsrs	r3, r3, #4
 8009490:	b2db      	uxtb	r3, r3
 8009492:	f003 030f 	and.w	r3, r3, #15
 8009496:	b2da      	uxtb	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800949c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	f003 030f 	and.w	r3, r3, #15
 80094a4:	b2da      	uxtb	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	0e1b      	lsrs	r3, r3, #24
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80094b4:	6a3b      	ldr	r3, [r7, #32]
 80094b6:	0c1b      	lsrs	r3, r3, #16
 80094b8:	b2da      	uxtb	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80094be:	6a3b      	ldr	r3, [r7, #32]
 80094c0:	0a1b      	lsrs	r3, r3, #8
 80094c2:	b2da      	uxtb	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80094c8:	6a3b      	ldr	r3, [r7, #32]
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	b2da      	uxtb	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	0e1b      	lsrs	r3, r3, #24
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	0c1b      	lsrs	r3, r3, #16
 80094e6:	b2da      	uxtb	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	0a1b      	lsrs	r3, r3, #8
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	0e1b      	lsrs	r3, r3, #24
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	0c1b      	lsrs	r3, r3, #16
 8009504:	b2da      	uxtb	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	b2da      	uxtb	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	372c      	adds	r7, #44	; 0x2c
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr
 8009520:	58004000 	.word	0x58004000
 8009524:	a94656b9 	.word	0xa94656b9

08009528 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	4a08      	ldr	r2, [pc, #32]	; (8009558 <hci_init+0x30>)
 8009538:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800953a:	4a08      	ldr	r2, [pc, #32]	; (800955c <hci_init+0x34>)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8009540:	4806      	ldr	r0, [pc, #24]	; (800955c <hci_init+0x34>)
 8009542:	f000 f973 	bl	800982c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4618      	mov	r0, r3
 800954c:	f000 f8d4 	bl	80096f8 <TlInit>

  return;
 8009550:	bf00      	nop
}
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	2000028c 	.word	0x2000028c
 800955c:	20000264 	.word	0x20000264

08009560 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009566:	4822      	ldr	r0, [pc, #136]	; (80095f0 <hci_user_evt_proc+0x90>)
 8009568:	f001 f9e8 	bl	800a93c <LST_is_empty>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d12b      	bne.n	80095ca <hci_user_evt_proc+0x6a>
 8009572:	4b20      	ldr	r3, [pc, #128]	; (80095f4 <hci_user_evt_proc+0x94>)
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d027      	beq.n	80095ca <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800957a:	f107 030c 	add.w	r3, r7, #12
 800957e:	4619      	mov	r1, r3
 8009580:	481b      	ldr	r0, [pc, #108]	; (80095f0 <hci_user_evt_proc+0x90>)
 8009582:	f001 fa62 	bl	800aa4a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009586:	4b1c      	ldr	r3, [pc, #112]	; (80095f8 <hci_user_evt_proc+0x98>)
 8009588:	69db      	ldr	r3, [r3, #28]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d00c      	beq.n	80095a8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8009592:	2301      	movs	r3, #1
 8009594:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009596:	4b18      	ldr	r3, [pc, #96]	; (80095f8 <hci_user_evt_proc+0x98>)
 8009598:	69db      	ldr	r3, [r3, #28]
 800959a:	1d3a      	adds	r2, r7, #4
 800959c:	4610      	mov	r0, r2
 800959e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80095a0:	793a      	ldrb	r2, [r7, #4]
 80095a2:	4b14      	ldr	r3, [pc, #80]	; (80095f4 <hci_user_evt_proc+0x94>)
 80095a4:	701a      	strb	r2, [r3, #0]
 80095a6:	e002      	b.n	80095ae <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80095a8:	4b12      	ldr	r3, [pc, #72]	; (80095f4 <hci_user_evt_proc+0x94>)
 80095aa:	2201      	movs	r2, #1
 80095ac:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80095ae:	4b11      	ldr	r3, [pc, #68]	; (80095f4 <hci_user_evt_proc+0x94>)
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d004      	beq.n	80095c0 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	4618      	mov	r0, r3
 80095ba:	f000 fc7b 	bl	8009eb4 <TL_MM_EvtDone>
 80095be:	e004      	b.n	80095ca <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	4619      	mov	r1, r3
 80095c4:	480a      	ldr	r0, [pc, #40]	; (80095f0 <hci_user_evt_proc+0x90>)
 80095c6:	f001 f9d9 	bl	800a97c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80095ca:	4809      	ldr	r0, [pc, #36]	; (80095f0 <hci_user_evt_proc+0x90>)
 80095cc:	f001 f9b6 	bl	800a93c <LST_is_empty>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d107      	bne.n	80095e6 <hci_user_evt_proc+0x86>
 80095d6:	4b07      	ldr	r3, [pc, #28]	; (80095f4 <hci_user_evt_proc+0x94>)
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d003      	beq.n	80095e6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80095de:	4804      	ldr	r0, [pc, #16]	; (80095f0 <hci_user_evt_proc+0x90>)
 80095e0:	f006 fbda 	bl	800fd98 <hci_notify_asynch_evt>
  }


  return;
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop
}
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	20000174 	.word	0x20000174
 80095f4:	20000180 	.word	0x20000180
 80095f8:	20000264 	.word	0x20000264

080095fc <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b088      	sub	sp, #32
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	460b      	mov	r3, r1
 8009606:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009608:	2000      	movs	r0, #0
 800960a:	f000 f8cb 	bl	80097a4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800960e:	2300      	movs	r3, #0
 8009610:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	885b      	ldrh	r3, [r3, #2]
 8009616:	b21b      	sxth	r3, r3
 8009618:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800961c:	b21a      	sxth	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	881b      	ldrh	r3, [r3, #0]
 8009622:	029b      	lsls	r3, r3, #10
 8009624:	b21b      	sxth	r3, r3
 8009626:	4313      	orrs	r3, r2
 8009628:	b21b      	sxth	r3, r3
 800962a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	b2d9      	uxtb	r1, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	689a      	ldr	r2, [r3, #8]
 8009636:	8bbb      	ldrh	r3, [r7, #28]
 8009638:	4618      	mov	r0, r3
 800963a:	f000 f88d 	bl	8009758 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800963e:	e04e      	b.n	80096de <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8009640:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009644:	f006 fbc8 	bl	800fdd8 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009648:	e043      	b.n	80096d2 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800964a:	f107 030c 	add.w	r3, r7, #12
 800964e:	4619      	mov	r1, r3
 8009650:	4828      	ldr	r0, [pc, #160]	; (80096f4 <hci_send_req+0xf8>)
 8009652:	f001 f9fa 	bl	800aa4a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	7a5b      	ldrb	r3, [r3, #9]
 800965a:	2b0f      	cmp	r3, #15
 800965c:	d114      	bne.n	8009688 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	330b      	adds	r3, #11
 8009662:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	885b      	ldrh	r3, [r3, #2]
 8009668:	b29b      	uxth	r3, r3
 800966a:	8bba      	ldrh	r2, [r7, #28]
 800966c:	429a      	cmp	r2, r3
 800966e:	d104      	bne.n	800967a <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	7812      	ldrb	r2, [r2, #0]
 8009678:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	785b      	ldrb	r3, [r3, #1]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d027      	beq.n	80096d2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009682:	2301      	movs	r3, #1
 8009684:	77fb      	strb	r3, [r7, #31]
 8009686:	e024      	b.n	80096d2 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	330b      	adds	r3, #11
 800968c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009694:	b29b      	uxth	r3, r3
 8009696:	8bba      	ldrh	r2, [r7, #28]
 8009698:	429a      	cmp	r2, r3
 800969a:	d114      	bne.n	80096c6 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	7a9b      	ldrb	r3, [r3, #10]
 80096a0:	3b03      	subs	r3, #3
 80096a2:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	695a      	ldr	r2, [r3, #20]
 80096a8:	7dfb      	ldrb	r3, [r7, #23]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	bfa8      	it	ge
 80096ae:	461a      	movge	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6918      	ldr	r0, [r3, #16]
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	1cd9      	adds	r1, r3, #3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	695b      	ldr	r3, [r3, #20]
 80096c0:	461a      	mov	r2, r3
 80096c2:	f008 fa69 	bl	8011b98 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80096ce:	2301      	movs	r3, #1
 80096d0:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80096d2:	4808      	ldr	r0, [pc, #32]	; (80096f4 <hci_send_req+0xf8>)
 80096d4:	f001 f932 	bl	800a93c <LST_is_empty>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d0b5      	beq.n	800964a <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80096de:	7ffb      	ldrb	r3, [r7, #31]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d0ad      	beq.n	8009640 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80096e4:	2001      	movs	r0, #1
 80096e6:	f000 f85d 	bl	80097a4 <NotifyCmdStatus>

  return 0;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3720      	adds	r7, #32
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	20000284 	.word	0x20000284

080096f8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009700:	480f      	ldr	r0, [pc, #60]	; (8009740 <TlInit+0x48>)
 8009702:	f001 f90b 	bl	800a91c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009706:	4a0f      	ldr	r2, [pc, #60]	; (8009744 <TlInit+0x4c>)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800970c:	480e      	ldr	r0, [pc, #56]	; (8009748 <TlInit+0x50>)
 800970e:	f001 f905 	bl	800a91c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009712:	4b0e      	ldr	r3, [pc, #56]	; (800974c <TlInit+0x54>)
 8009714:	2201      	movs	r2, #1
 8009716:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009718:	4b0d      	ldr	r3, [pc, #52]	; (8009750 <TlInit+0x58>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00a      	beq.n	8009736 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009724:	4b0b      	ldr	r3, [pc, #44]	; (8009754 <TlInit+0x5c>)
 8009726:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009728:	4b09      	ldr	r3, [pc, #36]	; (8009750 <TlInit+0x58>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f107 0208 	add.w	r2, r7, #8
 8009730:	4610      	mov	r0, r2
 8009732:	4798      	blx	r3
  }

  return;
 8009734:	bf00      	nop
 8009736:	bf00      	nop
}
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	20000284 	.word	0x20000284
 8009744:	2000017c 	.word	0x2000017c
 8009748:	20000174 	.word	0x20000174
 800974c:	20000180 	.word	0x20000180
 8009750:	20000264 	.word	0x20000264
 8009754:	080097e5 	.word	0x080097e5

08009758 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	4603      	mov	r3, r0
 8009760:	603a      	str	r2, [r7, #0]
 8009762:	80fb      	strh	r3, [r7, #6]
 8009764:	460b      	mov	r3, r1
 8009766:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009768:	4b0c      	ldr	r3, [pc, #48]	; (800979c <SendCmd+0x44>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	88fa      	ldrh	r2, [r7, #6]
 800976e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009772:	4b0a      	ldr	r3, [pc, #40]	; (800979c <SendCmd+0x44>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	797a      	ldrb	r2, [r7, #5]
 8009778:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800977a:	4b08      	ldr	r3, [pc, #32]	; (800979c <SendCmd+0x44>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	330c      	adds	r3, #12
 8009780:	797a      	ldrb	r2, [r7, #5]
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	4618      	mov	r0, r3
 8009786:	f008 fa07 	bl	8011b98 <memcpy>

  hciContext.io.Send(0,0);
 800978a:	4b05      	ldr	r3, [pc, #20]	; (80097a0 <SendCmd+0x48>)
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	2100      	movs	r1, #0
 8009790:	2000      	movs	r0, #0
 8009792:	4798      	blx	r3

  return;
 8009794:	bf00      	nop
}
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	2000017c 	.word	0x2000017c
 80097a0:	20000264 	.word	0x20000264

080097a4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80097ae:	79fb      	ldrb	r3, [r7, #7]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d108      	bne.n	80097c6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80097b4:	4b0a      	ldr	r3, [pc, #40]	; (80097e0 <NotifyCmdStatus+0x3c>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00d      	beq.n	80097d8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80097bc:	4b08      	ldr	r3, [pc, #32]	; (80097e0 <NotifyCmdStatus+0x3c>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2000      	movs	r0, #0
 80097c2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80097c4:	e008      	b.n	80097d8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80097c6:	4b06      	ldr	r3, [pc, #24]	; (80097e0 <NotifyCmdStatus+0x3c>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d004      	beq.n	80097d8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80097ce:	4b04      	ldr	r3, [pc, #16]	; (80097e0 <NotifyCmdStatus+0x3c>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2001      	movs	r0, #1
 80097d4:	4798      	blx	r3
  return;
 80097d6:	bf00      	nop
 80097d8:	bf00      	nop
}
 80097da:	3708      	adds	r7, #8
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	2000028c 	.word	0x2000028c

080097e4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	7a5b      	ldrb	r3, [r3, #9]
 80097f0:	2b0f      	cmp	r3, #15
 80097f2:	d003      	beq.n	80097fc <TlEvtReceived+0x18>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	7a5b      	ldrb	r3, [r3, #9]
 80097f8:	2b0e      	cmp	r3, #14
 80097fa:	d107      	bne.n	800980c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80097fc:	6879      	ldr	r1, [r7, #4]
 80097fe:	4809      	ldr	r0, [pc, #36]	; (8009824 <TlEvtReceived+0x40>)
 8009800:	f001 f8e0 	bl	800a9c4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009804:	2000      	movs	r0, #0
 8009806:	f006 fad7 	bl	800fdb8 <hci_cmd_resp_release>
 800980a:	e006      	b.n	800981a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800980c:	6879      	ldr	r1, [r7, #4]
 800980e:	4806      	ldr	r0, [pc, #24]	; (8009828 <TlEvtReceived+0x44>)
 8009810:	f001 f8d8 	bl	800a9c4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009814:	4804      	ldr	r0, [pc, #16]	; (8009828 <TlEvtReceived+0x44>)
 8009816:	f006 fabf 	bl	800fd98 <hci_notify_asynch_evt>
  }

  return;
 800981a:	bf00      	nop
}
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	20000284 	.word	0x20000284
 8009828:	20000174 	.word	0x20000174

0800982c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a05      	ldr	r2, [pc, #20]	; (800984c <hci_register_io_bus+0x20>)
 8009838:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a04      	ldr	r2, [pc, #16]	; (8009850 <hci_register_io_bus+0x24>)
 800983e:	611a      	str	r2, [r3, #16]

  return;
 8009840:	bf00      	nop
}
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	08009b3d 	.word	0x08009b3d
 8009850:	08009ba5 	.word	0x08009ba5

08009854 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	4a08      	ldr	r2, [pc, #32]	; (8009884 <shci_init+0x30>)
 8009864:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009866:	4a08      	ldr	r2, [pc, #32]	; (8009888 <shci_init+0x34>)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800986c:	4806      	ldr	r0, [pc, #24]	; (8009888 <shci_init+0x34>)
 800986e:	f000 f911 	bl	8009a94 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4618      	mov	r0, r3
 8009878:	f000 f894 	bl	80099a4 <TlInit>

  return;
 800987c:	bf00      	nop
}
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	200002b0 	.word	0x200002b0
 8009888:	20000290 	.word	0x20000290

0800988c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009892:	4822      	ldr	r0, [pc, #136]	; (800991c <shci_user_evt_proc+0x90>)
 8009894:	f001 f852 	bl	800a93c <LST_is_empty>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d12b      	bne.n	80098f6 <shci_user_evt_proc+0x6a>
 800989e:	4b20      	ldr	r3, [pc, #128]	; (8009920 <shci_user_evt_proc+0x94>)
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d027      	beq.n	80098f6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80098a6:	f107 030c 	add.w	r3, r7, #12
 80098aa:	4619      	mov	r1, r3
 80098ac:	481b      	ldr	r0, [pc, #108]	; (800991c <shci_user_evt_proc+0x90>)
 80098ae:	f001 f8cc 	bl	800aa4a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80098b2:	4b1c      	ldr	r3, [pc, #112]	; (8009924 <shci_user_evt_proc+0x98>)
 80098b4:	69db      	ldr	r3, [r3, #28]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00c      	beq.n	80098d4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80098be:	2301      	movs	r3, #1
 80098c0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80098c2:	4b18      	ldr	r3, [pc, #96]	; (8009924 <shci_user_evt_proc+0x98>)
 80098c4:	69db      	ldr	r3, [r3, #28]
 80098c6:	1d3a      	adds	r2, r7, #4
 80098c8:	4610      	mov	r0, r2
 80098ca:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80098cc:	793a      	ldrb	r2, [r7, #4]
 80098ce:	4b14      	ldr	r3, [pc, #80]	; (8009920 <shci_user_evt_proc+0x94>)
 80098d0:	701a      	strb	r2, [r3, #0]
 80098d2:	e002      	b.n	80098da <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80098d4:	4b12      	ldr	r3, [pc, #72]	; (8009920 <shci_user_evt_proc+0x94>)
 80098d6:	2201      	movs	r2, #1
 80098d8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80098da:	4b11      	ldr	r3, [pc, #68]	; (8009920 <shci_user_evt_proc+0x94>)
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d004      	beq.n	80098ec <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 fae5 	bl	8009eb4 <TL_MM_EvtDone>
 80098ea:	e004      	b.n	80098f6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	4619      	mov	r1, r3
 80098f0:	480a      	ldr	r0, [pc, #40]	; (800991c <shci_user_evt_proc+0x90>)
 80098f2:	f001 f843 	bl	800a97c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80098f6:	4809      	ldr	r0, [pc, #36]	; (800991c <shci_user_evt_proc+0x90>)
 80098f8:	f001 f820 	bl	800a93c <LST_is_empty>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d107      	bne.n	8009912 <shci_user_evt_proc+0x86>
 8009902:	4b07      	ldr	r3, [pc, #28]	; (8009920 <shci_user_evt_proc+0x94>)
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d003      	beq.n	8009912 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800990a:	4804      	ldr	r0, [pc, #16]	; (800991c <shci_user_evt_proc+0x90>)
 800990c:	f7f7 fbc8 	bl	80010a0 <shci_notify_asynch_evt>
  }


  return;
 8009910:	bf00      	nop
 8009912:	bf00      	nop
}
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	20000184 	.word	0x20000184
 8009920:	20000194 	.word	0x20000194
 8009924:	20000290 	.word	0x20000290

08009928 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	60ba      	str	r2, [r7, #8]
 8009930:	607b      	str	r3, [r7, #4]
 8009932:	4603      	mov	r3, r0
 8009934:	81fb      	strh	r3, [r7, #14]
 8009936:	460b      	mov	r3, r1
 8009938:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800993a:	2000      	movs	r0, #0
 800993c:	f000 f864 	bl	8009a08 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009940:	4b16      	ldr	r3, [pc, #88]	; (800999c <shci_send+0x74>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	89fa      	ldrh	r2, [r7, #14]
 8009946:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800994a:	4b14      	ldr	r3, [pc, #80]	; (800999c <shci_send+0x74>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	7b7a      	ldrb	r2, [r7, #13]
 8009950:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009952:	4b12      	ldr	r3, [pc, #72]	; (800999c <shci_send+0x74>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	330c      	adds	r3, #12
 8009958:	7b7a      	ldrb	r2, [r7, #13]
 800995a:	68b9      	ldr	r1, [r7, #8]
 800995c:	4618      	mov	r0, r3
 800995e:	f008 f91b 	bl	8011b98 <memcpy>

  shciContext.io.Send(0,0);
 8009962:	4b0f      	ldr	r3, [pc, #60]	; (80099a0 <shci_send+0x78>)
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	2100      	movs	r1, #0
 8009968:	2000      	movs	r0, #0
 800996a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800996c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009970:	f7f7 fbb6 	bl	80010e0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f103 0008 	add.w	r0, r3, #8
 800997a:	4b08      	ldr	r3, [pc, #32]	; (800999c <shci_send+0x74>)
 800997c:	6819      	ldr	r1, [r3, #0]
 800997e:	4b07      	ldr	r3, [pc, #28]	; (800999c <shci_send+0x74>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	789b      	ldrb	r3, [r3, #2]
 8009984:	3303      	adds	r3, #3
 8009986:	461a      	mov	r2, r3
 8009988:	f008 f906 	bl	8011b98 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800998c:	2001      	movs	r0, #1
 800998e:	f000 f83b 	bl	8009a08 <Cmd_SetStatus>

  return;
 8009992:	bf00      	nop
}
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	20000190 	.word	0x20000190
 80099a0:	20000290 	.word	0x20000290

080099a4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80099ac:	4a10      	ldr	r2, [pc, #64]	; (80099f0 <TlInit+0x4c>)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80099b2:	4810      	ldr	r0, [pc, #64]	; (80099f4 <TlInit+0x50>)
 80099b4:	f000 ffb2 	bl	800a91c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80099b8:	2001      	movs	r0, #1
 80099ba:	f000 f825 	bl	8009a08 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80099be:	4b0e      	ldr	r3, [pc, #56]	; (80099f8 <TlInit+0x54>)
 80099c0:	2201      	movs	r2, #1
 80099c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80099c4:	4b0d      	ldr	r3, [pc, #52]	; (80099fc <TlInit+0x58>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00c      	beq.n	80099e6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80099d0:	4b0b      	ldr	r3, [pc, #44]	; (8009a00 <TlInit+0x5c>)
 80099d2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80099d4:	4b0b      	ldr	r3, [pc, #44]	; (8009a04 <TlInit+0x60>)
 80099d6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80099d8:	4b08      	ldr	r3, [pc, #32]	; (80099fc <TlInit+0x58>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f107 020c 	add.w	r2, r7, #12
 80099e0:	4610      	mov	r0, r2
 80099e2:	4798      	blx	r3
  }

  return;
 80099e4:	bf00      	nop
 80099e6:	bf00      	nop
}
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	20000190 	.word	0x20000190
 80099f4:	20000184 	.word	0x20000184
 80099f8:	20000194 	.word	0x20000194
 80099fc:	20000290 	.word	0x20000290
 8009a00:	08009a59 	.word	0x08009a59
 8009a04:	08009a71 	.word	0x08009a71

08009a08 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	4603      	mov	r3, r0
 8009a10:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009a12:	79fb      	ldrb	r3, [r7, #7]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d10b      	bne.n	8009a30 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009a18:	4b0d      	ldr	r3, [pc, #52]	; (8009a50 <Cmd_SetStatus+0x48>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d003      	beq.n	8009a28 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009a20:	4b0b      	ldr	r3, [pc, #44]	; (8009a50 <Cmd_SetStatus+0x48>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2000      	movs	r0, #0
 8009a26:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009a28:	4b0a      	ldr	r3, [pc, #40]	; (8009a54 <Cmd_SetStatus+0x4c>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009a2e:	e00b      	b.n	8009a48 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009a30:	4b08      	ldr	r3, [pc, #32]	; (8009a54 <Cmd_SetStatus+0x4c>)
 8009a32:	2201      	movs	r2, #1
 8009a34:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009a36:	4b06      	ldr	r3, [pc, #24]	; (8009a50 <Cmd_SetStatus+0x48>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d004      	beq.n	8009a48 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009a3e:	4b04      	ldr	r3, [pc, #16]	; (8009a50 <Cmd_SetStatus+0x48>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2001      	movs	r0, #1
 8009a44:	4798      	blx	r3
  return;
 8009a46:	bf00      	nop
 8009a48:	bf00      	nop
}
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	200002b0 	.word	0x200002b0
 8009a54:	2000018c 	.word	0x2000018c

08009a58 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009a60:	2000      	movs	r0, #0
 8009a62:	f7f7 fb2d 	bl	80010c0 <shci_cmd_resp_release>

  return;
 8009a66:	bf00      	nop
}
 8009a68:	3708      	adds	r7, #8
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009a78:	6879      	ldr	r1, [r7, #4]
 8009a7a:	4805      	ldr	r0, [pc, #20]	; (8009a90 <TlUserEvtReceived+0x20>)
 8009a7c:	f000 ffa2 	bl	800a9c4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009a80:	4803      	ldr	r0, [pc, #12]	; (8009a90 <TlUserEvtReceived+0x20>)
 8009a82:	f7f7 fb0d 	bl	80010a0 <shci_notify_asynch_evt>

  return;
 8009a86:	bf00      	nop
}
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	20000184 	.word	0x20000184

08009a94 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a05      	ldr	r2, [pc, #20]	; (8009ab4 <shci_register_io_bus+0x20>)
 8009aa0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a04      	ldr	r2, [pc, #16]	; (8009ab8 <shci_register_io_bus+0x24>)
 8009aa6:	611a      	str	r2, [r3, #16]

  return;
 8009aa8:	bf00      	nop
}
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr
 8009ab4:	08009c51 	.word	0x08009c51
 8009ab8:	08009ca5 	.word	0x08009ca5

08009abc <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009ac0:	f007 fd98 	bl	80115f4 <HW_IPCC_Enable>

  return;
 8009ac4:	bf00      	nop
}
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <TL_Init>:


void TL_Init( void )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009acc:	4b10      	ldr	r3, [pc, #64]	; (8009b10 <TL_Init+0x48>)
 8009ace:	4a11      	ldr	r2, [pc, #68]	; (8009b14 <TL_Init+0x4c>)
 8009ad0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009ad2:	4b0f      	ldr	r3, [pc, #60]	; (8009b10 <TL_Init+0x48>)
 8009ad4:	4a10      	ldr	r2, [pc, #64]	; (8009b18 <TL_Init+0x50>)
 8009ad6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009ad8:	4b0d      	ldr	r3, [pc, #52]	; (8009b10 <TL_Init+0x48>)
 8009ada:	4a10      	ldr	r2, [pc, #64]	; (8009b1c <TL_Init+0x54>)
 8009adc:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8009ade:	4b0c      	ldr	r3, [pc, #48]	; (8009b10 <TL_Init+0x48>)
 8009ae0:	4a0f      	ldr	r2, [pc, #60]	; (8009b20 <TL_Init+0x58>)
 8009ae2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 8009ae4:	4b0a      	ldr	r3, [pc, #40]	; (8009b10 <TL_Init+0x48>)
 8009ae6:	4a0f      	ldr	r2, [pc, #60]	; (8009b24 <TL_Init+0x5c>)
 8009ae8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009aea:	4b09      	ldr	r3, [pc, #36]	; (8009b10 <TL_Init+0x48>)
 8009aec:	4a0e      	ldr	r2, [pc, #56]	; (8009b28 <TL_Init+0x60>)
 8009aee:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009af0:	4b07      	ldr	r3, [pc, #28]	; (8009b10 <TL_Init+0x48>)
 8009af2:	4a0e      	ldr	r2, [pc, #56]	; (8009b2c <TL_Init+0x64>)
 8009af4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009af6:	4b06      	ldr	r3, [pc, #24]	; (8009b10 <TL_Init+0x48>)
 8009af8:	4a0d      	ldr	r2, [pc, #52]	; (8009b30 <TL_Init+0x68>)
 8009afa:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009afc:	4b04      	ldr	r3, [pc, #16]	; (8009b10 <TL_Init+0x48>)
 8009afe:	4a0d      	ldr	r2, [pc, #52]	; (8009b34 <TL_Init+0x6c>)
 8009b00:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8009b02:	4b03      	ldr	r3, [pc, #12]	; (8009b10 <TL_Init+0x48>)
 8009b04:	4a0c      	ldr	r2, [pc, #48]	; (8009b38 <TL_Init+0x70>)
 8009b06:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009b08:	f007 fd88 	bl	801161c <HW_IPCC_Init>

  return;
 8009b0c:	bf00      	nop
}
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	20030000 	.word	0x20030000
 8009b14:	20030028 	.word	0x20030028
 8009b18:	20030048 	.word	0x20030048
 8009b1c:	20030058 	.word	0x20030058
 8009b20:	20030064 	.word	0x20030064
 8009b24:	2003006c 	.word	0x2003006c
 8009b28:	20030074 	.word	0x20030074
 8009b2c:	2003007c 	.word	0x2003007c
 8009b30:	20030098 	.word	0x20030098
 8009b34:	2003009c 	.word	0x2003009c
 8009b38:	200300a8 	.word	0x200300a8

08009b3c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8009b48:	4811      	ldr	r0, [pc, #68]	; (8009b90 <TL_BLE_Init+0x54>)
 8009b4a:	f000 fee7 	bl	800a91c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8009b4e:	4b11      	ldr	r3, [pc, #68]	; (8009b94 <TL_BLE_Init+0x58>)
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	689a      	ldr	r2, [r3, #8]
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	68da      	ldr	r2, [r3, #12]
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	4a0c      	ldr	r2, [pc, #48]	; (8009b98 <TL_BLE_Init+0x5c>)
 8009b68:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	4a08      	ldr	r2, [pc, #32]	; (8009b90 <TL_BLE_Init+0x54>)
 8009b6e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009b70:	f007 fd6a 	bl	8011648 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a08      	ldr	r2, [pc, #32]	; (8009b9c <TL_BLE_Init+0x60>)
 8009b7a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	4a07      	ldr	r2, [pc, #28]	; (8009ba0 <TL_BLE_Init+0x64>)
 8009b82:	6013      	str	r3, [r2, #0]

  return 0;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	200300c4 	.word	0x200300c4
 8009b94:	20030000 	.word	0x20030000
 8009b98:	20030a4c 	.word	0x20030a4c
 8009b9c:	200002bc 	.word	0x200002bc
 8009ba0:	200002c0 	.word	0x200002c0

08009ba4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	460b      	mov	r3, r1
 8009bae:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009bb0:	4b09      	ldr	r3, [pc, #36]	; (8009bd8 <TL_BLE_SendCmd+0x34>)
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8009bba:	4b07      	ldr	r3, [pc, #28]	; (8009bd8 <TL_BLE_SendCmd+0x34>)
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	2001      	movs	r0, #1
 8009bc4:	f000 f9da 	bl	8009f7c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009bc8:	f007 fd48 	bl	801165c <HW_IPCC_BLE_SendCmd>

  return 0;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20030000 	.word	0x20030000

08009bdc <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009be2:	e01c      	b.n	8009c1e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009be4:	1d3b      	adds	r3, r7, #4
 8009be6:	4619      	mov	r1, r3
 8009be8:	4812      	ldr	r0, [pc, #72]	; (8009c34 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009bea:	f000 ff2e 	bl	800aa4a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	7a5b      	ldrb	r3, [r3, #9]
 8009bf2:	2b0f      	cmp	r3, #15
 8009bf4:	d003      	beq.n	8009bfe <HW_IPCC_BLE_RxEvtNot+0x22>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	7a5b      	ldrb	r3, [r3, #9]
 8009bfa:	2b0e      	cmp	r3, #14
 8009bfc:	d105      	bne.n	8009c0a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4619      	mov	r1, r3
 8009c02:	2002      	movs	r0, #2
 8009c04:	f000 f9ba 	bl	8009f7c <OutputDbgTrace>
 8009c08:	e004      	b.n	8009c14 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	2003      	movs	r0, #3
 8009c10:	f000 f9b4 	bl	8009f7c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009c14:	4b08      	ldr	r3, [pc, #32]	; (8009c38 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	4610      	mov	r0, r2
 8009c1c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009c1e:	4805      	ldr	r0, [pc, #20]	; (8009c34 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009c20:	f000 fe8c 	bl	800a93c <LST_is_empty>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d0dc      	beq.n	8009be4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009c2a:	bf00      	nop
}
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	200300c4 	.word	0x200300c4
 8009c38:	200002bc 	.word	0x200002bc

08009c3c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009c40:	4b02      	ldr	r3, [pc, #8]	; (8009c4c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4798      	blx	r3

  return;
 8009c46:	bf00      	nop
}
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	200002c0 	.word	0x200002c0

08009c50 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009c5c:	480d      	ldr	r0, [pc, #52]	; (8009c94 <TL_SYS_Init+0x44>)
 8009c5e:	f000 fe5d 	bl	800a91c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009c62:	4b0d      	ldr	r3, [pc, #52]	; (8009c98 <TL_SYS_Init+0x48>)
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	689a      	ldr	r2, [r3, #8]
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	4a08      	ldr	r2, [pc, #32]	; (8009c94 <TL_SYS_Init+0x44>)
 8009c74:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009c76:	f007 fd13 	bl	80116a0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a07      	ldr	r2, [pc, #28]	; (8009c9c <TL_SYS_Init+0x4c>)
 8009c80:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	4a06      	ldr	r2, [pc, #24]	; (8009ca0 <TL_SYS_Init+0x50>)
 8009c88:	6013      	str	r3, [r2, #0]

  return 0;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	200300cc 	.word	0x200300cc
 8009c98:	20030000 	.word	0x20030000
 8009c9c:	200002c4 	.word	0x200002c4
 8009ca0:	200002c8 	.word	0x200002c8

08009ca4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	460b      	mov	r3, r1
 8009cae:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009cb0:	4b09      	ldr	r3, [pc, #36]	; (8009cd8 <TL_SYS_SendCmd+0x34>)
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2210      	movs	r2, #16
 8009cb8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8009cba:	4b07      	ldr	r3, [pc, #28]	; (8009cd8 <TL_SYS_SendCmd+0x34>)
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	2004      	movs	r0, #4
 8009cc4:	f000 f95a 	bl	8009f7c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009cc8:	f007 fcf4 	bl	80116b4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3708      	adds	r7, #8
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20030000 	.word	0x20030000

08009cdc <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009ce0:	4b07      	ldr	r3, [pc, #28]	; (8009d00 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	2005      	movs	r0, #5
 8009cea:	f000 f947 	bl	8009f7c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009cee:	4b05      	ldr	r3, [pc, #20]	; (8009d04 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a03      	ldr	r2, [pc, #12]	; (8009d00 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009cf4:	68d2      	ldr	r2, [r2, #12]
 8009cf6:	6812      	ldr	r2, [r2, #0]
 8009cf8:	4610      	mov	r0, r2
 8009cfa:	4798      	blx	r3

  return;
 8009cfc:	bf00      	nop
}
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	20030000 	.word	0x20030000
 8009d04:	200002c4 	.word	0x200002c4

08009d08 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009d0e:	e00e      	b.n	8009d2e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009d10:	1d3b      	adds	r3, r7, #4
 8009d12:	4619      	mov	r1, r3
 8009d14:	480b      	ldr	r0, [pc, #44]	; (8009d44 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009d16:	f000 fe98 	bl	800aa4a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	2006      	movs	r0, #6
 8009d20:	f000 f92c 	bl	8009f7c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009d24:	4b08      	ldr	r3, [pc, #32]	; (8009d48 <HW_IPCC_SYS_EvtNot+0x40>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	4610      	mov	r0, r2
 8009d2c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009d2e:	4805      	ldr	r0, [pc, #20]	; (8009d44 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009d30:	f000 fe04 	bl	800a93c <LST_is_empty>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d0ea      	beq.n	8009d10 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009d3a:	bf00      	nop
}
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	200300cc 	.word	0x200300cc
 8009d48:	200002c8 	.word	0x200002c8

08009d4c <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8009d54:	4b0a      	ldr	r3, [pc, #40]	; (8009d80 <TL_THREAD_Init+0x34>)
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	685a      	ldr	r2, [r3, #4]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	689a      	ldr	r2, [r3, #8]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 8009d72:	f007 fcc5 	bl	8011700 <HW_IPCC_THREAD_Init>

  return;
 8009d76:	bf00      	nop
}
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	20030000 	.word	0x20030000

08009d84 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8009d88:	4b04      	ldr	r3, [pc, #16]	; (8009d9c <TL_OT_SendCmd+0x18>)
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	2208      	movs	r2, #8
 8009d90:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 8009d92:	f007 fcc3 	bl	801171c <HW_IPCC_OT_SendCmd>

  return;
 8009d96:	bf00      	nop
}
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	20030000 	.word	0x20030000

08009da0 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 8009da4:	4b04      	ldr	r3, [pc, #16]	; (8009db8 <TL_CLI_SendCmd+0x18>)
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	220a      	movs	r2, #10
 8009dac:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 8009dae:	f007 fcc3 	bl	8011738 <HW_IPCC_CLI_SendCmd>

  return;
 8009db2:	bf00      	nop
}
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	20030000 	.word	0x20030000

08009dbc <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8009dc0:	4b04      	ldr	r3, [pc, #16]	; (8009dd4 <TL_THREAD_SendAck+0x18>)
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	220d      	movs	r2, #13
 8009dc8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 8009dca:	f007 fcbf 	bl	801174c <HW_IPCC_THREAD_SendAck>

  return;
 8009dce:	bf00      	nop
}
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	20030000 	.word	0x20030000

08009dd8 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8009ddc:	4b04      	ldr	r3, [pc, #16]	; (8009df0 <TL_THREAD_CliSendAck+0x18>)
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	220d      	movs	r2, #13
 8009de4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 8009de6:	f007 fcbf 	bl	8011768 <HW_IPCC_THREAD_CliSendAck>

  return;
 8009dea:	bf00      	nop
}
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	20030000 	.word	0x20030000

08009df4 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8009df8:	4b03      	ldr	r3, [pc, #12]	; (8009e08 <HW_IPCC_OT_CmdEvtNot+0x14>)
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f006 fa48 	bl	8010294 <TL_OT_CmdEvtReceived>

  return;
 8009e04:	bf00      	nop
}
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	20030000 	.word	0x20030000

08009e0c <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 8009e10:	4b03      	ldr	r3, [pc, #12]	; (8009e20 <HW_IPCC_THREAD_EvtNot+0x14>)
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f006 fa46 	bl	80102a8 <TL_THREAD_NotReceived>

  return;
 8009e1c:	bf00      	nop
}
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	20030000 	.word	0x20030000

08009e24 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 8009e28:	4b03      	ldr	r3, [pc, #12]	; (8009e38 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f006 fb28 	bl	8010484 <TL_THREAD_CliNotReceived>

  return;
 8009e34:	bf00      	nop
}
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	20030000 	.word	0x20030000

08009e3c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009e44:	4817      	ldr	r0, [pc, #92]	; (8009ea4 <TL_MM_Init+0x68>)
 8009e46:	f000 fd69 	bl	800a91c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009e4a:	4817      	ldr	r0, [pc, #92]	; (8009ea8 <TL_MM_Init+0x6c>)
 8009e4c:	f000 fd66 	bl	800a91c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009e50:	4b16      	ldr	r3, [pc, #88]	; (8009eac <TL_MM_Init+0x70>)
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	4a16      	ldr	r2, [pc, #88]	; (8009eb0 <TL_MM_Init+0x74>)
 8009e56:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009e58:	4b15      	ldr	r3, [pc, #84]	; (8009eb0 <TL_MM_Init+0x74>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	6892      	ldr	r2, [r2, #8]
 8009e60:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009e62:	4b13      	ldr	r3, [pc, #76]	; (8009eb0 <TL_MM_Init+0x74>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	68d2      	ldr	r2, [r2, #12]
 8009e6a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009e6c:	4b10      	ldr	r3, [pc, #64]	; (8009eb0 <TL_MM_Init+0x74>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a0c      	ldr	r2, [pc, #48]	; (8009ea4 <TL_MM_Init+0x68>)
 8009e72:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009e74:	4b0e      	ldr	r3, [pc, #56]	; (8009eb0 <TL_MM_Init+0x74>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	6812      	ldr	r2, [r2, #0]
 8009e7c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8009e7e:	4b0c      	ldr	r3, [pc, #48]	; (8009eb0 <TL_MM_Init+0x74>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	6852      	ldr	r2, [r2, #4]
 8009e86:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009e88:	4b09      	ldr	r3, [pc, #36]	; (8009eb0 <TL_MM_Init+0x74>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	6912      	ldr	r2, [r2, #16]
 8009e90:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009e92:	4b07      	ldr	r3, [pc, #28]	; (8009eb0 <TL_MM_Init+0x74>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	6952      	ldr	r2, [r2, #20]
 8009e9a:	619a      	str	r2, [r3, #24]

  return;
 8009e9c:	bf00      	nop
}
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	200300b4 	.word	0x200300b4
 8009ea8:	200002b4 	.word	0x200002b4
 8009eac:	20030000 	.word	0x20030000
 8009eb0:	200002cc 	.word	0x200002cc

08009eb4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009ebc:	6879      	ldr	r1, [r7, #4]
 8009ebe:	4807      	ldr	r0, [pc, #28]	; (8009edc <TL_MM_EvtDone+0x28>)
 8009ec0:	f000 fd80 	bl	800a9c4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009ec4:	6879      	ldr	r1, [r7, #4]
 8009ec6:	2000      	movs	r0, #0
 8009ec8:	f000 f858 	bl	8009f7c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009ecc:	4804      	ldr	r0, [pc, #16]	; (8009ee0 <TL_MM_EvtDone+0x2c>)
 8009ece:	f007 fc7d 	bl	80117cc <HW_IPCC_MM_SendFreeBuf>

  return;
 8009ed2:	bf00      	nop
}
 8009ed4:	3708      	adds	r7, #8
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	200002b4 	.word	0x200002b4
 8009ee0:	08009ee5 	.word	0x08009ee5

08009ee4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009eea:	e00c      	b.n	8009f06 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009eec:	1d3b      	adds	r3, r7, #4
 8009eee:	4619      	mov	r1, r3
 8009ef0:	480a      	ldr	r0, [pc, #40]	; (8009f1c <SendFreeBuf+0x38>)
 8009ef2:	f000 fdaa 	bl	800aa4a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009ef6:	4b0a      	ldr	r3, [pc, #40]	; (8009f20 <SendFreeBuf+0x3c>)
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	4611      	mov	r1, r2
 8009f00:	4618      	mov	r0, r3
 8009f02:	f000 fd5f 	bl	800a9c4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009f06:	4805      	ldr	r0, [pc, #20]	; (8009f1c <SendFreeBuf+0x38>)
 8009f08:	f000 fd18 	bl	800a93c <LST_is_empty>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d0ec      	beq.n	8009eec <SendFreeBuf+0x8>
  }

  return;
 8009f12:	bf00      	nop
}
 8009f14:	3708      	adds	r7, #8
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	200002b4 	.word	0x200002b4
 8009f20:	20030000 	.word	0x20030000

08009f24 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009f28:	4805      	ldr	r0, [pc, #20]	; (8009f40 <TL_TRACES_Init+0x1c>)
 8009f2a:	f000 fcf7 	bl	800a91c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8009f2e:	4b05      	ldr	r3, [pc, #20]	; (8009f44 <TL_TRACES_Init+0x20>)
 8009f30:	695b      	ldr	r3, [r3, #20]
 8009f32:	4a03      	ldr	r2, [pc, #12]	; (8009f40 <TL_TRACES_Init+0x1c>)
 8009f34:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009f36:	f007 fc7f 	bl	8011838 <HW_IPCC_TRACES_Init>

  return;
 8009f3a:	bf00      	nop
}
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	200300bc 	.word	0x200300bc
 8009f44:	20030000 	.word	0x20030000

08009f48 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009f4e:	e008      	b.n	8009f62 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009f50:	1d3b      	adds	r3, r7, #4
 8009f52:	4619      	mov	r1, r3
 8009f54:	4808      	ldr	r0, [pc, #32]	; (8009f78 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009f56:	f000 fd78 	bl	800aa4a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7f7 f8d1 	bl	8001104 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009f62:	4805      	ldr	r0, [pc, #20]	; (8009f78 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009f64:	f000 fcea 	bl	800a93c <LST_is_empty>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d0f0      	beq.n	8009f50 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8009f6e:	bf00      	nop
}
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	200300bc 	.word	0x200300bc

08009f7c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b085      	sub	sp, #20
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	4603      	mov	r3, r0
 8009f84:	6039      	str	r1, [r7, #0]
 8009f86:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009f88:	79fb      	ldrb	r3, [r7, #7]
 8009f8a:	2b06      	cmp	r3, #6
 8009f8c:	d849      	bhi.n	800a022 <OutputDbgTrace+0xa6>
 8009f8e:	a201      	add	r2, pc, #4	; (adr r2, 8009f94 <OutputDbgTrace+0x18>)
 8009f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f94:	08009fb1 	.word	0x08009fb1
 8009f98:	08009fd3 	.word	0x08009fd3
 8009f9c:	08009fd9 	.word	0x08009fd9
 8009fa0:	08009ff3 	.word	0x08009ff3
 8009fa4:	08009fff 	.word	0x08009fff
 8009fa8:	0800a005 	.word	0x0800a005
 8009fac:	0800a017 	.word	0x0800a017
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	7a5b      	ldrb	r3, [r3, #9]
 8009fb8:	2b0f      	cmp	r3, #15
 8009fba:	d004      	beq.n	8009fc6 <OutputDbgTrace+0x4a>
 8009fbc:	2bff      	cmp	r3, #255	; 0xff
 8009fbe:	d004      	beq.n	8009fca <OutputDbgTrace+0x4e>
 8009fc0:	2b0e      	cmp	r3, #14
 8009fc2:	d004      	beq.n	8009fce <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009fc4:	e004      	b.n	8009fd0 <OutputDbgTrace+0x54>
          break;
 8009fc6:	bf00      	nop
 8009fc8:	e02c      	b.n	800a024 <OutputDbgTrace+0xa8>
          break;
 8009fca:	bf00      	nop
 8009fcc:	e02a      	b.n	800a024 <OutputDbgTrace+0xa8>
          break;
 8009fce:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009fd0:	e028      	b.n	800a024 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009fd6:	e025      	b.n	800a024 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	7a5b      	ldrb	r3, [r3, #9]
 8009fe0:	2b0e      	cmp	r3, #14
 8009fe2:	d002      	beq.n	8009fea <OutputDbgTrace+0x6e>
 8009fe4:	2b0f      	cmp	r3, #15
 8009fe6:	d002      	beq.n	8009fee <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009fe8:	e002      	b.n	8009ff0 <OutputDbgTrace+0x74>
          break;
 8009fea:	bf00      	nop
 8009fec:	e01a      	b.n	800a024 <OutputDbgTrace+0xa8>
          break;
 8009fee:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009ff0:	e018      	b.n	800a024 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	7a5b      	ldrb	r3, [r3, #9]
 8009ffa:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009ffc:	e012      	b.n	800a024 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a002:	e00f      	b.n	800a024 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	7a5b      	ldrb	r3, [r3, #9]
 800a00c:	2b0e      	cmp	r3, #14
 800a00e:	d000      	beq.n	800a012 <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a010:	e000      	b.n	800a014 <OutputDbgTrace+0x98>
          break;
 800a012:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a014:	e006      	b.n	800a024 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	7a5b      	ldrb	r3, [r3, #9]
 800a01e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a020:	e000      	b.n	800a024 <OutputDbgTrace+0xa8>

    default:
      break;
 800a022:	bf00      	nop
  }

  return;
 800a024:	bf00      	nop
}
 800a026:	3714      	adds	r7, #20
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 800a036:	f006 f947 	bl	80102c8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a03a:	f006 f8e3 	bl	8010204 <THREAD_Get_OTCmdPayloadBuffer>
 800a03e:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	f062 026b 	orn	r2, r2, #107	; 0x6b
 800a048:	701a      	strb	r2, [r3, #0]
 800a04a:	2200      	movs	r2, #0
 800a04c:	705a      	strb	r2, [r3, #1]
 800a04e:	2200      	movs	r2, #0
 800a050:	709a      	strb	r2, [r3, #2]
 800a052:	2200      	movs	r2, #0
 800a054:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	711a      	strb	r2, [r3, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	715a      	strb	r2, [r3, #5]
 800a060:	2200      	movs	r2, #0
 800a062:	719a      	strb	r2, [r3, #6]
 800a064:	2200      	movs	r2, #0
 800a066:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800a068:	f006 f8f0 	bl	801024c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a06c:	f006 f8d6 	bl	801021c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a070:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	689b      	ldr	r3, [r3, #8]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3708      	adds	r7, #8
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b084      	sub	sp, #16
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800a086:	f006 f91f 	bl	80102c8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a08a:	f006 f8bb 	bl	8010204 <THREAD_Get_OTCmdPayloadBuffer>
 800a08e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	f062 0269 	orn	r2, r2, #105	; 0x69
 800a098:	701a      	strb	r2, [r3, #0]
 800a09a:	2200      	movs	r2, #0
 800a09c:	705a      	strb	r2, [r3, #1]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	709a      	strb	r2, [r3, #2]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	711a      	strb	r2, [r3, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	715a      	strb	r2, [r3, #5]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	719a      	strb	r2, [r3, #6]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800a0b8:	f006 f8c8 	bl	801024c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a0bc:	f006 f8ae 	bl	801021c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a0c0:	60f8      	str	r0, [r7, #12]
}
 800a0c2:	bf00      	nop
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
	...

0800a0cc <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b086      	sub	sp, #24
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 800a0d8:	f006 f8f6 	bl	80102c8 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 800a0dc:	4a15      	ldr	r2, [pc, #84]	; (800a134 <otSetStateChangedCallback+0x68>)
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a0e2:	f006 f88f 	bl	8010204 <THREAD_Get_OTCmdPayloadBuffer>
 800a0e6:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f062 0268 	orn	r2, r2, #104	; 0x68
 800a0f0:	701a      	strb	r2, [r3, #0]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	705a      	strb	r2, [r3, #1]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	709a      	strb	r2, [r3, #2]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	2200      	movs	r2, #0
 800a102:	f042 0201 	orr.w	r2, r2, #1
 800a106:	711a      	strb	r2, [r3, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	715a      	strb	r2, [r3, #5]
 800a10c:	2200      	movs	r2, #0
 800a10e:	719a      	strb	r2, [r3, #6]
 800a110:	2200      	movs	r2, #0
 800a112:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800a11a:	f006 f897 	bl	801024c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a11e:	f006 f87d 	bl	801021c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a122:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	b2db      	uxtb	r3, r3
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	200002d0 	.word	0x200002d0

0800a138 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800a140:	f006 f8c2 	bl	80102c8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a144:	f006 f85e 	bl	8010204 <THREAD_Get_OTCmdPayloadBuffer>
 800a148:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f062 0264 	orn	r2, r2, #100	; 0x64
 800a152:	701a      	strb	r2, [r3, #0]
 800a154:	2200      	movs	r2, #0
 800a156:	705a      	strb	r2, [r3, #1]
 800a158:	2200      	movs	r2, #0
 800a15a:	709a      	strb	r2, [r3, #2]
 800a15c:	2200      	movs	r2, #0
 800a15e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2200      	movs	r2, #0
 800a164:	711a      	strb	r2, [r3, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	715a      	strb	r2, [r3, #5]
 800a16a:	2200      	movs	r2, #0
 800a16c:	719a      	strb	r2, [r3, #6]
 800a16e:	2200      	movs	r2, #0
 800a170:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800a172:	f006 f86b 	bl	801024c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a176:	f006 f851 	bl	801021c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a17a:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	b2db      	uxtb	r3, r3
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b084      	sub	sp, #16
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
 800a192:	460b      	mov	r3, r1
 800a194:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a196:	f006 f897 	bl	80102c8 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a19a:	f006 f833 	bl	8010204 <THREAD_Get_OTCmdPayloadBuffer>
 800a19e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800a1a8:	701a      	strb	r2, [r3, #0]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	705a      	strb	r2, [r3, #1]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	709a      	strb	r2, [r3, #2]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f042 0201 	orr.w	r2, r2, #1
 800a1be:	711a      	strb	r2, [r3, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	715a      	strb	r2, [r3, #5]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	719a      	strb	r2, [r3, #6]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800a1cc:	78fa      	ldrb	r2, [r7, #3]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a1d2:	f006 f83b 	bl	801024c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a1d6:	f006 f821 	bl	801021c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a1da:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	b2db      	uxtb	r3, r3
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b084      	sub	sp, #16
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a1f6:	f006 f867 	bl	80102c8 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a1fa:	f006 f803 	bl	8010204 <THREAD_Get_OTCmdPayloadBuffer>
 800a1fe:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	f042 0208 	orr.w	r2, r2, #8
 800a208:	701a      	strb	r2, [r3, #0]
 800a20a:	2200      	movs	r2, #0
 800a20c:	705a      	strb	r2, [r3, #1]
 800a20e:	2200      	movs	r2, #0
 800a210:	709a      	strb	r2, [r3, #2]
 800a212:	2200      	movs	r2, #0
 800a214:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	f042 0201 	orr.w	r2, r2, #1
 800a21e:	711a      	strb	r2, [r3, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	715a      	strb	r2, [r3, #5]
 800a224:	2200      	movs	r2, #0
 800a226:	719a      	strb	r2, [r3, #6]
 800a228:	2200      	movs	r2, #0
 800a22a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800a22c:	78fa      	ldrb	r2, [r7, #3]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a232:	f006 f80b 	bl	801024c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a236:	f005 fff1 	bl	801021c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a23a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	b2db      	uxtb	r3, r3
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b084      	sub	sp, #16
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
 800a252:	460b      	mov	r3, r1
 800a254:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800a256:	f006 f837 	bl	80102c8 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a25a:	f005 ffd3 	bl	8010204 <THREAD_Get_OTCmdPayloadBuffer>
 800a25e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2200      	movs	r2, #0
 800a264:	f042 020f 	orr.w	r2, r2, #15
 800a268:	701a      	strb	r2, [r3, #0]
 800a26a:	2200      	movs	r2, #0
 800a26c:	705a      	strb	r2, [r3, #1]
 800a26e:	2200      	movs	r2, #0
 800a270:	709a      	strb	r2, [r3, #2]
 800a272:	2200      	movs	r2, #0
 800a274:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2200      	movs	r2, #0
 800a27a:	f042 0201 	orr.w	r2, r2, #1
 800a27e:	711a      	strb	r2, [r3, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	715a      	strb	r2, [r3, #5]
 800a284:	2200      	movs	r2, #0
 800a286:	719a      	strb	r2, [r3, #6]
 800a288:	2200      	movs	r2, #0
 800a28a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800a28c:	887a      	ldrh	r2, [r7, #2]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a292:	f005 ffdb 	bl	801024c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a296:	f005 ffc1 	bl	801021c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a29a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	b2db      	uxtb	r3, r3
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
	...

0800a2ac <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800a2ac:	b5b0      	push	{r4, r5, r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	71fb      	strb	r3, [r7, #7]


    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800a2b6:	f005 ffbd 	bl	8010234 <THREAD_Get_NotificationPayloadBuffer>
 800a2ba:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	2b17      	cmp	r3, #23
 800a2c4:	f200 81c3 	bhi.w	800a64e <OpenThread_CallBack_Processing+0x3a2>
 800a2c8:	a201      	add	r2, pc, #4	; (adr r2, 800a2d0 <OpenThread_CallBack_Processing+0x24>)
 800a2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ce:	bf00      	nop
 800a2d0:	0800a331 	.word	0x0800a331
 800a2d4:	0800a34d 	.word	0x0800a34d
 800a2d8:	0800a3b1 	.word	0x0800a3b1
 800a2dc:	0800a3f9 	.word	0x0800a3f9
 800a2e0:	0800a405 	.word	0x0800a405
 800a2e4:	0800a423 	.word	0x0800a423
 800a2e8:	0800a441 	.word	0x0800a441
 800a2ec:	0800a45f 	.word	0x0800a45f
 800a2f0:	0800a47d 	.word	0x0800a47d
 800a2f4:	0800a49b 	.word	0x0800a49b
 800a2f8:	0800a4bd 	.word	0x0800a4bd
 800a2fc:	0800a4db 	.word	0x0800a4db
 800a300:	0800a64f 	.word	0x0800a64f
 800a304:	0800a501 	.word	0x0800a501
 800a308:	0800a535 	.word	0x0800a535
 800a30c:	0800a55d 	.word	0x0800a55d
 800a310:	0800a57b 	.word	0x0800a57b
 800a314:	0800a5e9 	.word	0x0800a5e9
 800a318:	0800a611 	.word	0x0800a611
 800a31c:	0800a64f 	.word	0x0800a64f
 800a320:	0800a62f 	.word	0x0800a62f
 800a324:	0800a64f 	.word	0x0800a64f
 800a328:	0800a64f 	.word	0x0800a64f
 800a32c:	0800a389 	.word	0x0800a389
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 800a330:	4b9b      	ldr	r3, [pc, #620]	; (800a5a0 <OpenThread_CallBack_Processing+0x2f4>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	f000 818d 	beq.w	800a654 <OpenThread_CallBack_Processing+0x3a8>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800a33a:	4b99      	ldr	r3, [pc, #612]	; (800a5a0 <OpenThread_CallBack_Processing+0x2f4>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800a346:	4611      	mov	r1, r2
 800a348:	4798      	blx	r3
        }
        break;
 800a34a:	e183      	b.n	800a654 <OpenThread_CallBack_Processing+0x3a8>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        mySTCoapContext = (STCoapSpecificRequestContextType * ) p_notification->Data[0];
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	461a      	mov	r2, r3
 800a352:	4b94      	ldr	r3, [pc, #592]	; (800a5a4 <OpenThread_CallBack_Processing+0x2f8>)
 800a354:	601a      	str	r2, [r3, #0]
        coapRequestHandlerCb = mySTCoapContext->mHandler;
 800a356:	4b93      	ldr	r3, [pc, #588]	; (800a5a4 <OpenThread_CallBack_Processing+0x2f8>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	4a92      	ldr	r2, [pc, #584]	; (800a5a8 <OpenThread_CallBack_Processing+0x2fc>)
 800a35e:	6013      	str	r3, [r2, #0]
        if (coapRequestHandlerCb != NULL)
 800a360:	4b91      	ldr	r3, [pc, #580]	; (800a5a8 <OpenThread_CallBack_Processing+0x2fc>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 8177 	beq.w	800a658 <OpenThread_CallBack_Processing+0x3ac>
        {
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800a36a:	4b8f      	ldr	r3, [pc, #572]	; (800a5a8 <OpenThread_CallBack_Processing+0x2fc>)
 800a36c:	681c      	ldr	r4, [r3, #0]
 800a36e:	4b8d      	ldr	r3, [pc, #564]	; (800a5a4 <OpenThread_CallBack_Processing+0x2f8>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	6818      	ldr	r0, [r3, #0]
                                (otCoapHeader *) p_notification->Data[1],
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	68db      	ldr	r3, [r3, #12]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800a378:	4619      	mov	r1, r3
                                (otMessage *) p_notification->Data[2],
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	691b      	ldr	r3, [r3, #16]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800a37e:	461a      	mov	r2, r3
                                (otMessageInfo *) p_notification->Data[3]);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	695b      	ldr	r3, [r3, #20]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800a384:	47a0      	blx	r4
        }
        break;
 800a386:	e167      	b.n	800a658 <OpenThread_CallBack_Processing+0x3ac>
    case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
        if (defaultCoapRequestHandlerCb != NULL)
 800a388:	4b88      	ldr	r3, [pc, #544]	; (800a5ac <OpenThread_CallBack_Processing+0x300>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	f000 8165 	beq.w	800a65c <OpenThread_CallBack_Processing+0x3b0>
        {
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a392:	4b86      	ldr	r3, [pc, #536]	; (800a5ac <OpenThread_CallBack_Processing+0x300>)
 800a394:	681c      	ldr	r4, [r3, #0]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	4618      	mov	r0, r3
                    (otCoapHeader *) p_notification->Data[1],
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	68db      	ldr	r3, [r3, #12]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a3a0:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	691b      	ldr	r3, [r3, #16]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a3a6:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3]);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	695b      	ldr	r3, [r3, #20]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a3ac:	47a0      	blx	r4
        }
        break;
 800a3ae:	e155      	b.n	800a65c <OpenThread_CallBack_Processing+0x3b0>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER: 
        mySTCoapResponseContext = (STCoapSpecificResponseContextType * ) p_notification->Data[0];
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	4b7e      	ldr	r3, [pc, #504]	; (800a5b0 <OpenThread_CallBack_Processing+0x304>)
 800a3b8:	601a      	str	r2, [r3, #0]
        coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800a3ba:	4b7d      	ldr	r3, [pc, #500]	; (800a5b0 <OpenThread_CallBack_Processing+0x304>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	4a7c      	ldr	r2, [pc, #496]	; (800a5b4 <OpenThread_CallBack_Processing+0x308>)
 800a3c2:	6013      	str	r3, [r2, #0]
        if (coapResponseHandlerCb != NULL)
 800a3c4:	4b7b      	ldr	r3, [pc, #492]	; (800a5b4 <OpenThread_CallBack_Processing+0x308>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f000 8149 	beq.w	800a660 <OpenThread_CallBack_Processing+0x3b4>
        {
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a3ce:	4b79      	ldr	r3, [pc, #484]	; (800a5b4 <OpenThread_CallBack_Processing+0x308>)
 800a3d0:	681c      	ldr	r4, [r3, #0]
 800a3d2:	4b77      	ldr	r3, [pc, #476]	; (800a5b0 <OpenThread_CallBack_Processing+0x304>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	6818      	ldr	r0, [r3, #0]
                    (otCoapHeader *) p_notification->Data[1],
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	68db      	ldr	r3, [r3, #12]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a3dc:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a3e2:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3],
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a3e8:	461d      	mov	r5, r3
                    (otError) p_notification->Data[4]);
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	9300      	str	r3, [sp, #0]
 800a3f2:	462b      	mov	r3, r5
 800a3f4:	47a0      	blx	r4
        }
        break;
 800a3f6:	e133      	b.n	800a660 <OpenThread_CallBack_Processing+0x3b4>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 800a3f8:	2001      	movs	r0, #1
 800a3fa:	f7fe ffcd 	bl	8009398 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 800a3fe:	f7f8 ff4c 	bl	800329a <HAL_NVIC_SystemReset>
        break;
 800a402:	e14c      	b.n	800a69e <OpenThread_CallBack_Processing+0x3f2>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 800a404:	4b6c      	ldr	r3, [pc, #432]	; (800a5b8 <OpenThread_CallBack_Processing+0x30c>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 812b 	beq.w	800a664 <OpenThread_CallBack_Processing+0x3b8>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800a40e:	4b6a      	ldr	r3, [pc, #424]	; (800a5b8 <OpenThread_CallBack_Processing+0x30c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	6892      	ldr	r2, [r2, #8]
 800a416:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800a418:	683a      	ldr	r2, [r7, #0]
 800a41a:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800a41c:	4611      	mov	r1, r2
 800a41e:	4798      	blx	r3
        }
        break;
 800a420:	e120      	b.n	800a664 <OpenThread_CallBack_Processing+0x3b8>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 800a422:	4b66      	ldr	r3, [pc, #408]	; (800a5bc <OpenThread_CallBack_Processing+0x310>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	f000 811e 	beq.w	800a668 <OpenThread_CallBack_Processing+0x3bc>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800a42c:	4b63      	ldr	r3, [pc, #396]	; (800a5bc <OpenThread_CallBack_Processing+0x310>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	683a      	ldr	r2, [r7, #0]
 800a432:	6892      	ldr	r2, [r2, #8]
 800a434:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800a43a:	2000      	movs	r0, #0
 800a43c:	4798      	blx	r3
        }
        break;
 800a43e:	e113      	b.n	800a668 <OpenThread_CallBack_Processing+0x3bc>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 800a440:	4b5f      	ldr	r3, [pc, #380]	; (800a5c0 <OpenThread_CallBack_Processing+0x314>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	f000 8111 	beq.w	800a66c <OpenThread_CallBack_Processing+0x3c0>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800a44a:	4b5d      	ldr	r3, [pc, #372]	; (800a5c0 <OpenThread_CallBack_Processing+0x314>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	6892      	ldr	r2, [r2, #8]
 800a452:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800a458:	4611      	mov	r1, r2
 800a45a:	4798      	blx	r3
        }
        break;
 800a45c:	e106      	b.n	800a66c <OpenThread_CallBack_Processing+0x3c0>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 800a45e:	4b59      	ldr	r3, [pc, #356]	; (800a5c4 <OpenThread_CallBack_Processing+0x318>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	f000 8104 	beq.w	800a670 <OpenThread_CallBack_Processing+0x3c4>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800a468:	4b56      	ldr	r3, [pc, #344]	; (800a5c4 <OpenThread_CallBack_Processing+0x318>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	683a      	ldr	r2, [r7, #0]
 800a46e:	6892      	ldr	r2, [r2, #8]
 800a470:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800a472:	683a      	ldr	r2, [r7, #0]
 800a474:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800a476:	4611      	mov	r1, r2
 800a478:	4798      	blx	r3
        }
        break;
 800a47a:	e0f9      	b.n	800a670 <OpenThread_CallBack_Processing+0x3c4>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 800a47c:	4b52      	ldr	r3, [pc, #328]	; (800a5c8 <OpenThread_CallBack_Processing+0x31c>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	f000 80f7 	beq.w	800a674 <OpenThread_CallBack_Processing+0x3c8>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800a486:	4b50      	ldr	r3, [pc, #320]	; (800a5c8 <OpenThread_CallBack_Processing+0x31c>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	683a      	ldr	r2, [r7, #0]
 800a48c:	6892      	ldr	r2, [r2, #8]
 800a48e:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800a490:	683a      	ldr	r2, [r7, #0]
 800a492:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800a494:	4611      	mov	r1, r2
 800a496:	4798      	blx	r3
        }
        break;
 800a498:	e0ec      	b.n	800a674 <OpenThread_CallBack_Processing+0x3c8>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 800a49a:	4b4c      	ldr	r3, [pc, #304]	; (800a5cc <OpenThread_CallBack_Processing+0x320>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f000 80ea 	beq.w	800a678 <OpenThread_CallBack_Processing+0x3cc>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800a4a4:	4b49      	ldr	r3, [pc, #292]	; (800a5cc <OpenThread_CallBack_Processing+0x320>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	683a      	ldr	r2, [r7, #0]
 800a4aa:	6892      	ldr	r2, [r2, #8]
 800a4ac:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 800a4ae:	683a      	ldr	r2, [r7, #0]
 800a4b0:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800a4b2:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 800a4b4:	683a      	ldr	r2, [r7, #0]
 800a4b6:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800a4b8:	4798      	blx	r3
        }
        break;
 800a4ba:	e0dd      	b.n	800a678 <OpenThread_CallBack_Processing+0x3cc>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 800a4bc:	4b44      	ldr	r3, [pc, #272]	; (800a5d0 <OpenThread_CallBack_Processing+0x324>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f000 80db 	beq.w	800a67c <OpenThread_CallBack_Processing+0x3d0>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800a4c6:	4b42      	ldr	r3, [pc, #264]	; (800a5d0 <OpenThread_CallBack_Processing+0x324>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	6892      	ldr	r2, [r2, #8]
 800a4ce:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800a4d4:	4611      	mov	r1, r2
 800a4d6:	4798      	blx	r3
        }
        break;
 800a4d8:	e0d0      	b.n	800a67c <OpenThread_CallBack_Processing+0x3d0>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 800a4da:	4b3e      	ldr	r3, [pc, #248]	; (800a5d4 <OpenThread_CallBack_Processing+0x328>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f000 80ce 	beq.w	800a680 <OpenThread_CallBack_Processing+0x3d4>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a4e4:	4b3b      	ldr	r3, [pc, #236]	; (800a5d4 <OpenThread_CallBack_Processing+0x328>)
 800a4e6:	681c      	ldr	r4, [r3, #0]
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a4f0:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a4f6:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a4fc:	47a0      	blx	r4
        }
        break;
 800a4fe:	e0bf      	b.n	800a680 <OpenThread_CallBack_Processing+0x3d4>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 800a500:	4b35      	ldr	r3, [pc, #212]	; (800a5d8 <OpenThread_CallBack_Processing+0x32c>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	f000 80bd 	beq.w	800a684 <OpenThread_CallBack_Processing+0x3d8>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a50a:	4b33      	ldr	r3, [pc, #204]	; (800a5d8 <OpenThread_CallBack_Processing+0x32c>)
 800a50c:	681c      	ldr	r4, [r3, #0]
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a518:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a51e:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	9300      	str	r3, [sp, #0]
 800a52c:	4613      	mov	r3, r2
 800a52e:	462a      	mov	r2, r5
 800a530:	47a0      	blx	r4
        }
        break;
 800a532:	e0a7      	b.n	800a684 <OpenThread_CallBack_Processing+0x3d8>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 800a534:	4b29      	ldr	r3, [pc, #164]	; (800a5dc <OpenThread_CallBack_Processing+0x330>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f000 80a5 	beq.w	800a688 <OpenThread_CallBack_Processing+0x3dc>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a53e:	4b27      	ldr	r3, [pc, #156]	; (800a5dc <OpenThread_CallBack_Processing+0x330>)
 800a540:	681c      	ldr	r4, [r3, #0]
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a54c:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a552:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a558:	47a0      	blx	r4
        }
        break;
 800a55a:	e095      	b.n	800a688 <OpenThread_CallBack_Processing+0x3dc>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 800a55c:	4b20      	ldr	r3, [pc, #128]	; (800a5e0 <OpenThread_CallBack_Processing+0x334>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	f000 8093 	beq.w	800a68c <OpenThread_CallBack_Processing+0x3e0>
        {
            otJoinerCb((otError) p_notification->Data[0],
 800a566:	4b1e      	ldr	r3, [pc, #120]	; (800a5e0 <OpenThread_CallBack_Processing+0x334>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	683a      	ldr	r2, [r7, #0]
 800a56c:	6892      	ldr	r2, [r2, #8]
 800a56e:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 800a570:	683a      	ldr	r2, [r7, #0]
 800a572:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 800a574:	4611      	mov	r1, r2
 800a576:	4798      	blx	r3
        }
        break;
 800a578:	e088      	b.n	800a68c <OpenThread_CallBack_Processing+0x3e0>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 800a57a:	4b1a      	ldr	r3, [pc, #104]	; (800a5e4 <OpenThread_CallBack_Processing+0x338>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	f000 8086 	beq.w	800a690 <OpenThread_CallBack_Processing+0x3e4>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a584:	4b17      	ldr	r3, [pc, #92]	; (800a5e4 <OpenThread_CallBack_Processing+0x338>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	683a      	ldr	r2, [r7, #0]
 800a58a:	6892      	ldr	r2, [r2, #8]
 800a58c:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a592:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 800a594:	683a      	ldr	r2, [r7, #0]
 800a596:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a598:	b2d2      	uxtb	r2, r2
 800a59a:	4798      	blx	r3
        }
        break;
 800a59c:	e078      	b.n	800a690 <OpenThread_CallBack_Processing+0x3e4>
 800a59e:	bf00      	nop
 800a5a0:	200002d0 	.word	0x200002d0
 800a5a4:	20006f48 	.word	0x20006f48
 800a5a8:	20000310 	.word	0x20000310
 800a5ac:	20000314 	.word	0x20000314
 800a5b0:	20006f44 	.word	0x20006f44
 800a5b4:	20000318 	.word	0x20000318
 800a5b8:	200002d8 	.word	0x200002d8
 800a5bc:	200002d4 	.word	0x200002d4
 800a5c0:	200002dc 	.word	0x200002dc
 800a5c4:	200002e0 	.word	0x200002e0
 800a5c8:	200002e4 	.word	0x200002e4
 800a5cc:	200002e8 	.word	0x200002e8
 800a5d0:	200002ec 	.word	0x200002ec
 800a5d4:	200002f0 	.word	0x200002f0
 800a5d8:	200002f4 	.word	0x200002f4
 800a5dc:	200002f8 	.word	0x200002f8
 800a5e0:	200002fc 	.word	0x200002fc
 800a5e4:	20000300 	.word	0x20000300
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 800a5e8:	4b30      	ldr	r3, [pc, #192]	; (800a6ac <OpenThread_CallBack_Processing+0x400>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d051      	beq.n	800a694 <OpenThread_CallBack_Processing+0x3e8>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a5f0:	4b2e      	ldr	r3, [pc, #184]	; (800a6ac <OpenThread_CallBack_Processing+0x400>)
 800a5f2:	681c      	ldr	r4, [r3, #0]
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a5fe:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a604:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	47a0      	blx	r4
        }
        break;
 800a60e:	e041      	b.n	800a694 <OpenThread_CallBack_Processing+0x3e8>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 800a610:	4b27      	ldr	r3, [pc, #156]	; (800a6b0 <OpenThread_CallBack_Processing+0x404>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d03f      	beq.n	800a698 <OpenThread_CallBack_Processing+0x3ec>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800a618:	4b25      	ldr	r3, [pc, #148]	; (800a6b0 <OpenThread_CallBack_Processing+0x404>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	683a      	ldr	r2, [r7, #0]
 800a61e:	6892      	ldr	r2, [r2, #8]
 800a620:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800a626:	b252      	sxtb	r2, r2
 800a628:	4611      	mov	r1, r2
 800a62a:	4798      	blx	r3
        }
        break;
 800a62c:	e034      	b.n	800a698 <OpenThread_CallBack_Processing+0x3ec>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 800a62e:	4b21      	ldr	r3, [pc, #132]	; (800a6b4 <OpenThread_CallBack_Processing+0x408>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d032      	beq.n	800a69c <OpenThread_CallBack_Processing+0x3f0>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 800a636:	4b1f      	ldr	r3, [pc, #124]	; (800a6b4 <OpenThread_CallBack_Processing+0x408>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	683a      	ldr	r2, [r7, #0]
 800a63c:	6892      	ldr	r2, [r2, #8]
 800a63e:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 800a640:	683a      	ldr	r2, [r7, #0]
 800a642:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800a644:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800a64a:	4798      	blx	r3
        }
        break;
 800a64c:	e026      	b.n	800a69c <OpenThread_CallBack_Processing+0x3f0>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	71fb      	strb	r3, [r7, #7]
        break;
 800a652:	e024      	b.n	800a69e <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a654:	bf00      	nop
 800a656:	e022      	b.n	800a69e <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a658:	bf00      	nop
 800a65a:	e020      	b.n	800a69e <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a65c:	bf00      	nop
 800a65e:	e01e      	b.n	800a69e <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a660:	bf00      	nop
 800a662:	e01c      	b.n	800a69e <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a664:	bf00      	nop
 800a666:	e01a      	b.n	800a69e <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a668:	bf00      	nop
 800a66a:	e018      	b.n	800a69e <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a66c:	bf00      	nop
 800a66e:	e016      	b.n	800a69e <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a670:	bf00      	nop
 800a672:	e014      	b.n	800a69e <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a674:	bf00      	nop
 800a676:	e012      	b.n	800a69e <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a678:	bf00      	nop
 800a67a:	e010      	b.n	800a69e <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a67c:	bf00      	nop
 800a67e:	e00e      	b.n	800a69e <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a680:	bf00      	nop
 800a682:	e00c      	b.n	800a69e <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a684:	bf00      	nop
 800a686:	e00a      	b.n	800a69e <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a688:	bf00      	nop
 800a68a:	e008      	b.n	800a69e <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a68c:	bf00      	nop
 800a68e:	e006      	b.n	800a69e <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a690:	bf00      	nop
 800a692:	e004      	b.n	800a69e <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a694:	bf00      	nop
 800a696:	e002      	b.n	800a69e <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a698:	bf00      	nop
 800a69a:	e000      	b.n	800a69e <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a69c:	bf00      	nop
    }

    TL_THREAD_SendAck();
 800a69e:	f7ff fb8d 	bl	8009dbc <TL_THREAD_SendAck>
    return status;
 800a6a2:	79fb      	ldrb	r3, [r7, #7]

}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3708      	adds	r7, #8
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bdb0      	pop	{r4, r5, r7, pc}
 800a6ac:	20000304 	.word	0x20000304
 800a6b0:	20000308 	.word	0x20000308
 800a6b4:	2000030c 	.word	0x2000030c

0800a6b8 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a6c4:	f005 fe00 	bl	80102c8 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a6c8:	f005 fd9c 	bl	8010204 <THREAD_Get_OTCmdPayloadBuffer>
 800a6cc:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 800a6d6:	701a      	strb	r2, [r3, #0]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	705a      	strb	r2, [r3, #1]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	709a      	strb	r2, [r3, #2]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f042 0201 	orr.w	r2, r2, #1
 800a6ec:	711a      	strb	r2, [r3, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	715a      	strb	r2, [r3, #5]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	719a      	strb	r2, [r3, #6]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800a6fa:	78fa      	ldrb	r2, [r7, #3]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a700:	f005 fda4 	bl	801024c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a704:	f005 fd8a 	bl	801021c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a708:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	b2db      	uxtb	r3, r3
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a720:	f005 fdd2 	bl	80102c8 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a724:	f005 fd6e 	bl	8010204 <THREAD_Get_OTCmdPayloadBuffer>
 800a728:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 800a732:	701a      	strb	r2, [r3, #0]
 800a734:	2200      	movs	r2, #0
 800a736:	705a      	strb	r2, [r3, #1]
 800a738:	2200      	movs	r2, #0
 800a73a:	709a      	strb	r2, [r3, #2]
 800a73c:	2200      	movs	r2, #0
 800a73e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2200      	movs	r2, #0
 800a744:	711a      	strb	r2, [r3, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	715a      	strb	r2, [r3, #5]
 800a74a:	2200      	movs	r2, #0
 800a74c:	719a      	strb	r2, [r3, #6]
 800a74e:	2200      	movs	r2, #0
 800a750:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800a752:	f005 fd7b 	bl	801024c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a756:	f005 fd61 	bl	801021c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a75a:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	b2db      	uxtb	r3, r3
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
	...

0800a76c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b086      	sub	sp, #24
 800a770:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a772:	f3ef 8310 	mrs	r3, PRIMASK
 800a776:	60fb      	str	r3, [r7, #12]
  return(result);
 800a778:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800a77a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a77c:	b672      	cpsid	i

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800a77e:	1cbb      	adds	r3, r7, #2
 800a780:	4619      	mov	r1, r3
 800a782:	4812      	ldr	r0, [pc, #72]	; (800a7cc <DbgTrace_TxCpltCallback+0x60>)
 800a784:	f000 fbd7 	bl	800af36 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800a788:	1cbb      	adds	r3, r7, #2
 800a78a:	4619      	mov	r1, r3
 800a78c:	480f      	ldr	r0, [pc, #60]	; (800a7cc <DbgTrace_TxCpltCallback+0x60>)
 800a78e:	f000 fcc6 	bl	800b11e <CircularQueue_Sense>
 800a792:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00b      	beq.n	800a7b2 <DbgTrace_TxCpltCallback+0x46>
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800a7a4:	887b      	ldrh	r3, [r7, #2]
 800a7a6:	4a0a      	ldr	r2, [pc, #40]	; (800a7d0 <DbgTrace_TxCpltCallback+0x64>)
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	6938      	ldr	r0, [r7, #16]
 800a7ac:	f7f6 fcc5 	bl	800113a <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800a7b0:	e007      	b.n	800a7c2 <DbgTrace_TxCpltCallback+0x56>
    DbgTracePeripheralReady = SET;
 800a7b2:	4b08      	ldr	r3, [pc, #32]	; (800a7d4 <DbgTrace_TxCpltCallback+0x68>)
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	701a      	strb	r2, [r3, #0]
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	607b      	str	r3, [r7, #4]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f383 8810 	msr	PRIMASK, r3
}
 800a7c2:	bf00      	nop
 800a7c4:	3718      	adds	r7, #24
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	2000031c 	.word	0x2000031c
 800a7d0:	0800a76d 	.word	0x0800a76d
 800a7d4:	20000019 	.word	0x20000019

0800a7d8 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800a7de:	f7f6 fca6 	bl	800112e <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800a7e2:	2302      	movs	r3, #2
 800a7e4:	9300      	str	r3, [sp, #0]
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a7ec:	4903      	ldr	r1, [pc, #12]	; (800a7fc <DbgTraceInit+0x24>)
 800a7ee:	4804      	ldr	r0, [pc, #16]	; (800a800 <DbgTraceInit+0x28>)
 800a7f0:	f000 f948 	bl	800aa84 <CircularQueue_Init>
#endif 
#endif
  return;
 800a7f4:	bf00      	nop
}
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	2000033c 	.word	0x2000033c
 800a800:	2000031c 	.word	0x2000031c

0800a804 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	68b9      	ldr	r1, [r7, #8]
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f000 f805 	bl	800a824 <DbgTraceWrite>
 800a81a:	4603      	mov	r3, r0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b08a      	sub	sp, #40	; 0x28
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800a830:	2300      	movs	r3, #0
 800a832:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a834:	f3ef 8310 	mrs	r3, PRIMASK
 800a838:	61bb      	str	r3, [r7, #24]
  return(result);
 800a83a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800a83c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a844:	d102      	bne.n	800a84c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800a846:	2300      	movs	r3, #0
 800a848:	627b      	str	r3, [r7, #36]	; 0x24
 800a84a:	e034      	b.n	800a8b6 <DbgTraceWrite+0x92>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d006      	beq.n	800a860 <DbgTraceWrite+0x3c>
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2b02      	cmp	r3, #2
 800a856:	d003      	beq.n	800a860 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800a858:	f04f 33ff 	mov.w	r3, #4294967295
 800a85c:	627b      	str	r3, [r7, #36]	; 0x24
 800a85e:	e02a      	b.n	800a8b6 <DbgTraceWrite+0x92>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d027      	beq.n	800a8b6 <DbgTraceWrite+0x92>
  {
    chars_written = bufSize;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800a86a:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	b29a      	uxth	r2, r3
 800a870:	2301      	movs	r3, #1
 800a872:	68b9      	ldr	r1, [r7, #8]
 800a874:	4812      	ldr	r0, [pc, #72]	; (800a8c0 <DbgTraceWrite+0x9c>)
 800a876:	f000 f937 	bl	800aae8 <CircularQueue_Add>
 800a87a:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d014      	beq.n	800a8ac <DbgTraceWrite+0x88>
 800a882:	4b10      	ldr	r3, [pc, #64]	; (800a8c4 <DbgTraceWrite+0xa0>)
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	b2db      	uxtb	r3, r3
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00f      	beq.n	800a8ac <DbgTraceWrite+0x88>
    {
      DbgTracePeripheralReady = RESET;
 800a88c:	4b0d      	ldr	r3, [pc, #52]	; (800a8c4 <DbgTraceWrite+0xa0>)
 800a88e:	2200      	movs	r2, #0
 800a890:	701a      	strb	r2, [r3, #0]
 800a892:	6a3b      	ldr	r3, [r7, #32]
 800a894:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	f383 8810 	msr	PRIMASK, r3
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	4a09      	ldr	r2, [pc, #36]	; (800a8c8 <DbgTraceWrite+0xa4>)
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	69f8      	ldr	r0, [r7, #28]
 800a8a6:	f7f6 fc48 	bl	800113a <DbgOutputTraces>
 800a8aa:	e004      	b.n	800a8b6 <DbgTraceWrite+0x92>
 800a8ac:	6a3b      	ldr	r3, [r7, #32]
 800a8ae:	613b      	str	r3, [r7, #16]
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	f383 8810 	msr	PRIMASK, r3
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800a8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3728      	adds	r7, #40	; 0x28
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	2000031c 	.word	0x2000031c
 800a8c4:	20000019 	.word	0x20000019
 800a8c8:	0800a76d 	.word	0x0800a76d

0800a8cc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a8d6:	4b0f      	ldr	r3, [pc, #60]	; (800a914 <OTP_Read+0x48>)
 800a8d8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a8da:	e002      	b.n	800a8e2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	3b08      	subs	r3, #8
 800a8e0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	3307      	adds	r3, #7
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	79fa      	ldrb	r2, [r7, #7]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d003      	beq.n	800a8f6 <OTP_Read+0x2a>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	4a09      	ldr	r2, [pc, #36]	; (800a918 <OTP_Read+0x4c>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d1f2      	bne.n	800a8dc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	3307      	adds	r3, #7
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	79fa      	ldrb	r2, [r7, #7]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d001      	beq.n	800a906 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a902:	2300      	movs	r3, #0
 800a904:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a906:	68fb      	ldr	r3, [r7, #12]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3714      	adds	r7, #20
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	1fff73f8 	.word	0x1fff73f8
 800a918:	1fff7000 	.word	0x1fff7000

0800a91c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	605a      	str	r2, [r3, #4]
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b087      	sub	sp, #28
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a944:	f3ef 8310 	mrs	r3, PRIMASK
 800a948:	60fb      	str	r3, [r7, #12]
  return(result);
 800a94a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a94c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a94e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	429a      	cmp	r2, r3
 800a958:	d102      	bne.n	800a960 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800a95a:	2301      	movs	r3, #1
 800a95c:	75fb      	strb	r3, [r7, #23]
 800a95e:	e001      	b.n	800a964 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800a960:	2300      	movs	r3, #0
 800a962:	75fb      	strb	r3, [r7, #23]
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a96e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a970:	4618      	mov	r0, r3
 800a972:	371c      	adds	r7, #28
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b087      	sub	sp, #28
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a986:	f3ef 8310 	mrs	r3, PRIMASK
 800a98a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a98c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a98e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a990:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	683a      	ldr	r2, [r7, #0]
 800a9a4:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	683a      	ldr	r2, [r7, #0]
 800a9ac:	605a      	str	r2, [r3, #4]
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a9b8:	bf00      	nop
 800a9ba:	371c      	adds	r7, #28
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b087      	sub	sp, #28
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9ce:	f3ef 8310 	mrs	r3, PRIMASK
 800a9d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a9d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a9d8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	685a      	ldr	r2, [r3, #4]
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	601a      	str	r2, [r3, #0]
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800aa00:	bf00      	nop
 800aa02:	371c      	adds	r7, #28
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b087      	sub	sp, #28
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa14:	f3ef 8310 	mrs	r3, PRIMASK
 800aa18:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aa1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa1e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	6812      	ldr	r2, [r2, #0]
 800aa28:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	6852      	ldr	r2, [r2, #4]
 800aa32:	605a      	str	r2, [r3, #4]
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800aa3e:	bf00      	nop
 800aa40:	371c      	adds	r7, #28
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr

0800aa4a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b086      	sub	sp, #24
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
 800aa52:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa54:	f3ef 8310 	mrs	r3, PRIMASK
 800aa58:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aa5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa5e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7ff ffcd 	bl	800aa0c <LST_remove_node>
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800aa7c:	bf00      	nop
 800aa7e:	3718      	adds	r7, #24
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]
 800aa90:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	68ba      	ldr	r2, [r7, #8]
 800aa96:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	887a      	ldrh	r2, [r7, #2]
 800aaba:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	7e3a      	ldrb	r2, [r7, #24]
 800aac0:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800aac2:	7e3b      	ldrb	r3, [r7, #24]
 800aac4:	f003 0302 	and.w	r3, r3, #2
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d006      	beq.n	800aada <CircularQueue_Init+0x56>
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	891b      	ldrh	r3, [r3, #8]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d002      	beq.n	800aada <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800aad4:	f04f 33ff 	mov.w	r3, #4294967295
 800aad8:	e000      	b.n	800aadc <CircularQueue_Init+0x58>
  }
  return 0;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3714      	adds	r7, #20
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b08e      	sub	sp, #56	; 0x38
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	603b      	str	r3, [r7, #0]
 800aaf4:	4613      	mov	r3, r2
 800aaf6:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800aaf8:	2300      	movs	r3, #0
 800aafa:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800aafc:	2300      	movs	r3, #0
 800aafe:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800ab00:	2300      	movs	r3, #0
 800ab02:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800ab04:	2300      	movs	r3, #0
 800ab06:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab08:	2300      	movs	r3, #0
 800ab0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800ab10:	2300      	movs	r3, #0
 800ab12:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	891b      	ldrh	r3, [r3, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d101      	bne.n	800ab20 <CircularQueue_Add+0x38>
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	e000      	b.n	800ab22 <CircularQueue_Add+0x3a>
 800ab20:	2300      	movs	r3, #0
 800ab22:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	695b      	ldr	r3, [r3, #20]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d02a      	beq.n	800ab82 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	891b      	ldrh	r3, [r3, #8]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d123      	bne.n	800ab7c <CircularQueue_Add+0x94>
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	691b      	ldr	r3, [r3, #16]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6819      	ldr	r1, [r3, #0]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	1c58      	adds	r0, r3, #1
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	4298      	cmp	r0, r3
 800ab52:	d306      	bcc.n	800ab62 <CircularQueue_Add+0x7a>
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6918      	ldr	r0, [r3, #16]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	1ac3      	subs	r3, r0, r3
 800ab5e:	3301      	adds	r3, #1
 800ab60:	e002      	b.n	800ab68 <CircularQueue_Add+0x80>
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	3301      	adds	r3, #1
 800ab68:	440b      	add	r3, r1
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	021b      	lsls	r3, r3, #8
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	4413      	add	r3, r2
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	3302      	adds	r3, #2
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	e001      	b.n	800ab80 <CircularQueue_Add+0x98>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	891b      	ldrh	r3, [r3, #8]
 800ab80:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	891b      	ldrh	r3, [r3, #8]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d002      	beq.n	800ab90 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	891b      	ldrh	r3, [r3, #8]
 800ab8e:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	691a      	ldr	r2, [r3, #16]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d307      	bcc.n	800abac <CircularQueue_Add+0xc4>
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	685a      	ldr	r2, [r3, #4]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6919      	ldr	r1, [r3, #16]
 800aba4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aba6:	440b      	add	r3, r1
 800aba8:	1ad3      	subs	r3, r2, r3
 800abaa:	e000      	b.n	800abae <CircularQueue_Add+0xc6>
 800abac:	2300      	movs	r3, #0
 800abae:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800abb0:	88fa      	ldrh	r2, [r7, #6]
 800abb2:	7ffb      	ldrb	r3, [r7, #31]
 800abb4:	4413      	add	r3, r2
 800abb6:	461a      	mov	r2, r3
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	fb03 f302 	mul.w	r3, r3, r2
 800abbe:	69ba      	ldr	r2, [r7, #24]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d80b      	bhi.n	800abdc <CircularQueue_Add+0xf4>
 800abc4:	88fa      	ldrh	r2, [r7, #6]
 800abc6:	7ffb      	ldrb	r3, [r7, #31]
 800abc8:	4413      	add	r3, r2
 800abca:	461a      	mov	r2, r3
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	fbb3 f1f2 	udiv	r1, r3, r2
 800abd2:	fb02 f201 	mul.w	r2, r2, r1
 800abd6:	1a9b      	subs	r3, r3, r2
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	e000      	b.n	800abde <CircularQueue_Add+0xf6>
 800abdc:	2300      	movs	r3, #0
 800abde:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800abe0:	7dfa      	ldrb	r2, [r7, #23]
 800abe2:	7ffb      	ldrb	r3, [r7, #31]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	bf8c      	ite	hi
 800abe8:	2301      	movhi	r3, #1
 800abea:	2300      	movls	r3, #0
 800abec:	b2db      	uxtb	r3, r3
 800abee:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800abf0:	7fbb      	ldrb	r3, [r7, #30]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d008      	beq.n	800ac08 <CircularQueue_Add+0x120>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	7f1b      	ldrb	r3, [r3, #28]
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d002      	beq.n	800ac08 <CircularQueue_Add+0x120>
 800ac02:	7dfb      	ldrb	r3, [r7, #23]
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	e000      	b.n	800ac0a <CircularQueue_Add+0x122>
 800ac08:	8bbb      	ldrh	r3, [r7, #28]
 800ac0a:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800ac0c:	7fbb      	ldrb	r3, [r7, #30]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d008      	beq.n	800ac24 <CircularQueue_Add+0x13c>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	7f1b      	ldrb	r3, [r3, #28]
 800ac16:	f003 0302 	and.w	r3, r3, #2
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d002      	beq.n	800ac24 <CircularQueue_Add+0x13c>
 800ac1e:	7ffb      	ldrb	r3, [r7, #31]
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	e000      	b.n	800ac26 <CircularQueue_Add+0x13e>
 800ac24:	8bbb      	ldrh	r3, [r7, #28]
 800ac26:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800ac28:	88fb      	ldrh	r3, [r7, #6]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f000 817e 	beq.w	800af2c <CircularQueue_Add+0x444>
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	695a      	ldr	r2, [r3, #20]
 800ac34:	88f9      	ldrh	r1, [r7, #6]
 800ac36:	7ffb      	ldrb	r3, [r7, #31]
 800ac38:	440b      	add	r3, r1
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	fb03 f301 	mul.w	r3, r3, r1
 800ac42:	441a      	add	r2, r3
 800ac44:	8bbb      	ldrh	r3, [r7, #28]
 800ac46:	441a      	add	r2, r3
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	f200 816d 	bhi.w	800af2c <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800ac52:	2300      	movs	r3, #0
 800ac54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac56:	e14a      	b.n	800aeee <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	691a      	ldr	r2, [r3, #16]
 800ac5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ac5e:	441a      	add	r2, r3
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d307      	bcc.n	800ac78 <CircularQueue_Add+0x190>
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	691a      	ldr	r2, [r3, #16]
 800ac6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ac6e:	441a      	add	r2, r3
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	1ad3      	subs	r3, r2, r3
 800ac76:	e003      	b.n	800ac80 <CircularQueue_Add+0x198>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	691a      	ldr	r2, [r3, #16]
 800ac7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ac7e:	4413      	add	r3, r2
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	891b      	ldrh	r3, [r3, #8]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d130      	bne.n	800acf4 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac98:	1c59      	adds	r1, r3, #1
 800ac9a:	6339      	str	r1, [r7, #48]	; 0x30
 800ac9c:	4413      	add	r3, r2
 800ac9e:	88fa      	ldrh	r2, [r7, #6]
 800aca0:	b2d2      	uxtb	r2, r2
 800aca2:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acaa:	429a      	cmp	r2, r3
 800acac:	d304      	bcc.n	800acb8 <CircularQueue_Add+0x1d0>
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	e000      	b.n	800acba <CircularQueue_Add+0x1d2>
 800acb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acba:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800acbc:	88fb      	ldrh	r3, [r7, #6]
 800acbe:	0a1b      	lsrs	r3, r3, #8
 800acc0:	b298      	uxth	r0, r3
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc8:	1c59      	adds	r1, r3, #1
 800acca:	6339      	str	r1, [r7, #48]	; 0x30
 800accc:	4413      	add	r3, r2
 800acce:	b2c2      	uxtb	r2, r0
 800acd0:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acd8:	429a      	cmp	r2, r3
 800acda:	d304      	bcc.n	800ace6 <CircularQueue_Add+0x1fe>
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ace2:	1ad3      	subs	r3, r2, r3
 800ace4:	e000      	b.n	800ace8 <CircularQueue_Add+0x200>
 800ace6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace8:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	695b      	ldr	r3, [r3, #20]
 800acee:	1c9a      	adds	r2, r3, #2
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800acf4:	88fa      	ldrh	r2, [r7, #6]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6859      	ldr	r1, [r3, #4]
 800acfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfc:	1acb      	subs	r3, r1, r3
 800acfe:	4293      	cmp	r3, r2
 800ad00:	bf28      	it	cs
 800ad02:	4613      	movcs	r3, r2
 800ad04:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800ad06:	88fb      	ldrh	r3, [r7, #6]
 800ad08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d007      	beq.n	800ad1e <CircularQueue_Add+0x236>
 800ad0e:	88fb      	ldrh	r3, [r7, #6]
 800ad10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d225      	bcs.n	800ad62 <CircularQueue_Add+0x27a>
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	7f1b      	ldrb	r3, [r3, #28]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d121      	bne.n	800ad62 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad24:	18d0      	adds	r0, r2, r3
 800ad26:	88fb      	ldrh	r3, [r7, #6]
 800ad28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad2a:	fb02 f303 	mul.w	r3, r2, r3
 800ad2e:	68ba      	ldr	r2, [r7, #8]
 800ad30:	4413      	add	r3, r2
 800ad32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad34:	4619      	mov	r1, r3
 800ad36:	f006 ff2f 	bl	8011b98 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	695a      	ldr	r2, [r3, #20]
 800ad3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad40:	441a      	add	r2, r3
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800ad46:	2300      	movs	r3, #0
 800ad48:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800ad4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4c:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800ad4e:	88fa      	ldrh	r2, [r7, #6]
 800ad50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad52:	1ad3      	subs	r3, r2, r3
 800ad54:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800ad56:	7ffb      	ldrb	r3, [r7, #31]
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	88fb      	ldrh	r3, [r7, #6]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ad60:	e0a4      	b.n	800aeac <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800ad62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f000 80a1 	beq.w	800aeac <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	7f1b      	ldrb	r3, [r3, #28]
 800ad6e:	f003 0301 	and.w	r3, r3, #1
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d03a      	beq.n	800adec <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	891b      	ldrh	r3, [r3, #8]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10d      	bne.n	800ad9a <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad84:	3b02      	subs	r3, #2
 800ad86:	4413      	add	r3, r2
 800ad88:	22ff      	movs	r2, #255	; 0xff
 800ad8a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad92:	3b01      	subs	r3, #1
 800ad94:	4413      	add	r3, r2
 800ad96:	22ff      	movs	r2, #255	; 0xff
 800ad98:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	695a      	ldr	r2, [r3, #20]
 800ad9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada0:	441a      	add	r2, r3
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800ada6:	2300      	movs	r3, #0
 800ada8:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800adaa:	88fb      	ldrh	r3, [r7, #6]
 800adac:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800adae:	2300      	movs	r3, #0
 800adb0:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	891b      	ldrh	r3, [r3, #8]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d16f      	bne.n	800ae9a <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc0:	1c59      	adds	r1, r3, #1
 800adc2:	6339      	str	r1, [r7, #48]	; 0x30
 800adc4:	4413      	add	r3, r2
 800adc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adc8:	b2d2      	uxtb	r2, r2
 800adca:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800adcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adce:	0a18      	lsrs	r0, r3, #8
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add6:	1c59      	adds	r1, r3, #1
 800add8:	6339      	str	r1, [r7, #48]	; 0x30
 800adda:	4413      	add	r3, r2
 800addc:	b2c2      	uxtb	r2, r0
 800adde:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	695b      	ldr	r3, [r3, #20]
 800ade4:	1c9a      	adds	r2, r3, #2
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	615a      	str	r2, [r3, #20]
 800adea:	e056      	b.n	800ae9a <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	7f1b      	ldrb	r3, [r3, #28]
 800adf0:	f003 0302 	and.w	r3, r3, #2
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d050      	beq.n	800ae9a <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	891b      	ldrh	r3, [r3, #8]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d14a      	bne.n	800ae96 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae06:	3b02      	subs	r3, #2
 800ae08:	4413      	add	r3, r2
 800ae0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae0c:	b2d2      	uxtb	r2, r2
 800ae0e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ae10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae12:	0a19      	lsrs	r1, r3, #8
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	4413      	add	r3, r2
 800ae1e:	b2ca      	uxtb	r2, r1
 800ae20:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae28:	18d0      	adds	r0, r2, r3
 800ae2a:	88fb      	ldrh	r3, [r7, #6]
 800ae2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae2e:	fb02 f303 	mul.w	r3, r2, r3
 800ae32:	68ba      	ldr	r2, [r7, #8]
 800ae34:	4413      	add	r3, r2
 800ae36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae38:	4619      	mov	r1, r3
 800ae3a:	f006 fead 	bl	8011b98 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	695a      	ldr	r2, [r3, #20]
 800ae42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae44:	441a      	add	r2, r3
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800ae4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4c:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800ae4e:	88fa      	ldrh	r2, [r7, #6]
 800ae50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae52:	1ad3      	subs	r3, r2, r3
 800ae54:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	699b      	ldr	r3, [r3, #24]
 800ae5a:	1c5a      	adds	r2, r3, #1
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800ae60:	2300      	movs	r3, #0
 800ae62:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681a      	ldr	r2, [r3, #0]
 800ae68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6a:	1c59      	adds	r1, r3, #1
 800ae6c:	6339      	str	r1, [r7, #48]	; 0x30
 800ae6e:	4413      	add	r3, r2
 800ae70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae72:	b2d2      	uxtb	r2, r2
 800ae74:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ae76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae78:	0a18      	lsrs	r0, r3, #8
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae80:	1c59      	adds	r1, r3, #1
 800ae82:	6339      	str	r1, [r7, #48]	; 0x30
 800ae84:	4413      	add	r3, r2
 800ae86:	b2c2      	uxtb	r2, r0
 800ae88:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	695b      	ldr	r3, [r3, #20]
 800ae8e:	1c9a      	adds	r2, r3, #2
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	615a      	str	r2, [r3, #20]
 800ae94:	e001      	b.n	800ae9a <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800ae96:	2300      	movs	r3, #0
 800ae98:	e049      	b.n	800af2e <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800ae9a:	7ffb      	ldrb	r3, [r7, #31]
 800ae9c:	b29a      	uxth	r2, r3
 800ae9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	4413      	add	r3, r2
 800aea4:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800aeac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d015      	beq.n	800aede <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb8:	18d0      	adds	r0, r2, r3
 800aeba:	88fb      	ldrh	r3, [r7, #6]
 800aebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aebe:	fb02 f203 	mul.w	r2, r2, r3
 800aec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec4:	4413      	add	r3, r2
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	4413      	add	r3, r2
 800aeca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aecc:	4619      	mov	r1, r3
 800aece:	f006 fe63 	bl	8011b98 <memcpy>
        q->byteCount += NbBytesToCopy;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	695a      	ldr	r2, [r3, #20]
 800aed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed8:	441a      	add	r2, r3
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	699b      	ldr	r3, [r3, #24]
 800aee2:	1c5a      	adds	r2, r3, #1
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800aee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeea:	3301      	adds	r3, #1
 800aeec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aeee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	f4ff aeb0 	bcc.w	800ac58 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6919      	ldr	r1, [r3, #16]
 800af00:	7ffb      	ldrb	r3, [r7, #31]
 800af02:	4419      	add	r1, r3
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	4299      	cmp	r1, r3
 800af0a:	d307      	bcc.n	800af1c <CircularQueue_Add+0x434>
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6919      	ldr	r1, [r3, #16]
 800af10:	7ffb      	ldrb	r3, [r7, #31]
 800af12:	4419      	add	r1, r3
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	1acb      	subs	r3, r1, r3
 800af1a:	e003      	b.n	800af24 <CircularQueue_Add+0x43c>
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	6919      	ldr	r1, [r3, #16]
 800af20:	7ffb      	ldrb	r3, [r7, #31]
 800af22:	440b      	add	r3, r1
 800af24:	4413      	add	r3, r2
 800af26:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800af28:	6a3b      	ldr	r3, [r7, #32]
 800af2a:	e000      	b.n	800af2e <CircularQueue_Add+0x446>
    return NULL;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3738      	adds	r7, #56	; 0x38
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800af36:	b480      	push	{r7}
 800af38:	b085      	sub	sp, #20
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
 800af3e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800af40:	2300      	movs	r3, #0
 800af42:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 800af44:	2300      	movs	r3, #0
 800af46:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	891b      	ldrh	r3, [r3, #8]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d101      	bne.n	800af54 <CircularQueue_Remove+0x1e>
 800af50:	2302      	movs	r3, #2
 800af52:	e000      	b.n	800af56 <CircularQueue_Remove+0x20>
 800af54:	2300      	movs	r3, #0
 800af56:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	2200      	movs	r2, #0
 800af5c:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	695b      	ldr	r3, [r3, #20]
 800af62:	2b00      	cmp	r3, #0
 800af64:	f000 80d4 	beq.w	800b110 <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	891b      	ldrh	r3, [r3, #8]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d121      	bne.n	800afb4 <CircularQueue_Remove+0x7e>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	4413      	add	r3, r2
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6819      	ldr	r1, [r3, #0]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	1c58      	adds	r0, r3, #1
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	4298      	cmp	r0, r3
 800af8e:	d306      	bcc.n	800af9e <CircularQueue_Remove+0x68>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	68d8      	ldr	r0, [r3, #12]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	1ac3      	subs	r3, r0, r3
 800af9a:	3301      	adds	r3, #1
 800af9c:	e002      	b.n	800afa4 <CircularQueue_Remove+0x6e>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	3301      	adds	r3, #1
 800afa4:	440b      	add	r3, r1
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	021b      	lsls	r3, r3, #8
 800afac:	b29b      	uxth	r3, r3
 800afae:	4413      	add	r3, r2
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	e001      	b.n	800afb8 <CircularQueue_Remove+0x82>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	891b      	ldrh	r3, [r3, #8]
 800afb8:	683a      	ldr	r2, [r7, #0]
 800afba:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	7f1b      	ldrb	r3, [r3, #28]
 800afc0:	f003 0301 	and.w	r3, r3, #1
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d059      	beq.n	800b07c <CircularQueue_Remove+0x146>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	7f1b      	ldrb	r3, [r3, #28]
 800afcc:	f003 0302 	and.w	r3, r3, #2
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d153      	bne.n	800b07c <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	881b      	ldrh	r3, [r3, #0]
 800afd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afdc:	4293      	cmp	r3, r2
 800afde:	d103      	bne.n	800afe8 <CircularQueue_Remove+0xb2>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	891b      	ldrh	r3, [r3, #8]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d012      	beq.n	800b00e <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	68da      	ldr	r2, [r3, #12]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d943      	bls.n	800b07c <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	891b      	ldrh	r3, [r3, #8]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d03f      	beq.n	800b07c <CircularQueue_Remove+0x146>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685a      	ldr	r2, [r3, #4]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	1ad3      	subs	r3, r2, r3
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	8912      	ldrh	r2, [r2, #8]
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d236      	bcs.n	800b07c <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	695a      	ldr	r2, [r3, #20]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	68d9      	ldr	r1, [r3, #12]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	1acb      	subs	r3, r1, r3
 800b01c:	441a      	add	r2, r3
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	891b      	ldrh	r3, [r3, #8]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d121      	bne.n	800b074 <CircularQueue_Remove+0x13e>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	4413      	add	r3, r2
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6819      	ldr	r1, [r3, #0]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	1c58      	adds	r0, r3, #1
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	4298      	cmp	r0, r3
 800b04e:	d306      	bcc.n	800b05e <CircularQueue_Remove+0x128>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	68d8      	ldr	r0, [r3, #12]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	1ac3      	subs	r3, r0, r3
 800b05a:	3301      	adds	r3, #1
 800b05c:	e002      	b.n	800b064 <CircularQueue_Remove+0x12e>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	3301      	adds	r3, #1
 800b064:	440b      	add	r3, r1
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	b29b      	uxth	r3, r3
 800b06a:	021b      	lsls	r3, r3, #8
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	4413      	add	r3, r2
 800b070:	b29b      	uxth	r3, r3
 800b072:	e001      	b.n	800b078 <CircularQueue_Remove+0x142>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	891b      	ldrh	r3, [r3, #8]
 800b078:	683a      	ldr	r2, [r7, #0]
 800b07a:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	68d9      	ldr	r1, [r3, #12]
 800b084:	7afb      	ldrb	r3, [r7, #11]
 800b086:	4419      	add	r1, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	4299      	cmp	r1, r3
 800b08e:	d307      	bcc.n	800b0a0 <CircularQueue_Remove+0x16a>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	68d9      	ldr	r1, [r3, #12]
 800b094:	7afb      	ldrb	r3, [r7, #11]
 800b096:	4419      	add	r1, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	1acb      	subs	r3, r1, r3
 800b09e:	e003      	b.n	800b0a8 <CircularQueue_Remove+0x172>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	68d9      	ldr	r1, [r3, #12]
 800b0a4:	7afb      	ldrb	r3, [r7, #11]
 800b0a6:	440b      	add	r3, r1
 800b0a8:	4413      	add	r3, r2
 800b0aa:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	695b      	ldr	r3, [r3, #20]
 800b0b0:	683a      	ldr	r2, [r7, #0]
 800b0b2:	8812      	ldrh	r2, [r2, #0]
 800b0b4:	4611      	mov	r1, r2
 800b0b6:	7afa      	ldrb	r2, [r7, #11]
 800b0b8:	440a      	add	r2, r1
 800b0ba:	1a9a      	subs	r2, r3, r2
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	695b      	ldr	r3, [r3, #20]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d01e      	beq.n	800b106 <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	683a      	ldr	r2, [r7, #0]
 800b0ce:	8812      	ldrh	r2, [r2, #0]
 800b0d0:	441a      	add	r2, r3
 800b0d2:	7afb      	ldrb	r3, [r7, #11]
 800b0d4:	441a      	add	r2, r3
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d30a      	bcc.n	800b0f4 <CircularQueue_Remove+0x1be>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	683a      	ldr	r2, [r7, #0]
 800b0e4:	8812      	ldrh	r2, [r2, #0]
 800b0e6:	441a      	add	r2, r3
 800b0e8:	7afb      	ldrb	r3, [r7, #11]
 800b0ea:	441a      	add	r2, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	e006      	b.n	800b102 <CircularQueue_Remove+0x1cc>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	683a      	ldr	r2, [r7, #0]
 800b0fa:	8812      	ldrh	r2, [r2, #0]
 800b0fc:	441a      	add	r2, r3
 800b0fe:	7afb      	ldrb	r3, [r7, #11]
 800b100:	4413      	add	r3, r2
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	1e5a      	subs	r2, r3, #1
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 800b110:	68fb      	ldr	r3, [r7, #12]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3714      	adds	r7, #20
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr

0800b11e <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800b11e:	b480      	push	{r7}
 800b120:	b087      	sub	sp, #28
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b128:	2300      	movs	r3, #0
 800b12a:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 800b12c:	2300      	movs	r3, #0
 800b12e:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	891b      	ldrh	r3, [r3, #8]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d101      	bne.n	800b13c <CircularQueue_Sense+0x1e>
 800b138:	2302      	movs	r3, #2
 800b13a:	e000      	b.n	800b13e <CircularQueue_Sense+0x20>
 800b13c:	2300      	movs	r3, #0
 800b13e:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	2200      	movs	r2, #0
 800b144:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 800b146:	2300      	movs	r3, #0
 800b148:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	695b      	ldr	r3, [r3, #20]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f000 8093 	beq.w	800b27a <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	891b      	ldrh	r3, [r3, #8]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d121      	bne.n	800b1a6 <CircularQueue_Sense+0x88>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	4413      	add	r3, r2
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	b29a      	uxth	r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6819      	ldr	r1, [r3, #0]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	1c58      	adds	r0, r3, #1
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	4298      	cmp	r0, r3
 800b180:	d306      	bcc.n	800b190 <CircularQueue_Sense+0x72>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	68d8      	ldr	r0, [r3, #12]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	1ac3      	subs	r3, r0, r3
 800b18c:	3301      	adds	r3, #1
 800b18e:	e002      	b.n	800b196 <CircularQueue_Sense+0x78>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	3301      	adds	r3, #1
 800b196:	440b      	add	r3, r1
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	021b      	lsls	r3, r3, #8
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	4413      	add	r3, r2
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	e001      	b.n	800b1aa <CircularQueue_Sense+0x8c>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	891b      	ldrh	r3, [r3, #8]
 800b1aa:	683a      	ldr	r2, [r7, #0]
 800b1ac:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	7f1b      	ldrb	r3, [r3, #28]
 800b1b2:	f003 0301 	and.w	r3, r3, #1
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d04a      	beq.n	800b250 <CircularQueue_Sense+0x132>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	7f1b      	ldrb	r3, [r3, #28]
 800b1be:	f003 0302 	and.w	r3, r3, #2
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d144      	bne.n	800b250 <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	881b      	ldrh	r3, [r3, #0]
 800b1ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d103      	bne.n	800b1da <CircularQueue_Sense+0xbc>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	891b      	ldrh	r3, [r3, #8]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d012      	beq.n	800b200 <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	68da      	ldr	r2, [r3, #12]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d934      	bls.n	800b250 <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	891b      	ldrh	r3, [r3, #8]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d030      	beq.n	800b250 <CircularQueue_Sense+0x132>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	685a      	ldr	r2, [r3, #4]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	1ad3      	subs	r3, r2, r3
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	8912      	ldrh	r2, [r2, #8]
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d227      	bcs.n	800b250 <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800b200:	2300      	movs	r3, #0
 800b202:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	891b      	ldrh	r3, [r3, #8]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d11d      	bne.n	800b248 <CircularQueue_Sense+0x12a>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	4413      	add	r3, r2
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	b29a      	uxth	r2, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6819      	ldr	r1, [r3, #0]
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	1c58      	adds	r0, r3, #1
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	4298      	cmp	r0, r3
 800b226:	d305      	bcc.n	800b234 <CircularQueue_Sense+0x116>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	6938      	ldr	r0, [r7, #16]
 800b22e:	1ac3      	subs	r3, r0, r3
 800b230:	3301      	adds	r3, #1
 800b232:	e001      	b.n	800b238 <CircularQueue_Sense+0x11a>
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	3301      	adds	r3, #1
 800b238:	440b      	add	r3, r1
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	021b      	lsls	r3, r3, #8
 800b240:	b29b      	uxth	r3, r3
 800b242:	4413      	add	r3, r2
 800b244:	b29b      	uxth	r3, r3
 800b246:	e001      	b.n	800b24c <CircularQueue_Sense+0x12e>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	891b      	ldrh	r3, [r3, #8]
 800b24c:	683a      	ldr	r2, [r7, #0]
 800b24e:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	7bf9      	ldrb	r1, [r7, #15]
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	4419      	add	r1, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	4299      	cmp	r1, r3
 800b260:	d306      	bcc.n	800b270 <CircularQueue_Sense+0x152>
 800b262:	7bf9      	ldrb	r1, [r7, #15]
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	4419      	add	r1, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	1acb      	subs	r3, r1, r3
 800b26e:	e002      	b.n	800b276 <CircularQueue_Sense+0x158>
 800b270:	7bf9      	ldrb	r1, [r7, #15]
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	440b      	add	r3, r1
 800b276:	4413      	add	r3, r2
 800b278:	617b      	str	r3, [r7, #20]
  }
  return x;
 800b27a:	697b      	ldr	r3, [r7, #20]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	371c      	adds	r7, #28
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b288:	b480      	push	{r7}
 800b28a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800b28c:	bf00      	nop
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr
	...

0800b298 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b29e:	f3ef 8305 	mrs	r3, IPSR
 800b2a2:	60bb      	str	r3, [r7, #8]
  return(result);
 800b2a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d10f      	bne.n	800b2ca <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2aa:	f3ef 8310 	mrs	r3, PRIMASK
 800b2ae:	607b      	str	r3, [r7, #4]
  return(result);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d105      	bne.n	800b2c2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b2b6:	f3ef 8311 	mrs	r3, BASEPRI
 800b2ba:	603b      	str	r3, [r7, #0]
  return(result);
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d007      	beq.n	800b2d2 <osKernelInitialize+0x3a>
 800b2c2:	4b0e      	ldr	r3, [pc, #56]	; (800b2fc <osKernelInitialize+0x64>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	d103      	bne.n	800b2d2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b2ca:	f06f 0305 	mvn.w	r3, #5
 800b2ce:	60fb      	str	r3, [r7, #12]
 800b2d0:	e00c      	b.n	800b2ec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b2d2:	4b0a      	ldr	r3, [pc, #40]	; (800b2fc <osKernelInitialize+0x64>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d105      	bne.n	800b2e6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b2da:	4b08      	ldr	r3, [pc, #32]	; (800b2fc <osKernelInitialize+0x64>)
 800b2dc:	2201      	movs	r2, #1
 800b2de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	60fb      	str	r3, [r7, #12]
 800b2e4:	e002      	b.n	800b2ec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3714      	adds	r7, #20
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	2000133c 	.word	0x2000133c

0800b300 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b306:	f3ef 8305 	mrs	r3, IPSR
 800b30a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b30c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d10f      	bne.n	800b332 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b312:	f3ef 8310 	mrs	r3, PRIMASK
 800b316:	607b      	str	r3, [r7, #4]
  return(result);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d105      	bne.n	800b32a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b31e:	f3ef 8311 	mrs	r3, BASEPRI
 800b322:	603b      	str	r3, [r7, #0]
  return(result);
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d007      	beq.n	800b33a <osKernelStart+0x3a>
 800b32a:	4b0f      	ldr	r3, [pc, #60]	; (800b368 <osKernelStart+0x68>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b02      	cmp	r3, #2
 800b330:	d103      	bne.n	800b33a <osKernelStart+0x3a>
    stat = osErrorISR;
 800b332:	f06f 0305 	mvn.w	r3, #5
 800b336:	60fb      	str	r3, [r7, #12]
 800b338:	e010      	b.n	800b35c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b33a:	4b0b      	ldr	r3, [pc, #44]	; (800b368 <osKernelStart+0x68>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d109      	bne.n	800b356 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b342:	f7ff ffa1 	bl	800b288 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b346:	4b08      	ldr	r3, [pc, #32]	; (800b368 <osKernelStart+0x68>)
 800b348:	2202      	movs	r2, #2
 800b34a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b34c:	f001 ffd8 	bl	800d300 <vTaskStartScheduler>
      stat = osOK;
 800b350:	2300      	movs	r3, #0
 800b352:	60fb      	str	r3, [r7, #12]
 800b354:	e002      	b.n	800b35c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800b356:	f04f 33ff 	mov.w	r3, #4294967295
 800b35a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b35c:	68fb      	ldr	r3, [r7, #12]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	2000133c 	.word	0x2000133c

0800b36c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b090      	sub	sp, #64	; 0x40
 800b370:	af04      	add	r7, sp, #16
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b378:	2300      	movs	r3, #0
 800b37a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b37c:	f3ef 8305 	mrs	r3, IPSR
 800b380:	61fb      	str	r3, [r7, #28]
  return(result);
 800b382:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b384:	2b00      	cmp	r3, #0
 800b386:	f040 8090 	bne.w	800b4aa <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b38a:	f3ef 8310 	mrs	r3, PRIMASK
 800b38e:	61bb      	str	r3, [r7, #24]
  return(result);
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d105      	bne.n	800b3a2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b396:	f3ef 8311 	mrs	r3, BASEPRI
 800b39a:	617b      	str	r3, [r7, #20]
  return(result);
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d003      	beq.n	800b3aa <osThreadNew+0x3e>
 800b3a2:	4b44      	ldr	r3, [pc, #272]	; (800b4b4 <osThreadNew+0x148>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	d07f      	beq.n	800b4aa <osThreadNew+0x13e>
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d07c      	beq.n	800b4aa <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800b3b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3b4:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b3b6:	2318      	movs	r3, #24
 800b3b8:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800b3be:	f04f 33ff 	mov.w	r3, #4294967295
 800b3c2:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d045      	beq.n	800b456 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d002      	beq.n	800b3d8 <osThreadNew+0x6c>
        name = attr->name;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	699b      	ldr	r3, [r3, #24]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d002      	beq.n	800b3e6 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d008      	beq.n	800b3fe <osThreadNew+0x92>
 800b3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ee:	2b38      	cmp	r3, #56	; 0x38
 800b3f0:	d805      	bhi.n	800b3fe <osThreadNew+0x92>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	f003 0301 	and.w	r3, r3, #1
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d001      	beq.n	800b402 <osThreadNew+0x96>
        return (NULL);
 800b3fe:	2300      	movs	r3, #0
 800b400:	e054      	b.n	800b4ac <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	695b      	ldr	r3, [r3, #20]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d003      	beq.n	800b412 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	695b      	ldr	r3, [r3, #20]
 800b40e:	089b      	lsrs	r3, r3, #2
 800b410:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00e      	beq.n	800b438 <osThreadNew+0xcc>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	2b5b      	cmp	r3, #91	; 0x5b
 800b420:	d90a      	bls.n	800b438 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b426:	2b00      	cmp	r3, #0
 800b428:	d006      	beq.n	800b438 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	695b      	ldr	r3, [r3, #20]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d002      	beq.n	800b438 <osThreadNew+0xcc>
        mem = 1;
 800b432:	2301      	movs	r3, #1
 800b434:	623b      	str	r3, [r7, #32]
 800b436:	e010      	b.n	800b45a <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	689b      	ldr	r3, [r3, #8]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d10c      	bne.n	800b45a <osThreadNew+0xee>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d108      	bne.n	800b45a <osThreadNew+0xee>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	691b      	ldr	r3, [r3, #16]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d104      	bne.n	800b45a <osThreadNew+0xee>
          mem = 0;
 800b450:	2300      	movs	r3, #0
 800b452:	623b      	str	r3, [r7, #32]
 800b454:	e001      	b.n	800b45a <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800b456:	2300      	movs	r3, #0
 800b458:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b45a:	6a3b      	ldr	r3, [r7, #32]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d110      	bne.n	800b482 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b468:	9202      	str	r2, [sp, #8]
 800b46a:	9301      	str	r3, [sp, #4]
 800b46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b474:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b476:	68f8      	ldr	r0, [r7, #12]
 800b478:	f001 fd70 	bl	800cf5c <xTaskCreateStatic>
 800b47c:	4603      	mov	r3, r0
 800b47e:	613b      	str	r3, [r7, #16]
 800b480:	e013      	b.n	800b4aa <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800b482:	6a3b      	ldr	r3, [r7, #32]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d110      	bne.n	800b4aa <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48a:	b29a      	uxth	r2, r3
 800b48c:	f107 0310 	add.w	r3, r7, #16
 800b490:	9301      	str	r3, [sp, #4]
 800b492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f001 fdb8 	bl	800d010 <xTaskCreate>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d001      	beq.n	800b4aa <osThreadNew+0x13e>
          hTask = NULL;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b4aa:	693b      	ldr	r3, [r7, #16]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3730      	adds	r7, #48	; 0x30
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	2000133c 	.word	0x2000133c

0800b4b8 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b08a      	sub	sp, #40	; 0x28
 800b4bc:	af02      	add	r7, sp, #8
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800b4c6:	69fb      	ldr	r3, [r7, #28]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d002      	beq.n	800b4d2 <osThreadFlagsSet+0x1a>
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	da03      	bge.n	800b4da <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800b4d2:	f06f 0303 	mvn.w	r3, #3
 800b4d6:	60fb      	str	r3, [r7, #12]
 800b4d8:	e046      	b.n	800b568 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800b4da:	f04f 33ff 	mov.w	r3, #4294967295
 800b4de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4e0:	f3ef 8305 	mrs	r3, IPSR
 800b4e4:	61bb      	str	r3, [r7, #24]
  return(result);
 800b4e6:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d10f      	bne.n	800b50c <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4ec:	f3ef 8310 	mrs	r3, PRIMASK
 800b4f0:	617b      	str	r3, [r7, #20]
  return(result);
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d105      	bne.n	800b504 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b4f8:	f3ef 8311 	mrs	r3, BASEPRI
 800b4fc:	613b      	str	r3, [r7, #16]
  return(result);
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d024      	beq.n	800b54e <osThreadFlagsSet+0x96>
 800b504:	4b1b      	ldr	r3, [pc, #108]	; (800b574 <osThreadFlagsSet+0xbc>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2b02      	cmp	r3, #2
 800b50a:	d120      	bne.n	800b54e <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800b50c:	2300      	movs	r3, #0
 800b50e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800b510:	f107 0308 	add.w	r3, r7, #8
 800b514:	9300      	str	r3, [sp, #0]
 800b516:	2300      	movs	r3, #0
 800b518:	2201      	movs	r2, #1
 800b51a:	6839      	ldr	r1, [r7, #0]
 800b51c:	69f8      	ldr	r0, [r7, #28]
 800b51e:	f002 fe2b 	bl	800e178 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800b522:	f107 020c 	add.w	r2, r7, #12
 800b526:	2300      	movs	r3, #0
 800b528:	9300      	str	r3, [sp, #0]
 800b52a:	4613      	mov	r3, r2
 800b52c:	2200      	movs	r2, #0
 800b52e:	2100      	movs	r1, #0
 800b530:	69f8      	ldr	r0, [r7, #28]
 800b532:	f002 fe21 	bl	800e178 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d015      	beq.n	800b568 <osThreadFlagsSet+0xb0>
 800b53c:	4b0e      	ldr	r3, [pc, #56]	; (800b578 <osThreadFlagsSet+0xc0>)
 800b53e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b542:	601a      	str	r2, [r3, #0]
 800b544:	f3bf 8f4f 	dsb	sy
 800b548:	f3bf 8f6f 	isb	sy
 800b54c:	e00c      	b.n	800b568 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800b54e:	2300      	movs	r3, #0
 800b550:	2201      	movs	r2, #1
 800b552:	6839      	ldr	r1, [r7, #0]
 800b554:	69f8      	ldr	r0, [r7, #28]
 800b556:	f002 fd59 	bl	800e00c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800b55a:	f107 030c 	add.w	r3, r7, #12
 800b55e:	2200      	movs	r2, #0
 800b560:	2100      	movs	r1, #0
 800b562:	69f8      	ldr	r0, [r7, #28]
 800b564:	f002 fd52 	bl	800e00c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800b568:	68fb      	ldr	r3, [r7, #12]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3720      	adds	r7, #32
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	2000133c 	.word	0x2000133c
 800b578:	e000ed04 	.word	0xe000ed04

0800b57c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b08e      	sub	sp, #56	; 0x38
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b588:	f3ef 8305 	mrs	r3, IPSR
 800b58c:	61fb      	str	r3, [r7, #28]
  return(result);
 800b58e:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10f      	bne.n	800b5b4 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b594:	f3ef 8310 	mrs	r3, PRIMASK
 800b598:	61bb      	str	r3, [r7, #24]
  return(result);
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d105      	bne.n	800b5ac <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b5a0:	f3ef 8311 	mrs	r3, BASEPRI
 800b5a4:	617b      	str	r3, [r7, #20]
  return(result);
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d007      	beq.n	800b5bc <osThreadFlagsWait+0x40>
 800b5ac:	4b3c      	ldr	r3, [pc, #240]	; (800b6a0 <osThreadFlagsWait+0x124>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2b02      	cmp	r3, #2
 800b5b2:	d103      	bne.n	800b5bc <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800b5b4:	f06f 0305 	mvn.w	r3, #5
 800b5b8:	637b      	str	r3, [r7, #52]	; 0x34
 800b5ba:	e06b      	b.n	800b694 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	da03      	bge.n	800b5ca <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800b5c2:	f06f 0303 	mvn.w	r3, #3
 800b5c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b5c8:	e064      	b.n	800b694 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	f003 0302 	and.w	r3, r3, #2
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d002      	beq.n	800b5da <osThreadFlagsWait+0x5e>
      clear = 0U;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	633b      	str	r3, [r7, #48]	; 0x30
 800b5d8:	e001      	b.n	800b5de <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800b5e6:	f001 ffd1 	bl	800d58c <xTaskGetTickCount>
 800b5ea:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800b5ec:	f107 0210 	add.w	r2, r7, #16
 800b5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b5f4:	2000      	movs	r0, #0
 800b5f6:	f002 fcaf 	bl	800df58 <xTaskNotifyWait>
 800b5fa:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800b5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d137      	bne.n	800b672 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800b602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	4013      	ands	r3, r2
 800b608:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b60e:	4313      	orrs	r3, r2
 800b610:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	f003 0301 	and.w	r3, r3, #1
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d00c      	beq.n	800b636 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800b61c:	68fa      	ldr	r2, [r7, #12]
 800b61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b620:	4013      	ands	r3, r2
 800b622:	68fa      	ldr	r2, [r7, #12]
 800b624:	429a      	cmp	r2, r3
 800b626:	d032      	beq.n	800b68e <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d10f      	bne.n	800b64e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800b62e:	f06f 0302 	mvn.w	r3, #2
 800b632:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b634:	e02e      	b.n	800b694 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800b636:	68fa      	ldr	r2, [r7, #12]
 800b638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b63a:	4013      	ands	r3, r2
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d128      	bne.n	800b692 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d103      	bne.n	800b64e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800b646:	f06f 0302 	mvn.w	r3, #2
 800b64a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b64c:	e022      	b.n	800b694 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800b64e:	f001 ff9d 	bl	800d58c <xTaskGetTickCount>
 800b652:	4602      	mov	r2, r0
 800b654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b656:	1ad3      	subs	r3, r2, r3
 800b658:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800b65a:	6a3a      	ldr	r2, [r7, #32]
 800b65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65e:	429a      	cmp	r2, r3
 800b660:	d902      	bls.n	800b668 <osThreadFlagsWait+0xec>
          tout  = 0;
 800b662:	2300      	movs	r3, #0
 800b664:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b666:	e00e      	b.n	800b686 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800b668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b66a:	6a3b      	ldr	r3, [r7, #32]
 800b66c:	1ad3      	subs	r3, r2, r3
 800b66e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b670:	e009      	b.n	800b686 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d103      	bne.n	800b680 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800b678:	f06f 0302 	mvn.w	r3, #2
 800b67c:	637b      	str	r3, [r7, #52]	; 0x34
 800b67e:	e002      	b.n	800b686 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800b680:	f06f 0301 	mvn.w	r3, #1
 800b684:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800b686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1af      	bne.n	800b5ec <osThreadFlagsWait+0x70>
 800b68c:	e002      	b.n	800b694 <osThreadFlagsWait+0x118>
            break;
 800b68e:	bf00      	nop
 800b690:	e000      	b.n	800b694 <osThreadFlagsWait+0x118>
            break;
 800b692:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800b694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b696:	4618      	mov	r0, r3
 800b698:	3738      	adds	r7, #56	; 0x38
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	2000133c 	.word	0x2000133c

0800b6a4 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b086      	sub	sp, #24
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6ac:	f3ef 8305 	mrs	r3, IPSR
 800b6b0:	613b      	str	r3, [r7, #16]
  return(result);
 800b6b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d10f      	bne.n	800b6d8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6b8:	f3ef 8310 	mrs	r3, PRIMASK
 800b6bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d105      	bne.n	800b6d0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b6c4:	f3ef 8311 	mrs	r3, BASEPRI
 800b6c8:	60bb      	str	r3, [r7, #8]
  return(result);
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d007      	beq.n	800b6e0 <osDelay+0x3c>
 800b6d0:	4b0a      	ldr	r3, [pc, #40]	; (800b6fc <osDelay+0x58>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2b02      	cmp	r3, #2
 800b6d6:	d103      	bne.n	800b6e0 <osDelay+0x3c>
    stat = osErrorISR;
 800b6d8:	f06f 0305 	mvn.w	r3, #5
 800b6dc:	617b      	str	r3, [r7, #20]
 800b6de:	e007      	b.n	800b6f0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d002      	beq.n	800b6f0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f001 fdd4 	bl	800d298 <vTaskDelay>
    }
  }

  return (stat);
 800b6f0:	697b      	ldr	r3, [r7, #20]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3718      	adds	r7, #24
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	2000133c 	.word	0x2000133c

0800b700 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b700:	b580      	push	{r7, lr}
 800b702:	b08a      	sub	sp, #40	; 0x28
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b708:	2300      	movs	r3, #0
 800b70a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b70c:	f3ef 8305 	mrs	r3, IPSR
 800b710:	613b      	str	r3, [r7, #16]
  return(result);
 800b712:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800b714:	2b00      	cmp	r3, #0
 800b716:	f040 8085 	bne.w	800b824 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b71a:	f3ef 8310 	mrs	r3, PRIMASK
 800b71e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d105      	bne.n	800b732 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b726:	f3ef 8311 	mrs	r3, BASEPRI
 800b72a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d003      	beq.n	800b73a <osMutexNew+0x3a>
 800b732:	4b3f      	ldr	r3, [pc, #252]	; (800b830 <osMutexNew+0x130>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b02      	cmp	r3, #2
 800b738:	d074      	beq.n	800b824 <osMutexNew+0x124>
    if (attr != NULL) {
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d003      	beq.n	800b748 <osMutexNew+0x48>
      type = attr->attr_bits;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	623b      	str	r3, [r7, #32]
 800b746:	e001      	b.n	800b74c <osMutexNew+0x4c>
    } else {
      type = 0U;
 800b748:	2300      	movs	r3, #0
 800b74a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b74c:	6a3b      	ldr	r3, [r7, #32]
 800b74e:	f003 0301 	and.w	r3, r3, #1
 800b752:	2b00      	cmp	r3, #0
 800b754:	d002      	beq.n	800b75c <osMutexNew+0x5c>
      rmtx = 1U;
 800b756:	2301      	movs	r3, #1
 800b758:	61fb      	str	r3, [r7, #28]
 800b75a:	e001      	b.n	800b760 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800b75c:	2300      	movs	r3, #0
 800b75e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b760:	6a3b      	ldr	r3, [r7, #32]
 800b762:	f003 0308 	and.w	r3, r3, #8
 800b766:	2b00      	cmp	r3, #0
 800b768:	d15c      	bne.n	800b824 <osMutexNew+0x124>
      mem = -1;
 800b76a:	f04f 33ff 	mov.w	r3, #4294967295
 800b76e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d015      	beq.n	800b7a2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d006      	beq.n	800b78c <osMutexNew+0x8c>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	2b4f      	cmp	r3, #79	; 0x4f
 800b784:	d902      	bls.n	800b78c <osMutexNew+0x8c>
          mem = 1;
 800b786:	2301      	movs	r3, #1
 800b788:	61bb      	str	r3, [r7, #24]
 800b78a:	e00c      	b.n	800b7a6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d108      	bne.n	800b7a6 <osMutexNew+0xa6>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d104      	bne.n	800b7a6 <osMutexNew+0xa6>
            mem = 0;
 800b79c:	2300      	movs	r3, #0
 800b79e:	61bb      	str	r3, [r7, #24]
 800b7a0:	e001      	b.n	800b7a6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d112      	bne.n	800b7d2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d007      	beq.n	800b7c2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	2004      	movs	r0, #4
 800b7ba:	f000 fc9c 	bl	800c0f6 <xQueueCreateMutexStatic>
 800b7be:	6278      	str	r0, [r7, #36]	; 0x24
 800b7c0:	e016      	b.n	800b7f0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	2001      	movs	r0, #1
 800b7ca:	f000 fc94 	bl	800c0f6 <xQueueCreateMutexStatic>
 800b7ce:	6278      	str	r0, [r7, #36]	; 0x24
 800b7d0:	e00e      	b.n	800b7f0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d10b      	bne.n	800b7f0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d004      	beq.n	800b7e8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800b7de:	2004      	movs	r0, #4
 800b7e0:	f000 fc71 	bl	800c0c6 <xQueueCreateMutex>
 800b7e4:	6278      	str	r0, [r7, #36]	; 0x24
 800b7e6:	e003      	b.n	800b7f0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800b7e8:	2001      	movs	r0, #1
 800b7ea:	f000 fc6c 	bl	800c0c6 <xQueueCreateMutex>
 800b7ee:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00c      	beq.n	800b810 <osMutexNew+0x110>
        if (attr != NULL) {
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d003      	beq.n	800b804 <osMutexNew+0x104>
          name = attr->name;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	617b      	str	r3, [r7, #20]
 800b802:	e001      	b.n	800b808 <osMutexNew+0x108>
        } else {
          name = NULL;
 800b804:	2300      	movs	r3, #0
 800b806:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800b808:	6979      	ldr	r1, [r7, #20]
 800b80a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b80c:	f001 fb20 	bl	800ce50 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b812:	2b00      	cmp	r3, #0
 800b814:	d006      	beq.n	800b824 <osMutexNew+0x124>
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d003      	beq.n	800b824 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81e:	f043 0301 	orr.w	r3, r3, #1
 800b822:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b826:	4618      	mov	r0, r3
 800b828:	3728      	adds	r7, #40	; 0x28
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	2000133c 	.word	0x2000133c

0800b834 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b834:	b580      	push	{r7, lr}
 800b836:	b088      	sub	sp, #32
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f023 0301 	bic.w	r3, r3, #1
 800b844:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f003 0301 	and.w	r3, r3, #1
 800b84c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800b84e:	2300      	movs	r3, #0
 800b850:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b852:	f3ef 8305 	mrs	r3, IPSR
 800b856:	613b      	str	r3, [r7, #16]
  return(result);
 800b858:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d10f      	bne.n	800b87e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b85e:	f3ef 8310 	mrs	r3, PRIMASK
 800b862:	60fb      	str	r3, [r7, #12]
  return(result);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d105      	bne.n	800b876 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b86a:	f3ef 8311 	mrs	r3, BASEPRI
 800b86e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d007      	beq.n	800b886 <osMutexAcquire+0x52>
 800b876:	4b1d      	ldr	r3, [pc, #116]	; (800b8ec <osMutexAcquire+0xb8>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d103      	bne.n	800b886 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800b87e:	f06f 0305 	mvn.w	r3, #5
 800b882:	61fb      	str	r3, [r7, #28]
 800b884:	e02c      	b.n	800b8e0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d103      	bne.n	800b894 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800b88c:	f06f 0303 	mvn.w	r3, #3
 800b890:	61fb      	str	r3, [r7, #28]
 800b892:	e025      	b.n	800b8e0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d011      	beq.n	800b8be <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b89a:	6839      	ldr	r1, [r7, #0]
 800b89c:	69b8      	ldr	r0, [r7, #24]
 800b89e:	f000 fc78 	bl	800c192 <xQueueTakeMutexRecursive>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d01b      	beq.n	800b8e0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d003      	beq.n	800b8b6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800b8ae:	f06f 0301 	mvn.w	r3, #1
 800b8b2:	61fb      	str	r3, [r7, #28]
 800b8b4:	e014      	b.n	800b8e0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800b8b6:	f06f 0302 	mvn.w	r3, #2
 800b8ba:	61fb      	str	r3, [r7, #28]
 800b8bc:	e010      	b.n	800b8e0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b8be:	6839      	ldr	r1, [r7, #0]
 800b8c0:	69b8      	ldr	r0, [r7, #24]
 800b8c2:	f000 fff5 	bl	800c8b0 <xQueueSemaphoreTake>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d009      	beq.n	800b8e0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d003      	beq.n	800b8da <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800b8d2:	f06f 0301 	mvn.w	r3, #1
 800b8d6:	61fb      	str	r3, [r7, #28]
 800b8d8:	e002      	b.n	800b8e0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800b8da:	f06f 0302 	mvn.w	r3, #2
 800b8de:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b8e0:	69fb      	ldr	r3, [r7, #28]
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3720      	adds	r7, #32
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	2000133c 	.word	0x2000133c

0800b8f0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b088      	sub	sp, #32
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f023 0301 	bic.w	r3, r3, #1
 800b8fe:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f003 0301 	and.w	r3, r3, #1
 800b906:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800b908:	2300      	movs	r3, #0
 800b90a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b90c:	f3ef 8305 	mrs	r3, IPSR
 800b910:	613b      	str	r3, [r7, #16]
  return(result);
 800b912:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10f      	bne.n	800b938 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b918:	f3ef 8310 	mrs	r3, PRIMASK
 800b91c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d105      	bne.n	800b930 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b924:	f3ef 8311 	mrs	r3, BASEPRI
 800b928:	60bb      	str	r3, [r7, #8]
  return(result);
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d007      	beq.n	800b940 <osMutexRelease+0x50>
 800b930:	4b16      	ldr	r3, [pc, #88]	; (800b98c <osMutexRelease+0x9c>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b02      	cmp	r3, #2
 800b936:	d103      	bne.n	800b940 <osMutexRelease+0x50>
    stat = osErrorISR;
 800b938:	f06f 0305 	mvn.w	r3, #5
 800b93c:	61fb      	str	r3, [r7, #28]
 800b93e:	e01f      	b.n	800b980 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d103      	bne.n	800b94e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800b946:	f06f 0303 	mvn.w	r3, #3
 800b94a:	61fb      	str	r3, [r7, #28]
 800b94c:	e018      	b.n	800b980 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d009      	beq.n	800b968 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b954:	69b8      	ldr	r0, [r7, #24]
 800b956:	f000 fbe9 	bl	800c12c <xQueueGiveMutexRecursive>
 800b95a:	4603      	mov	r3, r0
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d00f      	beq.n	800b980 <osMutexRelease+0x90>
        stat = osErrorResource;
 800b960:	f06f 0302 	mvn.w	r3, #2
 800b964:	61fb      	str	r3, [r7, #28]
 800b966:	e00b      	b.n	800b980 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b968:	2300      	movs	r3, #0
 800b96a:	2200      	movs	r2, #0
 800b96c:	2100      	movs	r1, #0
 800b96e:	69b8      	ldr	r0, [r7, #24]
 800b970:	f000 fcaa 	bl	800c2c8 <xQueueGenericSend>
 800b974:	4603      	mov	r3, r0
 800b976:	2b01      	cmp	r3, #1
 800b978:	d002      	beq.n	800b980 <osMutexRelease+0x90>
        stat = osErrorResource;
 800b97a:	f06f 0302 	mvn.w	r3, #2
 800b97e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800b980:	69fb      	ldr	r3, [r7, #28]
}
 800b982:	4618      	mov	r0, r3
 800b984:	3720      	adds	r7, #32
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	2000133c 	.word	0x2000133c

0800b990 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b990:	b580      	push	{r7, lr}
 800b992:	b08c      	sub	sp, #48	; 0x30
 800b994:	af02      	add	r7, sp, #8
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b99c:	2300      	movs	r3, #0
 800b99e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9a0:	f3ef 8305 	mrs	r3, IPSR
 800b9a4:	61bb      	str	r3, [r7, #24]
  return(result);
 800b9a6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f040 8087 	bne.w	800babc <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9ae:	f3ef 8310 	mrs	r3, PRIMASK
 800b9b2:	617b      	str	r3, [r7, #20]
  return(result);
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d105      	bne.n	800b9c6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b9ba:	f3ef 8311 	mrs	r3, BASEPRI
 800b9be:	613b      	str	r3, [r7, #16]
  return(result);
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d003      	beq.n	800b9ce <osSemaphoreNew+0x3e>
 800b9c6:	4b40      	ldr	r3, [pc, #256]	; (800bac8 <osSemaphoreNew+0x138>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	d076      	beq.n	800babc <osSemaphoreNew+0x12c>
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d073      	beq.n	800babc <osSemaphoreNew+0x12c>
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d86f      	bhi.n	800babc <osSemaphoreNew+0x12c>
    mem = -1;
 800b9dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b9e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d015      	beq.n	800ba14 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d006      	beq.n	800b9fe <osSemaphoreNew+0x6e>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	2b4f      	cmp	r3, #79	; 0x4f
 800b9f6:	d902      	bls.n	800b9fe <osSemaphoreNew+0x6e>
        mem = 1;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	623b      	str	r3, [r7, #32]
 800b9fc:	e00c      	b.n	800ba18 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d108      	bne.n	800ba18 <osSemaphoreNew+0x88>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d104      	bne.n	800ba18 <osSemaphoreNew+0x88>
          mem = 0;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	623b      	str	r3, [r7, #32]
 800ba12:	e001      	b.n	800ba18 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800ba14:	2300      	movs	r3, #0
 800ba16:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800ba18:	6a3b      	ldr	r3, [r7, #32]
 800ba1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba1e:	d04d      	beq.n	800babc <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d129      	bne.n	800ba7a <osSemaphoreNew+0xea>
        if (mem == 1) {
 800ba26:	6a3b      	ldr	r3, [r7, #32]
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d10b      	bne.n	800ba44 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	689a      	ldr	r2, [r3, #8]
 800ba30:	2303      	movs	r3, #3
 800ba32:	9300      	str	r3, [sp, #0]
 800ba34:	4613      	mov	r3, r2
 800ba36:	2200      	movs	r2, #0
 800ba38:	2100      	movs	r1, #0
 800ba3a:	2001      	movs	r0, #1
 800ba3c:	f000 fa54 	bl	800bee8 <xQueueGenericCreateStatic>
 800ba40:	6278      	str	r0, [r7, #36]	; 0x24
 800ba42:	e005      	b.n	800ba50 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800ba44:	2203      	movs	r2, #3
 800ba46:	2100      	movs	r1, #0
 800ba48:	2001      	movs	r0, #1
 800ba4a:	f000 fac0 	bl	800bfce <xQueueGenericCreate>
 800ba4e:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d022      	beq.n	800ba9c <osSemaphoreNew+0x10c>
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d01f      	beq.n	800ba9c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	2200      	movs	r2, #0
 800ba60:	2100      	movs	r1, #0
 800ba62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba64:	f000 fc30 	bl	800c2c8 <xQueueGenericSend>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d016      	beq.n	800ba9c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800ba6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba70:	f001 f8a3 	bl	800cbba <vQueueDelete>
            hSemaphore = NULL;
 800ba74:	2300      	movs	r3, #0
 800ba76:	627b      	str	r3, [r7, #36]	; 0x24
 800ba78:	e010      	b.n	800ba9c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800ba7a:	6a3b      	ldr	r3, [r7, #32]
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d108      	bne.n	800ba92 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	689b      	ldr	r3, [r3, #8]
 800ba84:	461a      	mov	r2, r3
 800ba86:	68b9      	ldr	r1, [r7, #8]
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f000 fbb7 	bl	800c1fc <xQueueCreateCountingSemaphoreStatic>
 800ba8e:	6278      	str	r0, [r7, #36]	; 0x24
 800ba90:	e004      	b.n	800ba9c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ba92:	68b9      	ldr	r1, [r7, #8]
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f000 fbe6 	bl	800c266 <xQueueCreateCountingSemaphore>
 800ba9a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ba9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d00c      	beq.n	800babc <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d003      	beq.n	800bab0 <osSemaphoreNew+0x120>
          name = attr->name;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	61fb      	str	r3, [r7, #28]
 800baae:	e001      	b.n	800bab4 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800bab0:	2300      	movs	r3, #0
 800bab2:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800bab4:	69f9      	ldr	r1, [r7, #28]
 800bab6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bab8:	f001 f9ca 	bl	800ce50 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800babc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3728      	adds	r7, #40	; 0x28
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	2000133c 	.word	0x2000133c

0800bacc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800bacc:	b580      	push	{r7, lr}
 800bace:	b088      	sub	sp, #32
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bada:	2300      	movs	r3, #0
 800badc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800bade:	69bb      	ldr	r3, [r7, #24]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d103      	bne.n	800baec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800bae4:	f06f 0303 	mvn.w	r3, #3
 800bae8:	61fb      	str	r3, [r7, #28]
 800baea:	e04b      	b.n	800bb84 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800baec:	f3ef 8305 	mrs	r3, IPSR
 800baf0:	617b      	str	r3, [r7, #20]
  return(result);
 800baf2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d10f      	bne.n	800bb18 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800baf8:	f3ef 8310 	mrs	r3, PRIMASK
 800bafc:	613b      	str	r3, [r7, #16]
  return(result);
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d105      	bne.n	800bb10 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bb04:	f3ef 8311 	mrs	r3, BASEPRI
 800bb08:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d026      	beq.n	800bb5e <osSemaphoreAcquire+0x92>
 800bb10:	4b1f      	ldr	r3, [pc, #124]	; (800bb90 <osSemaphoreAcquire+0xc4>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	d122      	bne.n	800bb5e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d003      	beq.n	800bb26 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800bb1e:	f06f 0303 	mvn.w	r3, #3
 800bb22:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800bb24:	e02d      	b.n	800bb82 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800bb26:	2300      	movs	r3, #0
 800bb28:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800bb2a:	f107 0308 	add.w	r3, r7, #8
 800bb2e:	461a      	mov	r2, r3
 800bb30:	2100      	movs	r1, #0
 800bb32:	69b8      	ldr	r0, [r7, #24]
 800bb34:	f000 ffc4 	bl	800cac0 <xQueueReceiveFromISR>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d003      	beq.n	800bb46 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800bb3e:	f06f 0302 	mvn.w	r3, #2
 800bb42:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800bb44:	e01d      	b.n	800bb82 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d01a      	beq.n	800bb82 <osSemaphoreAcquire+0xb6>
 800bb4c:	4b11      	ldr	r3, [pc, #68]	; (800bb94 <osSemaphoreAcquire+0xc8>)
 800bb4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb52:	601a      	str	r2, [r3, #0]
 800bb54:	f3bf 8f4f 	dsb	sy
 800bb58:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800bb5c:	e011      	b.n	800bb82 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800bb5e:	6839      	ldr	r1, [r7, #0]
 800bb60:	69b8      	ldr	r0, [r7, #24]
 800bb62:	f000 fea5 	bl	800c8b0 <xQueueSemaphoreTake>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d00b      	beq.n	800bb84 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d003      	beq.n	800bb7a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800bb72:	f06f 0301 	mvn.w	r3, #1
 800bb76:	61fb      	str	r3, [r7, #28]
 800bb78:	e004      	b.n	800bb84 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800bb7a:	f06f 0302 	mvn.w	r3, #2
 800bb7e:	61fb      	str	r3, [r7, #28]
 800bb80:	e000      	b.n	800bb84 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800bb82:	bf00      	nop
      }
    }
  }

  return (stat);
 800bb84:	69fb      	ldr	r3, [r7, #28]
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3720      	adds	r7, #32
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	2000133c 	.word	0x2000133c
 800bb94:	e000ed04 	.word	0xe000ed04

0800bb98 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b088      	sub	sp, #32
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bba4:	2300      	movs	r3, #0
 800bba6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800bba8:	69bb      	ldr	r3, [r7, #24]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d103      	bne.n	800bbb6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800bbae:	f06f 0303 	mvn.w	r3, #3
 800bbb2:	61fb      	str	r3, [r7, #28]
 800bbb4:	e03e      	b.n	800bc34 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbb6:	f3ef 8305 	mrs	r3, IPSR
 800bbba:	617b      	str	r3, [r7, #20]
  return(result);
 800bbbc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d10f      	bne.n	800bbe2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbc2:	f3ef 8310 	mrs	r3, PRIMASK
 800bbc6:	613b      	str	r3, [r7, #16]
  return(result);
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d105      	bne.n	800bbda <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bbce:	f3ef 8311 	mrs	r3, BASEPRI
 800bbd2:	60fb      	str	r3, [r7, #12]
  return(result);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d01e      	beq.n	800bc18 <osSemaphoreRelease+0x80>
 800bbda:	4b19      	ldr	r3, [pc, #100]	; (800bc40 <osSemaphoreRelease+0xa8>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2b02      	cmp	r3, #2
 800bbe0:	d11a      	bne.n	800bc18 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bbe6:	f107 0308 	add.w	r3, r7, #8
 800bbea:	4619      	mov	r1, r3
 800bbec:	69b8      	ldr	r0, [r7, #24]
 800bbee:	f000 fcf9 	bl	800c5e4 <xQueueGiveFromISR>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d003      	beq.n	800bc00 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800bbf8:	f06f 0302 	mvn.w	r3, #2
 800bbfc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bbfe:	e018      	b.n	800bc32 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d015      	beq.n	800bc32 <osSemaphoreRelease+0x9a>
 800bc06:	4b0f      	ldr	r3, [pc, #60]	; (800bc44 <osSemaphoreRelease+0xac>)
 800bc08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc0c:	601a      	str	r2, [r3, #0]
 800bc0e:	f3bf 8f4f 	dsb	sy
 800bc12:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bc16:	e00c      	b.n	800bc32 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bc18:	2300      	movs	r3, #0
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	69b8      	ldr	r0, [r7, #24]
 800bc20:	f000 fb52 	bl	800c2c8 <xQueueGenericSend>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d004      	beq.n	800bc34 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800bc2a:	f06f 0302 	mvn.w	r3, #2
 800bc2e:	61fb      	str	r3, [r7, #28]
 800bc30:	e000      	b.n	800bc34 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bc32:	bf00      	nop
    }
  }

  return (stat);
 800bc34:	69fb      	ldr	r3, [r7, #28]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3720      	adds	r7, #32
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	2000133c 	.word	0x2000133c
 800bc44:	e000ed04 	.word	0xe000ed04

0800bc48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	4a07      	ldr	r2, [pc, #28]	; (800bc74 <vApplicationGetIdleTaskMemory+0x2c>)
 800bc58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	4a06      	ldr	r2, [pc, #24]	; (800bc78 <vApplicationGetIdleTaskMemory+0x30>)
 800bc5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc66:	601a      	str	r2, [r3, #0]
}
 800bc68:	bf00      	nop
 800bc6a:	3714      	adds	r7, #20
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr
 800bc74:	20001340 	.word	0x20001340
 800bc78:	2000139c 	.word	0x2000139c

0800bc7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bc7c:	b480      	push	{r7}
 800bc7e:	b085      	sub	sp, #20
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	4a07      	ldr	r2, [pc, #28]	; (800bca8 <vApplicationGetTimerTaskMemory+0x2c>)
 800bc8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	4a06      	ldr	r2, [pc, #24]	; (800bcac <vApplicationGetTimerTaskMemory+0x30>)
 800bc92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bc9a:	601a      	str	r2, [r3, #0]
}
 800bc9c:	bf00      	nop
 800bc9e:	3714      	adds	r7, #20
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr
 800bca8:	2000179c 	.word	0x2000179c
 800bcac:	200017f8 	.word	0x200017f8

0800bcb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f103 0208 	add.w	r2, r3, #8
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f103 0208 	add.w	r2, r3, #8
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f103 0208 	add.w	r2, r3, #8
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bce4:	bf00      	nop
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bcfe:	bf00      	nop
 800bd00:	370c      	adds	r7, #12
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr

0800bd0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bd0a:	b480      	push	{r7}
 800bd0c:	b085      	sub	sp, #20
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
 800bd12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	68fa      	ldr	r2, [r7, #12]
 800bd1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	689a      	ldr	r2, [r3, #8]
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	683a      	ldr	r2, [r7, #0]
 800bd2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	683a      	ldr	r2, [r7, #0]
 800bd34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	1c5a      	adds	r2, r3, #1
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	601a      	str	r2, [r3, #0]
}
 800bd46:	bf00      	nop
 800bd48:	3714      	adds	r7, #20
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr

0800bd52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bd52:	b480      	push	{r7}
 800bd54:	b085      	sub	sp, #20
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
 800bd5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd68:	d103      	bne.n	800bd72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	691b      	ldr	r3, [r3, #16]
 800bd6e:	60fb      	str	r3, [r7, #12]
 800bd70:	e00c      	b.n	800bd8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	3308      	adds	r3, #8
 800bd76:	60fb      	str	r3, [r7, #12]
 800bd78:	e002      	b.n	800bd80 <vListInsert+0x2e>
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	60fb      	str	r3, [r7, #12]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	68ba      	ldr	r2, [r7, #8]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d2f6      	bcs.n	800bd7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	685a      	ldr	r2, [r3, #4]
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	683a      	ldr	r2, [r7, #0]
 800bd9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	68fa      	ldr	r2, [r7, #12]
 800bda0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	683a      	ldr	r2, [r7, #0]
 800bda6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	1c5a      	adds	r2, r3, #1
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	601a      	str	r2, [r3, #0]
}
 800bdb8:	bf00      	nop
 800bdba:	3714      	adds	r7, #20
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b085      	sub	sp, #20
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	691b      	ldr	r3, [r3, #16]
 800bdd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	6892      	ldr	r2, [r2, #8]
 800bdda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	6852      	ldr	r2, [r2, #4]
 800bde4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d103      	bne.n	800bdf8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	689a      	ldr	r2, [r3, #8]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	1e5a      	subs	r2, r3, #1
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3714      	adds	r7, #20
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d109      	bne.n	800be40 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800be2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be30:	f383 8811 	msr	BASEPRI, r3
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	60bb      	str	r3, [r7, #8]
 800be3e:	e7fe      	b.n	800be3e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800be40:	f002 ff34 	bl	800ecac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be4c:	68f9      	ldr	r1, [r7, #12]
 800be4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800be50:	fb01 f303 	mul.w	r3, r1, r3
 800be54:	441a      	add	r2, r3
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2200      	movs	r2, #0
 800be5e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be70:	3b01      	subs	r3, #1
 800be72:	68f9      	ldr	r1, [r7, #12]
 800be74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800be76:	fb01 f303 	mul.w	r3, r1, r3
 800be7a:	441a      	add	r2, r3
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	22ff      	movs	r2, #255	; 0xff
 800be84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	22ff      	movs	r2, #255	; 0xff
 800be8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d114      	bne.n	800bec0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d01a      	beq.n	800bed4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	3310      	adds	r3, #16
 800bea2:	4618      	mov	r0, r3
 800bea4:	f001 fce4 	bl	800d870 <xTaskRemoveFromEventList>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d012      	beq.n	800bed4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800beae:	4b0d      	ldr	r3, [pc, #52]	; (800bee4 <xQueueGenericReset+0xcc>)
 800beb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beb4:	601a      	str	r2, [r3, #0]
 800beb6:	f3bf 8f4f 	dsb	sy
 800beba:	f3bf 8f6f 	isb	sy
 800bebe:	e009      	b.n	800bed4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	3310      	adds	r3, #16
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7ff fef3 	bl	800bcb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	3324      	adds	r3, #36	; 0x24
 800bece:	4618      	mov	r0, r3
 800bed0:	f7ff feee 	bl	800bcb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bed4:	f002 ff18 	bl	800ed08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bed8:	2301      	movs	r3, #1
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	e000ed04 	.word	0xe000ed04

0800bee8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b08e      	sub	sp, #56	; 0x38
 800beec:	af02      	add	r7, sp, #8
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]
 800bef4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d109      	bne.n	800bf10 <xQueueGenericCreateStatic+0x28>
 800befc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf00:	f383 8811 	msr	BASEPRI, r3
 800bf04:	f3bf 8f6f 	isb	sy
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf0e:	e7fe      	b.n	800bf0e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d109      	bne.n	800bf2a <xQueueGenericCreateStatic+0x42>
 800bf16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1a:	f383 8811 	msr	BASEPRI, r3
 800bf1e:	f3bf 8f6f 	isb	sy
 800bf22:	f3bf 8f4f 	dsb	sy
 800bf26:	627b      	str	r3, [r7, #36]	; 0x24
 800bf28:	e7fe      	b.n	800bf28 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d002      	beq.n	800bf36 <xQueueGenericCreateStatic+0x4e>
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d001      	beq.n	800bf3a <xQueueGenericCreateStatic+0x52>
 800bf36:	2301      	movs	r3, #1
 800bf38:	e000      	b.n	800bf3c <xQueueGenericCreateStatic+0x54>
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d109      	bne.n	800bf54 <xQueueGenericCreateStatic+0x6c>
 800bf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	623b      	str	r3, [r7, #32]
 800bf52:	e7fe      	b.n	800bf52 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d102      	bne.n	800bf60 <xQueueGenericCreateStatic+0x78>
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d101      	bne.n	800bf64 <xQueueGenericCreateStatic+0x7c>
 800bf60:	2301      	movs	r3, #1
 800bf62:	e000      	b.n	800bf66 <xQueueGenericCreateStatic+0x7e>
 800bf64:	2300      	movs	r3, #0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d109      	bne.n	800bf7e <xQueueGenericCreateStatic+0x96>
 800bf6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6e:	f383 8811 	msr	BASEPRI, r3
 800bf72:	f3bf 8f6f 	isb	sy
 800bf76:	f3bf 8f4f 	dsb	sy
 800bf7a:	61fb      	str	r3, [r7, #28]
 800bf7c:	e7fe      	b.n	800bf7c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bf7e:	2350      	movs	r3, #80	; 0x50
 800bf80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	2b50      	cmp	r3, #80	; 0x50
 800bf86:	d009      	beq.n	800bf9c <xQueueGenericCreateStatic+0xb4>
 800bf88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8c:	f383 8811 	msr	BASEPRI, r3
 800bf90:	f3bf 8f6f 	isb	sy
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	61bb      	str	r3, [r7, #24]
 800bf9a:	e7fe      	b.n	800bf9a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bf9c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d00d      	beq.n	800bfc4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfaa:	2201      	movs	r2, #1
 800bfac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bfb0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	4613      	mov	r3, r2
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	68b9      	ldr	r1, [r7, #8]
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f000 f844 	bl	800c04c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3730      	adds	r7, #48	; 0x30
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}

0800bfce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b08a      	sub	sp, #40	; 0x28
 800bfd2:	af02      	add	r7, sp, #8
 800bfd4:	60f8      	str	r0, [r7, #12]
 800bfd6:	60b9      	str	r1, [r7, #8]
 800bfd8:	4613      	mov	r3, r2
 800bfda:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d109      	bne.n	800bff6 <xQueueGenericCreate+0x28>
 800bfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	613b      	str	r3, [r7, #16]
 800bff4:	e7fe      	b.n	800bff4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d102      	bne.n	800c002 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bffc:	2300      	movs	r3, #0
 800bffe:	61fb      	str	r3, [r7, #28]
 800c000:	e004      	b.n	800c00c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	fb02 f303 	mul.w	r3, r2, r3
 800c00a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	3350      	adds	r3, #80	; 0x50
 800c010:	4618      	mov	r0, r3
 800c012:	f002 ff65 	bl	800eee0 <pvPortMalloc>
 800c016:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d011      	beq.n	800c042 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	3350      	adds	r3, #80	; 0x50
 800c026:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	2200      	movs	r2, #0
 800c02c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c030:	79fa      	ldrb	r2, [r7, #7]
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	9300      	str	r3, [sp, #0]
 800c036:	4613      	mov	r3, r2
 800c038:	697a      	ldr	r2, [r7, #20]
 800c03a:	68b9      	ldr	r1, [r7, #8]
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	f000 f805 	bl	800c04c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c042:	69bb      	ldr	r3, [r7, #24]
	}
 800c044:	4618      	mov	r0, r3
 800c046:	3720      	adds	r7, #32
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	607a      	str	r2, [r7, #4]
 800c058:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d103      	bne.n	800c068 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c060:	69bb      	ldr	r3, [r7, #24]
 800c062:	69ba      	ldr	r2, [r7, #24]
 800c064:	601a      	str	r2, [r3, #0]
 800c066:	e002      	b.n	800c06e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	68fa      	ldr	r2, [r7, #12]
 800c072:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c07a:	2101      	movs	r1, #1
 800c07c:	69b8      	ldr	r0, [r7, #24]
 800c07e:	f7ff fecb 	bl	800be18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c082:	69bb      	ldr	r3, [r7, #24]
 800c084:	78fa      	ldrb	r2, [r7, #3]
 800c086:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c08a:	bf00      	nop
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c092:	b580      	push	{r7, lr}
 800c094:	b082      	sub	sp, #8
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d00e      	beq.n	800c0be <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 f905 	bl	800c2c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c0be:	bf00      	nop
 800c0c0:	3708      	adds	r7, #8
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b086      	sub	sp, #24
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	617b      	str	r3, [r7, #20]
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c0d8:	79fb      	ldrb	r3, [r7, #7]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	6939      	ldr	r1, [r7, #16]
 800c0de:	6978      	ldr	r0, [r7, #20]
 800c0e0:	f7ff ff75 	bl	800bfce <xQueueGenericCreate>
 800c0e4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c0e6:	68f8      	ldr	r0, [r7, #12]
 800c0e8:	f7ff ffd3 	bl	800c092 <prvInitialiseMutex>

		return xNewQueue;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
	}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3718      	adds	r7, #24
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b088      	sub	sp, #32
 800c0fa:	af02      	add	r7, sp, #8
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	6039      	str	r1, [r7, #0]
 800c100:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c102:	2301      	movs	r3, #1
 800c104:	617b      	str	r3, [r7, #20]
 800c106:	2300      	movs	r3, #0
 800c108:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c10a:	79fb      	ldrb	r3, [r7, #7]
 800c10c:	9300      	str	r3, [sp, #0]
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	2200      	movs	r2, #0
 800c112:	6939      	ldr	r1, [r7, #16]
 800c114:	6978      	ldr	r0, [r7, #20]
 800c116:	f7ff fee7 	bl	800bee8 <xQueueGenericCreateStatic>
 800c11a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c11c:	68f8      	ldr	r0, [r7, #12]
 800c11e:	f7ff ffb8 	bl	800c092 <prvInitialiseMutex>

		return xNewQueue;
 800c122:	68fb      	ldr	r3, [r7, #12]
	}
 800c124:	4618      	mov	r0, r3
 800c126:	3718      	adds	r7, #24
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c12c:	b590      	push	{r4, r7, lr}
 800c12e:	b087      	sub	sp, #28
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d109      	bne.n	800c152 <xQueueGiveMutexRecursive+0x26>
 800c13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c142:	f383 8811 	msr	BASEPRI, r3
 800c146:	f3bf 8f6f 	isb	sy
 800c14a:	f3bf 8f4f 	dsb	sy
 800c14e:	60fb      	str	r3, [r7, #12]
 800c150:	e7fe      	b.n	800c150 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	689c      	ldr	r4, [r3, #8]
 800c156:	f001 fd69 	bl	800dc2c <xTaskGetCurrentTaskHandle>
 800c15a:	4603      	mov	r3, r0
 800c15c:	429c      	cmp	r4, r3
 800c15e:	d111      	bne.n	800c184 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	1e5a      	subs	r2, r3, #1
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d105      	bne.n	800c17e <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c172:	2300      	movs	r3, #0
 800c174:	2200      	movs	r2, #0
 800c176:	2100      	movs	r1, #0
 800c178:	6938      	ldr	r0, [r7, #16]
 800c17a:	f000 f8a5 	bl	800c2c8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c17e:	2301      	movs	r3, #1
 800c180:	617b      	str	r3, [r7, #20]
 800c182:	e001      	b.n	800c188 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c184:	2300      	movs	r3, #0
 800c186:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c188:	697b      	ldr	r3, [r7, #20]
	}
 800c18a:	4618      	mov	r0, r3
 800c18c:	371c      	adds	r7, #28
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd90      	pop	{r4, r7, pc}

0800c192 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c192:	b590      	push	{r4, r7, lr}
 800c194:	b087      	sub	sp, #28
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
 800c19a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d109      	bne.n	800c1ba <xQueueTakeMutexRecursive+0x28>
 800c1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1aa:	f383 8811 	msr	BASEPRI, r3
 800c1ae:	f3bf 8f6f 	isb	sy
 800c1b2:	f3bf 8f4f 	dsb	sy
 800c1b6:	60fb      	str	r3, [r7, #12]
 800c1b8:	e7fe      	b.n	800c1b8 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	689c      	ldr	r4, [r3, #8]
 800c1be:	f001 fd35 	bl	800dc2c <xTaskGetCurrentTaskHandle>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	429c      	cmp	r4, r3
 800c1c6:	d107      	bne.n	800c1d8 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	1c5a      	adds	r2, r3, #1
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	617b      	str	r3, [r7, #20]
 800c1d6:	e00c      	b.n	800c1f2 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c1d8:	6839      	ldr	r1, [r7, #0]
 800c1da:	6938      	ldr	r0, [r7, #16]
 800c1dc:	f000 fb68 	bl	800c8b0 <xQueueSemaphoreTake>
 800c1e0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d004      	beq.n	800c1f2 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	1c5a      	adds	r2, r3, #1
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c1f2:	697b      	ldr	r3, [r7, #20]
	}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	371c      	adds	r7, #28
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd90      	pop	{r4, r7, pc}

0800c1fc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b08a      	sub	sp, #40	; 0x28
 800c200:	af02      	add	r7, sp, #8
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d109      	bne.n	800c222 <xQueueCreateCountingSemaphoreStatic+0x26>
 800c20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c212:	f383 8811 	msr	BASEPRI, r3
 800c216:	f3bf 8f6f 	isb	sy
 800c21a:	f3bf 8f4f 	dsb	sy
 800c21e:	61bb      	str	r3, [r7, #24]
 800c220:	e7fe      	b.n	800c220 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c222:	68ba      	ldr	r2, [r7, #8]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	429a      	cmp	r2, r3
 800c228:	d909      	bls.n	800c23e <xQueueCreateCountingSemaphoreStatic+0x42>
 800c22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22e:	f383 8811 	msr	BASEPRI, r3
 800c232:	f3bf 8f6f 	isb	sy
 800c236:	f3bf 8f4f 	dsb	sy
 800c23a:	617b      	str	r3, [r7, #20]
 800c23c:	e7fe      	b.n	800c23c <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c23e:	2302      	movs	r3, #2
 800c240:	9300      	str	r3, [sp, #0]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	2100      	movs	r1, #0
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	f7ff fe4d 	bl	800bee8 <xQueueGenericCreateStatic>
 800c24e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c250:	69fb      	ldr	r3, [r7, #28]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d002      	beq.n	800c25c <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c256:	69fb      	ldr	r3, [r7, #28]
 800c258:	68ba      	ldr	r2, [r7, #8]
 800c25a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c25c:	69fb      	ldr	r3, [r7, #28]
	}
 800c25e:	4618      	mov	r0, r3
 800c260:	3720      	adds	r7, #32
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}

0800c266 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c266:	b580      	push	{r7, lr}
 800c268:	b086      	sub	sp, #24
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
 800c26e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d109      	bne.n	800c28a <xQueueCreateCountingSemaphore+0x24>
 800c276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	613b      	str	r3, [r7, #16]
 800c288:	e7fe      	b.n	800c288 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c28a:	683a      	ldr	r2, [r7, #0]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d909      	bls.n	800c2a6 <xQueueCreateCountingSemaphore+0x40>
 800c292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c296:	f383 8811 	msr	BASEPRI, r3
 800c29a:	f3bf 8f6f 	isb	sy
 800c29e:	f3bf 8f4f 	dsb	sy
 800c2a2:	60fb      	str	r3, [r7, #12]
 800c2a4:	e7fe      	b.n	800c2a4 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	2100      	movs	r1, #0
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f7ff fe8f 	bl	800bfce <xQueueGenericCreate>
 800c2b0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d002      	beq.n	800c2be <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	683a      	ldr	r2, [r7, #0]
 800c2bc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c2be:	697b      	ldr	r3, [r7, #20]
	}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3718      	adds	r7, #24
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b08e      	sub	sp, #56	; 0x38
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	607a      	str	r2, [r7, #4]
 800c2d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d109      	bne.n	800c2f8 <xQueueGenericSend+0x30>
 800c2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e8:	f383 8811 	msr	BASEPRI, r3
 800c2ec:	f3bf 8f6f 	isb	sy
 800c2f0:	f3bf 8f4f 	dsb	sy
 800c2f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2f6:	e7fe      	b.n	800c2f6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d103      	bne.n	800c306 <xQueueGenericSend+0x3e>
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c302:	2b00      	cmp	r3, #0
 800c304:	d101      	bne.n	800c30a <xQueueGenericSend+0x42>
 800c306:	2301      	movs	r3, #1
 800c308:	e000      	b.n	800c30c <xQueueGenericSend+0x44>
 800c30a:	2300      	movs	r3, #0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d109      	bne.n	800c324 <xQueueGenericSend+0x5c>
 800c310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c314:	f383 8811 	msr	BASEPRI, r3
 800c318:	f3bf 8f6f 	isb	sy
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	627b      	str	r3, [r7, #36]	; 0x24
 800c322:	e7fe      	b.n	800c322 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	2b02      	cmp	r3, #2
 800c328:	d103      	bne.n	800c332 <xQueueGenericSend+0x6a>
 800c32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d101      	bne.n	800c336 <xQueueGenericSend+0x6e>
 800c332:	2301      	movs	r3, #1
 800c334:	e000      	b.n	800c338 <xQueueGenericSend+0x70>
 800c336:	2300      	movs	r3, #0
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d109      	bne.n	800c350 <xQueueGenericSend+0x88>
 800c33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c340:	f383 8811 	msr	BASEPRI, r3
 800c344:	f3bf 8f6f 	isb	sy
 800c348:	f3bf 8f4f 	dsb	sy
 800c34c:	623b      	str	r3, [r7, #32]
 800c34e:	e7fe      	b.n	800c34e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c350:	f001 fc7c 	bl	800dc4c <xTaskGetSchedulerState>
 800c354:	4603      	mov	r3, r0
 800c356:	2b00      	cmp	r3, #0
 800c358:	d102      	bne.n	800c360 <xQueueGenericSend+0x98>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d101      	bne.n	800c364 <xQueueGenericSend+0x9c>
 800c360:	2301      	movs	r3, #1
 800c362:	e000      	b.n	800c366 <xQueueGenericSend+0x9e>
 800c364:	2300      	movs	r3, #0
 800c366:	2b00      	cmp	r3, #0
 800c368:	d109      	bne.n	800c37e <xQueueGenericSend+0xb6>
 800c36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36e:	f383 8811 	msr	BASEPRI, r3
 800c372:	f3bf 8f6f 	isb	sy
 800c376:	f3bf 8f4f 	dsb	sy
 800c37a:	61fb      	str	r3, [r7, #28]
 800c37c:	e7fe      	b.n	800c37c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c37e:	f002 fc95 	bl	800ecac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d302      	bcc.n	800c394 <xQueueGenericSend+0xcc>
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	2b02      	cmp	r3, #2
 800c392:	d129      	bne.n	800c3e8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	68b9      	ldr	r1, [r7, #8]
 800c398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c39a:	f000 fc48 	bl	800cc2e <prvCopyDataToQueue>
 800c39e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d010      	beq.n	800c3ca <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3aa:	3324      	adds	r3, #36	; 0x24
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f001 fa5f 	bl	800d870 <xTaskRemoveFromEventList>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d013      	beq.n	800c3e0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c3b8:	4b3f      	ldr	r3, [pc, #252]	; (800c4b8 <xQueueGenericSend+0x1f0>)
 800c3ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3be:	601a      	str	r2, [r3, #0]
 800c3c0:	f3bf 8f4f 	dsb	sy
 800c3c4:	f3bf 8f6f 	isb	sy
 800c3c8:	e00a      	b.n	800c3e0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d007      	beq.n	800c3e0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c3d0:	4b39      	ldr	r3, [pc, #228]	; (800c4b8 <xQueueGenericSend+0x1f0>)
 800c3d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3d6:	601a      	str	r2, [r3, #0]
 800c3d8:	f3bf 8f4f 	dsb	sy
 800c3dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c3e0:	f002 fc92 	bl	800ed08 <vPortExitCritical>
				return pdPASS;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	e063      	b.n	800c4b0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d103      	bne.n	800c3f6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c3ee:	f002 fc8b 	bl	800ed08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	e05c      	b.n	800c4b0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d106      	bne.n	800c40a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3fc:	f107 0314 	add.w	r3, r7, #20
 800c400:	4618      	mov	r0, r3
 800c402:	f001 fa99 	bl	800d938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c406:	2301      	movs	r3, #1
 800c408:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c40a:	f002 fc7d 	bl	800ed08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c40e:	f000 ffdb 	bl	800d3c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c412:	f002 fc4b 	bl	800ecac <vPortEnterCritical>
 800c416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c418:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c41c:	b25b      	sxtb	r3, r3
 800c41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c422:	d103      	bne.n	800c42c <xQueueGenericSend+0x164>
 800c424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c426:	2200      	movs	r2, #0
 800c428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c432:	b25b      	sxtb	r3, r3
 800c434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c438:	d103      	bne.n	800c442 <xQueueGenericSend+0x17a>
 800c43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43c:	2200      	movs	r2, #0
 800c43e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c442:	f002 fc61 	bl	800ed08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c446:	1d3a      	adds	r2, r7, #4
 800c448:	f107 0314 	add.w	r3, r7, #20
 800c44c:	4611      	mov	r1, r2
 800c44e:	4618      	mov	r0, r3
 800c450:	f001 fa88 	bl	800d964 <xTaskCheckForTimeOut>
 800c454:	4603      	mov	r3, r0
 800c456:	2b00      	cmp	r3, #0
 800c458:	d124      	bne.n	800c4a4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c45a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c45c:	f000 fcdf 	bl	800ce1e <prvIsQueueFull>
 800c460:	4603      	mov	r3, r0
 800c462:	2b00      	cmp	r3, #0
 800c464:	d018      	beq.n	800c498 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c468:	3310      	adds	r3, #16
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	4611      	mov	r1, r2
 800c46e:	4618      	mov	r0, r3
 800c470:	f001 f9b0 	bl	800d7d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c476:	f000 fc6a 	bl	800cd4e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c47a:	f000 ffeb 	bl	800d454 <xTaskResumeAll>
 800c47e:	4603      	mov	r3, r0
 800c480:	2b00      	cmp	r3, #0
 800c482:	f47f af7c 	bne.w	800c37e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800c486:	4b0c      	ldr	r3, [pc, #48]	; (800c4b8 <xQueueGenericSend+0x1f0>)
 800c488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c48c:	601a      	str	r2, [r3, #0]
 800c48e:	f3bf 8f4f 	dsb	sy
 800c492:	f3bf 8f6f 	isb	sy
 800c496:	e772      	b.n	800c37e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c49a:	f000 fc58 	bl	800cd4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c49e:	f000 ffd9 	bl	800d454 <xTaskResumeAll>
 800c4a2:	e76c      	b.n	800c37e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c4a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4a6:	f000 fc52 	bl	800cd4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4aa:	f000 ffd3 	bl	800d454 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c4ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3738      	adds	r7, #56	; 0x38
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}
 800c4b8:	e000ed04 	.word	0xe000ed04

0800c4bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b08e      	sub	sp, #56	; 0x38
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	607a      	str	r2, [r7, #4]
 800c4c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d109      	bne.n	800c4e8 <xQueueGenericSendFromISR+0x2c>
 800c4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d8:	f383 8811 	msr	BASEPRI, r3
 800c4dc:	f3bf 8f6f 	isb	sy
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	627b      	str	r3, [r7, #36]	; 0x24
 800c4e6:	e7fe      	b.n	800c4e6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d103      	bne.n	800c4f6 <xQueueGenericSendFromISR+0x3a>
 800c4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d101      	bne.n	800c4fa <xQueueGenericSendFromISR+0x3e>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e000      	b.n	800c4fc <xQueueGenericSendFromISR+0x40>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d109      	bne.n	800c514 <xQueueGenericSendFromISR+0x58>
 800c500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c504:	f383 8811 	msr	BASEPRI, r3
 800c508:	f3bf 8f6f 	isb	sy
 800c50c:	f3bf 8f4f 	dsb	sy
 800c510:	623b      	str	r3, [r7, #32]
 800c512:	e7fe      	b.n	800c512 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	2b02      	cmp	r3, #2
 800c518:	d103      	bne.n	800c522 <xQueueGenericSendFromISR+0x66>
 800c51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d101      	bne.n	800c526 <xQueueGenericSendFromISR+0x6a>
 800c522:	2301      	movs	r3, #1
 800c524:	e000      	b.n	800c528 <xQueueGenericSendFromISR+0x6c>
 800c526:	2300      	movs	r3, #0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d109      	bne.n	800c540 <xQueueGenericSendFromISR+0x84>
 800c52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c530:	f383 8811 	msr	BASEPRI, r3
 800c534:	f3bf 8f6f 	isb	sy
 800c538:	f3bf 8f4f 	dsb	sy
 800c53c:	61fb      	str	r3, [r7, #28]
 800c53e:	e7fe      	b.n	800c53e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c540:	f002 fc90 	bl	800ee64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c544:	f3ef 8211 	mrs	r2, BASEPRI
 800c548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54c:	f383 8811 	msr	BASEPRI, r3
 800c550:	f3bf 8f6f 	isb	sy
 800c554:	f3bf 8f4f 	dsb	sy
 800c558:	61ba      	str	r2, [r7, #24]
 800c55a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c55c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c55e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c568:	429a      	cmp	r2, r3
 800c56a:	d302      	bcc.n	800c572 <xQueueGenericSendFromISR+0xb6>
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	2b02      	cmp	r3, #2
 800c570:	d12c      	bne.n	800c5cc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c574:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c57c:	683a      	ldr	r2, [r7, #0]
 800c57e:	68b9      	ldr	r1, [r7, #8]
 800c580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c582:	f000 fb54 	bl	800cc2e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c586:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c58e:	d112      	bne.n	800c5b6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c594:	2b00      	cmp	r3, #0
 800c596:	d016      	beq.n	800c5c6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59a:	3324      	adds	r3, #36	; 0x24
 800c59c:	4618      	mov	r0, r3
 800c59e:	f001 f967 	bl	800d870 <xTaskRemoveFromEventList>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d00e      	beq.n	800c5c6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00b      	beq.n	800c5c6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	601a      	str	r2, [r3, #0]
 800c5b4:	e007      	b.n	800c5c6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c5b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	b25a      	sxtb	r2, r3
 800c5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c5ca:	e001      	b.n	800c5d0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	637b      	str	r3, [r7, #52]	; 0x34
 800c5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3738      	adds	r7, #56	; 0x38
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b08e      	sub	sp, #56	; 0x38
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d109      	bne.n	800c60c <xQueueGiveFromISR+0x28>
	__asm volatile
 800c5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fc:	f383 8811 	msr	BASEPRI, r3
 800c600:	f3bf 8f6f 	isb	sy
 800c604:	f3bf 8f4f 	dsb	sy
 800c608:	623b      	str	r3, [r7, #32]
 800c60a:	e7fe      	b.n	800c60a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c610:	2b00      	cmp	r3, #0
 800c612:	d009      	beq.n	800c628 <xQueueGiveFromISR+0x44>
 800c614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c618:	f383 8811 	msr	BASEPRI, r3
 800c61c:	f3bf 8f6f 	isb	sy
 800c620:	f3bf 8f4f 	dsb	sy
 800c624:	61fb      	str	r3, [r7, #28]
 800c626:	e7fe      	b.n	800c626 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d103      	bne.n	800c638 <xQueueGiveFromISR+0x54>
 800c630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d101      	bne.n	800c63c <xQueueGiveFromISR+0x58>
 800c638:	2301      	movs	r3, #1
 800c63a:	e000      	b.n	800c63e <xQueueGiveFromISR+0x5a>
 800c63c:	2300      	movs	r3, #0
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d109      	bne.n	800c656 <xQueueGiveFromISR+0x72>
 800c642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c646:	f383 8811 	msr	BASEPRI, r3
 800c64a:	f3bf 8f6f 	isb	sy
 800c64e:	f3bf 8f4f 	dsb	sy
 800c652:	61bb      	str	r3, [r7, #24]
 800c654:	e7fe      	b.n	800c654 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c656:	f002 fc05 	bl	800ee64 <vPortValidateInterruptPriority>
	__asm volatile
 800c65a:	f3ef 8211 	mrs	r2, BASEPRI
 800c65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	617a      	str	r2, [r7, #20]
 800c670:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c672:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c674:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c67a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c682:	429a      	cmp	r2, r3
 800c684:	d22b      	bcs.n	800c6de <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c688:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c68c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c692:	1c5a      	adds	r2, r3, #1
 800c694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c696:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c698:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c69c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a0:	d112      	bne.n	800c6c8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d016      	beq.n	800c6d8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ac:	3324      	adds	r3, #36	; 0x24
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f001 f8de 	bl	800d870 <xTaskRemoveFromEventList>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d00e      	beq.n	800c6d8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00b      	beq.n	800c6d8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	601a      	str	r2, [r3, #0]
 800c6c6:	e007      	b.n	800c6d8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c6c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	b25a      	sxtb	r2, r3
 800c6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	637b      	str	r3, [r7, #52]	; 0x34
 800c6dc:	e001      	b.n	800c6e2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	637b      	str	r3, [r7, #52]	; 0x34
 800c6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3738      	adds	r7, #56	; 0x38
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
	...

0800c6f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b08c      	sub	sp, #48	; 0x30
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	60f8      	str	r0, [r7, #12]
 800c700:	60b9      	str	r1, [r7, #8]
 800c702:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c704:	2300      	movs	r3, #0
 800c706:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d109      	bne.n	800c726 <xQueueReceive+0x2e>
	__asm volatile
 800c712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c716:	f383 8811 	msr	BASEPRI, r3
 800c71a:	f3bf 8f6f 	isb	sy
 800c71e:	f3bf 8f4f 	dsb	sy
 800c722:	623b      	str	r3, [r7, #32]
 800c724:	e7fe      	b.n	800c724 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d103      	bne.n	800c734 <xQueueReceive+0x3c>
 800c72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c730:	2b00      	cmp	r3, #0
 800c732:	d101      	bne.n	800c738 <xQueueReceive+0x40>
 800c734:	2301      	movs	r3, #1
 800c736:	e000      	b.n	800c73a <xQueueReceive+0x42>
 800c738:	2300      	movs	r3, #0
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d109      	bne.n	800c752 <xQueueReceive+0x5a>
 800c73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	61fb      	str	r3, [r7, #28]
 800c750:	e7fe      	b.n	800c750 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c752:	f001 fa7b 	bl	800dc4c <xTaskGetSchedulerState>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d102      	bne.n	800c762 <xQueueReceive+0x6a>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d101      	bne.n	800c766 <xQueueReceive+0x6e>
 800c762:	2301      	movs	r3, #1
 800c764:	e000      	b.n	800c768 <xQueueReceive+0x70>
 800c766:	2300      	movs	r3, #0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d109      	bne.n	800c780 <xQueueReceive+0x88>
 800c76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c770:	f383 8811 	msr	BASEPRI, r3
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	f3bf 8f4f 	dsb	sy
 800c77c:	61bb      	str	r3, [r7, #24]
 800c77e:	e7fe      	b.n	800c77e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c780:	f002 fa94 	bl	800ecac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c788:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d01f      	beq.n	800c7d0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c790:	68b9      	ldr	r1, [r7, #8]
 800c792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c794:	f000 fab5 	bl	800cd02 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79a:	1e5a      	subs	r2, r3, #1
 800c79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a2:	691b      	ldr	r3, [r3, #16]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d00f      	beq.n	800c7c8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7aa:	3310      	adds	r3, #16
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f001 f85f 	bl	800d870 <xTaskRemoveFromEventList>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d007      	beq.n	800c7c8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c7b8:	4b3c      	ldr	r3, [pc, #240]	; (800c8ac <xQueueReceive+0x1b4>)
 800c7ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7be:	601a      	str	r2, [r3, #0]
 800c7c0:	f3bf 8f4f 	dsb	sy
 800c7c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c7c8:	f002 fa9e 	bl	800ed08 <vPortExitCritical>
				return pdPASS;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	e069      	b.n	800c8a4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d103      	bne.n	800c7de <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c7d6:	f002 fa97 	bl	800ed08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	e062      	b.n	800c8a4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d106      	bne.n	800c7f2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c7e4:	f107 0310 	add.w	r3, r7, #16
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f001 f8a5 	bl	800d938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c7f2:	f002 fa89 	bl	800ed08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c7f6:	f000 fde7 	bl	800d3c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c7fa:	f002 fa57 	bl	800ecac <vPortEnterCritical>
 800c7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c804:	b25b      	sxtb	r3, r3
 800c806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c80a:	d103      	bne.n	800c814 <xQueueReceive+0x11c>
 800c80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80e:	2200      	movs	r2, #0
 800c810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c81a:	b25b      	sxtb	r3, r3
 800c81c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c820:	d103      	bne.n	800c82a <xQueueReceive+0x132>
 800c822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c824:	2200      	movs	r2, #0
 800c826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c82a:	f002 fa6d 	bl	800ed08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c82e:	1d3a      	adds	r2, r7, #4
 800c830:	f107 0310 	add.w	r3, r7, #16
 800c834:	4611      	mov	r1, r2
 800c836:	4618      	mov	r0, r3
 800c838:	f001 f894 	bl	800d964 <xTaskCheckForTimeOut>
 800c83c:	4603      	mov	r3, r0
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d123      	bne.n	800c88a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c844:	f000 fad5 	bl	800cdf2 <prvIsQueueEmpty>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d017      	beq.n	800c87e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c850:	3324      	adds	r3, #36	; 0x24
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	4611      	mov	r1, r2
 800c856:	4618      	mov	r0, r3
 800c858:	f000 ffbc 	bl	800d7d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c85c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c85e:	f000 fa76 	bl	800cd4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c862:	f000 fdf7 	bl	800d454 <xTaskResumeAll>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d189      	bne.n	800c780 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800c86c:	4b0f      	ldr	r3, [pc, #60]	; (800c8ac <xQueueReceive+0x1b4>)
 800c86e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c872:	601a      	str	r2, [r3, #0]
 800c874:	f3bf 8f4f 	dsb	sy
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	e780      	b.n	800c780 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c87e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c880:	f000 fa65 	bl	800cd4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c884:	f000 fde6 	bl	800d454 <xTaskResumeAll>
 800c888:	e77a      	b.n	800c780 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c88a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c88c:	f000 fa5f 	bl	800cd4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c890:	f000 fde0 	bl	800d454 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c896:	f000 faac 	bl	800cdf2 <prvIsQueueEmpty>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	f43f af6f 	beq.w	800c780 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c8a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3730      	adds	r7, #48	; 0x30
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	e000ed04 	.word	0xe000ed04

0800c8b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b08e      	sub	sp, #56	; 0x38
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d109      	bne.n	800c8e0 <xQueueSemaphoreTake+0x30>
 800c8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d0:	f383 8811 	msr	BASEPRI, r3
 800c8d4:	f3bf 8f6f 	isb	sy
 800c8d8:	f3bf 8f4f 	dsb	sy
 800c8dc:	623b      	str	r3, [r7, #32]
 800c8de:	e7fe      	b.n	800c8de <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d009      	beq.n	800c8fc <xQueueSemaphoreTake+0x4c>
 800c8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ec:	f383 8811 	msr	BASEPRI, r3
 800c8f0:	f3bf 8f6f 	isb	sy
 800c8f4:	f3bf 8f4f 	dsb	sy
 800c8f8:	61fb      	str	r3, [r7, #28]
 800c8fa:	e7fe      	b.n	800c8fa <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c8fc:	f001 f9a6 	bl	800dc4c <xTaskGetSchedulerState>
 800c900:	4603      	mov	r3, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d102      	bne.n	800c90c <xQueueSemaphoreTake+0x5c>
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d101      	bne.n	800c910 <xQueueSemaphoreTake+0x60>
 800c90c:	2301      	movs	r3, #1
 800c90e:	e000      	b.n	800c912 <xQueueSemaphoreTake+0x62>
 800c910:	2300      	movs	r3, #0
 800c912:	2b00      	cmp	r3, #0
 800c914:	d109      	bne.n	800c92a <xQueueSemaphoreTake+0x7a>
 800c916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c91a:	f383 8811 	msr	BASEPRI, r3
 800c91e:	f3bf 8f6f 	isb	sy
 800c922:	f3bf 8f4f 	dsb	sy
 800c926:	61bb      	str	r3, [r7, #24]
 800c928:	e7fe      	b.n	800c928 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c92a:	f002 f9bf 	bl	800ecac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c932:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c936:	2b00      	cmp	r3, #0
 800c938:	d024      	beq.n	800c984 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c93c:	1e5a      	subs	r2, r3, #1
 800c93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c940:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d104      	bne.n	800c954 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c94a:	f001 faf1 	bl	800df30 <pvTaskIncrementMutexHeldCount>
 800c94e:	4602      	mov	r2, r0
 800c950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c952:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c956:	691b      	ldr	r3, [r3, #16]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00f      	beq.n	800c97c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95e:	3310      	adds	r3, #16
 800c960:	4618      	mov	r0, r3
 800c962:	f000 ff85 	bl	800d870 <xTaskRemoveFromEventList>
 800c966:	4603      	mov	r3, r0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d007      	beq.n	800c97c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c96c:	4b53      	ldr	r3, [pc, #332]	; (800cabc <xQueueSemaphoreTake+0x20c>)
 800c96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c972:	601a      	str	r2, [r3, #0]
 800c974:	f3bf 8f4f 	dsb	sy
 800c978:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c97c:	f002 f9c4 	bl	800ed08 <vPortExitCritical>
				return pdPASS;
 800c980:	2301      	movs	r3, #1
 800c982:	e096      	b.n	800cab2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d110      	bne.n	800c9ac <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d009      	beq.n	800c9a4 <xQueueSemaphoreTake+0xf4>
 800c990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c994:	f383 8811 	msr	BASEPRI, r3
 800c998:	f3bf 8f6f 	isb	sy
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	617b      	str	r3, [r7, #20]
 800c9a2:	e7fe      	b.n	800c9a2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c9a4:	f002 f9b0 	bl	800ed08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	e082      	b.n	800cab2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d106      	bne.n	800c9c0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c9b2:	f107 030c 	add.w	r3, r7, #12
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f000 ffbe 	bl	800d938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c9c0:	f002 f9a2 	bl	800ed08 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c9c4:	f000 fd00 	bl	800d3c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c9c8:	f002 f970 	bl	800ecac <vPortEnterCritical>
 800c9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9d2:	b25b      	sxtb	r3, r3
 800c9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9d8:	d103      	bne.n	800c9e2 <xQueueSemaphoreTake+0x132>
 800c9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9dc:	2200      	movs	r2, #0
 800c9de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9e8:	b25b      	sxtb	r3, r3
 800c9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ee:	d103      	bne.n	800c9f8 <xQueueSemaphoreTake+0x148>
 800c9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c9f8:	f002 f986 	bl	800ed08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c9fc:	463a      	mov	r2, r7
 800c9fe:	f107 030c 	add.w	r3, r7, #12
 800ca02:	4611      	mov	r1, r2
 800ca04:	4618      	mov	r0, r3
 800ca06:	f000 ffad 	bl	800d964 <xTaskCheckForTimeOut>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d132      	bne.n	800ca76 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca12:	f000 f9ee 	bl	800cdf2 <prvIsQueueEmpty>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d026      	beq.n	800ca6a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d109      	bne.n	800ca38 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800ca24:	f002 f942 	bl	800ecac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ca28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2a:	689b      	ldr	r3, [r3, #8]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f001 f92b 	bl	800dc88 <xTaskPriorityInherit>
 800ca32:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ca34:	f002 f968 	bl	800ed08 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ca38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3a:	3324      	adds	r3, #36	; 0x24
 800ca3c:	683a      	ldr	r2, [r7, #0]
 800ca3e:	4611      	mov	r1, r2
 800ca40:	4618      	mov	r0, r3
 800ca42:	f000 fec7 	bl	800d7d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ca46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca48:	f000 f981 	bl	800cd4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ca4c:	f000 fd02 	bl	800d454 <xTaskResumeAll>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f47f af69 	bne.w	800c92a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800ca58:	4b18      	ldr	r3, [pc, #96]	; (800cabc <xQueueSemaphoreTake+0x20c>)
 800ca5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca5e:	601a      	str	r2, [r3, #0]
 800ca60:	f3bf 8f4f 	dsb	sy
 800ca64:	f3bf 8f6f 	isb	sy
 800ca68:	e75f      	b.n	800c92a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ca6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca6c:	f000 f96f 	bl	800cd4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca70:	f000 fcf0 	bl	800d454 <xTaskResumeAll>
 800ca74:	e759      	b.n	800c92a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ca76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca78:	f000 f969 	bl	800cd4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca7c:	f000 fcea 	bl	800d454 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca82:	f000 f9b6 	bl	800cdf2 <prvIsQueueEmpty>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	f43f af4e 	beq.w	800c92a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ca8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d00d      	beq.n	800cab0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800ca94:	f002 f90a 	bl	800ecac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ca98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca9a:	f000 f8b0 	bl	800cbfe <prvGetDisinheritPriorityAfterTimeout>
 800ca9e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800caa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800caa6:	4618      	mov	r0, r3
 800caa8:	f001 f9c2 	bl	800de30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800caac:	f002 f92c 	bl	800ed08 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cab0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3738      	adds	r7, #56	; 0x38
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
 800caba:	bf00      	nop
 800cabc:	e000ed04 	.word	0xe000ed04

0800cac0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b08e      	sub	sp, #56	; 0x38
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d109      	bne.n	800caea <xQueueReceiveFromISR+0x2a>
 800cad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cada:	f383 8811 	msr	BASEPRI, r3
 800cade:	f3bf 8f6f 	isb	sy
 800cae2:	f3bf 8f4f 	dsb	sy
 800cae6:	623b      	str	r3, [r7, #32]
 800cae8:	e7fe      	b.n	800cae8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d103      	bne.n	800caf8 <xQueueReceiveFromISR+0x38>
 800caf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d101      	bne.n	800cafc <xQueueReceiveFromISR+0x3c>
 800caf8:	2301      	movs	r3, #1
 800cafa:	e000      	b.n	800cafe <xQueueReceiveFromISR+0x3e>
 800cafc:	2300      	movs	r3, #0
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d109      	bne.n	800cb16 <xQueueReceiveFromISR+0x56>
 800cb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb06:	f383 8811 	msr	BASEPRI, r3
 800cb0a:	f3bf 8f6f 	isb	sy
 800cb0e:	f3bf 8f4f 	dsb	sy
 800cb12:	61fb      	str	r3, [r7, #28]
 800cb14:	e7fe      	b.n	800cb14 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb16:	f002 f9a5 	bl	800ee64 <vPortValidateInterruptPriority>
	__asm volatile
 800cb1a:	f3ef 8211 	mrs	r2, BASEPRI
 800cb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb22:	f383 8811 	msr	BASEPRI, r3
 800cb26:	f3bf 8f6f 	isb	sy
 800cb2a:	f3bf 8f4f 	dsb	sy
 800cb2e:	61ba      	str	r2, [r7, #24]
 800cb30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cb32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cb34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d02f      	beq.n	800cba2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cb4c:	68b9      	ldr	r1, [r7, #8]
 800cb4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb50:	f000 f8d7 	bl	800cd02 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb56:	1e5a      	subs	r2, r3, #1
 800cb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cb5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cb60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb64:	d112      	bne.n	800cb8c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb68:	691b      	ldr	r3, [r3, #16]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d016      	beq.n	800cb9c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb70:	3310      	adds	r3, #16
 800cb72:	4618      	mov	r0, r3
 800cb74:	f000 fe7c 	bl	800d870 <xTaskRemoveFromEventList>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d00e      	beq.n	800cb9c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d00b      	beq.n	800cb9c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2201      	movs	r2, #1
 800cb88:	601a      	str	r2, [r3, #0]
 800cb8a:	e007      	b.n	800cb9c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cb8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb90:	3301      	adds	r3, #1
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	b25a      	sxtb	r2, r3
 800cb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	637b      	str	r3, [r7, #52]	; 0x34
 800cba0:	e001      	b.n	800cba6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800cba2:	2300      	movs	r3, #0
 800cba4:	637b      	str	r3, [r7, #52]	; 0x34
 800cba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cbb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3738      	adds	r7, #56	; 0x38
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b084      	sub	sp, #16
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d109      	bne.n	800cbe0 <vQueueDelete+0x26>
	__asm volatile
 800cbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd0:	f383 8811 	msr	BASEPRI, r3
 800cbd4:	f3bf 8f6f 	isb	sy
 800cbd8:	f3bf 8f4f 	dsb	sy
 800cbdc:	60bb      	str	r3, [r7, #8]
 800cbde:	e7fe      	b.n	800cbde <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800cbe0:	68f8      	ldr	r0, [r7, #12]
 800cbe2:	f000 f95d 	bl	800cea0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d102      	bne.n	800cbf6 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f002 fa37 	bl	800f064 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cbf6:	bf00      	nop
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}

0800cbfe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cbfe:	b480      	push	{r7}
 800cc00:	b085      	sub	sp, #20
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d006      	beq.n	800cc1c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800cc18:	60fb      	str	r3, [r7, #12]
 800cc1a:	e001      	b.n	800cc20 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cc20:	68fb      	ldr	r3, [r7, #12]
	}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3714      	adds	r7, #20
 800cc26:	46bd      	mov	sp, r7
 800cc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2c:	4770      	bx	lr

0800cc2e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cc2e:	b580      	push	{r7, lr}
 800cc30:	b086      	sub	sp, #24
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	60f8      	str	r0, [r7, #12]
 800cc36:	60b9      	str	r1, [r7, #8]
 800cc38:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc42:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d10d      	bne.n	800cc68 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d14d      	bne.n	800ccf0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	689b      	ldr	r3, [r3, #8]
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f001 f87d 	bl	800dd58 <xTaskPriorityDisinherit>
 800cc5e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2200      	movs	r2, #0
 800cc64:	609a      	str	r2, [r3, #8]
 800cc66:	e043      	b.n	800ccf0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d119      	bne.n	800cca2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	6858      	ldr	r0, [r3, #4]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc76:	461a      	mov	r2, r3
 800cc78:	68b9      	ldr	r1, [r7, #8]
 800cc7a:	f004 ff8d 	bl	8011b98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	685a      	ldr	r2, [r3, #4]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc86:	441a      	add	r2, r3
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	685a      	ldr	r2, [r3, #4]
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	689b      	ldr	r3, [r3, #8]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d32b      	bcc.n	800ccf0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	605a      	str	r2, [r3, #4]
 800cca0:	e026      	b.n	800ccf0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	68d8      	ldr	r0, [r3, #12]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccaa:	461a      	mov	r2, r3
 800ccac:	68b9      	ldr	r1, [r7, #8]
 800ccae:	f004 ff73 	bl	8011b98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	68da      	ldr	r2, [r3, #12]
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccba:	425b      	negs	r3, r3
 800ccbc:	441a      	add	r2, r3
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	68da      	ldr	r2, [r3, #12]
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d207      	bcs.n	800ccde <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	689a      	ldr	r2, [r3, #8]
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccd6:	425b      	negs	r3, r3
 800ccd8:	441a      	add	r2, r3
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	d105      	bne.n	800ccf0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d002      	beq.n	800ccf0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	3b01      	subs	r3, #1
 800ccee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	1c5a      	adds	r2, r3, #1
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ccf8:	697b      	ldr	r3, [r7, #20]
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3718      	adds	r7, #24
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}

0800cd02 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cd02:	b580      	push	{r7, lr}
 800cd04:	b082      	sub	sp, #8
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
 800cd0a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d018      	beq.n	800cd46 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	68da      	ldr	r2, [r3, #12]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd1c:	441a      	add	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	68da      	ldr	r2, [r3, #12]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d303      	bcc.n	800cd36 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	68d9      	ldr	r1, [r3, #12]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd3e:	461a      	mov	r2, r3
 800cd40:	6838      	ldr	r0, [r7, #0]
 800cd42:	f004 ff29 	bl	8011b98 <memcpy>
	}
}
 800cd46:	bf00      	nop
 800cd48:	3708      	adds	r7, #8
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}

0800cd4e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cd4e:	b580      	push	{r7, lr}
 800cd50:	b084      	sub	sp, #16
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cd56:	f001 ffa9 	bl	800ecac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd60:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd62:	e011      	b.n	800cd88 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d012      	beq.n	800cd92 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	3324      	adds	r3, #36	; 0x24
 800cd70:	4618      	mov	r0, r3
 800cd72:	f000 fd7d 	bl	800d870 <xTaskRemoveFromEventList>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d001      	beq.n	800cd80 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cd7c:	f000 fe52 	bl	800da24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cd80:	7bfb      	ldrb	r3, [r7, #15]
 800cd82:	3b01      	subs	r3, #1
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	dce9      	bgt.n	800cd64 <prvUnlockQueue+0x16>
 800cd90:	e000      	b.n	800cd94 <prvUnlockQueue+0x46>
					break;
 800cd92:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	22ff      	movs	r2, #255	; 0xff
 800cd98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cd9c:	f001 ffb4 	bl	800ed08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cda0:	f001 ff84 	bl	800ecac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdaa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cdac:	e011      	b.n	800cdd2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	691b      	ldr	r3, [r3, #16]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d012      	beq.n	800cddc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	3310      	adds	r3, #16
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f000 fd58 	bl	800d870 <xTaskRemoveFromEventList>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d001      	beq.n	800cdca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cdc6:	f000 fe2d 	bl	800da24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cdca:	7bbb      	ldrb	r3, [r7, #14]
 800cdcc:	3b01      	subs	r3, #1
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cdd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	dce9      	bgt.n	800cdae <prvUnlockQueue+0x60>
 800cdda:	e000      	b.n	800cdde <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cddc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	22ff      	movs	r2, #255	; 0xff
 800cde2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cde6:	f001 ff8f 	bl	800ed08 <vPortExitCritical>
}
 800cdea:	bf00      	nop
 800cdec:	3710      	adds	r7, #16
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b084      	sub	sp, #16
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cdfa:	f001 ff57 	bl	800ecac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d102      	bne.n	800ce0c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ce06:	2301      	movs	r3, #1
 800ce08:	60fb      	str	r3, [r7, #12]
 800ce0a:	e001      	b.n	800ce10 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ce10:	f001 ff7a 	bl	800ed08 <vPortExitCritical>

	return xReturn;
 800ce14:	68fb      	ldr	r3, [r7, #12]
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3710      	adds	r7, #16
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b084      	sub	sp, #16
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ce26:	f001 ff41 	bl	800ecac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d102      	bne.n	800ce3c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ce36:	2301      	movs	r3, #1
 800ce38:	60fb      	str	r3, [r7, #12]
 800ce3a:	e001      	b.n	800ce40 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ce40:	f001 ff62 	bl	800ed08 <vPortExitCritical>

	return xReturn;
 800ce44:	68fb      	ldr	r3, [r7, #12]
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3710      	adds	r7, #16
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
	...

0800ce50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ce50:	b480      	push	{r7}
 800ce52:	b085      	sub	sp, #20
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	60fb      	str	r3, [r7, #12]
 800ce5e:	e014      	b.n	800ce8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ce60:	4a0e      	ldr	r2, [pc, #56]	; (800ce9c <vQueueAddToRegistry+0x4c>)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d10b      	bne.n	800ce84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ce6c:	490b      	ldr	r1, [pc, #44]	; (800ce9c <vQueueAddToRegistry+0x4c>)
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	683a      	ldr	r2, [r7, #0]
 800ce72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ce76:	4a09      	ldr	r2, [pc, #36]	; (800ce9c <vQueueAddToRegistry+0x4c>)
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	00db      	lsls	r3, r3, #3
 800ce7c:	4413      	add	r3, r2
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ce82:	e005      	b.n	800ce90 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	3301      	adds	r3, #1
 800ce88:	60fb      	str	r3, [r7, #12]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2b07      	cmp	r3, #7
 800ce8e:	d9e7      	bls.n	800ce60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ce90:	bf00      	nop
 800ce92:	3714      	adds	r7, #20
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr
 800ce9c:	20006f4c 	.word	0x20006f4c

0800cea0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cea0:	b480      	push	{r7}
 800cea2:	b085      	sub	sp, #20
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cea8:	2300      	movs	r3, #0
 800ceaa:	60fb      	str	r3, [r7, #12]
 800ceac:	e016      	b.n	800cedc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ceae:	4a10      	ldr	r2, [pc, #64]	; (800cef0 <vQueueUnregisterQueue+0x50>)
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	00db      	lsls	r3, r3, #3
 800ceb4:	4413      	add	r3, r2
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d10b      	bne.n	800ced6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cebe:	4a0c      	ldr	r2, [pc, #48]	; (800cef0 <vQueueUnregisterQueue+0x50>)
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2100      	movs	r1, #0
 800cec4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cec8:	4a09      	ldr	r2, [pc, #36]	; (800cef0 <vQueueUnregisterQueue+0x50>)
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	00db      	lsls	r3, r3, #3
 800cece:	4413      	add	r3, r2
 800ced0:	2200      	movs	r2, #0
 800ced2:	605a      	str	r2, [r3, #4]
				break;
 800ced4:	e005      	b.n	800cee2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	3301      	adds	r3, #1
 800ceda:	60fb      	str	r3, [r7, #12]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2b07      	cmp	r3, #7
 800cee0:	d9e5      	bls.n	800ceae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cee2:	bf00      	nop
 800cee4:	3714      	adds	r7, #20
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop
 800cef0:	20006f4c 	.word	0x20006f4c

0800cef4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b086      	sub	sp, #24
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	60b9      	str	r1, [r7, #8]
 800cefe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cf04:	f001 fed2 	bl	800ecac <vPortEnterCritical>
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf0e:	b25b      	sxtb	r3, r3
 800cf10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf14:	d103      	bne.n	800cf1e <vQueueWaitForMessageRestricted+0x2a>
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf24:	b25b      	sxtb	r3, r3
 800cf26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf2a:	d103      	bne.n	800cf34 <vQueueWaitForMessageRestricted+0x40>
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf34:	f001 fee8 	bl	800ed08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d106      	bne.n	800cf4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	3324      	adds	r3, #36	; 0x24
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	68b9      	ldr	r1, [r7, #8]
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f000 fc67 	bl	800d81c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cf4e:	6978      	ldr	r0, [r7, #20]
 800cf50:	f7ff fefd 	bl	800cd4e <prvUnlockQueue>
	}
 800cf54:	bf00      	nop
 800cf56:	3718      	adds	r7, #24
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b08e      	sub	sp, #56	; 0x38
 800cf60:	af04      	add	r7, sp, #16
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	607a      	str	r2, [r7, #4]
 800cf68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cf6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d109      	bne.n	800cf84 <xTaskCreateStatic+0x28>
 800cf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf74:	f383 8811 	msr	BASEPRI, r3
 800cf78:	f3bf 8f6f 	isb	sy
 800cf7c:	f3bf 8f4f 	dsb	sy
 800cf80:	623b      	str	r3, [r7, #32]
 800cf82:	e7fe      	b.n	800cf82 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800cf84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d109      	bne.n	800cf9e <xTaskCreateStatic+0x42>
 800cf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8e:	f383 8811 	msr	BASEPRI, r3
 800cf92:	f3bf 8f6f 	isb	sy
 800cf96:	f3bf 8f4f 	dsb	sy
 800cf9a:	61fb      	str	r3, [r7, #28]
 800cf9c:	e7fe      	b.n	800cf9c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cf9e:	235c      	movs	r3, #92	; 0x5c
 800cfa0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	2b5c      	cmp	r3, #92	; 0x5c
 800cfa6:	d009      	beq.n	800cfbc <xTaskCreateStatic+0x60>
 800cfa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfac:	f383 8811 	msr	BASEPRI, r3
 800cfb0:	f3bf 8f6f 	isb	sy
 800cfb4:	f3bf 8f4f 	dsb	sy
 800cfb8:	61bb      	str	r3, [r7, #24]
 800cfba:	e7fe      	b.n	800cfba <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cfbc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d01e      	beq.n	800d002 <xTaskCreateStatic+0xa6>
 800cfc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d01b      	beq.n	800d002 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfcc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfd2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd6:	2202      	movs	r2, #2
 800cfd8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cfdc:	2300      	movs	r3, #0
 800cfde:	9303      	str	r3, [sp, #12]
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe2:	9302      	str	r3, [sp, #8]
 800cfe4:	f107 0314 	add.w	r3, r7, #20
 800cfe8:	9301      	str	r3, [sp, #4]
 800cfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfec:	9300      	str	r3, [sp, #0]
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	68b9      	ldr	r1, [r7, #8]
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f000 f850 	bl	800d09a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cffa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cffc:	f000 f8dc 	bl	800d1b8 <prvAddNewTaskToReadyList>
 800d000:	e001      	b.n	800d006 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800d002:	2300      	movs	r3, #0
 800d004:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d006:	697b      	ldr	r3, [r7, #20]
	}
 800d008:	4618      	mov	r0, r3
 800d00a:	3728      	adds	r7, #40	; 0x28
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d010:	b580      	push	{r7, lr}
 800d012:	b08c      	sub	sp, #48	; 0x30
 800d014:	af04      	add	r7, sp, #16
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	603b      	str	r3, [r7, #0]
 800d01c:	4613      	mov	r3, r2
 800d01e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d020:	88fb      	ldrh	r3, [r7, #6]
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	4618      	mov	r0, r3
 800d026:	f001 ff5b 	bl	800eee0 <pvPortMalloc>
 800d02a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d00e      	beq.n	800d050 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d032:	205c      	movs	r0, #92	; 0x5c
 800d034:	f001 ff54 	bl	800eee0 <pvPortMalloc>
 800d038:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d03a:	69fb      	ldr	r3, [r7, #28]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d003      	beq.n	800d048 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d040:	69fb      	ldr	r3, [r7, #28]
 800d042:	697a      	ldr	r2, [r7, #20]
 800d044:	631a      	str	r2, [r3, #48]	; 0x30
 800d046:	e005      	b.n	800d054 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d048:	6978      	ldr	r0, [r7, #20]
 800d04a:	f002 f80b 	bl	800f064 <vPortFree>
 800d04e:	e001      	b.n	800d054 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d050:	2300      	movs	r3, #0
 800d052:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d017      	beq.n	800d08a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d05a:	69fb      	ldr	r3, [r7, #28]
 800d05c:	2200      	movs	r2, #0
 800d05e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d062:	88fa      	ldrh	r2, [r7, #6]
 800d064:	2300      	movs	r3, #0
 800d066:	9303      	str	r3, [sp, #12]
 800d068:	69fb      	ldr	r3, [r7, #28]
 800d06a:	9302      	str	r3, [sp, #8]
 800d06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06e:	9301      	str	r3, [sp, #4]
 800d070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	68b9      	ldr	r1, [r7, #8]
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	f000 f80e 	bl	800d09a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d07e:	69f8      	ldr	r0, [r7, #28]
 800d080:	f000 f89a 	bl	800d1b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d084:	2301      	movs	r3, #1
 800d086:	61bb      	str	r3, [r7, #24]
 800d088:	e002      	b.n	800d090 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d08a:	f04f 33ff 	mov.w	r3, #4294967295
 800d08e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d090:	69bb      	ldr	r3, [r7, #24]
	}
 800d092:	4618      	mov	r0, r3
 800d094:	3720      	adds	r7, #32
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}

0800d09a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d09a:	b580      	push	{r7, lr}
 800d09c:	b088      	sub	sp, #32
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	60f8      	str	r0, [r7, #12]
 800d0a2:	60b9      	str	r1, [r7, #8]
 800d0a4:	607a      	str	r2, [r7, #4]
 800d0a6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	461a      	mov	r2, r3
 800d0b2:	21a5      	movs	r1, #165	; 0xa5
 800d0b4:	f004 fd7b 	bl	8011bae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d0c2:	3b01      	subs	r3, #1
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	4413      	add	r3, r2
 800d0c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d0ca:	69bb      	ldr	r3, [r7, #24]
 800d0cc:	f023 0307 	bic.w	r3, r3, #7
 800d0d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	f003 0307 	and.w	r3, r3, #7
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d009      	beq.n	800d0f0 <prvInitialiseNewTask+0x56>
 800d0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e0:	f383 8811 	msr	BASEPRI, r3
 800d0e4:	f3bf 8f6f 	isb	sy
 800d0e8:	f3bf 8f4f 	dsb	sy
 800d0ec:	617b      	str	r3, [r7, #20]
 800d0ee:	e7fe      	b.n	800d0ee <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d01f      	beq.n	800d136 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	61fb      	str	r3, [r7, #28]
 800d0fa:	e012      	b.n	800d122 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d0fc:	68ba      	ldr	r2, [r7, #8]
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	4413      	add	r3, r2
 800d102:	7819      	ldrb	r1, [r3, #0]
 800d104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	4413      	add	r3, r2
 800d10a:	3334      	adds	r3, #52	; 0x34
 800d10c:	460a      	mov	r2, r1
 800d10e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d110:	68ba      	ldr	r2, [r7, #8]
 800d112:	69fb      	ldr	r3, [r7, #28]
 800d114:	4413      	add	r3, r2
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d006      	beq.n	800d12a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	3301      	adds	r3, #1
 800d120:	61fb      	str	r3, [r7, #28]
 800d122:	69fb      	ldr	r3, [r7, #28]
 800d124:	2b0f      	cmp	r3, #15
 800d126:	d9e9      	bls.n	800d0fc <prvInitialiseNewTask+0x62>
 800d128:	e000      	b.n	800d12c <prvInitialiseNewTask+0x92>
			{
				break;
 800d12a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12e:	2200      	movs	r2, #0
 800d130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d134:	e003      	b.n	800d13e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d138:	2200      	movs	r2, #0
 800d13a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d140:	2b37      	cmp	r3, #55	; 0x37
 800d142:	d901      	bls.n	800d148 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d144:	2337      	movs	r3, #55	; 0x37
 800d146:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d14c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d152:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d156:	2200      	movs	r2, #0
 800d158:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d15c:	3304      	adds	r3, #4
 800d15e:	4618      	mov	r0, r3
 800d160:	f7fe fdc6 	bl	800bcf0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d166:	3318      	adds	r3, #24
 800d168:	4618      	mov	r0, r3
 800d16a:	f7fe fdc1 	bl	800bcf0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d172:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d176:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d182:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d186:	2200      	movs	r2, #0
 800d188:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18c:	2200      	movs	r2, #0
 800d18e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d192:	683a      	ldr	r2, [r7, #0]
 800d194:	68f9      	ldr	r1, [r7, #12]
 800d196:	69b8      	ldr	r0, [r7, #24]
 800d198:	f001 fc60 	bl	800ea5c <pxPortInitialiseStack>
 800d19c:	4602      	mov	r2, r0
 800d19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d002      	beq.n	800d1ae <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1ae:	bf00      	nop
 800d1b0:	3720      	adds	r7, #32
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
	...

0800d1b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d1c0:	f001 fd74 	bl	800ecac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d1c4:	4b2d      	ldr	r3, [pc, #180]	; (800d27c <prvAddNewTaskToReadyList+0xc4>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	4a2c      	ldr	r2, [pc, #176]	; (800d27c <prvAddNewTaskToReadyList+0xc4>)
 800d1cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d1ce:	4b2c      	ldr	r3, [pc, #176]	; (800d280 <prvAddNewTaskToReadyList+0xc8>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d109      	bne.n	800d1ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d1d6:	4a2a      	ldr	r2, [pc, #168]	; (800d280 <prvAddNewTaskToReadyList+0xc8>)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d1dc:	4b27      	ldr	r3, [pc, #156]	; (800d27c <prvAddNewTaskToReadyList+0xc4>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	d110      	bne.n	800d206 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d1e4:	f000 fc68 	bl	800dab8 <prvInitialiseTaskLists>
 800d1e8:	e00d      	b.n	800d206 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d1ea:	4b26      	ldr	r3, [pc, #152]	; (800d284 <prvAddNewTaskToReadyList+0xcc>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d109      	bne.n	800d206 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d1f2:	4b23      	ldr	r3, [pc, #140]	; (800d280 <prvAddNewTaskToReadyList+0xc8>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d802      	bhi.n	800d206 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d200:	4a1f      	ldr	r2, [pc, #124]	; (800d280 <prvAddNewTaskToReadyList+0xc8>)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d206:	4b20      	ldr	r3, [pc, #128]	; (800d288 <prvAddNewTaskToReadyList+0xd0>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	3301      	adds	r3, #1
 800d20c:	4a1e      	ldr	r2, [pc, #120]	; (800d288 <prvAddNewTaskToReadyList+0xd0>)
 800d20e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d210:	4b1d      	ldr	r3, [pc, #116]	; (800d288 <prvAddNewTaskToReadyList+0xd0>)
 800d212:	681a      	ldr	r2, [r3, #0]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d21c:	4b1b      	ldr	r3, [pc, #108]	; (800d28c <prvAddNewTaskToReadyList+0xd4>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	429a      	cmp	r2, r3
 800d222:	d903      	bls.n	800d22c <prvAddNewTaskToReadyList+0x74>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d228:	4a18      	ldr	r2, [pc, #96]	; (800d28c <prvAddNewTaskToReadyList+0xd4>)
 800d22a:	6013      	str	r3, [r2, #0]
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d230:	4613      	mov	r3, r2
 800d232:	009b      	lsls	r3, r3, #2
 800d234:	4413      	add	r3, r2
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	4a15      	ldr	r2, [pc, #84]	; (800d290 <prvAddNewTaskToReadyList+0xd8>)
 800d23a:	441a      	add	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	3304      	adds	r3, #4
 800d240:	4619      	mov	r1, r3
 800d242:	4610      	mov	r0, r2
 800d244:	f7fe fd61 	bl	800bd0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d248:	f001 fd5e 	bl	800ed08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d24c:	4b0d      	ldr	r3, [pc, #52]	; (800d284 <prvAddNewTaskToReadyList+0xcc>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d00e      	beq.n	800d272 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d254:	4b0a      	ldr	r3, [pc, #40]	; (800d280 <prvAddNewTaskToReadyList+0xc8>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25e:	429a      	cmp	r2, r3
 800d260:	d207      	bcs.n	800d272 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d262:	4b0c      	ldr	r3, [pc, #48]	; (800d294 <prvAddNewTaskToReadyList+0xdc>)
 800d264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d268:	601a      	str	r2, [r3, #0]
 800d26a:	f3bf 8f4f 	dsb	sy
 800d26e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d272:	bf00      	nop
 800d274:	3708      	adds	r7, #8
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	20002ccc 	.word	0x20002ccc
 800d280:	200027f8 	.word	0x200027f8
 800d284:	20002cd8 	.word	0x20002cd8
 800d288:	20002ce8 	.word	0x20002ce8
 800d28c:	20002cd4 	.word	0x20002cd4
 800d290:	200027fc 	.word	0x200027fc
 800d294:	e000ed04 	.word	0xe000ed04

0800d298 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d016      	beq.n	800d2d8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d2aa:	4b13      	ldr	r3, [pc, #76]	; (800d2f8 <vTaskDelay+0x60>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d009      	beq.n	800d2c6 <vTaskDelay+0x2e>
 800d2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b6:	f383 8811 	msr	BASEPRI, r3
 800d2ba:	f3bf 8f6f 	isb	sy
 800d2be:	f3bf 8f4f 	dsb	sy
 800d2c2:	60bb      	str	r3, [r7, #8]
 800d2c4:	e7fe      	b.n	800d2c4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800d2c6:	f000 f87f 	bl	800d3c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d2ca:	2100      	movs	r1, #0
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f001 f82b 	bl	800e328 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d2d2:	f000 f8bf 	bl	800d454 <xTaskResumeAll>
 800d2d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d107      	bne.n	800d2ee <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800d2de:	4b07      	ldr	r3, [pc, #28]	; (800d2fc <vTaskDelay+0x64>)
 800d2e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2e4:	601a      	str	r2, [r3, #0]
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d2ee:	bf00      	nop
 800d2f0:	3710      	adds	r7, #16
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	20002cf4 	.word	0x20002cf4
 800d2fc:	e000ed04 	.word	0xe000ed04

0800d300 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b08a      	sub	sp, #40	; 0x28
 800d304:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d306:	2300      	movs	r3, #0
 800d308:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d30a:	2300      	movs	r3, #0
 800d30c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d30e:	463a      	mov	r2, r7
 800d310:	1d39      	adds	r1, r7, #4
 800d312:	f107 0308 	add.w	r3, r7, #8
 800d316:	4618      	mov	r0, r3
 800d318:	f7fe fc96 	bl	800bc48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d31c:	6839      	ldr	r1, [r7, #0]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	68ba      	ldr	r2, [r7, #8]
 800d322:	9202      	str	r2, [sp, #8]
 800d324:	9301      	str	r3, [sp, #4]
 800d326:	2300      	movs	r3, #0
 800d328:	9300      	str	r3, [sp, #0]
 800d32a:	2300      	movs	r3, #0
 800d32c:	460a      	mov	r2, r1
 800d32e:	4920      	ldr	r1, [pc, #128]	; (800d3b0 <vTaskStartScheduler+0xb0>)
 800d330:	4820      	ldr	r0, [pc, #128]	; (800d3b4 <vTaskStartScheduler+0xb4>)
 800d332:	f7ff fe13 	bl	800cf5c <xTaskCreateStatic>
 800d336:	4602      	mov	r2, r0
 800d338:	4b1f      	ldr	r3, [pc, #124]	; (800d3b8 <vTaskStartScheduler+0xb8>)
 800d33a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d33c:	4b1e      	ldr	r3, [pc, #120]	; (800d3b8 <vTaskStartScheduler+0xb8>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d002      	beq.n	800d34a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d344:	2301      	movs	r3, #1
 800d346:	617b      	str	r3, [r7, #20]
 800d348:	e001      	b.n	800d34e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d34a:	2300      	movs	r3, #0
 800d34c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	2b01      	cmp	r3, #1
 800d352:	d102      	bne.n	800d35a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d354:	f001 f83c 	bl	800e3d0 <xTimerCreateTimerTask>
 800d358:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d115      	bne.n	800d38c <vTaskStartScheduler+0x8c>
 800d360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d364:	f383 8811 	msr	BASEPRI, r3
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d372:	4b12      	ldr	r3, [pc, #72]	; (800d3bc <vTaskStartScheduler+0xbc>)
 800d374:	f04f 32ff 	mov.w	r2, #4294967295
 800d378:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d37a:	4b11      	ldr	r3, [pc, #68]	; (800d3c0 <vTaskStartScheduler+0xc0>)
 800d37c:	2201      	movs	r2, #1
 800d37e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d380:	4b10      	ldr	r3, [pc, #64]	; (800d3c4 <vTaskStartScheduler+0xc4>)
 800d382:	2200      	movs	r2, #0
 800d384:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d386:	f001 fbf3 	bl	800eb70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d38a:	e00d      	b.n	800d3a8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d392:	d109      	bne.n	800d3a8 <vTaskStartScheduler+0xa8>
 800d394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d398:	f383 8811 	msr	BASEPRI, r3
 800d39c:	f3bf 8f6f 	isb	sy
 800d3a0:	f3bf 8f4f 	dsb	sy
 800d3a4:	60fb      	str	r3, [r7, #12]
 800d3a6:	e7fe      	b.n	800d3a6 <vTaskStartScheduler+0xa6>
}
 800d3a8:	bf00      	nop
 800d3aa:	3718      	adds	r7, #24
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	080130e0 	.word	0x080130e0
 800d3b4:	0800da3d 	.word	0x0800da3d
 800d3b8:	20002cf0 	.word	0x20002cf0
 800d3bc:	20002cec 	.word	0x20002cec
 800d3c0:	20002cd8 	.word	0x20002cd8
 800d3c4:	20002cd0 	.word	0x20002cd0

0800d3c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d3cc:	4b04      	ldr	r3, [pc, #16]	; (800d3e0 <vTaskSuspendAll+0x18>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	4a03      	ldr	r2, [pc, #12]	; (800d3e0 <vTaskSuspendAll+0x18>)
 800d3d4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d3d6:	bf00      	nop
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr
 800d3e0:	20002cf4 	.word	0x20002cf4

0800d3e4 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800d3ee:	4b14      	ldr	r3, [pc, #80]	; (800d440 <prvGetExpectedIdleTime+0x5c>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d001      	beq.n	800d3fa <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800d3fa:	4b12      	ldr	r3, [pc, #72]	; (800d444 <prvGetExpectedIdleTime+0x60>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d400:	2b00      	cmp	r3, #0
 800d402:	d002      	beq.n	800d40a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800d404:	2300      	movs	r3, #0
 800d406:	607b      	str	r3, [r7, #4]
 800d408:	e012      	b.n	800d430 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800d40a:	4b0f      	ldr	r3, [pc, #60]	; (800d448 <prvGetExpectedIdleTime+0x64>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	2b01      	cmp	r3, #1
 800d410:	d902      	bls.n	800d418 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800d412:	2300      	movs	r3, #0
 800d414:	607b      	str	r3, [r7, #4]
 800d416:	e00b      	b.n	800d430 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d002      	beq.n	800d424 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800d41e:	2300      	movs	r3, #0
 800d420:	607b      	str	r3, [r7, #4]
 800d422:	e005      	b.n	800d430 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800d424:	4b09      	ldr	r3, [pc, #36]	; (800d44c <prvGetExpectedIdleTime+0x68>)
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	4b09      	ldr	r3, [pc, #36]	; (800d450 <prvGetExpectedIdleTime+0x6c>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	1ad3      	subs	r3, r2, r3
 800d42e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800d430:	687b      	ldr	r3, [r7, #4]
	}
 800d432:	4618      	mov	r0, r3
 800d434:	370c      	adds	r7, #12
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr
 800d43e:	bf00      	nop
 800d440:	20002cd4 	.word	0x20002cd4
 800d444:	200027f8 	.word	0x200027f8
 800d448:	200027fc 	.word	0x200027fc
 800d44c:	20002cec 	.word	0x20002cec
 800d450:	20002cd0 	.word	0x20002cd0

0800d454 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d45a:	2300      	movs	r3, #0
 800d45c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d45e:	2300      	movs	r3, #0
 800d460:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d462:	4b41      	ldr	r3, [pc, #260]	; (800d568 <xTaskResumeAll+0x114>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d109      	bne.n	800d47e <xTaskResumeAll+0x2a>
 800d46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46e:	f383 8811 	msr	BASEPRI, r3
 800d472:	f3bf 8f6f 	isb	sy
 800d476:	f3bf 8f4f 	dsb	sy
 800d47a:	603b      	str	r3, [r7, #0]
 800d47c:	e7fe      	b.n	800d47c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d47e:	f001 fc15 	bl	800ecac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d482:	4b39      	ldr	r3, [pc, #228]	; (800d568 <xTaskResumeAll+0x114>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	3b01      	subs	r3, #1
 800d488:	4a37      	ldr	r2, [pc, #220]	; (800d568 <xTaskResumeAll+0x114>)
 800d48a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d48c:	4b36      	ldr	r3, [pc, #216]	; (800d568 <xTaskResumeAll+0x114>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d162      	bne.n	800d55a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d494:	4b35      	ldr	r3, [pc, #212]	; (800d56c <xTaskResumeAll+0x118>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d05e      	beq.n	800d55a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d49c:	e02f      	b.n	800d4fe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d49e:	4b34      	ldr	r3, [pc, #208]	; (800d570 <xTaskResumeAll+0x11c>)
 800d4a0:	68db      	ldr	r3, [r3, #12]
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	3318      	adds	r3, #24
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7fe fc8a 	bl	800bdc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	3304      	adds	r3, #4
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7fe fc85 	bl	800bdc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4be:	4b2d      	ldr	r3, [pc, #180]	; (800d574 <xTaskResumeAll+0x120>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d903      	bls.n	800d4ce <xTaskResumeAll+0x7a>
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ca:	4a2a      	ldr	r2, [pc, #168]	; (800d574 <xTaskResumeAll+0x120>)
 800d4cc:	6013      	str	r3, [r2, #0]
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	009b      	lsls	r3, r3, #2
 800d4d6:	4413      	add	r3, r2
 800d4d8:	009b      	lsls	r3, r3, #2
 800d4da:	4a27      	ldr	r2, [pc, #156]	; (800d578 <xTaskResumeAll+0x124>)
 800d4dc:	441a      	add	r2, r3
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	3304      	adds	r3, #4
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	4610      	mov	r0, r2
 800d4e6:	f7fe fc10 	bl	800bd0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ee:	4b23      	ldr	r3, [pc, #140]	; (800d57c <xTaskResumeAll+0x128>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d302      	bcc.n	800d4fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d4f8:	4b21      	ldr	r3, [pc, #132]	; (800d580 <xTaskResumeAll+0x12c>)
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d4fe:	4b1c      	ldr	r3, [pc, #112]	; (800d570 <xTaskResumeAll+0x11c>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d1cb      	bne.n	800d49e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d001      	beq.n	800d510 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d50c:	f000 fb6e 	bl	800dbec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d510:	4b1c      	ldr	r3, [pc, #112]	; (800d584 <xTaskResumeAll+0x130>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d010      	beq.n	800d53e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d51c:	f000 f846 	bl	800d5ac <xTaskIncrementTick>
 800d520:	4603      	mov	r3, r0
 800d522:	2b00      	cmp	r3, #0
 800d524:	d002      	beq.n	800d52c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d526:	4b16      	ldr	r3, [pc, #88]	; (800d580 <xTaskResumeAll+0x12c>)
 800d528:	2201      	movs	r2, #1
 800d52a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	3b01      	subs	r3, #1
 800d530:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d1f1      	bne.n	800d51c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800d538:	4b12      	ldr	r3, [pc, #72]	; (800d584 <xTaskResumeAll+0x130>)
 800d53a:	2200      	movs	r2, #0
 800d53c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d53e:	4b10      	ldr	r3, [pc, #64]	; (800d580 <xTaskResumeAll+0x12c>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d009      	beq.n	800d55a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d546:	2301      	movs	r3, #1
 800d548:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d54a:	4b0f      	ldr	r3, [pc, #60]	; (800d588 <xTaskResumeAll+0x134>)
 800d54c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d550:	601a      	str	r2, [r3, #0]
 800d552:	f3bf 8f4f 	dsb	sy
 800d556:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d55a:	f001 fbd5 	bl	800ed08 <vPortExitCritical>

	return xAlreadyYielded;
 800d55e:	68bb      	ldr	r3, [r7, #8]
}
 800d560:	4618      	mov	r0, r3
 800d562:	3710      	adds	r7, #16
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	20002cf4 	.word	0x20002cf4
 800d56c:	20002ccc 	.word	0x20002ccc
 800d570:	20002c8c 	.word	0x20002c8c
 800d574:	20002cd4 	.word	0x20002cd4
 800d578:	200027fc 	.word	0x200027fc
 800d57c:	200027f8 	.word	0x200027f8
 800d580:	20002ce0 	.word	0x20002ce0
 800d584:	20002cdc 	.word	0x20002cdc
 800d588:	e000ed04 	.word	0xe000ed04

0800d58c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d58c:	b480      	push	{r7}
 800d58e:	b083      	sub	sp, #12
 800d590:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d592:	4b05      	ldr	r3, [pc, #20]	; (800d5a8 <xTaskGetTickCount+0x1c>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d598:	687b      	ldr	r3, [r7, #4]
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	370c      	adds	r7, #12
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr
 800d5a6:	bf00      	nop
 800d5a8:	20002cd0 	.word	0x20002cd0

0800d5ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b086      	sub	sp, #24
 800d5b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5b6:	4b4e      	ldr	r3, [pc, #312]	; (800d6f0 <xTaskIncrementTick+0x144>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	f040 8088 	bne.w	800d6d0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d5c0:	4b4c      	ldr	r3, [pc, #304]	; (800d6f4 <xTaskIncrementTick+0x148>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d5c8:	4a4a      	ldr	r2, [pc, #296]	; (800d6f4 <xTaskIncrementTick+0x148>)
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d11f      	bne.n	800d614 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800d5d4:	4b48      	ldr	r3, [pc, #288]	; (800d6f8 <xTaskIncrementTick+0x14c>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d009      	beq.n	800d5f2 <xTaskIncrementTick+0x46>
 800d5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e2:	f383 8811 	msr	BASEPRI, r3
 800d5e6:	f3bf 8f6f 	isb	sy
 800d5ea:	f3bf 8f4f 	dsb	sy
 800d5ee:	603b      	str	r3, [r7, #0]
 800d5f0:	e7fe      	b.n	800d5f0 <xTaskIncrementTick+0x44>
 800d5f2:	4b41      	ldr	r3, [pc, #260]	; (800d6f8 <xTaskIncrementTick+0x14c>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	60fb      	str	r3, [r7, #12]
 800d5f8:	4b40      	ldr	r3, [pc, #256]	; (800d6fc <xTaskIncrementTick+0x150>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4a3e      	ldr	r2, [pc, #248]	; (800d6f8 <xTaskIncrementTick+0x14c>)
 800d5fe:	6013      	str	r3, [r2, #0]
 800d600:	4a3e      	ldr	r2, [pc, #248]	; (800d6fc <xTaskIncrementTick+0x150>)
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	6013      	str	r3, [r2, #0]
 800d606:	4b3e      	ldr	r3, [pc, #248]	; (800d700 <xTaskIncrementTick+0x154>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	3301      	adds	r3, #1
 800d60c:	4a3c      	ldr	r2, [pc, #240]	; (800d700 <xTaskIncrementTick+0x154>)
 800d60e:	6013      	str	r3, [r2, #0]
 800d610:	f000 faec 	bl	800dbec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d614:	4b3b      	ldr	r3, [pc, #236]	; (800d704 <xTaskIncrementTick+0x158>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	693a      	ldr	r2, [r7, #16]
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d349      	bcc.n	800d6b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d61e:	4b36      	ldr	r3, [pc, #216]	; (800d6f8 <xTaskIncrementTick+0x14c>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d104      	bne.n	800d632 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d628:	4b36      	ldr	r3, [pc, #216]	; (800d704 <xTaskIncrementTick+0x158>)
 800d62a:	f04f 32ff 	mov.w	r2, #4294967295
 800d62e:	601a      	str	r2, [r3, #0]
					break;
 800d630:	e03f      	b.n	800d6b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d632:	4b31      	ldr	r3, [pc, #196]	; (800d6f8 <xTaskIncrementTick+0x14c>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	68db      	ldr	r3, [r3, #12]
 800d63a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d642:	693a      	ldr	r2, [r7, #16]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	429a      	cmp	r2, r3
 800d648:	d203      	bcs.n	800d652 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d64a:	4a2e      	ldr	r2, [pc, #184]	; (800d704 <xTaskIncrementTick+0x158>)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d650:	e02f      	b.n	800d6b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	3304      	adds	r3, #4
 800d656:	4618      	mov	r0, r3
 800d658:	f7fe fbb4 	bl	800bdc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d660:	2b00      	cmp	r3, #0
 800d662:	d004      	beq.n	800d66e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	3318      	adds	r3, #24
 800d668:	4618      	mov	r0, r3
 800d66a:	f7fe fbab 	bl	800bdc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d672:	4b25      	ldr	r3, [pc, #148]	; (800d708 <xTaskIncrementTick+0x15c>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	429a      	cmp	r2, r3
 800d678:	d903      	bls.n	800d682 <xTaskIncrementTick+0xd6>
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d67e:	4a22      	ldr	r2, [pc, #136]	; (800d708 <xTaskIncrementTick+0x15c>)
 800d680:	6013      	str	r3, [r2, #0]
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d686:	4613      	mov	r3, r2
 800d688:	009b      	lsls	r3, r3, #2
 800d68a:	4413      	add	r3, r2
 800d68c:	009b      	lsls	r3, r3, #2
 800d68e:	4a1f      	ldr	r2, [pc, #124]	; (800d70c <xTaskIncrementTick+0x160>)
 800d690:	441a      	add	r2, r3
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	3304      	adds	r3, #4
 800d696:	4619      	mov	r1, r3
 800d698:	4610      	mov	r0, r2
 800d69a:	f7fe fb36 	bl	800bd0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6a2:	4b1b      	ldr	r3, [pc, #108]	; (800d710 <xTaskIncrementTick+0x164>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d3b8      	bcc.n	800d61e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6b0:	e7b5      	b.n	800d61e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d6b2:	4b17      	ldr	r3, [pc, #92]	; (800d710 <xTaskIncrementTick+0x164>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6b8:	4914      	ldr	r1, [pc, #80]	; (800d70c <xTaskIncrementTick+0x160>)
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	009b      	lsls	r3, r3, #2
 800d6be:	4413      	add	r3, r2
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	440b      	add	r3, r1
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d907      	bls.n	800d6da <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	617b      	str	r3, [r7, #20]
 800d6ce:	e004      	b.n	800d6da <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d6d0:	4b10      	ldr	r3, [pc, #64]	; (800d714 <xTaskIncrementTick+0x168>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	4a0f      	ldr	r2, [pc, #60]	; (800d714 <xTaskIncrementTick+0x168>)
 800d6d8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d6da:	4b0f      	ldr	r3, [pc, #60]	; (800d718 <xTaskIncrementTick+0x16c>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d001      	beq.n	800d6e6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d6e6:	697b      	ldr	r3, [r7, #20]
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3718      	adds	r7, #24
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}
 800d6f0:	20002cf4 	.word	0x20002cf4
 800d6f4:	20002cd0 	.word	0x20002cd0
 800d6f8:	20002c84 	.word	0x20002c84
 800d6fc:	20002c88 	.word	0x20002c88
 800d700:	20002ce4 	.word	0x20002ce4
 800d704:	20002cec 	.word	0x20002cec
 800d708:	20002cd4 	.word	0x20002cd4
 800d70c:	200027fc 	.word	0x200027fc
 800d710:	200027f8 	.word	0x200027f8
 800d714:	20002cdc 	.word	0x20002cdc
 800d718:	20002ce0 	.word	0x20002ce0

0800d71c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d71c:	b480      	push	{r7}
 800d71e:	b085      	sub	sp, #20
 800d720:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d722:	4b27      	ldr	r3, [pc, #156]	; (800d7c0 <vTaskSwitchContext+0xa4>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d003      	beq.n	800d732 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d72a:	4b26      	ldr	r3, [pc, #152]	; (800d7c4 <vTaskSwitchContext+0xa8>)
 800d72c:	2201      	movs	r2, #1
 800d72e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d730:	e040      	b.n	800d7b4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800d732:	4b24      	ldr	r3, [pc, #144]	; (800d7c4 <vTaskSwitchContext+0xa8>)
 800d734:	2200      	movs	r2, #0
 800d736:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d738:	4b23      	ldr	r3, [pc, #140]	; (800d7c8 <vTaskSwitchContext+0xac>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	60fb      	str	r3, [r7, #12]
 800d73e:	e00f      	b.n	800d760 <vTaskSwitchContext+0x44>
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d109      	bne.n	800d75a <vTaskSwitchContext+0x3e>
 800d746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d74a:	f383 8811 	msr	BASEPRI, r3
 800d74e:	f3bf 8f6f 	isb	sy
 800d752:	f3bf 8f4f 	dsb	sy
 800d756:	607b      	str	r3, [r7, #4]
 800d758:	e7fe      	b.n	800d758 <vTaskSwitchContext+0x3c>
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	3b01      	subs	r3, #1
 800d75e:	60fb      	str	r3, [r7, #12]
 800d760:	491a      	ldr	r1, [pc, #104]	; (800d7cc <vTaskSwitchContext+0xb0>)
 800d762:	68fa      	ldr	r2, [r7, #12]
 800d764:	4613      	mov	r3, r2
 800d766:	009b      	lsls	r3, r3, #2
 800d768:	4413      	add	r3, r2
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	440b      	add	r3, r1
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d0e5      	beq.n	800d740 <vTaskSwitchContext+0x24>
 800d774:	68fa      	ldr	r2, [r7, #12]
 800d776:	4613      	mov	r3, r2
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	4413      	add	r3, r2
 800d77c:	009b      	lsls	r3, r3, #2
 800d77e:	4a13      	ldr	r2, [pc, #76]	; (800d7cc <vTaskSwitchContext+0xb0>)
 800d780:	4413      	add	r3, r2
 800d782:	60bb      	str	r3, [r7, #8]
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	685a      	ldr	r2, [r3, #4]
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	605a      	str	r2, [r3, #4]
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	685a      	ldr	r2, [r3, #4]
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	3308      	adds	r3, #8
 800d796:	429a      	cmp	r2, r3
 800d798:	d104      	bne.n	800d7a4 <vTaskSwitchContext+0x88>
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	685a      	ldr	r2, [r3, #4]
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	605a      	str	r2, [r3, #4]
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	685b      	ldr	r3, [r3, #4]
 800d7a8:	68db      	ldr	r3, [r3, #12]
 800d7aa:	4a09      	ldr	r2, [pc, #36]	; (800d7d0 <vTaskSwitchContext+0xb4>)
 800d7ac:	6013      	str	r3, [r2, #0]
 800d7ae:	4a06      	ldr	r2, [pc, #24]	; (800d7c8 <vTaskSwitchContext+0xac>)
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	6013      	str	r3, [r2, #0]
}
 800d7b4:	bf00      	nop
 800d7b6:	3714      	adds	r7, #20
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr
 800d7c0:	20002cf4 	.word	0x20002cf4
 800d7c4:	20002ce0 	.word	0x20002ce0
 800d7c8:	20002cd4 	.word	0x20002cd4
 800d7cc:	200027fc 	.word	0x200027fc
 800d7d0:	200027f8 	.word	0x200027f8

0800d7d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d109      	bne.n	800d7f8 <vTaskPlaceOnEventList+0x24>
 800d7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e8:	f383 8811 	msr	BASEPRI, r3
 800d7ec:	f3bf 8f6f 	isb	sy
 800d7f0:	f3bf 8f4f 	dsb	sy
 800d7f4:	60fb      	str	r3, [r7, #12]
 800d7f6:	e7fe      	b.n	800d7f6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d7f8:	4b07      	ldr	r3, [pc, #28]	; (800d818 <vTaskPlaceOnEventList+0x44>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	3318      	adds	r3, #24
 800d7fe:	4619      	mov	r1, r3
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f7fe faa6 	bl	800bd52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d806:	2101      	movs	r1, #1
 800d808:	6838      	ldr	r0, [r7, #0]
 800d80a:	f000 fd8d 	bl	800e328 <prvAddCurrentTaskToDelayedList>
}
 800d80e:	bf00      	nop
 800d810:	3710      	adds	r7, #16
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	200027f8 	.word	0x200027f8

0800d81c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b086      	sub	sp, #24
 800d820:	af00      	add	r7, sp, #0
 800d822:	60f8      	str	r0, [r7, #12]
 800d824:	60b9      	str	r1, [r7, #8]
 800d826:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d109      	bne.n	800d842 <vTaskPlaceOnEventListRestricted+0x26>
 800d82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d832:	f383 8811 	msr	BASEPRI, r3
 800d836:	f3bf 8f6f 	isb	sy
 800d83a:	f3bf 8f4f 	dsb	sy
 800d83e:	617b      	str	r3, [r7, #20]
 800d840:	e7fe      	b.n	800d840 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d842:	4b0a      	ldr	r3, [pc, #40]	; (800d86c <vTaskPlaceOnEventListRestricted+0x50>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	3318      	adds	r3, #24
 800d848:	4619      	mov	r1, r3
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	f7fe fa5d 	bl	800bd0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d002      	beq.n	800d85c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800d856:	f04f 33ff 	mov.w	r3, #4294967295
 800d85a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d85c:	6879      	ldr	r1, [r7, #4]
 800d85e:	68b8      	ldr	r0, [r7, #8]
 800d860:	f000 fd62 	bl	800e328 <prvAddCurrentTaskToDelayedList>
	}
 800d864:	bf00      	nop
 800d866:	3718      	adds	r7, #24
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	200027f8 	.word	0x200027f8

0800d870 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b086      	sub	sp, #24
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d109      	bne.n	800d89a <xTaskRemoveFromEventList+0x2a>
 800d886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d88a:	f383 8811 	msr	BASEPRI, r3
 800d88e:	f3bf 8f6f 	isb	sy
 800d892:	f3bf 8f4f 	dsb	sy
 800d896:	60fb      	str	r3, [r7, #12]
 800d898:	e7fe      	b.n	800d898 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	3318      	adds	r3, #24
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7fe fa90 	bl	800bdc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8a4:	4b1e      	ldr	r3, [pc, #120]	; (800d920 <xTaskRemoveFromEventList+0xb0>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d11f      	bne.n	800d8ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	3304      	adds	r3, #4
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f7fe fa87 	bl	800bdc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ba:	4b1a      	ldr	r3, [pc, #104]	; (800d924 <xTaskRemoveFromEventList+0xb4>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d903      	bls.n	800d8ca <xTaskRemoveFromEventList+0x5a>
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c6:	4a17      	ldr	r2, [pc, #92]	; (800d924 <xTaskRemoveFromEventList+0xb4>)
 800d8c8:	6013      	str	r3, [r2, #0]
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ce:	4613      	mov	r3, r2
 800d8d0:	009b      	lsls	r3, r3, #2
 800d8d2:	4413      	add	r3, r2
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	4a14      	ldr	r2, [pc, #80]	; (800d928 <xTaskRemoveFromEventList+0xb8>)
 800d8d8:	441a      	add	r2, r3
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	3304      	adds	r3, #4
 800d8de:	4619      	mov	r1, r3
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	f7fe fa12 	bl	800bd0a <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800d8e6:	f000 f981 	bl	800dbec <prvResetNextTaskUnblockTime>
 800d8ea:	e005      	b.n	800d8f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	3318      	adds	r3, #24
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	480e      	ldr	r0, [pc, #56]	; (800d92c <xTaskRemoveFromEventList+0xbc>)
 800d8f4:	f7fe fa09 	bl	800bd0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8fc:	4b0c      	ldr	r3, [pc, #48]	; (800d930 <xTaskRemoveFromEventList+0xc0>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d902:	429a      	cmp	r2, r3
 800d904:	d905      	bls.n	800d912 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d906:	2301      	movs	r3, #1
 800d908:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d90a:	4b0a      	ldr	r3, [pc, #40]	; (800d934 <xTaskRemoveFromEventList+0xc4>)
 800d90c:	2201      	movs	r2, #1
 800d90e:	601a      	str	r2, [r3, #0]
 800d910:	e001      	b.n	800d916 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d912:	2300      	movs	r3, #0
 800d914:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d916:	697b      	ldr	r3, [r7, #20]
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3718      	adds	r7, #24
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	20002cf4 	.word	0x20002cf4
 800d924:	20002cd4 	.word	0x20002cd4
 800d928:	200027fc 	.word	0x200027fc
 800d92c:	20002c8c 	.word	0x20002c8c
 800d930:	200027f8 	.word	0x200027f8
 800d934:	20002ce0 	.word	0x20002ce0

0800d938 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d940:	4b06      	ldr	r3, [pc, #24]	; (800d95c <vTaskInternalSetTimeOutState+0x24>)
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d948:	4b05      	ldr	r3, [pc, #20]	; (800d960 <vTaskInternalSetTimeOutState+0x28>)
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	605a      	str	r2, [r3, #4]
}
 800d950:	bf00      	nop
 800d952:	370c      	adds	r7, #12
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr
 800d95c:	20002ce4 	.word	0x20002ce4
 800d960:	20002cd0 	.word	0x20002cd0

0800d964 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b088      	sub	sp, #32
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d109      	bne.n	800d988 <xTaskCheckForTimeOut+0x24>
 800d974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d978:	f383 8811 	msr	BASEPRI, r3
 800d97c:	f3bf 8f6f 	isb	sy
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	613b      	str	r3, [r7, #16]
 800d986:	e7fe      	b.n	800d986 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d109      	bne.n	800d9a2 <xTaskCheckForTimeOut+0x3e>
 800d98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d992:	f383 8811 	msr	BASEPRI, r3
 800d996:	f3bf 8f6f 	isb	sy
 800d99a:	f3bf 8f4f 	dsb	sy
 800d99e:	60fb      	str	r3, [r7, #12]
 800d9a0:	e7fe      	b.n	800d9a0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800d9a2:	f001 f983 	bl	800ecac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d9a6:	4b1d      	ldr	r3, [pc, #116]	; (800da1c <xTaskCheckForTimeOut+0xb8>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	69ba      	ldr	r2, [r7, #24]
 800d9b2:	1ad3      	subs	r3, r2, r3
 800d9b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9be:	d102      	bne.n	800d9c6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	61fb      	str	r3, [r7, #28]
 800d9c4:	e023      	b.n	800da0e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681a      	ldr	r2, [r3, #0]
 800d9ca:	4b15      	ldr	r3, [pc, #84]	; (800da20 <xTaskCheckForTimeOut+0xbc>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d007      	beq.n	800d9e2 <xTaskCheckForTimeOut+0x7e>
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	69ba      	ldr	r2, [r7, #24]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d302      	bcc.n	800d9e2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	61fb      	str	r3, [r7, #28]
 800d9e0:	e015      	b.n	800da0e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	697a      	ldr	r2, [r7, #20]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d20b      	bcs.n	800da04 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	1ad2      	subs	r2, r2, r3
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f7ff ff9d 	bl	800d938 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d9fe:	2300      	movs	r3, #0
 800da00:	61fb      	str	r3, [r7, #28]
 800da02:	e004      	b.n	800da0e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	2200      	movs	r2, #0
 800da08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800da0a:	2301      	movs	r3, #1
 800da0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800da0e:	f001 f97b 	bl	800ed08 <vPortExitCritical>

	return xReturn;
 800da12:	69fb      	ldr	r3, [r7, #28]
}
 800da14:	4618      	mov	r0, r3
 800da16:	3720      	adds	r7, #32
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}
 800da1c:	20002cd0 	.word	0x20002cd0
 800da20:	20002ce4 	.word	0x20002ce4

0800da24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800da24:	b480      	push	{r7}
 800da26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800da28:	4b03      	ldr	r3, [pc, #12]	; (800da38 <vTaskMissedYield+0x14>)
 800da2a:	2201      	movs	r2, #1
 800da2c:	601a      	str	r2, [r3, #0]
}
 800da2e:	bf00      	nop
 800da30:	46bd      	mov	sp, r7
 800da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da36:	4770      	bx	lr
 800da38:	20002ce0 	.word	0x20002ce0

0800da3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800da44:	f000 f878 	bl	800db38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800da48:	4b17      	ldr	r3, [pc, #92]	; (800daa8 <prvIdleTask+0x6c>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d907      	bls.n	800da60 <prvIdleTask+0x24>
			{
				taskYIELD();
 800da50:	4b16      	ldr	r3, [pc, #88]	; (800daac <prvIdleTask+0x70>)
 800da52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da56:	601a      	str	r2, [r3, #0]
 800da58:	f3bf 8f4f 	dsb	sy
 800da5c:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800da60:	f7ff fcc0 	bl	800d3e4 <prvGetExpectedIdleTime>
 800da64:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d9eb      	bls.n	800da44 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800da6c:	f7ff fcac 	bl	800d3c8 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800da70:	4b0f      	ldr	r3, [pc, #60]	; (800dab0 <prvIdleTask+0x74>)
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	4b0f      	ldr	r3, [pc, #60]	; (800dab4 <prvIdleTask+0x78>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d209      	bcs.n	800da90 <prvIdleTask+0x54>
 800da7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da80:	f383 8811 	msr	BASEPRI, r3
 800da84:	f3bf 8f6f 	isb	sy
 800da88:	f3bf 8f4f 	dsb	sy
 800da8c:	60bb      	str	r3, [r7, #8]
 800da8e:	e7fe      	b.n	800da8e <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800da90:	f7ff fca8 	bl	800d3e4 <prvGetExpectedIdleTime>
 800da94:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2b01      	cmp	r3, #1
 800da9a:	d902      	bls.n	800daa2 <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800da9c:	68f8      	ldr	r0, [r7, #12]
 800da9e:	f7f3 fbaf 	bl	8001200 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800daa2:	f7ff fcd7 	bl	800d454 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800daa6:	e7cd      	b.n	800da44 <prvIdleTask+0x8>
 800daa8:	200027fc 	.word	0x200027fc
 800daac:	e000ed04 	.word	0xe000ed04
 800dab0:	20002cec 	.word	0x20002cec
 800dab4:	20002cd0 	.word	0x20002cd0

0800dab8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dabe:	2300      	movs	r3, #0
 800dac0:	607b      	str	r3, [r7, #4]
 800dac2:	e00c      	b.n	800dade <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	4613      	mov	r3, r2
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	4413      	add	r3, r2
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	4a12      	ldr	r2, [pc, #72]	; (800db18 <prvInitialiseTaskLists+0x60>)
 800dad0:	4413      	add	r3, r2
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7fe f8ec 	bl	800bcb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	3301      	adds	r3, #1
 800dadc:	607b      	str	r3, [r7, #4]
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2b37      	cmp	r3, #55	; 0x37
 800dae2:	d9ef      	bls.n	800dac4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dae4:	480d      	ldr	r0, [pc, #52]	; (800db1c <prvInitialiseTaskLists+0x64>)
 800dae6:	f7fe f8e3 	bl	800bcb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800daea:	480d      	ldr	r0, [pc, #52]	; (800db20 <prvInitialiseTaskLists+0x68>)
 800daec:	f7fe f8e0 	bl	800bcb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800daf0:	480c      	ldr	r0, [pc, #48]	; (800db24 <prvInitialiseTaskLists+0x6c>)
 800daf2:	f7fe f8dd 	bl	800bcb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800daf6:	480c      	ldr	r0, [pc, #48]	; (800db28 <prvInitialiseTaskLists+0x70>)
 800daf8:	f7fe f8da 	bl	800bcb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dafc:	480b      	ldr	r0, [pc, #44]	; (800db2c <prvInitialiseTaskLists+0x74>)
 800dafe:	f7fe f8d7 	bl	800bcb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800db02:	4b0b      	ldr	r3, [pc, #44]	; (800db30 <prvInitialiseTaskLists+0x78>)
 800db04:	4a05      	ldr	r2, [pc, #20]	; (800db1c <prvInitialiseTaskLists+0x64>)
 800db06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800db08:	4b0a      	ldr	r3, [pc, #40]	; (800db34 <prvInitialiseTaskLists+0x7c>)
 800db0a:	4a05      	ldr	r2, [pc, #20]	; (800db20 <prvInitialiseTaskLists+0x68>)
 800db0c:	601a      	str	r2, [r3, #0]
}
 800db0e:	bf00      	nop
 800db10:	3708      	adds	r7, #8
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	200027fc 	.word	0x200027fc
 800db1c:	20002c5c 	.word	0x20002c5c
 800db20:	20002c70 	.word	0x20002c70
 800db24:	20002c8c 	.word	0x20002c8c
 800db28:	20002ca0 	.word	0x20002ca0
 800db2c:	20002cb8 	.word	0x20002cb8
 800db30:	20002c84 	.word	0x20002c84
 800db34:	20002c88 	.word	0x20002c88

0800db38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800db3e:	e019      	b.n	800db74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800db40:	f001 f8b4 	bl	800ecac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db44:	4b0f      	ldr	r3, [pc, #60]	; (800db84 <prvCheckTasksWaitingTermination+0x4c>)
 800db46:	68db      	ldr	r3, [r3, #12]
 800db48:	68db      	ldr	r3, [r3, #12]
 800db4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	3304      	adds	r3, #4
 800db50:	4618      	mov	r0, r3
 800db52:	f7fe f937 	bl	800bdc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800db56:	4b0c      	ldr	r3, [pc, #48]	; (800db88 <prvCheckTasksWaitingTermination+0x50>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	3b01      	subs	r3, #1
 800db5c:	4a0a      	ldr	r2, [pc, #40]	; (800db88 <prvCheckTasksWaitingTermination+0x50>)
 800db5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800db60:	4b0a      	ldr	r3, [pc, #40]	; (800db8c <prvCheckTasksWaitingTermination+0x54>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	3b01      	subs	r3, #1
 800db66:	4a09      	ldr	r2, [pc, #36]	; (800db8c <prvCheckTasksWaitingTermination+0x54>)
 800db68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800db6a:	f001 f8cd 	bl	800ed08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 f80e 	bl	800db90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800db74:	4b05      	ldr	r3, [pc, #20]	; (800db8c <prvCheckTasksWaitingTermination+0x54>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d1e1      	bne.n	800db40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800db7c:	bf00      	nop
 800db7e:	3708      	adds	r7, #8
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}
 800db84:	20002ca0 	.word	0x20002ca0
 800db88:	20002ccc 	.word	0x20002ccc
 800db8c:	20002cb4 	.word	0x20002cb4

0800db90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d108      	bne.n	800dbb4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dba6:	4618      	mov	r0, r3
 800dba8:	f001 fa5c 	bl	800f064 <vPortFree>
				vPortFree( pxTCB );
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f001 fa59 	bl	800f064 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dbb2:	e017      	b.n	800dbe4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d103      	bne.n	800dbc6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f001 fa50 	bl	800f064 <vPortFree>
	}
 800dbc4:	e00e      	b.n	800dbe4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dbcc:	2b02      	cmp	r3, #2
 800dbce:	d009      	beq.n	800dbe4 <prvDeleteTCB+0x54>
 800dbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd4:	f383 8811 	msr	BASEPRI, r3
 800dbd8:	f3bf 8f6f 	isb	sy
 800dbdc:	f3bf 8f4f 	dsb	sy
 800dbe0:	60fb      	str	r3, [r7, #12]
 800dbe2:	e7fe      	b.n	800dbe2 <prvDeleteTCB+0x52>
	}
 800dbe4:	bf00      	nop
 800dbe6:	3710      	adds	r7, #16
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbf2:	4b0c      	ldr	r3, [pc, #48]	; (800dc24 <prvResetNextTaskUnblockTime+0x38>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d104      	bne.n	800dc06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dbfc:	4b0a      	ldr	r3, [pc, #40]	; (800dc28 <prvResetNextTaskUnblockTime+0x3c>)
 800dbfe:	f04f 32ff 	mov.w	r2, #4294967295
 800dc02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dc04:	e008      	b.n	800dc18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc06:	4b07      	ldr	r3, [pc, #28]	; (800dc24 <prvResetNextTaskUnblockTime+0x38>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	68db      	ldr	r3, [r3, #12]
 800dc0c:	68db      	ldr	r3, [r3, #12]
 800dc0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	4a04      	ldr	r2, [pc, #16]	; (800dc28 <prvResetNextTaskUnblockTime+0x3c>)
 800dc16:	6013      	str	r3, [r2, #0]
}
 800dc18:	bf00      	nop
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr
 800dc24:	20002c84 	.word	0x20002c84
 800dc28:	20002cec 	.word	0x20002cec

0800dc2c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800dc32:	4b05      	ldr	r3, [pc, #20]	; (800dc48 <xTaskGetCurrentTaskHandle+0x1c>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	607b      	str	r3, [r7, #4]

		return xReturn;
 800dc38:	687b      	ldr	r3, [r7, #4]
	}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	370c      	adds	r7, #12
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc44:	4770      	bx	lr
 800dc46:	bf00      	nop
 800dc48:	200027f8 	.word	0x200027f8

0800dc4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b083      	sub	sp, #12
 800dc50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dc52:	4b0b      	ldr	r3, [pc, #44]	; (800dc80 <xTaskGetSchedulerState+0x34>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d102      	bne.n	800dc60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	607b      	str	r3, [r7, #4]
 800dc5e:	e008      	b.n	800dc72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc60:	4b08      	ldr	r3, [pc, #32]	; (800dc84 <xTaskGetSchedulerState+0x38>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d102      	bne.n	800dc6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dc68:	2302      	movs	r3, #2
 800dc6a:	607b      	str	r3, [r7, #4]
 800dc6c:	e001      	b.n	800dc72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dc72:	687b      	ldr	r3, [r7, #4]
	}
 800dc74:	4618      	mov	r0, r3
 800dc76:	370c      	adds	r7, #12
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr
 800dc80:	20002cd8 	.word	0x20002cd8
 800dc84:	20002cf4 	.word	0x20002cf4

0800dc88 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dc94:	2300      	movs	r3, #0
 800dc96:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d051      	beq.n	800dd42 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dca2:	4b2a      	ldr	r3, [pc, #168]	; (800dd4c <xTaskPriorityInherit+0xc4>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d241      	bcs.n	800dd30 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	699b      	ldr	r3, [r3, #24]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	db06      	blt.n	800dcc2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcb4:	4b25      	ldr	r3, [pc, #148]	; (800dd4c <xTaskPriorityInherit+0xc4>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	6959      	ldr	r1, [r3, #20]
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcca:	4613      	mov	r3, r2
 800dccc:	009b      	lsls	r3, r3, #2
 800dcce:	4413      	add	r3, r2
 800dcd0:	009b      	lsls	r3, r3, #2
 800dcd2:	4a1f      	ldr	r2, [pc, #124]	; (800dd50 <xTaskPriorityInherit+0xc8>)
 800dcd4:	4413      	add	r3, r2
 800dcd6:	4299      	cmp	r1, r3
 800dcd8:	d122      	bne.n	800dd20 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	3304      	adds	r3, #4
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7fe f870 	bl	800bdc4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dce4:	4b19      	ldr	r3, [pc, #100]	; (800dd4c <xTaskPriorityInherit+0xc4>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcf2:	4b18      	ldr	r3, [pc, #96]	; (800dd54 <xTaskPriorityInherit+0xcc>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d903      	bls.n	800dd02 <xTaskPriorityInherit+0x7a>
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcfe:	4a15      	ldr	r2, [pc, #84]	; (800dd54 <xTaskPriorityInherit+0xcc>)
 800dd00:	6013      	str	r3, [r2, #0]
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd06:	4613      	mov	r3, r2
 800dd08:	009b      	lsls	r3, r3, #2
 800dd0a:	4413      	add	r3, r2
 800dd0c:	009b      	lsls	r3, r3, #2
 800dd0e:	4a10      	ldr	r2, [pc, #64]	; (800dd50 <xTaskPriorityInherit+0xc8>)
 800dd10:	441a      	add	r2, r3
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	3304      	adds	r3, #4
 800dd16:	4619      	mov	r1, r3
 800dd18:	4610      	mov	r0, r2
 800dd1a:	f7fd fff6 	bl	800bd0a <vListInsertEnd>
 800dd1e:	e004      	b.n	800dd2a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dd20:	4b0a      	ldr	r3, [pc, #40]	; (800dd4c <xTaskPriorityInherit+0xc4>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	60fb      	str	r3, [r7, #12]
 800dd2e:	e008      	b.n	800dd42 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd34:	4b05      	ldr	r3, [pc, #20]	; (800dd4c <xTaskPriorityInherit+0xc4>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d201      	bcs.n	800dd42 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dd42:	68fb      	ldr	r3, [r7, #12]
	}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3710      	adds	r7, #16
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	200027f8 	.word	0x200027f8
 800dd50:	200027fc 	.word	0x200027fc
 800dd54:	20002cd4 	.word	0x20002cd4

0800dd58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dd64:	2300      	movs	r3, #0
 800dd66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d054      	beq.n	800de18 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dd6e:	4b2d      	ldr	r3, [pc, #180]	; (800de24 <xTaskPriorityDisinherit+0xcc>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	693a      	ldr	r2, [r7, #16]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d009      	beq.n	800dd8c <xTaskPriorityDisinherit+0x34>
 800dd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7c:	f383 8811 	msr	BASEPRI, r3
 800dd80:	f3bf 8f6f 	isb	sy
 800dd84:	f3bf 8f4f 	dsb	sy
 800dd88:	60fb      	str	r3, [r7, #12]
 800dd8a:	e7fe      	b.n	800dd8a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d109      	bne.n	800dda8 <xTaskPriorityDisinherit+0x50>
 800dd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd98:	f383 8811 	msr	BASEPRI, r3
 800dd9c:	f3bf 8f6f 	isb	sy
 800dda0:	f3bf 8f4f 	dsb	sy
 800dda4:	60bb      	str	r3, [r7, #8]
 800dda6:	e7fe      	b.n	800dda6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddac:	1e5a      	subs	r2, r3, #1
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d02c      	beq.n	800de18 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d128      	bne.n	800de18 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	3304      	adds	r3, #4
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f7fd fffa 	bl	800bdc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dddc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dde8:	4b0f      	ldr	r3, [pc, #60]	; (800de28 <xTaskPriorityDisinherit+0xd0>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d903      	bls.n	800ddf8 <xTaskPriorityDisinherit+0xa0>
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf4:	4a0c      	ldr	r2, [pc, #48]	; (800de28 <xTaskPriorityDisinherit+0xd0>)
 800ddf6:	6013      	str	r3, [r2, #0]
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddfc:	4613      	mov	r3, r2
 800ddfe:	009b      	lsls	r3, r3, #2
 800de00:	4413      	add	r3, r2
 800de02:	009b      	lsls	r3, r3, #2
 800de04:	4a09      	ldr	r2, [pc, #36]	; (800de2c <xTaskPriorityDisinherit+0xd4>)
 800de06:	441a      	add	r2, r3
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	3304      	adds	r3, #4
 800de0c:	4619      	mov	r1, r3
 800de0e:	4610      	mov	r0, r2
 800de10:	f7fd ff7b 	bl	800bd0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800de14:	2301      	movs	r3, #1
 800de16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800de18:	697b      	ldr	r3, [r7, #20]
	}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3718      	adds	r7, #24
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	200027f8 	.word	0x200027f8
 800de28:	20002cd4 	.word	0x20002cd4
 800de2c:	200027fc 	.word	0x200027fc

0800de30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800de30:	b580      	push	{r7, lr}
 800de32:	b088      	sub	sp, #32
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800de3e:	2301      	movs	r3, #1
 800de40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d068      	beq.n	800df1a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800de48:	69bb      	ldr	r3, [r7, #24]
 800de4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d109      	bne.n	800de64 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800de50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de54:	f383 8811 	msr	BASEPRI, r3
 800de58:	f3bf 8f6f 	isb	sy
 800de5c:	f3bf 8f4f 	dsb	sy
 800de60:	60fb      	str	r3, [r7, #12]
 800de62:	e7fe      	b.n	800de62 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800de64:	69bb      	ldr	r3, [r7, #24]
 800de66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de68:	683a      	ldr	r2, [r7, #0]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d902      	bls.n	800de74 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	61fb      	str	r3, [r7, #28]
 800de72:	e002      	b.n	800de7a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800de74:	69bb      	ldr	r3, [r7, #24]
 800de76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de78:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de7e:	69fa      	ldr	r2, [r7, #28]
 800de80:	429a      	cmp	r2, r3
 800de82:	d04a      	beq.n	800df1a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800de84:	69bb      	ldr	r3, [r7, #24]
 800de86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de88:	697a      	ldr	r2, [r7, #20]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d145      	bne.n	800df1a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800de8e:	4b25      	ldr	r3, [pc, #148]	; (800df24 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	69ba      	ldr	r2, [r7, #24]
 800de94:	429a      	cmp	r2, r3
 800de96:	d109      	bne.n	800deac <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800de98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9c:	f383 8811 	msr	BASEPRI, r3
 800dea0:	f3bf 8f6f 	isb	sy
 800dea4:	f3bf 8f4f 	dsb	sy
 800dea8:	60bb      	str	r3, [r7, #8]
 800deaa:	e7fe      	b.n	800deaa <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800deac:	69bb      	ldr	r3, [r7, #24]
 800deae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deb0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800deb2:	69bb      	ldr	r3, [r7, #24]
 800deb4:	69fa      	ldr	r2, [r7, #28]
 800deb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800deb8:	69bb      	ldr	r3, [r7, #24]
 800deba:	699b      	ldr	r3, [r3, #24]
 800debc:	2b00      	cmp	r3, #0
 800debe:	db04      	blt.n	800deca <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dec6:	69bb      	ldr	r3, [r7, #24]
 800dec8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800deca:	69bb      	ldr	r3, [r7, #24]
 800decc:	6959      	ldr	r1, [r3, #20]
 800dece:	693a      	ldr	r2, [r7, #16]
 800ded0:	4613      	mov	r3, r2
 800ded2:	009b      	lsls	r3, r3, #2
 800ded4:	4413      	add	r3, r2
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	4a13      	ldr	r2, [pc, #76]	; (800df28 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800deda:	4413      	add	r3, r2
 800dedc:	4299      	cmp	r1, r3
 800dede:	d11c      	bne.n	800df1a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	3304      	adds	r3, #4
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7fd ff6d 	bl	800bdc4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800deea:	69bb      	ldr	r3, [r7, #24]
 800deec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deee:	4b0f      	ldr	r3, [pc, #60]	; (800df2c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	429a      	cmp	r2, r3
 800def4:	d903      	bls.n	800defe <vTaskPriorityDisinheritAfterTimeout+0xce>
 800def6:	69bb      	ldr	r3, [r7, #24]
 800def8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800defa:	4a0c      	ldr	r2, [pc, #48]	; (800df2c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800defc:	6013      	str	r3, [r2, #0]
 800defe:	69bb      	ldr	r3, [r7, #24]
 800df00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df02:	4613      	mov	r3, r2
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	4413      	add	r3, r2
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	4a07      	ldr	r2, [pc, #28]	; (800df28 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800df0c:	441a      	add	r2, r3
 800df0e:	69bb      	ldr	r3, [r7, #24]
 800df10:	3304      	adds	r3, #4
 800df12:	4619      	mov	r1, r3
 800df14:	4610      	mov	r0, r2
 800df16:	f7fd fef8 	bl	800bd0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df1a:	bf00      	nop
 800df1c:	3720      	adds	r7, #32
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	200027f8 	.word	0x200027f8
 800df28:	200027fc 	.word	0x200027fc
 800df2c:	20002cd4 	.word	0x20002cd4

0800df30 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800df30:	b480      	push	{r7}
 800df32:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800df34:	4b07      	ldr	r3, [pc, #28]	; (800df54 <pvTaskIncrementMutexHeldCount+0x24>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d004      	beq.n	800df46 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800df3c:	4b05      	ldr	r3, [pc, #20]	; (800df54 <pvTaskIncrementMutexHeldCount+0x24>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df42:	3201      	adds	r2, #1
 800df44:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800df46:	4b03      	ldr	r3, [pc, #12]	; (800df54 <pvTaskIncrementMutexHeldCount+0x24>)
 800df48:	681b      	ldr	r3, [r3, #0]
	}
 800df4a:	4618      	mov	r0, r3
 800df4c:	46bd      	mov	sp, r7
 800df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df52:	4770      	bx	lr
 800df54:	200027f8 	.word	0x200027f8

0800df58 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b086      	sub	sp, #24
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	607a      	str	r2, [r7, #4]
 800df64:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800df66:	f000 fea1 	bl	800ecac <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800df6a:	4b26      	ldr	r3, [pc, #152]	; (800e004 <xTaskNotifyWait+0xac>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800df72:	b2db      	uxtb	r3, r3
 800df74:	2b02      	cmp	r3, #2
 800df76:	d01a      	beq.n	800dfae <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800df78:	4b22      	ldr	r3, [pc, #136]	; (800e004 <xTaskNotifyWait+0xac>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800df7e:	68fa      	ldr	r2, [r7, #12]
 800df80:	43d2      	mvns	r2, r2
 800df82:	400a      	ands	r2, r1
 800df84:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800df86:	4b1f      	ldr	r3, [pc, #124]	; (800e004 <xTaskNotifyWait+0xac>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	2201      	movs	r2, #1
 800df8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d00b      	beq.n	800dfae <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800df96:	2101      	movs	r1, #1
 800df98:	6838      	ldr	r0, [r7, #0]
 800df9a:	f000 f9c5 	bl	800e328 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800df9e:	4b1a      	ldr	r3, [pc, #104]	; (800e008 <xTaskNotifyWait+0xb0>)
 800dfa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfa4:	601a      	str	r2, [r3, #0]
 800dfa6:	f3bf 8f4f 	dsb	sy
 800dfaa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800dfae:	f000 feab 	bl	800ed08 <vPortExitCritical>

		taskENTER_CRITICAL();
 800dfb2:	f000 fe7b 	bl	800ecac <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d004      	beq.n	800dfc6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800dfbc:	4b11      	ldr	r3, [pc, #68]	; (800e004 <xTaskNotifyWait+0xac>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800dfc6:	4b0f      	ldr	r3, [pc, #60]	; (800e004 <xTaskNotifyWait+0xac>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	2b02      	cmp	r3, #2
 800dfd2:	d002      	beq.n	800dfda <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	617b      	str	r3, [r7, #20]
 800dfd8:	e008      	b.n	800dfec <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800dfda:	4b0a      	ldr	r3, [pc, #40]	; (800e004 <xTaskNotifyWait+0xac>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dfe0:	68ba      	ldr	r2, [r7, #8]
 800dfe2:	43d2      	mvns	r2, r2
 800dfe4:	400a      	ands	r2, r1
 800dfe6:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dfec:	4b05      	ldr	r3, [pc, #20]	; (800e004 <xTaskNotifyWait+0xac>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	2200      	movs	r2, #0
 800dff2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800dff6:	f000 fe87 	bl	800ed08 <vPortExitCritical>

		return xReturn;
 800dffa:	697b      	ldr	r3, [r7, #20]
	}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3718      	adds	r7, #24
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}
 800e004:	200027f8 	.word	0x200027f8
 800e008:	e000ed04 	.word	0xe000ed04

0800e00c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b08a      	sub	sp, #40	; 0x28
 800e010:	af00      	add	r7, sp, #0
 800e012:	60f8      	str	r0, [r7, #12]
 800e014:	60b9      	str	r1, [r7, #8]
 800e016:	603b      	str	r3, [r7, #0]
 800e018:	4613      	mov	r3, r2
 800e01a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800e01c:	2301      	movs	r3, #1
 800e01e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d109      	bne.n	800e03a <xTaskGenericNotify+0x2e>
 800e026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e02a:	f383 8811 	msr	BASEPRI, r3
 800e02e:	f3bf 8f6f 	isb	sy
 800e032:	f3bf 8f4f 	dsb	sy
 800e036:	61bb      	str	r3, [r7, #24]
 800e038:	e7fe      	b.n	800e038 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800e03e:	f000 fe35 	bl	800ecac <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d003      	beq.n	800e050 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e048:	6a3b      	ldr	r3, [r7, #32]
 800e04a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e050:	6a3b      	ldr	r3, [r7, #32]
 800e052:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e056:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e058:	6a3b      	ldr	r3, [r7, #32]
 800e05a:	2202      	movs	r2, #2
 800e05c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800e060:	79fb      	ldrb	r3, [r7, #7]
 800e062:	2b04      	cmp	r3, #4
 800e064:	d827      	bhi.n	800e0b6 <xTaskGenericNotify+0xaa>
 800e066:	a201      	add	r2, pc, #4	; (adr r2, 800e06c <xTaskGenericNotify+0x60>)
 800e068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e06c:	0800e0d5 	.word	0x0800e0d5
 800e070:	0800e081 	.word	0x0800e081
 800e074:	0800e08f 	.word	0x0800e08f
 800e078:	0800e09b 	.word	0x0800e09b
 800e07c:	0800e0a3 	.word	0x0800e0a3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e080:	6a3b      	ldr	r3, [r7, #32]
 800e082:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	431a      	orrs	r2, r3
 800e088:	6a3b      	ldr	r3, [r7, #32]
 800e08a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e08c:	e025      	b.n	800e0da <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e08e:	6a3b      	ldr	r3, [r7, #32]
 800e090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e092:	1c5a      	adds	r2, r3, #1
 800e094:	6a3b      	ldr	r3, [r7, #32]
 800e096:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e098:	e01f      	b.n	800e0da <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e09a:	6a3b      	ldr	r3, [r7, #32]
 800e09c:	68ba      	ldr	r2, [r7, #8]
 800e09e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e0a0:	e01b      	b.n	800e0da <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e0a2:	7ffb      	ldrb	r3, [r7, #31]
 800e0a4:	2b02      	cmp	r3, #2
 800e0a6:	d003      	beq.n	800e0b0 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e0a8:	6a3b      	ldr	r3, [r7, #32]
 800e0aa:	68ba      	ldr	r2, [r7, #8]
 800e0ac:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e0ae:	e014      	b.n	800e0da <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800e0b4:	e011      	b.n	800e0da <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800e0b6:	6a3b      	ldr	r3, [r7, #32]
 800e0b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0be:	d00b      	beq.n	800e0d8 <xTaskGenericNotify+0xcc>
 800e0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c4:	f383 8811 	msr	BASEPRI, r3
 800e0c8:	f3bf 8f6f 	isb	sy
 800e0cc:	f3bf 8f4f 	dsb	sy
 800e0d0:	617b      	str	r3, [r7, #20]
 800e0d2:	e7fe      	b.n	800e0d2 <xTaskGenericNotify+0xc6>
					break;
 800e0d4:	bf00      	nop
 800e0d6:	e000      	b.n	800e0da <xTaskGenericNotify+0xce>

					break;
 800e0d8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e0da:	7ffb      	ldrb	r3, [r7, #31]
 800e0dc:	2b01      	cmp	r3, #1
 800e0de:	d13b      	bne.n	800e158 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0e0:	6a3b      	ldr	r3, [r7, #32]
 800e0e2:	3304      	adds	r3, #4
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7fd fe6d 	bl	800bdc4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e0ea:	6a3b      	ldr	r3, [r7, #32]
 800e0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ee:	4b1e      	ldr	r3, [pc, #120]	; (800e168 <xTaskGenericNotify+0x15c>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d903      	bls.n	800e0fe <xTaskGenericNotify+0xf2>
 800e0f6:	6a3b      	ldr	r3, [r7, #32]
 800e0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0fa:	4a1b      	ldr	r2, [pc, #108]	; (800e168 <xTaskGenericNotify+0x15c>)
 800e0fc:	6013      	str	r3, [r2, #0]
 800e0fe:	6a3b      	ldr	r3, [r7, #32]
 800e100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e102:	4613      	mov	r3, r2
 800e104:	009b      	lsls	r3, r3, #2
 800e106:	4413      	add	r3, r2
 800e108:	009b      	lsls	r3, r3, #2
 800e10a:	4a18      	ldr	r2, [pc, #96]	; (800e16c <xTaskGenericNotify+0x160>)
 800e10c:	441a      	add	r2, r3
 800e10e:	6a3b      	ldr	r3, [r7, #32]
 800e110:	3304      	adds	r3, #4
 800e112:	4619      	mov	r1, r3
 800e114:	4610      	mov	r0, r2
 800e116:	f7fd fdf8 	bl	800bd0a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e11a:	6a3b      	ldr	r3, [r7, #32]
 800e11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d009      	beq.n	800e136 <xTaskGenericNotify+0x12a>
 800e122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e126:	f383 8811 	msr	BASEPRI, r3
 800e12a:	f3bf 8f6f 	isb	sy
 800e12e:	f3bf 8f4f 	dsb	sy
 800e132:	613b      	str	r3, [r7, #16]
 800e134:	e7fe      	b.n	800e134 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 800e136:	f7ff fd59 	bl	800dbec <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e13a:	6a3b      	ldr	r3, [r7, #32]
 800e13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e13e:	4b0c      	ldr	r3, [pc, #48]	; (800e170 <xTaskGenericNotify+0x164>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e144:	429a      	cmp	r2, r3
 800e146:	d907      	bls.n	800e158 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800e148:	4b0a      	ldr	r3, [pc, #40]	; (800e174 <xTaskGenericNotify+0x168>)
 800e14a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e14e:	601a      	str	r2, [r3, #0]
 800e150:	f3bf 8f4f 	dsb	sy
 800e154:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e158:	f000 fdd6 	bl	800ed08 <vPortExitCritical>

		return xReturn;
 800e15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800e15e:	4618      	mov	r0, r3
 800e160:	3728      	adds	r7, #40	; 0x28
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	20002cd4 	.word	0x20002cd4
 800e16c:	200027fc 	.word	0x200027fc
 800e170:	200027f8 	.word	0x200027f8
 800e174:	e000ed04 	.word	0xe000ed04

0800e178 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b08e      	sub	sp, #56	; 0x38
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	60b9      	str	r1, [r7, #8]
 800e182:	603b      	str	r3, [r7, #0]
 800e184:	4613      	mov	r3, r2
 800e186:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800e188:	2301      	movs	r3, #1
 800e18a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d109      	bne.n	800e1a6 <xTaskGenericNotifyFromISR+0x2e>
 800e192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e196:	f383 8811 	msr	BASEPRI, r3
 800e19a:	f3bf 8f6f 	isb	sy
 800e19e:	f3bf 8f4f 	dsb	sy
 800e1a2:	627b      	str	r3, [r7, #36]	; 0x24
 800e1a4:	e7fe      	b.n	800e1a4 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e1a6:	f000 fe5d 	bl	800ee64 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800e1ae:	f3ef 8211 	mrs	r2, BASEPRI
 800e1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b6:	f383 8811 	msr	BASEPRI, r3
 800e1ba:	f3bf 8f6f 	isb	sy
 800e1be:	f3bf 8f4f 	dsb	sy
 800e1c2:	623a      	str	r2, [r7, #32]
 800e1c4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800e1c6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d003      	beq.n	800e1d8 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e1de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e4:	2202      	movs	r2, #2
 800e1e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800e1ea:	79fb      	ldrb	r3, [r7, #7]
 800e1ec:	2b04      	cmp	r3, #4
 800e1ee:	d829      	bhi.n	800e244 <xTaskGenericNotifyFromISR+0xcc>
 800e1f0:	a201      	add	r2, pc, #4	; (adr r2, 800e1f8 <xTaskGenericNotifyFromISR+0x80>)
 800e1f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f6:	bf00      	nop
 800e1f8:	0800e263 	.word	0x0800e263
 800e1fc:	0800e20d 	.word	0x0800e20d
 800e200:	0800e21b 	.word	0x0800e21b
 800e204:	0800e227 	.word	0x0800e227
 800e208:	0800e22f 	.word	0x0800e22f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	431a      	orrs	r2, r3
 800e214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e216:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e218:	e026      	b.n	800e268 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e21c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e21e:	1c5a      	adds	r2, r3, #1
 800e220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e222:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e224:	e020      	b.n	800e268 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e228:	68ba      	ldr	r2, [r7, #8]
 800e22a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e22c:	e01c      	b.n	800e268 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e22e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e232:	2b02      	cmp	r3, #2
 800e234:	d003      	beq.n	800e23e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e238:	68ba      	ldr	r2, [r7, #8]
 800e23a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e23c:	e014      	b.n	800e268 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800e23e:	2300      	movs	r3, #0
 800e240:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800e242:	e011      	b.n	800e268 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800e244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e24c:	d00b      	beq.n	800e266 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800e24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e252:	f383 8811 	msr	BASEPRI, r3
 800e256:	f3bf 8f6f 	isb	sy
 800e25a:	f3bf 8f4f 	dsb	sy
 800e25e:	61bb      	str	r3, [r7, #24]
 800e260:	e7fe      	b.n	800e260 <xTaskGenericNotifyFromISR+0xe8>
					break;
 800e262:	bf00      	nop
 800e264:	e000      	b.n	800e268 <xTaskGenericNotifyFromISR+0xf0>
					break;
 800e266:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e268:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d145      	bne.n	800e2fc <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e274:	2b00      	cmp	r3, #0
 800e276:	d009      	beq.n	800e28c <xTaskGenericNotifyFromISR+0x114>
 800e278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27c:	f383 8811 	msr	BASEPRI, r3
 800e280:	f3bf 8f6f 	isb	sy
 800e284:	f3bf 8f4f 	dsb	sy
 800e288:	617b      	str	r3, [r7, #20]
 800e28a:	e7fe      	b.n	800e28a <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e28c:	4b20      	ldr	r3, [pc, #128]	; (800e310 <xTaskGenericNotifyFromISR+0x198>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d11d      	bne.n	800e2d0 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e296:	3304      	adds	r3, #4
 800e298:	4618      	mov	r0, r3
 800e29a:	f7fd fd93 	bl	800bdc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2a2:	4b1c      	ldr	r3, [pc, #112]	; (800e314 <xTaskGenericNotifyFromISR+0x19c>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d903      	bls.n	800e2b2 <xTaskGenericNotifyFromISR+0x13a>
 800e2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ae:	4a19      	ldr	r2, [pc, #100]	; (800e314 <xTaskGenericNotifyFromISR+0x19c>)
 800e2b0:	6013      	str	r3, [r2, #0]
 800e2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2b6:	4613      	mov	r3, r2
 800e2b8:	009b      	lsls	r3, r3, #2
 800e2ba:	4413      	add	r3, r2
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	4a16      	ldr	r2, [pc, #88]	; (800e318 <xTaskGenericNotifyFromISR+0x1a0>)
 800e2c0:	441a      	add	r2, r3
 800e2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c4:	3304      	adds	r3, #4
 800e2c6:	4619      	mov	r1, r3
 800e2c8:	4610      	mov	r0, r2
 800e2ca:	f7fd fd1e 	bl	800bd0a <vListInsertEnd>
 800e2ce:	e005      	b.n	800e2dc <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800e2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d2:	3318      	adds	r3, #24
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	4811      	ldr	r0, [pc, #68]	; (800e31c <xTaskGenericNotifyFromISR+0x1a4>)
 800e2d8:	f7fd fd17 	bl	800bd0a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2e0:	4b0f      	ldr	r3, [pc, #60]	; (800e320 <xTaskGenericNotifyFromISR+0x1a8>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d908      	bls.n	800e2fc <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800e2ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d002      	beq.n	800e2f6 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800e2f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800e2f6:	4b0b      	ldr	r3, [pc, #44]	; (800e324 <xTaskGenericNotifyFromISR+0x1ac>)
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	601a      	str	r2, [r3, #0]
 800e2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fe:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800e306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800e308:	4618      	mov	r0, r3
 800e30a:	3738      	adds	r7, #56	; 0x38
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}
 800e310:	20002cf4 	.word	0x20002cf4
 800e314:	20002cd4 	.word	0x20002cd4
 800e318:	200027fc 	.word	0x200027fc
 800e31c:	20002c8c 	.word	0x20002c8c
 800e320:	200027f8 	.word	0x200027f8
 800e324:	20002ce0 	.word	0x20002ce0

0800e328 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b084      	sub	sp, #16
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e332:	4b21      	ldr	r3, [pc, #132]	; (800e3b8 <prvAddCurrentTaskToDelayedList+0x90>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e338:	4b20      	ldr	r3, [pc, #128]	; (800e3bc <prvAddCurrentTaskToDelayedList+0x94>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	3304      	adds	r3, #4
 800e33e:	4618      	mov	r0, r3
 800e340:	f7fd fd40 	bl	800bdc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e34a:	d10a      	bne.n	800e362 <prvAddCurrentTaskToDelayedList+0x3a>
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d007      	beq.n	800e362 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e352:	4b1a      	ldr	r3, [pc, #104]	; (800e3bc <prvAddCurrentTaskToDelayedList+0x94>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	3304      	adds	r3, #4
 800e358:	4619      	mov	r1, r3
 800e35a:	4819      	ldr	r0, [pc, #100]	; (800e3c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800e35c:	f7fd fcd5 	bl	800bd0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e360:	e026      	b.n	800e3b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e362:	68fa      	ldr	r2, [r7, #12]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	4413      	add	r3, r2
 800e368:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e36a:	4b14      	ldr	r3, [pc, #80]	; (800e3bc <prvAddCurrentTaskToDelayedList+0x94>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	68ba      	ldr	r2, [r7, #8]
 800e370:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e372:	68ba      	ldr	r2, [r7, #8]
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	429a      	cmp	r2, r3
 800e378:	d209      	bcs.n	800e38e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e37a:	4b12      	ldr	r3, [pc, #72]	; (800e3c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e37c:	681a      	ldr	r2, [r3, #0]
 800e37e:	4b0f      	ldr	r3, [pc, #60]	; (800e3bc <prvAddCurrentTaskToDelayedList+0x94>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	3304      	adds	r3, #4
 800e384:	4619      	mov	r1, r3
 800e386:	4610      	mov	r0, r2
 800e388:	f7fd fce3 	bl	800bd52 <vListInsert>
}
 800e38c:	e010      	b.n	800e3b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e38e:	4b0e      	ldr	r3, [pc, #56]	; (800e3c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e390:	681a      	ldr	r2, [r3, #0]
 800e392:	4b0a      	ldr	r3, [pc, #40]	; (800e3bc <prvAddCurrentTaskToDelayedList+0x94>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	3304      	adds	r3, #4
 800e398:	4619      	mov	r1, r3
 800e39a:	4610      	mov	r0, r2
 800e39c:	f7fd fcd9 	bl	800bd52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e3a0:	4b0a      	ldr	r3, [pc, #40]	; (800e3cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	68ba      	ldr	r2, [r7, #8]
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d202      	bcs.n	800e3b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e3aa:	4a08      	ldr	r2, [pc, #32]	; (800e3cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	6013      	str	r3, [r2, #0]
}
 800e3b0:	bf00      	nop
 800e3b2:	3710      	adds	r7, #16
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}
 800e3b8:	20002cd0 	.word	0x20002cd0
 800e3bc:	200027f8 	.word	0x200027f8
 800e3c0:	20002cb8 	.word	0x20002cb8
 800e3c4:	20002c88 	.word	0x20002c88
 800e3c8:	20002c84 	.word	0x20002c84
 800e3cc:	20002cec 	.word	0x20002cec

0800e3d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b08a      	sub	sp, #40	; 0x28
 800e3d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e3da:	f000 faff 	bl	800e9dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e3de:	4b1c      	ldr	r3, [pc, #112]	; (800e450 <xTimerCreateTimerTask+0x80>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d021      	beq.n	800e42a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e3ee:	1d3a      	adds	r2, r7, #4
 800e3f0:	f107 0108 	add.w	r1, r7, #8
 800e3f4:	f107 030c 	add.w	r3, r7, #12
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7fd fc3f 	bl	800bc7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e3fe:	6879      	ldr	r1, [r7, #4]
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	68fa      	ldr	r2, [r7, #12]
 800e404:	9202      	str	r2, [sp, #8]
 800e406:	9301      	str	r3, [sp, #4]
 800e408:	2302      	movs	r3, #2
 800e40a:	9300      	str	r3, [sp, #0]
 800e40c:	2300      	movs	r3, #0
 800e40e:	460a      	mov	r2, r1
 800e410:	4910      	ldr	r1, [pc, #64]	; (800e454 <xTimerCreateTimerTask+0x84>)
 800e412:	4811      	ldr	r0, [pc, #68]	; (800e458 <xTimerCreateTimerTask+0x88>)
 800e414:	f7fe fda2 	bl	800cf5c <xTaskCreateStatic>
 800e418:	4602      	mov	r2, r0
 800e41a:	4b10      	ldr	r3, [pc, #64]	; (800e45c <xTimerCreateTimerTask+0x8c>)
 800e41c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e41e:	4b0f      	ldr	r3, [pc, #60]	; (800e45c <xTimerCreateTimerTask+0x8c>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d001      	beq.n	800e42a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e426:	2301      	movs	r3, #1
 800e428:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d109      	bne.n	800e444 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800e430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e434:	f383 8811 	msr	BASEPRI, r3
 800e438:	f3bf 8f6f 	isb	sy
 800e43c:	f3bf 8f4f 	dsb	sy
 800e440:	613b      	str	r3, [r7, #16]
 800e442:	e7fe      	b.n	800e442 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800e444:	697b      	ldr	r3, [r7, #20]
}
 800e446:	4618      	mov	r0, r3
 800e448:	3718      	adds	r7, #24
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	20002d28 	.word	0x20002d28
 800e454:	080130e8 	.word	0x080130e8
 800e458:	0800e591 	.word	0x0800e591
 800e45c:	20002d2c 	.word	0x20002d2c

0800e460 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b08a      	sub	sp, #40	; 0x28
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	60b9      	str	r1, [r7, #8]
 800e46a:	607a      	str	r2, [r7, #4]
 800e46c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e46e:	2300      	movs	r3, #0
 800e470:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d109      	bne.n	800e48c <xTimerGenericCommand+0x2c>
 800e478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e47c:	f383 8811 	msr	BASEPRI, r3
 800e480:	f3bf 8f6f 	isb	sy
 800e484:	f3bf 8f4f 	dsb	sy
 800e488:	623b      	str	r3, [r7, #32]
 800e48a:	e7fe      	b.n	800e48a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e48c:	4b19      	ldr	r3, [pc, #100]	; (800e4f4 <xTimerGenericCommand+0x94>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d02a      	beq.n	800e4ea <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	2b05      	cmp	r3, #5
 800e4a4:	dc18      	bgt.n	800e4d8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e4a6:	f7ff fbd1 	bl	800dc4c <xTaskGetSchedulerState>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2b02      	cmp	r3, #2
 800e4ae:	d109      	bne.n	800e4c4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e4b0:	4b10      	ldr	r3, [pc, #64]	; (800e4f4 <xTimerGenericCommand+0x94>)
 800e4b2:	6818      	ldr	r0, [r3, #0]
 800e4b4:	f107 0110 	add.w	r1, r7, #16
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4bc:	f7fd ff04 	bl	800c2c8 <xQueueGenericSend>
 800e4c0:	6278      	str	r0, [r7, #36]	; 0x24
 800e4c2:	e012      	b.n	800e4ea <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e4c4:	4b0b      	ldr	r3, [pc, #44]	; (800e4f4 <xTimerGenericCommand+0x94>)
 800e4c6:	6818      	ldr	r0, [r3, #0]
 800e4c8:	f107 0110 	add.w	r1, r7, #16
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	f7fd fefa 	bl	800c2c8 <xQueueGenericSend>
 800e4d4:	6278      	str	r0, [r7, #36]	; 0x24
 800e4d6:	e008      	b.n	800e4ea <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e4d8:	4b06      	ldr	r3, [pc, #24]	; (800e4f4 <xTimerGenericCommand+0x94>)
 800e4da:	6818      	ldr	r0, [r3, #0]
 800e4dc:	f107 0110 	add.w	r1, r7, #16
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	683a      	ldr	r2, [r7, #0]
 800e4e4:	f7fd ffea 	bl	800c4bc <xQueueGenericSendFromISR>
 800e4e8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3728      	adds	r7, #40	; 0x28
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	20002d28 	.word	0x20002d28

0800e4f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b088      	sub	sp, #32
 800e4fc:	af02      	add	r7, sp, #8
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e502:	4b22      	ldr	r3, [pc, #136]	; (800e58c <prvProcessExpiredTimer+0x94>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	68db      	ldr	r3, [r3, #12]
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	3304      	adds	r3, #4
 800e510:	4618      	mov	r0, r3
 800e512:	f7fd fc57 	bl	800bdc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e51c:	f003 0304 	and.w	r3, r3, #4
 800e520:	2b00      	cmp	r3, #0
 800e522:	d021      	beq.n	800e568 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	699a      	ldr	r2, [r3, #24]
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	18d1      	adds	r1, r2, r3
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	683a      	ldr	r2, [r7, #0]
 800e530:	6978      	ldr	r0, [r7, #20]
 800e532:	f000 f8d1 	bl	800e6d8 <prvInsertTimerInActiveList>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d01e      	beq.n	800e57a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e53c:	2300      	movs	r3, #0
 800e53e:	9300      	str	r3, [sp, #0]
 800e540:	2300      	movs	r3, #0
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	2100      	movs	r1, #0
 800e546:	6978      	ldr	r0, [r7, #20]
 800e548:	f7ff ff8a 	bl	800e460 <xTimerGenericCommand>
 800e54c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d112      	bne.n	800e57a <prvProcessExpiredTimer+0x82>
 800e554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e558:	f383 8811 	msr	BASEPRI, r3
 800e55c:	f3bf 8f6f 	isb	sy
 800e560:	f3bf 8f4f 	dsb	sy
 800e564:	60fb      	str	r3, [r7, #12]
 800e566:	e7fe      	b.n	800e566 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e56e:	f023 0301 	bic.w	r3, r3, #1
 800e572:	b2da      	uxtb	r2, r3
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	6a1b      	ldr	r3, [r3, #32]
 800e57e:	6978      	ldr	r0, [r7, #20]
 800e580:	4798      	blx	r3
}
 800e582:	bf00      	nop
 800e584:	3718      	adds	r7, #24
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}
 800e58a:	bf00      	nop
 800e58c:	20002d20 	.word	0x20002d20

0800e590 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b084      	sub	sp, #16
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e598:	f107 0308 	add.w	r3, r7, #8
 800e59c:	4618      	mov	r0, r3
 800e59e:	f000 f857 	bl	800e650 <prvGetNextExpireTime>
 800e5a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	68f8      	ldr	r0, [r7, #12]
 800e5aa:	f000 f803 	bl	800e5b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e5ae:	f000 f8d5 	bl	800e75c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e5b2:	e7f1      	b.n	800e598 <prvTimerTask+0x8>

0800e5b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e5be:	f7fe ff03 	bl	800d3c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e5c2:	f107 0308 	add.w	r3, r7, #8
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f000 f866 	bl	800e698 <prvSampleTimeNow>
 800e5cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d130      	bne.n	800e636 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d10a      	bne.n	800e5f0 <prvProcessTimerOrBlockTask+0x3c>
 800e5da:	687a      	ldr	r2, [r7, #4]
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d806      	bhi.n	800e5f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e5e2:	f7fe ff37 	bl	800d454 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e5e6:	68f9      	ldr	r1, [r7, #12]
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7ff ff85 	bl	800e4f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e5ee:	e024      	b.n	800e63a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d008      	beq.n	800e608 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e5f6:	4b13      	ldr	r3, [pc, #76]	; (800e644 <prvProcessTimerOrBlockTask+0x90>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d101      	bne.n	800e604 <prvProcessTimerOrBlockTask+0x50>
 800e600:	2301      	movs	r3, #1
 800e602:	e000      	b.n	800e606 <prvProcessTimerOrBlockTask+0x52>
 800e604:	2300      	movs	r3, #0
 800e606:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e608:	4b0f      	ldr	r3, [pc, #60]	; (800e648 <prvProcessTimerOrBlockTask+0x94>)
 800e60a:	6818      	ldr	r0, [r3, #0]
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	1ad3      	subs	r3, r2, r3
 800e612:	683a      	ldr	r2, [r7, #0]
 800e614:	4619      	mov	r1, r3
 800e616:	f7fe fc6d 	bl	800cef4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e61a:	f7fe ff1b 	bl	800d454 <xTaskResumeAll>
 800e61e:	4603      	mov	r3, r0
 800e620:	2b00      	cmp	r3, #0
 800e622:	d10a      	bne.n	800e63a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e624:	4b09      	ldr	r3, [pc, #36]	; (800e64c <prvProcessTimerOrBlockTask+0x98>)
 800e626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e62a:	601a      	str	r2, [r3, #0]
 800e62c:	f3bf 8f4f 	dsb	sy
 800e630:	f3bf 8f6f 	isb	sy
}
 800e634:	e001      	b.n	800e63a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e636:	f7fe ff0d 	bl	800d454 <xTaskResumeAll>
}
 800e63a:	bf00      	nop
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	20002d24 	.word	0x20002d24
 800e648:	20002d28 	.word	0x20002d28
 800e64c:	e000ed04 	.word	0xe000ed04

0800e650 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e650:	b480      	push	{r7}
 800e652:	b085      	sub	sp, #20
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e658:	4b0e      	ldr	r3, [pc, #56]	; (800e694 <prvGetNextExpireTime+0x44>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d101      	bne.n	800e666 <prvGetNextExpireTime+0x16>
 800e662:	2201      	movs	r2, #1
 800e664:	e000      	b.n	800e668 <prvGetNextExpireTime+0x18>
 800e666:	2200      	movs	r2, #0
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d105      	bne.n	800e680 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e674:	4b07      	ldr	r3, [pc, #28]	; (800e694 <prvGetNextExpireTime+0x44>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	68db      	ldr	r3, [r3, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	60fb      	str	r3, [r7, #12]
 800e67e:	e001      	b.n	800e684 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e680:	2300      	movs	r3, #0
 800e682:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e684:	68fb      	ldr	r3, [r7, #12]
}
 800e686:	4618      	mov	r0, r3
 800e688:	3714      	adds	r7, #20
 800e68a:	46bd      	mov	sp, r7
 800e68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e690:	4770      	bx	lr
 800e692:	bf00      	nop
 800e694:	20002d20 	.word	0x20002d20

0800e698 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b084      	sub	sp, #16
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e6a0:	f7fe ff74 	bl	800d58c <xTaskGetTickCount>
 800e6a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e6a6:	4b0b      	ldr	r3, [pc, #44]	; (800e6d4 <prvSampleTimeNow+0x3c>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	68fa      	ldr	r2, [r7, #12]
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d205      	bcs.n	800e6bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e6b0:	f000 f930 	bl	800e914 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	601a      	str	r2, [r3, #0]
 800e6ba:	e002      	b.n	800e6c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e6c2:	4a04      	ldr	r2, [pc, #16]	; (800e6d4 <prvSampleTimeNow+0x3c>)
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3710      	adds	r7, #16
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	20002d30 	.word	0x20002d30

0800e6d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b086      	sub	sp, #24
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	607a      	str	r2, [r7, #4]
 800e6e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	68ba      	ldr	r2, [r7, #8]
 800e6ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	68fa      	ldr	r2, [r7, #12]
 800e6f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e6f6:	68ba      	ldr	r2, [r7, #8]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d812      	bhi.n	800e724 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	1ad2      	subs	r2, r2, r3
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	699b      	ldr	r3, [r3, #24]
 800e708:	429a      	cmp	r2, r3
 800e70a:	d302      	bcc.n	800e712 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e70c:	2301      	movs	r3, #1
 800e70e:	617b      	str	r3, [r7, #20]
 800e710:	e01b      	b.n	800e74a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e712:	4b10      	ldr	r3, [pc, #64]	; (800e754 <prvInsertTimerInActiveList+0x7c>)
 800e714:	681a      	ldr	r2, [r3, #0]
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	3304      	adds	r3, #4
 800e71a:	4619      	mov	r1, r3
 800e71c:	4610      	mov	r0, r2
 800e71e:	f7fd fb18 	bl	800bd52 <vListInsert>
 800e722:	e012      	b.n	800e74a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e724:	687a      	ldr	r2, [r7, #4]
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	429a      	cmp	r2, r3
 800e72a:	d206      	bcs.n	800e73a <prvInsertTimerInActiveList+0x62>
 800e72c:	68ba      	ldr	r2, [r7, #8]
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	429a      	cmp	r2, r3
 800e732:	d302      	bcc.n	800e73a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e734:	2301      	movs	r3, #1
 800e736:	617b      	str	r3, [r7, #20]
 800e738:	e007      	b.n	800e74a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e73a:	4b07      	ldr	r3, [pc, #28]	; (800e758 <prvInsertTimerInActiveList+0x80>)
 800e73c:	681a      	ldr	r2, [r3, #0]
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	3304      	adds	r3, #4
 800e742:	4619      	mov	r1, r3
 800e744:	4610      	mov	r0, r2
 800e746:	f7fd fb04 	bl	800bd52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e74a:	697b      	ldr	r3, [r7, #20]
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3718      	adds	r7, #24
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}
 800e754:	20002d24 	.word	0x20002d24
 800e758:	20002d20 	.word	0x20002d20

0800e75c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b08e      	sub	sp, #56	; 0x38
 800e760:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e762:	e0c6      	b.n	800e8f2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2b00      	cmp	r3, #0
 800e768:	da17      	bge.n	800e79a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e76a:	1d3b      	adds	r3, r7, #4
 800e76c:	3304      	adds	r3, #4
 800e76e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e772:	2b00      	cmp	r3, #0
 800e774:	d109      	bne.n	800e78a <prvProcessReceivedCommands+0x2e>
 800e776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e77a:	f383 8811 	msr	BASEPRI, r3
 800e77e:	f3bf 8f6f 	isb	sy
 800e782:	f3bf 8f4f 	dsb	sy
 800e786:	61fb      	str	r3, [r7, #28]
 800e788:	e7fe      	b.n	800e788 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e790:	6850      	ldr	r0, [r2, #4]
 800e792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e794:	6892      	ldr	r2, [r2, #8]
 800e796:	4611      	mov	r1, r2
 800e798:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	f2c0 80a7 	blt.w	800e8f0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a8:	695b      	ldr	r3, [r3, #20]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d004      	beq.n	800e7b8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b0:	3304      	adds	r3, #4
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7fd fb06 	bl	800bdc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e7b8:	463b      	mov	r3, r7
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7ff ff6c 	bl	800e698 <prvSampleTimeNow>
 800e7c0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2b09      	cmp	r3, #9
 800e7c6:	f200 8094 	bhi.w	800e8f2 <prvProcessReceivedCommands+0x196>
 800e7ca:	a201      	add	r2, pc, #4	; (adr r2, 800e7d0 <prvProcessReceivedCommands+0x74>)
 800e7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7d0:	0800e7f9 	.word	0x0800e7f9
 800e7d4:	0800e7f9 	.word	0x0800e7f9
 800e7d8:	0800e7f9 	.word	0x0800e7f9
 800e7dc:	0800e86b 	.word	0x0800e86b
 800e7e0:	0800e87f 	.word	0x0800e87f
 800e7e4:	0800e8c7 	.word	0x0800e8c7
 800e7e8:	0800e7f9 	.word	0x0800e7f9
 800e7ec:	0800e7f9 	.word	0x0800e7f9
 800e7f0:	0800e86b 	.word	0x0800e86b
 800e7f4:	0800e87f 	.word	0x0800e87f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7fe:	f043 0301 	orr.w	r3, r3, #1
 800e802:	b2da      	uxtb	r2, r3
 800e804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e806:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e80a:	68ba      	ldr	r2, [r7, #8]
 800e80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e80e:	699b      	ldr	r3, [r3, #24]
 800e810:	18d1      	adds	r1, r2, r3
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e818:	f7ff ff5e 	bl	800e6d8 <prvInsertTimerInActiveList>
 800e81c:	4603      	mov	r3, r0
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d067      	beq.n	800e8f2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e824:	6a1b      	ldr	r3, [r3, #32]
 800e826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e828:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e830:	f003 0304 	and.w	r3, r3, #4
 800e834:	2b00      	cmp	r3, #0
 800e836:	d05c      	beq.n	800e8f2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e838:	68ba      	ldr	r2, [r7, #8]
 800e83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83c:	699b      	ldr	r3, [r3, #24]
 800e83e:	441a      	add	r2, r3
 800e840:	2300      	movs	r3, #0
 800e842:	9300      	str	r3, [sp, #0]
 800e844:	2300      	movs	r3, #0
 800e846:	2100      	movs	r1, #0
 800e848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e84a:	f7ff fe09 	bl	800e460 <xTimerGenericCommand>
 800e84e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e850:	6a3b      	ldr	r3, [r7, #32]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d14d      	bne.n	800e8f2 <prvProcessReceivedCommands+0x196>
 800e856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e85a:	f383 8811 	msr	BASEPRI, r3
 800e85e:	f3bf 8f6f 	isb	sy
 800e862:	f3bf 8f4f 	dsb	sy
 800e866:	61bb      	str	r3, [r7, #24]
 800e868:	e7fe      	b.n	800e868 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e870:	f023 0301 	bic.w	r3, r3, #1
 800e874:	b2da      	uxtb	r2, r3
 800e876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e878:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e87c:	e039      	b.n	800e8f2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e884:	f043 0301 	orr.w	r3, r3, #1
 800e888:	b2da      	uxtb	r2, r3
 800e88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e890:	68ba      	ldr	r2, [r7, #8]
 800e892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e894:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e898:	699b      	ldr	r3, [r3, #24]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d109      	bne.n	800e8b2 <prvProcessReceivedCommands+0x156>
 800e89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a2:	f383 8811 	msr	BASEPRI, r3
 800e8a6:	f3bf 8f6f 	isb	sy
 800e8aa:	f3bf 8f4f 	dsb	sy
 800e8ae:	617b      	str	r3, [r7, #20]
 800e8b0:	e7fe      	b.n	800e8b0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b4:	699a      	ldr	r2, [r3, #24]
 800e8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b8:	18d1      	adds	r1, r2, r3
 800e8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8c0:	f7ff ff0a 	bl	800e6d8 <prvInsertTimerInActiveList>
					break;
 800e8c4:	e015      	b.n	800e8f2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8cc:	f003 0302 	and.w	r3, r3, #2
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d103      	bne.n	800e8dc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800e8d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8d6:	f000 fbc5 	bl	800f064 <vPortFree>
 800e8da:	e00a      	b.n	800e8f2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8e2:	f023 0301 	bic.w	r3, r3, #1
 800e8e6:	b2da      	uxtb	r2, r3
 800e8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e8ee:	e000      	b.n	800e8f2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e8f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e8f2:	4b07      	ldr	r3, [pc, #28]	; (800e910 <prvProcessReceivedCommands+0x1b4>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	1d39      	adds	r1, r7, #4
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7fd fefc 	bl	800c6f8 <xQueueReceive>
 800e900:	4603      	mov	r3, r0
 800e902:	2b00      	cmp	r3, #0
 800e904:	f47f af2e 	bne.w	800e764 <prvProcessReceivedCommands+0x8>
	}
}
 800e908:	bf00      	nop
 800e90a:	3730      	adds	r7, #48	; 0x30
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	20002d28 	.word	0x20002d28

0800e914 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b088      	sub	sp, #32
 800e918:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e91a:	e047      	b.n	800e9ac <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e91c:	4b2d      	ldr	r3, [pc, #180]	; (800e9d4 <prvSwitchTimerLists+0xc0>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	68db      	ldr	r3, [r3, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e926:	4b2b      	ldr	r3, [pc, #172]	; (800e9d4 <prvSwitchTimerLists+0xc0>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	68db      	ldr	r3, [r3, #12]
 800e92e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	3304      	adds	r3, #4
 800e934:	4618      	mov	r0, r3
 800e936:	f7fd fa45 	bl	800bdc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	6a1b      	ldr	r3, [r3, #32]
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e948:	f003 0304 	and.w	r3, r3, #4
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d02d      	beq.n	800e9ac <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	699b      	ldr	r3, [r3, #24]
 800e954:	693a      	ldr	r2, [r7, #16]
 800e956:	4413      	add	r3, r2
 800e958:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e95a:	68ba      	ldr	r2, [r7, #8]
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	429a      	cmp	r2, r3
 800e960:	d90e      	bls.n	800e980 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	68ba      	ldr	r2, [r7, #8]
 800e966:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	68fa      	ldr	r2, [r7, #12]
 800e96c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e96e:	4b19      	ldr	r3, [pc, #100]	; (800e9d4 <prvSwitchTimerLists+0xc0>)
 800e970:	681a      	ldr	r2, [r3, #0]
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	3304      	adds	r3, #4
 800e976:	4619      	mov	r1, r3
 800e978:	4610      	mov	r0, r2
 800e97a:	f7fd f9ea 	bl	800bd52 <vListInsert>
 800e97e:	e015      	b.n	800e9ac <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e980:	2300      	movs	r3, #0
 800e982:	9300      	str	r3, [sp, #0]
 800e984:	2300      	movs	r3, #0
 800e986:	693a      	ldr	r2, [r7, #16]
 800e988:	2100      	movs	r1, #0
 800e98a:	68f8      	ldr	r0, [r7, #12]
 800e98c:	f7ff fd68 	bl	800e460 <xTimerGenericCommand>
 800e990:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d109      	bne.n	800e9ac <prvSwitchTimerLists+0x98>
 800e998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99c:	f383 8811 	msr	BASEPRI, r3
 800e9a0:	f3bf 8f6f 	isb	sy
 800e9a4:	f3bf 8f4f 	dsb	sy
 800e9a8:	603b      	str	r3, [r7, #0]
 800e9aa:	e7fe      	b.n	800e9aa <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e9ac:	4b09      	ldr	r3, [pc, #36]	; (800e9d4 <prvSwitchTimerLists+0xc0>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d1b2      	bne.n	800e91c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e9b6:	4b07      	ldr	r3, [pc, #28]	; (800e9d4 <prvSwitchTimerLists+0xc0>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e9bc:	4b06      	ldr	r3, [pc, #24]	; (800e9d8 <prvSwitchTimerLists+0xc4>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	4a04      	ldr	r2, [pc, #16]	; (800e9d4 <prvSwitchTimerLists+0xc0>)
 800e9c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e9c4:	4a04      	ldr	r2, [pc, #16]	; (800e9d8 <prvSwitchTimerLists+0xc4>)
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	6013      	str	r3, [r2, #0]
}
 800e9ca:	bf00      	nop
 800e9cc:	3718      	adds	r7, #24
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	20002d20 	.word	0x20002d20
 800e9d8:	20002d24 	.word	0x20002d24

0800e9dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e9e2:	f000 f963 	bl	800ecac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e9e6:	4b15      	ldr	r3, [pc, #84]	; (800ea3c <prvCheckForValidListAndQueue+0x60>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d120      	bne.n	800ea30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e9ee:	4814      	ldr	r0, [pc, #80]	; (800ea40 <prvCheckForValidListAndQueue+0x64>)
 800e9f0:	f7fd f95e 	bl	800bcb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e9f4:	4813      	ldr	r0, [pc, #76]	; (800ea44 <prvCheckForValidListAndQueue+0x68>)
 800e9f6:	f7fd f95b 	bl	800bcb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e9fa:	4b13      	ldr	r3, [pc, #76]	; (800ea48 <prvCheckForValidListAndQueue+0x6c>)
 800e9fc:	4a10      	ldr	r2, [pc, #64]	; (800ea40 <prvCheckForValidListAndQueue+0x64>)
 800e9fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ea00:	4b12      	ldr	r3, [pc, #72]	; (800ea4c <prvCheckForValidListAndQueue+0x70>)
 800ea02:	4a10      	ldr	r2, [pc, #64]	; (800ea44 <prvCheckForValidListAndQueue+0x68>)
 800ea04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ea06:	2300      	movs	r3, #0
 800ea08:	9300      	str	r3, [sp, #0]
 800ea0a:	4b11      	ldr	r3, [pc, #68]	; (800ea50 <prvCheckForValidListAndQueue+0x74>)
 800ea0c:	4a11      	ldr	r2, [pc, #68]	; (800ea54 <prvCheckForValidListAndQueue+0x78>)
 800ea0e:	2110      	movs	r1, #16
 800ea10:	200a      	movs	r0, #10
 800ea12:	f7fd fa69 	bl	800bee8 <xQueueGenericCreateStatic>
 800ea16:	4602      	mov	r2, r0
 800ea18:	4b08      	ldr	r3, [pc, #32]	; (800ea3c <prvCheckForValidListAndQueue+0x60>)
 800ea1a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ea1c:	4b07      	ldr	r3, [pc, #28]	; (800ea3c <prvCheckForValidListAndQueue+0x60>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d005      	beq.n	800ea30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ea24:	4b05      	ldr	r3, [pc, #20]	; (800ea3c <prvCheckForValidListAndQueue+0x60>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	490b      	ldr	r1, [pc, #44]	; (800ea58 <prvCheckForValidListAndQueue+0x7c>)
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fe fa10 	bl	800ce50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea30:	f000 f96a 	bl	800ed08 <vPortExitCritical>
}
 800ea34:	bf00      	nop
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}
 800ea3a:	bf00      	nop
 800ea3c:	20002d28 	.word	0x20002d28
 800ea40:	20002cf8 	.word	0x20002cf8
 800ea44:	20002d0c 	.word	0x20002d0c
 800ea48:	20002d20 	.word	0x20002d20
 800ea4c:	20002d24 	.word	0x20002d24
 800ea50:	20002dd4 	.word	0x20002dd4
 800ea54:	20002d34 	.word	0x20002d34
 800ea58:	080130f0 	.word	0x080130f0

0800ea5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b085      	sub	sp, #20
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	60f8      	str	r0, [r7, #12]
 800ea64:	60b9      	str	r1, [r7, #8]
 800ea66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	3b04      	subs	r3, #4
 800ea6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ea74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	3b04      	subs	r3, #4
 800ea7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	f023 0201 	bic.w	r2, r3, #1
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	3b04      	subs	r3, #4
 800ea8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ea8c:	4a0c      	ldr	r2, [pc, #48]	; (800eac0 <pxPortInitialiseStack+0x64>)
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	3b14      	subs	r3, #20
 800ea96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ea98:	687a      	ldr	r2, [r7, #4]
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	3b04      	subs	r3, #4
 800eaa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	f06f 0202 	mvn.w	r2, #2
 800eaaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	3b20      	subs	r3, #32
 800eab0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eab2:	68fb      	ldr	r3, [r7, #12]
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	3714      	adds	r7, #20
 800eab8:	46bd      	mov	sp, r7
 800eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabe:	4770      	bx	lr
 800eac0:	0800eac5 	.word	0x0800eac5

0800eac4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eac4:	b480      	push	{r7}
 800eac6:	b085      	sub	sp, #20
 800eac8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800eaca:	2300      	movs	r3, #0
 800eacc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eace:	4b11      	ldr	r3, [pc, #68]	; (800eb14 <prvTaskExitError+0x50>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ead6:	d009      	beq.n	800eaec <prvTaskExitError+0x28>
 800ead8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eadc:	f383 8811 	msr	BASEPRI, r3
 800eae0:	f3bf 8f6f 	isb	sy
 800eae4:	f3bf 8f4f 	dsb	sy
 800eae8:	60fb      	str	r3, [r7, #12]
 800eaea:	e7fe      	b.n	800eaea <prvTaskExitError+0x26>
 800eaec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf0:	f383 8811 	msr	BASEPRI, r3
 800eaf4:	f3bf 8f6f 	isb	sy
 800eaf8:	f3bf 8f4f 	dsb	sy
 800eafc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eafe:	bf00      	nop
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d0fc      	beq.n	800eb00 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eb06:	bf00      	nop
 800eb08:	3714      	adds	r7, #20
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb10:	4770      	bx	lr
 800eb12:	bf00      	nop
 800eb14:	2000001c 	.word	0x2000001c
	...

0800eb20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eb20:	4b07      	ldr	r3, [pc, #28]	; (800eb40 <pxCurrentTCBConst2>)
 800eb22:	6819      	ldr	r1, [r3, #0]
 800eb24:	6808      	ldr	r0, [r1, #0]
 800eb26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb2a:	f380 8809 	msr	PSP, r0
 800eb2e:	f3bf 8f6f 	isb	sy
 800eb32:	f04f 0000 	mov.w	r0, #0
 800eb36:	f380 8811 	msr	BASEPRI, r0
 800eb3a:	4770      	bx	lr
 800eb3c:	f3af 8000 	nop.w

0800eb40 <pxCurrentTCBConst2>:
 800eb40:	200027f8 	.word	0x200027f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eb44:	bf00      	nop
 800eb46:	bf00      	nop

0800eb48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eb48:	4808      	ldr	r0, [pc, #32]	; (800eb6c <prvPortStartFirstTask+0x24>)
 800eb4a:	6800      	ldr	r0, [r0, #0]
 800eb4c:	6800      	ldr	r0, [r0, #0]
 800eb4e:	f380 8808 	msr	MSP, r0
 800eb52:	f04f 0000 	mov.w	r0, #0
 800eb56:	f380 8814 	msr	CONTROL, r0
 800eb5a:	b662      	cpsie	i
 800eb5c:	b661      	cpsie	f
 800eb5e:	f3bf 8f4f 	dsb	sy
 800eb62:	f3bf 8f6f 	isb	sy
 800eb66:	df00      	svc	0
 800eb68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eb6a:	bf00      	nop
 800eb6c:	e000ed08 	.word	0xe000ed08

0800eb70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b086      	sub	sp, #24
 800eb74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800eb76:	4b44      	ldr	r3, [pc, #272]	; (800ec88 <xPortStartScheduler+0x118>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	4a44      	ldr	r2, [pc, #272]	; (800ec8c <xPortStartScheduler+0x11c>)
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d109      	bne.n	800eb94 <xPortStartScheduler+0x24>
 800eb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb84:	f383 8811 	msr	BASEPRI, r3
 800eb88:	f3bf 8f6f 	isb	sy
 800eb8c:	f3bf 8f4f 	dsb	sy
 800eb90:	613b      	str	r3, [r7, #16]
 800eb92:	e7fe      	b.n	800eb92 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800eb94:	4b3c      	ldr	r3, [pc, #240]	; (800ec88 <xPortStartScheduler+0x118>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	4a3d      	ldr	r2, [pc, #244]	; (800ec90 <xPortStartScheduler+0x120>)
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d109      	bne.n	800ebb2 <xPortStartScheduler+0x42>
 800eb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba2:	f383 8811 	msr	BASEPRI, r3
 800eba6:	f3bf 8f6f 	isb	sy
 800ebaa:	f3bf 8f4f 	dsb	sy
 800ebae:	60fb      	str	r3, [r7, #12]
 800ebb0:	e7fe      	b.n	800ebb0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ebb2:	4b38      	ldr	r3, [pc, #224]	; (800ec94 <xPortStartScheduler+0x124>)
 800ebb4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	b2db      	uxtb	r3, r3
 800ebbc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	22ff      	movs	r2, #255	; 0xff
 800ebc2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	781b      	ldrb	r3, [r3, #0]
 800ebc8:	b2db      	uxtb	r3, r3
 800ebca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ebcc:	78fb      	ldrb	r3, [r7, #3]
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ebd4:	b2da      	uxtb	r2, r3
 800ebd6:	4b30      	ldr	r3, [pc, #192]	; (800ec98 <xPortStartScheduler+0x128>)
 800ebd8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ebda:	4b30      	ldr	r3, [pc, #192]	; (800ec9c <xPortStartScheduler+0x12c>)
 800ebdc:	2207      	movs	r2, #7
 800ebde:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ebe0:	e009      	b.n	800ebf6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ebe2:	4b2e      	ldr	r3, [pc, #184]	; (800ec9c <xPortStartScheduler+0x12c>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	4a2c      	ldr	r2, [pc, #176]	; (800ec9c <xPortStartScheduler+0x12c>)
 800ebea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ebec:	78fb      	ldrb	r3, [r7, #3]
 800ebee:	b2db      	uxtb	r3, r3
 800ebf0:	005b      	lsls	r3, r3, #1
 800ebf2:	b2db      	uxtb	r3, r3
 800ebf4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ebf6:	78fb      	ldrb	r3, [r7, #3]
 800ebf8:	b2db      	uxtb	r3, r3
 800ebfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebfe:	2b80      	cmp	r3, #128	; 0x80
 800ec00:	d0ef      	beq.n	800ebe2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ec02:	4b26      	ldr	r3, [pc, #152]	; (800ec9c <xPortStartScheduler+0x12c>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	f1c3 0307 	rsb	r3, r3, #7
 800ec0a:	2b04      	cmp	r3, #4
 800ec0c:	d009      	beq.n	800ec22 <xPortStartScheduler+0xb2>
 800ec0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec12:	f383 8811 	msr	BASEPRI, r3
 800ec16:	f3bf 8f6f 	isb	sy
 800ec1a:	f3bf 8f4f 	dsb	sy
 800ec1e:	60bb      	str	r3, [r7, #8]
 800ec20:	e7fe      	b.n	800ec20 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ec22:	4b1e      	ldr	r3, [pc, #120]	; (800ec9c <xPortStartScheduler+0x12c>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	021b      	lsls	r3, r3, #8
 800ec28:	4a1c      	ldr	r2, [pc, #112]	; (800ec9c <xPortStartScheduler+0x12c>)
 800ec2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ec2c:	4b1b      	ldr	r3, [pc, #108]	; (800ec9c <xPortStartScheduler+0x12c>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ec34:	4a19      	ldr	r2, [pc, #100]	; (800ec9c <xPortStartScheduler+0x12c>)
 800ec36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	b2da      	uxtb	r2, r3
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ec40:	4b17      	ldr	r3, [pc, #92]	; (800eca0 <xPortStartScheduler+0x130>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	4a16      	ldr	r2, [pc, #88]	; (800eca0 <xPortStartScheduler+0x130>)
 800ec46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ec4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ec4c:	4b14      	ldr	r3, [pc, #80]	; (800eca0 <xPortStartScheduler+0x130>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	4a13      	ldr	r2, [pc, #76]	; (800eca0 <xPortStartScheduler+0x130>)
 800ec52:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ec56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ec58:	f000 f8d6 	bl	800ee08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ec5c:	4b11      	ldr	r3, [pc, #68]	; (800eca4 <xPortStartScheduler+0x134>)
 800ec5e:	2200      	movs	r2, #0
 800ec60:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ec62:	f000 f8f5 	bl	800ee50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ec66:	4b10      	ldr	r3, [pc, #64]	; (800eca8 <xPortStartScheduler+0x138>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	4a0f      	ldr	r2, [pc, #60]	; (800eca8 <xPortStartScheduler+0x138>)
 800ec6c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ec70:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ec72:	f7ff ff69 	bl	800eb48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ec76:	f7fe fd51 	bl	800d71c <vTaskSwitchContext>
	prvTaskExitError();
 800ec7a:	f7ff ff23 	bl	800eac4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ec7e:	2300      	movs	r3, #0
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3718      	adds	r7, #24
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}
 800ec88:	e000ed00 	.word	0xe000ed00
 800ec8c:	410fc271 	.word	0x410fc271
 800ec90:	410fc270 	.word	0x410fc270
 800ec94:	e000e400 	.word	0xe000e400
 800ec98:	20002e24 	.word	0x20002e24
 800ec9c:	20002e28 	.word	0x20002e28
 800eca0:	e000ed20 	.word	0xe000ed20
 800eca4:	2000001c 	.word	0x2000001c
 800eca8:	e000ef34 	.word	0xe000ef34

0800ecac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb6:	f383 8811 	msr	BASEPRI, r3
 800ecba:	f3bf 8f6f 	isb	sy
 800ecbe:	f3bf 8f4f 	dsb	sy
 800ecc2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ecc4:	4b0e      	ldr	r3, [pc, #56]	; (800ed00 <vPortEnterCritical+0x54>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	3301      	adds	r3, #1
 800ecca:	4a0d      	ldr	r2, [pc, #52]	; (800ed00 <vPortEnterCritical+0x54>)
 800eccc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ecce:	4b0c      	ldr	r3, [pc, #48]	; (800ed00 <vPortEnterCritical+0x54>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	2b01      	cmp	r3, #1
 800ecd4:	d10e      	bne.n	800ecf4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ecd6:	4b0b      	ldr	r3, [pc, #44]	; (800ed04 <vPortEnterCritical+0x58>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	b2db      	uxtb	r3, r3
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d009      	beq.n	800ecf4 <vPortEnterCritical+0x48>
 800ece0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ece4:	f383 8811 	msr	BASEPRI, r3
 800ece8:	f3bf 8f6f 	isb	sy
 800ecec:	f3bf 8f4f 	dsb	sy
 800ecf0:	603b      	str	r3, [r7, #0]
 800ecf2:	e7fe      	b.n	800ecf2 <vPortEnterCritical+0x46>
	}
}
 800ecf4:	bf00      	nop
 800ecf6:	370c      	adds	r7, #12
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfe:	4770      	bx	lr
 800ed00:	2000001c 	.word	0x2000001c
 800ed04:	e000ed04 	.word	0xe000ed04

0800ed08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b083      	sub	sp, #12
 800ed0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ed0e:	4b11      	ldr	r3, [pc, #68]	; (800ed54 <vPortExitCritical+0x4c>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d109      	bne.n	800ed2a <vPortExitCritical+0x22>
 800ed16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed1a:	f383 8811 	msr	BASEPRI, r3
 800ed1e:	f3bf 8f6f 	isb	sy
 800ed22:	f3bf 8f4f 	dsb	sy
 800ed26:	607b      	str	r3, [r7, #4]
 800ed28:	e7fe      	b.n	800ed28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ed2a:	4b0a      	ldr	r3, [pc, #40]	; (800ed54 <vPortExitCritical+0x4c>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	3b01      	subs	r3, #1
 800ed30:	4a08      	ldr	r2, [pc, #32]	; (800ed54 <vPortExitCritical+0x4c>)
 800ed32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ed34:	4b07      	ldr	r3, [pc, #28]	; (800ed54 <vPortExitCritical+0x4c>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d104      	bne.n	800ed46 <vPortExitCritical+0x3e>
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ed46:	bf00      	nop
 800ed48:	370c      	adds	r7, #12
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed50:	4770      	bx	lr
 800ed52:	bf00      	nop
 800ed54:	2000001c 	.word	0x2000001c
	...

0800ed60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ed60:	f3ef 8009 	mrs	r0, PSP
 800ed64:	f3bf 8f6f 	isb	sy
 800ed68:	4b15      	ldr	r3, [pc, #84]	; (800edc0 <pxCurrentTCBConst>)
 800ed6a:	681a      	ldr	r2, [r3, #0]
 800ed6c:	f01e 0f10 	tst.w	lr, #16
 800ed70:	bf08      	it	eq
 800ed72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ed76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed7a:	6010      	str	r0, [r2, #0]
 800ed7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ed80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ed84:	f380 8811 	msr	BASEPRI, r0
 800ed88:	f3bf 8f4f 	dsb	sy
 800ed8c:	f3bf 8f6f 	isb	sy
 800ed90:	f7fe fcc4 	bl	800d71c <vTaskSwitchContext>
 800ed94:	f04f 0000 	mov.w	r0, #0
 800ed98:	f380 8811 	msr	BASEPRI, r0
 800ed9c:	bc09      	pop	{r0, r3}
 800ed9e:	6819      	ldr	r1, [r3, #0]
 800eda0:	6808      	ldr	r0, [r1, #0]
 800eda2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eda6:	f01e 0f10 	tst.w	lr, #16
 800edaa:	bf08      	it	eq
 800edac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800edb0:	f380 8809 	msr	PSP, r0
 800edb4:	f3bf 8f6f 	isb	sy
 800edb8:	4770      	bx	lr
 800edba:	bf00      	nop
 800edbc:	f3af 8000 	nop.w

0800edc0 <pxCurrentTCBConst>:
 800edc0:	200027f8 	.word	0x200027f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800edc4:	bf00      	nop
 800edc6:	bf00      	nop

0800edc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b082      	sub	sp, #8
 800edcc:	af00      	add	r7, sp, #0
	__asm volatile
 800edce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd2:	f383 8811 	msr	BASEPRI, r3
 800edd6:	f3bf 8f6f 	isb	sy
 800edda:	f3bf 8f4f 	dsb	sy
 800edde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ede0:	f7fe fbe4 	bl	800d5ac <xTaskIncrementTick>
 800ede4:	4603      	mov	r3, r0
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d003      	beq.n	800edf2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800edea:	4b06      	ldr	r3, [pc, #24]	; (800ee04 <SysTick_Handler+0x3c>)
 800edec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edf0:	601a      	str	r2, [r3, #0]
 800edf2:	2300      	movs	r3, #0
 800edf4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800edfc:	bf00      	nop
 800edfe:	3708      	adds	r7, #8
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	e000ed04 	.word	0xe000ed04

0800ee08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ee08:	b480      	push	{r7}
 800ee0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ee0c:	4b0b      	ldr	r3, [pc, #44]	; (800ee3c <vPortSetupTimerInterrupt+0x34>)
 800ee0e:	2200      	movs	r2, #0
 800ee10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ee12:	4b0b      	ldr	r3, [pc, #44]	; (800ee40 <vPortSetupTimerInterrupt+0x38>)
 800ee14:	2200      	movs	r2, #0
 800ee16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ee18:	4b0a      	ldr	r3, [pc, #40]	; (800ee44 <vPortSetupTimerInterrupt+0x3c>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	4a0a      	ldr	r2, [pc, #40]	; (800ee48 <vPortSetupTimerInterrupt+0x40>)
 800ee1e:	fba2 2303 	umull	r2, r3, r2, r3
 800ee22:	099b      	lsrs	r3, r3, #6
 800ee24:	4a09      	ldr	r2, [pc, #36]	; (800ee4c <vPortSetupTimerInterrupt+0x44>)
 800ee26:	3b01      	subs	r3, #1
 800ee28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ee2a:	4b04      	ldr	r3, [pc, #16]	; (800ee3c <vPortSetupTimerInterrupt+0x34>)
 800ee2c:	2207      	movs	r2, #7
 800ee2e:	601a      	str	r2, [r3, #0]
}
 800ee30:	bf00      	nop
 800ee32:	46bd      	mov	sp, r7
 800ee34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee38:	4770      	bx	lr
 800ee3a:	bf00      	nop
 800ee3c:	e000e010 	.word	0xe000e010
 800ee40:	e000e018 	.word	0xe000e018
 800ee44:	20000010 	.word	0x20000010
 800ee48:	10624dd3 	.word	0x10624dd3
 800ee4c:	e000e014 	.word	0xe000e014

0800ee50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ee50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ee60 <vPortEnableVFP+0x10>
 800ee54:	6801      	ldr	r1, [r0, #0]
 800ee56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ee5a:	6001      	str	r1, [r0, #0]
 800ee5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ee5e:	bf00      	nop
 800ee60:	e000ed88 	.word	0xe000ed88

0800ee64 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ee64:	b480      	push	{r7}
 800ee66:	b085      	sub	sp, #20
 800ee68:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ee6a:	f3ef 8305 	mrs	r3, IPSR
 800ee6e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	2b0f      	cmp	r3, #15
 800ee74:	d913      	bls.n	800ee9e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ee76:	4a16      	ldr	r2, [pc, #88]	; (800eed0 <vPortValidateInterruptPriority+0x6c>)
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	4413      	add	r3, r2
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ee80:	4b14      	ldr	r3, [pc, #80]	; (800eed4 <vPortValidateInterruptPriority+0x70>)
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	7afa      	ldrb	r2, [r7, #11]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d209      	bcs.n	800ee9e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800ee8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8e:	f383 8811 	msr	BASEPRI, r3
 800ee92:	f3bf 8f6f 	isb	sy
 800ee96:	f3bf 8f4f 	dsb	sy
 800ee9a:	607b      	str	r3, [r7, #4]
 800ee9c:	e7fe      	b.n	800ee9c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ee9e:	4b0e      	ldr	r3, [pc, #56]	; (800eed8 <vPortValidateInterruptPriority+0x74>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eea6:	4b0d      	ldr	r3, [pc, #52]	; (800eedc <vPortValidateInterruptPriority+0x78>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	d909      	bls.n	800eec2 <vPortValidateInterruptPriority+0x5e>
 800eeae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb2:	f383 8811 	msr	BASEPRI, r3
 800eeb6:	f3bf 8f6f 	isb	sy
 800eeba:	f3bf 8f4f 	dsb	sy
 800eebe:	603b      	str	r3, [r7, #0]
 800eec0:	e7fe      	b.n	800eec0 <vPortValidateInterruptPriority+0x5c>
	}
 800eec2:	bf00      	nop
 800eec4:	3714      	adds	r7, #20
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr
 800eece:	bf00      	nop
 800eed0:	e000e3f0 	.word	0xe000e3f0
 800eed4:	20002e24 	.word	0x20002e24
 800eed8:	e000ed0c 	.word	0xe000ed0c
 800eedc:	20002e28 	.word	0x20002e28

0800eee0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b08a      	sub	sp, #40	; 0x28
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eee8:	2300      	movs	r3, #0
 800eeea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eeec:	f7fe fa6c 	bl	800d3c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eef0:	4b57      	ldr	r3, [pc, #348]	; (800f050 <pvPortMalloc+0x170>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d101      	bne.n	800eefc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eef8:	f000 f90c 	bl	800f114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eefc:	4b55      	ldr	r3, [pc, #340]	; (800f054 <pvPortMalloc+0x174>)
 800eefe:	681a      	ldr	r2, [r3, #0]
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	4013      	ands	r3, r2
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	f040 808c 	bne.w	800f022 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d01c      	beq.n	800ef4a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800ef10:	2208      	movs	r2, #8
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	4413      	add	r3, r2
 800ef16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f003 0307 	and.w	r3, r3, #7
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d013      	beq.n	800ef4a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f023 0307 	bic.w	r3, r3, #7
 800ef28:	3308      	adds	r3, #8
 800ef2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f003 0307 	and.w	r3, r3, #7
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d009      	beq.n	800ef4a <pvPortMalloc+0x6a>
 800ef36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef3a:	f383 8811 	msr	BASEPRI, r3
 800ef3e:	f3bf 8f6f 	isb	sy
 800ef42:	f3bf 8f4f 	dsb	sy
 800ef46:	617b      	str	r3, [r7, #20]
 800ef48:	e7fe      	b.n	800ef48 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d068      	beq.n	800f022 <pvPortMalloc+0x142>
 800ef50:	4b41      	ldr	r3, [pc, #260]	; (800f058 <pvPortMalloc+0x178>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	687a      	ldr	r2, [r7, #4]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d863      	bhi.n	800f022 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ef5a:	4b40      	ldr	r3, [pc, #256]	; (800f05c <pvPortMalloc+0x17c>)
 800ef5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ef5e:	4b3f      	ldr	r3, [pc, #252]	; (800f05c <pvPortMalloc+0x17c>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef64:	e004      	b.n	800ef70 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ef66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ef6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef72:	685b      	ldr	r3, [r3, #4]
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d903      	bls.n	800ef82 <pvPortMalloc+0xa2>
 800ef7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d1f1      	bne.n	800ef66 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ef82:	4b33      	ldr	r3, [pc, #204]	; (800f050 <pvPortMalloc+0x170>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d04a      	beq.n	800f022 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ef8c:	6a3b      	ldr	r3, [r7, #32]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	2208      	movs	r2, #8
 800ef92:	4413      	add	r3, r2
 800ef94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ef96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef98:	681a      	ldr	r2, [r3, #0]
 800ef9a:	6a3b      	ldr	r3, [r7, #32]
 800ef9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ef9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa0:	685a      	ldr	r2, [r3, #4]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	1ad2      	subs	r2, r2, r3
 800efa6:	2308      	movs	r3, #8
 800efa8:	005b      	lsls	r3, r3, #1
 800efaa:	429a      	cmp	r2, r3
 800efac:	d91e      	bls.n	800efec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800efae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	4413      	add	r3, r2
 800efb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800efb6:	69bb      	ldr	r3, [r7, #24]
 800efb8:	f003 0307 	and.w	r3, r3, #7
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d009      	beq.n	800efd4 <pvPortMalloc+0xf4>
 800efc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc4:	f383 8811 	msr	BASEPRI, r3
 800efc8:	f3bf 8f6f 	isb	sy
 800efcc:	f3bf 8f4f 	dsb	sy
 800efd0:	613b      	str	r3, [r7, #16]
 800efd2:	e7fe      	b.n	800efd2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd6:	685a      	ldr	r2, [r3, #4]
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	1ad2      	subs	r2, r2, r3
 800efdc:	69bb      	ldr	r3, [r7, #24]
 800efde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800efe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800efe6:	69b8      	ldr	r0, [r7, #24]
 800efe8:	f000 f8f6 	bl	800f1d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800efec:	4b1a      	ldr	r3, [pc, #104]	; (800f058 <pvPortMalloc+0x178>)
 800efee:	681a      	ldr	r2, [r3, #0]
 800eff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	1ad3      	subs	r3, r2, r3
 800eff6:	4a18      	ldr	r2, [pc, #96]	; (800f058 <pvPortMalloc+0x178>)
 800eff8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800effa:	4b17      	ldr	r3, [pc, #92]	; (800f058 <pvPortMalloc+0x178>)
 800effc:	681a      	ldr	r2, [r3, #0]
 800effe:	4b18      	ldr	r3, [pc, #96]	; (800f060 <pvPortMalloc+0x180>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	429a      	cmp	r2, r3
 800f004:	d203      	bcs.n	800f00e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f006:	4b14      	ldr	r3, [pc, #80]	; (800f058 <pvPortMalloc+0x178>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	4a15      	ldr	r2, [pc, #84]	; (800f060 <pvPortMalloc+0x180>)
 800f00c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f010:	685a      	ldr	r2, [r3, #4]
 800f012:	4b10      	ldr	r3, [pc, #64]	; (800f054 <pvPortMalloc+0x174>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	431a      	orrs	r2, r3
 800f018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01e:	2200      	movs	r2, #0
 800f020:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f022:	f7fe fa17 	bl	800d454 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f026:	69fb      	ldr	r3, [r7, #28]
 800f028:	f003 0307 	and.w	r3, r3, #7
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d009      	beq.n	800f044 <pvPortMalloc+0x164>
 800f030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f034:	f383 8811 	msr	BASEPRI, r3
 800f038:	f3bf 8f6f 	isb	sy
 800f03c:	f3bf 8f4f 	dsb	sy
 800f040:	60fb      	str	r3, [r7, #12]
 800f042:	e7fe      	b.n	800f042 <pvPortMalloc+0x162>
	return pvReturn;
 800f044:	69fb      	ldr	r3, [r7, #28]
}
 800f046:	4618      	mov	r0, r3
 800f048:	3728      	adds	r7, #40	; 0x28
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	200068cc 	.word	0x200068cc
 800f054:	200068d8 	.word	0x200068d8
 800f058:	200068d0 	.word	0x200068d0
 800f05c:	200068c4 	.word	0x200068c4
 800f060:	200068d4 	.word	0x200068d4

0800f064 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b086      	sub	sp, #24
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d046      	beq.n	800f104 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f076:	2308      	movs	r3, #8
 800f078:	425b      	negs	r3, r3
 800f07a:	697a      	ldr	r2, [r7, #20]
 800f07c:	4413      	add	r3, r2
 800f07e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	685a      	ldr	r2, [r3, #4]
 800f088:	4b20      	ldr	r3, [pc, #128]	; (800f10c <vPortFree+0xa8>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	4013      	ands	r3, r2
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d109      	bne.n	800f0a6 <vPortFree+0x42>
 800f092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f096:	f383 8811 	msr	BASEPRI, r3
 800f09a:	f3bf 8f6f 	isb	sy
 800f09e:	f3bf 8f4f 	dsb	sy
 800f0a2:	60fb      	str	r3, [r7, #12]
 800f0a4:	e7fe      	b.n	800f0a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d009      	beq.n	800f0c2 <vPortFree+0x5e>
 800f0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0b2:	f383 8811 	msr	BASEPRI, r3
 800f0b6:	f3bf 8f6f 	isb	sy
 800f0ba:	f3bf 8f4f 	dsb	sy
 800f0be:	60bb      	str	r3, [r7, #8]
 800f0c0:	e7fe      	b.n	800f0c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	685a      	ldr	r2, [r3, #4]
 800f0c6:	4b11      	ldr	r3, [pc, #68]	; (800f10c <vPortFree+0xa8>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	4013      	ands	r3, r2
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d019      	beq.n	800f104 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f0d0:	693b      	ldr	r3, [r7, #16]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d115      	bne.n	800f104 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	685a      	ldr	r2, [r3, #4]
 800f0dc:	4b0b      	ldr	r3, [pc, #44]	; (800f10c <vPortFree+0xa8>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	43db      	mvns	r3, r3
 800f0e2:	401a      	ands	r2, r3
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f0e8:	f7fe f96e 	bl	800d3c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	685a      	ldr	r2, [r3, #4]
 800f0f0:	4b07      	ldr	r3, [pc, #28]	; (800f110 <vPortFree+0xac>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4413      	add	r3, r2
 800f0f6:	4a06      	ldr	r2, [pc, #24]	; (800f110 <vPortFree+0xac>)
 800f0f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f0fa:	6938      	ldr	r0, [r7, #16]
 800f0fc:	f000 f86c 	bl	800f1d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f100:	f7fe f9a8 	bl	800d454 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f104:	bf00      	nop
 800f106:	3718      	adds	r7, #24
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}
 800f10c:	200068d8 	.word	0x200068d8
 800f110:	200068d0 	.word	0x200068d0

0800f114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f114:	b480      	push	{r7}
 800f116:	b085      	sub	sp, #20
 800f118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f11a:	f643 2398 	movw	r3, #15000	; 0x3a98
 800f11e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f120:	4b27      	ldr	r3, [pc, #156]	; (800f1c0 <prvHeapInit+0xac>)
 800f122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f003 0307 	and.w	r3, r3, #7
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d00c      	beq.n	800f148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	3307      	adds	r3, #7
 800f132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f023 0307 	bic.w	r3, r3, #7
 800f13a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f13c:	68ba      	ldr	r2, [r7, #8]
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	1ad3      	subs	r3, r2, r3
 800f142:	4a1f      	ldr	r2, [pc, #124]	; (800f1c0 <prvHeapInit+0xac>)
 800f144:	4413      	add	r3, r2
 800f146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f14c:	4a1d      	ldr	r2, [pc, #116]	; (800f1c4 <prvHeapInit+0xb0>)
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f152:	4b1c      	ldr	r3, [pc, #112]	; (800f1c4 <prvHeapInit+0xb0>)
 800f154:	2200      	movs	r2, #0
 800f156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	68ba      	ldr	r2, [r7, #8]
 800f15c:	4413      	add	r3, r2
 800f15e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f160:	2208      	movs	r2, #8
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	1a9b      	subs	r3, r3, r2
 800f166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f023 0307 	bic.w	r3, r3, #7
 800f16e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	4a15      	ldr	r2, [pc, #84]	; (800f1c8 <prvHeapInit+0xb4>)
 800f174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f176:	4b14      	ldr	r3, [pc, #80]	; (800f1c8 <prvHeapInit+0xb4>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	2200      	movs	r2, #0
 800f17c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f17e:	4b12      	ldr	r3, [pc, #72]	; (800f1c8 <prvHeapInit+0xb4>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	2200      	movs	r2, #0
 800f184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	68fa      	ldr	r2, [r7, #12]
 800f18e:	1ad2      	subs	r2, r2, r3
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f194:	4b0c      	ldr	r3, [pc, #48]	; (800f1c8 <prvHeapInit+0xb4>)
 800f196:	681a      	ldr	r2, [r3, #0]
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	4a0a      	ldr	r2, [pc, #40]	; (800f1cc <prvHeapInit+0xb8>)
 800f1a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	685b      	ldr	r3, [r3, #4]
 800f1a8:	4a09      	ldr	r2, [pc, #36]	; (800f1d0 <prvHeapInit+0xbc>)
 800f1aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f1ac:	4b09      	ldr	r3, [pc, #36]	; (800f1d4 <prvHeapInit+0xc0>)
 800f1ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f1b2:	601a      	str	r2, [r3, #0]
}
 800f1b4:	bf00      	nop
 800f1b6:	3714      	adds	r7, #20
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1be:	4770      	bx	lr
 800f1c0:	20002e2c 	.word	0x20002e2c
 800f1c4:	200068c4 	.word	0x200068c4
 800f1c8:	200068cc 	.word	0x200068cc
 800f1cc:	200068d4 	.word	0x200068d4
 800f1d0:	200068d0 	.word	0x200068d0
 800f1d4:	200068d8 	.word	0x200068d8

0800f1d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b085      	sub	sp, #20
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f1e0:	4b28      	ldr	r3, [pc, #160]	; (800f284 <prvInsertBlockIntoFreeList+0xac>)
 800f1e2:	60fb      	str	r3, [r7, #12]
 800f1e4:	e002      	b.n	800f1ec <prvInsertBlockIntoFreeList+0x14>
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	60fb      	str	r3, [r7, #12]
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	687a      	ldr	r2, [r7, #4]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d8f7      	bhi.n	800f1e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	685b      	ldr	r3, [r3, #4]
 800f1fe:	68ba      	ldr	r2, [r7, #8]
 800f200:	4413      	add	r3, r2
 800f202:	687a      	ldr	r2, [r7, #4]
 800f204:	429a      	cmp	r2, r3
 800f206:	d108      	bne.n	800f21a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	685a      	ldr	r2, [r3, #4]
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	441a      	add	r2, r3
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	685b      	ldr	r3, [r3, #4]
 800f222:	68ba      	ldr	r2, [r7, #8]
 800f224:	441a      	add	r2, r3
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d118      	bne.n	800f260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	4b15      	ldr	r3, [pc, #84]	; (800f288 <prvInsertBlockIntoFreeList+0xb0>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	429a      	cmp	r2, r3
 800f238:	d00d      	beq.n	800f256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	685a      	ldr	r2, [r3, #4]
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	441a      	add	r2, r3
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	681a      	ldr	r2, [r3, #0]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	601a      	str	r2, [r3, #0]
 800f254:	e008      	b.n	800f268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f256:	4b0c      	ldr	r3, [pc, #48]	; (800f288 <prvInsertBlockIntoFreeList+0xb0>)
 800f258:	681a      	ldr	r2, [r3, #0]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	601a      	str	r2, [r3, #0]
 800f25e:	e003      	b.n	800f268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	681a      	ldr	r2, [r3, #0]
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f268:	68fa      	ldr	r2, [r7, #12]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d002      	beq.n	800f276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	687a      	ldr	r2, [r7, #4]
 800f274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f276:	bf00      	nop
 800f278:	3714      	adds	r7, #20
 800f27a:	46bd      	mov	sp, r7
 800f27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f280:	4770      	bx	lr
 800f282:	bf00      	nop
 800f284:	200068c4 	.word	0x200068c4
 800f288:	200068cc 	.word	0x200068cc

0800f28c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800f28c:	b480      	push	{r7}
 800f28e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800f290:	4b03      	ldr	r3, [pc, #12]	; (800f2a0 <LL_FLASH_GetUDN+0x14>)
 800f292:	681b      	ldr	r3, [r3, #0]
}
 800f294:	4618      	mov	r0, r3
 800f296:	46bd      	mov	sp, r7
 800f298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29c:	4770      	bx	lr
 800f29e:	bf00      	nop
 800f2a0:	1fff7580 	.word	0x1fff7580

0800f2a4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800f2a8:	4b03      	ldr	r3, [pc, #12]	; (800f2b8 <LL_FLASH_GetDeviceID+0x14>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	b2db      	uxtb	r3, r3
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b6:	4770      	bx	lr
 800f2b8:	1fff7584 	.word	0x1fff7584

0800f2bc <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800f2c0:	4b03      	ldr	r3, [pc, #12]	; (800f2d0 <LL_FLASH_GetSTCompanyID+0x14>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	0a1b      	lsrs	r3, r3, #8
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ce:	4770      	bx	lr
 800f2d0:	1fff7584 	.word	0x1fff7584

0800f2d4 <APP_BLE_Init_Dyn_1>:
void LinkConfiguration(void * argument);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init_Dyn_1( void )
{
 800f2d4:	b5b0      	push	{r4, r5, r7, lr}
 800f2d6:	b08c      	sub	sp, #48	; 0x30
 800f2d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800f2da:	4b2b      	ldr	r3, [pc, #172]	; (800f388 <APP_BLE_Init_Dyn_1+0xb4>)
 800f2dc:	463c      	mov	r4, r7
 800f2de:	461d      	mov	r5, r3
 800f2e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f2e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f2e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f2ec:	c407      	stmia	r4!, {r0, r1, r2}
 800f2ee:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800f2f0:	f000 faa4 	bl	800f83c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800f2f4:	2101      	movs	r1, #1
 800f2f6:	2004      	movs	r0, #4
 800f2f8:	f002 fac6 	bl	8011888 <UTIL_LPM_SetOffMode>
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  HciUserEvtProcessId = osThreadNew(HciUserEvtProcess, NULL, &HciUserEvtProcess_attr);
 800f2fc:	4a23      	ldr	r2, [pc, #140]	; (800f38c <APP_BLE_Init_Dyn_1+0xb8>)
 800f2fe:	2100      	movs	r1, #0
 800f300:	4823      	ldr	r0, [pc, #140]	; (800f390 <APP_BLE_Init_Dyn_1+0xbc>)
 800f302:	f7fc f833 	bl	800b36c <osThreadNew>
 800f306:	4602      	mov	r2, r0
 800f308:	4b22      	ldr	r3, [pc, #136]	; (800f394 <APP_BLE_Init_Dyn_1+0xc0>)
 800f30a:	601a      	str	r2, [r3, #0]
//  SHCI_C2_BLE_Init( &ble_init_cmd_packet );

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800f30c:	463b      	mov	r3, r7
 800f30e:	4618      	mov	r0, r3
 800f310:	f7fa f818 	bl	8009344 <SHCI_C2_BLE_Init>
 800f314:	4603      	mov	r3, r0
 800f316:	2b00      	cmp	r3, #0
 800f318:	d001      	beq.n	800f31e <APP_BLE_Init_Dyn_1+0x4a>
  {
    Error_Handler();
 800f31a:	f7f3 f89b 	bl	8002454 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800f31e:	f000 faa3 	bl	800f868 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800f322:	f7f9 ff07 	bl	8009134 <SVCCTL_Init>

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
  index_con_int = 0;
 800f326:	4b1c      	ldr	r3, [pc, #112]	; (800f398 <APP_BLE_Init_Dyn_1+0xc4>)
 800f328:	2200      	movs	r2, #0
 800f32a:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 800f32c:	4b1b      	ldr	r3, [pc, #108]	; (800f39c <APP_BLE_Init_Dyn_1+0xc8>)
 800f32e:	2201      	movs	r2, #1
 800f330:	701a      	strb	r2, [r3, #0]
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);

  /**
   * From here, all initialization are BLE application specific
   */
  AdvUpdateProcessId = osThreadNew(AdvUpdateProcess, NULL, &AdvUpdateProcess_attr);
 800f332:	4a1b      	ldr	r2, [pc, #108]	; (800f3a0 <APP_BLE_Init_Dyn_1+0xcc>)
 800f334:	2100      	movs	r1, #0
 800f336:	481b      	ldr	r0, [pc, #108]	; (800f3a4 <APP_BLE_Init_Dyn_1+0xd0>)
 800f338:	f7fc f818 	bl	800b36c <osThreadNew>
 800f33c:	4602      	mov	r2, r0
 800f33e:	4b1a      	ldr	r3, [pc, #104]	; (800f3a8 <APP_BLE_Init_Dyn_1+0xd4>)
 800f340:	601a      	str	r2, [r3, #0]
  //ST SW Engineers converted the below statement to a FreeRTOS-friendly function: Adv_Request()
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_START_ADV_ID, UTIL_SEQ_RFU, Adv_Request);
  /**
    * Create timer for Data Throughput process (write data)
    */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(TimerDataThroughputWrite_Id), hw_ts_SingleShot, DataThroughput_proc);
 800f342:	4b1a      	ldr	r3, [pc, #104]	; (800f3ac <APP_BLE_Init_Dyn_1+0xd8>)
 800f344:	2200      	movs	r2, #0
 800f346:	491a      	ldr	r1, [pc, #104]	; (800f3b0 <APP_BLE_Init_Dyn_1+0xdc>)
 800f348:	2000      	movs	r0, #0
 800f34a:	f7f2 fc93 	bl	8001c74 <HW_TS_Create>
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_UPDATE_ID, UTIL_SEQ_RFU, Connection_Update);
#endif


  LinkConfigProcessId= osThreadNew(LinkConfiguration, NULL, &LinkConfigProcess_attr);
 800f34e:	4a19      	ldr	r2, [pc, #100]	; (800f3b4 <APP_BLE_Init_Dyn_1+0xe0>)
 800f350:	2100      	movs	r1, #0
 800f352:	4819      	ldr	r0, [pc, #100]	; (800f3b8 <APP_BLE_Init_Dyn_1+0xe4>)
 800f354:	f7fc f80a 	bl	800b36c <osThreadNew>
 800f358:	4602      	mov	r2, r0
 800f35a:	4b18      	ldr	r3, [pc, #96]	; (800f3bc <APP_BLE_Init_Dyn_1+0xe8>)
 800f35c:	601a      	str	r2, [r3, #0]

  BleApplicationContext.DeviceServerFound = NO_DEVICE_FOUND;
 800f35e:	4b18      	ldr	r3, [pc, #96]	; (800f3c0 <APP_BLE_Init_Dyn_1+0xec>)
 800f360:	2200      	movs	r2, #0
 800f362:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

  /**
   * Clear DataBase
   */
  aci_gap_clear_security_db();
 800f366:	f7f8 fd61 	bl	8007e2c <aci_gap_clear_security_db>
     * Initialize Data Client (this shouldn''t ideally happen but some of ST's example code for server
     * relies on functions within this function)
     * todo: rip out what's needed and fold it into DTS_App_Init()
     */

  DTC_App_Init();
 800f36a:	f001 f8cf 	bl	801050c <DTC_App_Init>

  /**
   * Initialize Data Server (GATT SERVER)
   */

  DTS_App_Init();
 800f36e:	f001 fbef 	bl	8010b50 <DTS_App_Init>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
#endif
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800f372:	4b14      	ldr	r3, [pc, #80]	; (800f3c4 <APP_BLE_Init_Dyn_1+0xf0>)
 800f374:	2200      	movs	r2, #0
 800f376:	4914      	ldr	r1, [pc, #80]	; (800f3c8 <APP_BLE_Init_Dyn_1+0xf4>)
 800f378:	2000      	movs	r0, #0
 800f37a:	f7f2 fc7b 	bl	8001c74 <HW_TS_Create>
  return;
 800f37e:	bf00      	nop
}
 800f380:	3730      	adds	r7, #48	; 0x30
 800f382:	46bd      	mov	sp, r7
 800f384:	bdb0      	pop	{r4, r5, r7, pc}
 800f386:	bf00      	nop
 800f388:	08013130 	.word	0x08013130
 800f38c:	08014108 	.word	0x08014108
 800f390:	0800fc57 	.word	0x0800fc57
 800f394:	20006f90 	.word	0x20006f90
 800f398:	20006fa5 	.word	0x20006fa5
 800f39c:	20006fa4 	.word	0x20006fa4
 800f3a0:	080140e4 	.word	0x080140e4
 800f3a4:	0800fc2f 	.word	0x0800fc2f
 800f3a8:	20006fc4 	.word	0x20006fc4
 800f3ac:	0800fc71 	.word	0x0800fc71
 800f3b0:	20006fb4 	.word	0x20006fb4
 800f3b4:	0801412c 	.word	0x0801412c
 800f3b8:	0800fc89 	.word	0x0800fc89
 800f3bc:	20006f98 	.word	0x20006f98
 800f3c0:	20000198 	.word	0x20000198
 800f3c4:	0800fcc1 	.word	0x0800fcc1
 800f3c8:	2000022a 	.word	0x2000022a

0800f3cc <APP_BLE_Init_Dyn_2>:

void APP_BLE_Init_Dyn_2( void ) {
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	af00      	add	r7, sp, #0
  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL; //TODO: the heartbeat example uses: AD_TYPE_16_BIT_SERV_UUID
 800f3d0:	4b09      	ldr	r3, [pc, #36]	; (800f3f8 <APP_BLE_Init_Dyn_2+0x2c>)
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800f3d8:	4b07      	ldr	r3, [pc, #28]	; (800f3f8 <APP_BLE_Init_Dyn_2+0x2c>)
 800f3da:	2200      	movs	r2, #0
 800f3dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800f3e0:	4b06      	ldr	r3, [pc, #24]	; (800f3fc <APP_BLE_Init_Dyn_2+0x30>)
 800f3e2:	2280      	movs	r2, #128	; 0x80
 800f3e4:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800f3e6:	4b06      	ldr	r3, [pc, #24]	; (800f400 <APP_BLE_Init_Dyn_2+0x34>)
 800f3e8:	22a0      	movs	r2, #160	; 0xa0
 800f3ea:	801a      	strh	r2, [r3, #0]
   * Start to Advertise to be connected by P2P Client
   */
#ifndef DYNAMIC_MODE
   Adv_Request(APP_BLE_FAST_ADV);
#else
   Adv_Request(APP_BLE_LP_ADV);
 800f3ec:	2002      	movs	r0, #2
 800f3ee:	f000 faf7 	bl	800f9e0 <Adv_Request>
#endif
/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 800f3f2:	bf00      	nop
}
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	20000198 	.word	0x20000198
 800f3fc:	2000022c 	.word	0x2000022c
 800f400:	2000022e 	.word	0x2000022e

0800f404 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800f404:	b590      	push	{r4, r7, lr}
 800f406:	b091      	sub	sp, #68	; 0x44
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  hci_le_connection_update_complete_event_rp0 *connection_update_complete;
  uint8_t event_type, event_data_size;
  int k = 0;
 800f40c:	2300      	movs	r3, #0
 800f40e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t adtype, adlength;
  uint8_t *adv_report_data;
  float Connection_Interval;
  float Supervision_Timeout;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	3301      	adds	r3, #1
 800f414:	63bb      	str	r3, [r7, #56]	; 0x38

  switch (event_pckt->evt)
 800f416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	2b3e      	cmp	r3, #62	; 0x3e
 800f41c:	d028      	beq.n	800f470 <SVCCTL_App_Notification+0x6c>
 800f41e:	2bff      	cmp	r3, #255	; 0xff
 800f420:	f000 8188 	beq.w	800f734 <SVCCTL_App_Notification+0x330>
 800f424:	2b05      	cmp	r3, #5
 800f426:	d000      	beq.n	800f42a <SVCCTL_App_Notification+0x26>

        default:
        /* USER CODE BEGIN ECODE_DEFAULT*/

        /* USER CODE END ECODE_DEFAULT*/
          break;
 800f428:	e1ed      	b.n	800f806 <SVCCTL_App_Notification+0x402>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800f42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f42c:	3302      	adds	r3, #2
 800f42e:	60bb      	str	r3, [r7, #8]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f436:	b29a      	uxth	r2, r3
 800f438:	4baf      	ldr	r3, [pc, #700]	; (800f6f8 <SVCCTL_App_Notification+0x2f4>)
 800f43a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d109      	bne.n	800f454 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800f440:	4bad      	ldr	r3, [pc, #692]	; (800f6f8 <SVCCTL_App_Notification+0x2f4>)
 800f442:	2200      	movs	r2, #0
 800f444:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f446:	4bac      	ldr	r3, [pc, #688]	; (800f6f8 <SVCCTL_App_Notification+0x2f4>)
 800f448:	2200      	movs	r2, #0
 800f44a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 800f44e:	48ab      	ldr	r0, [pc, #684]	; (800f6fc <SVCCTL_App_Notification+0x2f8>)
 800f450:	f002 fc2a 	bl	8011ca8 <puts>
   Adv_Request(APP_BLE_LP_ADV);
 800f454:	2002      	movs	r0, #2
 800f456:	f000 fac3 	bl	800f9e0 <Adv_Request>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800f45a:	4ba9      	ldr	r3, [pc, #676]	; (800f700 <SVCCTL_App_Notification+0x2fc>)
 800f45c:	2201      	movs	r2, #1
 800f45e:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800f460:	4ba5      	ldr	r3, [pc, #660]	; (800f6f8 <SVCCTL_App_Notification+0x2f4>)
 800f462:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800f464:	4ba6      	ldr	r3, [pc, #664]	; (800f700 <SVCCTL_App_Notification+0x2fc>)
 800f466:	805a      	strh	r2, [r3, #2]
        P2PS_APP_Notification(&handleNotification);
 800f468:	48a5      	ldr	r0, [pc, #660]	; (800f700 <SVCCTL_App_Notification+0x2fc>)
 800f46a:	f001 fed9 	bl	8011220 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 800f46e:	e1ca      	b.n	800f806 <SVCCTL_App_Notification+0x402>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800f470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f472:	3302      	adds	r3, #2
 800f474:	62fb      	str	r3, [r7, #44]	; 0x2c
      switch (meta_evt->subevent)
 800f476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	3b01      	subs	r3, #1
 800f47c:	2b0b      	cmp	r3, #11
 800f47e:	f200 8136 	bhi.w	800f6ee <SVCCTL_App_Notification+0x2ea>
 800f482:	a201      	add	r2, pc, #4	; (adr r2, 800f488 <SVCCTL_App_Notification+0x84>)
 800f484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f488:	0800f575 	.word	0x0800f575
 800f48c:	0800f607 	.word	0x0800f607
 800f490:	0800f4dd 	.word	0x0800f4dd
 800f494:	0800f6ef 	.word	0x0800f6ef
 800f498:	0800f6ef 	.word	0x0800f6ef
 800f49c:	0800f6ef 	.word	0x0800f6ef
 800f4a0:	0800f6ef 	.word	0x0800f6ef
 800f4a4:	0800f6ef 	.word	0x0800f6ef
 800f4a8:	0800f6ef 	.word	0x0800f6ef
 800f4ac:	0800f6ef 	.word	0x0800f6ef
 800f4b0:	0800f6ef 	.word	0x0800f6ef
 800f4b4:	0800f4b9 	.word	0x0800f4b9
        evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800f4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ba:	3301      	adds	r3, #1
 800f4bc:	62bb      	str	r3, [r7, #40]	; 0x28
        if (evt_le_phy_update_complete->Status == 0)
 800f4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d103      	bne.n	800f4ce <SVCCTL_App_Notification+0xca>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, success \n");
 800f4c6:	488f      	ldr	r0, [pc, #572]	; (800f704 <SVCCTL_App_Notification+0x300>)
 800f4c8:	f002 fbee 	bl	8011ca8 <puts>
        break;
 800f4cc:	e112      	b.n	800f6f4 <SVCCTL_App_Notification+0x2f0>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, failure %d \n", evt_le_phy_update_complete->Status);
 800f4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	4619      	mov	r1, r3
 800f4d4:	488c      	ldr	r0, [pc, #560]	; (800f708 <SVCCTL_App_Notification+0x304>)
 800f4d6:	f002 fb73 	bl	8011bc0 <iprintf>
        break;
 800f4da:	e10b      	b.n	800f6f4 <SVCCTL_App_Notification+0x2f0>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 800f4dc:	488b      	ldr	r0, [pc, #556]	; (800f70c <SVCCTL_App_Notification+0x308>)
 800f4de:	f002 fbe3 	bl	8011ca8 <puts>
          mutex = 1;
 800f4e2:	4b8b      	ldr	r3, [pc, #556]	; (800f710 <SVCCTL_App_Notification+0x30c>)
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	701a      	strb	r2, [r3, #0]
          connection_update_complete = (hci_le_connection_update_complete_event_rp0*)meta_evt->data;
 800f4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	627b      	str	r3, [r7, #36]	; 0x24
          APP_DBG_MSG("EVT_LE_CONN_UPDATE_COMPLETE \n");
 800f4ee:	4889      	ldr	r0, [pc, #548]	; (800f714 <SVCCTL_App_Notification+0x310>)
 800f4f0:	f002 fbda 	bl	8011ca8 <puts>
          Connection_Interval = connection_update_complete->Conn_Interval * 1.25;
 800f4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f4fa:	b29b      	uxth	r3, r3
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7f0 fff9 	bl	80004f4 <__aeabi_i2d>
 800f502:	f04f 0200 	mov.w	r2, #0
 800f506:	4b84      	ldr	r3, [pc, #528]	; (800f718 <SVCCTL_App_Notification+0x314>)
 800f508:	f7f1 f85e 	bl	80005c8 <__aeabi_dmul>
 800f50c:	4603      	mov	r3, r0
 800f50e:	460c      	mov	r4, r1
 800f510:	4618      	mov	r0, r3
 800f512:	4621      	mov	r1, r4
 800f514:	f7f1 fa6a 	bl	80009ec <__aeabi_d2f>
 800f518:	4603      	mov	r3, r0
 800f51a:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG("interval= %.2f ms \n",Connection_Interval);
 800f51c:	6a38      	ldr	r0, [r7, #32]
 800f51e:	f7f0 fffb 	bl	8000518 <__aeabi_f2d>
 800f522:	4603      	mov	r3, r0
 800f524:	460c      	mov	r4, r1
 800f526:	461a      	mov	r2, r3
 800f528:	4623      	mov	r3, r4
 800f52a:	487c      	ldr	r0, [pc, #496]	; (800f71c <SVCCTL_App_Notification+0x318>)
 800f52c:	f002 fb48 	bl	8011bc0 <iprintf>
          APP_DBG_MSG("latency= 0x%x \n",connection_update_complete->Conn_Latency);
 800f530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f532:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800f536:	b29b      	uxth	r3, r3
 800f538:	4619      	mov	r1, r3
 800f53a:	4879      	ldr	r0, [pc, #484]	; (800f720 <SVCCTL_App_Notification+0x31c>)
 800f53c:	f002 fb40 	bl	8011bc0 <iprintf>
          Supervision_Timeout = connection_update_complete->Supervision_Timeout * 10;
 800f540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f542:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f546:	b29b      	uxth	r3, r3
 800f548:	461a      	mov	r2, r3
 800f54a:	4613      	mov	r3, r2
 800f54c:	009b      	lsls	r3, r3, #2
 800f54e:	4413      	add	r3, r2
 800f550:	005b      	lsls	r3, r3, #1
 800f552:	ee07 3a90 	vmov	s15, r3
 800f556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f55a:	edc7 7a07 	vstr	s15, [r7, #28]
          APP_DBG_MSG("supervision_timeout= %.2f ms \n",Supervision_Timeout);
 800f55e:	69f8      	ldr	r0, [r7, #28]
 800f560:	f7f0 ffda 	bl	8000518 <__aeabi_f2d>
 800f564:	4603      	mov	r3, r0
 800f566:	460c      	mov	r4, r1
 800f568:	461a      	mov	r2, r3
 800f56a:	4623      	mov	r3, r4
 800f56c:	486d      	ldr	r0, [pc, #436]	; (800f724 <SVCCTL_App_Notification+0x320>)
 800f56e:	f002 fb27 	bl	8011bc0 <iprintf>
          break;
 800f572:	e0bf      	b.n	800f6f4 <SVCCTL_App_Notification+0x2f0>
        	  mutex = 1;
 800f574:	4b66      	ldr	r3, [pc, #408]	; (800f710 <SVCCTL_App_Notification+0x30c>)
 800f576:	2201      	movs	r2, #1
 800f578:	701a      	strb	r2, [r3, #0]
			   connection_update_complete = (hci_le_connection_update_complete_event_rp0*)meta_evt->data;
 800f57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f57c:	3301      	adds	r3, #1
 800f57e:	627b      	str	r3, [r7, #36]	; 0x24
			   APP_DBG_MSG("EVT_LE_CONN_UPDATE_COMPLETE \n");
 800f580:	4864      	ldr	r0, [pc, #400]	; (800f714 <SVCCTL_App_Notification+0x310>)
 800f582:	f002 fb91 	bl	8011ca8 <puts>
			   Connection_Interval = connection_update_complete->Conn_Interval * 1.25;
 800f586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f588:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f58c:	b29b      	uxth	r3, r3
 800f58e:	4618      	mov	r0, r3
 800f590:	f7f0 ffb0 	bl	80004f4 <__aeabi_i2d>
 800f594:	f04f 0200 	mov.w	r2, #0
 800f598:	4b5f      	ldr	r3, [pc, #380]	; (800f718 <SVCCTL_App_Notification+0x314>)
 800f59a:	f7f1 f815 	bl	80005c8 <__aeabi_dmul>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	460c      	mov	r4, r1
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	4621      	mov	r1, r4
 800f5a6:	f7f1 fa21 	bl	80009ec <__aeabi_d2f>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	623b      	str	r3, [r7, #32]
			   APP_DBG_MSG("interval= %.2f ms \n",Connection_Interval);
 800f5ae:	6a38      	ldr	r0, [r7, #32]
 800f5b0:	f7f0 ffb2 	bl	8000518 <__aeabi_f2d>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	460c      	mov	r4, r1
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	4623      	mov	r3, r4
 800f5bc:	4857      	ldr	r0, [pc, #348]	; (800f71c <SVCCTL_App_Notification+0x318>)
 800f5be:	f002 faff 	bl	8011bc0 <iprintf>
			   APP_DBG_MSG("latency= 0x%x \n",connection_update_complete->Conn_Latency);
 800f5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	4619      	mov	r1, r3
 800f5cc:	4854      	ldr	r0, [pc, #336]	; (800f720 <SVCCTL_App_Notification+0x31c>)
 800f5ce:	f002 faf7 	bl	8011bc0 <iprintf>
			   Supervision_Timeout = connection_update_complete->Supervision_Timeout * 10;
 800f5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f5d8:	b29b      	uxth	r3, r3
 800f5da:	461a      	mov	r2, r3
 800f5dc:	4613      	mov	r3, r2
 800f5de:	009b      	lsls	r3, r3, #2
 800f5e0:	4413      	add	r3, r2
 800f5e2:	005b      	lsls	r3, r3, #1
 800f5e4:	ee07 3a90 	vmov	s15, r3
 800f5e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f5ec:	edc7 7a07 	vstr	s15, [r7, #28]
			   APP_DBG_MSG("supervision_timeout= %.2f ms \n",Supervision_Timeout);
 800f5f0:	69f8      	ldr	r0, [r7, #28]
 800f5f2:	f7f0 ff91 	bl	8000518 <__aeabi_f2d>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	460c      	mov	r4, r1
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	4623      	mov	r3, r4
 800f5fe:	4849      	ldr	r0, [pc, #292]	; (800f724 <SVCCTL_App_Notification+0x320>)
 800f600:	f002 fade 	bl	8011bc0 <iprintf>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800f604:	e076      	b.n	800f6f4 <SVCCTL_App_Notification+0x2f0>
          le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 800f606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f608:	3301      	adds	r3, #1
 800f60a:	61bb      	str	r3, [r7, #24]
          event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 800f60c:	69bb      	ldr	r3, [r7, #24]
 800f60e:	785b      	ldrb	r3, [r3, #1]
 800f610:	75fb      	strb	r3, [r7, #23]
          event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 800f612:	69bb      	ldr	r3, [r7, #24]
 800f614:	7a5b      	ldrb	r3, [r3, #9]
 800f616:	75bb      	strb	r3, [r7, #22]
          adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 800f618:	69bb      	ldr	r3, [r7, #24]
 800f61a:	3309      	adds	r3, #9
 800f61c:	3301      	adds	r3, #1
 800f61e:	613b      	str	r3, [r7, #16]
          k = 0;
 800f620:	2300      	movs	r3, #0
 800f622:	63fb      	str	r3, [r7, #60]	; 0x3c
          if (event_type == ADV_IND)
 800f624:	7dfb      	ldrb	r3, [r7, #23]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d163      	bne.n	800f6f2 <SVCCTL_App_Notification+0x2ee>
            while(k < event_data_size)
 800f62a:	e05b      	b.n	800f6e4 <SVCCTL_App_Notification+0x2e0>
              adlength = adv_report_data[k];
 800f62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f62e:	693a      	ldr	r2, [r7, #16]
 800f630:	4413      	add	r3, r2
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	73fb      	strb	r3, [r7, #15]
              adtype = adv_report_data[k + 1];
 800f636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f638:	3301      	adds	r3, #1
 800f63a:	693a      	ldr	r2, [r7, #16]
 800f63c:	4413      	add	r3, r2
 800f63e:	781b      	ldrb	r3, [r3, #0]
 800f640:	73bb      	strb	r3, [r7, #14]
              switch (adtype)
 800f642:	7bbb      	ldrb	r3, [r7, #14]
 800f644:	2b0a      	cmp	r3, #10
 800f646:	d043      	beq.n	800f6d0 <SVCCTL_App_Notification+0x2cc>
 800f648:	2b0a      	cmp	r3, #10
 800f64a:	dc02      	bgt.n	800f652 <SVCCTL_App_Notification+0x24e>
 800f64c:	2b01      	cmp	r3, #1
 800f64e:	d041      	beq.n	800f6d4 <SVCCTL_App_Notification+0x2d0>
                  break;
 800f650:	e043      	b.n	800f6da <SVCCTL_App_Notification+0x2d6>
              switch (adtype)
 800f652:	2b16      	cmp	r3, #22
 800f654:	d040      	beq.n	800f6d8 <SVCCTL_App_Notification+0x2d4>
 800f656:	2bff      	cmp	r3, #255	; 0xff
 800f658:	d000      	beq.n	800f65c <SVCCTL_App_Notification+0x258>
                  break;
 800f65a:	e03e      	b.n	800f6da <SVCCTL_App_Notification+0x2d6>
                  if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 800f65c:	7bfb      	ldrb	r3, [r7, #15]
 800f65e:	2b06      	cmp	r3, #6
 800f660:	d934      	bls.n	800f6cc <SVCCTL_App_Notification+0x2c8>
 800f662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f664:	3302      	adds	r3, #2
 800f666:	693a      	ldr	r2, [r7, #16]
 800f668:	4413      	add	r3, r2
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	2b01      	cmp	r3, #1
 800f66e:	d12d      	bne.n	800f6cc <SVCCTL_App_Notification+0x2c8>
                    APP_DBG_MSG("--- ST MANUFACTURER ID --- \n");
 800f670:	482d      	ldr	r0, [pc, #180]	; (800f728 <SVCCTL_App_Notification+0x324>)
 800f672:	f002 fb19 	bl	8011ca8 <puts>
                    switch (adv_report_data[k + 3])
 800f676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f678:	3303      	adds	r3, #3
 800f67a:	693a      	ldr	r2, [r7, #16]
 800f67c:	4413      	add	r3, r2
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	2b88      	cmp	r3, #136	; 0x88
 800f682:	d000      	beq.n	800f686 <SVCCTL_App_Notification+0x282>
                        break;
 800f684:	e023      	b.n	800f6ce <SVCCTL_App_Notification+0x2ca>
                        APP_DBG_MSG("-- SERVER DETECTED -- VIA MAN ID\n");
 800f686:	4829      	ldr	r0, [pc, #164]	; (800f72c <SVCCTL_App_Notification+0x328>)
 800f688:	f002 fb0e 	bl	8011ca8 <puts>
                        BleApplicationContext.DeviceServerFound = AT_LEAST_ONE_DEVICE_FOUND;
 800f68c:	4b1a      	ldr	r3, [pc, #104]	; (800f6f8 <SVCCTL_App_Notification+0x2f4>)
 800f68e:	2201      	movs	r2, #1
 800f690:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
                        SERVER_REMOTE_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 800f694:	69bb      	ldr	r3, [r7, #24]
 800f696:	78da      	ldrb	r2, [r3, #3]
 800f698:	4b25      	ldr	r3, [pc, #148]	; (800f730 <SVCCTL_App_Notification+0x32c>)
 800f69a:	701a      	strb	r2, [r3, #0]
                        SERVER_REMOTE_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800f69c:	69bb      	ldr	r3, [r7, #24]
 800f69e:	791a      	ldrb	r2, [r3, #4]
 800f6a0:	4b23      	ldr	r3, [pc, #140]	; (800f730 <SVCCTL_App_Notification+0x32c>)
 800f6a2:	705a      	strb	r2, [r3, #1]
                        SERVER_REMOTE_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 800f6a4:	69bb      	ldr	r3, [r7, #24]
 800f6a6:	795a      	ldrb	r2, [r3, #5]
 800f6a8:	4b21      	ldr	r3, [pc, #132]	; (800f730 <SVCCTL_App_Notification+0x32c>)
 800f6aa:	709a      	strb	r2, [r3, #2]
                        SERVER_REMOTE_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 800f6ac:	69bb      	ldr	r3, [r7, #24]
 800f6ae:	799a      	ldrb	r2, [r3, #6]
 800f6b0:	4b1f      	ldr	r3, [pc, #124]	; (800f730 <SVCCTL_App_Notification+0x32c>)
 800f6b2:	70da      	strb	r2, [r3, #3]
                        SERVER_REMOTE_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 800f6b4:	69bb      	ldr	r3, [r7, #24]
 800f6b6:	79da      	ldrb	r2, [r3, #7]
 800f6b8:	4b1d      	ldr	r3, [pc, #116]	; (800f730 <SVCCTL_App_Notification+0x32c>)
 800f6ba:	711a      	strb	r2, [r3, #4]
                        SERVER_REMOTE_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 800f6bc:	69bb      	ldr	r3, [r7, #24]
 800f6be:	7a1a      	ldrb	r2, [r3, #8]
 800f6c0:	4b1b      	ldr	r3, [pc, #108]	; (800f730 <SVCCTL_App_Notification+0x32c>)
 800f6c2:	715a      	strb	r2, [r3, #5]
                        aci_gap_terminate_gap_proc(GAP_GENERAL_DISCOVERY_PROC);
 800f6c4:	2002      	movs	r0, #2
 800f6c6:	f7f8 fbd5 	bl	8007e74 <aci_gap_terminate_gap_proc>
                        break;
 800f6ca:	e000      	b.n	800f6ce <SVCCTL_App_Notification+0x2ca>
                  }
 800f6cc:	bf00      	nop
                  break;
 800f6ce:	e004      	b.n	800f6da <SVCCTL_App_Notification+0x2d6>
                  break;
 800f6d0:	bf00      	nop
 800f6d2:	e002      	b.n	800f6da <SVCCTL_App_Notification+0x2d6>
                  break;
 800f6d4:	bf00      	nop
 800f6d6:	e000      	b.n	800f6da <SVCCTL_App_Notification+0x2d6>
                  break;
 800f6d8:	bf00      	nop
              k += adlength + 1;
 800f6da:	7bfb      	ldrb	r3, [r7, #15]
 800f6dc:	3301      	adds	r3, #1
 800f6de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f6e0:	4413      	add	r3, r2
 800f6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
            while(k < event_data_size)
 800f6e4:	7dbb      	ldrb	r3, [r7, #22]
 800f6e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	db9f      	blt.n	800f62c <SVCCTL_App_Notification+0x228>
          break;
 800f6ec:	e001      	b.n	800f6f2 <SVCCTL_App_Notification+0x2ee>
          break;
 800f6ee:	bf00      	nop
 800f6f0:	e089      	b.n	800f806 <SVCCTL_App_Notification+0x402>
          break;
 800f6f2:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800f6f4:	e087      	b.n	800f806 <SVCCTL_App_Notification+0x402>
 800f6f6:	bf00      	nop
 800f6f8:	20000198 	.word	0x20000198
 800f6fc:	08013160 	.word	0x08013160
 800f700:	20006f94 	.word	0x20006f94
 800f704:	08013188 	.word	0x08013188
 800f708:	080131ac 	.word	0x080131ac
 800f70c:	080131d4 	.word	0x080131d4
 800f710:	20006fa4 	.word	0x20006fa4
 800f714:	08013200 	.word	0x08013200
 800f718:	3ff40000 	.word	0x3ff40000
 800f71c:	08013220 	.word	0x08013220
 800f720:	08013234 	.word	0x08013234
 800f724:	08013244 	.word	0x08013244
 800f728:	08013264 	.word	0x08013264
 800f72c:	08013280 	.word	0x08013280
 800f730:	20006fa8 	.word	0x20006fa8
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800f734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f736:	3302      	adds	r3, #2
 800f738:	637b      	str	r3, [r7, #52]	; 0x34
      switch (blue_evt->ecode)
 800f73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f73c:	881b      	ldrh	r3, [r3, #0]
 800f73e:	b29b      	uxth	r3, r3
 800f740:	f240 4207 	movw	r2, #1031	; 0x407
 800f744:	4293      	cmp	r3, r2
 800f746:	d03e      	beq.n	800f7c6 <SVCCTL_App_Notification+0x3c2>
 800f748:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800f74c:	da08      	bge.n	800f760 <SVCCTL_App_Notification+0x35c>
 800f74e:	f240 4201 	movw	r2, #1025	; 0x401
 800f752:	4293      	cmp	r3, r2
 800f754:	d010      	beq.n	800f778 <SVCCTL_App_Notification+0x374>
 800f756:	f240 4202 	movw	r2, #1026	; 0x402
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d010      	beq.n	800f780 <SVCCTL_App_Notification+0x37c>
      break; /* EVT_VENDOR */
 800f75e:	e051      	b.n	800f804 <SVCCTL_App_Notification+0x400>
      switch (blue_evt->ecode)
 800f760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f764:	d02b      	beq.n	800f7be <SVCCTL_App_Notification+0x3ba>
 800f766:	f640 4216 	movw	r2, #3094	; 0xc16
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d024      	beq.n	800f7b8 <SVCCTL_App_Notification+0x3b4>
 800f76e:	f240 4209 	movw	r2, #1033	; 0x409
 800f772:	4293      	cmp	r3, r2
 800f774:	d00e      	beq.n	800f794 <SVCCTL_App_Notification+0x390>
      break; /* EVT_VENDOR */
 800f776:	e045      	b.n	800f804 <SVCCTL_App_Notification+0x400>
	   APP_DBG_MSG("Pairing complete \n");
 800f778:	4825      	ldr	r0, [pc, #148]	; (800f810 <SVCCTL_App_Notification+0x40c>)
 800f77a:	f002 fa95 	bl	8011ca8 <puts>
	   break;
 800f77e:	e041      	b.n	800f804 <SVCCTL_App_Notification+0x400>
	   APP_DBG_MSG("respond to the passkey request\n");
 800f780:	4824      	ldr	r0, [pc, #144]	; (800f814 <SVCCTL_App_Notification+0x410>)
 800f782:	f002 fa91 	bl	8011ca8 <puts>
	   aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 111111);
 800f786:	4b24      	ldr	r3, [pc, #144]	; (800f818 <SVCCTL_App_Notification+0x414>)
 800f788:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f78a:	4924      	ldr	r1, [pc, #144]	; (800f81c <SVCCTL_App_Notification+0x418>)
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7f8 f9eb 	bl	8007b68 <aci_gap_pass_key_resp>
	 break;
 800f792:	e037      	b.n	800f804 <SVCCTL_App_Notification+0x400>
				   ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 800f794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f796:	3302      	adds	r3, #2
	   APP_DBG_MSG("Hex_value = %ld\n",
 800f798:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800f79c:	4619      	mov	r1, r3
 800f79e:	4820      	ldr	r0, [pc, #128]	; (800f820 <SVCCTL_App_Notification+0x41c>)
 800f7a0:	f002 fa0e 	bl	8011bc0 <iprintf>
	   aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 800f7a4:	4b1c      	ldr	r3, [pc, #112]	; (800f818 <SVCCTL_App_Notification+0x414>)
 800f7a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f7a8:	2101      	movs	r1, #1
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7f8 fbac 	bl	8007f08 <aci_gap_numeric_comparison_value_confirm_yesno>
	   APP_DBG_MSG("\r\n\r** aci_gap_numeric_comparison_value_confirm_yesno-->YES \n");
 800f7b0:	481c      	ldr	r0, [pc, #112]	; (800f824 <SVCCTL_App_Notification+0x420>)
 800f7b2:	f002 fa79 	bl	8011ca8 <puts>
	   break;
 800f7b6:	e025      	b.n	800f804 <SVCCTL_App_Notification+0x400>
	   DTS_App_TxPoolAvailableNotification();
 800f7b8:	f001 fa08 	bl	8010bcc <DTS_App_TxPoolAvailableNotification>
	   break;
 800f7bc:	e022      	b.n	800f804 <SVCCTL_App_Notification+0x400>
          mutex = 1;
 800f7be:	4b1a      	ldr	r3, [pc, #104]	; (800f828 <SVCCTL_App_Notification+0x424>)
 800f7c0:	2201      	movs	r2, #1
 800f7c2:	701a      	strb	r2, [r3, #0]
      break;
 800f7c4:	e01e      	b.n	800f804 <SVCCTL_App_Notification+0x400>
          APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PROCEDURE_COMPLETE \n");
 800f7c6:	4819      	ldr	r0, [pc, #100]	; (800f82c <SVCCTL_App_Notification+0x428>)
 800f7c8:	f002 fa6e 	bl	8011ca8 <puts>
          aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blue_evt->data;
 800f7cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7ce:	3302      	adds	r3, #2
 800f7d0:	633b      	str	r3, [r7, #48]	; 0x30
		   if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC)
 800f7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	2b02      	cmp	r3, #2
 800f7d8:	d113      	bne.n	800f802 <SVCCTL_App_Notification+0x3fe>
			 if( gap_evt_proc_complete->Status != BLE_STATUS_SUCCESS )
 800f7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7dc:	785b      	ldrb	r3, [r3, #1]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d003      	beq.n	800f7ea <SVCCTL_App_Notification+0x3e6>
			   APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE FAILED\n");
 800f7e2:	4813      	ldr	r0, [pc, #76]	; (800f830 <SVCCTL_App_Notification+0x42c>)
 800f7e4:	f002 fa60 	bl	8011ca8 <puts>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800f7e8:	e00b      	b.n	800f802 <SVCCTL_App_Notification+0x3fe>
			   if (BleApplicationContext.DeviceServerFound != NO_DEVICE_FOUND)
 800f7ea:	4b0b      	ldr	r3, [pc, #44]	; (800f818 <SVCCTL_App_Notification+0x414>)
 800f7ec:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d003      	beq.n	800f7fc <SVCCTL_App_Notification+0x3f8>
				 APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE COMPLETED\n");
 800f7f4:	480f      	ldr	r0, [pc, #60]	; (800f834 <SVCCTL_App_Notification+0x430>)
 800f7f6:	f002 fa57 	bl	8011ca8 <puts>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800f7fa:	e002      	b.n	800f802 <SVCCTL_App_Notification+0x3fe>
				 APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE COMPLETED WITH NO DEVICE FOUND\n");
 800f7fc:	480e      	ldr	r0, [pc, #56]	; (800f838 <SVCCTL_App_Notification+0x434>)
 800f7fe:	f002 fa53 	bl	8011ca8 <puts>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800f802:	bf00      	nop
      break; /* EVT_VENDOR */
 800f804:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800f806:	2301      	movs	r3, #1
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3744      	adds	r7, #68	; 0x44
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd90      	pop	{r4, r7, pc}
 800f810:	080132a4 	.word	0x080132a4
 800f814:	080132b8 	.word	0x080132b8
 800f818:	20000198 	.word	0x20000198
 800f81c:	0001b207 	.word	0x0001b207
 800f820:	080132d8 	.word	0x080132d8
 800f824:	080132ec 	.word	0x080132ec
 800f828:	20006fa4 	.word	0x20006fa4
 800f82c:	08013328 	.word	0x08013328
 800f830:	08013350 	.word	0x08013350
 800f834:	0801337c 	.word	0x0801337c
 800f838:	080133ac 	.word	0x080133ac

0800f83c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b082      	sub	sp, #8
 800f840:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800f842:	4b06      	ldr	r3, [pc, #24]	; (800f85c <Ble_Tl_Init+0x20>)
 800f844:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800f846:	4b06      	ldr	r3, [pc, #24]	; (800f860 <Ble_Tl_Init+0x24>)
 800f848:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800f84a:	463b      	mov	r3, r7
 800f84c:	4619      	mov	r1, r3
 800f84e:	4805      	ldr	r0, [pc, #20]	; (800f864 <Ble_Tl_Init+0x28>)
 800f850:	f7f9 fe6a 	bl	8009528 <hci_init>

  return;
 800f854:	bf00      	nop
}
 800f856:	3708      	adds	r7, #8
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	200300d4 	.word	0x200300d4
 800f860:	0800fe35 	.word	0x0800fe35
 800f864:	0800fdfd 	.word	0x0800fdfd

0800f868 <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 800f868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f86a:	b091      	sub	sp, #68	; 0x44
 800f86c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800f86e:	2300      	movs	r3, #0
 800f870:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800f872:	f7f9 f92d 	bl	8008ad0 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800f876:	f000 f95b 	bl	800fb30 <BleGetBdAddress>
 800f87a:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800f87c:	6a3a      	ldr	r2, [r7, #32]
 800f87e:	2106      	movs	r1, #6
 800f880:	2000      	movs	r0, #0
 800f882:	f7f9 f865 	bl	8008950 <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800f886:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800f88a:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800f88c:	f7ff fcfe 	bl	800f28c <LL_FLASH_GetUDN>
 800f890:	4603      	mov	r3, r0
 800f892:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800f894:	f107 0308 	add.w	r3, r7, #8
 800f898:	461a      	mov	r2, r3
 800f89a:	2106      	movs	r1, #6
 800f89c:	202e      	movs	r0, #46	; 0x2e
 800f89e:	f7f9 f857 	bl	8008950 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800f8a2:	4a4a      	ldr	r2, [pc, #296]	; (800f9cc <Ble_Hci_Gap_Gatt_Init+0x164>)
 800f8a4:	2110      	movs	r1, #16
 800f8a6:	2018      	movs	r0, #24
 800f8a8:	f7f9 f852 	bl	8008950 <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800f8ac:	4a48      	ldr	r2, [pc, #288]	; (800f9d0 <Ble_Hci_Gap_Gatt_Init+0x168>)
 800f8ae:	2110      	movs	r1, #16
 800f8b0:	2008      	movs	r0, #8
 800f8b2:	f7f9 f84d 	bl	8008950 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800f8b6:	2118      	movs	r1, #24
 800f8b8:	2001      	movs	r0, #1
 800f8ba:	f7f9 f8b2 	bl	8008a22 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800f8be:	f7f8 fb7a 	bl	8007fb6 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800f8c6:	7ffb      	ldrb	r3, [r7, #31]
 800f8c8:	f043 0301 	orr.w	r3, r3, #1
 800f8cc:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800f8ce:	7ffb      	ldrb	r3, [r7, #31]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d01e      	beq.n	800f912 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    const char *name = "BLEcore";
 800f8d4:	4b3f      	ldr	r3, [pc, #252]	; (800f9d4 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800f8d6:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 800f8d8:	f107 0216 	add.w	r2, r7, #22
 800f8dc:	7ff8      	ldrb	r0, [r7, #31]
 800f8de:	f107 0312 	add.w	r3, r7, #18
 800f8e2:	9301      	str	r3, [sp, #4]
 800f8e4:	f107 0314 	add.w	r3, r7, #20
 800f8e8:	9300      	str	r3, [sp, #0]
 800f8ea:	4613      	mov	r3, r2
 800f8ec:	2207      	movs	r2, #7
 800f8ee:	2100      	movs	r1, #0
 800f8f0:	f7f8 f991 	bl	8007c16 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800f8f4:	8afc      	ldrh	r4, [r7, #22]
 800f8f6:	8abd      	ldrh	r5, [r7, #20]
 800f8f8:	69b8      	ldr	r0, [r7, #24]
 800f8fa:	f7f0 fc4b 	bl	8000194 <strlen>
 800f8fe:	4603      	mov	r3, r0
 800f900:	b2da      	uxtb	r2, r3
 800f902:	69bb      	ldr	r3, [r7, #24]
 800f904:	9300      	str	r3, [sp, #0]
 800f906:	4613      	mov	r3, r2
 800f908:	2200      	movs	r2, #0
 800f90a:	4629      	mov	r1, r5
 800f90c:	4620      	mov	r0, r4
 800f90e:	f7f8 fd10 	bl	8008332 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800f912:	8af8      	ldrh	r0, [r7, #22]
 800f914:	8a79      	ldrh	r1, [r7, #18]
 800f916:	1d3b      	adds	r3, r7, #4
 800f918:	9300      	str	r3, [sp, #0]
 800f91a:	2302      	movs	r3, #2
 800f91c:	2200      	movs	r2, #0
 800f91e:	f7f8 fd08 	bl	8008332 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 800f922:	2202      	movs	r2, #2
 800f924:	2102      	movs	r1, #2
 800f926:	2000      	movs	r0, #0
 800f928:	f7f9 f967 	bl	8008bfa <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800f92c:	4b2a      	ldr	r3, [pc, #168]	; (800f9d8 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f92e:	2200      	movs	r2, #0
 800f930:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800f932:	4b29      	ldr	r3, [pc, #164]	; (800f9d8 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	4618      	mov	r0, r3
 800f938:	f7f8 f824 	bl	8007984 <aci_gap_set_io_capability>
//  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
//  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
//  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
//  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
//  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
  for (index = 0; index < 16; index++)
 800f93c:	2300      	movs	r3, #0
 800f93e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f942:	e00b      	b.n	800f95c <Ble_Hci_Gap_Gatt_Init+0xf4>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800f944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f948:	4a23      	ldr	r2, [pc, #140]	; (800f9d8 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f94a:	4413      	add	r3, r2
 800f94c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f950:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 800f952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f956:	3301      	adds	r3, #1
 800f958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f95c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f960:	2b0f      	cmp	r3, #15
 800f962:	d9ef      	bls.n	800f944 <Ble_Hci_Gap_Gatt_Init+0xdc>
//                                         BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
//                                         BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
//                                         BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
//                                         0
//  );
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800f964:	4b1c      	ldr	r3, [pc, #112]	; (800f9d8 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f966:	2201      	movs	r2, #1
 800f968:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800f96a:	4b1b      	ldr	r3, [pc, #108]	; (800f9d8 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f96c:	2208      	movs	r2, #8
 800f96e:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800f970:	4b19      	ldr	r3, [pc, #100]	; (800f9d8 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f972:	2210      	movs	r2, #16
 800f974:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800f976:	4b18      	ldr	r3, [pc, #96]	; (800f9d8 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f978:	2200      	movs	r2, #0
 800f97a:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800f97c:	4b16      	ldr	r3, [pc, #88]	; (800f9d8 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f97e:	4a17      	ldr	r2, [pc, #92]	; (800f9dc <Ble_Hci_Gap_Gatt_Init+0x174>)
 800f980:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800f982:	4b15      	ldr	r3, [pc, #84]	; (800f9d8 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f984:	2201      	movs	r2, #1
 800f986:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800f988:	4b13      	ldr	r3, [pc, #76]	; (800f9d8 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f98a:	789d      	ldrb	r5, [r3, #2]
 800f98c:	4b12      	ldr	r3, [pc, #72]	; (800f9d8 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f98e:	785e      	ldrb	r6, [r3, #1]
 800f990:	4b11      	ldr	r3, [pc, #68]	; (800f9d8 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f992:	7d5b      	ldrb	r3, [r3, #21]
 800f994:	4a10      	ldr	r2, [pc, #64]	; (800f9d8 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f996:	7d92      	ldrb	r2, [r2, #22]
 800f998:	490f      	ldr	r1, [pc, #60]	; (800f9d8 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f99a:	7d09      	ldrb	r1, [r1, #20]
 800f99c:	480e      	ldr	r0, [pc, #56]	; (800f9d8 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f99e:	6980      	ldr	r0, [r0, #24]
 800f9a0:	2400      	movs	r4, #0
 800f9a2:	9404      	str	r4, [sp, #16]
 800f9a4:	9003      	str	r0, [sp, #12]
 800f9a6:	9102      	str	r1, [sp, #8]
 800f9a8:	9201      	str	r2, [sp, #4]
 800f9aa:	9300      	str	r3, [sp, #0]
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	4631      	mov	r1, r6
 800f9b2:	4628      	mov	r0, r5
 800f9b4:	f7f8 f830 	bl	8007a18 <aci_gap_set_authentication_requirement>
										 );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800f9b8:	4b07      	ldr	r3, [pc, #28]	; (800f9d8 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800f9ba:	789b      	ldrb	r3, [r3, #2]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d001      	beq.n	800f9c4 <Ble_Hci_Gap_Gatt_Init+0x15c>
   {
     aci_gap_configure_whitelist();
 800f9c0:	f7f8 fa10 	bl	8007de4 <aci_gap_configure_whitelist>
   }
}
 800f9c4:	bf00      	nop
 800f9c6:	372c      	adds	r7, #44	; 0x2c
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9cc:	080140a0 	.word	0x080140a0
 800f9d0:	080140b0 	.word	0x080140b0
 800f9d4:	08013404 	.word	0x08013404
 800f9d8:	20000198 	.word	0x20000198
 800f9dc:	0001b207 	.word	0x0001b207

0800f9e0 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b08c      	sub	sp, #48	; 0x30
 800f9e4:	af08      	add	r7, sp, #32
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f9ea:	2342      	movs	r3, #66	; 0x42
 800f9ec:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;
 
  if (New_Status == APP_BLE_FAST_ADV)
 800f9ee:	79fb      	ldrb	r3, [r7, #7]
 800f9f0:	2b01      	cmp	r3, #1
 800f9f2:	d106      	bne.n	800fa02 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800f9f4:	4b40      	ldr	r3, [pc, #256]	; (800faf8 <Adv_Request+0x118>)
 800f9f6:	881b      	ldrh	r3, [r3, #0]
 800f9f8:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800f9fa:	4b40      	ldr	r3, [pc, #256]	; (800fafc <Adv_Request+0x11c>)
 800f9fc:	881b      	ldrh	r3, [r3, #0]
 800f9fe:	81bb      	strh	r3, [r7, #12]
 800fa00:	e005      	b.n	800fa0e <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800fa02:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800fa06:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800fa08:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800fa0c:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800fa0e:	4b3c      	ldr	r3, [pc, #240]	; (800fb00 <Adv_Request+0x120>)
 800fa10:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7f2 f9a3 	bl	8001d60 <HW_TS_Stop>

     APP_DBG_MSG("First index in %d state \n",
                BleApplicationContext.Device_Connection_Status);
 800fa1a:	4b39      	ldr	r3, [pc, #228]	; (800fb00 <Adv_Request+0x120>)
 800fa1c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
     APP_DBG_MSG("First index in %d state \n",
 800fa20:	4619      	mov	r1, r3
 800fa22:	4838      	ldr	r0, [pc, #224]	; (800fb04 <Adv_Request+0x124>)
 800fa24:	f002 f8cc 	bl	8011bc0 <iprintf>

    if ((New_Status == APP_BLE_LP_ADV)
 800fa28:	79fb      	ldrb	r3, [r7, #7]
 800fa2a:	2b02      	cmp	r3, #2
 800fa2c:	d119      	bne.n	800fa62 <Adv_Request+0x82>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800fa2e:	4b34      	ldr	r3, [pc, #208]	; (800fb00 <Adv_Request+0x120>)
 800fa30:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800fa34:	2b01      	cmp	r3, #1
 800fa36:	d004      	beq.n	800fa42 <Adv_Request+0x62>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800fa38:	4b31      	ldr	r3, [pc, #196]	; (800fb00 <Adv_Request+0x120>)
 800fa3a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800fa3e:	2b02      	cmp	r3, #2
 800fa40:	d10f      	bne.n	800fa62 <Adv_Request+0x82>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800fa42:	f7f7 fe9d 	bl	8007780 <aci_gap_set_non_discoverable>
 800fa46:	4603      	mov	r3, r0
 800fa48:	72fb      	strb	r3, [r7, #11]
      if (ret == BLE_STATUS_SUCCESS)
 800fa4a:	7afb      	ldrb	r3, [r7, #11]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d103      	bne.n	800fa58 <Adv_Request+0x78>
      {
        APP_DBG_MSG("Successfully Stopped Advertising");
 800fa50:	482d      	ldr	r0, [pc, #180]	; (800fb08 <Adv_Request+0x128>)
 800fa52:	f002 f8b5 	bl	8011bc0 <iprintf>
 800fa56:	e004      	b.n	800fa62 <Adv_Request+0x82>
      }
      else
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 800fa58:	7afb      	ldrb	r3, [r7, #11]
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	482b      	ldr	r0, [pc, #172]	; (800fb0c <Adv_Request+0x12c>)
 800fa5e:	f002 f8af 	bl	8011bc0 <iprintf>
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800fa62:	4a27      	ldr	r2, [pc, #156]	; (800fb00 <Adv_Request+0x120>)
 800fa64:	79fb      	ldrb	r3, [r7, #7]
 800fa66:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800fa6a:	4b25      	ldr	r3, [pc, #148]	; (800fb00 <Adv_Request+0x120>)
 800fa6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa70:	89b8      	ldrh	r0, [r7, #12]
 800fa72:	89f9      	ldrh	r1, [r7, #14]
 800fa74:	2208      	movs	r2, #8
 800fa76:	9206      	str	r2, [sp, #24]
 800fa78:	2206      	movs	r2, #6
 800fa7a:	9205      	str	r2, [sp, #20]
 800fa7c:	4a24      	ldr	r2, [pc, #144]	; (800fb10 <Adv_Request+0x130>)
 800fa7e:	9204      	str	r2, [sp, #16]
 800fa80:	9303      	str	r3, [sp, #12]
 800fa82:	4b24      	ldr	r3, [pc, #144]	; (800fb14 <Adv_Request+0x134>)
 800fa84:	9302      	str	r3, [sp, #8]
 800fa86:	230a      	movs	r3, #10
 800fa88:	9301      	str	r3, [sp, #4]
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	9300      	str	r3, [sp, #0]
 800fa8e:	2300      	movs	r3, #0
 800fa90:	4602      	mov	r2, r0
 800fa92:	2000      	movs	r0, #0
 800fa94:	f7f7 fe98 	bl	80077c8 <aci_gap_set_discoverable>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	72fb      	strb	r3, [r7, #11]
//            NO_WHITE_LIST_USE, /* use white list */
//            sizeof(local_name), (uint8_t*) local_name, 0,
//            NULL,
//            6, 8);
    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800fa9c:	491e      	ldr	r1, [pc, #120]	; (800fb18 <Adv_Request+0x138>)
 800fa9e:	2016      	movs	r0, #22
 800faa0:	f7f8 f944 	bl	8007d2c <aci_gap_update_adv_data>
 800faa4:	4603      	mov	r3, r0
 800faa6:	72fb      	strb	r3, [r7, #11]
//    ret = aci_gap_update_adv_data(22, (uint8_t*) manuf_data);

     if (ret == BLE_STATUS_SUCCESS)
 800faa8:	7afb      	ldrb	r3, [r7, #11]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d111      	bne.n	800fad2 <Adv_Request+0xf2>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800faae:	79fb      	ldrb	r3, [r7, #7]
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d10a      	bne.n	800faca <Adv_Request+0xea>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 800fab4:	4819      	ldr	r0, [pc, #100]	; (800fb1c <Adv_Request+0x13c>)
 800fab6:	f002 f8f7 	bl	8011ca8 <puts>
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800faba:	4b11      	ldr	r3, [pc, #68]	; (800fb00 <Adv_Request+0x120>)
 800fabc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fac0:	4917      	ldr	r1, [pc, #92]	; (800fb20 <Adv_Request+0x140>)
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7f2 f9d6 	bl	8001e74 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800fac8:	e012      	b.n	800faf0 <Adv_Request+0x110>
        APP_DBG_MSG("\n\rSuccessfully Start Low Power Advertising \n\r");
 800faca:	4816      	ldr	r0, [pc, #88]	; (800fb24 <Adv_Request+0x144>)
 800facc:	f002 f878 	bl	8011bc0 <iprintf>
  return;
 800fad0:	e00e      	b.n	800faf0 <Adv_Request+0x110>
      if (New_Status == APP_BLE_FAST_ADV)
 800fad2:	79fb      	ldrb	r3, [r7, #7]
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d105      	bne.n	800fae4 <Adv_Request+0x104>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n\r", ret);
 800fad8:	7afb      	ldrb	r3, [r7, #11]
 800fada:	4619      	mov	r1, r3
 800fadc:	4812      	ldr	r0, [pc, #72]	; (800fb28 <Adv_Request+0x148>)
 800fade:	f002 f86f 	bl	8011bc0 <iprintf>
  return;
 800fae2:	e005      	b.n	800faf0 <Adv_Request+0x110>
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 800fae4:	7afb      	ldrb	r3, [r7, #11]
 800fae6:	4619      	mov	r1, r3
 800fae8:	4810      	ldr	r0, [pc, #64]	; (800fb2c <Adv_Request+0x14c>)
 800faea:	f002 f869 	bl	8011bc0 <iprintf>
  return;
 800faee:	bf00      	nop
}
 800faf0:	3710      	adds	r7, #16
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	2000022c 	.word	0x2000022c
 800fafc:	2000022e 	.word	0x2000022e
 800fb00:	20000198 	.word	0x20000198
 800fb04:	0801340c 	.word	0x0801340c
 800fb08:	08013428 	.word	0x08013428
 800fb0c:	0801344c 	.word	0x0801344c
 800fb10:	200001c1 	.word	0x200001c1
 800fb14:	080140c0 	.word	0x080140c0
 800fb18:	080140cc 	.word	0x080140cc
 800fb1c:	08013474 	.word	0x08013474
 800fb20:	0001e046 	.word	0x0001e046
 800fb24:	0801349c 	.word	0x0801349c
 800fb28:	080134cc 	.word	0x080134cc
 800fb2c:	080134fc 	.word	0x080134fc

0800fb30 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b086      	sub	sp, #24
 800fb34:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800fb36:	f7ff fba9 	bl	800f28c <LL_FLASH_GetUDN>
 800fb3a:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800fb3c:	693b      	ldr	r3, [r7, #16]
 800fb3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb42:	d023      	beq.n	800fb8c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800fb44:	f7ff fbba 	bl	800f2bc <LL_FLASH_GetSTCompanyID>
 800fb48:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800fb4a:	f7ff fbab 	bl	800f2a4 <LL_FLASH_GetDeviceID>
 800fb4e:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	b2da      	uxtb	r2, r3
 800fb54:	4b16      	ldr	r3, [pc, #88]	; (800fbb0 <BleGetBdAddress+0x80>)
 800fb56:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800fb58:	693b      	ldr	r3, [r7, #16]
 800fb5a:	0a1b      	lsrs	r3, r3, #8
 800fb5c:	b2da      	uxtb	r2, r3
 800fb5e:	4b14      	ldr	r3, [pc, #80]	; (800fbb0 <BleGetBdAddress+0x80>)
 800fb60:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	0c1b      	lsrs	r3, r3, #16
 800fb66:	b2da      	uxtb	r2, r3
 800fb68:	4b11      	ldr	r3, [pc, #68]	; (800fbb0 <BleGetBdAddress+0x80>)
 800fb6a:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	b2da      	uxtb	r2, r3
 800fb70:	4b0f      	ldr	r3, [pc, #60]	; (800fbb0 <BleGetBdAddress+0x80>)
 800fb72:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	b2da      	uxtb	r2, r3
 800fb78:	4b0d      	ldr	r3, [pc, #52]	; (800fbb0 <BleGetBdAddress+0x80>)
 800fb7a:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	0a1b      	lsrs	r3, r3, #8
 800fb80:	b2da      	uxtb	r2, r3
 800fb82:	4b0b      	ldr	r3, [pc, #44]	; (800fbb0 <BleGetBdAddress+0x80>)
 800fb84:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800fb86:	4b0a      	ldr	r3, [pc, #40]	; (800fbb0 <BleGetBdAddress+0x80>)
 800fb88:	617b      	str	r3, [r7, #20]
 800fb8a:	e00b      	b.n	800fba4 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800fb8c:	2000      	movs	r0, #0
 800fb8e:	f7fa fe9d 	bl	800a8cc <OTP_Read>
 800fb92:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d002      	beq.n	800fba0 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	617b      	str	r3, [r7, #20]
 800fb9e:	e001      	b.n	800fba4 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800fba0:	4b04      	ldr	r3, [pc, #16]	; (800fbb4 <BleGetBdAddress+0x84>)
 800fba2:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800fba4:	697b      	ldr	r3, [r7, #20]
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3718      	adds	r7, #24
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop
 800fbb0:	200068dc 	.word	0x200068dc
 800fbb4:	08014098 	.word	0x08014098

0800fbb8 <APP_BLE_ComputeCRC8>:

/* USER CODE BEGIN FD_LOCAL_FUNCTION */
uint8_t APP_BLE_ComputeCRC8( uint8_t *DataPtr , uint8_t Datalen )
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b085      	sub	sp, #20
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	460b      	mov	r3, r1
 800fbc2:	70fb      	strb	r3, [r7, #3]
  uint8_t i, j;
  const uint8_t PolynomeCRC = 0x97;
 800fbc4:	2397      	movs	r3, #151	; 0x97
 800fbc6:	733b      	strb	r3, [r7, #12]
  uint8_t CRC8 = 0x00;
 800fbc8:	2300      	movs	r3, #0
 800fbca:	737b      	strb	r3, [r7, #13]

  for (i = 0; i < Datalen; i++)
 800fbcc:	2300      	movs	r3, #0
 800fbce:	73fb      	strb	r3, [r7, #15]
 800fbd0:	e022      	b.n	800fc18 <APP_BLE_ComputeCRC8+0x60>
  {
    CRC8 ^= DataPtr[i];
 800fbd2:	7bfb      	ldrb	r3, [r7, #15]
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	4413      	add	r3, r2
 800fbd8:	781a      	ldrb	r2, [r3, #0]
 800fbda:	7b7b      	ldrb	r3, [r7, #13]
 800fbdc:	4053      	eors	r3, r2
 800fbde:	737b      	strb	r3, [r7, #13]
    for (j = 0; j < 8; j++)
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	73bb      	strb	r3, [r7, #14]
 800fbe4:	e012      	b.n	800fc0c <APP_BLE_ComputeCRC8+0x54>
    {
      if ((CRC8 & 0x80) != 0)
 800fbe6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	da08      	bge.n	800fc00 <APP_BLE_ComputeCRC8+0x48>
      {
        CRC8 = (uint8_t) ((CRC8 << 1) ^ PolynomeCRC);
 800fbee:	7b7b      	ldrb	r3, [r7, #13]
 800fbf0:	005b      	lsls	r3, r3, #1
 800fbf2:	b25a      	sxtb	r2, r3
 800fbf4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800fbf8:	4053      	eors	r3, r2
 800fbfa:	b25b      	sxtb	r3, r3
 800fbfc:	737b      	strb	r3, [r7, #13]
 800fbfe:	e002      	b.n	800fc06 <APP_BLE_ComputeCRC8+0x4e>
      }
      else
      {
        CRC8 <<= 1;
 800fc00:	7b7b      	ldrb	r3, [r7, #13]
 800fc02:	005b      	lsls	r3, r3, #1
 800fc04:	737b      	strb	r3, [r7, #13]
    for (j = 0; j < 8; j++)
 800fc06:	7bbb      	ldrb	r3, [r7, #14]
 800fc08:	3301      	adds	r3, #1
 800fc0a:	73bb      	strb	r3, [r7, #14]
 800fc0c:	7bbb      	ldrb	r3, [r7, #14]
 800fc0e:	2b07      	cmp	r3, #7
 800fc10:	d9e9      	bls.n	800fbe6 <APP_BLE_ComputeCRC8+0x2e>
  for (i = 0; i < Datalen; i++)
 800fc12:	7bfb      	ldrb	r3, [r7, #15]
 800fc14:	3301      	adds	r3, #1
 800fc16:	73fb      	strb	r3, [r7, #15]
 800fc18:	7bfa      	ldrb	r2, [r7, #15]
 800fc1a:	78fb      	ldrb	r3, [r7, #3]
 800fc1c:	429a      	cmp	r2, r3
 800fc1e:	d3d8      	bcc.n	800fbd2 <APP_BLE_ComputeCRC8+0x1a>
      }
    }
  }
  return (CRC8);
 800fc20:	7b7b      	ldrb	r3, [r7, #13]
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	3714      	adds	r7, #20
 800fc26:	46bd      	mov	sp, r7
 800fc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2c:	4770      	bx	lr

0800fc2e <AdvUpdateProcess>:

  return;
}

static void AdvUpdateProcess(void *argument)
{
 800fc2e:	b580      	push	{r7, lr}
 800fc30:	b082      	sub	sp, #8
 800fc32:	af00      	add	r7, sp, #0
 800fc34:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800fc36:	f04f 32ff 	mov.w	r2, #4294967295
 800fc3a:	2100      	movs	r1, #0
 800fc3c:	2001      	movs	r0, #1
 800fc3e:	f7fb fc9d 	bl	800b57c <osThreadFlagsWait>
    Adv_Update( );
 800fc42:	f000 f801 	bl	800fc48 <Adv_Update>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800fc46:	e7f6      	b.n	800fc36 <AdvUpdateProcess+0x8>

0800fc48 <Adv_Update>:
  }
  return;
}

static void Adv_Update( void )
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 800fc4c:	2002      	movs	r0, #2
 800fc4e:	f7ff fec7 	bl	800f9e0 <Adv_Request>

  return;
 800fc52:	bf00      	nop
}
 800fc54:	bd80      	pop	{r7, pc}

0800fc56 <HciUserEvtProcess>:

static void HciUserEvtProcess(void *argument)
{
 800fc56:	b580      	push	{r7, lr}
 800fc58:	b082      	sub	sp, #8
 800fc5a:	af00      	add	r7, sp, #0
 800fc5c:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800fc5e:	f04f 32ff 	mov.w	r2, #4294967295
 800fc62:	2100      	movs	r1, #0
 800fc64:	2001      	movs	r0, #1
 800fc66:	f7fb fc89 	bl	800b57c <osThreadFlagsWait>
    hci_user_evt_proc( );
 800fc6a:	f7f9 fc79 	bl	8009560 <hci_user_evt_proc>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800fc6e:	e7f6      	b.n	800fc5e <HciUserEvtProcess+0x8>

0800fc70 <DataThroughput_proc>:
//    APP_DBG_MSG("** add ADV data **  Failed \r\n\r");
//  }
//  return;
//}

void DataThroughput_proc(void){
 800fc70:	b580      	push	{r7, lr}
 800fc72:	af00      	add	r7, sp, #0

//  UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_WRITE_ID, CFG_SCH_PRIO_0);

  osThreadFlagsSet( DataWriteProcessId, 1 );
 800fc74:	4b03      	ldr	r3, [pc, #12]	; (800fc84 <DataThroughput_proc+0x14>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	2101      	movs	r1, #1
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f7fb fc1c 	bl	800b4b8 <osThreadFlagsSet>
}
 800fc80:	bf00      	nop
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	20006fa0 	.word	0x20006fa0

0800fc88 <LinkConfiguration>:
#endif

void LinkConfiguration(void * argument)
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b084      	sub	sp, #16
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
		  for(;;)
		  {
			    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800fc90:	f04f 32ff 	mov.w	r2, #4294967295
 800fc94:	2100      	movs	r1, #0
 800fc96:	2001      	movs	r0, #1
 800fc98:	f7fb fc70 	bl	800b57c <osThreadFlagsWait>
  }
#endif

//  APP_DBG_MSG("set data length \n");
//  BSP_LED_On(LED_BLUE);
  status = hci_le_set_data_length(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,251,2120);
 800fc9c:	4b07      	ldr	r3, [pc, #28]	; (800fcbc <LinkConfiguration+0x34>)
 800fc9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fca0:	f640 0248 	movw	r2, #2120	; 0x848
 800fca4:	21fb      	movs	r1, #251	; 0xfb
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7f8 ff36 	bl	8008b18 <hci_le_set_data_length>
 800fcac:	4603      	mov	r3, r0
 800fcae:	73fb      	strb	r3, [r7, #15]

#if ((CFG_ENCRYPTION_ENABLE != 0) && (CFG_BLE_CENTRAL != 0))
  GapProcReq(GAP_PROC_PAIRING);
#endif

  DTC_App_LinkReadyNotification(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800fcb0:	4b02      	ldr	r3, [pc, #8]	; (800fcbc <LinkConfiguration+0x34>)
 800fcb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f000 fc47 	bl	8010548 <DTC_App_LinkReadyNotification>
		  {
 800fcba:	e7e9      	b.n	800fc90 <LinkConfiguration+0x8>
 800fcbc:	20000198 	.word	0x20000198

0800fcc0 <Switch_OFF_GPIO>:
/* USER CODE END Adv_Cancel_Req_2 */
  return;
}
#endif

static void Switch_OFF_GPIO(){
 800fcc0:	b480      	push	{r7}
 800fcc2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
//  BSP_LED_Off(LED_GREEN);
/* USER CODE END Switch_OFF_GPIO */
}
 800fcc4:	bf00      	nop
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fccc:	4770      	bx	lr
	...

0800fcd0 <BLE_SVC_L2CAP_Conn_Update>:

#if(L2CAP_REQUEST_NEW_CONN_PARAM != 0)  
void BLE_SVC_L2CAP_Conn_Update(uint16_t Connection_Handle)
{
 800fcd0:	b590      	push	{r4, r7, lr}
 800fcd2:	b089      	sub	sp, #36	; 0x24
 800fcd4:	af02      	add	r7, sp, #8
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	80fb      	strh	r3, [r7, #6]
/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

/* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */
  if(mutex == 1) { 
 800fcda:	4b29      	ldr	r3, [pc, #164]	; (800fd80 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 800fcdc:	781b      	ldrb	r3, [r3, #0]
 800fcde:	2b01      	cmp	r3, #1
 800fce0:	d149      	bne.n	800fd76 <BLE_SVC_L2CAP_Conn_Update+0xa6>
    mutex = 0;
 800fce2:	4b27      	ldr	r3, [pc, #156]	; (800fd80 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 800fce4:	2200      	movs	r2, #0
 800fce6:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 800fce8:	4b26      	ldr	r3, [pc, #152]	; (800fd84 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800fcea:	781b      	ldrb	r3, [r3, #0]
 800fcec:	3301      	adds	r3, #1
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	f003 0301 	and.w	r3, r3, #1
 800fcf4:	bfb8      	it	lt
 800fcf6:	425b      	neglt	r3, r3
 800fcf8:	b2da      	uxtb	r2, r3
 800fcfa:	4b22      	ldr	r3, [pc, #136]	; (800fd84 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800fcfc:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(tab_conn_interval[index_con_int]);
 800fcfe:	4b21      	ldr	r3, [pc, #132]	; (800fd84 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	4a21      	ldr	r2, [pc, #132]	; (800fd88 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 800fd04:	009b      	lsls	r3, r3, #2
 800fd06:	4413      	add	r3, r2
 800fd08:	ed93 7a00 	vldr	s14, [r3]
 800fd0c:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 800fd10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fd14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd18:	ee17 3a90 	vmov	r3, s15
 800fd1c:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(tab_conn_interval[index_con_int]);
 800fd1e:	4b19      	ldr	r3, [pc, #100]	; (800fd84 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800fd20:	781b      	ldrb	r3, [r3, #0]
 800fd22:	4a19      	ldr	r2, [pc, #100]	; (800fd88 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	4413      	add	r3, r2
 800fd28:	ed93 7a00 	vldr	s14, [r3]
 800fd2c:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 800fd30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fd34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd38:	ee17 3a90 	vmov	r3, s15
 800fd3c:	82bb      	strh	r3, [r7, #20]
    uint16_t slave_latency = L2CAP_SLAVE_LATENCY;
 800fd3e:	2300      	movs	r3, #0
 800fd40:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 800fd42:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800fd46:	823b      	strh	r3, [r7, #16]
    tBleStatus result;

    result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800fd48:	4b10      	ldr	r3, [pc, #64]	; (800fd8c <BLE_SVC_L2CAP_Conn_Update+0xbc>)
 800fd4a:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 800fd4c:	8a7c      	ldrh	r4, [r7, #18]
 800fd4e:	8aba      	ldrh	r2, [r7, #20]
 800fd50:	8af9      	ldrh	r1, [r7, #22]
 800fd52:	8a3b      	ldrh	r3, [r7, #16]
 800fd54:	9300      	str	r3, [sp, #0]
 800fd56:	4623      	mov	r3, r4
 800fd58:	f7f8 ffb6 	bl	8008cc8 <aci_l2cap_connection_parameter_update_req>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	73fb      	strb	r3, [r7, #15]
                                                       interval_min, interval_max,
                                                       slave_latency, timeout_multiplier);
    if( result == BLE_STATUS_SUCCESS )
 800fd60:	7bfb      	ldrb	r3, [r7, #15]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d103      	bne.n	800fd6e <BLE_SVC_L2CAP_Conn_Update+0x9e>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 800fd66:	480a      	ldr	r0, [pc, #40]	; (800fd90 <BLE_SVC_L2CAP_Conn_Update+0xc0>)
 800fd68:	f001 ff2a 	bl	8011bc0 <iprintf>
    }
  }
/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

/* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */
  return;
 800fd6c:	e003      	b.n	800fd76 <BLE_SVC_L2CAP_Conn_Update+0xa6>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 800fd6e:	4809      	ldr	r0, [pc, #36]	; (800fd94 <BLE_SVC_L2CAP_Conn_Update+0xc4>)
 800fd70:	f001 ff26 	bl	8011bc0 <iprintf>
  return;
 800fd74:	bf00      	nop
 800fd76:	bf00      	nop
}
 800fd78:	371c      	adds	r7, #28
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd90      	pop	{r4, r7, pc}
 800fd7e:	bf00      	nop
 800fd80:	20006fa4 	.word	0x20006fa4
 800fd84:	20006fa5 	.word	0x20006fa5
 800fd88:	20000020 	.word	0x20000020
 800fd8c:	20000198 	.word	0x20000198
 800fd90:	08013688 	.word	0x08013688
 800fd94:	080136b8 	.word	0x080136b8

0800fd98 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( HciUserEvtProcessId, 1 );
 800fda0:	4b04      	ldr	r3, [pc, #16]	; (800fdb4 <hci_notify_asynch_evt+0x1c>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	2101      	movs	r1, #1
 800fda6:	4618      	mov	r0, r3
 800fda8:	f7fb fb86 	bl	800b4b8 <osThreadFlagsSet>
  return;
 800fdac:	bf00      	nop
}
 800fdae:	3708      	adds	r7, #8
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}
 800fdb4:	20006f90 	.word	0x20006f90

0800fdb8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b082      	sub	sp, #8
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemHciId );
 800fdc0:	4b04      	ldr	r3, [pc, #16]	; (800fdd4 <hci_cmd_resp_release+0x1c>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f7fb fee7 	bl	800bb98 <osSemaphoreRelease>
  return;
 800fdca:	bf00      	nop
}
 800fdcc:	3708      	adds	r7, #8
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}
 800fdd2:	bf00      	nop
 800fdd4:	20006f8c 	.word	0x20006f8c

0800fdd8 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemHciId, osWaitForever );
 800fde0:	4b05      	ldr	r3, [pc, #20]	; (800fdf8 <hci_cmd_resp_wait+0x20>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	f04f 31ff 	mov.w	r1, #4294967295
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7fb fe6f 	bl	800bacc <osSemaphoreAcquire>
  return;
 800fdee:	bf00      	nop
}
 800fdf0:	3708      	adds	r7, #8
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}
 800fdf6:	bf00      	nop
 800fdf8:	20006f8c 	.word	0x20006f8c

0800fdfc <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	3308      	adds	r3, #8
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7f9 f9f8 	bl	8009204 <SVCCTL_UserEvtRx>
 800fe14:	4603      	mov	r3, r0
 800fe16:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800fe18:	7afb      	ldrb	r3, [r7, #11]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d003      	beq.n	800fe26 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	2201      	movs	r2, #1
 800fe22:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800fe24:	e002      	b.n	800fe2c <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	701a      	strb	r2, [r3, #0]
}
 800fe2c:	bf00      	nop
 800fe2e:	3710      	adds	r7, #16
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	71fb      	strb	r3, [r7, #7]
  switch (status)
 800fe3e:	79fb      	ldrb	r3, [r7, #7]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d002      	beq.n	800fe4a <BLE_StatusNot+0x16>
 800fe44:	2b01      	cmp	r3, #1
 800fe46:	d008      	beq.n	800fe5a <BLE_StatusNot+0x26>
    case HCI_TL_CmdAvailable:
      osMutexRelease( MtxHciId );
      break;

    default:
      break;
 800fe48:	e00d      	b.n	800fe66 <BLE_StatusNot+0x32>
      osMutexAcquire( MtxHciId, osWaitForever );
 800fe4a:	4b09      	ldr	r3, [pc, #36]	; (800fe70 <BLE_StatusNot+0x3c>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	f04f 31ff 	mov.w	r1, #4294967295
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7fb fcee 	bl	800b834 <osMutexAcquire>
      break;
 800fe58:	e005      	b.n	800fe66 <BLE_StatusNot+0x32>
      osMutexRelease( MtxHciId );
 800fe5a:	4b05      	ldr	r3, [pc, #20]	; (800fe70 <BLE_StatusNot+0x3c>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f7fb fd46 	bl	800b8f0 <osMutexRelease>
      break;
 800fe64:	bf00      	nop
  }
  return;
 800fe66:	bf00      	nop
}
 800fe68:	3708      	adds	r7, #8
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	20006fb0 	.word	0x20006fb0

0800fe74 <SVCCTL_InitCustomSvc>:
  return;
}

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void SVCCTL_InitCustomSvc( void )
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	af00      	add	r7, sp, #0
  DTS_STM_Init();
 800fe78:	f001 f8ae 	bl	8010fd8 <DTS_STM_Init>
}
 800fe7c:	bf00      	nop
 800fe7e:	bd80      	pop	{r7, pc}

0800fe80 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	3b0c      	subs	r3, #12
 800fe8e:	2b12      	cmp	r3, #18
 800fe90:	d850      	bhi.n	800ff34 <APP_THREAD_Error+0xb4>
 800fe92:	a201      	add	r2, pc, #4	; (adr r2, 800fe98 <APP_THREAD_Error+0x18>)
 800fe94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe98:	0800fee5 	.word	0x0800fee5
 800fe9c:	0800feef 	.word	0x0800feef
 800fea0:	0800fef9 	.word	0x0800fef9
 800fea4:	0800ff03 	.word	0x0800ff03
 800fea8:	0800ff0d 	.word	0x0800ff0d
 800feac:	0800ff17 	.word	0x0800ff17
 800feb0:	0800ff35 	.word	0x0800ff35
 800feb4:	0800ff35 	.word	0x0800ff35
 800feb8:	0800ff35 	.word	0x0800ff35
 800febc:	0800ff35 	.word	0x0800ff35
 800fec0:	0800ff35 	.word	0x0800ff35
 800fec4:	0800ff35 	.word	0x0800ff35
 800fec8:	0800ff35 	.word	0x0800ff35
 800fecc:	0800ff35 	.word	0x0800ff35
 800fed0:	0800ff35 	.word	0x0800ff35
 800fed4:	0800ff35 	.word	0x0800ff35
 800fed8:	0800ff21 	.word	0x0800ff21
 800fedc:	0800ff35 	.word	0x0800ff35
 800fee0:	0800ff2b 	.word	0x0800ff2b
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 800fee4:	6839      	ldr	r1, [r7, #0]
 800fee6:	4818      	ldr	r0, [pc, #96]	; (800ff48 <APP_THREAD_Error+0xc8>)
 800fee8:	f000 f8ca 	bl	8010080 <APP_THREAD_TraceError>
    break;
 800feec:	e027      	b.n	800ff3e <APP_THREAD_Error+0xbe>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 800feee:	6839      	ldr	r1, [r7, #0]
 800fef0:	4816      	ldr	r0, [pc, #88]	; (800ff4c <APP_THREAD_Error+0xcc>)
 800fef2:	f000 f8c5 	bl	8010080 <APP_THREAD_TraceError>
    break;
 800fef6:	e022      	b.n	800ff3e <APP_THREAD_Error+0xbe>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 800fef8:	6839      	ldr	r1, [r7, #0]
 800fefa:	4815      	ldr	r0, [pc, #84]	; (800ff50 <APP_THREAD_Error+0xd0>)
 800fefc:	f000 f8c0 	bl	8010080 <APP_THREAD_TraceError>
    break;
 800ff00:	e01d      	b.n	800ff3e <APP_THREAD_Error+0xbe>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 800ff02:	6839      	ldr	r1, [r7, #0]
 800ff04:	4813      	ldr	r0, [pc, #76]	; (800ff54 <APP_THREAD_Error+0xd4>)
 800ff06:	f000 f8bb 	bl	8010080 <APP_THREAD_TraceError>
    break;
 800ff0a:	e018      	b.n	800ff3e <APP_THREAD_Error+0xbe>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 800ff0c:	6839      	ldr	r1, [r7, #0]
 800ff0e:	4812      	ldr	r0, [pc, #72]	; (800ff58 <APP_THREAD_Error+0xd8>)
 800ff10:	f000 f8b6 	bl	8010080 <APP_THREAD_TraceError>
    break;
 800ff14:	e013      	b.n	800ff3e <APP_THREAD_Error+0xbe>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 800ff16:	6839      	ldr	r1, [r7, #0]
 800ff18:	4810      	ldr	r0, [pc, #64]	; (800ff5c <APP_THREAD_Error+0xdc>)
 800ff1a:	f000 f8b1 	bl	8010080 <APP_THREAD_TraceError>
    break;
 800ff1e:	e00e      	b.n	800ff3e <APP_THREAD_Error+0xbe>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 800ff20:	6839      	ldr	r1, [r7, #0]
 800ff22:	480f      	ldr	r0, [pc, #60]	; (800ff60 <APP_THREAD_Error+0xe0>)
 800ff24:	f000 f8ac 	bl	8010080 <APP_THREAD_TraceError>
    break;
 800ff28:	e009      	b.n	800ff3e <APP_THREAD_Error+0xbe>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 800ff2a:	6839      	ldr	r1, [r7, #0]
 800ff2c:	480d      	ldr	r0, [pc, #52]	; (800ff64 <APP_THREAD_Error+0xe4>)
 800ff2e:	f000 f8a7 	bl	8010080 <APP_THREAD_TraceError>
    break;
 800ff32:	e004      	b.n	800ff3e <APP_THREAD_Error+0xbe>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 800ff34:	2100      	movs	r1, #0
 800ff36:	480c      	ldr	r0, [pc, #48]	; (800ff68 <APP_THREAD_Error+0xe8>)
 800ff38:	f000 f8a2 	bl	8010080 <APP_THREAD_TraceError>
    break;
 800ff3c:	bf00      	nop
  }
}
 800ff3e:	bf00      	nop
 800ff40:	3708      	adds	r7, #8
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}
 800ff46:	bf00      	nop
 800ff48:	08013720 	.word	0x08013720
 800ff4c:	08013744 	.word	0x08013744
 800ff50:	08013768 	.word	0x08013768
 800ff54:	08013788 	.word	0x08013788
 800ff58:	080137a8 	.word	0x080137a8
 800ff5c:	080137c8 	.word	0x080137c8
 800ff60:	080137e4 	.word	0x080137e4
 800ff64:	08013810 	.word	0x08013810
 800ff68:	08013834 	.word	0x08013834

0800ff6c <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 800ff72:	2000      	movs	r0, #0
 800ff74:	f7fa f8e0 	bl	800a138 <otInstanceErasePersistentInfo>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800ff7c:	79fb      	ldrb	r3, [r7, #7]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d004      	beq.n	800ff8c <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 800ff82:	79fb      	ldrb	r3, [r7, #7]
 800ff84:	4619      	mov	r1, r3
 800ff86:	201c      	movs	r0, #28
 800ff88:	f7ff ff7a 	bl	800fe80 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 800ff8c:	2000      	movs	r0, #0
 800ff8e:	f7fa f876 	bl	800a07e <otInstanceFinalize>
  otInstanceInitSingle();
 800ff92:	f7fa f84d 	bl	800a030 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 800ff96:	2200      	movs	r2, #0
 800ff98:	4925      	ldr	r1, [pc, #148]	; (8010030 <APP_THREAD_DeviceConfig+0xc4>)
 800ff9a:	2000      	movs	r0, #0
 800ff9c:	f7fa f896 	bl	800a0cc <otSetStateChangedCallback>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800ffa4:	79fb      	ldrb	r3, [r7, #7]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d004      	beq.n	800ffb4 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 800ffaa:	79fb      	ldrb	r3, [r7, #7]
 800ffac:	4619      	mov	r1, r3
 800ffae:	200d      	movs	r0, #13
 800ffb0:	f7ff ff66 	bl	800fe80 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 800ffb4:	2117      	movs	r1, #23
 800ffb6:	2000      	movs	r0, #0
 800ffb8:	f7fa f917 	bl	800a1ea <otLinkSetChannel>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800ffc0:	79fb      	ldrb	r3, [r7, #7]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d004      	beq.n	800ffd0 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 800ffc6:	79fb      	ldrb	r3, [r7, #7]
 800ffc8:	4619      	mov	r1, r3
 800ffca:	200e      	movs	r0, #14
 800ffcc:	f7ff ff58 	bl	800fe80 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 800ffd0:	f241 2134 	movw	r1, #4660	; 0x1234
 800ffd4:	2000      	movs	r0, #0
 800ffd6:	f7fa f938 	bl	800a24a <otLinkSetPanId>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800ffde:	79fb      	ldrb	r3, [r7, #7]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d004      	beq.n	800ffee <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 800ffe4:	79fb      	ldrb	r3, [r7, #7]
 800ffe6:	4619      	mov	r1, r3
 800ffe8:	200f      	movs	r0, #15
 800ffea:	f7ff ff49 	bl	800fe80 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 800ffee:	2101      	movs	r1, #1
 800fff0:	2000      	movs	r0, #0
 800fff2:	f7fa f8ca 	bl	800a18a <otIp6SetEnabled>
 800fff6:	4603      	mov	r3, r0
 800fff8:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800fffa:	79fb      	ldrb	r3, [r7, #7]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d004      	beq.n	801000a <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8010000:	79fb      	ldrb	r3, [r7, #7]
 8010002:	4619      	mov	r1, r3
 8010004:	2010      	movs	r0, #16
 8010006:	f7ff ff3b 	bl	800fe80 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 801000a:	2101      	movs	r1, #1
 801000c:	2000      	movs	r0, #0
 801000e:	f7fa fb53 	bl	800a6b8 <otThreadSetEnabled>
 8010012:	4603      	mov	r3, r0
 8010014:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8010016:	79fb      	ldrb	r3, [r7, #7]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d004      	beq.n	8010026 <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 801001c:	79fb      	ldrb	r3, [r7, #7]
 801001e:	4619      	mov	r1, r3
 8010020:	2011      	movs	r0, #17
 8010022:	f7ff ff2d 	bl	800fe80 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */

  /* USER CODE END DEVICECONFIG */
}
 8010026:	bf00      	nop
 8010028:	3708      	adds	r7, #8
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}
 801002e:	bf00      	nop
 8010030:	08010035 	.word	0x08010035

08010034 <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b082      	sub	sp, #8
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
 801003c:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f003 0304 	and.w	r3, r3, #4
 8010044:	2b00      	cmp	r3, #0
 8010046:	d013      	beq.n	8010070 <APP_THREAD_StateNotif+0x3c>
  {
    switch (otThreadGetDeviceRole(NULL))
 8010048:	2000      	movs	r0, #0
 801004a:	f7fa fb65 	bl	800a718 <otThreadGetDeviceRole>
 801004e:	4603      	mov	r3, r0
 8010050:	2b04      	cmp	r3, #4
 8010052:	d80f      	bhi.n	8010074 <APP_THREAD_StateNotif+0x40>
 8010054:	a201      	add	r2, pc, #4	; (adr r2, 801005c <APP_THREAD_StateNotif+0x28>)
 8010056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801005a:	bf00      	nop
 801005c:	08010075 	.word	0x08010075
 8010060:	08010075 	.word	0x08010075
 8010064:	08010075 	.word	0x08010075
 8010068:	08010075 	.word	0x08010075
 801006c:	08010075 	.word	0x08010075
      /* USER CODE BEGIN DEFAULT */

      /* USER CODE END DEFAULT */
      break;
    }
  }
 8010070:	bf00      	nop
 8010072:	e000      	b.n	8010076 <APP_THREAD_StateNotif+0x42>
      break;
 8010074:	bf00      	nop
}
 8010076:	bf00      	nop
 8010078:	3708      	adds	r7, #8
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
 801007e:	bf00      	nop

08010080 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8010080:	b480      	push	{r7}
 8010082:	b083      	sub	sp, #12
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 801008a:	bf00      	nop
 801008c:	370c      	adds	r7, #12
 801008e:	46bd      	mov	sp, r7
 8010090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010094:	4770      	bx	lr
	...

08010098 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b088      	sub	sp, #32
 801009c:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 801009e:	1d3b      	adds	r3, r7, #4
 80100a0:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 80100a2:	6978      	ldr	r0, [r7, #20]
 80100a4:	f7f9 f992 	bl	80093cc <SHCI_GetWirelessFwInfo>
 80100a8:	4603      	mov	r3, r0
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d004      	beq.n	80100b8 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80100ae:	2101      	movs	r1, #1
 80100b0:	201e      	movs	r0, #30
 80100b2:	f7ff fee5 	bl	800fe80 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 80100b6:	e03d      	b.n	8010134 <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 80100b8:	4a20      	ldr	r2, [pc, #128]	; (801013c <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 80100ba:	2101      	movs	r1, #1
 80100bc:	2000      	movs	r0, #0
 80100be:	f7f2 fbeb 	bl	8002898 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 80100c2:	4a1f      	ldr	r2, [pc, #124]	; (8010140 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 80100c4:	2101      	movs	r1, #1
 80100c6:	2000      	movs	r0, #0
 80100c8:	f7f2 fbe6 	bl	8002898 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	781b      	ldrb	r3, [r3, #0]
 80100d0:	4619      	mov	r1, r3
 80100d2:	697b      	ldr	r3, [r7, #20]
 80100d4:	785b      	ldrb	r3, [r3, #1]
 80100d6:	461a      	mov	r2, r3
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	789b      	ldrb	r3, [r3, #2]
 80100dc:	9301      	str	r3, [sp, #4]
 80100de:	9200      	str	r2, [sp, #0]
 80100e0:	460b      	mov	r3, r1
 80100e2:	4a18      	ldr	r2, [pc, #96]	; (8010144 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 80100e4:	2101      	movs	r1, #1
 80100e6:	2000      	movs	r0, #0
 80100e8:	f7f2 fbd6 	bl	8002898 <logApplication>
    switch(p_wireless_info->StackType)
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	7a5b      	ldrb	r3, [r3, #9]
 80100f0:	2b11      	cmp	r3, #17
 80100f2:	d009      	beq.n	8010108 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 80100f4:	2b50      	cmp	r3, #80	; 0x50
 80100f6:	d00d      	beq.n	8010114 <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 80100f8:	2b10      	cmp	r3, #16
 80100fa:	d111      	bne.n	8010120 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 80100fc:	4a12      	ldr	r2, [pc, #72]	; (8010148 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 80100fe:	2101      	movs	r1, #1
 8010100:	2000      	movs	r0, #0
 8010102:	f7f2 fbc9 	bl	8002898 <logApplication>
      break;
 8010106:	e010      	b.n	801012a <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 8010108:	4a10      	ldr	r2, [pc, #64]	; (801014c <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 801010a:	2101      	movs	r1, #1
 801010c:	2000      	movs	r0, #0
 801010e:	f7f2 fbc3 	bl	8002898 <logApplication>
      break;
 8010112:	e00a      	b.n	801012a <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8010114:	4a0e      	ldr	r2, [pc, #56]	; (8010150 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 8010116:	2101      	movs	r1, #1
 8010118:	2000      	movs	r0, #0
 801011a:	f7f2 fbbd 	bl	8002898 <logApplication>
      break;
 801011e:	e004      	b.n	801012a <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8010120:	2101      	movs	r1, #1
 8010122:	201e      	movs	r0, #30
 8010124:	f7ff feac 	bl	800fe80 <APP_THREAD_Error>
      break;
 8010128:	bf00      	nop
    APP_DBG("**********************************************************");
 801012a:	4a04      	ldr	r2, [pc, #16]	; (801013c <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 801012c:	2101      	movs	r1, #1
 801012e:	2000      	movs	r0, #0
 8010130:	f7f2 fbb2 	bl	8002898 <logApplication>
}
 8010134:	bf00      	nop
 8010136:	3718      	adds	r7, #24
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}
 801013c:	08013844 	.word	0x08013844
 8010140:	08013880 	.word	0x08013880
 8010144:	0801389c 	.word	0x0801389c
 8010148:	080138b4 	.word	0x080138b4
 801014c:	080138cc 	.word	0x080138cc
 8010150:	080138e4 	.word	0x080138e4

08010154 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801015c:	f04f 32ff 	mov.w	r2, #4294967295
 8010160:	2101      	movs	r1, #1
 8010162:	2001      	movs	r0, #1
 8010164:	f7fb fa0a 	bl	800b57c <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 8010168:	f000 f9b8 	bl	80104dc <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801016c:	e7f6      	b.n	801015c <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

0801016e <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 801016e:	b580      	push	{r7, lr}
 8010170:	b082      	sub	sp, #8
 8010172:	af00      	add	r7, sp, #0
 8010174:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8010176:	f04f 32ff 	mov.w	r2, #4294967295
 801017a:	2101      	movs	r1, #1
 801017c:	2001      	movs	r0, #1
 801017e:	f7fb f9fd 	bl	800b57c <osThreadFlagsWait>
    Send_CLI_To_M0();
 8010182:	f000 f90f 	bl	80103a4 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8010186:	e7f6      	b.n	8010176 <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

08010188 <APP_THREAD_Init_Dyn_1>:
 * @brief Main entry point for the Thread Application
 * @param  none
 * @retval None
 */
void APP_THREAD_Init_Dyn_1( void )
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 801018e:	f7ff ff83 	bl	8010098 <APP_THREAD_CheckWirelessFirmwareInfo>

#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8010192:	480d      	ldr	r0, [pc, #52]	; (80101c8 <APP_THREAD_Init_Dyn_1+0x40>)
 8010194:	f000 f826 	bl	80101e4 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8010198:	2101      	movs	r1, #1
 801019a:	2002      	movs	r0, #2
 801019c:	f001 fb74 	bl	8011888 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 80101a0:	f000 f958 	bl	8010454 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 80101a4:	f000 f938 	bl	8010418 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 80101a8:	f7f9 f8e3 	bl	8009372 <SHCI_C2_THREAD_Init>
 80101ac:	4603      	mov	r3, r0
 80101ae:	71fb      	strb	r3, [r7, #7]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ThreadInitStatus);

  // TODO: added this call and remove the lines after since (I think) they are unnecessary
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 80101b0:	4a06      	ldr	r2, [pc, #24]	; (80101cc <APP_THREAD_Init_Dyn_1+0x44>)
 80101b2:	2100      	movs	r1, #0
 80101b4:	4806      	ldr	r0, [pc, #24]	; (80101d0 <APP_THREAD_Init_Dyn_1+0x48>)
 80101b6:	f7fb f8d9 	bl	800b36c <osThreadNew>
 80101ba:	4602      	mov	r2, r0
 80101bc:	4b05      	ldr	r3, [pc, #20]	; (80101d4 <APP_THREAD_Init_Dyn_1+0x4c>)
 80101be:	601a      	str	r2, [r3, #0]
//  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_MSG_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_THREAD_ProcessMsgM0ToM4);
//  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_COAP_MSG_BUTTON, UTIL_SEQ_RFU, APP_THREAD_SendCoapMsg);
//
//  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_COAP_SEND_MSG, UTIL_SEQ_RFU,APP_THREAD_SendCoapMsg);
//  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_SET_THREAD_MODE, UTIL_SEQ_RFU,APP_THREAD_SetSleepyEndDeviceMode);
}
 80101c0:	bf00      	nop
 80101c2:	3708      	adds	r7, #8
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}
 80101c8:	20030a5c 	.word	0x20030a5c
 80101cc:	08014150 	.word	0x08014150
 80101d0:	08010155 	.word	0x08010155
 80101d4:	20006af8 	.word	0x20006af8

080101d8 <APP_THREAD_Init_Dyn_2>:

void APP_THREAD_Init_Dyn_2(void) {
 80101d8:	b580      	push	{r7, lr}
 80101da:	af00      	add	r7, sp, #0
  /* Initialize and configure the Thread device*/
  APP_THREAD_DeviceConfig();
 80101dc:	f7ff fec6 	bl	800ff6c <APP_THREAD_DeviceConfig>
  /**
   * Create timer to handle COAP request sending
   */
//  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &sedCoapTimerID, hw_ts_Repeated, APP_THREAD_CoapTimingElapsed);
  /* Allow the 800_15_4 IP to enter in low power mode */
}
 80101e0:	bf00      	nop
 80101e2:	bd80      	pop	{r7, pc}

080101e4 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 80101e4:	b480      	push	{r7}
 80101e6:	b083      	sub	sp, #12
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 80101ec:	4a04      	ldr	r2, [pc, #16]	; (8010200 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6013      	str	r3, [r2, #0]
}
 80101f2:	bf00      	nop
 80101f4:	370c      	adds	r7, #12
 80101f6:	46bd      	mov	sp, r7
 80101f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fc:	4770      	bx	lr
 80101fe:	bf00      	nop
 8010200:	20006ae8 	.word	0x20006ae8

08010204 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8010204:	b480      	push	{r7}
 8010206:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8010208:	4b03      	ldr	r3, [pc, #12]	; (8010218 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	330c      	adds	r3, #12
}
 801020e:	4618      	mov	r0, r3
 8010210:	46bd      	mov	sp, r7
 8010212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010216:	4770      	bx	lr
 8010218:	20006ae8 	.word	0x20006ae8

0801021c <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 801021c:	b480      	push	{r7}
 801021e:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 8010220:	4b03      	ldr	r3, [pc, #12]	; (8010230 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	330b      	adds	r3, #11
}
 8010226:	4618      	mov	r0, r3
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr
 8010230:	20006ae8 	.word	0x20006ae8

08010234 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8010234:	b480      	push	{r7}
 8010236:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8010238:	4b03      	ldr	r3, [pc, #12]	; (8010248 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	330b      	adds	r3, #11
}
 801023e:	4618      	mov	r0, r3
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr
 8010248:	20006aec 	.word	0x20006aec

0801024c <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b082      	sub	sp, #8
 8010250:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 8010252:	4b0f      	ldr	r3, [pc, #60]	; (8010290 <Ot_Cmd_Transfer+0x44>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	2200      	movs	r2, #0
 8010258:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801025c:	725a      	strb	r2, [r3, #9]
 801025e:	2200      	movs	r2, #0
 8010260:	f042 0202 	orr.w	r2, r2, #2
 8010264:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8010266:	4b0a      	ldr	r3, [pc, #40]	; (8010290 <Ot_Cmd_Transfer+0x44>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	330c      	adds	r3, #12
 801026c:	685b      	ldr	r3, [r3, #4]
 801026e:	3302      	adds	r3, #2
 8010270:	009b      	lsls	r3, r3, #2
 8010272:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8010274:	4b06      	ldr	r3, [pc, #24]	; (8010290 <Ot_Cmd_Transfer+0x44>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	687a      	ldr	r2, [r7, #4]
 801027a:	b2d2      	uxtb	r2, r2
 801027c:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 801027e:	f7f9 fd81 	bl	8009d84 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 8010282:	f000 f829 	bl	80102d8 <Wait_Getting_Ack_From_M0>
}
 8010286:	bf00      	nop
 8010288:	3708      	adds	r7, #8
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}
 801028e:	bf00      	nop
 8010290:	20006ae8 	.word	0x20006ae8

08010294 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b082      	sub	sp, #8
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 801029c:	f000 f82e 	bl	80102fc <Receive_Ack_From_M0>
}
 80102a0:	bf00      	nop
 80102a2:	3708      	adds	r7, #8
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}

080102a8 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b082      	sub	sp, #8
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 80102b0:	4a04      	ldr	r2, [pc, #16]	; (80102c4 <TL_THREAD_NotReceived+0x1c>)
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 80102b6:	f000 f82d 	bl	8010314 <Receive_Notification_From_M0>
}
 80102ba:	bf00      	nop
 80102bc:	3708      	adds	r7, #8
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
 80102c2:	bf00      	nop
 80102c4:	20006aec 	.word	0x20006aec

080102c8 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 80102c8:	b480      	push	{r7}
 80102ca:	af00      	add	r7, sp, #0

}
 80102cc:	bf00      	nop
 80102ce:	46bd      	mov	sp, r7
 80102d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d4:	4770      	bx	lr
	...

080102d8 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 80102d8:	b480      	push	{r7}
 80102da:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 80102dc:	bf00      	nop
 80102de:	4b06      	ldr	r3, [pc, #24]	; (80102f8 <Wait_Getting_Ack_From_M0+0x20>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d0fb      	beq.n	80102de <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 80102e6:	4b04      	ldr	r3, [pc, #16]	; (80102f8 <Wait_Getting_Ack_From_M0+0x20>)
 80102e8:	2200      	movs	r2, #0
 80102ea:	601a      	str	r2, [r3, #0]
}
 80102ec:	bf00      	nop
 80102ee:	46bd      	mov	sp, r7
 80102f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f4:	4770      	bx	lr
 80102f6:	bf00      	nop
 80102f8:	20006af4 	.word	0x20006af4

080102fc <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 80102fc:	b480      	push	{r7}
 80102fe:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 8010300:	4b03      	ldr	r3, [pc, #12]	; (8010310 <Receive_Ack_From_M0+0x14>)
 8010302:	2201      	movs	r2, #1
 8010304:	601a      	str	r2, [r3, #0]
}
 8010306:	bf00      	nop
 8010308:	46bd      	mov	sp, r7
 801030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030e:	4770      	bx	lr
 8010310:	20006af4 	.word	0x20006af4

08010314 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8010318:	4b06      	ldr	r3, [pc, #24]	; (8010334 <Receive_Notification_From_M0+0x20>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	3301      	adds	r3, #1
 801031e:	4a05      	ldr	r2, [pc, #20]	; (8010334 <Receive_Notification_From_M0+0x20>)
 8010320:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 8010322:	4b05      	ldr	r3, [pc, #20]	; (8010338 <Receive_Notification_From_M0+0x24>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	2101      	movs	r1, #1
 8010328:	4618      	mov	r0, r3
 801032a:	f7fb f8c5 	bl	800b4b8 <osThreadFlagsSet>
}
 801032e:	bf00      	nop
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	20006af0 	.word	0x20006af0
 8010338:	20006af8 	.word	0x20006af8

0801033c <RxCpltCallback>:

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
static void RxCpltCallback(void)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8010340:	4b12      	ldr	r3, [pc, #72]	; (801038c <RxCpltCallback+0x50>)
 8010342:	881b      	ldrh	r3, [r3, #0]
 8010344:	b29b      	uxth	r3, r3
 8010346:	2bff      	cmp	r3, #255	; 0xff
 8010348:	d818      	bhi.n	801037c <RxCpltCallback+0x40>
  {
    CommandString[indexReceiveChar++] = aRxBuffer[0];
 801034a:	4b10      	ldr	r3, [pc, #64]	; (801038c <RxCpltCallback+0x50>)
 801034c:	881b      	ldrh	r3, [r3, #0]
 801034e:	b29b      	uxth	r3, r3
 8010350:	1c5a      	adds	r2, r3, #1
 8010352:	b291      	uxth	r1, r2
 8010354:	4a0d      	ldr	r2, [pc, #52]	; (801038c <RxCpltCallback+0x50>)
 8010356:	8011      	strh	r1, [r2, #0]
 8010358:	461a      	mov	r2, r3
 801035a:	4b0d      	ldr	r3, [pc, #52]	; (8010390 <RxCpltCallback+0x54>)
 801035c:	7819      	ldrb	r1, [r3, #0]
 801035e:	4b0d      	ldr	r3, [pc, #52]	; (8010394 <RxCpltCallback+0x58>)
 8010360:	5499      	strb	r1, [r3, r2]
    if (aRxBuffer[0] == '\r')
 8010362:	4b0b      	ldr	r3, [pc, #44]	; (8010390 <RxCpltCallback+0x54>)
 8010364:	781b      	ldrb	r3, [r3, #0]
 8010366:	2b0d      	cmp	r3, #13
 8010368:	d108      	bne.n	801037c <RxCpltCallback+0x40>
    {
      CptReceiveCmdFromUser = 1U;
 801036a:	4b0b      	ldr	r3, [pc, #44]	; (8010398 <RxCpltCallback+0x5c>)
 801036c:	2201      	movs	r2, #1
 801036e:	801a      	strh	r2, [r3, #0]

      /* UART task scheduling*/
      osThreadFlagsSet(OsTaskCliId,1);
 8010370:	4b0a      	ldr	r3, [pc, #40]	; (801039c <RxCpltCallback+0x60>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	2101      	movs	r1, #1
 8010376:	4618      	mov	r0, r3
 8010378:	f7fb f89e 	bl	800b4b8 <osThreadFlagsSet>
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1U, RxCpltCallback);
 801037c:	4b08      	ldr	r3, [pc, #32]	; (80103a0 <RxCpltCallback+0x64>)
 801037e:	2201      	movs	r2, #1
 8010380:	4903      	ldr	r1, [pc, #12]	; (8010390 <RxCpltCallback+0x54>)
 8010382:	2000      	movs	r0, #0
 8010384:	f7f1 fe0a 	bl	8001f9c <HW_UART_Receive_IT>
}
 8010388:	bf00      	nop
 801038a:	bd80      	pop	{r7, pc}
 801038c:	20006ae4 	.word	0x20006ae4
 8010390:	200068e4 	.word	0x200068e4
 8010394:	200069e4 	.word	0x200069e4
 8010398:	20006ae6 	.word	0x20006ae6
 801039c:	20006afc 	.word	0x20006afc
 80103a0:	0801033d 	.word	0x0801033d

080103a4 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 80103a8:	22ff      	movs	r2, #255	; 0xff
 80103aa:	2100      	movs	r1, #0
 80103ac:	4812      	ldr	r0, [pc, #72]	; (80103f8 <Send_CLI_To_M0+0x54>)
 80103ae:	f001 fbfe 	bl	8011bae <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 80103b2:	4b12      	ldr	r3, [pc, #72]	; (80103fc <Send_CLI_To_M0+0x58>)
 80103b4:	881b      	ldrh	r3, [r3, #0]
 80103b6:	b29b      	uxth	r3, r3
 80103b8:	461a      	mov	r2, r3
 80103ba:	4911      	ldr	r1, [pc, #68]	; (8010400 <Send_CLI_To_M0+0x5c>)
 80103bc:	480e      	ldr	r0, [pc, #56]	; (80103f8 <Send_CLI_To_M0+0x54>)
 80103be:	f001 fbeb 	bl	8011b98 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 80103c2:	4b0e      	ldr	r3, [pc, #56]	; (80103fc <Send_CLI_To_M0+0x58>)
 80103c4:	881b      	ldrh	r3, [r3, #0]
 80103c6:	b29b      	uxth	r3, r3
 80103c8:	b2da      	uxtb	r2, r3
 80103ca:	4b0e      	ldr	r3, [pc, #56]	; (8010404 <Send_CLI_To_M0+0x60>)
 80103cc:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 80103ce:	4b0d      	ldr	r3, [pc, #52]	; (8010404 <Send_CLI_To_M0+0x60>)
 80103d0:	2200      	movs	r2, #0
 80103d2:	725a      	strb	r2, [r3, #9]
 80103d4:	2200      	movs	r2, #0
 80103d6:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 80103d8:	4b0b      	ldr	r3, [pc, #44]	; (8010408 <Send_CLI_To_M0+0x64>)
 80103da:	2200      	movs	r2, #0
 80103dc:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 80103de:	4b07      	ldr	r3, [pc, #28]	; (80103fc <Send_CLI_To_M0+0x58>)
 80103e0:	2200      	movs	r2, #0
 80103e2:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 80103e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80103e8:	2100      	movs	r1, #0
 80103ea:	4805      	ldr	r0, [pc, #20]	; (8010400 <Send_CLI_To_M0+0x5c>)
 80103ec:	f001 fbdf 	bl	8011bae <memset>

  TL_CLI_SendCmd();
 80103f0:	f7f9 fcd6 	bl	8009da0 <TL_CLI_SendCmd>
}
 80103f4:	bf00      	nop
 80103f6:	bd80      	pop	{r7, pc}
 80103f8:	20030c80 	.word	0x20030c80
 80103fc:	20006ae4 	.word	0x20006ae4
 8010400:	200069e4 	.word	0x200069e4
 8010404:	20030c74 	.word	0x20030c74
 8010408:	20006ae6 	.word	0x20006ae6

0801040c <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8010410:	f7f9 fce2 	bl	8009dd8 <TL_THREAD_CliSendAck>
}
 8010414:	bf00      	nop
 8010416:	bd80      	pop	{r7, pc}

08010418 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 801041c:	4a08      	ldr	r2, [pc, #32]	; (8010440 <APP_THREAD_Init_UART_CLI+0x28>)
 801041e:	2100      	movs	r1, #0
 8010420:	4808      	ldr	r0, [pc, #32]	; (8010444 <APP_THREAD_Init_UART_CLI+0x2c>)
 8010422:	f7fa ffa3 	bl	800b36c <osThreadNew>
 8010426:	4602      	mov	r2, r0
 8010428:	4b07      	ldr	r3, [pc, #28]	; (8010448 <APP_THREAD_Init_UART_CLI+0x30>)
 801042a:	601a      	str	r2, [r3, #0]
#endif /* (CFG_FULL_LOW_POWER == 0) */

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
  MX_USART1_UART_Init();
 801042c:	f7f2 fc32 	bl	8002c94 <MX_USART1_UART_Init>
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
 8010430:	4b06      	ldr	r3, [pc, #24]	; (801044c <APP_THREAD_Init_UART_CLI+0x34>)
 8010432:	2201      	movs	r2, #1
 8010434:	4906      	ldr	r1, [pc, #24]	; (8010450 <APP_THREAD_Init_UART_CLI+0x38>)
 8010436:	2000      	movs	r0, #0
 8010438:	f7f1 fdb0 	bl	8001f9c <HW_UART_Receive_IT>
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 801043c:	bf00      	nop
 801043e:	bd80      	pop	{r7, pc}
 8010440:	08014174 	.word	0x08014174
 8010444:	0801016f 	.word	0x0801016f
 8010448:	20006afc 	.word	0x20006afc
 801044c:	0801033d 	.word	0x0801033d
 8010450:	200068e4 	.word	0x200068e4

08010454 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8010458:	4b06      	ldr	r3, [pc, #24]	; (8010474 <APP_THREAD_TL_THREAD_INIT+0x20>)
 801045a:	4a07      	ldr	r2, [pc, #28]	; (8010478 <APP_THREAD_TL_THREAD_INIT+0x24>)
 801045c:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 801045e:	4b05      	ldr	r3, [pc, #20]	; (8010474 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8010460:	4a06      	ldr	r2, [pc, #24]	; (801047c <APP_THREAD_TL_THREAD_INIT+0x28>)
 8010462:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8010464:	4b03      	ldr	r3, [pc, #12]	; (8010474 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8010466:	4a06      	ldr	r2, [pc, #24]	; (8010480 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8010468:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 801046a:	4802      	ldr	r0, [pc, #8]	; (8010474 <APP_THREAD_TL_THREAD_INIT+0x20>)
 801046c:	f7f9 fc6e 	bl	8009d4c <TL_THREAD_Init>
}
 8010470:	bf00      	nop
 8010472:	bd80      	pop	{r7, pc}
 8010474:	200301e0 	.word	0x200301e0
 8010478:	20030a5c 	.word	0x20030a5c
 801047c:	20030b68 	.word	0x20030b68
 8010480:	20030c74 	.word	0x20030c74

08010484 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b084      	sub	sp, #16
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	7adb      	ldrb	r3, [r3, #11]
 8010494:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	330c      	adds	r3, #12
 801049a:	490b      	ldr	r1, [pc, #44]	; (80104c8 <TL_THREAD_CliNotReceived+0x44>)
 801049c:	4618      	mov	r0, r3
 801049e:	f7ef fe6f 	bl	8000180 <strcmp>
 80104a2:	4603      	mov	r3, r0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d009      	beq.n	80104bc <TL_THREAD_CliNotReceived+0x38>
  {
    /* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	f103 010c 	add.w	r1, r3, #12
 80104ae:	7afb      	ldrb	r3, [r7, #11]
 80104b0:	b29a      	uxth	r2, r3
 80104b2:	4b06      	ldr	r3, [pc, #24]	; (80104cc <TL_THREAD_CliNotReceived+0x48>)
 80104b4:	2000      	movs	r0, #0
 80104b6:	f7f1 fdab 	bl	8002010 <HW_UART_Transmit_IT>
  }
  else
  {
    Send_CLI_Ack_For_OT();
  }
}
 80104ba:	e001      	b.n	80104c0 <TL_THREAD_CliNotReceived+0x3c>
    Send_CLI_Ack_For_OT();
 80104bc:	f7ff ffa6 	bl	801040c <Send_CLI_Ack_For_OT>
}
 80104c0:	bf00      	nop
 80104c2:	3710      	adds	r7, #16
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}
 80104c8:	08013910 	.word	0x08013910
 80104cc:	080104d1 	.word	0x080104d1

080104d0 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	af00      	add	r7, sp, #0
  Send_CLI_Ack_For_OT();
 80104d4:	f7ff ff9a 	bl	801040c <Send_CLI_Ack_For_OT>
}
 80104d8:	bf00      	nop
 80104da:	bd80      	pop	{r7, pc}

080104dc <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 80104e0:	4b09      	ldr	r3, [pc, #36]	; (8010508 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d00d      	beq.n	8010504 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 80104e8:	4b07      	ldr	r3, [pc, #28]	; (8010508 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	2b01      	cmp	r3, #1
 80104ee:	d904      	bls.n	80104fa <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 80104f0:	2100      	movs	r1, #0
 80104f2:	200c      	movs	r0, #12
 80104f4:	f7ff fcc4 	bl	800fe80 <APP_THREAD_Error>
 80104f8:	e001      	b.n	80104fe <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 80104fa:	f7f9 fed7 	bl	800a2ac <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 80104fe:	4b02      	ldr	r3, [pc, #8]	; (8010508 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8010500:	2200      	movs	r2, #0
 8010502:	601a      	str	r2, [r3, #0]
  }
}
 8010504:	bf00      	nop
 8010506:	bd80      	pop	{r7, pc}
 8010508:	20006af0 	.word	0x20006af0

0801050c <DTC_App_Init>:
 *
 * PUBLIC FUNCTIONS
 *
 *************************************************************/
void DTC_App_Init( void )
{
 801050c:	b580      	push	{r7, lr}
 801050e:	af00      	add	r7, sp, #0
  SVCCTL_RegisterCltHandler(DTC_Event_Handler);
 8010510:	4808      	ldr	r0, [pc, #32]	; (8010534 <DTC_App_Init+0x28>)
 8010512:	f7f8 fe5d 	bl	80091d0 <SVCCTL_RegisterCltHandler>

//  UTIL_SEQ_RegTask( 1<< CFG_TASK_APP_DATA_THROUGHPUT_ID, UTIL_SEQ_RFU, DataThroughput_Calculation);

  DataTransferClientContext.connHandle = 0xFFFF;
 8010516:	4b08      	ldr	r3, [pc, #32]	; (8010538 <DTC_App_Init+0x2c>)
 8010518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801051c:	801a      	strh	r2, [r3, #0]
  /* Create timer for Data Throughput */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(TimerDataThroughput_Id), hw_ts_SingleShot, DataThroughputTimer);
 801051e:	4b07      	ldr	r3, [pc, #28]	; (801053c <DTC_App_Init+0x30>)
 8010520:	2200      	movs	r2, #0
 8010522:	4907      	ldr	r1, [pc, #28]	; (8010540 <DTC_App_Init+0x34>)
 8010524:	2000      	movs	r0, #0
 8010526:	f7f1 fba5 	bl	8001c74 <HW_TS_Create>

  APP_DBG_MSG("-- DT CLIENT INITIALIZED \n");
 801052a:	4806      	ldr	r0, [pc, #24]	; (8010544 <DTC_App_Init+0x38>)
 801052c:	f001 fbbc 	bl	8011ca8 <puts>

  return;
 8010530:	bf00      	nop
}
 8010532:	bd80      	pop	{r7, pc}
 8010534:	080105b9 	.word	0x080105b9
 8010538:	20006fcc 	.word	0x20006fcc
 801053c:	080109b9 	.word	0x080109b9
 8010540:	20006b20 	.word	0x20006b20
 8010544:	08013914 	.word	0x08013914

08010548 <DTC_App_LinkReadyNotification>:

void DTC_App_LinkReadyNotification(uint16_t ConnectionHandle)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b084      	sub	sp, #16
 801054c:	af00      	add	r7, sp, #0
 801054e:	4603      	mov	r3, r0
 8010550:	80fb      	strh	r3, [r7, #6]
#if(CFG_SERVER_ONLY != 1)
  tBleStatus status;
  uint16_t enable_notification = 0x0001;
 8010552:	2301      	movs	r3, #1
 8010554:	81bb      	strh	r3, [r7, #12]
#endif  

  DataTransferClientContext.connHandle = ConnectionHandle;
 8010556:	4a15      	ldr	r2, [pc, #84]	; (80105ac <DTC_App_LinkReadyNotification+0x64>)
 8010558:	88fb      	ldrh	r3, [r7, #6]
 801055a:	8013      	strh	r3, [r2, #0]

#if(CFG_BLE_CENTRAL != 1)
  GattProcReq(GATT_PROC_MTU_UPDATE);
 801055c:	2000      	movs	r0, #0
 801055e:	f000 fa49 	bl	80109f4 <GattProcReq>
#endif
#if(CFG_SERVER_ONLY != 1)
  GattProcReq(GATT_PROC_DISC_ALL_PRIMARY_SERVICES);
 8010562:	2001      	movs	r0, #1
 8010564:	f000 fa46 	bl	80109f4 <GattProcReq>
  GattProcReq(GATT_PROC_DISC_ALL_CHAR_OF_DT_SERVICE);
 8010568:	2002      	movs	r0, #2
 801056a:	f000 fa43 	bl	80109f4 <GattProcReq>
  GattProcReq(GATT_PROC_DISC_TX_CHAR_DESC);
 801056e:	2003      	movs	r0, #3
 8010570:	f000 fa40 	bl	80109f4 <GattProcReq>

  /**
   * Enable notification on the remote server
   */
  APP_DBG_MSG("Enable notification on the remote server\n");
 8010574:	480e      	ldr	r0, [pc, #56]	; (80105b0 <DTC_App_LinkReadyNotification+0x68>)
 8010576:	f001 fb97 	bl	8011ca8 <puts>

  status = aci_gatt_write_char_desc(
 801057a:	4b0c      	ldr	r3, [pc, #48]	; (80105ac <DTC_App_LinkReadyNotification+0x64>)
 801057c:	8818      	ldrh	r0, [r3, #0]
 801057e:	4b0b      	ldr	r3, [pc, #44]	; (80105ac <DTC_App_LinkReadyNotification+0x64>)
 8010580:	8919      	ldrh	r1, [r3, #8]
 8010582:	f107 030c 	add.w	r3, r7, #12
 8010586:	2202      	movs	r2, #2
 8010588:	f7f8 f8cc 	bl	8008724 <aci_gatt_write_char_desc>
 801058c:	4603      	mov	r3, r0
 801058e:	73fb      	strb	r3, [r7, #15]
      DataTransferClientContext.connHandle,
      DataTransferClientContext.DataTransferTxDescHandle,
      2,
      (uint8_t *) &enable_notification);
  if (status != BLE_STATUS_SUCCESS)
 8010590:	7bfb      	ldrb	r3, [r7, #15]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d005      	beq.n	80105a2 <DTC_App_LinkReadyNotification+0x5a>
  {
    APP_DBG_MSG("Enable notification cmd failure: 0x%x\n", status);
 8010596:	7bfb      	ldrb	r3, [r7, #15]
 8010598:	4619      	mov	r1, r3
 801059a:	4806      	ldr	r0, [pc, #24]	; (80105b4 <DTC_App_LinkReadyNotification+0x6c>)
 801059c:	f001 fb10 	bl	8011bc0 <iprintf>
#endif
  
#if(CFG_BLE_CENTRAL != 0)
    UTIL_SEQ_SetTask(1<<CFG_TASK_CONN_UPDATE_ID, CFG_SCH_PRIO_0); 
#endif
  return;
 80105a0:	bf00      	nop
 80105a2:	bf00      	nop
}
 80105a4:	3710      	adds	r7, #16
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}
 80105aa:	bf00      	nop
 80105ac:	20006fcc 	.word	0x20006fcc
 80105b0:	08013930 	.word	0x08013930
 80105b4:	0801395c 	.word	0x0801395c

080105b8 <DTC_Event_Handler>:
 *
 * CALLBACK FUNCTIONS
 *
 *************************************************************/
static SVCCTL_EvtAckStatus_t DTC_Event_Handler( void *Event )
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b090      	sub	sp, #64	; 0x40
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
  hci_event_pckt * event_pckt;
  evt_blue_aci * blue_evt;
  uint8_t CRC_Result;
  uint8_t CRC_Received;

  return_value = SVCCTL_EvtNotAck;
 80105c0:	2300      	movs	r3, #0
 80105c2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  event_pckt = (hci_event_pckt *) (((hci_uart_pckt*) Event)->data);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	3301      	adds	r3, #1
 80105ca:	637b      	str	r3, [r7, #52]	; 0x34

  switch (event_pckt->evt)
 80105cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	2bff      	cmp	r3, #255	; 0xff
 80105d2:	d000      	beq.n	80105d6 <DTC_Event_Handler+0x1e>

        default:
          break;
        }
        default:
          break;
 80105d4:	e1d9      	b.n	801098a <DTC_Event_Handler+0x3d2>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 80105d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105d8:	3302      	adds	r3, #2
 80105da:	633b      	str	r3, [r7, #48]	; 0x30
      switch (blue_evt->ecode)
 80105dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105de:	881b      	ldrh	r3, [r3, #0]
 80105e0:	b29b      	uxth	r3, r3
 80105e2:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 80105e6:	2b0c      	cmp	r3, #12
 80105e8:	f200 81c6 	bhi.w	8010978 <DTC_Event_Handler+0x3c0>
 80105ec:	a201      	add	r2, pc, #4	; (adr r2, 80105f4 <DTC_Event_Handler+0x3c>)
 80105ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105f2:	bf00      	nop
 80105f4:	080107cf 	.word	0x080107cf
 80105f8:	08010979 	.word	0x08010979
 80105fc:	08010729 	.word	0x08010729
 8010600:	08010979 	.word	0x08010979
 8010604:	08010979 	.word	0x08010979
 8010608:	08010979 	.word	0x08010979
 801060c:	08010629 	.word	0x08010629
 8010610:	08010979 	.word	0x08010979
 8010614:	08010979 	.word	0x08010979
 8010618:	08010979 	.word	0x08010979
 801061c:	08010979 	.word	0x08010979
 8010620:	0801088d 	.word	0x0801088d
 8010624:	0801096b 	.word	0x0801096b
          aci_att_read_by_group_type_resp_event_rp0 *pr = (void*) blue_evt->data;
 8010628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801062a:	3302      	adds	r3, #2
 801062c:	627b      	str	r3, [r7, #36]	; 0x24
          handle = pr->Connection_Handle;
 801062e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010630:	781a      	ldrb	r2, [r3, #0]
 8010632:	785b      	ldrb	r3, [r3, #1]
 8010634:	021b      	lsls	r3, r3, #8
 8010636:	4313      	orrs	r3, r2
 8010638:	847b      	strh	r3, [r7, #34]	; 0x22
          BSP_LED_On(LED_BLUE);
 801063a:	2000      	movs	r0, #0
 801063c:	f7f1 fede 	bl	80023fc <BSP_LED_On>
          APP_DBG_MSG("DTC_Event_Handler: EVT_BLUE_ATT_READ_BY_GROUP_TYPE_RESP\n");
 8010640:	488d      	ldr	r0, [pc, #564]	; (8010878 <DTC_Event_Handler+0x2c0>)
 8010642:	f001 fb31 	bl	8011ca8 <puts>
          DataTransferClientContext.connHandle = handle;
 8010646:	4a8d      	ldr	r2, [pc, #564]	; (801087c <DTC_Event_Handler+0x2c4>)
 8010648:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801064a:	8013      	strh	r3, [r2, #0]
          numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 801064c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064e:	78da      	ldrb	r2, [r3, #3]
 8010650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010652:	789b      	ldrb	r3, [r3, #2]
 8010654:	fbb2 f3f3 	udiv	r3, r2, r3
 8010658:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
          if (pr->Attribute_Data_Length == 20)
 801065c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065e:	789b      	ldrb	r3, [r3, #2]
 8010660:	2b14      	cmp	r3, #20
 8010662:	f040 818b 	bne.w	801097c <DTC_Event_Handler+0x3c4>
            idx = 16;
 8010666:	2310      	movs	r3, #16
 8010668:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
              for (i = 0; i < numServ; i++)
 801066c:	2300      	movs	r3, #0
 801066e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010672:	e052      	b.n	801071a <DTC_Event_Handler+0x162>
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 8010674:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801067a:	4413      	add	r3, r2
 801067c:	791b      	ldrb	r3, [r3, #4]
 801067e:	b29a      	uxth	r2, r3
 8010680:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010684:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010686:	440b      	add	r3, r1
 8010688:	3304      	adds	r3, #4
 801068a:	3301      	adds	r3, #1
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	b29b      	uxth	r3, r3
 8010690:	021b      	lsls	r3, r3, #8
 8010692:	b29b      	uxth	r3, r3
 8010694:	4313      	orrs	r3, r2
 8010696:	83fb      	strh	r3, [r7, #30]
                if (uuid == DATA_TRANSFER_SERVICE_UUID)
 8010698:	8bfb      	ldrh	r3, [r7, #30]
 801069a:	f64f 6280 	movw	r2, #65152	; 0xfe80
 801069e:	4293      	cmp	r3, r2
 80106a0:	d131      	bne.n	8010706 <DTC_Event_Handler+0x14e>
                  DataTransferClientContext.DataTransferServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 80106a2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80106a6:	3b10      	subs	r3, #16
 80106a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106aa:	4413      	add	r3, r2
 80106ac:	791b      	ldrb	r3, [r3, #4]
 80106ae:	b29a      	uxth	r2, r3
 80106b0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80106b4:	3b10      	subs	r3, #16
 80106b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80106b8:	440b      	add	r3, r1
 80106ba:	3304      	adds	r3, #4
 80106bc:	3301      	adds	r3, #1
 80106be:	781b      	ldrb	r3, [r3, #0]
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	021b      	lsls	r3, r3, #8
 80106c4:	b29b      	uxth	r3, r3
 80106c6:	4313      	orrs	r3, r2
 80106c8:	b29a      	uxth	r2, r3
 80106ca:	4b6c      	ldr	r3, [pc, #432]	; (801087c <DTC_Event_Handler+0x2c4>)
 80106cc:	805a      	strh	r2, [r3, #2]
                  DataTransferClientContext.DataTransferServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 80106ce:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80106d2:	3b0e      	subs	r3, #14
 80106d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106d6:	4413      	add	r3, r2
 80106d8:	791b      	ldrb	r3, [r3, #4]
 80106da:	b29a      	uxth	r2, r3
 80106dc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80106e0:	3b0e      	subs	r3, #14
 80106e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80106e4:	440b      	add	r3, r1
 80106e6:	3304      	adds	r3, #4
 80106e8:	3301      	adds	r3, #1
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	b29b      	uxth	r3, r3
 80106ee:	021b      	lsls	r3, r3, #8
 80106f0:	b29b      	uxth	r3, r3
 80106f2:	4313      	orrs	r3, r2
 80106f4:	b29a      	uxth	r2, r3
 80106f6:	4b61      	ldr	r3, [pc, #388]	; (801087c <DTC_Event_Handler+0x2c4>)
 80106f8:	809a      	strh	r2, [r3, #4]
                  BSP_LED_On(LED_GREEN);
 80106fa:	2001      	movs	r0, #1
 80106fc:	f7f1 fe7e 	bl	80023fc <BSP_LED_On>
                  APP_DBG_MSG("DTC_Event_Handler: DATA_TRANSFER_SERVICE_UUID found !\n");
 8010700:	485f      	ldr	r0, [pc, #380]	; (8010880 <DTC_Event_Handler+0x2c8>)
 8010702:	f001 fad1 	bl	8011ca8 <puts>
                idx += 6;
 8010706:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801070a:	3306      	adds	r3, #6
 801070c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
              for (i = 0; i < numServ; i++)
 8010710:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010714:	3301      	adds	r3, #1
 8010716:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801071a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801071e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010722:	429a      	cmp	r2, r3
 8010724:	d3a6      	bcc.n	8010674 <DTC_Event_Handler+0xbc>
          break;
 8010726:	e129      	b.n	801097c <DTC_Event_Handler+0x3c4>
          aci_att_read_by_type_resp_event_rp0 *pr = (void*) blue_evt->data;
 8010728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801072a:	3302      	adds	r3, #2
 801072c:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG("DTC_Event_Handler: EVT_BLUE_ATT_READ_BY_TYPE_RESP\n");
 801072e:	4855      	ldr	r0, [pc, #340]	; (8010884 <DTC_Event_Handler+0x2cc>)
 8010730:	f001 faba 	bl	8011ca8 <puts>
          idx = 17;
 8010734:	2311      	movs	r3, #17
 8010736:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
          if (pr->Handle_Value_Pair_Length == 21)
 801073a:	69bb      	ldr	r3, [r7, #24]
 801073c:	789b      	ldrb	r3, [r3, #2]
 801073e:	2b15      	cmp	r3, #21
 8010740:	f040 811e 	bne.w	8010980 <DTC_Event_Handler+0x3c8>
            pr->Data_Length -= 1;
 8010744:	69bb      	ldr	r3, [r7, #24]
 8010746:	78db      	ldrb	r3, [r3, #3]
 8010748:	3b01      	subs	r3, #1
 801074a:	b2da      	uxtb	r2, r3
 801074c:	69bb      	ldr	r3, [r7, #24]
 801074e:	70da      	strb	r2, [r3, #3]
            while(pr->Data_Length > 0)
 8010750:	e038      	b.n	80107c4 <DTC_Event_Handler+0x20c>
              uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 8010752:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010756:	69ba      	ldr	r2, [r7, #24]
 8010758:	4413      	add	r3, r2
 801075a:	791b      	ldrb	r3, [r3, #4]
 801075c:	b29a      	uxth	r2, r3
 801075e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010762:	69b9      	ldr	r1, [r7, #24]
 8010764:	440b      	add	r3, r1
 8010766:	3304      	adds	r3, #4
 8010768:	3301      	adds	r3, #1
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	b29b      	uxth	r3, r3
 801076e:	021b      	lsls	r3, r3, #8
 8010770:	b29b      	uxth	r3, r3
 8010772:	4313      	orrs	r3, r2
 8010774:	82fb      	strh	r3, [r7, #22]
              handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 8010776:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801077a:	3b0e      	subs	r3, #14
 801077c:	69ba      	ldr	r2, [r7, #24]
 801077e:	4413      	add	r3, r2
 8010780:	791b      	ldrb	r3, [r3, #4]
 8010782:	b29a      	uxth	r2, r3
 8010784:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010788:	3b0e      	subs	r3, #14
 801078a:	69b9      	ldr	r1, [r7, #24]
 801078c:	440b      	add	r3, r1
 801078e:	3304      	adds	r3, #4
 8010790:	3301      	adds	r3, #1
 8010792:	781b      	ldrb	r3, [r3, #0]
 8010794:	b29b      	uxth	r3, r3
 8010796:	021b      	lsls	r3, r3, #8
 8010798:	b29b      	uxth	r3, r3
 801079a:	4313      	orrs	r3, r2
 801079c:	82bb      	strh	r3, [r7, #20]
              if (uuid == DATA_TRANSFER_TX_CHAR_UUID)
 801079e:	8afb      	ldrh	r3, [r7, #22]
 80107a0:	f64f 6281 	movw	r2, #65153	; 0xfe81
 80107a4:	4293      	cmp	r3, r2
 80107a6:	d102      	bne.n	80107ae <DTC_Event_Handler+0x1f6>
                DataTransferClientContext.DataTransferTxCharHdle = handle;
 80107a8:	4a34      	ldr	r2, [pc, #208]	; (801087c <DTC_Event_Handler+0x2c4>)
 80107aa:	8abb      	ldrh	r3, [r7, #20]
 80107ac:	80d3      	strh	r3, [r2, #6]
              pr->Data_Length -= 21;
 80107ae:	69bb      	ldr	r3, [r7, #24]
 80107b0:	78db      	ldrb	r3, [r3, #3]
 80107b2:	3b15      	subs	r3, #21
 80107b4:	b2da      	uxtb	r2, r3
 80107b6:	69bb      	ldr	r3, [r7, #24]
 80107b8:	70da      	strb	r2, [r3, #3]
              idx += 21;
 80107ba:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80107be:	3315      	adds	r3, #21
 80107c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
            while(pr->Data_Length > 0)
 80107c4:	69bb      	ldr	r3, [r7, #24]
 80107c6:	78db      	ldrb	r3, [r3, #3]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d1c2      	bne.n	8010752 <DTC_Event_Handler+0x19a>
        break;
 80107cc:	e0d8      	b.n	8010980 <DTC_Event_Handler+0x3c8>
          aci_att_find_info_resp_event_rp0 *pr = (void*) blue_evt->data;
 80107ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d0:	3302      	adds	r3, #2
 80107d2:	613b      	str	r3, [r7, #16]
          numDesc = (pr->Event_Data_Length) / 4;
 80107d4:	693b      	ldr	r3, [r7, #16]
 80107d6:	78db      	ldrb	r3, [r3, #3]
 80107d8:	089b      	lsrs	r3, r3, #2
 80107da:	73fb      	strb	r3, [r7, #15]
          idx = 0;
 80107dc:	2300      	movs	r3, #0
 80107de:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
          if (pr->Format == UUID_TYPE_16)
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	789b      	ldrb	r3, [r3, #2]
 80107e6:	2b01      	cmp	r3, #1
 80107e8:	f040 80cc 	bne.w	8010984 <DTC_Event_Handler+0x3cc>
            for (i = 0; i < numDesc; i++)
 80107ec:	2300      	movs	r3, #0
 80107ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80107f2:	e03a      	b.n	801086a <DTC_Event_Handler+0x2b2>
              handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 80107f4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80107f8:	693a      	ldr	r2, [r7, #16]
 80107fa:	4413      	add	r3, r2
 80107fc:	791b      	ldrb	r3, [r3, #4]
 80107fe:	b29a      	uxth	r2, r3
 8010800:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010804:	6939      	ldr	r1, [r7, #16]
 8010806:	440b      	add	r3, r1
 8010808:	3304      	adds	r3, #4
 801080a:	3301      	adds	r3, #1
 801080c:	781b      	ldrb	r3, [r3, #0]
 801080e:	b29b      	uxth	r3, r3
 8010810:	021b      	lsls	r3, r3, #8
 8010812:	b29b      	uxth	r3, r3
 8010814:	4313      	orrs	r3, r2
 8010816:	81bb      	strh	r3, [r7, #12]
              uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx + 2]);
 8010818:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801081c:	3302      	adds	r3, #2
 801081e:	693a      	ldr	r2, [r7, #16]
 8010820:	4413      	add	r3, r2
 8010822:	791b      	ldrb	r3, [r3, #4]
 8010824:	b29a      	uxth	r2, r3
 8010826:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801082a:	3302      	adds	r3, #2
 801082c:	6939      	ldr	r1, [r7, #16]
 801082e:	440b      	add	r3, r1
 8010830:	3304      	adds	r3, #4
 8010832:	3301      	adds	r3, #1
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	b29b      	uxth	r3, r3
 8010838:	021b      	lsls	r3, r3, #8
 801083a:	b29b      	uxth	r3, r3
 801083c:	4313      	orrs	r3, r2
 801083e:	817b      	strh	r3, [r7, #10]
              if (uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 8010840:	897b      	ldrh	r3, [r7, #10]
 8010842:	f642 1202 	movw	r2, #10498	; 0x2902
 8010846:	4293      	cmp	r3, r2
 8010848:	d105      	bne.n	8010856 <DTC_Event_Handler+0x29e>
                APP_DBG_MSG("DTC_Event_Handler: DTC_DISCOVER_TX_CHAR_DESC ready to enable notification\n");
 801084a:	480f      	ldr	r0, [pc, #60]	; (8010888 <DTC_Event_Handler+0x2d0>)
 801084c:	f001 fa2c 	bl	8011ca8 <puts>
                DataTransferClientContext.DataTransferTxDescHandle = handle;
 8010850:	4a0a      	ldr	r2, [pc, #40]	; (801087c <DTC_Event_Handler+0x2c4>)
 8010852:	89bb      	ldrh	r3, [r7, #12]
 8010854:	8113      	strh	r3, [r2, #8]
              idx += 4;
 8010856:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801085a:	3304      	adds	r3, #4
 801085c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
            for (i = 0; i < numDesc; i++)
 8010860:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010864:	3301      	adds	r3, #1
 8010866:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801086a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801086e:	7bfb      	ldrb	r3, [r7, #15]
 8010870:	429a      	cmp	r2, r3
 8010872:	d3bf      	bcc.n	80107f4 <DTC_Event_Handler+0x23c>
        break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 8010874:	e086      	b.n	8010984 <DTC_Event_Handler+0x3cc>
 8010876:	bf00      	nop
 8010878:	08013984 	.word	0x08013984
 801087c:	20006fcc 	.word	0x20006fcc
 8010880:	080139bc 	.word	0x080139bc
 8010884:	080139f4 	.word	0x080139f4
 8010888:	08013a28 	.word	0x08013a28
          aci_gatt_notification_event_rp0 *pr = (void*) blue_evt->data;
 801088c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088e:	3302      	adds	r3, #2
 8010890:	62fb      	str	r3, [r7, #44]	; 0x2c
          if ((pr->Attribute_Handle == DataTransferClientContext.DataTransferTxCharHdle)
 8010892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010894:	885b      	ldrh	r3, [r3, #2]
 8010896:	b29a      	uxth	r2, r3
 8010898:	4b3f      	ldr	r3, [pc, #252]	; (8010998 <DTC_Event_Handler+0x3e0>)
 801089a:	88db      	ldrh	r3, [r3, #6]
 801089c:	429a      	cmp	r2, r3
 801089e:	d173      	bne.n	8010988 <DTC_Event_Handler+0x3d0>
              && (pr->Attribute_Value_Length > (2)))
 80108a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a2:	791b      	ldrb	r3, [r3, #4]
 80108a4:	2b02      	cmp	r3, #2
 80108a6:	d96f      	bls.n	8010988 <DTC_Event_Handler+0x3d0>
            NotificationData.DataTransfered.Length = pr->Attribute_Value_Length;
 80108a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108aa:	791b      	ldrb	r3, [r3, #4]
 80108ac:	461a      	mov	r2, r3
 80108ae:	4b3b      	ldr	r3, [pc, #236]	; (801099c <DTC_Event_Handler+0x3e4>)
 80108b0:	611a      	str	r2, [r3, #16]
            NotificationData.DataTransfered.pPayload = (pr->Attribute_Value);
 80108b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108b4:	3305      	adds	r3, #5
 80108b6:	4a39      	ldr	r2, [pc, #228]	; (801099c <DTC_Event_Handler+0x3e4>)
 80108b8:	6053      	str	r3, [r2, #4]
            NotificationData.DataTransfered.pPayload_n = *((uint32_t*) &(pr->Attribute_Value[0]));
 80108ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108bc:	3305      	adds	r3, #5
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	4a36      	ldr	r2, [pc, #216]	; (801099c <DTC_Event_Handler+0x3e4>)
 80108c2:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80108c4:	b672      	cpsid	i
            if (NotificationData.DataTransfered.pPayload_n >= (NotificationData.DataTransfered.pPayload_n_1 + 2))
 80108c6:	4b35      	ldr	r3, [pc, #212]	; (801099c <DTC_Event_Handler+0x3e4>)
 80108c8:	68da      	ldr	r2, [r3, #12]
 80108ca:	4b34      	ldr	r3, [pc, #208]	; (801099c <DTC_Event_Handler+0x3e4>)
 80108cc:	689b      	ldr	r3, [r3, #8]
 80108ce:	3302      	adds	r3, #2
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d30f      	bcc.n	80108f4 <DTC_Event_Handler+0x33c>
                  ((NotificationData.DataTransfered.pPayload_n - NotificationData.DataTransfered.pPayload_n_1) - 1);
 80108d4:	4b31      	ldr	r3, [pc, #196]	; (801099c <DTC_Event_Handler+0x3e4>)
 80108d6:	68db      	ldr	r3, [r3, #12]
 80108d8:	b29a      	uxth	r2, r3
 80108da:	4b30      	ldr	r3, [pc, #192]	; (801099c <DTC_Event_Handler+0x3e4>)
 80108dc:	689b      	ldr	r3, [r3, #8]
 80108de:	b29b      	uxth	r3, r3
 80108e0:	1ad3      	subs	r3, r2, r3
 80108e2:	b29a      	uxth	r2, r3
              packet_lost +=
 80108e4:	4b2e      	ldr	r3, [pc, #184]	; (80109a0 <DTC_Event_Handler+0x3e8>)
 80108e6:	881b      	ldrh	r3, [r3, #0]
 80108e8:	4413      	add	r3, r2
 80108ea:	b29b      	uxth	r3, r3
 80108ec:	3b01      	subs	r3, #1
 80108ee:	b29a      	uxth	r2, r3
 80108f0:	4b2b      	ldr	r3, [pc, #172]	; (80109a0 <DTC_Event_Handler+0x3e8>)
 80108f2:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80108f4:	b662      	cpsie	i
            CRC_Result = APP_BLE_ComputeCRC8((uint8_t*) (pr->Attribute_Value), (pr->Attribute_Value_Length) - 1);
 80108f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108f8:	1d5a      	adds	r2, r3, #5
 80108fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108fc:	791b      	ldrb	r3, [r3, #4]
 80108fe:	3b01      	subs	r3, #1
 8010900:	b2db      	uxtb	r3, r3
 8010902:	4619      	mov	r1, r3
 8010904:	4610      	mov	r0, r2
 8010906:	f7ff f957 	bl	800fbb8 <APP_BLE_ComputeCRC8>
 801090a:	4603      	mov	r3, r0
 801090c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            CRC_Received = (uint8_t) (pr->Attribute_Value[DATA_NOTIFICATION_MAX_PACKET_SIZE-1]);
 8010910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010912:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8010916:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if (CRC_Received != CRC_Result)
 801091a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 801091e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010922:	429a      	cmp	r2, r3
 8010924:	d00a      	beq.n	801093c <DTC_Event_Handler+0x384>
              N+=1;
 8010926:	4b1f      	ldr	r3, [pc, #124]	; (80109a4 <DTC_Event_Handler+0x3ec>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	3301      	adds	r3, #1
 801092c:	4a1d      	ldr	r2, [pc, #116]	; (80109a4 <DTC_Event_Handler+0x3ec>)
 801092e:	6013      	str	r3, [r2, #0]
              APP_DBG_MSG("** data error **  N= %d \r\n",(int)N);
 8010930:	4b1c      	ldr	r3, [pc, #112]	; (80109a4 <DTC_Event_Handler+0x3ec>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	4619      	mov	r1, r3
 8010936:	481c      	ldr	r0, [pc, #112]	; (80109a8 <DTC_Event_Handler+0x3f0>)
 8010938:	f001 f942 	bl	8011bc0 <iprintf>
            NotificationData.DataTransfered.pPayload_n_1 = NotificationData.DataTransfered.pPayload_n;
 801093c:	4b17      	ldr	r3, [pc, #92]	; (801099c <DTC_Event_Handler+0x3e4>)
 801093e:	68db      	ldr	r3, [r3, #12]
 8010940:	4a16      	ldr	r2, [pc, #88]	; (801099c <DTC_Event_Handler+0x3e4>)
 8010942:	6093      	str	r3, [r2, #8]
            if (DataTransfered == 0)
 8010944:	4b19      	ldr	r3, [pc, #100]	; (80109ac <DTC_Event_Handler+0x3f4>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d106      	bne.n	801095a <DTC_Event_Handler+0x3a2>
              HW_TS_Start(TimerDataThroughput_Id, DATA_THROUGHPUT_MEASUREMENT);
 801094c:	4b18      	ldr	r3, [pc, #96]	; (80109b0 <DTC_Event_Handler+0x3f8>)
 801094e:	781b      	ldrb	r3, [r3, #0]
 8010950:	f640 0101 	movw	r1, #2049	; 0x801
 8010954:	4618      	mov	r0, r3
 8010956:	f7f1 fa8d 	bl	8001e74 <HW_TS_Start>
            DataTransfered += NotificationData.DataTransfered.Length;
 801095a:	4b10      	ldr	r3, [pc, #64]	; (801099c <DTC_Event_Handler+0x3e4>)
 801095c:	691a      	ldr	r2, [r3, #16]
 801095e:	4b13      	ldr	r3, [pc, #76]	; (80109ac <DTC_Event_Handler+0x3f4>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	4413      	add	r3, r2
 8010964:	4a11      	ldr	r2, [pc, #68]	; (80109ac <DTC_Event_Handler+0x3f4>)
 8010966:	6013      	str	r3, [r2, #0]
        break;/* end EVT_BLUE_GATT_NOTIFICATION */
 8010968:	e00e      	b.n	8010988 <DTC_Event_Handler+0x3d0>
          osThreadFlagsSet( LinkConfigProcessId, 2 );
 801096a:	4b12      	ldr	r3, [pc, #72]	; (80109b4 <DTC_Event_Handler+0x3fc>)
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	2102      	movs	r1, #2
 8010970:	4618      	mov	r0, r3
 8010972:	f7fa fda1 	bl	800b4b8 <osThreadFlagsSet>
          break; /*EVT_BLUE_GATT_PROCEDURE_COMPLETE*/
 8010976:	e008      	b.n	801098a <DTC_Event_Handler+0x3d2>
          break;
 8010978:	bf00      	nop
 801097a:	e006      	b.n	801098a <DTC_Event_Handler+0x3d2>
          break;
 801097c:	bf00      	nop
 801097e:	e004      	b.n	801098a <DTC_Event_Handler+0x3d2>
        break;
 8010980:	bf00      	nop
 8010982:	e002      	b.n	801098a <DTC_Event_Handler+0x3d2>
        break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 8010984:	bf00      	nop
 8010986:	e000      	b.n	801098a <DTC_Event_Handler+0x3d2>
        break;/* end EVT_BLUE_GATT_NOTIFICATION */
 8010988:	bf00      	nop
          break;
 801098a:	bf00      	nop
      }
    }

    return (return_value);
 801098c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
  }
 8010990:	4618      	mov	r0, r3
 8010992:	3740      	adds	r7, #64	; 0x40
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}
 8010998:	20006fcc 	.word	0x20006fcc
 801099c:	20006b0c 	.word	0x20006b0c
 80109a0:	20006b00 	.word	0x20006b00
 80109a4:	20006b24 	.word	0x20006b24
 80109a8:	08013a74 	.word	0x08013a74
 80109ac:	20006b28 	.word	0x20006b28
 80109b0:	20006b20 	.word	0x20006b20
 80109b4:	20006f98 	.word	0x20006f98

080109b8 <DataThroughputTimer>:

    APP_DBG_MSG("DT = %ld bytes/s lost = %ld \n",DataThroughputValue, packet_lost_local);
  }

  static void DataThroughputTimer( void )
  {
 80109b8:	b480      	push	{r7}
 80109ba:	af00      	add	r7, sp, #0
    DataThroughputValue = (uint32_t)(DataTransfered / TIMEUNIT);
 80109bc:	4b09      	ldr	r3, [pc, #36]	; (80109e4 <DataThroughputTimer+0x2c>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	4a09      	ldr	r2, [pc, #36]	; (80109e8 <DataThroughputTimer+0x30>)
 80109c2:	6013      	str	r3, [r2, #0]
    packet_lost_local = (uint32_t)(packet_lost / TIMEUNIT);
 80109c4:	4b09      	ldr	r3, [pc, #36]	; (80109ec <DataThroughputTimer+0x34>)
 80109c6:	881b      	ldrh	r3, [r3, #0]
 80109c8:	461a      	mov	r2, r3
 80109ca:	4b09      	ldr	r3, [pc, #36]	; (80109f0 <DataThroughputTimer+0x38>)
 80109cc:	601a      	str	r2, [r3, #0]
    DataTransfered = 0;
 80109ce:	4b05      	ldr	r3, [pc, #20]	; (80109e4 <DataThroughputTimer+0x2c>)
 80109d0:	2200      	movs	r2, #0
 80109d2:	601a      	str	r2, [r3, #0]
    packet_lost = 0;
 80109d4:	4b05      	ldr	r3, [pc, #20]	; (80109ec <DataThroughputTimer+0x34>)
 80109d6:	2200      	movs	r2, #0
 80109d8:	801a      	strh	r2, [r3, #0]

//    UTIL_SEQ_SetTask(1 << CFG_TASK_APP_DATA_THROUGHPUT_ID, CFG_SCH_PRIO_0);
    return;
 80109da:	bf00      	nop
  }
 80109dc:	46bd      	mov	sp, r7
 80109de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e2:	4770      	bx	lr
 80109e4:	20006b28 	.word	0x20006b28
 80109e8:	20006b04 	.word	0x20006b04
 80109ec:	20006b00 	.word	0x20006b00
 80109f0:	20006b08 	.word	0x20006b08

080109f4 <GattProcReq>:

  static void GattProcReq(GattProcId_t GattProcId)
  {
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b084      	sub	sp, #16
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	4603      	mov	r3, r0
 80109fc:	71fb      	strb	r3, [r7, #7]
    tBleStatus status;

    switch(GattProcId)
 80109fe:	79fb      	ldrb	r3, [r7, #7]
 8010a00:	2b03      	cmp	r3, #3
 8010a02:	f200 8085 	bhi.w	8010b10 <GattProcReq+0x11c>
 8010a06:	a201      	add	r2, pc, #4	; (adr r2, 8010a0c <GattProcReq+0x18>)
 8010a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a0c:	08010a1d 	.word	0x08010a1d
 8010a10:	08010a55 	.word	0x08010a55
 8010a14:	08010a8d 	.word	0x08010a8d
 8010a18:	08010acd 	.word	0x08010acd
    {
      case GATT_PROC_MTU_UPDATE:
        APP_DBG_MSG("change ATT MTU size \n");
 8010a1c:	483f      	ldr	r0, [pc, #252]	; (8010b1c <GattProcReq+0x128>)
 8010a1e:	f001 f943 	bl	8011ca8 <puts>
//        BSP_LED_On(LED_BLUE);
        status = aci_gatt_exchange_config(DataTransferClientContext.connHandle);
 8010a22:	4b3f      	ldr	r3, [pc, #252]	; (8010b20 <GattProcReq+0x12c>)
 8010a24:	881b      	ldrh	r3, [r3, #0]
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7f7 fd0a 	bl	8008440 <aci_gatt_exchange_config>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	73fb      	strb	r3, [r7, #15]
        if (status != BLE_STATUS_SUCCESS)
 8010a30:	7bfb      	ldrb	r3, [r7, #15]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d004      	beq.n	8010a40 <GattProcReq+0x4c>
        {
          APP_DBG_MSG("change MTU cmd failure: 0x%x\n", status);
 8010a36:	7bfb      	ldrb	r3, [r7, #15]
 8010a38:	4619      	mov	r1, r3
 8010a3a:	483a      	ldr	r0, [pc, #232]	; (8010b24 <GattProcReq+0x130>)
 8010a3c:	f001 f8c0 	bl	8011bc0 <iprintf>
//          BSP_LED_On(LED_RED);

        }
//        UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_GATT_PROC_COMPLETE);
        osThreadFlagsWait( 2, osFlagsWaitAny, osWaitForever);
 8010a40:	f04f 32ff 	mov.w	r2, #4294967295
 8010a44:	2100      	movs	r1, #0
 8010a46:	2002      	movs	r0, #2
 8010a48:	f7fa fd98 	bl	800b57c <osThreadFlagsWait>
//        BSP_LED_Off(LED_BLUE);
        APP_DBG_MSG("GATT_PROC_MTU_UPDATE complete event received \n");
 8010a4c:	4836      	ldr	r0, [pc, #216]	; (8010b28 <GattProcReq+0x134>)
 8010a4e:	f001 f92b 	bl	8011ca8 <puts>
        break;
 8010a52:	e05e      	b.n	8010b12 <GattProcReq+0x11e>

      case GATT_PROC_DISC_ALL_PRIMARY_SERVICES:
//    	  BSP_LED_On(LED_BLUE);
        APP_DBG_MSG("Discover all primary services \n");
 8010a54:	4835      	ldr	r0, [pc, #212]	; (8010b2c <GattProcReq+0x138>)
 8010a56:	f001 f927 	bl	8011ca8 <puts>

        status = aci_gatt_disc_all_primary_services(DataTransferClientContext.connHandle);
 8010a5a:	4b31      	ldr	r3, [pc, #196]	; (8010b20 <GattProcReq+0x12c>)
 8010a5c:	881b      	ldrh	r3, [r3, #0]
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7f7 fd3c 	bl	80084dc <aci_gatt_disc_all_primary_services>
 8010a64:	4603      	mov	r3, r0
 8010a66:	73fb      	strb	r3, [r7, #15]
        if (status != BLE_STATUS_SUCCESS)
 8010a68:	7bfb      	ldrb	r3, [r7, #15]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d004      	beq.n	8010a78 <GattProcReq+0x84>
        {
          APP_DBG_MSG("Discover all primary services cmd failure: 0x%x\n", status);
 8010a6e:	7bfb      	ldrb	r3, [r7, #15]
 8010a70:	4619      	mov	r1, r3
 8010a72:	482f      	ldr	r0, [pc, #188]	; (8010b30 <GattProcReq+0x13c>)
 8010a74:	f001 f8a4 	bl	8011bc0 <iprintf>
//          BSP_LED_On(LED_RED);
        }
//        UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_GATT_PROC_COMPLETE);
        osThreadFlagsWait( 2, osFlagsWaitAny, osWaitForever);
 8010a78:	f04f 32ff 	mov.w	r2, #4294967295
 8010a7c:	2100      	movs	r1, #0
 8010a7e:	2002      	movs	r0, #2
 8010a80:	f7fa fd7c 	bl	800b57c <osThreadFlagsWait>
//        BSP_LED_On(LED_GREEN);
        APP_DBG_MSG("GATT_PROC_DISC_ALL_PRIMARY_SERVICES complete event received \n");
 8010a84:	482b      	ldr	r0, [pc, #172]	; (8010b34 <GattProcReq+0x140>)
 8010a86:	f001 f90f 	bl	8011ca8 <puts>
        break;
 8010a8a:	e042      	b.n	8010b12 <GattProcReq+0x11e>

      case GATT_PROC_DISC_ALL_CHAR_OF_DT_SERVICE:
        APP_DBG_MSG("Discover all char of service \n");
 8010a8c:	482a      	ldr	r0, [pc, #168]	; (8010b38 <GattProcReq+0x144>)
 8010a8e:	f001 f90b 	bl	8011ca8 <puts>

        status = aci_gatt_disc_all_char_of_service(
 8010a92:	4b23      	ldr	r3, [pc, #140]	; (8010b20 <GattProcReq+0x12c>)
 8010a94:	8818      	ldrh	r0, [r3, #0]
 8010a96:	4b22      	ldr	r3, [pc, #136]	; (8010b20 <GattProcReq+0x12c>)
 8010a98:	8859      	ldrh	r1, [r3, #2]
 8010a9a:	4b21      	ldr	r3, [pc, #132]	; (8010b20 <GattProcReq+0x12c>)
 8010a9c:	889b      	ldrh	r3, [r3, #4]
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	f7f7 fd6a 	bl	8008578 <aci_gatt_disc_all_char_of_service>
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	73fb      	strb	r3, [r7, #15]
            DataTransferClientContext.connHandle,
            DataTransferClientContext.DataTransferServiceHandle,
            DataTransferClientContext.DataTransferServiceEndHandle);
        if (status != BLE_STATUS_SUCCESS)
 8010aa8:	7bfb      	ldrb	r3, [r7, #15]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d004      	beq.n	8010ab8 <GattProcReq+0xc4>
        {
          APP_DBG_MSG("Discover all char of service cmd failure: 0x%x\n", status);
 8010aae:	7bfb      	ldrb	r3, [r7, #15]
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	4822      	ldr	r0, [pc, #136]	; (8010b3c <GattProcReq+0x148>)
 8010ab4:	f001 f884 	bl	8011bc0 <iprintf>
//          BSP_LED_On(LED_RED);
        }
//        UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_GATT_PROC_COMPLETE);
        osThreadFlagsWait( 2, osFlagsWaitAny, osWaitForever);
 8010ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8010abc:	2100      	movs	r1, #0
 8010abe:	2002      	movs	r0, #2
 8010ac0:	f7fa fd5c 	bl	800b57c <osThreadFlagsWait>

        APP_DBG_MSG("GATT_PROC_DISC_ALL_CHAR_OF_DT_SERVICE complete event received \n");
 8010ac4:	481e      	ldr	r0, [pc, #120]	; (8010b40 <GattProcReq+0x14c>)
 8010ac6:	f001 f8ef 	bl	8011ca8 <puts>
        break;
 8010aca:	e022      	b.n	8010b12 <GattProcReq+0x11e>

      case GATT_PROC_DISC_TX_CHAR_DESC:
        APP_DBG_MSG("Discover Tx char descriptors \n");
 8010acc:	481d      	ldr	r0, [pc, #116]	; (8010b44 <GattProcReq+0x150>)
 8010ace:	f001 f8eb 	bl	8011ca8 <puts>

        status = aci_gatt_disc_all_char_desc(
 8010ad2:	4b13      	ldr	r3, [pc, #76]	; (8010b20 <GattProcReq+0x12c>)
 8010ad4:	8818      	ldrh	r0, [r3, #0]
 8010ad6:	4b12      	ldr	r3, [pc, #72]	; (8010b20 <GattProcReq+0x12c>)
 8010ad8:	88d9      	ldrh	r1, [r3, #6]
            DataTransferClientContext.connHandle,
            DataTransferClientContext.DataTransferTxCharHdle,
            DataTransferClientContext.DataTransferTxCharHdle + 2);
 8010ada:	4b11      	ldr	r3, [pc, #68]	; (8010b20 <GattProcReq+0x12c>)
 8010adc:	88db      	ldrh	r3, [r3, #6]
        status = aci_gatt_disc_all_char_desc(
 8010ade:	3302      	adds	r3, #2
 8010ae0:	b29b      	uxth	r3, r3
 8010ae2:	461a      	mov	r2, r3
 8010ae4:	f7f7 fdb3 	bl	800864e <aci_gatt_disc_all_char_desc>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	73fb      	strb	r3, [r7, #15]
        if (status != BLE_STATUS_SUCCESS)
 8010aec:	7bfb      	ldrb	r3, [r7, #15]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d004      	beq.n	8010afc <GattProcReq+0x108>
        {
          APP_DBG_MSG("Discover Tx char descriptors cmd failure: 0x%x\n", status);
 8010af2:	7bfb      	ldrb	r3, [r7, #15]
 8010af4:	4619      	mov	r1, r3
 8010af6:	4814      	ldr	r0, [pc, #80]	; (8010b48 <GattProcReq+0x154>)
 8010af8:	f001 f862 	bl	8011bc0 <iprintf>
//          BSP_LED_On(LED_RED);
        }
//        UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_GATT_PROC_COMPLETE);
        osThreadFlagsWait( 2, osFlagsWaitAny, osWaitForever);
 8010afc:	f04f 32ff 	mov.w	r2, #4294967295
 8010b00:	2100      	movs	r1, #0
 8010b02:	2002      	movs	r0, #2
 8010b04:	f7fa fd3a 	bl	800b57c <osThreadFlagsWait>

        APP_DBG_MSG("GATT_PROC_DISC_TX_CHAR_DESC complete event received \n");
 8010b08:	4810      	ldr	r0, [pc, #64]	; (8010b4c <GattProcReq+0x158>)
 8010b0a:	f001 f8cd 	bl	8011ca8 <puts>
        break;
 8010b0e:	e000      	b.n	8010b12 <GattProcReq+0x11e>

      default:
        break;
 8010b10:	bf00      	nop
    }
    return;
 8010b12:	bf00      	nop
  }
 8010b14:	3710      	adds	r7, #16
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}
 8010b1a:	bf00      	nop
 8010b1c:	08013ac4 	.word	0x08013ac4
 8010b20:	20006fcc 	.word	0x20006fcc
 8010b24:	08013adc 	.word	0x08013adc
 8010b28:	08013afc 	.word	0x08013afc
 8010b2c:	08013b2c 	.word	0x08013b2c
 8010b30:	08013b4c 	.word	0x08013b4c
 8010b34:	08013b80 	.word	0x08013b80
 8010b38:	08013bc0 	.word	0x08013bc0
 8010b3c:	08013be0 	.word	0x08013be0
 8010b40:	08013c10 	.word	0x08013c10
 8010b44:	08013c50 	.word	0x08013c50
 8010b48:	08013c70 	.word	0x08013c70
 8010b4c:	08013ca0 	.word	0x08013ca0

08010b50 <DTS_App_Init>:
 *
 * PUBLIC FUNCTIONS
 *
 *************************************************************/
void DTS_App_Init(void)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b082      	sub	sp, #8
 8010b54:	af00      	add	r7, sp, #0
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_SW2_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, DT_App_Button2_Trigger_Received);
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_SW3_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, DT_App_Button3_Trigger_Received);
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_DATA_TRANSFER_UPDATE_ID, UTIL_SEQ_RFU, SendData);
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_DATA_WRITE_ID, UTIL_SEQ_RFU, BLE_App_Delay_DataThroughput);

  DataWriteProcessId= osThreadNew(BLE_App_Delay_DataThroughput, NULL, &DataWriteProcess_attr);
 8010b56:	4a15      	ldr	r2, [pc, #84]	; (8010bac <DTS_App_Init+0x5c>)
 8010b58:	2100      	movs	r1, #0
 8010b5a:	4815      	ldr	r0, [pc, #84]	; (8010bb0 <DTS_App_Init+0x60>)
 8010b5c:	f7fa fc06 	bl	800b36c <osThreadNew>
 8010b60:	4602      	mov	r2, r0
 8010b62:	4b14      	ldr	r3, [pc, #80]	; (8010bb4 <DTS_App_Init+0x64>)
 8010b64:	601a      	str	r2, [r3, #0]
  DataTransferProcessId= osThreadNew(SendData, NULL, &DataTransferProcess_attr);
 8010b66:	4a14      	ldr	r2, [pc, #80]	; (8010bb8 <DTS_App_Init+0x68>)
 8010b68:	2100      	movs	r1, #0
 8010b6a:	4814      	ldr	r0, [pc, #80]	; (8010bbc <DTS_App_Init+0x6c>)
 8010b6c:	f7fa fbfe 	bl	800b36c <osThreadNew>
 8010b70:	4602      	mov	r2, r0
 8010b72:	4b13      	ldr	r3, [pc, #76]	; (8010bc0 <DTS_App_Init+0x70>)
 8010b74:	601a      	str	r2, [r3, #0]


  /**
   * Initialize data buffer
   */
  for (i=0 ; i<(DATA_NOTIFICATION_MAX_PACKET_SIZE-1) ; i++)
 8010b76:	2300      	movs	r3, #0
 8010b78:	71fb      	strb	r3, [r7, #7]
 8010b7a:	e006      	b.n	8010b8a <DTS_App_Init+0x3a>
  {
    Notification_Data_Buffer[i] = i;
 8010b7c:	79fb      	ldrb	r3, [r7, #7]
 8010b7e:	4911      	ldr	r1, [pc, #68]	; (8010bc4 <DTS_App_Init+0x74>)
 8010b80:	79fa      	ldrb	r2, [r7, #7]
 8010b82:	54ca      	strb	r2, [r1, r3]
  for (i=0 ; i<(DATA_NOTIFICATION_MAX_PACKET_SIZE-1) ; i++)
 8010b84:	79fb      	ldrb	r3, [r7, #7]
 8010b86:	3301      	adds	r3, #1
 8010b88:	71fb      	strb	r3, [r7, #7]
 8010b8a:	79fb      	ldrb	r3, [r7, #7]
 8010b8c:	2bee      	cmp	r3, #238	; 0xee
 8010b8e:	d9f5      	bls.n	8010b7c <DTS_App_Init+0x2c>
  }

  DataTransferServerContext.NotificationTransferReq = DTS_APP_TRANSFER_REQ_OFF;
 8010b90:	4b0d      	ldr	r3, [pc, #52]	; (8010bc8 <DTS_App_Init+0x78>)
 8010b92:	2200      	movs	r2, #0
 8010b94:	741a      	strb	r2, [r3, #16]
  DataTransferServerContext.ButtonTransferReq = DTS_APP_TRANSFER_REQ_OFF;
 8010b96:	4b0c      	ldr	r3, [pc, #48]	; (8010bc8 <DTS_App_Init+0x78>)
 8010b98:	2200      	movs	r2, #0
 8010b9a:	745a      	strb	r2, [r3, #17]
  DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_ON;
 8010b9c:	4b0a      	ldr	r3, [pc, #40]	; (8010bc8 <DTS_App_Init+0x78>)
 8010b9e:	2201      	movs	r2, #1
 8010ba0:	749a      	strb	r2, [r3, #18]
}
 8010ba2:	bf00      	nop
 8010ba4:	3708      	adds	r7, #8
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}
 8010baa:	bf00      	nop
 8010bac:	08014198 	.word	0x08014198
 8010bb0:	08010d75 	.word	0x08010d75
 8010bb4:	20006fa0 	.word	0x20006fa0
 8010bb8:	080141bc 	.word	0x080141bc
 8010bbc:	08010cbd 	.word	0x08010cbd
 8010bc0:	20006fc0 	.word	0x20006fc0
 8010bc4:	20006b2c 	.word	0x20006b2c
 8010bc8:	20006fdc 	.word	0x20006fdc

08010bcc <DTS_App_TxPoolAvailableNotification>:
//    UTIL_SEQ_SetTask(1 << CFG_TASK_SW3_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
	  osThreadFlagsSet( Button_SW2_ProcessId, 1 );
}

void DTS_App_TxPoolAvailableNotification(void)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	af00      	add	r7, sp, #0
  DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_ON;
 8010bd0:	4b05      	ldr	r3, [pc, #20]	; (8010be8 <DTS_App_TxPoolAvailableNotification+0x1c>)
 8010bd2:	2201      	movs	r2, #1
 8010bd4:	749a      	strb	r2, [r3, #18]
//  UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_TRANSFER_UPDATE_ID, CFG_SCH_PRIO_0);
  osThreadFlagsSet( DataTransferProcessId, 1 );
 8010bd6:	4b05      	ldr	r3, [pc, #20]	; (8010bec <DTS_App_TxPoolAvailableNotification+0x20>)
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	2101      	movs	r1, #1
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7fa fc6b 	bl	800b4b8 <osThreadFlagsSet>

  return;
 8010be2:	bf00      	nop
}
 8010be4:	bd80      	pop	{r7, pc}
 8010be6:	bf00      	nop
 8010be8:	20006fdc 	.word	0x20006fdc
 8010bec:	20006fc0 	.word	0x20006fc0

08010bf0 <DTS_Notification>:
 *
 * CALLBACK FUNCTIONS
 *
 *************************************************************/
void DTS_Notification( DTS_STM_App_Notification_evt_t *pNotification )
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b082      	sub	sp, #8
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
  switch (pNotification->Evt_Opcode)
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	785b      	ldrb	r3, [r3, #1]
 8010bfc:	2b05      	cmp	r3, #5
 8010bfe:	d84c      	bhi.n	8010c9a <DTS_Notification+0xaa>
 8010c00:	a201      	add	r2, pc, #4	; (adr r2, 8010c08 <DTS_Notification+0x18>)
 8010c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c06:	bf00      	nop
 8010c08:	08010c21 	.word	0x08010c21
 8010c0c:	08010c35 	.word	0x08010c35
 8010c10:	08010c87 	.word	0x08010c87
 8010c14:	08010c3d 	.word	0x08010c3d
 8010c18:	08010c49 	.word	0x08010c49
 8010c1c:	08010c51 	.word	0x08010c51
  {
    case DTS_STM__NOTIFICATION_ENABLED:
      DataTransferServerContext.NotificationTransferReq = DTS_APP_TRANSFER_REQ_ON;
 8010c20:	4b20      	ldr	r3, [pc, #128]	; (8010ca4 <DTS_Notification+0xb4>)
 8010c22:	2201      	movs	r2, #1
 8010c24:	741a      	strb	r2, [r3, #16]
//      UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_TRANSFER_UPDATE_ID, CFG_SCH_PRIO_0);
      osThreadFlagsSet( DataTransferProcessId, 1 );
 8010c26:	4b20      	ldr	r3, [pc, #128]	; (8010ca8 <DTS_Notification+0xb8>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	2101      	movs	r1, #1
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7fa fc43 	bl	800b4b8 <osThreadFlagsSet>
      break;
 8010c32:	e033      	b.n	8010c9c <DTS_Notification+0xac>

    case DTS_STM_NOTIFICATION_DISABLED:
      DataTransferServerContext.NotificationTransferReq = DTS_APP_TRANSFER_REQ_OFF;
 8010c34:	4b1b      	ldr	r3, [pc, #108]	; (8010ca4 <DTS_Notification+0xb4>)
 8010c36:	2200      	movs	r2, #0
 8010c38:	741a      	strb	r2, [r3, #16]
      break;
 8010c3a:	e02f      	b.n	8010c9c <DTS_Notification+0xac>
      
    case DTC_NOTIFICATION_ENABLED:
//      BLE_SVC_L2CAP_Conn_Update_7_5();
      BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8010c3c:	4b1b      	ldr	r3, [pc, #108]	; (8010cac <DTS_Notification+0xbc>)
 8010c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7ff f845 	bl	800fcd0 <BLE_SVC_L2CAP_Conn_Update>

      //DataTransferServerContext.NotificationClientTransferFlag = 0x01;
      break;
 8010c46:	e029      	b.n	8010c9c <DTS_Notification+0xac>
      
    case DTC_NOTIFICATION_DISABLED:
      //DataTransferServerContext.NotificationClientTransferFlag = 0x00;
      APP_DBG_MSG("write data notification disabled \n");
 8010c48:	4819      	ldr	r0, [pc, #100]	; (8010cb0 <DTS_Notification+0xc0>)
 8010c4a:	f001 f82d 	bl	8011ca8 <puts>
      break;
 8010c4e:	e025      	b.n	8010c9c <DTS_Notification+0xac>
      
    case DTS_STM_DATA_RECEIVED:
      if (DataReceived == 0)
 8010c50:	4b18      	ldr	r3, [pc, #96]	; (8010cb4 <DTS_Notification+0xc4>)
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d10e      	bne.n	8010c76 <DTS_Notification+0x86>
      {
        /* start timer */
        DataReceived += pNotification->DataTransfered.Length;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	691a      	ldr	r2, [r3, #16]
 8010c5c:	4b15      	ldr	r3, [pc, #84]	; (8010cb4 <DTS_Notification+0xc4>)
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	4413      	add	r3, r2
 8010c62:	4a14      	ldr	r2, [pc, #80]	; (8010cb4 <DTS_Notification+0xc4>)
 8010c64:	6013      	str	r3, [r2, #0]
        HW_TS_Start(TimerDataThroughputWrite_Id, DELAY_1s);
 8010c66:	4b14      	ldr	r3, [pc, #80]	; (8010cb8 <DTS_Notification+0xc8>)
 8010c68:	781b      	ldrb	r3, [r3, #0]
 8010c6a:	f640 0101 	movw	r1, #2049	; 0x801
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f7f1 f900 	bl	8001e74 <HW_TS_Start>
      }
      else
      {
        DataReceived += pNotification->DataTransfered.Length;
      }
      break;
 8010c74:	e012      	b.n	8010c9c <DTS_Notification+0xac>
        DataReceived += pNotification->DataTransfered.Length;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	691a      	ldr	r2, [r3, #16]
 8010c7a:	4b0e      	ldr	r3, [pc, #56]	; (8010cb4 <DTS_Notification+0xc4>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	4413      	add	r3, r2
 8010c80:	4a0c      	ldr	r2, [pc, #48]	; (8010cb4 <DTS_Notification+0xc4>)
 8010c82:	6013      	str	r3, [r2, #0]
      break;
 8010c84:	e00a      	b.n	8010c9c <DTS_Notification+0xac>

    case DTS_STM_GATT_TX_POOL_AVAILABLE:
      DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_ON;
 8010c86:	4b07      	ldr	r3, [pc, #28]	; (8010ca4 <DTS_Notification+0xb4>)
 8010c88:	2201      	movs	r2, #1
 8010c8a:	749a      	strb	r2, [r3, #18]
//      UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_TRANSFER_UPDATE_ID, CFG_SCH_PRIO_0);
      osThreadFlagsSet( DataTransferProcessId, 1 );
 8010c8c:	4b06      	ldr	r3, [pc, #24]	; (8010ca8 <DTS_Notification+0xb8>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	2101      	movs	r1, #1
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7fa fc10 	bl	800b4b8 <osThreadFlagsSet>
      break;
 8010c98:	e000      	b.n	8010c9c <DTS_Notification+0xac>

    default:
      break;
 8010c9a:	bf00      	nop
  }

  return;
 8010c9c:	bf00      	nop
}
 8010c9e:	3708      	adds	r7, #8
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	bd80      	pop	{r7, pc}
 8010ca4:	20006fdc 	.word	0x20006fdc
 8010ca8:	20006fc0 	.word	0x20006fc0
 8010cac:	20000198 	.word	0x20000198
 8010cb0:	08013d18 	.word	0x08013d18
 8010cb4:	20006fd8 	.word	0x20006fd8
 8010cb8:	20006fb4 	.word	0x20006fb4

08010cbc <SendData>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
void SendData( void * argument )
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b084      	sub	sp, #16
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	  for(;;)
	  {
	    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8010cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8010cc8:	2100      	movs	r1, #0
 8010cca:	2001      	movs	r0, #1
 8010ccc:	f7fa fc56 	bl	800b57c <osThreadFlagsWait>

  tBleStatus status = BLE_STATUS_INVALID_PARAMS;
 8010cd0:	2342      	movs	r3, #66	; 0x42
 8010cd2:	73fb      	strb	r3, [r7, #15]
  uint8_t crc_result;

  if( (DataTransferServerContext.ButtonTransferReq != DTS_APP_TRANSFER_REQ_OFF)
 8010cd4:	4b1e      	ldr	r3, [pc, #120]	; (8010d50 <SendData+0x94>)
 8010cd6:	7c5b      	ldrb	r3, [r3, #17]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d0f3      	beq.n	8010cc4 <SendData+0x8>
      && (DataTransferServerContext.NotificationTransferReq != DTS_APP_TRANSFER_REQ_OFF)
 8010cdc:	4b1c      	ldr	r3, [pc, #112]	; (8010d50 <SendData+0x94>)
 8010cde:	7c1b      	ldrb	r3, [r3, #16]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d0ef      	beq.n	8010cc4 <SendData+0x8>
      && (DataTransferServerContext.DtFlowStatus != DTS_APP_FLOW_OFF) )
 8010ce4:	4b1a      	ldr	r3, [pc, #104]	; (8010d50 <SendData+0x94>)
 8010ce6:	7c9b      	ldrb	r3, [r3, #18]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d0eb      	beq.n	8010cc4 <SendData+0x8>
  {   
    /*Data Packet to send to remote*/
    Notification_Data_Buffer[0] += 1;
 8010cec:	4b19      	ldr	r3, [pc, #100]	; (8010d54 <SendData+0x98>)
 8010cee:	781b      	ldrb	r3, [r3, #0]
 8010cf0:	3301      	adds	r3, #1
 8010cf2:	b2da      	uxtb	r2, r3
 8010cf4:	4b17      	ldr	r3, [pc, #92]	; (8010d54 <SendData+0x98>)
 8010cf6:	701a      	strb	r2, [r3, #0]
    /* compute CRC */
    crc_result = APP_BLE_ComputeCRC8((uint8_t*) Notification_Data_Buffer, (DATA_NOTIFICATION_MAX_PACKET_SIZE - 1));
 8010cf8:	21ef      	movs	r1, #239	; 0xef
 8010cfa:	4816      	ldr	r0, [pc, #88]	; (8010d54 <SendData+0x98>)
 8010cfc:	f7fe ff5c 	bl	800fbb8 <APP_BLE_ComputeCRC8>
 8010d00:	4603      	mov	r3, r0
 8010d02:	73bb      	strb	r3, [r7, #14]
    Notification_Data_Buffer[DATA_NOTIFICATION_MAX_PACKET_SIZE - 1] = crc_result;
 8010d04:	4a13      	ldr	r2, [pc, #76]	; (8010d54 <SendData+0x98>)
 8010d06:	7bbb      	ldrb	r3, [r7, #14]
 8010d08:	f882 30ef 	strb.w	r3, [r2, #239]	; 0xef

    DataTransferServerContext.TxData.pPayload = Notification_Data_Buffer;
 8010d0c:	4b10      	ldr	r3, [pc, #64]	; (8010d50 <SendData+0x94>)
 8010d0e:	4a11      	ldr	r2, [pc, #68]	; (8010d54 <SendData+0x98>)
 8010d10:	601a      	str	r2, [r3, #0]
    //DataTransferServerContext.TxData.Length = DATA_NOTIFICATION_MAX_PACKET_SIZE; /* DATA_NOTIFICATION_MAX_PACKET_SIZE */
    DataTransferServerContext.TxData.Length =  DATA_NOTIFICATION_MAX_PACKET_SIZE; //Att_Mtu_Exchanged-10;
 8010d12:	4b0f      	ldr	r3, [pc, #60]	; (8010d50 <SendData+0x94>)
 8010d14:	22f0      	movs	r2, #240	; 0xf0
 8010d16:	60da      	str	r2, [r3, #12]

    status = DTS_STM_UpdateChar(DATA_TRANSFER_TX_CHAR_UUID, (uint8_t *) &DataTransferServerContext.TxData);
 8010d18:	490d      	ldr	r1, [pc, #52]	; (8010d50 <SendData+0x94>)
 8010d1a:	f64f 6081 	movw	r0, #65153	; 0xfe81
 8010d1e:	f000 f9f1 	bl	8011104 <DTS_STM_UpdateChar>
 8010d22:	4603      	mov	r3, r0
 8010d24:	73fb      	strb	r3, [r7, #15]
    if (status == BLE_STATUS_INSUFFICIENT_RESOURCES)
 8010d26:	7bfb      	ldrb	r3, [r7, #15]
 8010d28:	2b64      	cmp	r3, #100	; 0x64
 8010d2a:	d109      	bne.n	8010d40 <SendData+0x84>
    {
      DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_OFF;
 8010d2c:	4b08      	ldr	r3, [pc, #32]	; (8010d50 <SendData+0x94>)
 8010d2e:	2200      	movs	r2, #0
 8010d30:	749a      	strb	r2, [r3, #18]
      (Notification_Data_Buffer[0])-=1;
 8010d32:	4b08      	ldr	r3, [pc, #32]	; (8010d54 <SendData+0x98>)
 8010d34:	781b      	ldrb	r3, [r3, #0]
 8010d36:	3b01      	subs	r3, #1
 8010d38:	b2da      	uxtb	r2, r3
 8010d3a:	4b06      	ldr	r3, [pc, #24]	; (8010d54 <SendData+0x98>)
 8010d3c:	701a      	strb	r2, [r3, #0]
 8010d3e:	e7c1      	b.n	8010cc4 <SendData+0x8>
    }
    else
    {
//      UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_TRANSFER_UPDATE_ID, CFG_SCH_PRIO_0);
    	osThreadFlagsSet( DataTransferProcessId, 1 );
 8010d40:	4b05      	ldr	r3, [pc, #20]	; (8010d58 <SendData+0x9c>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	2101      	movs	r1, #1
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7fa fbb6 	bl	800b4b8 <osThreadFlagsSet>
	  {
 8010d4c:	e7ba      	b.n	8010cc4 <SendData+0x8>
 8010d4e:	bf00      	nop
 8010d50:	20006fdc 	.word	0x20006fdc
 8010d54:	20006b2c 	.word	0x20006b2c
 8010d58:	20006fc0 	.word	0x20006fc0

08010d5c <Resume_Notification>:
  }
	  }
//  return;
}
void Resume_Notification(void)
{
 8010d5c:	b480      	push	{r7}
 8010d5e:	af00      	add	r7, sp, #0
  DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_ON;
 8010d60:	4b03      	ldr	r3, [pc, #12]	; (8010d70 <Resume_Notification+0x14>)
 8010d62:	2201      	movs	r2, #1
 8010d64:	749a      	strb	r2, [r3, #18]
}
 8010d66:	bf00      	nop
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6e:	4770      	bx	lr
 8010d70:	20006fdc 	.word	0x20006fdc

08010d74 <BLE_App_Delay_DataThroughput>:
//  Appli_UpdateButtonState(BSP_PB_GetState(BUTTON_SW3) == BUTTON_PRESSED);
	  }
}

void BLE_App_Delay_DataThroughput(void * argument)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b088      	sub	sp, #32
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	  for(;;)
	  {
	    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8010d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8010d80:	2100      	movs	r1, #0
 8010d82:	2001      	movs	r0, #1
 8010d84:	f7fa fbfa 	bl	800b57c <osThreadFlagsWait>
  uint32_t DataThroughput;
  DTS_STM_Payload_t ThroughputToSend; 
  
  DataThroughput = (uint32_t)(DataReceived/TIMEUNIT);
 8010d88:	4b0a      	ldr	r3, [pc, #40]	; (8010db4 <BLE_App_Delay_DataThroughput+0x40>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	61fb      	str	r3, [r7, #28]
  APP_DBG_MSG("DataThroughput = %ld  bytes/s\n", DataThroughput);
 8010d8e:	69fb      	ldr	r3, [r7, #28]
 8010d90:	4619      	mov	r1, r3
 8010d92:	4809      	ldr	r0, [pc, #36]	; (8010db8 <BLE_App_Delay_DataThroughput+0x44>)
 8010d94:	f000 ff14 	bl	8011bc0 <iprintf>
  
  ThroughputToSend.Length = 4;
 8010d98:	2304      	movs	r3, #4
 8010d9a:	61bb      	str	r3, [r7, #24]
  ThroughputToSend.pPayload = (uint8_t*)&DataThroughput;
 8010d9c:	f107 031c 	add.w	r3, r7, #28
 8010da0:	60fb      	str	r3, [r7, #12]
  
  DTS_STM_UpdateCharThroughput( (DTS_STM_Payload_t*) &ThroughputToSend);  
 8010da2:	f107 030c 	add.w	r3, r7, #12
 8010da6:	4618      	mov	r0, r3
 8010da8:	f000 f9c6 	bl	8011138 <DTS_STM_UpdateCharThroughput>
  DataReceived = 0;
 8010dac:	4b01      	ldr	r3, [pc, #4]	; (8010db4 <BLE_App_Delay_DataThroughput+0x40>)
 8010dae:	2200      	movs	r2, #0
 8010db0:	601a      	str	r2, [r3, #0]
	  {
 8010db2:	e7e3      	b.n	8010d7c <BLE_App_Delay_DataThroughput+0x8>
 8010db4:	20006fd8 	.word	0x20006fd8
 8010db8:	08013d70 	.word	0x08013d70

08010dbc <DTS_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t DTS_Event_Handler( void *Event )
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b090      	sub	sp, #64	; 0x40
 8010dc0:	af02      	add	r7, sp, #8
 8010dc2:	6078      	str	r0, [r7, #4]
  aci_att_exchange_mtu_resp_event_rp0 * exchange_mtu_resp;
  aci_gatt_write_permit_req_event_rp0 * write_permit_req ;

  DTS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  event_pckt = (hci_event_pckt *) (((hci_uart_pckt*) Event)->data);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	3301      	adds	r3, #1
 8010dce:	633b      	str	r3, [r7, #48]	; 0x30

  switch (event_pckt->evt)
 8010dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dd2:	781b      	ldrb	r3, [r3, #0]
 8010dd4:	2bff      	cmp	r3, #255	; 0xff
 8010dd6:	d000      	beq.n	8010dda <DTS_Event_Handler+0x1e>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8010dd8:	e0ce      	b.n	8010f78 <DTS_Event_Handler+0x1bc>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8010dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ddc:	3302      	adds	r3, #2
 8010dde:	62fb      	str	r3, [r7, #44]	; 0x2c
      switch (blue_evt->ecode)
 8010de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de2:	881b      	ldrh	r3, [r3, #0]
 8010de4:	b29b      	uxth	r3, r3
 8010de6:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 8010dea:	2b15      	cmp	r3, #21
 8010dec:	f200 80c0 	bhi.w	8010f70 <DTS_Event_Handler+0x1b4>
 8010df0:	a201      	add	r2, pc, #4	; (adr r2, 8010df8 <DTS_Event_Handler+0x3c>)
 8010df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010df6:	bf00      	nop
 8010df8:	08010e77 	.word	0x08010e77
 8010dfc:	08010f71 	.word	0x08010f71
 8010e00:	08010e51 	.word	0x08010e51
 8010e04:	08010f71 	.word	0x08010f71
 8010e08:	08010f71 	.word	0x08010f71
 8010e0c:	08010f71 	.word	0x08010f71
 8010e10:	08010f71 	.word	0x08010f71
 8010e14:	08010f71 	.word	0x08010f71
 8010e18:	08010f71 	.word	0x08010f71
 8010e1c:	08010f71 	.word	0x08010f71
 8010e20:	08010f71 	.word	0x08010f71
 8010e24:	08010f71 	.word	0x08010f71
 8010e28:	08010f71 	.word	0x08010f71
 8010e2c:	08010f71 	.word	0x08010f71
 8010e30:	08010f71 	.word	0x08010f71
 8010e34:	08010f71 	.word	0x08010f71
 8010e38:	08010f71 	.word	0x08010f71
 8010e3c:	08010f71 	.word	0x08010f71
 8010e40:	08010f43 	.word	0x08010f43
 8010e44:	08010f71 	.word	0x08010f71
 8010e48:	08010f71 	.word	0x08010f71
 8010e4c:	08010f3d 	.word	0x08010f3d
          APP_DBG_MSG("EVT_BLUE_ATT_EXCHANGE_MTU_RESP \n");
 8010e50:	484c      	ldr	r0, [pc, #304]	; (8010f84 <DTS_Event_Handler+0x1c8>)
 8010e52:	f000 ff29 	bl	8011ca8 <puts>
          exchange_mtu_resp = (aci_att_exchange_mtu_resp_event_rp0 *)blue_evt->data;
 8010e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e58:	3302      	adds	r3, #2
 8010e5a:	627b      	str	r3, [r7, #36]	; 0x24
          APP_DBG_MSG("MTU_size = %d \n",exchange_mtu_resp->Server_RX_MTU );
 8010e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e5e:	885b      	ldrh	r3, [r3, #2]
 8010e60:	b29b      	uxth	r3, r3
 8010e62:	4619      	mov	r1, r3
 8010e64:	4848      	ldr	r0, [pc, #288]	; (8010f88 <DTS_Event_Handler+0x1cc>)
 8010e66:	f000 feab 	bl	8011bc0 <iprintf>
          Att_Mtu_Exchanged = exchange_mtu_resp->Server_RX_MTU;
 8010e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6c:	885b      	ldrh	r3, [r3, #2]
 8010e6e:	b29a      	uxth	r2, r3
 8010e70:	4b46      	ldr	r3, [pc, #280]	; (8010f8c <DTS_Event_Handler+0x1d0>)
 8010e72:	801a      	strh	r2, [r3, #0]
          break;
 8010e74:	e07f      	b.n	8010f76 <DTS_Event_Handler+0x1ba>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*) blue_evt->data;
 8010e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e78:	3302      	adds	r3, #2
 8010e7a:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (aDataTransferContext.DataTransferTxCharHdle + 2))
 8010e7c:	6a3b      	ldr	r3, [r7, #32]
 8010e7e:	885b      	ldrh	r3, [r3, #2]
 8010e80:	b29b      	uxth	r3, r3
 8010e82:	461a      	mov	r2, r3
 8010e84:	4b42      	ldr	r3, [pc, #264]	; (8010f90 <DTS_Event_Handler+0x1d4>)
 8010e86:	885b      	ldrh	r3, [r3, #2]
 8010e88:	3302      	adds	r3, #2
 8010e8a:	429a      	cmp	r2, r3
 8010e8c:	d11a      	bne.n	8010ec4 <DTS_Event_Handler+0x108>
            if (attribute_modified->Attr_Data[0] & DTS_STM_NOTIFICATION_MASK)
 8010e8e:	6a3b      	ldr	r3, [r7, #32]
 8010e90:	7a1b      	ldrb	r3, [r3, #8]
 8010e92:	f003 0301 	and.w	r3, r3, #1
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d00a      	beq.n	8010eb0 <DTS_Event_Handler+0xf4>
              APP_DBG_MSG("notification enabled\n");
 8010e9a:	483e      	ldr	r0, [pc, #248]	; (8010f94 <DTS_Event_Handler+0x1d8>)
 8010e9c:	f000 ff04 	bl	8011ca8 <puts>
              Notification.Evt_Opcode = DTS_STM__NOTIFICATION_ENABLED;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	737b      	strb	r3, [r7, #13]
              DTS_Notification(&Notification);
 8010ea4:	f107 030c 	add.w	r3, r7, #12
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7ff fea1 	bl	8010bf0 <DTS_Notification>
 8010eae:	e009      	b.n	8010ec4 <DTS_Event_Handler+0x108>
              APP_DBG_MSG("notification disabled\n");
 8010eb0:	4839      	ldr	r0, [pc, #228]	; (8010f98 <DTS_Event_Handler+0x1dc>)
 8010eb2:	f000 fef9 	bl	8011ca8 <puts>
              Notification.Evt_Opcode = DTS_STM_NOTIFICATION_DISABLED;
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	737b      	strb	r3, [r7, #13]
              DTS_Notification(&Notification);
 8010eba:	f107 030c 	add.w	r3, r7, #12
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7ff fe96 	bl	8010bf0 <DTS_Notification>
          if (attribute_modified->Attr_Handle == (aDataTransferContext.DataTransferTxChar3Hdle + 5))
 8010ec4:	6a3b      	ldr	r3, [r7, #32]
 8010ec6:	885b      	ldrh	r3, [r3, #2]
 8010ec8:	b29b      	uxth	r3, r3
 8010eca:	461a      	mov	r2, r3
 8010ecc:	4b30      	ldr	r3, [pc, #192]	; (8010f90 <DTS_Event_Handler+0x1d4>)
 8010ece:	88db      	ldrh	r3, [r3, #6]
 8010ed0:	3305      	adds	r3, #5
 8010ed2:	429a      	cmp	r2, r3
 8010ed4:	d11a      	bne.n	8010f0c <DTS_Event_Handler+0x150>
            if (attribute_modified->Attr_Data[0] & DTS_STM_NOTIFICATION_MASK)
 8010ed6:	6a3b      	ldr	r3, [r7, #32]
 8010ed8:	7a1b      	ldrb	r3, [r3, #8]
 8010eda:	f003 0301 	and.w	r3, r3, #1
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d00a      	beq.n	8010ef8 <DTS_Event_Handler+0x13c>
              APP_DBG_MSG("notification enabled\n");
 8010ee2:	482c      	ldr	r0, [pc, #176]	; (8010f94 <DTS_Event_Handler+0x1d8>)
 8010ee4:	f000 fee0 	bl	8011ca8 <puts>
              Notification.Evt_Opcode = DTC_NOTIFICATION_ENABLED;
 8010ee8:	2303      	movs	r3, #3
 8010eea:	737b      	strb	r3, [r7, #13]
              DTS_Notification(&Notification);
 8010eec:	f107 030c 	add.w	r3, r7, #12
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f7ff fe7d 	bl	8010bf0 <DTS_Notification>
 8010ef6:	e009      	b.n	8010f0c <DTS_Event_Handler+0x150>
              APP_DBG_MSG("notification disabled\n");
 8010ef8:	4827      	ldr	r0, [pc, #156]	; (8010f98 <DTS_Event_Handler+0x1dc>)
 8010efa:	f000 fed5 	bl	8011ca8 <puts>
              Notification.Evt_Opcode = DTC_NOTIFICATION_DISABLED;
 8010efe:	2304      	movs	r3, #4
 8010f00:	737b      	strb	r3, [r7, #13]
              DTS_Notification(&Notification);
 8010f02:	f107 030c 	add.w	r3, r7, #12
 8010f06:	4618      	mov	r0, r3
 8010f08:	f7ff fe72 	bl	8010bf0 <DTS_Notification>
          if(attribute_modified->Attr_Handle == (aDataTransferContext.DataTransferRxCharHdle + 1))
 8010f0c:	6a3b      	ldr	r3, [r7, #32]
 8010f0e:	885b      	ldrh	r3, [r3, #2]
 8010f10:	b29b      	uxth	r3, r3
 8010f12:	461a      	mov	r2, r3
 8010f14:	4b1e      	ldr	r3, [pc, #120]	; (8010f90 <DTS_Event_Handler+0x1d4>)
 8010f16:	889b      	ldrh	r3, [r3, #4]
 8010f18:	3301      	adds	r3, #1
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	d12a      	bne.n	8010f74 <DTS_Event_Handler+0x1b8>
            return_value = SVCCTL_EvtAckFlowEnable;
 8010f1e:	2301      	movs	r3, #1
 8010f20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            Notification.Evt_Opcode = DTS_STM_DATA_RECEIVED;
 8010f24:	2305      	movs	r3, #5
 8010f26:	737b      	strb	r3, [r7, #13]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8010f28:	6a3b      	ldr	r3, [r7, #32]
 8010f2a:	88db      	ldrh	r3, [r3, #6]
 8010f2c:	b29b      	uxth	r3, r3
 8010f2e:	61fb      	str	r3, [r7, #28]
            DTS_Notification(&Notification); 
 8010f30:	f107 030c 	add.w	r3, r7, #12
 8010f34:	4618      	mov	r0, r3
 8010f36:	f7ff fe5b 	bl	8010bf0 <DTS_Notification>
          break;
 8010f3a:	e01b      	b.n	8010f74 <DTS_Event_Handler+0x1b8>
          Resume_Notification();
 8010f3c:	f7ff ff0e 	bl	8010d5c <Resume_Notification>
          break; 
 8010f40:	e019      	b.n	8010f76 <DTS_Event_Handler+0x1ba>
        APP_DBG_MSG("write permit req\r\n");
 8010f42:	4816      	ldr	r0, [pc, #88]	; (8010f9c <DTS_Event_Handler+0x1e0>)
 8010f44:	f000 feb0 	bl	8011ca8 <puts>
        write_permit_req = (aci_gatt_write_permit_req_event_rp0 *) blue_evt->data;
 8010f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f4a:	3302      	adds	r3, #2
 8010f4c:	62bb      	str	r3, [r7, #40]	; 0x28
        aci_gatt_write_resp( write_permit_req->Connection_Handle, write_permit_req->Attribute_Handle, 0, 0, write_permit_req->Data_Length, write_permit_req->Data);        
 8010f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f50:	881b      	ldrh	r3, [r3, #0]
 8010f52:	b298      	uxth	r0, r3
 8010f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f56:	885b      	ldrh	r3, [r3, #2]
 8010f58:	b299      	uxth	r1, r3
 8010f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f5c:	791b      	ldrb	r3, [r3, #4]
 8010f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f60:	3205      	adds	r2, #5
 8010f62:	9201      	str	r2, [sp, #4]
 8010f64:	9300      	str	r3, [sp, #0]
 8010f66:	2300      	movs	r3, #0
 8010f68:	2200      	movs	r2, #0
 8010f6a:	f7f7 fc60 	bl	800882e <aci_gatt_write_resp>
        break;
 8010f6e:	e002      	b.n	8010f76 <DTS_Event_Handler+0x1ba>
          break;
 8010f70:	bf00      	nop
 8010f72:	e000      	b.n	8010f76 <DTS_Event_Handler+0x1ba>
          break;
 8010f74:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 8010f76:	bf00      	nop
  }

  return (return_value);
 8010f78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}/* end SVCCTL_EvtAckStatus_t */
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	3738      	adds	r7, #56	; 0x38
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd80      	pop	{r7, pc}
 8010f84:	08013d90 	.word	0x08013d90
 8010f88:	08013db0 	.word	0x08013db0
 8010f8c:	20006fc8 	.word	0x20006fc8
 8010f90:	20006c1c 	.word	0x20006c1c
 8010f94:	08013dc0 	.word	0x08013dc0
 8010f98:	08013dd8 	.word	0x08013dd8
 8010f9c:	08013df0 	.word	0x08013df0

08010fa0 <TX_Update_Char>:
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * @param  pFeatureValue: The address of the new value to be written
 * @retval None
 */
static tBleStatus TX_Update_Char( DTS_STM_Payload_t *pDataValue )
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b086      	sub	sp, #24
 8010fa4:	af02      	add	r7, sp, #8
 8010fa6:	6078      	str	r0, [r7, #4]
  tBleStatus ret;

  /**
   *  Notification Data Transfer Packet
   */
  ret = aci_gatt_update_char_value(
 8010fa8:	4b0a      	ldr	r3, [pc, #40]	; (8010fd4 <TX_Update_Char+0x34>)
 8010faa:	8818      	ldrh	r0, [r3, #0]
 8010fac:	4b09      	ldr	r3, [pc, #36]	; (8010fd4 <TX_Update_Char+0x34>)
 8010fae:	8859      	ldrh	r1, [r3, #2]
                                   aDataTransferContext.DataTransferSvcHdle,
                                   aDataTransferContext.DataTransferTxCharHdle,
                                   0, /* charValOffset */
                                   pDataValue->Length, /* charValueLen */
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	68db      	ldr	r3, [r3, #12]
  ret = aci_gatt_update_char_value(
 8010fb4:	b2da      	uxtb	r2, r3
                                   (uint8_t *) pDataValue->pPayload);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
  ret = aci_gatt_update_char_value(
 8010fba:	9300      	str	r3, [sp, #0]
 8010fbc:	4613      	mov	r3, r2
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	f7f7 f9b7 	bl	8008332 <aci_gatt_update_char_value>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	73fb      	strb	r3, [r7, #15]

  return ret;
 8010fc8:	7bfb      	ldrb	r3, [r7, #15]
}/* end TX_Update_Char() */
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3710      	adds	r7, #16
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
 8010fd2:	bf00      	nop
 8010fd4:	20006c1c 	.word	0x20006c1c

08010fd8 <DTS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DTS_STM_Init( void )
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b088      	sub	sp, #32
 8010fdc:	af06      	add	r7, sp, #24
  tBleStatus hciCmdResult = BLE_STATUS_FAILED;
 8010fde:	2341      	movs	r3, #65	; 0x41
 8010fe0:	71fb      	strb	r3, [r7, #7]

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(DTS_Event_Handler);
 8010fe2:	483c      	ldr	r0, [pc, #240]	; (80110d4 <DTS_STM_Init+0xfc>)
 8010fe4:	f7f8 f8da 	bl	800919c <SVCCTL_RegisterSvcHandler>

  /* DT service and characteristics */
  hciCmdResult = aci_gatt_add_service(DT_UUID_LENGTH, (Service_UUID_t *) DT_REQ_SERV_UUID,
 8010fe8:	4b3b      	ldr	r3, [pc, #236]	; (80110d8 <DTS_STM_Init+0x100>)
 8010fea:	9300      	str	r3, [sp, #0]
 8010fec:	230a      	movs	r3, #10
 8010fee:	2201      	movs	r2, #1
 8010ff0:	493a      	ldr	r1, [pc, #232]	; (80110dc <DTS_STM_Init+0x104>)
 8010ff2:	2002      	movs	r0, #2
 8010ff4:	f7f7 f804 	bl	8008000 <aci_gatt_add_service>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	71fb      	strb	r3, [r7, #7]
  PRIMARY_SERVICE,
                                      10, &(aDataTransferContext.DataTransferSvcHdle));
  if (hciCmdResult != 0)
 8010ffc:	79fb      	ldrb	r3, [r7, #7]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d007      	beq.n	8011012 <DTS_STM_Init+0x3a>
  {
    APP_DBG_MSG("error add service 0x%x\n", hciCmdResult);
 8011002:	79fb      	ldrb	r3, [r7, #7]
 8011004:	4619      	mov	r1, r3
 8011006:	4836      	ldr	r0, [pc, #216]	; (80110e0 <DTS_STM_Init+0x108>)
 8011008:	f000 fdda 	bl	8011bc0 <iprintf>
    BSP_LED_On(LED_RED);
 801100c:	2002      	movs	r0, #2
 801100e:	f7f1 f9f5 	bl	80023fc <BSP_LED_On>
  }

  /**
   *  Add Data Transfer TX Characteristic
   */
  hciCmdResult = aci_gatt_add_char(aDataTransferContext.DataTransferSvcHdle,
 8011012:	4b31      	ldr	r3, [pc, #196]	; (80110d8 <DTS_STM_Init+0x100>)
 8011014:	8818      	ldrh	r0, [r3, #0]
 8011016:	4b33      	ldr	r3, [pc, #204]	; (80110e4 <DTS_STM_Init+0x10c>)
 8011018:	9305      	str	r3, [sp, #20]
 801101a:	2301      	movs	r3, #1
 801101c:	9304      	str	r3, [sp, #16]
 801101e:	230a      	movs	r3, #10
 8011020:	9303      	str	r3, [sp, #12]
 8011022:	2300      	movs	r3, #0
 8011024:	9302      	str	r3, [sp, #8]
 8011026:	2300      	movs	r3, #0
 8011028:	9301      	str	r3, [sp, #4]
 801102a:	2310      	movs	r3, #16
 801102c:	9300      	str	r3, [sp, #0]
 801102e:	23ff      	movs	r3, #255	; 0xff
 8011030:	4a2d      	ldr	r2, [pc, #180]	; (80110e8 <DTS_STM_Init+0x110>)
 8011032:	2102      	movs	r1, #2
 8011034:	f7f7 f893 	bl	800815e <aci_gatt_add_char>
 8011038:	4603      	mov	r3, r0
 801103a:	71fb      	strb	r3, [r7, #7]
                    ATTR_PERMISSION_NONE,
                    GATT_DONT_NOTIFY_EVENTS, /* gattEvtMask */
                    10, /* encryKeySize */
                    1, /* isVariable */
                    &(aDataTransferContext.DataTransferTxCharHdle));
  if (hciCmdResult != 0)
 801103c:	79fb      	ldrb	r3, [r7, #7]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d007      	beq.n	8011052 <DTS_STM_Init+0x7a>
  {
    APP_DBG_MSG("error add char Tx 0x%x\n", hciCmdResult);
 8011042:	79fb      	ldrb	r3, [r7, #7]
 8011044:	4619      	mov	r1, r3
 8011046:	4829      	ldr	r0, [pc, #164]	; (80110ec <DTS_STM_Init+0x114>)
 8011048:	f000 fdba 	bl	8011bc0 <iprintf>
    BSP_LED_On(LED_RED);
 801104c:	2002      	movs	r0, #2
 801104e:	f7f1 f9d5 	bl	80023fc <BSP_LED_On>
  }

  /**
   *  Add Data Transfer RX Characteristic
   */
  hciCmdResult = aci_gatt_add_char(aDataTransferContext.DataTransferSvcHdle,
 8011052:	4b21      	ldr	r3, [pc, #132]	; (80110d8 <DTS_STM_Init+0x100>)
 8011054:	8818      	ldrh	r0, [r3, #0]
 8011056:	4b26      	ldr	r3, [pc, #152]	; (80110f0 <DTS_STM_Init+0x118>)
 8011058:	9305      	str	r3, [sp, #20]
 801105a:	2301      	movs	r3, #1
 801105c:	9304      	str	r3, [sp, #16]
 801105e:	230a      	movs	r3, #10
 8011060:	9303      	str	r3, [sp, #12]
 8011062:	2301      	movs	r3, #1
 8011064:	9302      	str	r3, [sp, #8]
 8011066:	2300      	movs	r3, #0
 8011068:	9301      	str	r3, [sp, #4]
 801106a:	2304      	movs	r3, #4
 801106c:	9300      	str	r3, [sp, #0]
 801106e:	23ff      	movs	r3, #255	; 0xff
 8011070:	4a20      	ldr	r2, [pc, #128]	; (80110f4 <DTS_STM_Init+0x11c>)
 8011072:	2102      	movs	r1, #2
 8011074:	f7f7 f873 	bl	800815e <aci_gatt_add_char>
 8011078:	4603      	mov	r3, r0
 801107a:	71fb      	strb	r3, [r7, #7]
                    ATTR_PERMISSION_NONE,
                    GATT_NOTIFY_ATTRIBUTE_WRITE, //GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP, /* gattEvtMask */
                    10, /* encryKeySize */
                    1, /* isVariable */
                    &(aDataTransferContext.DataTransferRxCharHdle));
  if (hciCmdResult != 0)
 801107c:	79fb      	ldrb	r3, [r7, #7]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d005      	beq.n	801108e <DTS_STM_Init+0xb6>
  {
    APP_DBG_MSG("error add char Tx\n");
 8011082:	481d      	ldr	r0, [pc, #116]	; (80110f8 <DTS_STM_Init+0x120>)
 8011084:	f000 fe10 	bl	8011ca8 <puts>
    BSP_LED_On(LED_RED);
 8011088:	2002      	movs	r0, #2
 801108a:	f7f1 f9b7 	bl	80023fc <BSP_LED_On>
  }
  
  /**
   *  Add Data Transfer TX Characteristic
   */
  hciCmdResult = aci_gatt_add_char(aDataTransferContext.DataTransferSvcHdle,
 801108e:	4b12      	ldr	r3, [pc, #72]	; (80110d8 <DTS_STM_Init+0x100>)
 8011090:	8818      	ldrh	r0, [r3, #0]
 8011092:	4b1a      	ldr	r3, [pc, #104]	; (80110fc <DTS_STM_Init+0x124>)
 8011094:	9305      	str	r3, [sp, #20]
 8011096:	2301      	movs	r3, #1
 8011098:	9304      	str	r3, [sp, #16]
 801109a:	230a      	movs	r3, #10
 801109c:	9303      	str	r3, [sp, #12]
 801109e:	2300      	movs	r3, #0
 80110a0:	9302      	str	r3, [sp, #8]
 80110a2:	2300      	movs	r3, #0
 80110a4:	9301      	str	r3, [sp, #4]
 80110a6:	2310      	movs	r3, #16
 80110a8:	9300      	str	r3, [sp, #0]
 80110aa:	23ff      	movs	r3, #255	; 0xff
 80110ac:	4a14      	ldr	r2, [pc, #80]	; (8011100 <DTS_STM_Init+0x128>)
 80110ae:	2102      	movs	r1, #2
 80110b0:	f7f7 f855 	bl	800815e <aci_gatt_add_char>
 80110b4:	4603      	mov	r3, r0
 80110b6:	71fb      	strb	r3, [r7, #7]
                    ATTR_PERMISSION_NONE,
                    GATT_DONT_NOTIFY_EVENTS, /* gattEvtMask */
                    10, /* encryKeySize */
                    1, /* isVariable */
                    &(aDataTransferContext.DataTransferTxChar3Hdle));
  if (hciCmdResult != 0)
 80110b8:	79fb      	ldrb	r3, [r7, #7]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d006      	beq.n	80110cc <DTS_STM_Init+0xf4>
  {
    APP_DBG_MSG("error add char Tx\n");
 80110be:	480e      	ldr	r0, [pc, #56]	; (80110f8 <DTS_STM_Init+0x120>)
 80110c0:	f000 fdf2 	bl	8011ca8 <puts>
    BSP_LED_On(LED_RED);
 80110c4:	2002      	movs	r0, #2
 80110c6:	f7f1 f999 	bl	80023fc <BSP_LED_On>
  }
  
  return;
 80110ca:	bf00      	nop
 80110cc:	bf00      	nop
}
 80110ce:	3708      	adds	r7, #8
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}
 80110d4:	08010dbd 	.word	0x08010dbd
 80110d8:	20006c1c 	.word	0x20006c1c
 80110dc:	08014210 	.word	0x08014210
 80110e0:	08013e04 	.word	0x08013e04
 80110e4:	20006c1e 	.word	0x20006c1e
 80110e8:	080141e0 	.word	0x080141e0
 80110ec:	08013e1c 	.word	0x08013e1c
 80110f0:	20006c20 	.word	0x20006c20
 80110f4:	080141f0 	.word	0x080141f0
 80110f8:	08013e34 	.word	0x08013e34
 80110fc:	20006c22 	.word	0x20006c22
 8011100:	08014200 	.word	0x08014200

08011104 <DTS_STM_UpdateChar>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus DTS_STM_UpdateChar( uint16_t UUID , uint8_t *pPayload )
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b084      	sub	sp, #16
 8011108:	af00      	add	r7, sp, #0
 801110a:	4603      	mov	r3, r0
 801110c:	6039      	str	r1, [r7, #0]
 801110e:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8011110:	2342      	movs	r3, #66	; 0x42
 8011112:	73fb      	strb	r3, [r7, #15]
  switch (UUID)
 8011114:	88fb      	ldrh	r3, [r7, #6]
 8011116:	f64f 6281 	movw	r2, #65153	; 0xfe81
 801111a:	4293      	cmp	r3, r2
 801111c:	d000      	beq.n	8011120 <DTS_STM_UpdateChar+0x1c>
    case DATA_TRANSFER_TX_CHAR_UUID:
      result = TX_Update_Char((DTS_STM_Payload_t*) pPayload);
      break;

    default:
      break;
 801111e:	e005      	b.n	801112c <DTS_STM_UpdateChar+0x28>
      result = TX_Update_Char((DTS_STM_Payload_t*) pPayload);
 8011120:	6838      	ldr	r0, [r7, #0]
 8011122:	f7ff ff3d 	bl	8010fa0 <TX_Update_Char>
 8011126:	4603      	mov	r3, r0
 8011128:	73fb      	strb	r3, [r7, #15]
      break;
 801112a:	bf00      	nop
  }
  return result;
 801112c:	7bfb      	ldrb	r3, [r7, #15]
}/* end DTS_STM_UpdateChar() */
 801112e:	4618      	mov	r0, r3
 8011130:	3710      	adds	r7, #16
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}
	...

08011138 <DTS_STM_UpdateCharThroughput>:

tBleStatus DTS_STM_UpdateCharThroughput(DTS_STM_Payload_t *pDataValue )
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b086      	sub	sp, #24
 801113c:	af02      	add	r7, sp, #8
 801113e:	6078      	str	r0, [r7, #4]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8011140:	2342      	movs	r3, #66	; 0x42
 8011142:	73fb      	strb	r3, [r7, #15]
  /**
   *  Notification Data Transfer Packet
   */
  result = aci_gatt_update_char_value(
 8011144:	4b0a      	ldr	r3, [pc, #40]	; (8011170 <DTS_STM_UpdateCharThroughput+0x38>)
 8011146:	8818      	ldrh	r0, [r3, #0]
 8011148:	4b09      	ldr	r3, [pc, #36]	; (8011170 <DTS_STM_UpdateCharThroughput+0x38>)
 801114a:	88d9      	ldrh	r1, [r3, #6]
                                   aDataTransferContext.DataTransferSvcHdle,
                                   aDataTransferContext.DataTransferTxChar3Hdle,
                                   0, /* charValOffset */
                                   pDataValue->Length, /* charValueLen */
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	68db      	ldr	r3, [r3, #12]
  result = aci_gatt_update_char_value(
 8011150:	b2da      	uxtb	r2, r3
                                   (uint8_t *) pDataValue->pPayload);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
  result = aci_gatt_update_char_value(
 8011156:	9300      	str	r3, [sp, #0]
 8011158:	4613      	mov	r3, r2
 801115a:	2200      	movs	r2, #0
 801115c:	f7f7 f8e9 	bl	8008332 <aci_gatt_update_char_value>
 8011160:	4603      	mov	r3, r0
 8011162:	73fb      	strb	r3, [r7, #15]
  return result;
 8011164:	7bfb      	ldrb	r3, [r7, #15]
}/* end DTS_STM_UpdateChar() */
 8011166:	4618      	mov	r0, r3
 8011168:	3710      	adds	r7, #16
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}
 801116e:	bf00      	nop
 8011170:	20006c1c 	.word	0x20006c1c

08011174 <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	781b      	ldrb	r3, [r3, #0]
 8011180:	2b01      	cmp	r3, #1
 8011182:	d00e      	beq.n	80111a2 <P2PS_STM_App_Notification+0x2e>
 8011184:	2b03      	cmp	r3, #3
 8011186:	d016      	beq.n	80111b6 <P2PS_STM_App_Notification+0x42>
 8011188:	2b00      	cmp	r3, #0
 801118a:	d000      	beq.n	801118e <P2PS_STM_App_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 801118c:	e037      	b.n	80111fe <P2PS_STM_App_Notification+0x8a>
      P2P_Server_App_Context.Notification_Status = 1;
 801118e:	4b1e      	ldr	r3, [pc, #120]	; (8011208 <P2PS_STM_App_Notification+0x94>)
 8011190:	2201      	movs	r2, #1
 8011192:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 8011194:	481d      	ldr	r0, [pc, #116]	; (801120c <P2PS_STM_App_Notification+0x98>)
 8011196:	f000 fd87 	bl	8011ca8 <puts>
      APP_DBG_MSG(" \n\r");
 801119a:	481d      	ldr	r0, [pc, #116]	; (8011210 <P2PS_STM_App_Notification+0x9c>)
 801119c:	f000 fd10 	bl	8011bc0 <iprintf>
      break;
 80111a0:	e02d      	b.n	80111fe <P2PS_STM_App_Notification+0x8a>
      P2P_Server_App_Context.Notification_Status = 0;
 80111a2:	4b19      	ldr	r3, [pc, #100]	; (8011208 <P2PS_STM_App_Notification+0x94>)
 80111a4:	2200      	movs	r2, #0
 80111a6:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 80111a8:	481a      	ldr	r0, [pc, #104]	; (8011214 <P2PS_STM_App_Notification+0xa0>)
 80111aa:	f000 fd7d 	bl	8011ca8 <puts>
      APP_DBG_MSG(" \n\r");
 80111ae:	4818      	ldr	r0, [pc, #96]	; (8011210 <P2PS_STM_App_Notification+0x9c>)
 80111b0:	f000 fd06 	bl	8011bc0 <iprintf>
      break;
 80111b4:	e023      	b.n	80111fe <P2PS_STM_App_Notification+0x8a>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	685b      	ldr	r3, [r3, #4]
 80111ba:	781b      	ldrb	r3, [r3, #0]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d11d      	bne.n	80111fc <P2PS_STM_App_Notification+0x88>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	685b      	ldr	r3, [r3, #4]
 80111c4:	3301      	adds	r3, #1
 80111c6:	781b      	ldrb	r3, [r3, #0]
 80111c8:	2b01      	cmp	r3, #1
 80111ca:	d108      	bne.n	80111de <P2PS_STM_App_Notification+0x6a>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n"); 
 80111cc:	4812      	ldr	r0, [pc, #72]	; (8011218 <P2PS_STM_App_Notification+0xa4>)
 80111ce:	f000 fd6b 	bl	8011ca8 <puts>
          APP_DBG_MSG(" \n\r");
 80111d2:	480f      	ldr	r0, [pc, #60]	; (8011210 <P2PS_STM_App_Notification+0x9c>)
 80111d4:	f000 fcf4 	bl	8011bc0 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 80111d8:	4b0b      	ldr	r3, [pc, #44]	; (8011208 <P2PS_STM_App_Notification+0x94>)
 80111da:	2201      	movs	r2, #1
 80111dc:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	685b      	ldr	r3, [r3, #4]
 80111e2:	3301      	adds	r3, #1
 80111e4:	781b      	ldrb	r3, [r3, #0]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d108      	bne.n	80111fc <P2PS_STM_App_Notification+0x88>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n"); 
 80111ea:	480c      	ldr	r0, [pc, #48]	; (801121c <P2PS_STM_App_Notification+0xa8>)
 80111ec:	f000 fd5c 	bl	8011ca8 <puts>
          APP_DBG_MSG(" \n\r");
 80111f0:	4807      	ldr	r0, [pc, #28]	; (8011210 <P2PS_STM_App_Notification+0x9c>)
 80111f2:	f000 fce5 	bl	8011bc0 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 80111f6:	4b04      	ldr	r3, [pc, #16]	; (8011208 <P2PS_STM_App_Notification+0x94>)
 80111f8:	2200      	movs	r2, #0
 80111fa:	709a      	strb	r2, [r3, #2]
      break;
 80111fc:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 80111fe:	bf00      	nop
}
 8011200:	3708      	adds	r7, #8
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}
 8011206:	bf00      	nop
 8011208:	20000230 	.word	0x20000230
 801120c:	08013e48 	.word	0x08013e48
 8011210:	08013e7c 	.word	0x08013e7c
 8011214:	08013e80 	.word	0x08013e80
 8011218:	08013eb4 	.word	0x08013eb4
 801121c:	08013edc 	.word	0x08013edc

08011220 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d005      	beq.n	801123c <P2PS_APP_Notification+0x1c>
 8011230:	2b01      	cmp	r3, #1
 8011232:	d000      	beq.n	8011236 <P2PS_APP_Notification+0x16>
    
    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8011234:	e003      	b.n	801123e <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 8011236:	f000 f806 	bl	8011246 <P2PS_APP_LED_BUTTON_context_Init>
    break;
 801123a:	e000      	b.n	801123e <P2PS_APP_Notification+0x1e>
    break;
 801123c:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 801123e:	bf00      	nop
}
 8011240:	3708      	adds	r7, #8
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}

08011246 <P2PS_APP_LED_BUTTON_context_Init>:
/* USER CODE END P2PS_APP_Init */
  return;
}

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 8011246:	b480      	push	{r7}
 8011248:	af00      	add	r7, sp, #0
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 801124a:	bf00      	nop
 801124c:	46bd      	mov	sp, r7
 801124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011252:	4770      	bx	lr

08011254 <LL_PWR_EnableBootC2>:
{
 8011254:	b480      	push	{r7}
 8011256:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8011258:	4b05      	ldr	r3, [pc, #20]	; (8011270 <LL_PWR_EnableBootC2+0x1c>)
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	4a04      	ldr	r2, [pc, #16]	; (8011270 <LL_PWR_EnableBootC2+0x1c>)
 801125e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011262:	60d3      	str	r3, [r2, #12]
}
 8011264:	bf00      	nop
 8011266:	46bd      	mov	sp, r7
 8011268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126c:	4770      	bx	lr
 801126e:	bf00      	nop
 8011270:	58000400 	.word	0x58000400

08011274 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8011274:	b480      	push	{r7}
 8011276:	b083      	sub	sp, #12
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 801127c:	4b06      	ldr	r3, [pc, #24]	; (8011298 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801127e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8011282:	4905      	ldr	r1, [pc, #20]	; (8011298 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	4313      	orrs	r3, r2
 8011288:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 801128c:	bf00      	nop
 801128e:	370c      	adds	r7, #12
 8011290:	46bd      	mov	sp, r7
 8011292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011296:	4770      	bx	lr
 8011298:	58000800 	.word	0x58000800

0801129c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 801129c:	b480      	push	{r7}
 801129e:	b083      	sub	sp, #12
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80112a4:	4b05      	ldr	r3, [pc, #20]	; (80112bc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80112a6:	6a1a      	ldr	r2, [r3, #32]
 80112a8:	4904      	ldr	r1, [pc, #16]	; (80112bc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	4313      	orrs	r3, r2
 80112ae:	620b      	str	r3, [r1, #32]
}
 80112b0:	bf00      	nop
 80112b2:	370c      	adds	r7, #12
 80112b4:	46bd      	mov	sp, r7
 80112b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ba:	4770      	bx	lr
 80112bc:	58000800 	.word	0x58000800

080112c0 <LL_AHB3_GRP1_EnableClock>:
{
 80112c0:	b480      	push	{r7}
 80112c2:	b085      	sub	sp, #20
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80112c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80112cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80112ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	4313      	orrs	r3, r2
 80112d6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80112d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80112dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	4013      	ands	r3, r2
 80112e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80112e4:	68fb      	ldr	r3, [r7, #12]
}
 80112e6:	bf00      	nop
 80112e8:	3714      	adds	r7, #20
 80112ea:	46bd      	mov	sp, r7
 80112ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f0:	4770      	bx	lr

080112f2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80112f2:	b480      	push	{r7}
 80112f4:	b085      	sub	sp, #20
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80112fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80112fe:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8011302:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	4313      	orrs	r3, r2
 801130a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 801130e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011312:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	4013      	ands	r3, r2
 801131a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801131c:	68fb      	ldr	r3, [r7, #12]
}
 801131e:	bf00      	nop
 8011320:	3714      	adds	r7, #20
 8011322:	46bd      	mov	sp, r7
 8011324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011328:	4770      	bx	lr

0801132a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 801132a:	b480      	push	{r7}
 801132c:	b083      	sub	sp, #12
 801132e:	af00      	add	r7, sp, #0
 8011330:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	601a      	str	r2, [r3, #0]
}
 801133e:	bf00      	nop
 8011340:	370c      	adds	r7, #12
 8011342:	46bd      	mov	sp, r7
 8011344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011348:	4770      	bx	lr

0801134a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 801134a:	b480      	push	{r7}
 801134c:	b083      	sub	sp, #12
 801134e:	af00      	add	r7, sp, #0
 8011350:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f043 0201 	orr.w	r2, r3, #1
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	601a      	str	r2, [r3, #0]
}
 801135e:	bf00      	nop
 8011360:	370c      	adds	r7, #12
 8011362:	46bd      	mov	sp, r7
 8011364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011368:	4770      	bx	lr

0801136a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801136a:	b480      	push	{r7}
 801136c:	b083      	sub	sp, #12
 801136e:	af00      	add	r7, sp, #0
 8011370:	6078      	str	r0, [r7, #4]
 8011372:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	685a      	ldr	r2, [r3, #4]
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	041b      	lsls	r3, r3, #16
 801137c:	43db      	mvns	r3, r3
 801137e:	401a      	ands	r2, r3
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	605a      	str	r2, [r3, #4]
}
 8011384:	bf00      	nop
 8011386:	370c      	adds	r7, #12
 8011388:	46bd      	mov	sp, r7
 801138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138e:	4770      	bx	lr

08011390 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8011390:	b480      	push	{r7}
 8011392:	b083      	sub	sp, #12
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
 8011398:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	685a      	ldr	r2, [r3, #4]
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	041b      	lsls	r3, r3, #16
 80113a2:	431a      	orrs	r2, r3
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	605a      	str	r2, [r3, #4]
}
 80113a8:	bf00      	nop
 80113aa:	370c      	adds	r7, #12
 80113ac:	46bd      	mov	sp, r7
 80113ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b2:	4770      	bx	lr

080113b4 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80113b4:	b480      	push	{r7}
 80113b6:	b083      	sub	sp, #12
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
 80113bc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	685a      	ldr	r2, [r3, #4]
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	43db      	mvns	r3, r3
 80113c6:	401a      	ands	r2, r3
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	605a      	str	r2, [r3, #4]
}
 80113cc:	bf00      	nop
 80113ce:	370c      	adds	r7, #12
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr

080113d8 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80113d8:	b480      	push	{r7}
 80113da:	b083      	sub	sp, #12
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
 80113e0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	685a      	ldr	r2, [r3, #4]
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	431a      	orrs	r2, r3
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	605a      	str	r2, [r3, #4]
}
 80113ee:	bf00      	nop
 80113f0:	370c      	adds	r7, #12
 80113f2:	46bd      	mov	sp, r7
 80113f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f8:	4770      	bx	lr

080113fa <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80113fa:	b480      	push	{r7}
 80113fc:	b083      	sub	sp, #12
 80113fe:	af00      	add	r7, sp, #0
 8011400:	6078      	str	r0, [r7, #4]
 8011402:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	683a      	ldr	r2, [r7, #0]
 8011408:	609a      	str	r2, [r3, #8]
}
 801140a:	bf00      	nop
 801140c:	370c      	adds	r7, #12
 801140e:	46bd      	mov	sp, r7
 8011410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011414:	4770      	bx	lr

08011416 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8011416:	b480      	push	{r7}
 8011418:	b083      	sub	sp, #12
 801141a:	af00      	add	r7, sp, #0
 801141c:	6078      	str	r0, [r7, #4]
 801141e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	041a      	lsls	r2, r3, #16
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	609a      	str	r2, [r3, #8]
}
 8011428:	bf00      	nop
 801142a:	370c      	adds	r7, #12
 801142c:	46bd      	mov	sp, r7
 801142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011432:	4770      	bx	lr

08011434 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8011434:	b480      	push	{r7}
 8011436:	b083      	sub	sp, #12
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
 801143c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	68da      	ldr	r2, [r3, #12]
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	4013      	ands	r3, r2
 8011446:	683a      	ldr	r2, [r7, #0]
 8011448:	429a      	cmp	r2, r3
 801144a:	d101      	bne.n	8011450 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 801144c:	2301      	movs	r3, #1
 801144e:	e000      	b.n	8011452 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8011450:	2300      	movs	r3, #0
}
 8011452:	4618      	mov	r0, r3
 8011454:	370c      	adds	r7, #12
 8011456:	46bd      	mov	sp, r7
 8011458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145c:	4770      	bx	lr

0801145e <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 801145e:	b480      	push	{r7}
 8011460:	b083      	sub	sp, #12
 8011462:	af00      	add	r7, sp, #0
 8011464:	6078      	str	r0, [r7, #4]
 8011466:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	69da      	ldr	r2, [r3, #28]
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	4013      	ands	r3, r2
 8011470:	683a      	ldr	r2, [r7, #0]
 8011472:	429a      	cmp	r2, r3
 8011474:	d101      	bne.n	801147a <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8011476:	2301      	movs	r3, #1
 8011478:	e000      	b.n	801147c <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 801147a:	2300      	movs	r3, #0
}
 801147c:	4618      	mov	r0, r3
 801147e:	370c      	adds	r7, #12
 8011480:	46bd      	mov	sp, r7
 8011482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011486:	4770      	bx	lr

08011488 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8011488:	b580      	push	{r7, lr}
 801148a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 801148c:	2102      	movs	r1, #2
 801148e:	482a      	ldr	r0, [pc, #168]	; (8011538 <HW_IPCC_Rx_Handler+0xb0>)
 8011490:	f7ff ffe5 	bl	801145e <LL_C2_IPCC_IsActiveFlag_CHx>
 8011494:	4603      	mov	r3, r0
 8011496:	2b00      	cmp	r3, #0
 8011498:	d009      	beq.n	80114ae <HW_IPCC_Rx_Handler+0x26>
 801149a:	4b27      	ldr	r3, [pc, #156]	; (8011538 <HW_IPCC_Rx_Handler+0xb0>)
 801149c:	685b      	ldr	r3, [r3, #4]
 801149e:	43db      	mvns	r3, r3
 80114a0:	f003 0302 	and.w	r3, r3, #2
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d002      	beq.n	80114ae <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80114a8:	f000 f91e 	bl	80116e8 <HW_IPCC_SYS_EvtHandler>
 80114ac:	e041      	b.n	8011532 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 80114ae:	2104      	movs	r1, #4
 80114b0:	4821      	ldr	r0, [pc, #132]	; (8011538 <HW_IPCC_Rx_Handler+0xb0>)
 80114b2:	f7ff ffd4 	bl	801145e <LL_C2_IPCC_IsActiveFlag_CHx>
 80114b6:	4603      	mov	r3, r0
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d009      	beq.n	80114d0 <HW_IPCC_Rx_Handler+0x48>
 80114bc:	4b1e      	ldr	r3, [pc, #120]	; (8011538 <HW_IPCC_Rx_Handler+0xb0>)
 80114be:	685b      	ldr	r3, [r3, #4]
 80114c0:	43db      	mvns	r3, r3
 80114c2:	f003 0304 	and.w	r3, r3, #4
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d002      	beq.n	80114d0 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 80114ca:	f000 f967 	bl	801179c <HW_IPCC_THREAD_NotEvtHandler>
 80114ce:	e030      	b.n	8011532 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 80114d0:	2110      	movs	r1, #16
 80114d2:	4819      	ldr	r0, [pc, #100]	; (8011538 <HW_IPCC_Rx_Handler+0xb0>)
 80114d4:	f7ff ffc3 	bl	801145e <LL_C2_IPCC_IsActiveFlag_CHx>
 80114d8:	4603      	mov	r3, r0
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d009      	beq.n	80114f2 <HW_IPCC_Rx_Handler+0x6a>
 80114de:	4b16      	ldr	r3, [pc, #88]	; (8011538 <HW_IPCC_Rx_Handler+0xb0>)
 80114e0:	685b      	ldr	r3, [r3, #4]
 80114e2:	43db      	mvns	r3, r3
 80114e4:	f003 0310 	and.w	r3, r3, #16
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d002      	beq.n	80114f2 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 80114ec:	f000 f962 	bl	80117b4 <HW_IPCC_THREAD_CliNotEvtHandler>
 80114f0:	e01f      	b.n	8011532 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80114f2:	2101      	movs	r1, #1
 80114f4:	4810      	ldr	r0, [pc, #64]	; (8011538 <HW_IPCC_Rx_Handler+0xb0>)
 80114f6:	f7ff ffb2 	bl	801145e <LL_C2_IPCC_IsActiveFlag_CHx>
 80114fa:	4603      	mov	r3, r0
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d008      	beq.n	8011512 <HW_IPCC_Rx_Handler+0x8a>
 8011500:	4b0d      	ldr	r3, [pc, #52]	; (8011538 <HW_IPCC_Rx_Handler+0xb0>)
 8011502:	685b      	ldr	r3, [r3, #4]
 8011504:	f003 0301 	and.w	r3, r3, #1
 8011508:	2b00      	cmp	r3, #0
 801150a:	d102      	bne.n	8011512 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 801150c:	f000 f8b0 	bl	8011670 <HW_IPCC_BLE_EvtHandler>
 8011510:	e00f      	b.n	8011532 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8011512:	2108      	movs	r1, #8
 8011514:	4808      	ldr	r0, [pc, #32]	; (8011538 <HW_IPCC_Rx_Handler+0xb0>)
 8011516:	f7ff ffa2 	bl	801145e <LL_C2_IPCC_IsActiveFlag_CHx>
 801151a:	4603      	mov	r3, r0
 801151c:	2b00      	cmp	r3, #0
 801151e:	d009      	beq.n	8011534 <HW_IPCC_Rx_Handler+0xac>
 8011520:	4b05      	ldr	r3, [pc, #20]	; (8011538 <HW_IPCC_Rx_Handler+0xb0>)
 8011522:	685b      	ldr	r3, [r3, #4]
 8011524:	43db      	mvns	r3, r3
 8011526:	f003 0308 	and.w	r3, r3, #8
 801152a:	2b00      	cmp	r3, #0
 801152c:	d002      	beq.n	8011534 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 801152e:	f000 f98d 	bl	801184c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8011532:	bf00      	nop
 8011534:	bf00      	nop
}
 8011536:	bd80      	pop	{r7, pc}
 8011538:	58000c00 	.word	0x58000c00

0801153c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 801153c:	b580      	push	{r7, lr}
 801153e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8011540:	2102      	movs	r1, #2
 8011542:	482b      	ldr	r0, [pc, #172]	; (80115f0 <HW_IPCC_Tx_Handler+0xb4>)
 8011544:	f7ff ff76 	bl	8011434 <LL_C1_IPCC_IsActiveFlag_CHx>
 8011548:	4603      	mov	r3, r0
 801154a:	2b00      	cmp	r3, #0
 801154c:	d109      	bne.n	8011562 <HW_IPCC_Tx_Handler+0x26>
 801154e:	4b28      	ldr	r3, [pc, #160]	; (80115f0 <HW_IPCC_Tx_Handler+0xb4>)
 8011550:	685b      	ldr	r3, [r3, #4]
 8011552:	43db      	mvns	r3, r3
 8011554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011558:	2b00      	cmp	r3, #0
 801155a:	d002      	beq.n	8011562 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 801155c:	f000 f8b8 	bl	80116d0 <HW_IPCC_SYS_CmdEvtHandler>
 8011560:	e042      	b.n	80115e8 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8011562:	2104      	movs	r1, #4
 8011564:	4822      	ldr	r0, [pc, #136]	; (80115f0 <HW_IPCC_Tx_Handler+0xb4>)
 8011566:	f7ff ff65 	bl	8011434 <LL_C1_IPCC_IsActiveFlag_CHx>
 801156a:	4603      	mov	r3, r0
 801156c:	2b00      	cmp	r3, #0
 801156e:	d109      	bne.n	8011584 <HW_IPCC_Tx_Handler+0x48>
 8011570:	4b1f      	ldr	r3, [pc, #124]	; (80115f0 <HW_IPCC_Tx_Handler+0xb4>)
 8011572:	685b      	ldr	r3, [r3, #4]
 8011574:	43db      	mvns	r3, r3
 8011576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801157a:	2b00      	cmp	r3, #0
 801157c:	d002      	beq.n	8011584 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 801157e:	f000 f901 	bl	8011784 <HW_IPCC_OT_CmdEvtHandler>
 8011582:	e031      	b.n	80115e8 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8011584:	2102      	movs	r1, #2
 8011586:	481a      	ldr	r0, [pc, #104]	; (80115f0 <HW_IPCC_Tx_Handler+0xb4>)
 8011588:	f7ff ff54 	bl	8011434 <LL_C1_IPCC_IsActiveFlag_CHx>
 801158c:	4603      	mov	r3, r0
 801158e:	2b00      	cmp	r3, #0
 8011590:	d109      	bne.n	80115a6 <HW_IPCC_Tx_Handler+0x6a>
 8011592:	4b17      	ldr	r3, [pc, #92]	; (80115f0 <HW_IPCC_Tx_Handler+0xb4>)
 8011594:	685b      	ldr	r3, [r3, #4]
 8011596:	43db      	mvns	r3, r3
 8011598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801159c:	2b00      	cmp	r3, #0
 801159e:	d002      	beq.n	80115a6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80115a0:	f000 f896 	bl	80116d0 <HW_IPCC_SYS_CmdEvtHandler>
 80115a4:	e020      	b.n	80115e8 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80115a6:	2108      	movs	r1, #8
 80115a8:	4811      	ldr	r0, [pc, #68]	; (80115f0 <HW_IPCC_Tx_Handler+0xb4>)
 80115aa:	f7ff ff43 	bl	8011434 <LL_C1_IPCC_IsActiveFlag_CHx>
 80115ae:	4603      	mov	r3, r0
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d109      	bne.n	80115c8 <HW_IPCC_Tx_Handler+0x8c>
 80115b4:	4b0e      	ldr	r3, [pc, #56]	; (80115f0 <HW_IPCC_Tx_Handler+0xb4>)
 80115b6:	685b      	ldr	r3, [r3, #4]
 80115b8:	43db      	mvns	r3, r3
 80115ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d002      	beq.n	80115c8 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 80115c2:	f000 f925 	bl	8011810 <HW_IPCC_MM_FreeBufHandler>
 80115c6:	e00f      	b.n	80115e8 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80115c8:	2120      	movs	r1, #32
 80115ca:	4809      	ldr	r0, [pc, #36]	; (80115f0 <HW_IPCC_Tx_Handler+0xb4>)
 80115cc:	f7ff ff32 	bl	8011434 <LL_C1_IPCC_IsActiveFlag_CHx>
 80115d0:	4603      	mov	r3, r0
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d109      	bne.n	80115ea <HW_IPCC_Tx_Handler+0xae>
 80115d6:	4b06      	ldr	r3, [pc, #24]	; (80115f0 <HW_IPCC_Tx_Handler+0xb4>)
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	43db      	mvns	r3, r3
 80115dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d002      	beq.n	80115ea <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80115e4:	f000 f850 	bl	8011688 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80115e8:	bf00      	nop
 80115ea:	bf00      	nop
}
 80115ec:	bd80      	pop	{r7, pc}
 80115ee:	bf00      	nop
 80115f0:	58000c00 	.word	0x58000c00

080115f4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80115f8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80115fc:	f7ff fe79 	bl	80112f2 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8011600:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011604:	f7ff fe36 	bl	8011274 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8011608:	f44f 7000 	mov.w	r0, #512	; 0x200
 801160c:	f7ff fe46 	bl	801129c <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8011610:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8011612:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8011614:	f7ff fe1e 	bl	8011254 <LL_PWR_EnableBootC2>

  return;
 8011618:	bf00      	nop
}
 801161a:	bd80      	pop	{r7, pc}

0801161c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 801161c:	b580      	push	{r7, lr}
 801161e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8011620:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8011624:	f7ff fe4c 	bl	80112c0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8011628:	4806      	ldr	r0, [pc, #24]	; (8011644 <HW_IPCC_Init+0x28>)
 801162a:	f7ff fe8e 	bl	801134a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801162e:	4805      	ldr	r0, [pc, #20]	; (8011644 <HW_IPCC_Init+0x28>)
 8011630:	f7ff fe7b 	bl	801132a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8011634:	202c      	movs	r0, #44	; 0x2c
 8011636:	f7f1 fe14 	bl	8003262 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 801163a:	202d      	movs	r0, #45	; 0x2d
 801163c:	f7f1 fe11 	bl	8003262 <HAL_NVIC_EnableIRQ>

  return;
 8011640:	bf00      	nop
}
 8011642:	bd80      	pop	{r7, pc}
 8011644:	58000c00 	.word	0x58000c00

08011648 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8011648:	b580      	push	{r7, lr}
 801164a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801164c:	2101      	movs	r1, #1
 801164e:	4802      	ldr	r0, [pc, #8]	; (8011658 <HW_IPCC_BLE_Init+0x10>)
 8011650:	f7ff feb0 	bl	80113b4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011654:	bf00      	nop
}
 8011656:	bd80      	pop	{r7, pc}
 8011658:	58000c00 	.word	0x58000c00

0801165c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 801165c:	b580      	push	{r7, lr}
 801165e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8011660:	2101      	movs	r1, #1
 8011662:	4802      	ldr	r0, [pc, #8]	; (801166c <HW_IPCC_BLE_SendCmd+0x10>)
 8011664:	f7ff fed7 	bl	8011416 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8011668:	bf00      	nop
}
 801166a:	bd80      	pop	{r7, pc}
 801166c:	58000c00 	.word	0x58000c00

08011670 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8011670:	b580      	push	{r7, lr}
 8011672:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8011674:	f7f8 fab2 	bl	8009bdc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8011678:	2101      	movs	r1, #1
 801167a:	4802      	ldr	r0, [pc, #8]	; (8011684 <HW_IPCC_BLE_EvtHandler+0x14>)
 801167c:	f7ff febd 	bl	80113fa <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8011680:	bf00      	nop
}
 8011682:	bd80      	pop	{r7, pc}
 8011684:	58000c00 	.word	0x58000c00

08011688 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8011688:	b580      	push	{r7, lr}
 801168a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 801168c:	2120      	movs	r1, #32
 801168e:	4803      	ldr	r0, [pc, #12]	; (801169c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8011690:	f7ff fe7e 	bl	8011390 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8011694:	f7f8 fad2 	bl	8009c3c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8011698:	bf00      	nop
}
 801169a:	bd80      	pop	{r7, pc}
 801169c:	58000c00 	.word	0x58000c00

080116a0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80116a0:	b580      	push	{r7, lr}
 80116a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80116a4:	2102      	movs	r1, #2
 80116a6:	4802      	ldr	r0, [pc, #8]	; (80116b0 <HW_IPCC_SYS_Init+0x10>)
 80116a8:	f7ff fe84 	bl	80113b4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80116ac:	bf00      	nop
}
 80116ae:	bd80      	pop	{r7, pc}
 80116b0:	58000c00 	.word	0x58000c00

080116b4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80116b8:	2102      	movs	r1, #2
 80116ba:	4804      	ldr	r0, [pc, #16]	; (80116cc <HW_IPCC_SYS_SendCmd+0x18>)
 80116bc:	f7ff feab 	bl	8011416 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80116c0:	2102      	movs	r1, #2
 80116c2:	4802      	ldr	r0, [pc, #8]	; (80116cc <HW_IPCC_SYS_SendCmd+0x18>)
 80116c4:	f7ff fe51 	bl	801136a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80116c8:	bf00      	nop
}
 80116ca:	bd80      	pop	{r7, pc}
 80116cc:	58000c00 	.word	0x58000c00

080116d0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80116d4:	2102      	movs	r1, #2
 80116d6:	4803      	ldr	r0, [pc, #12]	; (80116e4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80116d8:	f7ff fe5a 	bl	8011390 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80116dc:	f7f8 fafe 	bl	8009cdc <HW_IPCC_SYS_CmdEvtNot>

  return;
 80116e0:	bf00      	nop
}
 80116e2:	bd80      	pop	{r7, pc}
 80116e4:	58000c00 	.word	0x58000c00

080116e8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80116ec:	f7f8 fb0c 	bl	8009d08 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80116f0:	2102      	movs	r1, #2
 80116f2:	4802      	ldr	r0, [pc, #8]	; (80116fc <HW_IPCC_SYS_EvtHandler+0x14>)
 80116f4:	f7ff fe81 	bl	80113fa <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80116f8:	bf00      	nop
}
 80116fa:	bd80      	pop	{r7, pc}
 80116fc:	58000c00 	.word	0x58000c00

08011700 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8011700:	b580      	push	{r7, lr}
 8011702:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8011704:	2104      	movs	r1, #4
 8011706:	4804      	ldr	r0, [pc, #16]	; (8011718 <HW_IPCC_THREAD_Init+0x18>)
 8011708:	f7ff fe54 	bl	80113b4 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 801170c:	2110      	movs	r1, #16
 801170e:	4802      	ldr	r0, [pc, #8]	; (8011718 <HW_IPCC_THREAD_Init+0x18>)
 8011710:	f7ff fe50 	bl	80113b4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011714:	bf00      	nop
}
 8011716:	bd80      	pop	{r7, pc}
 8011718:	58000c00 	.word	0x58000c00

0801171c <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 801171c:	b580      	push	{r7, lr}
 801171e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8011720:	2104      	movs	r1, #4
 8011722:	4804      	ldr	r0, [pc, #16]	; (8011734 <HW_IPCC_OT_SendCmd+0x18>)
 8011724:	f7ff fe77 	bl	8011416 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8011728:	2104      	movs	r1, #4
 801172a:	4802      	ldr	r0, [pc, #8]	; (8011734 <HW_IPCC_OT_SendCmd+0x18>)
 801172c:	f7ff fe1d 	bl	801136a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8011730:	bf00      	nop
}
 8011732:	bd80      	pop	{r7, pc}
 8011734:	58000c00 	.word	0x58000c00

08011738 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 8011738:	b580      	push	{r7, lr}
 801173a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 801173c:	2110      	movs	r1, #16
 801173e:	4802      	ldr	r0, [pc, #8]	; (8011748 <HW_IPCC_CLI_SendCmd+0x10>)
 8011740:	f7ff fe69 	bl	8011416 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8011744:	bf00      	nop
}
 8011746:	bd80      	pop	{r7, pc}
 8011748:	58000c00 	.word	0x58000c00

0801174c <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 801174c:	b580      	push	{r7, lr}
 801174e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8011750:	2104      	movs	r1, #4
 8011752:	4804      	ldr	r0, [pc, #16]	; (8011764 <HW_IPCC_THREAD_SendAck+0x18>)
 8011754:	f7ff fe51 	bl	80113fa <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8011758:	2104      	movs	r1, #4
 801175a:	4802      	ldr	r0, [pc, #8]	; (8011764 <HW_IPCC_THREAD_SendAck+0x18>)
 801175c:	f7ff fe2a 	bl	80113b4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011760:	bf00      	nop
}
 8011762:	bd80      	pop	{r7, pc}
 8011764:	58000c00 	.word	0x58000c00

08011768 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8011768:	b580      	push	{r7, lr}
 801176a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 801176c:	2110      	movs	r1, #16
 801176e:	4804      	ldr	r0, [pc, #16]	; (8011780 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8011770:	f7ff fe43 	bl	80113fa <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8011774:	2110      	movs	r1, #16
 8011776:	4802      	ldr	r0, [pc, #8]	; (8011780 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8011778:	f7ff fe1c 	bl	80113b4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801177c:	bf00      	nop
}
 801177e:	bd80      	pop	{r7, pc}
 8011780:	58000c00 	.word	0x58000c00

08011784 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8011784:	b580      	push	{r7, lr}
 8011786:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8011788:	2104      	movs	r1, #4
 801178a:	4803      	ldr	r0, [pc, #12]	; (8011798 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 801178c:	f7ff fe00 	bl	8011390 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8011790:	f7f8 fb30 	bl	8009df4 <HW_IPCC_OT_CmdEvtNot>

  return;
 8011794:	bf00      	nop
}
 8011796:	bd80      	pop	{r7, pc}
 8011798:	58000c00 	.word	0x58000c00

0801179c <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 801179c:	b580      	push	{r7, lr}
 801179e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80117a0:	2104      	movs	r1, #4
 80117a2:	4803      	ldr	r0, [pc, #12]	; (80117b0 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 80117a4:	f7ff fe18 	bl	80113d8 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 80117a8:	f7f8 fb30 	bl	8009e0c <HW_IPCC_THREAD_EvtNot>

  return;
 80117ac:	bf00      	nop
}
 80117ae:	bd80      	pop	{r7, pc}
 80117b0:	58000c00 	.word	0x58000c00

080117b4 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80117b8:	2110      	movs	r1, #16
 80117ba:	4803      	ldr	r0, [pc, #12]	; (80117c8 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 80117bc:	f7ff fe0c 	bl	80113d8 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 80117c0:	f7f8 fb30 	bl	8009e24 <HW_IPCC_THREAD_CliEvtNot>

  return;
 80117c4:	bf00      	nop
}
 80117c6:	bd80      	pop	{r7, pc}
 80117c8:	58000c00 	.word	0x58000c00

080117cc <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b082      	sub	sp, #8
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80117d4:	2108      	movs	r1, #8
 80117d6:	480c      	ldr	r0, [pc, #48]	; (8011808 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80117d8:	f7ff fe2c 	bl	8011434 <LL_C1_IPCC_IsActiveFlag_CHx>
 80117dc:	4603      	mov	r3, r0
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d007      	beq.n	80117f2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80117e2:	4a0a      	ldr	r2, [pc, #40]	; (801180c <HW_IPCC_MM_SendFreeBuf+0x40>)
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80117e8:	2108      	movs	r1, #8
 80117ea:	4807      	ldr	r0, [pc, #28]	; (8011808 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80117ec:	f7ff fdbd 	bl	801136a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80117f0:	e006      	b.n	8011800 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80117f6:	2108      	movs	r1, #8
 80117f8:	4803      	ldr	r0, [pc, #12]	; (8011808 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80117fa:	f7ff fe0c 	bl	8011416 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80117fe:	bf00      	nop
}
 8011800:	3708      	adds	r7, #8
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}
 8011806:	bf00      	nop
 8011808:	58000c00 	.word	0x58000c00
 801180c:	20006c24 	.word	0x20006c24

08011810 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8011810:	b580      	push	{r7, lr}
 8011812:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011814:	2108      	movs	r1, #8
 8011816:	4806      	ldr	r0, [pc, #24]	; (8011830 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8011818:	f7ff fdba 	bl	8011390 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 801181c:	4b05      	ldr	r3, [pc, #20]	; (8011834 <HW_IPCC_MM_FreeBufHandler+0x24>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011822:	2108      	movs	r1, #8
 8011824:	4802      	ldr	r0, [pc, #8]	; (8011830 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8011826:	f7ff fdf6 	bl	8011416 <LL_C1_IPCC_SetFlag_CHx>

  return;
 801182a:	bf00      	nop
}
 801182c:	bd80      	pop	{r7, pc}
 801182e:	bf00      	nop
 8011830:	58000c00 	.word	0x58000c00
 8011834:	20006c24 	.word	0x20006c24

08011838 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8011838:	b580      	push	{r7, lr}
 801183a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 801183c:	2108      	movs	r1, #8
 801183e:	4802      	ldr	r0, [pc, #8]	; (8011848 <HW_IPCC_TRACES_Init+0x10>)
 8011840:	f7ff fdb8 	bl	80113b4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011844:	bf00      	nop
}
 8011846:	bd80      	pop	{r7, pc}
 8011848:	58000c00 	.word	0x58000c00

0801184c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 801184c:	b580      	push	{r7, lr}
 801184e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8011850:	f7f8 fb7a 	bl	8009f48 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8011854:	2108      	movs	r1, #8
 8011856:	4802      	ldr	r0, [pc, #8]	; (8011860 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8011858:	f7ff fdcf 	bl	80113fa <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801185c:	bf00      	nop
}
 801185e:	bd80      	pop	{r7, pc}
 8011860:	58000c00 	.word	0x58000c00

08011864 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8011864:	b480      	push	{r7}
 8011866:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8011868:	4b05      	ldr	r3, [pc, #20]	; (8011880 <UTIL_LPM_Init+0x1c>)
 801186a:	2200      	movs	r2, #0
 801186c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801186e:	4b05      	ldr	r3, [pc, #20]	; (8011884 <UTIL_LPM_Init+0x20>)
 8011870:	2200      	movs	r2, #0
 8011872:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8011874:	bf00      	nop
 8011876:	46bd      	mov	sp, r7
 8011878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187c:	4770      	bx	lr
 801187e:	bf00      	nop
 8011880:	20006c28 	.word	0x20006c28
 8011884:	20006c2c 	.word	0x20006c2c

08011888 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8011888:	b480      	push	{r7}
 801188a:	b087      	sub	sp, #28
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
 8011890:	460b      	mov	r3, r1
 8011892:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011894:	f3ef 8310 	mrs	r3, PRIMASK
 8011898:	613b      	str	r3, [r7, #16]
  return(result);
 801189a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801189c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801189e:	b672      	cpsid	i
  
  switch(state)
 80118a0:	78fb      	ldrb	r3, [r7, #3]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d009      	beq.n	80118ba <UTIL_LPM_SetOffMode+0x32>
 80118a6:	2b01      	cmp	r3, #1
 80118a8:	d000      	beq.n	80118ac <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 80118aa:	e00e      	b.n	80118ca <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 80118ac:	4b0c      	ldr	r3, [pc, #48]	; (80118e0 <UTIL_LPM_SetOffMode+0x58>)
 80118ae:	681a      	ldr	r2, [r3, #0]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	4313      	orrs	r3, r2
 80118b4:	4a0a      	ldr	r2, [pc, #40]	; (80118e0 <UTIL_LPM_SetOffMode+0x58>)
 80118b6:	6013      	str	r3, [r2, #0]
      break;
 80118b8:	e007      	b.n	80118ca <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	43da      	mvns	r2, r3
 80118be:	4b08      	ldr	r3, [pc, #32]	; (80118e0 <UTIL_LPM_SetOffMode+0x58>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	4013      	ands	r3, r2
 80118c4:	4a06      	ldr	r2, [pc, #24]	; (80118e0 <UTIL_LPM_SetOffMode+0x58>)
 80118c6:	6013      	str	r3, [r2, #0]
      break;
 80118c8:	bf00      	nop
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80118d4:	bf00      	nop
 80118d6:	371c      	adds	r7, #28
 80118d8:	46bd      	mov	sp, r7
 80118da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118de:	4770      	bx	lr
 80118e0:	20006c2c 	.word	0x20006c2c

080118e4 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b08c      	sub	sp, #48	; 0x30
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80118ec:	4b65      	ldr	r3, [pc, #404]	; (8011a84 <UTIL_SEQ_Run+0x1a0>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80118f2:	4b64      	ldr	r3, [pc, #400]	; (8011a84 <UTIL_SEQ_Run+0x1a0>)
 80118f4:	681a      	ldr	r2, [r3, #0]
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	4013      	ands	r3, r2
 80118fa:	4a62      	ldr	r2, [pc, #392]	; (8011a84 <UTIL_SEQ_Run+0x1a0>)
 80118fc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80118fe:	e081      	b.n	8011a04 <UTIL_SEQ_Run+0x120>
  {
    counter = 0U;
 8011900:	2300      	movs	r3, #0
 8011902:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8011904:	e002      	b.n	801190c <UTIL_SEQ_Run+0x28>
    {
      counter++;
 8011906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011908:	3301      	adds	r3, #1
 801190a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801190c:	4a5e      	ldr	r2, [pc, #376]	; (8011a88 <UTIL_SEQ_Run+0x1a4>)
 801190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011910:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011914:	4b5d      	ldr	r3, [pc, #372]	; (8011a8c <UTIL_SEQ_Run+0x1a8>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	401a      	ands	r2, r3
 801191a:	4b5a      	ldr	r3, [pc, #360]	; (8011a84 <UTIL_SEQ_Run+0x1a0>)
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	4013      	ands	r3, r2
 8011920:	2b00      	cmp	r3, #0
 8011922:	d0f0      	beq.n	8011906 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8011924:	4a58      	ldr	r2, [pc, #352]	; (8011a88 <UTIL_SEQ_Run+0x1a4>)
 8011926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011928:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801192c:	4b57      	ldr	r3, [pc, #348]	; (8011a8c <UTIL_SEQ_Run+0x1a8>)
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	401a      	ands	r2, r3
 8011932:	4b54      	ldr	r3, [pc, #336]	; (8011a84 <UTIL_SEQ_Run+0x1a0>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	4013      	ands	r3, r2
 8011938:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801193a:	4a53      	ldr	r2, [pc, #332]	; (8011a88 <UTIL_SEQ_Run+0x1a4>)
 801193c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801193e:	00db      	lsls	r3, r3, #3
 8011940:	4413      	add	r3, r2
 8011942:	685a      	ldr	r2, [r3, #4]
 8011944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011946:	4013      	ands	r3, r2
 8011948:	2b00      	cmp	r3, #0
 801194a:	d106      	bne.n	801195a <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801194c:	4a4e      	ldr	r2, [pc, #312]	; (8011a88 <UTIL_SEQ_Run+0x1a4>)
 801194e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011950:	00db      	lsls	r3, r3, #3
 8011952:	4413      	add	r3, r2
 8011954:	f04f 32ff 	mov.w	r2, #4294967295
 8011958:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801195a:	4a4b      	ldr	r2, [pc, #300]	; (8011a88 <UTIL_SEQ_Run+0x1a4>)
 801195c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801195e:	00db      	lsls	r3, r3, #3
 8011960:	4413      	add	r3, r2
 8011962:	685a      	ldr	r2, [r3, #4]
 8011964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011966:	4013      	ands	r3, r2
 8011968:	4618      	mov	r0, r3
 801196a:	f000 f8b1 	bl	8011ad0 <SEQ_BitPosition>
 801196e:	4603      	mov	r3, r0
 8011970:	461a      	mov	r2, r3
 8011972:	4b47      	ldr	r3, [pc, #284]	; (8011a90 <UTIL_SEQ_Run+0x1ac>)
 8011974:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8011976:	4a44      	ldr	r2, [pc, #272]	; (8011a88 <UTIL_SEQ_Run+0x1a4>)
 8011978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801197a:	00db      	lsls	r3, r3, #3
 801197c:	4413      	add	r3, r2
 801197e:	685a      	ldr	r2, [r3, #4]
 8011980:	4b43      	ldr	r3, [pc, #268]	; (8011a90 <UTIL_SEQ_Run+0x1ac>)
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	2101      	movs	r1, #1
 8011986:	fa01 f303 	lsl.w	r3, r1, r3
 801198a:	43db      	mvns	r3, r3
 801198c:	401a      	ands	r2, r3
 801198e:	493e      	ldr	r1, [pc, #248]	; (8011a88 <UTIL_SEQ_Run+0x1a4>)
 8011990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011992:	00db      	lsls	r3, r3, #3
 8011994:	440b      	add	r3, r1
 8011996:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011998:	f3ef 8310 	mrs	r3, PRIMASK
 801199c:	61bb      	str	r3, [r7, #24]
  return(result);
 801199e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80119a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80119a2:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80119a4:	4b3a      	ldr	r3, [pc, #232]	; (8011a90 <UTIL_SEQ_Run+0x1ac>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	2201      	movs	r2, #1
 80119aa:	fa02 f303 	lsl.w	r3, r2, r3
 80119ae:	43da      	mvns	r2, r3
 80119b0:	4b38      	ldr	r3, [pc, #224]	; (8011a94 <UTIL_SEQ_Run+0x1b0>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	4013      	ands	r3, r2
 80119b6:	4a37      	ldr	r2, [pc, #220]	; (8011a94 <UTIL_SEQ_Run+0x1b0>)
 80119b8:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80119ba:	2302      	movs	r3, #2
 80119bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119be:	e013      	b.n	80119e8 <UTIL_SEQ_Run+0x104>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80119c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119c2:	3b01      	subs	r3, #1
 80119c4:	4a30      	ldr	r2, [pc, #192]	; (8011a88 <UTIL_SEQ_Run+0x1a4>)
 80119c6:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80119ca:	4b31      	ldr	r3, [pc, #196]	; (8011a90 <UTIL_SEQ_Run+0x1ac>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	2201      	movs	r2, #1
 80119d0:	fa02 f303 	lsl.w	r3, r2, r3
 80119d4:	43da      	mvns	r2, r3
 80119d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d8:	3b01      	subs	r3, #1
 80119da:	400a      	ands	r2, r1
 80119dc:	492a      	ldr	r1, [pc, #168]	; (8011a88 <UTIL_SEQ_Run+0x1a4>)
 80119de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80119e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e4:	3b01      	subs	r3, #1
 80119e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d1e8      	bne.n	80119c0 <UTIL_SEQ_Run+0xdc>
 80119ee:	6a3b      	ldr	r3, [r7, #32]
 80119f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80119f2:	697b      	ldr	r3, [r7, #20]
 80119f4:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80119f8:	4b25      	ldr	r3, [pc, #148]	; (8011a90 <UTIL_SEQ_Run+0x1ac>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	4a26      	ldr	r2, [pc, #152]	; (8011a98 <UTIL_SEQ_Run+0x1b4>)
 80119fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a02:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8011a04:	4b23      	ldr	r3, [pc, #140]	; (8011a94 <UTIL_SEQ_Run+0x1b0>)
 8011a06:	681a      	ldr	r2, [r3, #0]
 8011a08:	4b20      	ldr	r3, [pc, #128]	; (8011a8c <UTIL_SEQ_Run+0x1a8>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	401a      	ands	r2, r3
 8011a0e:	4b1d      	ldr	r3, [pc, #116]	; (8011a84 <UTIL_SEQ_Run+0x1a0>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	4013      	ands	r3, r2
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d007      	beq.n	8011a28 <UTIL_SEQ_Run+0x144>
 8011a18:	4b20      	ldr	r3, [pc, #128]	; (8011a9c <UTIL_SEQ_Run+0x1b8>)
 8011a1a:	681a      	ldr	r2, [r3, #0]
 8011a1c:	4b20      	ldr	r3, [pc, #128]	; (8011aa0 <UTIL_SEQ_Run+0x1bc>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	4013      	ands	r3, r2
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	f43f af6c 	beq.w	8011900 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8011a28:	4b19      	ldr	r3, [pc, #100]	; (8011a90 <UTIL_SEQ_Run+0x1ac>)
 8011a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8011a2e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8011a30:	f000 f83f 	bl	8011ab2 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a34:	f3ef 8310 	mrs	r3, PRIMASK
 8011a38:	613b      	str	r3, [r7, #16]
  return(result);
 8011a3a:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8011a3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8011a3e:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8011a40:	4b14      	ldr	r3, [pc, #80]	; (8011a94 <UTIL_SEQ_Run+0x1b0>)
 8011a42:	681a      	ldr	r2, [r3, #0]
 8011a44:	4b11      	ldr	r3, [pc, #68]	; (8011a8c <UTIL_SEQ_Run+0x1a8>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	401a      	ands	r2, r3
 8011a4a:	4b0e      	ldr	r3, [pc, #56]	; (8011a84 <UTIL_SEQ_Run+0x1a0>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	4013      	ands	r3, r2
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d108      	bne.n	8011a66 <UTIL_SEQ_Run+0x182>
 8011a54:	4b11      	ldr	r3, [pc, #68]	; (8011a9c <UTIL_SEQ_Run+0x1b8>)
 8011a56:	681a      	ldr	r2, [r3, #0]
 8011a58:	4b11      	ldr	r3, [pc, #68]	; (8011aa0 <UTIL_SEQ_Run+0x1bc>)
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	4013      	ands	r3, r2
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d101      	bne.n	8011a66 <UTIL_SEQ_Run+0x182>
  {
	UTIL_SEQ_Idle( );
 8011a62:	f000 f81f 	bl	8011aa4 <UTIL_SEQ_Idle>
 8011a66:	69fb      	ldr	r3, [r7, #28]
 8011a68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 8011a70:	f000 f826 	bl	8011ac0 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8011a74:	4a03      	ldr	r2, [pc, #12]	; (8011a84 <UTIL_SEQ_Run+0x1a0>)
 8011a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a78:	6013      	str	r3, [r2, #0]

  return;
 8011a7a:	bf00      	nop
}
 8011a7c:	3730      	adds	r7, #48	; 0x30
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}
 8011a82:	bf00      	nop
 8011a84:	2000002c 	.word	0x2000002c
 8011a88:	20006cc0 	.word	0x20006cc0
 8011a8c:	20000028 	.word	0x20000028
 8011a90:	20006c3c 	.word	0x20006c3c
 8011a94:	20006c30 	.word	0x20006c30
 8011a98:	20006c40 	.word	0x20006c40
 8011a9c:	20006c34 	.word	0x20006c34
 8011aa0:	20006c38 	.word	0x20006c38

08011aa4 <UTIL_SEQ_Idle>:
  UTIL_SEQ_Run(~TaskId_bm);
  return;
}

__WEAK void UTIL_SEQ_Idle( void )
{
 8011aa4:	b480      	push	{r7}
 8011aa6:	af00      	add	r7, sp, #0
  return;
 8011aa8:	bf00      	nop
}
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab0:	4770      	bx	lr

08011ab2 <UTIL_SEQ_PreIdle>:

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8011ab2:	b480      	push	{r7}
 8011ab4:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8011ab6:	bf00      	nop
}
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abe:	4770      	bx	lr

08011ac0 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8011ac4:	bf00      	nop
}
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011acc:	4770      	bx	lr
	...

08011ad0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8011ad0:	b480      	push	{r7}
 8011ad2:	b085      	sub	sp, #20
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8011ad8:	2300      	movs	r3, #0
 8011ada:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	0c1b      	lsrs	r3, r3, #16
 8011ae0:	041b      	lsls	r3, r3, #16
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d104      	bne.n	8011af0 <SEQ_BitPosition+0x20>
 8011ae6:	2310      	movs	r3, #16
 8011ae8:	73fb      	strb	r3, [r7, #15]
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	041b      	lsls	r3, r3, #16
 8011aee:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d105      	bne.n	8011b06 <SEQ_BitPosition+0x36>
 8011afa:	7bfb      	ldrb	r3, [r7, #15]
 8011afc:	3308      	adds	r3, #8
 8011afe:	73fb      	strb	r3, [r7, #15]
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	021b      	lsls	r3, r3, #8
 8011b04:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d105      	bne.n	8011b1c <SEQ_BitPosition+0x4c>
 8011b10:	7bfb      	ldrb	r3, [r7, #15]
 8011b12:	3304      	adds	r3, #4
 8011b14:	73fb      	strb	r3, [r7, #15]
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	011b      	lsls	r3, r3, #4
 8011b1a:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	0f1b      	lsrs	r3, r3, #28
 8011b20:	4a07      	ldr	r2, [pc, #28]	; (8011b40 <SEQ_BitPosition+0x70>)
 8011b22:	5cd2      	ldrb	r2, [r2, r3]
 8011b24:	7bfb      	ldrb	r3, [r7, #15]
 8011b26:	4413      	add	r3, r2
 8011b28:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8011b2a:	7bfb      	ldrb	r3, [r7, #15]
 8011b2c:	f1c3 031f 	rsb	r3, r3, #31
 8011b30:	b2db      	uxtb	r3, r3
}
 8011b32:	4618      	mov	r0, r3
 8011b34:	3714      	adds	r7, #20
 8011b36:	46bd      	mov	sp, r7
 8011b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3c:	4770      	bx	lr
 8011b3e:	bf00      	nop
 8011b40:	08014220 	.word	0x08014220

08011b44 <__errno>:
 8011b44:	4b01      	ldr	r3, [pc, #4]	; (8011b4c <__errno+0x8>)
 8011b46:	6818      	ldr	r0, [r3, #0]
 8011b48:	4770      	bx	lr
 8011b4a:	bf00      	nop
 8011b4c:	20000030 	.word	0x20000030

08011b50 <__libc_init_array>:
 8011b50:	b570      	push	{r4, r5, r6, lr}
 8011b52:	4e0d      	ldr	r6, [pc, #52]	; (8011b88 <__libc_init_array+0x38>)
 8011b54:	4c0d      	ldr	r4, [pc, #52]	; (8011b8c <__libc_init_array+0x3c>)
 8011b56:	1ba4      	subs	r4, r4, r6
 8011b58:	10a4      	asrs	r4, r4, #2
 8011b5a:	2500      	movs	r5, #0
 8011b5c:	42a5      	cmp	r5, r4
 8011b5e:	d109      	bne.n	8011b74 <__libc_init_array+0x24>
 8011b60:	4e0b      	ldr	r6, [pc, #44]	; (8011b90 <__libc_init_array+0x40>)
 8011b62:	4c0c      	ldr	r4, [pc, #48]	; (8011b94 <__libc_init_array+0x44>)
 8011b64:	f001 f97c 	bl	8012e60 <_init>
 8011b68:	1ba4      	subs	r4, r4, r6
 8011b6a:	10a4      	asrs	r4, r4, #2
 8011b6c:	2500      	movs	r5, #0
 8011b6e:	42a5      	cmp	r5, r4
 8011b70:	d105      	bne.n	8011b7e <__libc_init_array+0x2e>
 8011b72:	bd70      	pop	{r4, r5, r6, pc}
 8011b74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011b78:	4798      	blx	r3
 8011b7a:	3501      	adds	r5, #1
 8011b7c:	e7ee      	b.n	8011b5c <__libc_init_array+0xc>
 8011b7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011b82:	4798      	blx	r3
 8011b84:	3501      	adds	r5, #1
 8011b86:	e7f2      	b.n	8011b6e <__libc_init_array+0x1e>
 8011b88:	080142d0 	.word	0x080142d0
 8011b8c:	080142d0 	.word	0x080142d0
 8011b90:	080142d0 	.word	0x080142d0
 8011b94:	080142d4 	.word	0x080142d4

08011b98 <memcpy>:
 8011b98:	b510      	push	{r4, lr}
 8011b9a:	1e43      	subs	r3, r0, #1
 8011b9c:	440a      	add	r2, r1
 8011b9e:	4291      	cmp	r1, r2
 8011ba0:	d100      	bne.n	8011ba4 <memcpy+0xc>
 8011ba2:	bd10      	pop	{r4, pc}
 8011ba4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011bac:	e7f7      	b.n	8011b9e <memcpy+0x6>

08011bae <memset>:
 8011bae:	4402      	add	r2, r0
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	4293      	cmp	r3, r2
 8011bb4:	d100      	bne.n	8011bb8 <memset+0xa>
 8011bb6:	4770      	bx	lr
 8011bb8:	f803 1b01 	strb.w	r1, [r3], #1
 8011bbc:	e7f9      	b.n	8011bb2 <memset+0x4>
	...

08011bc0 <iprintf>:
 8011bc0:	b40f      	push	{r0, r1, r2, r3}
 8011bc2:	4b0a      	ldr	r3, [pc, #40]	; (8011bec <iprintf+0x2c>)
 8011bc4:	b513      	push	{r0, r1, r4, lr}
 8011bc6:	681c      	ldr	r4, [r3, #0]
 8011bc8:	b124      	cbz	r4, 8011bd4 <iprintf+0x14>
 8011bca:	69a3      	ldr	r3, [r4, #24]
 8011bcc:	b913      	cbnz	r3, 8011bd4 <iprintf+0x14>
 8011bce:	4620      	mov	r0, r4
 8011bd0:	f000 fa90 	bl	80120f4 <__sinit>
 8011bd4:	ab05      	add	r3, sp, #20
 8011bd6:	9a04      	ldr	r2, [sp, #16]
 8011bd8:	68a1      	ldr	r1, [r4, #8]
 8011bda:	9301      	str	r3, [sp, #4]
 8011bdc:	4620      	mov	r0, r4
 8011bde:	f000 fd9b 	bl	8012718 <_vfiprintf_r>
 8011be2:	b002      	add	sp, #8
 8011be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011be8:	b004      	add	sp, #16
 8011bea:	4770      	bx	lr
 8011bec:	20000030 	.word	0x20000030

08011bf0 <_puts_r>:
 8011bf0:	b570      	push	{r4, r5, r6, lr}
 8011bf2:	460e      	mov	r6, r1
 8011bf4:	4605      	mov	r5, r0
 8011bf6:	b118      	cbz	r0, 8011c00 <_puts_r+0x10>
 8011bf8:	6983      	ldr	r3, [r0, #24]
 8011bfa:	b90b      	cbnz	r3, 8011c00 <_puts_r+0x10>
 8011bfc:	f000 fa7a 	bl	80120f4 <__sinit>
 8011c00:	69ab      	ldr	r3, [r5, #24]
 8011c02:	68ac      	ldr	r4, [r5, #8]
 8011c04:	b913      	cbnz	r3, 8011c0c <_puts_r+0x1c>
 8011c06:	4628      	mov	r0, r5
 8011c08:	f000 fa74 	bl	80120f4 <__sinit>
 8011c0c:	4b23      	ldr	r3, [pc, #140]	; (8011c9c <_puts_r+0xac>)
 8011c0e:	429c      	cmp	r4, r3
 8011c10:	d117      	bne.n	8011c42 <_puts_r+0x52>
 8011c12:	686c      	ldr	r4, [r5, #4]
 8011c14:	89a3      	ldrh	r3, [r4, #12]
 8011c16:	071b      	lsls	r3, r3, #28
 8011c18:	d51d      	bpl.n	8011c56 <_puts_r+0x66>
 8011c1a:	6923      	ldr	r3, [r4, #16]
 8011c1c:	b1db      	cbz	r3, 8011c56 <_puts_r+0x66>
 8011c1e:	3e01      	subs	r6, #1
 8011c20:	68a3      	ldr	r3, [r4, #8]
 8011c22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011c26:	3b01      	subs	r3, #1
 8011c28:	60a3      	str	r3, [r4, #8]
 8011c2a:	b9e9      	cbnz	r1, 8011c68 <_puts_r+0x78>
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	da2e      	bge.n	8011c8e <_puts_r+0x9e>
 8011c30:	4622      	mov	r2, r4
 8011c32:	210a      	movs	r1, #10
 8011c34:	4628      	mov	r0, r5
 8011c36:	f000 f8ad 	bl	8011d94 <__swbuf_r>
 8011c3a:	3001      	adds	r0, #1
 8011c3c:	d011      	beq.n	8011c62 <_puts_r+0x72>
 8011c3e:	200a      	movs	r0, #10
 8011c40:	e011      	b.n	8011c66 <_puts_r+0x76>
 8011c42:	4b17      	ldr	r3, [pc, #92]	; (8011ca0 <_puts_r+0xb0>)
 8011c44:	429c      	cmp	r4, r3
 8011c46:	d101      	bne.n	8011c4c <_puts_r+0x5c>
 8011c48:	68ac      	ldr	r4, [r5, #8]
 8011c4a:	e7e3      	b.n	8011c14 <_puts_r+0x24>
 8011c4c:	4b15      	ldr	r3, [pc, #84]	; (8011ca4 <_puts_r+0xb4>)
 8011c4e:	429c      	cmp	r4, r3
 8011c50:	bf08      	it	eq
 8011c52:	68ec      	ldreq	r4, [r5, #12]
 8011c54:	e7de      	b.n	8011c14 <_puts_r+0x24>
 8011c56:	4621      	mov	r1, r4
 8011c58:	4628      	mov	r0, r5
 8011c5a:	f000 f8ed 	bl	8011e38 <__swsetup_r>
 8011c5e:	2800      	cmp	r0, #0
 8011c60:	d0dd      	beq.n	8011c1e <_puts_r+0x2e>
 8011c62:	f04f 30ff 	mov.w	r0, #4294967295
 8011c66:	bd70      	pop	{r4, r5, r6, pc}
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	da04      	bge.n	8011c76 <_puts_r+0x86>
 8011c6c:	69a2      	ldr	r2, [r4, #24]
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	dc06      	bgt.n	8011c80 <_puts_r+0x90>
 8011c72:	290a      	cmp	r1, #10
 8011c74:	d004      	beq.n	8011c80 <_puts_r+0x90>
 8011c76:	6823      	ldr	r3, [r4, #0]
 8011c78:	1c5a      	adds	r2, r3, #1
 8011c7a:	6022      	str	r2, [r4, #0]
 8011c7c:	7019      	strb	r1, [r3, #0]
 8011c7e:	e7cf      	b.n	8011c20 <_puts_r+0x30>
 8011c80:	4622      	mov	r2, r4
 8011c82:	4628      	mov	r0, r5
 8011c84:	f000 f886 	bl	8011d94 <__swbuf_r>
 8011c88:	3001      	adds	r0, #1
 8011c8a:	d1c9      	bne.n	8011c20 <_puts_r+0x30>
 8011c8c:	e7e9      	b.n	8011c62 <_puts_r+0x72>
 8011c8e:	6823      	ldr	r3, [r4, #0]
 8011c90:	200a      	movs	r0, #10
 8011c92:	1c5a      	adds	r2, r3, #1
 8011c94:	6022      	str	r2, [r4, #0]
 8011c96:	7018      	strb	r0, [r3, #0]
 8011c98:	e7e5      	b.n	8011c66 <_puts_r+0x76>
 8011c9a:	bf00      	nop
 8011c9c:	08014254 	.word	0x08014254
 8011ca0:	08014274 	.word	0x08014274
 8011ca4:	08014234 	.word	0x08014234

08011ca8 <puts>:
 8011ca8:	4b02      	ldr	r3, [pc, #8]	; (8011cb4 <puts+0xc>)
 8011caa:	4601      	mov	r1, r0
 8011cac:	6818      	ldr	r0, [r3, #0]
 8011cae:	f7ff bf9f 	b.w	8011bf0 <_puts_r>
 8011cb2:	bf00      	nop
 8011cb4:	20000030 	.word	0x20000030

08011cb8 <sniprintf>:
 8011cb8:	b40c      	push	{r2, r3}
 8011cba:	b530      	push	{r4, r5, lr}
 8011cbc:	4b17      	ldr	r3, [pc, #92]	; (8011d1c <sniprintf+0x64>)
 8011cbe:	1e0c      	subs	r4, r1, #0
 8011cc0:	b09d      	sub	sp, #116	; 0x74
 8011cc2:	681d      	ldr	r5, [r3, #0]
 8011cc4:	da08      	bge.n	8011cd8 <sniprintf+0x20>
 8011cc6:	238b      	movs	r3, #139	; 0x8b
 8011cc8:	602b      	str	r3, [r5, #0]
 8011cca:	f04f 30ff 	mov.w	r0, #4294967295
 8011cce:	b01d      	add	sp, #116	; 0x74
 8011cd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011cd4:	b002      	add	sp, #8
 8011cd6:	4770      	bx	lr
 8011cd8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011cdc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011ce0:	bf14      	ite	ne
 8011ce2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011ce6:	4623      	moveq	r3, r4
 8011ce8:	9304      	str	r3, [sp, #16]
 8011cea:	9307      	str	r3, [sp, #28]
 8011cec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011cf0:	9002      	str	r0, [sp, #8]
 8011cf2:	9006      	str	r0, [sp, #24]
 8011cf4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011cf8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011cfa:	ab21      	add	r3, sp, #132	; 0x84
 8011cfc:	a902      	add	r1, sp, #8
 8011cfe:	4628      	mov	r0, r5
 8011d00:	9301      	str	r3, [sp, #4]
 8011d02:	f000 fbe7 	bl	80124d4 <_svfiprintf_r>
 8011d06:	1c43      	adds	r3, r0, #1
 8011d08:	bfbc      	itt	lt
 8011d0a:	238b      	movlt	r3, #139	; 0x8b
 8011d0c:	602b      	strlt	r3, [r5, #0]
 8011d0e:	2c00      	cmp	r4, #0
 8011d10:	d0dd      	beq.n	8011cce <sniprintf+0x16>
 8011d12:	9b02      	ldr	r3, [sp, #8]
 8011d14:	2200      	movs	r2, #0
 8011d16:	701a      	strb	r2, [r3, #0]
 8011d18:	e7d9      	b.n	8011cce <sniprintf+0x16>
 8011d1a:	bf00      	nop
 8011d1c:	20000030 	.word	0x20000030

08011d20 <_vsniprintf_r>:
 8011d20:	b530      	push	{r4, r5, lr}
 8011d22:	1e14      	subs	r4, r2, #0
 8011d24:	4605      	mov	r5, r0
 8011d26:	b09b      	sub	sp, #108	; 0x6c
 8011d28:	4618      	mov	r0, r3
 8011d2a:	da05      	bge.n	8011d38 <_vsniprintf_r+0x18>
 8011d2c:	238b      	movs	r3, #139	; 0x8b
 8011d2e:	602b      	str	r3, [r5, #0]
 8011d30:	f04f 30ff 	mov.w	r0, #4294967295
 8011d34:	b01b      	add	sp, #108	; 0x6c
 8011d36:	bd30      	pop	{r4, r5, pc}
 8011d38:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011d3c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011d40:	bf14      	ite	ne
 8011d42:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011d46:	4623      	moveq	r3, r4
 8011d48:	9302      	str	r3, [sp, #8]
 8011d4a:	9305      	str	r3, [sp, #20]
 8011d4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011d50:	9100      	str	r1, [sp, #0]
 8011d52:	9104      	str	r1, [sp, #16]
 8011d54:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011d58:	4602      	mov	r2, r0
 8011d5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011d5c:	4669      	mov	r1, sp
 8011d5e:	4628      	mov	r0, r5
 8011d60:	f000 fbb8 	bl	80124d4 <_svfiprintf_r>
 8011d64:	1c43      	adds	r3, r0, #1
 8011d66:	bfbc      	itt	lt
 8011d68:	238b      	movlt	r3, #139	; 0x8b
 8011d6a:	602b      	strlt	r3, [r5, #0]
 8011d6c:	2c00      	cmp	r4, #0
 8011d6e:	d0e1      	beq.n	8011d34 <_vsniprintf_r+0x14>
 8011d70:	9b00      	ldr	r3, [sp, #0]
 8011d72:	2200      	movs	r2, #0
 8011d74:	701a      	strb	r2, [r3, #0]
 8011d76:	e7dd      	b.n	8011d34 <_vsniprintf_r+0x14>

08011d78 <vsniprintf>:
 8011d78:	b507      	push	{r0, r1, r2, lr}
 8011d7a:	9300      	str	r3, [sp, #0]
 8011d7c:	4613      	mov	r3, r2
 8011d7e:	460a      	mov	r2, r1
 8011d80:	4601      	mov	r1, r0
 8011d82:	4803      	ldr	r0, [pc, #12]	; (8011d90 <vsniprintf+0x18>)
 8011d84:	6800      	ldr	r0, [r0, #0]
 8011d86:	f7ff ffcb 	bl	8011d20 <_vsniprintf_r>
 8011d8a:	b003      	add	sp, #12
 8011d8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d90:	20000030 	.word	0x20000030

08011d94 <__swbuf_r>:
 8011d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d96:	460e      	mov	r6, r1
 8011d98:	4614      	mov	r4, r2
 8011d9a:	4605      	mov	r5, r0
 8011d9c:	b118      	cbz	r0, 8011da6 <__swbuf_r+0x12>
 8011d9e:	6983      	ldr	r3, [r0, #24]
 8011da0:	b90b      	cbnz	r3, 8011da6 <__swbuf_r+0x12>
 8011da2:	f000 f9a7 	bl	80120f4 <__sinit>
 8011da6:	4b21      	ldr	r3, [pc, #132]	; (8011e2c <__swbuf_r+0x98>)
 8011da8:	429c      	cmp	r4, r3
 8011daa:	d12a      	bne.n	8011e02 <__swbuf_r+0x6e>
 8011dac:	686c      	ldr	r4, [r5, #4]
 8011dae:	69a3      	ldr	r3, [r4, #24]
 8011db0:	60a3      	str	r3, [r4, #8]
 8011db2:	89a3      	ldrh	r3, [r4, #12]
 8011db4:	071a      	lsls	r2, r3, #28
 8011db6:	d52e      	bpl.n	8011e16 <__swbuf_r+0x82>
 8011db8:	6923      	ldr	r3, [r4, #16]
 8011dba:	b363      	cbz	r3, 8011e16 <__swbuf_r+0x82>
 8011dbc:	6923      	ldr	r3, [r4, #16]
 8011dbe:	6820      	ldr	r0, [r4, #0]
 8011dc0:	1ac0      	subs	r0, r0, r3
 8011dc2:	6963      	ldr	r3, [r4, #20]
 8011dc4:	b2f6      	uxtb	r6, r6
 8011dc6:	4283      	cmp	r3, r0
 8011dc8:	4637      	mov	r7, r6
 8011dca:	dc04      	bgt.n	8011dd6 <__swbuf_r+0x42>
 8011dcc:	4621      	mov	r1, r4
 8011dce:	4628      	mov	r0, r5
 8011dd0:	f000 f926 	bl	8012020 <_fflush_r>
 8011dd4:	bb28      	cbnz	r0, 8011e22 <__swbuf_r+0x8e>
 8011dd6:	68a3      	ldr	r3, [r4, #8]
 8011dd8:	3b01      	subs	r3, #1
 8011dda:	60a3      	str	r3, [r4, #8]
 8011ddc:	6823      	ldr	r3, [r4, #0]
 8011dde:	1c5a      	adds	r2, r3, #1
 8011de0:	6022      	str	r2, [r4, #0]
 8011de2:	701e      	strb	r6, [r3, #0]
 8011de4:	6963      	ldr	r3, [r4, #20]
 8011de6:	3001      	adds	r0, #1
 8011de8:	4283      	cmp	r3, r0
 8011dea:	d004      	beq.n	8011df6 <__swbuf_r+0x62>
 8011dec:	89a3      	ldrh	r3, [r4, #12]
 8011dee:	07db      	lsls	r3, r3, #31
 8011df0:	d519      	bpl.n	8011e26 <__swbuf_r+0x92>
 8011df2:	2e0a      	cmp	r6, #10
 8011df4:	d117      	bne.n	8011e26 <__swbuf_r+0x92>
 8011df6:	4621      	mov	r1, r4
 8011df8:	4628      	mov	r0, r5
 8011dfa:	f000 f911 	bl	8012020 <_fflush_r>
 8011dfe:	b190      	cbz	r0, 8011e26 <__swbuf_r+0x92>
 8011e00:	e00f      	b.n	8011e22 <__swbuf_r+0x8e>
 8011e02:	4b0b      	ldr	r3, [pc, #44]	; (8011e30 <__swbuf_r+0x9c>)
 8011e04:	429c      	cmp	r4, r3
 8011e06:	d101      	bne.n	8011e0c <__swbuf_r+0x78>
 8011e08:	68ac      	ldr	r4, [r5, #8]
 8011e0a:	e7d0      	b.n	8011dae <__swbuf_r+0x1a>
 8011e0c:	4b09      	ldr	r3, [pc, #36]	; (8011e34 <__swbuf_r+0xa0>)
 8011e0e:	429c      	cmp	r4, r3
 8011e10:	bf08      	it	eq
 8011e12:	68ec      	ldreq	r4, [r5, #12]
 8011e14:	e7cb      	b.n	8011dae <__swbuf_r+0x1a>
 8011e16:	4621      	mov	r1, r4
 8011e18:	4628      	mov	r0, r5
 8011e1a:	f000 f80d 	bl	8011e38 <__swsetup_r>
 8011e1e:	2800      	cmp	r0, #0
 8011e20:	d0cc      	beq.n	8011dbc <__swbuf_r+0x28>
 8011e22:	f04f 37ff 	mov.w	r7, #4294967295
 8011e26:	4638      	mov	r0, r7
 8011e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e2a:	bf00      	nop
 8011e2c:	08014254 	.word	0x08014254
 8011e30:	08014274 	.word	0x08014274
 8011e34:	08014234 	.word	0x08014234

08011e38 <__swsetup_r>:
 8011e38:	4b32      	ldr	r3, [pc, #200]	; (8011f04 <__swsetup_r+0xcc>)
 8011e3a:	b570      	push	{r4, r5, r6, lr}
 8011e3c:	681d      	ldr	r5, [r3, #0]
 8011e3e:	4606      	mov	r6, r0
 8011e40:	460c      	mov	r4, r1
 8011e42:	b125      	cbz	r5, 8011e4e <__swsetup_r+0x16>
 8011e44:	69ab      	ldr	r3, [r5, #24]
 8011e46:	b913      	cbnz	r3, 8011e4e <__swsetup_r+0x16>
 8011e48:	4628      	mov	r0, r5
 8011e4a:	f000 f953 	bl	80120f4 <__sinit>
 8011e4e:	4b2e      	ldr	r3, [pc, #184]	; (8011f08 <__swsetup_r+0xd0>)
 8011e50:	429c      	cmp	r4, r3
 8011e52:	d10f      	bne.n	8011e74 <__swsetup_r+0x3c>
 8011e54:	686c      	ldr	r4, [r5, #4]
 8011e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e5a:	b29a      	uxth	r2, r3
 8011e5c:	0715      	lsls	r5, r2, #28
 8011e5e:	d42c      	bmi.n	8011eba <__swsetup_r+0x82>
 8011e60:	06d0      	lsls	r0, r2, #27
 8011e62:	d411      	bmi.n	8011e88 <__swsetup_r+0x50>
 8011e64:	2209      	movs	r2, #9
 8011e66:	6032      	str	r2, [r6, #0]
 8011e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e6c:	81a3      	strh	r3, [r4, #12]
 8011e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8011e72:	e03e      	b.n	8011ef2 <__swsetup_r+0xba>
 8011e74:	4b25      	ldr	r3, [pc, #148]	; (8011f0c <__swsetup_r+0xd4>)
 8011e76:	429c      	cmp	r4, r3
 8011e78:	d101      	bne.n	8011e7e <__swsetup_r+0x46>
 8011e7a:	68ac      	ldr	r4, [r5, #8]
 8011e7c:	e7eb      	b.n	8011e56 <__swsetup_r+0x1e>
 8011e7e:	4b24      	ldr	r3, [pc, #144]	; (8011f10 <__swsetup_r+0xd8>)
 8011e80:	429c      	cmp	r4, r3
 8011e82:	bf08      	it	eq
 8011e84:	68ec      	ldreq	r4, [r5, #12]
 8011e86:	e7e6      	b.n	8011e56 <__swsetup_r+0x1e>
 8011e88:	0751      	lsls	r1, r2, #29
 8011e8a:	d512      	bpl.n	8011eb2 <__swsetup_r+0x7a>
 8011e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e8e:	b141      	cbz	r1, 8011ea2 <__swsetup_r+0x6a>
 8011e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e94:	4299      	cmp	r1, r3
 8011e96:	d002      	beq.n	8011e9e <__swsetup_r+0x66>
 8011e98:	4630      	mov	r0, r6
 8011e9a:	f000 fa19 	bl	80122d0 <_free_r>
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	6363      	str	r3, [r4, #52]	; 0x34
 8011ea2:	89a3      	ldrh	r3, [r4, #12]
 8011ea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011ea8:	81a3      	strh	r3, [r4, #12]
 8011eaa:	2300      	movs	r3, #0
 8011eac:	6063      	str	r3, [r4, #4]
 8011eae:	6923      	ldr	r3, [r4, #16]
 8011eb0:	6023      	str	r3, [r4, #0]
 8011eb2:	89a3      	ldrh	r3, [r4, #12]
 8011eb4:	f043 0308 	orr.w	r3, r3, #8
 8011eb8:	81a3      	strh	r3, [r4, #12]
 8011eba:	6923      	ldr	r3, [r4, #16]
 8011ebc:	b94b      	cbnz	r3, 8011ed2 <__swsetup_r+0x9a>
 8011ebe:	89a3      	ldrh	r3, [r4, #12]
 8011ec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ec8:	d003      	beq.n	8011ed2 <__swsetup_r+0x9a>
 8011eca:	4621      	mov	r1, r4
 8011ecc:	4630      	mov	r0, r6
 8011ece:	f000 f9bf 	bl	8012250 <__smakebuf_r>
 8011ed2:	89a2      	ldrh	r2, [r4, #12]
 8011ed4:	f012 0301 	ands.w	r3, r2, #1
 8011ed8:	d00c      	beq.n	8011ef4 <__swsetup_r+0xbc>
 8011eda:	2300      	movs	r3, #0
 8011edc:	60a3      	str	r3, [r4, #8]
 8011ede:	6963      	ldr	r3, [r4, #20]
 8011ee0:	425b      	negs	r3, r3
 8011ee2:	61a3      	str	r3, [r4, #24]
 8011ee4:	6923      	ldr	r3, [r4, #16]
 8011ee6:	b953      	cbnz	r3, 8011efe <__swsetup_r+0xc6>
 8011ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011eec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011ef0:	d1ba      	bne.n	8011e68 <__swsetup_r+0x30>
 8011ef2:	bd70      	pop	{r4, r5, r6, pc}
 8011ef4:	0792      	lsls	r2, r2, #30
 8011ef6:	bf58      	it	pl
 8011ef8:	6963      	ldrpl	r3, [r4, #20]
 8011efa:	60a3      	str	r3, [r4, #8]
 8011efc:	e7f2      	b.n	8011ee4 <__swsetup_r+0xac>
 8011efe:	2000      	movs	r0, #0
 8011f00:	e7f7      	b.n	8011ef2 <__swsetup_r+0xba>
 8011f02:	bf00      	nop
 8011f04:	20000030 	.word	0x20000030
 8011f08:	08014254 	.word	0x08014254
 8011f0c:	08014274 	.word	0x08014274
 8011f10:	08014234 	.word	0x08014234

08011f14 <__sflush_r>:
 8011f14:	898a      	ldrh	r2, [r1, #12]
 8011f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f1a:	4605      	mov	r5, r0
 8011f1c:	0710      	lsls	r0, r2, #28
 8011f1e:	460c      	mov	r4, r1
 8011f20:	d458      	bmi.n	8011fd4 <__sflush_r+0xc0>
 8011f22:	684b      	ldr	r3, [r1, #4]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	dc05      	bgt.n	8011f34 <__sflush_r+0x20>
 8011f28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	dc02      	bgt.n	8011f34 <__sflush_r+0x20>
 8011f2e:	2000      	movs	r0, #0
 8011f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011f36:	2e00      	cmp	r6, #0
 8011f38:	d0f9      	beq.n	8011f2e <__sflush_r+0x1a>
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011f40:	682f      	ldr	r7, [r5, #0]
 8011f42:	6a21      	ldr	r1, [r4, #32]
 8011f44:	602b      	str	r3, [r5, #0]
 8011f46:	d032      	beq.n	8011fae <__sflush_r+0x9a>
 8011f48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011f4a:	89a3      	ldrh	r3, [r4, #12]
 8011f4c:	075a      	lsls	r2, r3, #29
 8011f4e:	d505      	bpl.n	8011f5c <__sflush_r+0x48>
 8011f50:	6863      	ldr	r3, [r4, #4]
 8011f52:	1ac0      	subs	r0, r0, r3
 8011f54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011f56:	b10b      	cbz	r3, 8011f5c <__sflush_r+0x48>
 8011f58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011f5a:	1ac0      	subs	r0, r0, r3
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	4602      	mov	r2, r0
 8011f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011f62:	6a21      	ldr	r1, [r4, #32]
 8011f64:	4628      	mov	r0, r5
 8011f66:	47b0      	blx	r6
 8011f68:	1c43      	adds	r3, r0, #1
 8011f6a:	89a3      	ldrh	r3, [r4, #12]
 8011f6c:	d106      	bne.n	8011f7c <__sflush_r+0x68>
 8011f6e:	6829      	ldr	r1, [r5, #0]
 8011f70:	291d      	cmp	r1, #29
 8011f72:	d848      	bhi.n	8012006 <__sflush_r+0xf2>
 8011f74:	4a29      	ldr	r2, [pc, #164]	; (801201c <__sflush_r+0x108>)
 8011f76:	40ca      	lsrs	r2, r1
 8011f78:	07d6      	lsls	r6, r2, #31
 8011f7a:	d544      	bpl.n	8012006 <__sflush_r+0xf2>
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	6062      	str	r2, [r4, #4]
 8011f80:	04d9      	lsls	r1, r3, #19
 8011f82:	6922      	ldr	r2, [r4, #16]
 8011f84:	6022      	str	r2, [r4, #0]
 8011f86:	d504      	bpl.n	8011f92 <__sflush_r+0x7e>
 8011f88:	1c42      	adds	r2, r0, #1
 8011f8a:	d101      	bne.n	8011f90 <__sflush_r+0x7c>
 8011f8c:	682b      	ldr	r3, [r5, #0]
 8011f8e:	b903      	cbnz	r3, 8011f92 <__sflush_r+0x7e>
 8011f90:	6560      	str	r0, [r4, #84]	; 0x54
 8011f92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f94:	602f      	str	r7, [r5, #0]
 8011f96:	2900      	cmp	r1, #0
 8011f98:	d0c9      	beq.n	8011f2e <__sflush_r+0x1a>
 8011f9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f9e:	4299      	cmp	r1, r3
 8011fa0:	d002      	beq.n	8011fa8 <__sflush_r+0x94>
 8011fa2:	4628      	mov	r0, r5
 8011fa4:	f000 f994 	bl	80122d0 <_free_r>
 8011fa8:	2000      	movs	r0, #0
 8011faa:	6360      	str	r0, [r4, #52]	; 0x34
 8011fac:	e7c0      	b.n	8011f30 <__sflush_r+0x1c>
 8011fae:	2301      	movs	r3, #1
 8011fb0:	4628      	mov	r0, r5
 8011fb2:	47b0      	blx	r6
 8011fb4:	1c41      	adds	r1, r0, #1
 8011fb6:	d1c8      	bne.n	8011f4a <__sflush_r+0x36>
 8011fb8:	682b      	ldr	r3, [r5, #0]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d0c5      	beq.n	8011f4a <__sflush_r+0x36>
 8011fbe:	2b1d      	cmp	r3, #29
 8011fc0:	d001      	beq.n	8011fc6 <__sflush_r+0xb2>
 8011fc2:	2b16      	cmp	r3, #22
 8011fc4:	d101      	bne.n	8011fca <__sflush_r+0xb6>
 8011fc6:	602f      	str	r7, [r5, #0]
 8011fc8:	e7b1      	b.n	8011f2e <__sflush_r+0x1a>
 8011fca:	89a3      	ldrh	r3, [r4, #12]
 8011fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fd0:	81a3      	strh	r3, [r4, #12]
 8011fd2:	e7ad      	b.n	8011f30 <__sflush_r+0x1c>
 8011fd4:	690f      	ldr	r7, [r1, #16]
 8011fd6:	2f00      	cmp	r7, #0
 8011fd8:	d0a9      	beq.n	8011f2e <__sflush_r+0x1a>
 8011fda:	0793      	lsls	r3, r2, #30
 8011fdc:	680e      	ldr	r6, [r1, #0]
 8011fde:	bf08      	it	eq
 8011fe0:	694b      	ldreq	r3, [r1, #20]
 8011fe2:	600f      	str	r7, [r1, #0]
 8011fe4:	bf18      	it	ne
 8011fe6:	2300      	movne	r3, #0
 8011fe8:	eba6 0807 	sub.w	r8, r6, r7
 8011fec:	608b      	str	r3, [r1, #8]
 8011fee:	f1b8 0f00 	cmp.w	r8, #0
 8011ff2:	dd9c      	ble.n	8011f2e <__sflush_r+0x1a>
 8011ff4:	4643      	mov	r3, r8
 8011ff6:	463a      	mov	r2, r7
 8011ff8:	6a21      	ldr	r1, [r4, #32]
 8011ffa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011ffc:	4628      	mov	r0, r5
 8011ffe:	47b0      	blx	r6
 8012000:	2800      	cmp	r0, #0
 8012002:	dc06      	bgt.n	8012012 <__sflush_r+0xfe>
 8012004:	89a3      	ldrh	r3, [r4, #12]
 8012006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801200a:	81a3      	strh	r3, [r4, #12]
 801200c:	f04f 30ff 	mov.w	r0, #4294967295
 8012010:	e78e      	b.n	8011f30 <__sflush_r+0x1c>
 8012012:	4407      	add	r7, r0
 8012014:	eba8 0800 	sub.w	r8, r8, r0
 8012018:	e7e9      	b.n	8011fee <__sflush_r+0xda>
 801201a:	bf00      	nop
 801201c:	20400001 	.word	0x20400001

08012020 <_fflush_r>:
 8012020:	b538      	push	{r3, r4, r5, lr}
 8012022:	690b      	ldr	r3, [r1, #16]
 8012024:	4605      	mov	r5, r0
 8012026:	460c      	mov	r4, r1
 8012028:	b1db      	cbz	r3, 8012062 <_fflush_r+0x42>
 801202a:	b118      	cbz	r0, 8012034 <_fflush_r+0x14>
 801202c:	6983      	ldr	r3, [r0, #24]
 801202e:	b90b      	cbnz	r3, 8012034 <_fflush_r+0x14>
 8012030:	f000 f860 	bl	80120f4 <__sinit>
 8012034:	4b0c      	ldr	r3, [pc, #48]	; (8012068 <_fflush_r+0x48>)
 8012036:	429c      	cmp	r4, r3
 8012038:	d109      	bne.n	801204e <_fflush_r+0x2e>
 801203a:	686c      	ldr	r4, [r5, #4]
 801203c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012040:	b17b      	cbz	r3, 8012062 <_fflush_r+0x42>
 8012042:	4621      	mov	r1, r4
 8012044:	4628      	mov	r0, r5
 8012046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801204a:	f7ff bf63 	b.w	8011f14 <__sflush_r>
 801204e:	4b07      	ldr	r3, [pc, #28]	; (801206c <_fflush_r+0x4c>)
 8012050:	429c      	cmp	r4, r3
 8012052:	d101      	bne.n	8012058 <_fflush_r+0x38>
 8012054:	68ac      	ldr	r4, [r5, #8]
 8012056:	e7f1      	b.n	801203c <_fflush_r+0x1c>
 8012058:	4b05      	ldr	r3, [pc, #20]	; (8012070 <_fflush_r+0x50>)
 801205a:	429c      	cmp	r4, r3
 801205c:	bf08      	it	eq
 801205e:	68ec      	ldreq	r4, [r5, #12]
 8012060:	e7ec      	b.n	801203c <_fflush_r+0x1c>
 8012062:	2000      	movs	r0, #0
 8012064:	bd38      	pop	{r3, r4, r5, pc}
 8012066:	bf00      	nop
 8012068:	08014254 	.word	0x08014254
 801206c:	08014274 	.word	0x08014274
 8012070:	08014234 	.word	0x08014234

08012074 <std>:
 8012074:	2300      	movs	r3, #0
 8012076:	b510      	push	{r4, lr}
 8012078:	4604      	mov	r4, r0
 801207a:	e9c0 3300 	strd	r3, r3, [r0]
 801207e:	6083      	str	r3, [r0, #8]
 8012080:	8181      	strh	r1, [r0, #12]
 8012082:	6643      	str	r3, [r0, #100]	; 0x64
 8012084:	81c2      	strh	r2, [r0, #14]
 8012086:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801208a:	6183      	str	r3, [r0, #24]
 801208c:	4619      	mov	r1, r3
 801208e:	2208      	movs	r2, #8
 8012090:	305c      	adds	r0, #92	; 0x5c
 8012092:	f7ff fd8c 	bl	8011bae <memset>
 8012096:	4b05      	ldr	r3, [pc, #20]	; (80120ac <std+0x38>)
 8012098:	6263      	str	r3, [r4, #36]	; 0x24
 801209a:	4b05      	ldr	r3, [pc, #20]	; (80120b0 <std+0x3c>)
 801209c:	62a3      	str	r3, [r4, #40]	; 0x28
 801209e:	4b05      	ldr	r3, [pc, #20]	; (80120b4 <std+0x40>)
 80120a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80120a2:	4b05      	ldr	r3, [pc, #20]	; (80120b8 <std+0x44>)
 80120a4:	6224      	str	r4, [r4, #32]
 80120a6:	6323      	str	r3, [r4, #48]	; 0x30
 80120a8:	bd10      	pop	{r4, pc}
 80120aa:	bf00      	nop
 80120ac:	08012c75 	.word	0x08012c75
 80120b0:	08012c97 	.word	0x08012c97
 80120b4:	08012ccf 	.word	0x08012ccf
 80120b8:	08012cf3 	.word	0x08012cf3

080120bc <_cleanup_r>:
 80120bc:	4901      	ldr	r1, [pc, #4]	; (80120c4 <_cleanup_r+0x8>)
 80120be:	f000 b885 	b.w	80121cc <_fwalk_reent>
 80120c2:	bf00      	nop
 80120c4:	08012021 	.word	0x08012021

080120c8 <__sfmoreglue>:
 80120c8:	b570      	push	{r4, r5, r6, lr}
 80120ca:	1e4a      	subs	r2, r1, #1
 80120cc:	2568      	movs	r5, #104	; 0x68
 80120ce:	4355      	muls	r5, r2
 80120d0:	460e      	mov	r6, r1
 80120d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80120d6:	f000 f949 	bl	801236c <_malloc_r>
 80120da:	4604      	mov	r4, r0
 80120dc:	b140      	cbz	r0, 80120f0 <__sfmoreglue+0x28>
 80120de:	2100      	movs	r1, #0
 80120e0:	e9c0 1600 	strd	r1, r6, [r0]
 80120e4:	300c      	adds	r0, #12
 80120e6:	60a0      	str	r0, [r4, #8]
 80120e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80120ec:	f7ff fd5f 	bl	8011bae <memset>
 80120f0:	4620      	mov	r0, r4
 80120f2:	bd70      	pop	{r4, r5, r6, pc}

080120f4 <__sinit>:
 80120f4:	6983      	ldr	r3, [r0, #24]
 80120f6:	b510      	push	{r4, lr}
 80120f8:	4604      	mov	r4, r0
 80120fa:	bb33      	cbnz	r3, 801214a <__sinit+0x56>
 80120fc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012100:	6503      	str	r3, [r0, #80]	; 0x50
 8012102:	4b12      	ldr	r3, [pc, #72]	; (801214c <__sinit+0x58>)
 8012104:	4a12      	ldr	r2, [pc, #72]	; (8012150 <__sinit+0x5c>)
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	6282      	str	r2, [r0, #40]	; 0x28
 801210a:	4298      	cmp	r0, r3
 801210c:	bf04      	itt	eq
 801210e:	2301      	moveq	r3, #1
 8012110:	6183      	streq	r3, [r0, #24]
 8012112:	f000 f81f 	bl	8012154 <__sfp>
 8012116:	6060      	str	r0, [r4, #4]
 8012118:	4620      	mov	r0, r4
 801211a:	f000 f81b 	bl	8012154 <__sfp>
 801211e:	60a0      	str	r0, [r4, #8]
 8012120:	4620      	mov	r0, r4
 8012122:	f000 f817 	bl	8012154 <__sfp>
 8012126:	2200      	movs	r2, #0
 8012128:	60e0      	str	r0, [r4, #12]
 801212a:	2104      	movs	r1, #4
 801212c:	6860      	ldr	r0, [r4, #4]
 801212e:	f7ff ffa1 	bl	8012074 <std>
 8012132:	2201      	movs	r2, #1
 8012134:	2109      	movs	r1, #9
 8012136:	68a0      	ldr	r0, [r4, #8]
 8012138:	f7ff ff9c 	bl	8012074 <std>
 801213c:	2202      	movs	r2, #2
 801213e:	2112      	movs	r1, #18
 8012140:	68e0      	ldr	r0, [r4, #12]
 8012142:	f7ff ff97 	bl	8012074 <std>
 8012146:	2301      	movs	r3, #1
 8012148:	61a3      	str	r3, [r4, #24]
 801214a:	bd10      	pop	{r4, pc}
 801214c:	08014230 	.word	0x08014230
 8012150:	080120bd 	.word	0x080120bd

08012154 <__sfp>:
 8012154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012156:	4b1b      	ldr	r3, [pc, #108]	; (80121c4 <__sfp+0x70>)
 8012158:	681e      	ldr	r6, [r3, #0]
 801215a:	69b3      	ldr	r3, [r6, #24]
 801215c:	4607      	mov	r7, r0
 801215e:	b913      	cbnz	r3, 8012166 <__sfp+0x12>
 8012160:	4630      	mov	r0, r6
 8012162:	f7ff ffc7 	bl	80120f4 <__sinit>
 8012166:	3648      	adds	r6, #72	; 0x48
 8012168:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801216c:	3b01      	subs	r3, #1
 801216e:	d503      	bpl.n	8012178 <__sfp+0x24>
 8012170:	6833      	ldr	r3, [r6, #0]
 8012172:	b133      	cbz	r3, 8012182 <__sfp+0x2e>
 8012174:	6836      	ldr	r6, [r6, #0]
 8012176:	e7f7      	b.n	8012168 <__sfp+0x14>
 8012178:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801217c:	b16d      	cbz	r5, 801219a <__sfp+0x46>
 801217e:	3468      	adds	r4, #104	; 0x68
 8012180:	e7f4      	b.n	801216c <__sfp+0x18>
 8012182:	2104      	movs	r1, #4
 8012184:	4638      	mov	r0, r7
 8012186:	f7ff ff9f 	bl	80120c8 <__sfmoreglue>
 801218a:	6030      	str	r0, [r6, #0]
 801218c:	2800      	cmp	r0, #0
 801218e:	d1f1      	bne.n	8012174 <__sfp+0x20>
 8012190:	230c      	movs	r3, #12
 8012192:	603b      	str	r3, [r7, #0]
 8012194:	4604      	mov	r4, r0
 8012196:	4620      	mov	r0, r4
 8012198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801219a:	4b0b      	ldr	r3, [pc, #44]	; (80121c8 <__sfp+0x74>)
 801219c:	6665      	str	r5, [r4, #100]	; 0x64
 801219e:	e9c4 5500 	strd	r5, r5, [r4]
 80121a2:	60a5      	str	r5, [r4, #8]
 80121a4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80121a8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80121ac:	2208      	movs	r2, #8
 80121ae:	4629      	mov	r1, r5
 80121b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80121b4:	f7ff fcfb 	bl	8011bae <memset>
 80121b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80121bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80121c0:	e7e9      	b.n	8012196 <__sfp+0x42>
 80121c2:	bf00      	nop
 80121c4:	08014230 	.word	0x08014230
 80121c8:	ffff0001 	.word	0xffff0001

080121cc <_fwalk_reent>:
 80121cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121d0:	4680      	mov	r8, r0
 80121d2:	4689      	mov	r9, r1
 80121d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80121d8:	2600      	movs	r6, #0
 80121da:	b914      	cbnz	r4, 80121e2 <_fwalk_reent+0x16>
 80121dc:	4630      	mov	r0, r6
 80121de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121e2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80121e6:	3f01      	subs	r7, #1
 80121e8:	d501      	bpl.n	80121ee <_fwalk_reent+0x22>
 80121ea:	6824      	ldr	r4, [r4, #0]
 80121ec:	e7f5      	b.n	80121da <_fwalk_reent+0xe>
 80121ee:	89ab      	ldrh	r3, [r5, #12]
 80121f0:	2b01      	cmp	r3, #1
 80121f2:	d907      	bls.n	8012204 <_fwalk_reent+0x38>
 80121f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80121f8:	3301      	adds	r3, #1
 80121fa:	d003      	beq.n	8012204 <_fwalk_reent+0x38>
 80121fc:	4629      	mov	r1, r5
 80121fe:	4640      	mov	r0, r8
 8012200:	47c8      	blx	r9
 8012202:	4306      	orrs	r6, r0
 8012204:	3568      	adds	r5, #104	; 0x68
 8012206:	e7ee      	b.n	80121e6 <_fwalk_reent+0x1a>

08012208 <__swhatbuf_r>:
 8012208:	b570      	push	{r4, r5, r6, lr}
 801220a:	460e      	mov	r6, r1
 801220c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012210:	2900      	cmp	r1, #0
 8012212:	b096      	sub	sp, #88	; 0x58
 8012214:	4614      	mov	r4, r2
 8012216:	461d      	mov	r5, r3
 8012218:	da07      	bge.n	801222a <__swhatbuf_r+0x22>
 801221a:	2300      	movs	r3, #0
 801221c:	602b      	str	r3, [r5, #0]
 801221e:	89b3      	ldrh	r3, [r6, #12]
 8012220:	061a      	lsls	r2, r3, #24
 8012222:	d410      	bmi.n	8012246 <__swhatbuf_r+0x3e>
 8012224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012228:	e00e      	b.n	8012248 <__swhatbuf_r+0x40>
 801222a:	466a      	mov	r2, sp
 801222c:	f000 fd88 	bl	8012d40 <_fstat_r>
 8012230:	2800      	cmp	r0, #0
 8012232:	dbf2      	blt.n	801221a <__swhatbuf_r+0x12>
 8012234:	9a01      	ldr	r2, [sp, #4]
 8012236:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801223a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801223e:	425a      	negs	r2, r3
 8012240:	415a      	adcs	r2, r3
 8012242:	602a      	str	r2, [r5, #0]
 8012244:	e7ee      	b.n	8012224 <__swhatbuf_r+0x1c>
 8012246:	2340      	movs	r3, #64	; 0x40
 8012248:	2000      	movs	r0, #0
 801224a:	6023      	str	r3, [r4, #0]
 801224c:	b016      	add	sp, #88	; 0x58
 801224e:	bd70      	pop	{r4, r5, r6, pc}

08012250 <__smakebuf_r>:
 8012250:	898b      	ldrh	r3, [r1, #12]
 8012252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012254:	079d      	lsls	r5, r3, #30
 8012256:	4606      	mov	r6, r0
 8012258:	460c      	mov	r4, r1
 801225a:	d507      	bpl.n	801226c <__smakebuf_r+0x1c>
 801225c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012260:	6023      	str	r3, [r4, #0]
 8012262:	6123      	str	r3, [r4, #16]
 8012264:	2301      	movs	r3, #1
 8012266:	6163      	str	r3, [r4, #20]
 8012268:	b002      	add	sp, #8
 801226a:	bd70      	pop	{r4, r5, r6, pc}
 801226c:	ab01      	add	r3, sp, #4
 801226e:	466a      	mov	r2, sp
 8012270:	f7ff ffca 	bl	8012208 <__swhatbuf_r>
 8012274:	9900      	ldr	r1, [sp, #0]
 8012276:	4605      	mov	r5, r0
 8012278:	4630      	mov	r0, r6
 801227a:	f000 f877 	bl	801236c <_malloc_r>
 801227e:	b948      	cbnz	r0, 8012294 <__smakebuf_r+0x44>
 8012280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012284:	059a      	lsls	r2, r3, #22
 8012286:	d4ef      	bmi.n	8012268 <__smakebuf_r+0x18>
 8012288:	f023 0303 	bic.w	r3, r3, #3
 801228c:	f043 0302 	orr.w	r3, r3, #2
 8012290:	81a3      	strh	r3, [r4, #12]
 8012292:	e7e3      	b.n	801225c <__smakebuf_r+0xc>
 8012294:	4b0d      	ldr	r3, [pc, #52]	; (80122cc <__smakebuf_r+0x7c>)
 8012296:	62b3      	str	r3, [r6, #40]	; 0x28
 8012298:	89a3      	ldrh	r3, [r4, #12]
 801229a:	6020      	str	r0, [r4, #0]
 801229c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122a0:	81a3      	strh	r3, [r4, #12]
 80122a2:	9b00      	ldr	r3, [sp, #0]
 80122a4:	6163      	str	r3, [r4, #20]
 80122a6:	9b01      	ldr	r3, [sp, #4]
 80122a8:	6120      	str	r0, [r4, #16]
 80122aa:	b15b      	cbz	r3, 80122c4 <__smakebuf_r+0x74>
 80122ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122b0:	4630      	mov	r0, r6
 80122b2:	f000 fd57 	bl	8012d64 <_isatty_r>
 80122b6:	b128      	cbz	r0, 80122c4 <__smakebuf_r+0x74>
 80122b8:	89a3      	ldrh	r3, [r4, #12]
 80122ba:	f023 0303 	bic.w	r3, r3, #3
 80122be:	f043 0301 	orr.w	r3, r3, #1
 80122c2:	81a3      	strh	r3, [r4, #12]
 80122c4:	89a3      	ldrh	r3, [r4, #12]
 80122c6:	431d      	orrs	r5, r3
 80122c8:	81a5      	strh	r5, [r4, #12]
 80122ca:	e7cd      	b.n	8012268 <__smakebuf_r+0x18>
 80122cc:	080120bd 	.word	0x080120bd

080122d0 <_free_r>:
 80122d0:	b538      	push	{r3, r4, r5, lr}
 80122d2:	4605      	mov	r5, r0
 80122d4:	2900      	cmp	r1, #0
 80122d6:	d045      	beq.n	8012364 <_free_r+0x94>
 80122d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122dc:	1f0c      	subs	r4, r1, #4
 80122de:	2b00      	cmp	r3, #0
 80122e0:	bfb8      	it	lt
 80122e2:	18e4      	addlt	r4, r4, r3
 80122e4:	f000 fd79 	bl	8012dda <__malloc_lock>
 80122e8:	4a1f      	ldr	r2, [pc, #124]	; (8012368 <_free_r+0x98>)
 80122ea:	6813      	ldr	r3, [r2, #0]
 80122ec:	4610      	mov	r0, r2
 80122ee:	b933      	cbnz	r3, 80122fe <_free_r+0x2e>
 80122f0:	6063      	str	r3, [r4, #4]
 80122f2:	6014      	str	r4, [r2, #0]
 80122f4:	4628      	mov	r0, r5
 80122f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122fa:	f000 bd6f 	b.w	8012ddc <__malloc_unlock>
 80122fe:	42a3      	cmp	r3, r4
 8012300:	d90c      	bls.n	801231c <_free_r+0x4c>
 8012302:	6821      	ldr	r1, [r4, #0]
 8012304:	1862      	adds	r2, r4, r1
 8012306:	4293      	cmp	r3, r2
 8012308:	bf04      	itt	eq
 801230a:	681a      	ldreq	r2, [r3, #0]
 801230c:	685b      	ldreq	r3, [r3, #4]
 801230e:	6063      	str	r3, [r4, #4]
 8012310:	bf04      	itt	eq
 8012312:	1852      	addeq	r2, r2, r1
 8012314:	6022      	streq	r2, [r4, #0]
 8012316:	6004      	str	r4, [r0, #0]
 8012318:	e7ec      	b.n	80122f4 <_free_r+0x24>
 801231a:	4613      	mov	r3, r2
 801231c:	685a      	ldr	r2, [r3, #4]
 801231e:	b10a      	cbz	r2, 8012324 <_free_r+0x54>
 8012320:	42a2      	cmp	r2, r4
 8012322:	d9fa      	bls.n	801231a <_free_r+0x4a>
 8012324:	6819      	ldr	r1, [r3, #0]
 8012326:	1858      	adds	r0, r3, r1
 8012328:	42a0      	cmp	r0, r4
 801232a:	d10b      	bne.n	8012344 <_free_r+0x74>
 801232c:	6820      	ldr	r0, [r4, #0]
 801232e:	4401      	add	r1, r0
 8012330:	1858      	adds	r0, r3, r1
 8012332:	4282      	cmp	r2, r0
 8012334:	6019      	str	r1, [r3, #0]
 8012336:	d1dd      	bne.n	80122f4 <_free_r+0x24>
 8012338:	6810      	ldr	r0, [r2, #0]
 801233a:	6852      	ldr	r2, [r2, #4]
 801233c:	605a      	str	r2, [r3, #4]
 801233e:	4401      	add	r1, r0
 8012340:	6019      	str	r1, [r3, #0]
 8012342:	e7d7      	b.n	80122f4 <_free_r+0x24>
 8012344:	d902      	bls.n	801234c <_free_r+0x7c>
 8012346:	230c      	movs	r3, #12
 8012348:	602b      	str	r3, [r5, #0]
 801234a:	e7d3      	b.n	80122f4 <_free_r+0x24>
 801234c:	6820      	ldr	r0, [r4, #0]
 801234e:	1821      	adds	r1, r4, r0
 8012350:	428a      	cmp	r2, r1
 8012352:	bf04      	itt	eq
 8012354:	6811      	ldreq	r1, [r2, #0]
 8012356:	6852      	ldreq	r2, [r2, #4]
 8012358:	6062      	str	r2, [r4, #4]
 801235a:	bf04      	itt	eq
 801235c:	1809      	addeq	r1, r1, r0
 801235e:	6021      	streq	r1, [r4, #0]
 8012360:	605c      	str	r4, [r3, #4]
 8012362:	e7c7      	b.n	80122f4 <_free_r+0x24>
 8012364:	bd38      	pop	{r3, r4, r5, pc}
 8012366:	bf00      	nop
 8012368:	20006cd0 	.word	0x20006cd0

0801236c <_malloc_r>:
 801236c:	b570      	push	{r4, r5, r6, lr}
 801236e:	1ccd      	adds	r5, r1, #3
 8012370:	f025 0503 	bic.w	r5, r5, #3
 8012374:	3508      	adds	r5, #8
 8012376:	2d0c      	cmp	r5, #12
 8012378:	bf38      	it	cc
 801237a:	250c      	movcc	r5, #12
 801237c:	2d00      	cmp	r5, #0
 801237e:	4606      	mov	r6, r0
 8012380:	db01      	blt.n	8012386 <_malloc_r+0x1a>
 8012382:	42a9      	cmp	r1, r5
 8012384:	d903      	bls.n	801238e <_malloc_r+0x22>
 8012386:	230c      	movs	r3, #12
 8012388:	6033      	str	r3, [r6, #0]
 801238a:	2000      	movs	r0, #0
 801238c:	bd70      	pop	{r4, r5, r6, pc}
 801238e:	f000 fd24 	bl	8012dda <__malloc_lock>
 8012392:	4a21      	ldr	r2, [pc, #132]	; (8012418 <_malloc_r+0xac>)
 8012394:	6814      	ldr	r4, [r2, #0]
 8012396:	4621      	mov	r1, r4
 8012398:	b991      	cbnz	r1, 80123c0 <_malloc_r+0x54>
 801239a:	4c20      	ldr	r4, [pc, #128]	; (801241c <_malloc_r+0xb0>)
 801239c:	6823      	ldr	r3, [r4, #0]
 801239e:	b91b      	cbnz	r3, 80123a8 <_malloc_r+0x3c>
 80123a0:	4630      	mov	r0, r6
 80123a2:	f000 fc57 	bl	8012c54 <_sbrk_r>
 80123a6:	6020      	str	r0, [r4, #0]
 80123a8:	4629      	mov	r1, r5
 80123aa:	4630      	mov	r0, r6
 80123ac:	f000 fc52 	bl	8012c54 <_sbrk_r>
 80123b0:	1c43      	adds	r3, r0, #1
 80123b2:	d124      	bne.n	80123fe <_malloc_r+0x92>
 80123b4:	230c      	movs	r3, #12
 80123b6:	6033      	str	r3, [r6, #0]
 80123b8:	4630      	mov	r0, r6
 80123ba:	f000 fd0f 	bl	8012ddc <__malloc_unlock>
 80123be:	e7e4      	b.n	801238a <_malloc_r+0x1e>
 80123c0:	680b      	ldr	r3, [r1, #0]
 80123c2:	1b5b      	subs	r3, r3, r5
 80123c4:	d418      	bmi.n	80123f8 <_malloc_r+0x8c>
 80123c6:	2b0b      	cmp	r3, #11
 80123c8:	d90f      	bls.n	80123ea <_malloc_r+0x7e>
 80123ca:	600b      	str	r3, [r1, #0]
 80123cc:	50cd      	str	r5, [r1, r3]
 80123ce:	18cc      	adds	r4, r1, r3
 80123d0:	4630      	mov	r0, r6
 80123d2:	f000 fd03 	bl	8012ddc <__malloc_unlock>
 80123d6:	f104 000b 	add.w	r0, r4, #11
 80123da:	1d23      	adds	r3, r4, #4
 80123dc:	f020 0007 	bic.w	r0, r0, #7
 80123e0:	1ac3      	subs	r3, r0, r3
 80123e2:	d0d3      	beq.n	801238c <_malloc_r+0x20>
 80123e4:	425a      	negs	r2, r3
 80123e6:	50e2      	str	r2, [r4, r3]
 80123e8:	e7d0      	b.n	801238c <_malloc_r+0x20>
 80123ea:	428c      	cmp	r4, r1
 80123ec:	684b      	ldr	r3, [r1, #4]
 80123ee:	bf16      	itet	ne
 80123f0:	6063      	strne	r3, [r4, #4]
 80123f2:	6013      	streq	r3, [r2, #0]
 80123f4:	460c      	movne	r4, r1
 80123f6:	e7eb      	b.n	80123d0 <_malloc_r+0x64>
 80123f8:	460c      	mov	r4, r1
 80123fa:	6849      	ldr	r1, [r1, #4]
 80123fc:	e7cc      	b.n	8012398 <_malloc_r+0x2c>
 80123fe:	1cc4      	adds	r4, r0, #3
 8012400:	f024 0403 	bic.w	r4, r4, #3
 8012404:	42a0      	cmp	r0, r4
 8012406:	d005      	beq.n	8012414 <_malloc_r+0xa8>
 8012408:	1a21      	subs	r1, r4, r0
 801240a:	4630      	mov	r0, r6
 801240c:	f000 fc22 	bl	8012c54 <_sbrk_r>
 8012410:	3001      	adds	r0, #1
 8012412:	d0cf      	beq.n	80123b4 <_malloc_r+0x48>
 8012414:	6025      	str	r5, [r4, #0]
 8012416:	e7db      	b.n	80123d0 <_malloc_r+0x64>
 8012418:	20006cd0 	.word	0x20006cd0
 801241c:	20006cd4 	.word	0x20006cd4

08012420 <__ssputs_r>:
 8012420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012424:	688e      	ldr	r6, [r1, #8]
 8012426:	429e      	cmp	r6, r3
 8012428:	4682      	mov	sl, r0
 801242a:	460c      	mov	r4, r1
 801242c:	4690      	mov	r8, r2
 801242e:	4699      	mov	r9, r3
 8012430:	d837      	bhi.n	80124a2 <__ssputs_r+0x82>
 8012432:	898a      	ldrh	r2, [r1, #12]
 8012434:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012438:	d031      	beq.n	801249e <__ssputs_r+0x7e>
 801243a:	6825      	ldr	r5, [r4, #0]
 801243c:	6909      	ldr	r1, [r1, #16]
 801243e:	1a6f      	subs	r7, r5, r1
 8012440:	6965      	ldr	r5, [r4, #20]
 8012442:	2302      	movs	r3, #2
 8012444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012448:	fb95 f5f3 	sdiv	r5, r5, r3
 801244c:	f109 0301 	add.w	r3, r9, #1
 8012450:	443b      	add	r3, r7
 8012452:	429d      	cmp	r5, r3
 8012454:	bf38      	it	cc
 8012456:	461d      	movcc	r5, r3
 8012458:	0553      	lsls	r3, r2, #21
 801245a:	d530      	bpl.n	80124be <__ssputs_r+0x9e>
 801245c:	4629      	mov	r1, r5
 801245e:	f7ff ff85 	bl	801236c <_malloc_r>
 8012462:	4606      	mov	r6, r0
 8012464:	b950      	cbnz	r0, 801247c <__ssputs_r+0x5c>
 8012466:	230c      	movs	r3, #12
 8012468:	f8ca 3000 	str.w	r3, [sl]
 801246c:	89a3      	ldrh	r3, [r4, #12]
 801246e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012472:	81a3      	strh	r3, [r4, #12]
 8012474:	f04f 30ff 	mov.w	r0, #4294967295
 8012478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801247c:	463a      	mov	r2, r7
 801247e:	6921      	ldr	r1, [r4, #16]
 8012480:	f7ff fb8a 	bl	8011b98 <memcpy>
 8012484:	89a3      	ldrh	r3, [r4, #12]
 8012486:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801248a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801248e:	81a3      	strh	r3, [r4, #12]
 8012490:	6126      	str	r6, [r4, #16]
 8012492:	6165      	str	r5, [r4, #20]
 8012494:	443e      	add	r6, r7
 8012496:	1bed      	subs	r5, r5, r7
 8012498:	6026      	str	r6, [r4, #0]
 801249a:	60a5      	str	r5, [r4, #8]
 801249c:	464e      	mov	r6, r9
 801249e:	454e      	cmp	r6, r9
 80124a0:	d900      	bls.n	80124a4 <__ssputs_r+0x84>
 80124a2:	464e      	mov	r6, r9
 80124a4:	4632      	mov	r2, r6
 80124a6:	4641      	mov	r1, r8
 80124a8:	6820      	ldr	r0, [r4, #0]
 80124aa:	f000 fc7d 	bl	8012da8 <memmove>
 80124ae:	68a3      	ldr	r3, [r4, #8]
 80124b0:	1b9b      	subs	r3, r3, r6
 80124b2:	60a3      	str	r3, [r4, #8]
 80124b4:	6823      	ldr	r3, [r4, #0]
 80124b6:	441e      	add	r6, r3
 80124b8:	6026      	str	r6, [r4, #0]
 80124ba:	2000      	movs	r0, #0
 80124bc:	e7dc      	b.n	8012478 <__ssputs_r+0x58>
 80124be:	462a      	mov	r2, r5
 80124c0:	f000 fc8d 	bl	8012dde <_realloc_r>
 80124c4:	4606      	mov	r6, r0
 80124c6:	2800      	cmp	r0, #0
 80124c8:	d1e2      	bne.n	8012490 <__ssputs_r+0x70>
 80124ca:	6921      	ldr	r1, [r4, #16]
 80124cc:	4650      	mov	r0, sl
 80124ce:	f7ff feff 	bl	80122d0 <_free_r>
 80124d2:	e7c8      	b.n	8012466 <__ssputs_r+0x46>

080124d4 <_svfiprintf_r>:
 80124d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124d8:	461d      	mov	r5, r3
 80124da:	898b      	ldrh	r3, [r1, #12]
 80124dc:	061f      	lsls	r7, r3, #24
 80124de:	b09d      	sub	sp, #116	; 0x74
 80124e0:	4680      	mov	r8, r0
 80124e2:	460c      	mov	r4, r1
 80124e4:	4616      	mov	r6, r2
 80124e6:	d50f      	bpl.n	8012508 <_svfiprintf_r+0x34>
 80124e8:	690b      	ldr	r3, [r1, #16]
 80124ea:	b96b      	cbnz	r3, 8012508 <_svfiprintf_r+0x34>
 80124ec:	2140      	movs	r1, #64	; 0x40
 80124ee:	f7ff ff3d 	bl	801236c <_malloc_r>
 80124f2:	6020      	str	r0, [r4, #0]
 80124f4:	6120      	str	r0, [r4, #16]
 80124f6:	b928      	cbnz	r0, 8012504 <_svfiprintf_r+0x30>
 80124f8:	230c      	movs	r3, #12
 80124fa:	f8c8 3000 	str.w	r3, [r8]
 80124fe:	f04f 30ff 	mov.w	r0, #4294967295
 8012502:	e0c8      	b.n	8012696 <_svfiprintf_r+0x1c2>
 8012504:	2340      	movs	r3, #64	; 0x40
 8012506:	6163      	str	r3, [r4, #20]
 8012508:	2300      	movs	r3, #0
 801250a:	9309      	str	r3, [sp, #36]	; 0x24
 801250c:	2320      	movs	r3, #32
 801250e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012512:	2330      	movs	r3, #48	; 0x30
 8012514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012518:	9503      	str	r5, [sp, #12]
 801251a:	f04f 0b01 	mov.w	fp, #1
 801251e:	4637      	mov	r7, r6
 8012520:	463d      	mov	r5, r7
 8012522:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012526:	b10b      	cbz	r3, 801252c <_svfiprintf_r+0x58>
 8012528:	2b25      	cmp	r3, #37	; 0x25
 801252a:	d13e      	bne.n	80125aa <_svfiprintf_r+0xd6>
 801252c:	ebb7 0a06 	subs.w	sl, r7, r6
 8012530:	d00b      	beq.n	801254a <_svfiprintf_r+0x76>
 8012532:	4653      	mov	r3, sl
 8012534:	4632      	mov	r2, r6
 8012536:	4621      	mov	r1, r4
 8012538:	4640      	mov	r0, r8
 801253a:	f7ff ff71 	bl	8012420 <__ssputs_r>
 801253e:	3001      	adds	r0, #1
 8012540:	f000 80a4 	beq.w	801268c <_svfiprintf_r+0x1b8>
 8012544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012546:	4453      	add	r3, sl
 8012548:	9309      	str	r3, [sp, #36]	; 0x24
 801254a:	783b      	ldrb	r3, [r7, #0]
 801254c:	2b00      	cmp	r3, #0
 801254e:	f000 809d 	beq.w	801268c <_svfiprintf_r+0x1b8>
 8012552:	2300      	movs	r3, #0
 8012554:	f04f 32ff 	mov.w	r2, #4294967295
 8012558:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801255c:	9304      	str	r3, [sp, #16]
 801255e:	9307      	str	r3, [sp, #28]
 8012560:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012564:	931a      	str	r3, [sp, #104]	; 0x68
 8012566:	462f      	mov	r7, r5
 8012568:	2205      	movs	r2, #5
 801256a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801256e:	4850      	ldr	r0, [pc, #320]	; (80126b0 <_svfiprintf_r+0x1dc>)
 8012570:	f7ed fe1e 	bl	80001b0 <memchr>
 8012574:	9b04      	ldr	r3, [sp, #16]
 8012576:	b9d0      	cbnz	r0, 80125ae <_svfiprintf_r+0xda>
 8012578:	06d9      	lsls	r1, r3, #27
 801257a:	bf44      	itt	mi
 801257c:	2220      	movmi	r2, #32
 801257e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012582:	071a      	lsls	r2, r3, #28
 8012584:	bf44      	itt	mi
 8012586:	222b      	movmi	r2, #43	; 0x2b
 8012588:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801258c:	782a      	ldrb	r2, [r5, #0]
 801258e:	2a2a      	cmp	r2, #42	; 0x2a
 8012590:	d015      	beq.n	80125be <_svfiprintf_r+0xea>
 8012592:	9a07      	ldr	r2, [sp, #28]
 8012594:	462f      	mov	r7, r5
 8012596:	2000      	movs	r0, #0
 8012598:	250a      	movs	r5, #10
 801259a:	4639      	mov	r1, r7
 801259c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125a0:	3b30      	subs	r3, #48	; 0x30
 80125a2:	2b09      	cmp	r3, #9
 80125a4:	d94d      	bls.n	8012642 <_svfiprintf_r+0x16e>
 80125a6:	b1b8      	cbz	r0, 80125d8 <_svfiprintf_r+0x104>
 80125a8:	e00f      	b.n	80125ca <_svfiprintf_r+0xf6>
 80125aa:	462f      	mov	r7, r5
 80125ac:	e7b8      	b.n	8012520 <_svfiprintf_r+0x4c>
 80125ae:	4a40      	ldr	r2, [pc, #256]	; (80126b0 <_svfiprintf_r+0x1dc>)
 80125b0:	1a80      	subs	r0, r0, r2
 80125b2:	fa0b f000 	lsl.w	r0, fp, r0
 80125b6:	4318      	orrs	r0, r3
 80125b8:	9004      	str	r0, [sp, #16]
 80125ba:	463d      	mov	r5, r7
 80125bc:	e7d3      	b.n	8012566 <_svfiprintf_r+0x92>
 80125be:	9a03      	ldr	r2, [sp, #12]
 80125c0:	1d11      	adds	r1, r2, #4
 80125c2:	6812      	ldr	r2, [r2, #0]
 80125c4:	9103      	str	r1, [sp, #12]
 80125c6:	2a00      	cmp	r2, #0
 80125c8:	db01      	blt.n	80125ce <_svfiprintf_r+0xfa>
 80125ca:	9207      	str	r2, [sp, #28]
 80125cc:	e004      	b.n	80125d8 <_svfiprintf_r+0x104>
 80125ce:	4252      	negs	r2, r2
 80125d0:	f043 0302 	orr.w	r3, r3, #2
 80125d4:	9207      	str	r2, [sp, #28]
 80125d6:	9304      	str	r3, [sp, #16]
 80125d8:	783b      	ldrb	r3, [r7, #0]
 80125da:	2b2e      	cmp	r3, #46	; 0x2e
 80125dc:	d10c      	bne.n	80125f8 <_svfiprintf_r+0x124>
 80125de:	787b      	ldrb	r3, [r7, #1]
 80125e0:	2b2a      	cmp	r3, #42	; 0x2a
 80125e2:	d133      	bne.n	801264c <_svfiprintf_r+0x178>
 80125e4:	9b03      	ldr	r3, [sp, #12]
 80125e6:	1d1a      	adds	r2, r3, #4
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	9203      	str	r2, [sp, #12]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	bfb8      	it	lt
 80125f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80125f4:	3702      	adds	r7, #2
 80125f6:	9305      	str	r3, [sp, #20]
 80125f8:	4d2e      	ldr	r5, [pc, #184]	; (80126b4 <_svfiprintf_r+0x1e0>)
 80125fa:	7839      	ldrb	r1, [r7, #0]
 80125fc:	2203      	movs	r2, #3
 80125fe:	4628      	mov	r0, r5
 8012600:	f7ed fdd6 	bl	80001b0 <memchr>
 8012604:	b138      	cbz	r0, 8012616 <_svfiprintf_r+0x142>
 8012606:	2340      	movs	r3, #64	; 0x40
 8012608:	1b40      	subs	r0, r0, r5
 801260a:	fa03 f000 	lsl.w	r0, r3, r0
 801260e:	9b04      	ldr	r3, [sp, #16]
 8012610:	4303      	orrs	r3, r0
 8012612:	3701      	adds	r7, #1
 8012614:	9304      	str	r3, [sp, #16]
 8012616:	7839      	ldrb	r1, [r7, #0]
 8012618:	4827      	ldr	r0, [pc, #156]	; (80126b8 <_svfiprintf_r+0x1e4>)
 801261a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801261e:	2206      	movs	r2, #6
 8012620:	1c7e      	adds	r6, r7, #1
 8012622:	f7ed fdc5 	bl	80001b0 <memchr>
 8012626:	2800      	cmp	r0, #0
 8012628:	d038      	beq.n	801269c <_svfiprintf_r+0x1c8>
 801262a:	4b24      	ldr	r3, [pc, #144]	; (80126bc <_svfiprintf_r+0x1e8>)
 801262c:	bb13      	cbnz	r3, 8012674 <_svfiprintf_r+0x1a0>
 801262e:	9b03      	ldr	r3, [sp, #12]
 8012630:	3307      	adds	r3, #7
 8012632:	f023 0307 	bic.w	r3, r3, #7
 8012636:	3308      	adds	r3, #8
 8012638:	9303      	str	r3, [sp, #12]
 801263a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801263c:	444b      	add	r3, r9
 801263e:	9309      	str	r3, [sp, #36]	; 0x24
 8012640:	e76d      	b.n	801251e <_svfiprintf_r+0x4a>
 8012642:	fb05 3202 	mla	r2, r5, r2, r3
 8012646:	2001      	movs	r0, #1
 8012648:	460f      	mov	r7, r1
 801264a:	e7a6      	b.n	801259a <_svfiprintf_r+0xc6>
 801264c:	2300      	movs	r3, #0
 801264e:	3701      	adds	r7, #1
 8012650:	9305      	str	r3, [sp, #20]
 8012652:	4619      	mov	r1, r3
 8012654:	250a      	movs	r5, #10
 8012656:	4638      	mov	r0, r7
 8012658:	f810 2b01 	ldrb.w	r2, [r0], #1
 801265c:	3a30      	subs	r2, #48	; 0x30
 801265e:	2a09      	cmp	r2, #9
 8012660:	d903      	bls.n	801266a <_svfiprintf_r+0x196>
 8012662:	2b00      	cmp	r3, #0
 8012664:	d0c8      	beq.n	80125f8 <_svfiprintf_r+0x124>
 8012666:	9105      	str	r1, [sp, #20]
 8012668:	e7c6      	b.n	80125f8 <_svfiprintf_r+0x124>
 801266a:	fb05 2101 	mla	r1, r5, r1, r2
 801266e:	2301      	movs	r3, #1
 8012670:	4607      	mov	r7, r0
 8012672:	e7f0      	b.n	8012656 <_svfiprintf_r+0x182>
 8012674:	ab03      	add	r3, sp, #12
 8012676:	9300      	str	r3, [sp, #0]
 8012678:	4622      	mov	r2, r4
 801267a:	4b11      	ldr	r3, [pc, #68]	; (80126c0 <_svfiprintf_r+0x1ec>)
 801267c:	a904      	add	r1, sp, #16
 801267e:	4640      	mov	r0, r8
 8012680:	f3af 8000 	nop.w
 8012684:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012688:	4681      	mov	r9, r0
 801268a:	d1d6      	bne.n	801263a <_svfiprintf_r+0x166>
 801268c:	89a3      	ldrh	r3, [r4, #12]
 801268e:	065b      	lsls	r3, r3, #25
 8012690:	f53f af35 	bmi.w	80124fe <_svfiprintf_r+0x2a>
 8012694:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012696:	b01d      	add	sp, #116	; 0x74
 8012698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801269c:	ab03      	add	r3, sp, #12
 801269e:	9300      	str	r3, [sp, #0]
 80126a0:	4622      	mov	r2, r4
 80126a2:	4b07      	ldr	r3, [pc, #28]	; (80126c0 <_svfiprintf_r+0x1ec>)
 80126a4:	a904      	add	r1, sp, #16
 80126a6:	4640      	mov	r0, r8
 80126a8:	f000 f9c2 	bl	8012a30 <_printf_i>
 80126ac:	e7ea      	b.n	8012684 <_svfiprintf_r+0x1b0>
 80126ae:	bf00      	nop
 80126b0:	08014294 	.word	0x08014294
 80126b4:	0801429a 	.word	0x0801429a
 80126b8:	0801429e 	.word	0x0801429e
 80126bc:	00000000 	.word	0x00000000
 80126c0:	08012421 	.word	0x08012421

080126c4 <__sfputc_r>:
 80126c4:	6893      	ldr	r3, [r2, #8]
 80126c6:	3b01      	subs	r3, #1
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	b410      	push	{r4}
 80126cc:	6093      	str	r3, [r2, #8]
 80126ce:	da08      	bge.n	80126e2 <__sfputc_r+0x1e>
 80126d0:	6994      	ldr	r4, [r2, #24]
 80126d2:	42a3      	cmp	r3, r4
 80126d4:	db01      	blt.n	80126da <__sfputc_r+0x16>
 80126d6:	290a      	cmp	r1, #10
 80126d8:	d103      	bne.n	80126e2 <__sfputc_r+0x1e>
 80126da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126de:	f7ff bb59 	b.w	8011d94 <__swbuf_r>
 80126e2:	6813      	ldr	r3, [r2, #0]
 80126e4:	1c58      	adds	r0, r3, #1
 80126e6:	6010      	str	r0, [r2, #0]
 80126e8:	7019      	strb	r1, [r3, #0]
 80126ea:	4608      	mov	r0, r1
 80126ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126f0:	4770      	bx	lr

080126f2 <__sfputs_r>:
 80126f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126f4:	4606      	mov	r6, r0
 80126f6:	460f      	mov	r7, r1
 80126f8:	4614      	mov	r4, r2
 80126fa:	18d5      	adds	r5, r2, r3
 80126fc:	42ac      	cmp	r4, r5
 80126fe:	d101      	bne.n	8012704 <__sfputs_r+0x12>
 8012700:	2000      	movs	r0, #0
 8012702:	e007      	b.n	8012714 <__sfputs_r+0x22>
 8012704:	463a      	mov	r2, r7
 8012706:	f814 1b01 	ldrb.w	r1, [r4], #1
 801270a:	4630      	mov	r0, r6
 801270c:	f7ff ffda 	bl	80126c4 <__sfputc_r>
 8012710:	1c43      	adds	r3, r0, #1
 8012712:	d1f3      	bne.n	80126fc <__sfputs_r+0xa>
 8012714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012718 <_vfiprintf_r>:
 8012718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801271c:	460c      	mov	r4, r1
 801271e:	b09d      	sub	sp, #116	; 0x74
 8012720:	4617      	mov	r7, r2
 8012722:	461d      	mov	r5, r3
 8012724:	4606      	mov	r6, r0
 8012726:	b118      	cbz	r0, 8012730 <_vfiprintf_r+0x18>
 8012728:	6983      	ldr	r3, [r0, #24]
 801272a:	b90b      	cbnz	r3, 8012730 <_vfiprintf_r+0x18>
 801272c:	f7ff fce2 	bl	80120f4 <__sinit>
 8012730:	4b7c      	ldr	r3, [pc, #496]	; (8012924 <_vfiprintf_r+0x20c>)
 8012732:	429c      	cmp	r4, r3
 8012734:	d158      	bne.n	80127e8 <_vfiprintf_r+0xd0>
 8012736:	6874      	ldr	r4, [r6, #4]
 8012738:	89a3      	ldrh	r3, [r4, #12]
 801273a:	0718      	lsls	r0, r3, #28
 801273c:	d55e      	bpl.n	80127fc <_vfiprintf_r+0xe4>
 801273e:	6923      	ldr	r3, [r4, #16]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d05b      	beq.n	80127fc <_vfiprintf_r+0xe4>
 8012744:	2300      	movs	r3, #0
 8012746:	9309      	str	r3, [sp, #36]	; 0x24
 8012748:	2320      	movs	r3, #32
 801274a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801274e:	2330      	movs	r3, #48	; 0x30
 8012750:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012754:	9503      	str	r5, [sp, #12]
 8012756:	f04f 0b01 	mov.w	fp, #1
 801275a:	46b8      	mov	r8, r7
 801275c:	4645      	mov	r5, r8
 801275e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012762:	b10b      	cbz	r3, 8012768 <_vfiprintf_r+0x50>
 8012764:	2b25      	cmp	r3, #37	; 0x25
 8012766:	d154      	bne.n	8012812 <_vfiprintf_r+0xfa>
 8012768:	ebb8 0a07 	subs.w	sl, r8, r7
 801276c:	d00b      	beq.n	8012786 <_vfiprintf_r+0x6e>
 801276e:	4653      	mov	r3, sl
 8012770:	463a      	mov	r2, r7
 8012772:	4621      	mov	r1, r4
 8012774:	4630      	mov	r0, r6
 8012776:	f7ff ffbc 	bl	80126f2 <__sfputs_r>
 801277a:	3001      	adds	r0, #1
 801277c:	f000 80c2 	beq.w	8012904 <_vfiprintf_r+0x1ec>
 8012780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012782:	4453      	add	r3, sl
 8012784:	9309      	str	r3, [sp, #36]	; 0x24
 8012786:	f898 3000 	ldrb.w	r3, [r8]
 801278a:	2b00      	cmp	r3, #0
 801278c:	f000 80ba 	beq.w	8012904 <_vfiprintf_r+0x1ec>
 8012790:	2300      	movs	r3, #0
 8012792:	f04f 32ff 	mov.w	r2, #4294967295
 8012796:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801279a:	9304      	str	r3, [sp, #16]
 801279c:	9307      	str	r3, [sp, #28]
 801279e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80127a2:	931a      	str	r3, [sp, #104]	; 0x68
 80127a4:	46a8      	mov	r8, r5
 80127a6:	2205      	movs	r2, #5
 80127a8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80127ac:	485e      	ldr	r0, [pc, #376]	; (8012928 <_vfiprintf_r+0x210>)
 80127ae:	f7ed fcff 	bl	80001b0 <memchr>
 80127b2:	9b04      	ldr	r3, [sp, #16]
 80127b4:	bb78      	cbnz	r0, 8012816 <_vfiprintf_r+0xfe>
 80127b6:	06d9      	lsls	r1, r3, #27
 80127b8:	bf44      	itt	mi
 80127ba:	2220      	movmi	r2, #32
 80127bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80127c0:	071a      	lsls	r2, r3, #28
 80127c2:	bf44      	itt	mi
 80127c4:	222b      	movmi	r2, #43	; 0x2b
 80127c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80127ca:	782a      	ldrb	r2, [r5, #0]
 80127cc:	2a2a      	cmp	r2, #42	; 0x2a
 80127ce:	d02a      	beq.n	8012826 <_vfiprintf_r+0x10e>
 80127d0:	9a07      	ldr	r2, [sp, #28]
 80127d2:	46a8      	mov	r8, r5
 80127d4:	2000      	movs	r0, #0
 80127d6:	250a      	movs	r5, #10
 80127d8:	4641      	mov	r1, r8
 80127da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127de:	3b30      	subs	r3, #48	; 0x30
 80127e0:	2b09      	cmp	r3, #9
 80127e2:	d969      	bls.n	80128b8 <_vfiprintf_r+0x1a0>
 80127e4:	b360      	cbz	r0, 8012840 <_vfiprintf_r+0x128>
 80127e6:	e024      	b.n	8012832 <_vfiprintf_r+0x11a>
 80127e8:	4b50      	ldr	r3, [pc, #320]	; (801292c <_vfiprintf_r+0x214>)
 80127ea:	429c      	cmp	r4, r3
 80127ec:	d101      	bne.n	80127f2 <_vfiprintf_r+0xda>
 80127ee:	68b4      	ldr	r4, [r6, #8]
 80127f0:	e7a2      	b.n	8012738 <_vfiprintf_r+0x20>
 80127f2:	4b4f      	ldr	r3, [pc, #316]	; (8012930 <_vfiprintf_r+0x218>)
 80127f4:	429c      	cmp	r4, r3
 80127f6:	bf08      	it	eq
 80127f8:	68f4      	ldreq	r4, [r6, #12]
 80127fa:	e79d      	b.n	8012738 <_vfiprintf_r+0x20>
 80127fc:	4621      	mov	r1, r4
 80127fe:	4630      	mov	r0, r6
 8012800:	f7ff fb1a 	bl	8011e38 <__swsetup_r>
 8012804:	2800      	cmp	r0, #0
 8012806:	d09d      	beq.n	8012744 <_vfiprintf_r+0x2c>
 8012808:	f04f 30ff 	mov.w	r0, #4294967295
 801280c:	b01d      	add	sp, #116	; 0x74
 801280e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012812:	46a8      	mov	r8, r5
 8012814:	e7a2      	b.n	801275c <_vfiprintf_r+0x44>
 8012816:	4a44      	ldr	r2, [pc, #272]	; (8012928 <_vfiprintf_r+0x210>)
 8012818:	1a80      	subs	r0, r0, r2
 801281a:	fa0b f000 	lsl.w	r0, fp, r0
 801281e:	4318      	orrs	r0, r3
 8012820:	9004      	str	r0, [sp, #16]
 8012822:	4645      	mov	r5, r8
 8012824:	e7be      	b.n	80127a4 <_vfiprintf_r+0x8c>
 8012826:	9a03      	ldr	r2, [sp, #12]
 8012828:	1d11      	adds	r1, r2, #4
 801282a:	6812      	ldr	r2, [r2, #0]
 801282c:	9103      	str	r1, [sp, #12]
 801282e:	2a00      	cmp	r2, #0
 8012830:	db01      	blt.n	8012836 <_vfiprintf_r+0x11e>
 8012832:	9207      	str	r2, [sp, #28]
 8012834:	e004      	b.n	8012840 <_vfiprintf_r+0x128>
 8012836:	4252      	negs	r2, r2
 8012838:	f043 0302 	orr.w	r3, r3, #2
 801283c:	9207      	str	r2, [sp, #28]
 801283e:	9304      	str	r3, [sp, #16]
 8012840:	f898 3000 	ldrb.w	r3, [r8]
 8012844:	2b2e      	cmp	r3, #46	; 0x2e
 8012846:	d10e      	bne.n	8012866 <_vfiprintf_r+0x14e>
 8012848:	f898 3001 	ldrb.w	r3, [r8, #1]
 801284c:	2b2a      	cmp	r3, #42	; 0x2a
 801284e:	d138      	bne.n	80128c2 <_vfiprintf_r+0x1aa>
 8012850:	9b03      	ldr	r3, [sp, #12]
 8012852:	1d1a      	adds	r2, r3, #4
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	9203      	str	r2, [sp, #12]
 8012858:	2b00      	cmp	r3, #0
 801285a:	bfb8      	it	lt
 801285c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012860:	f108 0802 	add.w	r8, r8, #2
 8012864:	9305      	str	r3, [sp, #20]
 8012866:	4d33      	ldr	r5, [pc, #204]	; (8012934 <_vfiprintf_r+0x21c>)
 8012868:	f898 1000 	ldrb.w	r1, [r8]
 801286c:	2203      	movs	r2, #3
 801286e:	4628      	mov	r0, r5
 8012870:	f7ed fc9e 	bl	80001b0 <memchr>
 8012874:	b140      	cbz	r0, 8012888 <_vfiprintf_r+0x170>
 8012876:	2340      	movs	r3, #64	; 0x40
 8012878:	1b40      	subs	r0, r0, r5
 801287a:	fa03 f000 	lsl.w	r0, r3, r0
 801287e:	9b04      	ldr	r3, [sp, #16]
 8012880:	4303      	orrs	r3, r0
 8012882:	f108 0801 	add.w	r8, r8, #1
 8012886:	9304      	str	r3, [sp, #16]
 8012888:	f898 1000 	ldrb.w	r1, [r8]
 801288c:	482a      	ldr	r0, [pc, #168]	; (8012938 <_vfiprintf_r+0x220>)
 801288e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012892:	2206      	movs	r2, #6
 8012894:	f108 0701 	add.w	r7, r8, #1
 8012898:	f7ed fc8a 	bl	80001b0 <memchr>
 801289c:	2800      	cmp	r0, #0
 801289e:	d037      	beq.n	8012910 <_vfiprintf_r+0x1f8>
 80128a0:	4b26      	ldr	r3, [pc, #152]	; (801293c <_vfiprintf_r+0x224>)
 80128a2:	bb1b      	cbnz	r3, 80128ec <_vfiprintf_r+0x1d4>
 80128a4:	9b03      	ldr	r3, [sp, #12]
 80128a6:	3307      	adds	r3, #7
 80128a8:	f023 0307 	bic.w	r3, r3, #7
 80128ac:	3308      	adds	r3, #8
 80128ae:	9303      	str	r3, [sp, #12]
 80128b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128b2:	444b      	add	r3, r9
 80128b4:	9309      	str	r3, [sp, #36]	; 0x24
 80128b6:	e750      	b.n	801275a <_vfiprintf_r+0x42>
 80128b8:	fb05 3202 	mla	r2, r5, r2, r3
 80128bc:	2001      	movs	r0, #1
 80128be:	4688      	mov	r8, r1
 80128c0:	e78a      	b.n	80127d8 <_vfiprintf_r+0xc0>
 80128c2:	2300      	movs	r3, #0
 80128c4:	f108 0801 	add.w	r8, r8, #1
 80128c8:	9305      	str	r3, [sp, #20]
 80128ca:	4619      	mov	r1, r3
 80128cc:	250a      	movs	r5, #10
 80128ce:	4640      	mov	r0, r8
 80128d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128d4:	3a30      	subs	r2, #48	; 0x30
 80128d6:	2a09      	cmp	r2, #9
 80128d8:	d903      	bls.n	80128e2 <_vfiprintf_r+0x1ca>
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d0c3      	beq.n	8012866 <_vfiprintf_r+0x14e>
 80128de:	9105      	str	r1, [sp, #20]
 80128e0:	e7c1      	b.n	8012866 <_vfiprintf_r+0x14e>
 80128e2:	fb05 2101 	mla	r1, r5, r1, r2
 80128e6:	2301      	movs	r3, #1
 80128e8:	4680      	mov	r8, r0
 80128ea:	e7f0      	b.n	80128ce <_vfiprintf_r+0x1b6>
 80128ec:	ab03      	add	r3, sp, #12
 80128ee:	9300      	str	r3, [sp, #0]
 80128f0:	4622      	mov	r2, r4
 80128f2:	4b13      	ldr	r3, [pc, #76]	; (8012940 <_vfiprintf_r+0x228>)
 80128f4:	a904      	add	r1, sp, #16
 80128f6:	4630      	mov	r0, r6
 80128f8:	f3af 8000 	nop.w
 80128fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012900:	4681      	mov	r9, r0
 8012902:	d1d5      	bne.n	80128b0 <_vfiprintf_r+0x198>
 8012904:	89a3      	ldrh	r3, [r4, #12]
 8012906:	065b      	lsls	r3, r3, #25
 8012908:	f53f af7e 	bmi.w	8012808 <_vfiprintf_r+0xf0>
 801290c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801290e:	e77d      	b.n	801280c <_vfiprintf_r+0xf4>
 8012910:	ab03      	add	r3, sp, #12
 8012912:	9300      	str	r3, [sp, #0]
 8012914:	4622      	mov	r2, r4
 8012916:	4b0a      	ldr	r3, [pc, #40]	; (8012940 <_vfiprintf_r+0x228>)
 8012918:	a904      	add	r1, sp, #16
 801291a:	4630      	mov	r0, r6
 801291c:	f000 f888 	bl	8012a30 <_printf_i>
 8012920:	e7ec      	b.n	80128fc <_vfiprintf_r+0x1e4>
 8012922:	bf00      	nop
 8012924:	08014254 	.word	0x08014254
 8012928:	08014294 	.word	0x08014294
 801292c:	08014274 	.word	0x08014274
 8012930:	08014234 	.word	0x08014234
 8012934:	0801429a 	.word	0x0801429a
 8012938:	0801429e 	.word	0x0801429e
 801293c:	00000000 	.word	0x00000000
 8012940:	080126f3 	.word	0x080126f3

08012944 <_printf_common>:
 8012944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012948:	4691      	mov	r9, r2
 801294a:	461f      	mov	r7, r3
 801294c:	688a      	ldr	r2, [r1, #8]
 801294e:	690b      	ldr	r3, [r1, #16]
 8012950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012954:	4293      	cmp	r3, r2
 8012956:	bfb8      	it	lt
 8012958:	4613      	movlt	r3, r2
 801295a:	f8c9 3000 	str.w	r3, [r9]
 801295e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012962:	4606      	mov	r6, r0
 8012964:	460c      	mov	r4, r1
 8012966:	b112      	cbz	r2, 801296e <_printf_common+0x2a>
 8012968:	3301      	adds	r3, #1
 801296a:	f8c9 3000 	str.w	r3, [r9]
 801296e:	6823      	ldr	r3, [r4, #0]
 8012970:	0699      	lsls	r1, r3, #26
 8012972:	bf42      	ittt	mi
 8012974:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012978:	3302      	addmi	r3, #2
 801297a:	f8c9 3000 	strmi.w	r3, [r9]
 801297e:	6825      	ldr	r5, [r4, #0]
 8012980:	f015 0506 	ands.w	r5, r5, #6
 8012984:	d107      	bne.n	8012996 <_printf_common+0x52>
 8012986:	f104 0a19 	add.w	sl, r4, #25
 801298a:	68e3      	ldr	r3, [r4, #12]
 801298c:	f8d9 2000 	ldr.w	r2, [r9]
 8012990:	1a9b      	subs	r3, r3, r2
 8012992:	42ab      	cmp	r3, r5
 8012994:	dc28      	bgt.n	80129e8 <_printf_common+0xa4>
 8012996:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801299a:	6822      	ldr	r2, [r4, #0]
 801299c:	3300      	adds	r3, #0
 801299e:	bf18      	it	ne
 80129a0:	2301      	movne	r3, #1
 80129a2:	0692      	lsls	r2, r2, #26
 80129a4:	d42d      	bmi.n	8012a02 <_printf_common+0xbe>
 80129a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80129aa:	4639      	mov	r1, r7
 80129ac:	4630      	mov	r0, r6
 80129ae:	47c0      	blx	r8
 80129b0:	3001      	adds	r0, #1
 80129b2:	d020      	beq.n	80129f6 <_printf_common+0xb2>
 80129b4:	6823      	ldr	r3, [r4, #0]
 80129b6:	68e5      	ldr	r5, [r4, #12]
 80129b8:	f8d9 2000 	ldr.w	r2, [r9]
 80129bc:	f003 0306 	and.w	r3, r3, #6
 80129c0:	2b04      	cmp	r3, #4
 80129c2:	bf08      	it	eq
 80129c4:	1aad      	subeq	r5, r5, r2
 80129c6:	68a3      	ldr	r3, [r4, #8]
 80129c8:	6922      	ldr	r2, [r4, #16]
 80129ca:	bf0c      	ite	eq
 80129cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80129d0:	2500      	movne	r5, #0
 80129d2:	4293      	cmp	r3, r2
 80129d4:	bfc4      	itt	gt
 80129d6:	1a9b      	subgt	r3, r3, r2
 80129d8:	18ed      	addgt	r5, r5, r3
 80129da:	f04f 0900 	mov.w	r9, #0
 80129de:	341a      	adds	r4, #26
 80129e0:	454d      	cmp	r5, r9
 80129e2:	d11a      	bne.n	8012a1a <_printf_common+0xd6>
 80129e4:	2000      	movs	r0, #0
 80129e6:	e008      	b.n	80129fa <_printf_common+0xb6>
 80129e8:	2301      	movs	r3, #1
 80129ea:	4652      	mov	r2, sl
 80129ec:	4639      	mov	r1, r7
 80129ee:	4630      	mov	r0, r6
 80129f0:	47c0      	blx	r8
 80129f2:	3001      	adds	r0, #1
 80129f4:	d103      	bne.n	80129fe <_printf_common+0xba>
 80129f6:	f04f 30ff 	mov.w	r0, #4294967295
 80129fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129fe:	3501      	adds	r5, #1
 8012a00:	e7c3      	b.n	801298a <_printf_common+0x46>
 8012a02:	18e1      	adds	r1, r4, r3
 8012a04:	1c5a      	adds	r2, r3, #1
 8012a06:	2030      	movs	r0, #48	; 0x30
 8012a08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012a0c:	4422      	add	r2, r4
 8012a0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012a12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012a16:	3302      	adds	r3, #2
 8012a18:	e7c5      	b.n	80129a6 <_printf_common+0x62>
 8012a1a:	2301      	movs	r3, #1
 8012a1c:	4622      	mov	r2, r4
 8012a1e:	4639      	mov	r1, r7
 8012a20:	4630      	mov	r0, r6
 8012a22:	47c0      	blx	r8
 8012a24:	3001      	adds	r0, #1
 8012a26:	d0e6      	beq.n	80129f6 <_printf_common+0xb2>
 8012a28:	f109 0901 	add.w	r9, r9, #1
 8012a2c:	e7d8      	b.n	80129e0 <_printf_common+0x9c>
	...

08012a30 <_printf_i>:
 8012a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012a34:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012a38:	460c      	mov	r4, r1
 8012a3a:	7e09      	ldrb	r1, [r1, #24]
 8012a3c:	b085      	sub	sp, #20
 8012a3e:	296e      	cmp	r1, #110	; 0x6e
 8012a40:	4617      	mov	r7, r2
 8012a42:	4606      	mov	r6, r0
 8012a44:	4698      	mov	r8, r3
 8012a46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012a48:	f000 80b3 	beq.w	8012bb2 <_printf_i+0x182>
 8012a4c:	d822      	bhi.n	8012a94 <_printf_i+0x64>
 8012a4e:	2963      	cmp	r1, #99	; 0x63
 8012a50:	d036      	beq.n	8012ac0 <_printf_i+0x90>
 8012a52:	d80a      	bhi.n	8012a6a <_printf_i+0x3a>
 8012a54:	2900      	cmp	r1, #0
 8012a56:	f000 80b9 	beq.w	8012bcc <_printf_i+0x19c>
 8012a5a:	2958      	cmp	r1, #88	; 0x58
 8012a5c:	f000 8083 	beq.w	8012b66 <_printf_i+0x136>
 8012a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012a68:	e032      	b.n	8012ad0 <_printf_i+0xa0>
 8012a6a:	2964      	cmp	r1, #100	; 0x64
 8012a6c:	d001      	beq.n	8012a72 <_printf_i+0x42>
 8012a6e:	2969      	cmp	r1, #105	; 0x69
 8012a70:	d1f6      	bne.n	8012a60 <_printf_i+0x30>
 8012a72:	6820      	ldr	r0, [r4, #0]
 8012a74:	6813      	ldr	r3, [r2, #0]
 8012a76:	0605      	lsls	r5, r0, #24
 8012a78:	f103 0104 	add.w	r1, r3, #4
 8012a7c:	d52a      	bpl.n	8012ad4 <_printf_i+0xa4>
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	6011      	str	r1, [r2, #0]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	da03      	bge.n	8012a8e <_printf_i+0x5e>
 8012a86:	222d      	movs	r2, #45	; 0x2d
 8012a88:	425b      	negs	r3, r3
 8012a8a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012a8e:	486f      	ldr	r0, [pc, #444]	; (8012c4c <_printf_i+0x21c>)
 8012a90:	220a      	movs	r2, #10
 8012a92:	e039      	b.n	8012b08 <_printf_i+0xd8>
 8012a94:	2973      	cmp	r1, #115	; 0x73
 8012a96:	f000 809d 	beq.w	8012bd4 <_printf_i+0x1a4>
 8012a9a:	d808      	bhi.n	8012aae <_printf_i+0x7e>
 8012a9c:	296f      	cmp	r1, #111	; 0x6f
 8012a9e:	d020      	beq.n	8012ae2 <_printf_i+0xb2>
 8012aa0:	2970      	cmp	r1, #112	; 0x70
 8012aa2:	d1dd      	bne.n	8012a60 <_printf_i+0x30>
 8012aa4:	6823      	ldr	r3, [r4, #0]
 8012aa6:	f043 0320 	orr.w	r3, r3, #32
 8012aaa:	6023      	str	r3, [r4, #0]
 8012aac:	e003      	b.n	8012ab6 <_printf_i+0x86>
 8012aae:	2975      	cmp	r1, #117	; 0x75
 8012ab0:	d017      	beq.n	8012ae2 <_printf_i+0xb2>
 8012ab2:	2978      	cmp	r1, #120	; 0x78
 8012ab4:	d1d4      	bne.n	8012a60 <_printf_i+0x30>
 8012ab6:	2378      	movs	r3, #120	; 0x78
 8012ab8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012abc:	4864      	ldr	r0, [pc, #400]	; (8012c50 <_printf_i+0x220>)
 8012abe:	e055      	b.n	8012b6c <_printf_i+0x13c>
 8012ac0:	6813      	ldr	r3, [r2, #0]
 8012ac2:	1d19      	adds	r1, r3, #4
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	6011      	str	r1, [r2, #0]
 8012ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	e08c      	b.n	8012bee <_printf_i+0x1be>
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	6011      	str	r1, [r2, #0]
 8012ad8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012adc:	bf18      	it	ne
 8012ade:	b21b      	sxthne	r3, r3
 8012ae0:	e7cf      	b.n	8012a82 <_printf_i+0x52>
 8012ae2:	6813      	ldr	r3, [r2, #0]
 8012ae4:	6825      	ldr	r5, [r4, #0]
 8012ae6:	1d18      	adds	r0, r3, #4
 8012ae8:	6010      	str	r0, [r2, #0]
 8012aea:	0628      	lsls	r0, r5, #24
 8012aec:	d501      	bpl.n	8012af2 <_printf_i+0xc2>
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	e002      	b.n	8012af8 <_printf_i+0xc8>
 8012af2:	0668      	lsls	r0, r5, #25
 8012af4:	d5fb      	bpl.n	8012aee <_printf_i+0xbe>
 8012af6:	881b      	ldrh	r3, [r3, #0]
 8012af8:	4854      	ldr	r0, [pc, #336]	; (8012c4c <_printf_i+0x21c>)
 8012afa:	296f      	cmp	r1, #111	; 0x6f
 8012afc:	bf14      	ite	ne
 8012afe:	220a      	movne	r2, #10
 8012b00:	2208      	moveq	r2, #8
 8012b02:	2100      	movs	r1, #0
 8012b04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012b08:	6865      	ldr	r5, [r4, #4]
 8012b0a:	60a5      	str	r5, [r4, #8]
 8012b0c:	2d00      	cmp	r5, #0
 8012b0e:	f2c0 8095 	blt.w	8012c3c <_printf_i+0x20c>
 8012b12:	6821      	ldr	r1, [r4, #0]
 8012b14:	f021 0104 	bic.w	r1, r1, #4
 8012b18:	6021      	str	r1, [r4, #0]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d13d      	bne.n	8012b9a <_printf_i+0x16a>
 8012b1e:	2d00      	cmp	r5, #0
 8012b20:	f040 808e 	bne.w	8012c40 <_printf_i+0x210>
 8012b24:	4665      	mov	r5, ip
 8012b26:	2a08      	cmp	r2, #8
 8012b28:	d10b      	bne.n	8012b42 <_printf_i+0x112>
 8012b2a:	6823      	ldr	r3, [r4, #0]
 8012b2c:	07db      	lsls	r3, r3, #31
 8012b2e:	d508      	bpl.n	8012b42 <_printf_i+0x112>
 8012b30:	6923      	ldr	r3, [r4, #16]
 8012b32:	6862      	ldr	r2, [r4, #4]
 8012b34:	429a      	cmp	r2, r3
 8012b36:	bfde      	ittt	le
 8012b38:	2330      	movle	r3, #48	; 0x30
 8012b3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012b3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012b42:	ebac 0305 	sub.w	r3, ip, r5
 8012b46:	6123      	str	r3, [r4, #16]
 8012b48:	f8cd 8000 	str.w	r8, [sp]
 8012b4c:	463b      	mov	r3, r7
 8012b4e:	aa03      	add	r2, sp, #12
 8012b50:	4621      	mov	r1, r4
 8012b52:	4630      	mov	r0, r6
 8012b54:	f7ff fef6 	bl	8012944 <_printf_common>
 8012b58:	3001      	adds	r0, #1
 8012b5a:	d14d      	bne.n	8012bf8 <_printf_i+0x1c8>
 8012b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8012b60:	b005      	add	sp, #20
 8012b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b66:	4839      	ldr	r0, [pc, #228]	; (8012c4c <_printf_i+0x21c>)
 8012b68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012b6c:	6813      	ldr	r3, [r2, #0]
 8012b6e:	6821      	ldr	r1, [r4, #0]
 8012b70:	1d1d      	adds	r5, r3, #4
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	6015      	str	r5, [r2, #0]
 8012b76:	060a      	lsls	r2, r1, #24
 8012b78:	d50b      	bpl.n	8012b92 <_printf_i+0x162>
 8012b7a:	07ca      	lsls	r2, r1, #31
 8012b7c:	bf44      	itt	mi
 8012b7e:	f041 0120 	orrmi.w	r1, r1, #32
 8012b82:	6021      	strmi	r1, [r4, #0]
 8012b84:	b91b      	cbnz	r3, 8012b8e <_printf_i+0x15e>
 8012b86:	6822      	ldr	r2, [r4, #0]
 8012b88:	f022 0220 	bic.w	r2, r2, #32
 8012b8c:	6022      	str	r2, [r4, #0]
 8012b8e:	2210      	movs	r2, #16
 8012b90:	e7b7      	b.n	8012b02 <_printf_i+0xd2>
 8012b92:	064d      	lsls	r5, r1, #25
 8012b94:	bf48      	it	mi
 8012b96:	b29b      	uxthmi	r3, r3
 8012b98:	e7ef      	b.n	8012b7a <_printf_i+0x14a>
 8012b9a:	4665      	mov	r5, ip
 8012b9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ba0:	fb02 3311 	mls	r3, r2, r1, r3
 8012ba4:	5cc3      	ldrb	r3, [r0, r3]
 8012ba6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012baa:	460b      	mov	r3, r1
 8012bac:	2900      	cmp	r1, #0
 8012bae:	d1f5      	bne.n	8012b9c <_printf_i+0x16c>
 8012bb0:	e7b9      	b.n	8012b26 <_printf_i+0xf6>
 8012bb2:	6813      	ldr	r3, [r2, #0]
 8012bb4:	6825      	ldr	r5, [r4, #0]
 8012bb6:	6961      	ldr	r1, [r4, #20]
 8012bb8:	1d18      	adds	r0, r3, #4
 8012bba:	6010      	str	r0, [r2, #0]
 8012bbc:	0628      	lsls	r0, r5, #24
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	d501      	bpl.n	8012bc6 <_printf_i+0x196>
 8012bc2:	6019      	str	r1, [r3, #0]
 8012bc4:	e002      	b.n	8012bcc <_printf_i+0x19c>
 8012bc6:	066a      	lsls	r2, r5, #25
 8012bc8:	d5fb      	bpl.n	8012bc2 <_printf_i+0x192>
 8012bca:	8019      	strh	r1, [r3, #0]
 8012bcc:	2300      	movs	r3, #0
 8012bce:	6123      	str	r3, [r4, #16]
 8012bd0:	4665      	mov	r5, ip
 8012bd2:	e7b9      	b.n	8012b48 <_printf_i+0x118>
 8012bd4:	6813      	ldr	r3, [r2, #0]
 8012bd6:	1d19      	adds	r1, r3, #4
 8012bd8:	6011      	str	r1, [r2, #0]
 8012bda:	681d      	ldr	r5, [r3, #0]
 8012bdc:	6862      	ldr	r2, [r4, #4]
 8012bde:	2100      	movs	r1, #0
 8012be0:	4628      	mov	r0, r5
 8012be2:	f7ed fae5 	bl	80001b0 <memchr>
 8012be6:	b108      	cbz	r0, 8012bec <_printf_i+0x1bc>
 8012be8:	1b40      	subs	r0, r0, r5
 8012bea:	6060      	str	r0, [r4, #4]
 8012bec:	6863      	ldr	r3, [r4, #4]
 8012bee:	6123      	str	r3, [r4, #16]
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012bf6:	e7a7      	b.n	8012b48 <_printf_i+0x118>
 8012bf8:	6923      	ldr	r3, [r4, #16]
 8012bfa:	462a      	mov	r2, r5
 8012bfc:	4639      	mov	r1, r7
 8012bfe:	4630      	mov	r0, r6
 8012c00:	47c0      	blx	r8
 8012c02:	3001      	adds	r0, #1
 8012c04:	d0aa      	beq.n	8012b5c <_printf_i+0x12c>
 8012c06:	6823      	ldr	r3, [r4, #0]
 8012c08:	079b      	lsls	r3, r3, #30
 8012c0a:	d413      	bmi.n	8012c34 <_printf_i+0x204>
 8012c0c:	68e0      	ldr	r0, [r4, #12]
 8012c0e:	9b03      	ldr	r3, [sp, #12]
 8012c10:	4298      	cmp	r0, r3
 8012c12:	bfb8      	it	lt
 8012c14:	4618      	movlt	r0, r3
 8012c16:	e7a3      	b.n	8012b60 <_printf_i+0x130>
 8012c18:	2301      	movs	r3, #1
 8012c1a:	464a      	mov	r2, r9
 8012c1c:	4639      	mov	r1, r7
 8012c1e:	4630      	mov	r0, r6
 8012c20:	47c0      	blx	r8
 8012c22:	3001      	adds	r0, #1
 8012c24:	d09a      	beq.n	8012b5c <_printf_i+0x12c>
 8012c26:	3501      	adds	r5, #1
 8012c28:	68e3      	ldr	r3, [r4, #12]
 8012c2a:	9a03      	ldr	r2, [sp, #12]
 8012c2c:	1a9b      	subs	r3, r3, r2
 8012c2e:	42ab      	cmp	r3, r5
 8012c30:	dcf2      	bgt.n	8012c18 <_printf_i+0x1e8>
 8012c32:	e7eb      	b.n	8012c0c <_printf_i+0x1dc>
 8012c34:	2500      	movs	r5, #0
 8012c36:	f104 0919 	add.w	r9, r4, #25
 8012c3a:	e7f5      	b.n	8012c28 <_printf_i+0x1f8>
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d1ac      	bne.n	8012b9a <_printf_i+0x16a>
 8012c40:	7803      	ldrb	r3, [r0, #0]
 8012c42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012c46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012c4a:	e76c      	b.n	8012b26 <_printf_i+0xf6>
 8012c4c:	080142a5 	.word	0x080142a5
 8012c50:	080142b6 	.word	0x080142b6

08012c54 <_sbrk_r>:
 8012c54:	b538      	push	{r3, r4, r5, lr}
 8012c56:	4c06      	ldr	r4, [pc, #24]	; (8012c70 <_sbrk_r+0x1c>)
 8012c58:	2300      	movs	r3, #0
 8012c5a:	4605      	mov	r5, r0
 8012c5c:	4608      	mov	r0, r1
 8012c5e:	6023      	str	r3, [r4, #0]
 8012c60:	f7ef fef4 	bl	8002a4c <_sbrk>
 8012c64:	1c43      	adds	r3, r0, #1
 8012c66:	d102      	bne.n	8012c6e <_sbrk_r+0x1a>
 8012c68:	6823      	ldr	r3, [r4, #0]
 8012c6a:	b103      	cbz	r3, 8012c6e <_sbrk_r+0x1a>
 8012c6c:	602b      	str	r3, [r5, #0]
 8012c6e:	bd38      	pop	{r3, r4, r5, pc}
 8012c70:	20006ff0 	.word	0x20006ff0

08012c74 <__sread>:
 8012c74:	b510      	push	{r4, lr}
 8012c76:	460c      	mov	r4, r1
 8012c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c7c:	f000 f8d6 	bl	8012e2c <_read_r>
 8012c80:	2800      	cmp	r0, #0
 8012c82:	bfab      	itete	ge
 8012c84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012c86:	89a3      	ldrhlt	r3, [r4, #12]
 8012c88:	181b      	addge	r3, r3, r0
 8012c8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012c8e:	bfac      	ite	ge
 8012c90:	6563      	strge	r3, [r4, #84]	; 0x54
 8012c92:	81a3      	strhlt	r3, [r4, #12]
 8012c94:	bd10      	pop	{r4, pc}

08012c96 <__swrite>:
 8012c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c9a:	461f      	mov	r7, r3
 8012c9c:	898b      	ldrh	r3, [r1, #12]
 8012c9e:	05db      	lsls	r3, r3, #23
 8012ca0:	4605      	mov	r5, r0
 8012ca2:	460c      	mov	r4, r1
 8012ca4:	4616      	mov	r6, r2
 8012ca6:	d505      	bpl.n	8012cb4 <__swrite+0x1e>
 8012ca8:	2302      	movs	r3, #2
 8012caa:	2200      	movs	r2, #0
 8012cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cb0:	f000 f868 	bl	8012d84 <_lseek_r>
 8012cb4:	89a3      	ldrh	r3, [r4, #12]
 8012cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012cba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012cbe:	81a3      	strh	r3, [r4, #12]
 8012cc0:	4632      	mov	r2, r6
 8012cc2:	463b      	mov	r3, r7
 8012cc4:	4628      	mov	r0, r5
 8012cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012cca:	f000 b817 	b.w	8012cfc <_write_r>

08012cce <__sseek>:
 8012cce:	b510      	push	{r4, lr}
 8012cd0:	460c      	mov	r4, r1
 8012cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cd6:	f000 f855 	bl	8012d84 <_lseek_r>
 8012cda:	1c43      	adds	r3, r0, #1
 8012cdc:	89a3      	ldrh	r3, [r4, #12]
 8012cde:	bf15      	itete	ne
 8012ce0:	6560      	strne	r0, [r4, #84]	; 0x54
 8012ce2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012ce6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012cea:	81a3      	strheq	r3, [r4, #12]
 8012cec:	bf18      	it	ne
 8012cee:	81a3      	strhne	r3, [r4, #12]
 8012cf0:	bd10      	pop	{r4, pc}

08012cf2 <__sclose>:
 8012cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cf6:	f000 b813 	b.w	8012d20 <_close_r>
	...

08012cfc <_write_r>:
 8012cfc:	b538      	push	{r3, r4, r5, lr}
 8012cfe:	4c07      	ldr	r4, [pc, #28]	; (8012d1c <_write_r+0x20>)
 8012d00:	4605      	mov	r5, r0
 8012d02:	4608      	mov	r0, r1
 8012d04:	4611      	mov	r1, r2
 8012d06:	2200      	movs	r2, #0
 8012d08:	6022      	str	r2, [r4, #0]
 8012d0a:	461a      	mov	r2, r3
 8012d0c:	f7f7 fd7a 	bl	800a804 <_write>
 8012d10:	1c43      	adds	r3, r0, #1
 8012d12:	d102      	bne.n	8012d1a <_write_r+0x1e>
 8012d14:	6823      	ldr	r3, [r4, #0]
 8012d16:	b103      	cbz	r3, 8012d1a <_write_r+0x1e>
 8012d18:	602b      	str	r3, [r5, #0]
 8012d1a:	bd38      	pop	{r3, r4, r5, pc}
 8012d1c:	20006ff0 	.word	0x20006ff0

08012d20 <_close_r>:
 8012d20:	b538      	push	{r3, r4, r5, lr}
 8012d22:	4c06      	ldr	r4, [pc, #24]	; (8012d3c <_close_r+0x1c>)
 8012d24:	2300      	movs	r3, #0
 8012d26:	4605      	mov	r5, r0
 8012d28:	4608      	mov	r0, r1
 8012d2a:	6023      	str	r3, [r4, #0]
 8012d2c:	f7ef fe59 	bl	80029e2 <_close>
 8012d30:	1c43      	adds	r3, r0, #1
 8012d32:	d102      	bne.n	8012d3a <_close_r+0x1a>
 8012d34:	6823      	ldr	r3, [r4, #0]
 8012d36:	b103      	cbz	r3, 8012d3a <_close_r+0x1a>
 8012d38:	602b      	str	r3, [r5, #0]
 8012d3a:	bd38      	pop	{r3, r4, r5, pc}
 8012d3c:	20006ff0 	.word	0x20006ff0

08012d40 <_fstat_r>:
 8012d40:	b538      	push	{r3, r4, r5, lr}
 8012d42:	4c07      	ldr	r4, [pc, #28]	; (8012d60 <_fstat_r+0x20>)
 8012d44:	2300      	movs	r3, #0
 8012d46:	4605      	mov	r5, r0
 8012d48:	4608      	mov	r0, r1
 8012d4a:	4611      	mov	r1, r2
 8012d4c:	6023      	str	r3, [r4, #0]
 8012d4e:	f7ef fe54 	bl	80029fa <_fstat>
 8012d52:	1c43      	adds	r3, r0, #1
 8012d54:	d102      	bne.n	8012d5c <_fstat_r+0x1c>
 8012d56:	6823      	ldr	r3, [r4, #0]
 8012d58:	b103      	cbz	r3, 8012d5c <_fstat_r+0x1c>
 8012d5a:	602b      	str	r3, [r5, #0]
 8012d5c:	bd38      	pop	{r3, r4, r5, pc}
 8012d5e:	bf00      	nop
 8012d60:	20006ff0 	.word	0x20006ff0

08012d64 <_isatty_r>:
 8012d64:	b538      	push	{r3, r4, r5, lr}
 8012d66:	4c06      	ldr	r4, [pc, #24]	; (8012d80 <_isatty_r+0x1c>)
 8012d68:	2300      	movs	r3, #0
 8012d6a:	4605      	mov	r5, r0
 8012d6c:	4608      	mov	r0, r1
 8012d6e:	6023      	str	r3, [r4, #0]
 8012d70:	f7ef fe53 	bl	8002a1a <_isatty>
 8012d74:	1c43      	adds	r3, r0, #1
 8012d76:	d102      	bne.n	8012d7e <_isatty_r+0x1a>
 8012d78:	6823      	ldr	r3, [r4, #0]
 8012d7a:	b103      	cbz	r3, 8012d7e <_isatty_r+0x1a>
 8012d7c:	602b      	str	r3, [r5, #0]
 8012d7e:	bd38      	pop	{r3, r4, r5, pc}
 8012d80:	20006ff0 	.word	0x20006ff0

08012d84 <_lseek_r>:
 8012d84:	b538      	push	{r3, r4, r5, lr}
 8012d86:	4c07      	ldr	r4, [pc, #28]	; (8012da4 <_lseek_r+0x20>)
 8012d88:	4605      	mov	r5, r0
 8012d8a:	4608      	mov	r0, r1
 8012d8c:	4611      	mov	r1, r2
 8012d8e:	2200      	movs	r2, #0
 8012d90:	6022      	str	r2, [r4, #0]
 8012d92:	461a      	mov	r2, r3
 8012d94:	f7ef fe4c 	bl	8002a30 <_lseek>
 8012d98:	1c43      	adds	r3, r0, #1
 8012d9a:	d102      	bne.n	8012da2 <_lseek_r+0x1e>
 8012d9c:	6823      	ldr	r3, [r4, #0]
 8012d9e:	b103      	cbz	r3, 8012da2 <_lseek_r+0x1e>
 8012da0:	602b      	str	r3, [r5, #0]
 8012da2:	bd38      	pop	{r3, r4, r5, pc}
 8012da4:	20006ff0 	.word	0x20006ff0

08012da8 <memmove>:
 8012da8:	4288      	cmp	r0, r1
 8012daa:	b510      	push	{r4, lr}
 8012dac:	eb01 0302 	add.w	r3, r1, r2
 8012db0:	d807      	bhi.n	8012dc2 <memmove+0x1a>
 8012db2:	1e42      	subs	r2, r0, #1
 8012db4:	4299      	cmp	r1, r3
 8012db6:	d00a      	beq.n	8012dce <memmove+0x26>
 8012db8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012dbc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012dc0:	e7f8      	b.n	8012db4 <memmove+0xc>
 8012dc2:	4283      	cmp	r3, r0
 8012dc4:	d9f5      	bls.n	8012db2 <memmove+0xa>
 8012dc6:	1881      	adds	r1, r0, r2
 8012dc8:	1ad2      	subs	r2, r2, r3
 8012dca:	42d3      	cmn	r3, r2
 8012dcc:	d100      	bne.n	8012dd0 <memmove+0x28>
 8012dce:	bd10      	pop	{r4, pc}
 8012dd0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012dd4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012dd8:	e7f7      	b.n	8012dca <memmove+0x22>

08012dda <__malloc_lock>:
 8012dda:	4770      	bx	lr

08012ddc <__malloc_unlock>:
 8012ddc:	4770      	bx	lr

08012dde <_realloc_r>:
 8012dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012de0:	4607      	mov	r7, r0
 8012de2:	4614      	mov	r4, r2
 8012de4:	460e      	mov	r6, r1
 8012de6:	b921      	cbnz	r1, 8012df2 <_realloc_r+0x14>
 8012de8:	4611      	mov	r1, r2
 8012dea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012dee:	f7ff babd 	b.w	801236c <_malloc_r>
 8012df2:	b922      	cbnz	r2, 8012dfe <_realloc_r+0x20>
 8012df4:	f7ff fa6c 	bl	80122d0 <_free_r>
 8012df8:	4625      	mov	r5, r4
 8012dfa:	4628      	mov	r0, r5
 8012dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dfe:	f000 f827 	bl	8012e50 <_malloc_usable_size_r>
 8012e02:	42a0      	cmp	r0, r4
 8012e04:	d20f      	bcs.n	8012e26 <_realloc_r+0x48>
 8012e06:	4621      	mov	r1, r4
 8012e08:	4638      	mov	r0, r7
 8012e0a:	f7ff faaf 	bl	801236c <_malloc_r>
 8012e0e:	4605      	mov	r5, r0
 8012e10:	2800      	cmp	r0, #0
 8012e12:	d0f2      	beq.n	8012dfa <_realloc_r+0x1c>
 8012e14:	4631      	mov	r1, r6
 8012e16:	4622      	mov	r2, r4
 8012e18:	f7fe febe 	bl	8011b98 <memcpy>
 8012e1c:	4631      	mov	r1, r6
 8012e1e:	4638      	mov	r0, r7
 8012e20:	f7ff fa56 	bl	80122d0 <_free_r>
 8012e24:	e7e9      	b.n	8012dfa <_realloc_r+0x1c>
 8012e26:	4635      	mov	r5, r6
 8012e28:	e7e7      	b.n	8012dfa <_realloc_r+0x1c>
	...

08012e2c <_read_r>:
 8012e2c:	b538      	push	{r3, r4, r5, lr}
 8012e2e:	4c07      	ldr	r4, [pc, #28]	; (8012e4c <_read_r+0x20>)
 8012e30:	4605      	mov	r5, r0
 8012e32:	4608      	mov	r0, r1
 8012e34:	4611      	mov	r1, r2
 8012e36:	2200      	movs	r2, #0
 8012e38:	6022      	str	r2, [r4, #0]
 8012e3a:	461a      	mov	r2, r3
 8012e3c:	f7ef fdb4 	bl	80029a8 <_read>
 8012e40:	1c43      	adds	r3, r0, #1
 8012e42:	d102      	bne.n	8012e4a <_read_r+0x1e>
 8012e44:	6823      	ldr	r3, [r4, #0]
 8012e46:	b103      	cbz	r3, 8012e4a <_read_r+0x1e>
 8012e48:	602b      	str	r3, [r5, #0]
 8012e4a:	bd38      	pop	{r3, r4, r5, pc}
 8012e4c:	20006ff0 	.word	0x20006ff0

08012e50 <_malloc_usable_size_r>:
 8012e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e54:	1f18      	subs	r0, r3, #4
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	bfbc      	itt	lt
 8012e5a:	580b      	ldrlt	r3, [r1, r0]
 8012e5c:	18c0      	addlt	r0, r0, r3
 8012e5e:	4770      	bx	lr

08012e60 <_init>:
 8012e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e62:	bf00      	nop
 8012e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e66:	bc08      	pop	{r3}
 8012e68:	469e      	mov	lr, r3
 8012e6a:	4770      	bx	lr

08012e6c <_fini>:
 8012e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e6e:	bf00      	nop
 8012e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e72:	bc08      	pop	{r3}
 8012e74:	469e      	mov	lr, r3
 8012e76:	4770      	bx	lr
