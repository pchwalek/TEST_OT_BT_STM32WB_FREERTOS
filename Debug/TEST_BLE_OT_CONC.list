
TEST_BLE_OT_CONC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012db4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013c0  08012ef4  08012ef4  00022ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080142b4  080142b4  000242b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080142bc  080142bc  000242bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080142c0  080142c0  000242c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000004  080142c4  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  2000008c  0801434c  0003008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000051  20000128  080143e5  00030128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  2000017c  08014436  0003017c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a0  20000190  08014447  00030190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006dc4  20000230  080144e7  00030230  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20006ff4  080144e7  00036ff4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 15 MB_MEM1       000001c4  20030028  20030028  00040000  2**2
                  ALLOC
 16 MB_MEM2       00000b93  200301ec  200301ec  00040000  2**2
                  ALLOC
 17 .debug_info   0005c2d9  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 0000a36c  00000000  00000000  0008c539  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003b18  00000000  00000000  000968a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 000036b0  00000000  00000000  0009a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  000358f9  00000000  00000000  0009da70  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0003b7fd  00000000  00000000  000d3369  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    001149b3  00000000  00000000  0010eb66  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  00223519  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000fbb0  00000000  00000000  00223594  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000230 	.word	0x20000230
 800015c:	00000000 	.word	0x00000000
 8000160:	08012edc 	.word	0x08012edc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000234 	.word	0x20000234
 800017c:	08012edc 	.word	0x08012edc

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800038e:	f1a4 0401 	sub.w	r4, r4, #1
 8000392:	d1e9      	bne.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__aeabi_d2f>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009f4:	bf24      	itt	cs
 80009f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009fe:	d90d      	bls.n	8000a1c <__aeabi_d2f+0x30>
 8000a00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a14:	bf08      	it	eq
 8000a16:	f020 0001 	biceq.w	r0, r0, #1
 8000a1a:	4770      	bx	lr
 8000a1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a20:	d121      	bne.n	8000a66 <__aeabi_d2f+0x7a>
 8000a22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a26:	bfbc      	itt	lt
 8000a28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	4770      	bxlt	lr
 8000a2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a36:	f1c2 0218 	rsb	r2, r2, #24
 8000a3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a42:	fa20 f002 	lsr.w	r0, r0, r2
 8000a46:	bf18      	it	ne
 8000a48:	f040 0001 	orrne.w	r0, r0, #1
 8000a4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a58:	ea40 000c 	orr.w	r0, r0, ip
 8000a5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a64:	e7cc      	b.n	8000a00 <__aeabi_d2f+0x14>
 8000a66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a6a:	d107      	bne.n	8000a7c <__aeabi_d2f+0x90>
 8000a6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a70:	bf1e      	ittt	ne
 8000a72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a7a:	4770      	bxne	lr
 8000a7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b972 	b.w	8000d88 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4688      	mov	r8, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14b      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4615      	mov	r5, r2
 8000ace:	d967      	bls.n	8000ba0 <__udivmoddi4+0xe4>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0720 	rsb	r7, r2, #32
 8000ada:	fa01 f302 	lsl.w	r3, r1, r2
 8000ade:	fa20 f707 	lsr.w	r7, r0, r7
 8000ae2:	4095      	lsls	r5, r2
 8000ae4:	ea47 0803 	orr.w	r8, r7, r3
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aee:	0c23      	lsrs	r3, r4, #16
 8000af0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000af4:	fa1f fc85 	uxth.w	ip, r5
 8000af8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000afc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b00:	fb07 f10c 	mul.w	r1, r7, ip
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d909      	bls.n	8000b1c <__udivmoddi4+0x60>
 8000b08:	18eb      	adds	r3, r5, r3
 8000b0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b0e:	f080 811b 	bcs.w	8000d48 <__udivmoddi4+0x28c>
 8000b12:	4299      	cmp	r1, r3
 8000b14:	f240 8118 	bls.w	8000d48 <__udivmoddi4+0x28c>
 8000b18:	3f02      	subs	r7, #2
 8000b1a:	442b      	add	r3, r5
 8000b1c:	1a5b      	subs	r3, r3, r1
 8000b1e:	b2a4      	uxth	r4, r4
 8000b20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b30:	45a4      	cmp	ip, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x8c>
 8000b34:	192c      	adds	r4, r5, r4
 8000b36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3a:	f080 8107 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	f240 8104 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b44:	3802      	subs	r0, #2
 8000b46:	442c      	add	r4, r5
 8000b48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4c:	eba4 040c 	sub.w	r4, r4, ip
 8000b50:	2700      	movs	r7, #0
 8000b52:	b11e      	cbz	r6, 8000b5c <__udivmoddi4+0xa0>
 8000b54:	40d4      	lsrs	r4, r2
 8000b56:	2300      	movs	r3, #0
 8000b58:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d909      	bls.n	8000b7a <__udivmoddi4+0xbe>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80eb 	beq.w	8000d42 <__udivmoddi4+0x286>
 8000b6c:	2700      	movs	r7, #0
 8000b6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b72:	4638      	mov	r0, r7
 8000b74:	4639      	mov	r1, r7
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	fab3 f783 	clz	r7, r3
 8000b7e:	2f00      	cmp	r7, #0
 8000b80:	d147      	bne.n	8000c12 <__udivmoddi4+0x156>
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xd0>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 80fa 	bhi.w	8000d80 <__udivmoddi4+0x2c4>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4698      	mov	r8, r3
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d0e0      	beq.n	8000b5c <__udivmoddi4+0xa0>
 8000b9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b9e:	e7dd      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ba0:	b902      	cbnz	r2, 8000ba4 <__udivmoddi4+0xe8>
 8000ba2:	deff      	udf	#255	; 0xff
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	f040 808f 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bae:	1b49      	subs	r1, r1, r5
 8000bb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bb4:	fa1f f885 	uxth.w	r8, r5
 8000bb8:	2701      	movs	r7, #1
 8000bba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bbe:	0c23      	lsrs	r3, r4, #16
 8000bc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bd0:	18eb      	adds	r3, r5, r3
 8000bd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4299      	cmp	r1, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2bc>
 8000bde:	4684      	mov	ip, r0
 8000be0:	1a59      	subs	r1, r3, r1
 8000be2:	b2a3      	uxth	r3, r4
 8000be4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bf0:	fb08 f800 	mul.w	r8, r8, r0
 8000bf4:	45a0      	cmp	r8, r4
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x14c>
 8000bf8:	192c      	adds	r4, r5, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x14a>
 8000c00:	45a0      	cmp	r8, r4
 8000c02:	f200 80b6 	bhi.w	8000d72 <__udivmoddi4+0x2b6>
 8000c06:	4618      	mov	r0, r3
 8000c08:	eba4 0408 	sub.w	r4, r4, r8
 8000c0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c10:	e79f      	b.n	8000b52 <__udivmoddi4+0x96>
 8000c12:	f1c7 0c20 	rsb	ip, r7, #32
 8000c16:	40bb      	lsls	r3, r7
 8000c18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c20:	fa01 f407 	lsl.w	r4, r1, r7
 8000c24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c30:	4325      	orrs	r5, r4
 8000c32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c36:	0c2c      	lsrs	r4, r5, #16
 8000c38:	fb08 3319 	mls	r3, r8, r9, r3
 8000c3c:	fa1f fa8e 	uxth.w	sl, lr
 8000c40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c44:	fb09 f40a 	mul.w	r4, r9, sl
 8000c48:	429c      	cmp	r4, r3
 8000c4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1e 0303 	adds.w	r3, lr, r3
 8000c58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c5c:	f080 8087 	bcs.w	8000d6e <__udivmoddi4+0x2b2>
 8000c60:	429c      	cmp	r4, r3
 8000c62:	f240 8084 	bls.w	8000d6e <__udivmoddi4+0x2b2>
 8000c66:	f1a9 0902 	sub.w	r9, r9, #2
 8000c6a:	4473      	add	r3, lr
 8000c6c:	1b1b      	subs	r3, r3, r4
 8000c6e:	b2ad      	uxth	r5, r5
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c80:	45a2      	cmp	sl, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1e 0404 	adds.w	r4, lr, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	d26b      	bcs.n	8000d66 <__udivmoddi4+0x2aa>
 8000c8e:	45a2      	cmp	sl, r4
 8000c90:	d969      	bls.n	8000d66 <__udivmoddi4+0x2aa>
 8000c92:	3802      	subs	r0, #2
 8000c94:	4474      	add	r4, lr
 8000c96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9e:	eba4 040a 	sub.w	r4, r4, sl
 8000ca2:	454c      	cmp	r4, r9
 8000ca4:	46c2      	mov	sl, r8
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	d354      	bcc.n	8000d54 <__udivmoddi4+0x298>
 8000caa:	d051      	beq.n	8000d50 <__udivmoddi4+0x294>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d069      	beq.n	8000d84 <__udivmoddi4+0x2c8>
 8000cb0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cb4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cb8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cbc:	40fd      	lsrs	r5, r7
 8000cbe:	40fc      	lsrs	r4, r7
 8000cc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e747      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cd4:	4095      	lsls	r5, r2
 8000cd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cda:	fa21 f303 	lsr.w	r3, r1, r3
 8000cde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce2:	4338      	orrs	r0, r7
 8000ce4:	0c01      	lsrs	r1, r0, #16
 8000ce6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cea:	fa1f f885 	uxth.w	r8, r5
 8000cee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb07 f308 	mul.w	r3, r7, r8
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x256>
 8000d02:	1869      	adds	r1, r5, r1
 8000d04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d08:	d22f      	bcs.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d92d      	bls.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0e:	3f02      	subs	r7, #2
 8000d10:	4429      	add	r1, r5
 8000d12:	1acb      	subs	r3, r1, r3
 8000d14:	b281      	uxth	r1, r0
 8000d16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d22:	fb00 f308 	mul.w	r3, r0, r8
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d907      	bls.n	8000d3a <__udivmoddi4+0x27e>
 8000d2a:	1869      	adds	r1, r5, r1
 8000d2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d30:	d217      	bcs.n	8000d62 <__udivmoddi4+0x2a6>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d915      	bls.n	8000d62 <__udivmoddi4+0x2a6>
 8000d36:	3802      	subs	r0, #2
 8000d38:	4429      	add	r1, r5
 8000d3a:	1ac9      	subs	r1, r1, r3
 8000d3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d40:	e73b      	b.n	8000bba <__udivmoddi4+0xfe>
 8000d42:	4637      	mov	r7, r6
 8000d44:	4630      	mov	r0, r6
 8000d46:	e709      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000d48:	4607      	mov	r7, r0
 8000d4a:	e6e7      	b.n	8000b1c <__udivmoddi4+0x60>
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	e6fb      	b.n	8000b48 <__udivmoddi4+0x8c>
 8000d50:	4541      	cmp	r1, r8
 8000d52:	d2ab      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d58:	eb69 020e 	sbc.w	r2, r9, lr
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	4613      	mov	r3, r2
 8000d60:	e7a4      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d62:	4660      	mov	r0, ip
 8000d64:	e7e9      	b.n	8000d3a <__udivmoddi4+0x27e>
 8000d66:	4618      	mov	r0, r3
 8000d68:	e795      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6a:	4667      	mov	r7, ip
 8000d6c:	e7d1      	b.n	8000d12 <__udivmoddi4+0x256>
 8000d6e:	4681      	mov	r9, r0
 8000d70:	e77c      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d72:	3802      	subs	r0, #2
 8000d74:	442c      	add	r4, r5
 8000d76:	e747      	b.n	8000c08 <__udivmoddi4+0x14c>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	442b      	add	r3, r5
 8000d7e:	e72f      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d80:	4638      	mov	r0, r7
 8000d82:	e708      	b.n	8000b96 <__udivmoddi4+0xda>
 8000d84:	4637      	mov	r7, r6
 8000d86:	e6e9      	b.n	8000b5c <__udivmoddi4+0xa0>

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d94:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d9a:	f023 0207 	bic.w	r2, r3, #7
 8000d9e:	4905      	ldr	r1, [pc, #20]	; (8000db4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	58000400 	.word	0x58000400

08000db8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <LL_EXTI_EnableIT_32_63+0x24>)
 8000dc2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000dc6:	4905      	ldr	r1, [pc, #20]	; (8000ddc <LL_EXTI_EnableIT_32_63+0x24>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	58000800 	.word	0x58000800

08000de0 <LL_C2_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8000dea:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8000dee:	4905      	ldr	r1, [pc, #20]	; (8000e04 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	58000800 	.word	0x58000800

08000e08 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	608b      	str	r3, [r1, #8]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000e34:	f000 f838 	bl	8000ea8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000e38:	490c      	ldr	r1, [pc, #48]	; (8000e6c <APPE_Init+0x3c>)
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 fe34 	bl	8001aa8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  /* initialize debugger module if supported and debug trace if activated */
  Init_Debug();
 8000e40:	f000 f822 	bl	8000e88 <Init_Debug>

  //TODO: remove displayConcurrentMode() call since just used for debugging
  /* Display Dynamic concurrent mode (BLE and Thread)  */
  displayConcurrentMode();
 8000e44:	f000 f814 	bl	8000e70 <displayConcurrentMode>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000e48:	2101      	movs	r1, #1
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f010 fd5a 	bl	8011904 <UTIL_LPM_SetOffMode>

  BSP_LED_Init(LED_BLUE);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f001 fc1f 	bl	8002694 <BSP_LED_Init>
   BSP_LED_Init(LED_GREEN);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f001 fc1c 	bl	8002694 <BSP_LED_Init>
   BSP_LED_Init(LED_RED);
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	f001 fc19 	bl	8002694 <BSP_LED_Init>

//   BSP_LED_On(LED_GREEN);

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000e62:	f000 f82f 	bl	8000ec4 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000e66:	bf00      	nop
}
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20006cf0 	.word	0x20006cf0

08000e70 <displayConcurrentMode>:
/* USER CODE BEGIN FD */
//TODO: remove function
static void displayConcurrentMode()
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
    APP_DBG("Dynamic Concurrent Mode BLE/OpenThread starting...");
 8000e74:	4a03      	ldr	r2, [pc, #12]	; (8000e84 <displayConcurrentMode+0x14>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f001 fead 	bl	8002bd8 <logApplication>
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	08012f0c 	.word	0x08012f0c

08000e88 <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug( void )
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000e8c:	f002 fa3e 	bl	800330c <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000e90:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000e94:	f7ff ff90 	bl	8000db8 <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000e98:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000e9c:	f7ff ffa0 	bl	8000de0 <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000ea0:	f009 fd4e 	bl	800a940 <DbgTraceInit>
#endif

  return;
 8000ea4:	bf00      	nop
}
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000eac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000eb0:	f7ff ffaa 	bl	8000e08 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000eb4:	f010 fd14 	bl	80118e0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000eb8:	2004      	movs	r0, #4
 8000eba:	f7ff ff67 	bl	8000d8c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000ebe:	bf00      	nop
}
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000eca:	f008 feb1 	bl	8009c30 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f00a fcca 	bl	800b868 <osMutexNew>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <appe_Tl_Init+0x70>)
 8000ed8:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f00a fe0a 	bl	800baf8 <osSemaphoreNew>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <appe_Tl_Init+0x74>)
 8000ee8:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8000eea:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <appe_Tl_Init+0x78>)
 8000eec:	2100      	movs	r1, #0
 8000eee:	4814      	ldr	r0, [pc, #80]	; (8000f40 <appe_Tl_Init+0x7c>)
 8000ef0:	f00a faf0 	bl	800b4d4 <osThreadNew>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <appe_Tl_Init+0x80>)
 8000ef8:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <appe_Tl_Init+0x84>)
 8000efc:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <appe_Tl_Init+0x88>)
 8000f00:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000f02:	463b      	mov	r3, r7
 8000f04:	4619      	mov	r1, r3
 8000f06:	4812      	ldr	r0, [pc, #72]	; (8000f50 <appe_Tl_Init+0x8c>)
 8000f08:	f008 fd58 	bl	80099bc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <appe_Tl_Init+0x90>)
 8000f0e:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <appe_Tl_Init+0x94>)
 8000f12:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <appe_Tl_Init+0x98>)
 8000f16:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000f18:	f240 533c 	movw	r3, #1340	; 0x53c
 8000f1c:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	4618      	mov	r0, r3
 8000f24:	f009 f83e 	bl	8009fa4 <TL_MM_Init>

  TL_Enable();
 8000f28:	f008 fe7c 	bl	8009c24 <TL_Enable>

  return;
 8000f2c:	bf00      	nop
}
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20006cd0 	.word	0x20006cd0
 8000f38:	20006cd8 	.word	0x20006cd8
 8000f3c:	08013f7c 	.word	0x08013f7c
 8000f40:	08001085 	.word	0x08001085
 8000f44:	20006cd4 	.word	0x20006cd4
 8000f48:	20030728 	.word	0x20030728
 8000f4c:	08000f61 	.word	0x08000f61
 8000f50:	08000fa1 	.word	0x08000fa1
 8000f54:	20030940 	.word	0x20030940
 8000f58:	20030834 	.word	0x20030834
 8000f5c:	200301ec 	.word	0x200301ec

08000f60 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <APPE_SysStatusNot+0x16>
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d008      	beq.n	8000f86 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8000f74:	e00d      	b.n	8000f92 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <APPE_SysStatusNot+0x3c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f00a fd0c 	bl	800b99c <osMutexAcquire>
      break;
 8000f84:	e005      	b.n	8000f92 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <APPE_SysStatusNot+0x3c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f00a fd64 	bl	800ba58 <osMutexRelease>
      break;
 8000f90:	bf00      	nop
  }
  return;
 8000f92:	bf00      	nop
}
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20006cd0 	.word	0x20006cd0

08000fa0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	330b      	adds	r3, #11
 8000fae:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8000fba:	d004      	beq.n	8000fc6 <APPE_SysUserEvtRx+0x26>
 8000fbc:	f249 2201 	movw	r2, #37377	; 0x9201
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d003      	beq.n	8000fcc <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8000fc4:	e008      	b.n	8000fd8 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8000fc6:	f000 f833 	bl	8001030 <APPE_SysEvtReadyProcessing>
         break;
 8000fca:	e005      	b.n	8000fd8 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	789b      	ldrb	r3, [r3, #2]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f805 	bl	8000fe0 <APPE_SysEvtError>
         break;
 8000fd6:	bf00      	nop
  }
  return;
 8000fd8:	bf00      	nop
}
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b7d      	cmp	r3, #125	; 0x7d
 8000fee:	d002      	beq.n	8000ff6 <APPE_SysEvtError+0x16>
 8000ff0:	2b7e      	cmp	r3, #126	; 0x7e
 8000ff2:	d006      	beq.n	8001002 <APPE_SysEvtError+0x22>
 8000ff4:	e00b      	b.n	800100e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <APPE_SysEvtError+0x44>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f001 fdec 	bl	8002bd8 <logApplication>
       break;
 8001000:	e00c      	b.n	800101c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001002:	4a09      	ldr	r2, [pc, #36]	; (8001028 <APPE_SysEvtError+0x48>)
 8001004:	2101      	movs	r1, #1
 8001006:	2000      	movs	r0, #0
 8001008:	f001 fde6 	bl	8002bd8 <logApplication>
       break;
 800100c:	e006      	b.n	800101c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	4a06      	ldr	r2, [pc, #24]	; (800102c <APPE_SysEvtError+0x4c>)
 8001012:	2101      	movs	r1, #1
 8001014:	2000      	movs	r0, #0
 8001016:	f001 fddf 	bl	8002bd8 <logApplication>
       break;
 800101a:	bf00      	nop
  }
  return;
 800101c:	bf00      	nop
}
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	08012f40 	.word	0x08012f40
 8001028:	08012f64 	.word	0x08012f64
 800102c:	08012f84 	.word	0x08012f84

08001030 <APPE_SysEvtReadyProcessing>:
//  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
//  return;
//}

static void APPE_SysEvtReadyProcessing( void )
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001034:	f009 f82a 	bl	800a08c <TL_TRACES_Init>
   * APP_THREAD_Init_Dyn_1() : Thread Stack Init until it's ready to be configured (default channel, PID, etc...)
   * APP_BLE_Init_Dyn_2()    : Start ADV
   * APP_THREAD_Init_Dyn_2() : Thread Stack configuration (default channel, PID, etc...) to be able to start scanning
   *                           or joining a Thread Network
   */
  APP_DBG("1- Initialisation of BLE Stack...");
 8001038:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <APPE_SysEvtReadyProcessing+0x44>)
 800103a:	2101      	movs	r1, #1
 800103c:	2000      	movs	r0, #0
 800103e:	f001 fdcb 	bl	8002bd8 <logApplication>
  APP_BLE_Init_Dyn_1();
 8001042:	f00e f9f7 	bl	800f434 <APP_BLE_Init_Dyn_1>
  APP_DBG("2- Initialisation of OpenThread Stack. FW info :");
 8001046:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <APPE_SysEvtReadyProcessing+0x48>)
 8001048:	2101      	movs	r1, #1
 800104a:	2000      	movs	r0, #0
 800104c:	f001 fdc4 	bl	8002bd8 <logApplication>
  APP_THREAD_Init_Dyn_1();
 8001050:	f00f f914 	bl	801027c <APP_THREAD_Init_Dyn_1>

  APP_DBG("3- Start BLE ADV...");
 8001054:	4a09      	ldr	r2, [pc, #36]	; (800107c <APPE_SysEvtReadyProcessing+0x4c>)
 8001056:	2101      	movs	r1, #1
 8001058:	2000      	movs	r0, #0
 800105a:	f001 fdbd 	bl	8002bd8 <logApplication>
  APP_BLE_Init_Dyn_2();
 800105e:	f00e fa5b 	bl	800f518 <APP_BLE_Init_Dyn_2>
  APP_DBG("4- Configure OpenThread (Channel, PANID, IPv6 stack, ...) and Start it...");
 8001062:	4a07      	ldr	r2, [pc, #28]	; (8001080 <APPE_SysEvtReadyProcessing+0x50>)
 8001064:	2101      	movs	r1, #1
 8001066:	2000      	movs	r0, #0
 8001068:	f001 fdb6 	bl	8002bd8 <logApplication>
  APP_THREAD_Init_Dyn_2();
 800106c:	f00f f92e 	bl	80102cc <APP_THREAD_Init_Dyn_2>
  /* Thread stack is initialized, low power mode can be enabled */
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
  UTIL_LPM_SetStopMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
#endif

  return;
 8001070:	bf00      	nop
}
 8001072:	bd80      	pop	{r7, pc}
 8001074:	08012fa4 	.word	0x08012fa4
 8001078:	08012fc8 	.word	0x08012fc8
 800107c:	08012ffc 	.word	0x08012ffc
 8001080:	08013010 	.word	0x08013010

08001084 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	2100      	movs	r1, #0
 8001092:	2001      	movs	r0, #1
 8001094:	f00a fb26 	bl	800b6e4 <osThreadFlagsWait>
     shci_user_evt_proc();
 8001098:	f008 fcac 	bl	80099f4 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 800109c:	e7f6      	b.n	800108c <ShciUserEvtProcess+0x8>
	...

080010a0 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <shci_notify_asynch_evt+0x1c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2101      	movs	r1, #1
 80010ae:	4618      	mov	r0, r3
 80010b0:	f00a fab6 	bl	800b620 <osThreadFlagsSet>
  return;
 80010b4:	bf00      	nop
}
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20006cd4 	.word	0x20006cd4

080010c0 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <shci_cmd_resp_release+0x1c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f00a fe17 	bl	800bd00 <osSemaphoreRelease>
  return;
 80010d2:	bf00      	nop
}
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20006cd8 	.word	0x20006cd8

080010e0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <shci_cmd_resp_wait+0x20>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	4618      	mov	r0, r3
 80010f2:	f00a fd9f 	bl	800bc34 <osSemaphoreAcquire>
  return;
 80010f6:	bf00      	nop
}
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20006cd8 	.word	0x20006cd8

08001104 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
#if(CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	330b      	adds	r3, #11
 8001110:	1c99      	adds	r1, r3, #2
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7a9b      	ldrb	r3, [r3, #10]
 8001116:	3b02      	subs	r3, #2
 8001118:	461a      	mov	r2, r3
 800111a:	2001      	movs	r0, #1
 800111c:	f009 fc36 	bl	800a98c <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f008 ff7b 	bl	800a01c <TL_MM_EvtDone>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
#ifdef CFG_DEBUG_TRACE_UART
  MX_LPUART1_UART_Init();
 8001132:	f001 ff03 	bl	8002f3c <MX_LPUART1_UART_Init>
  return;
 8001136:	bf00      	nop
#endif
}
 8001138:	bd80      	pop	{r7, pc}

0800113a <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	460b      	mov	r3, r1
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001148:	897a      	ldrh	r2, [r7, #10]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68f9      	ldr	r1, [r7, #12]
 800114e:	2002      	movs	r0, #2
 8001150:	f000 ff98 	bl	8002084 <HW_UART_Transmit_DMA>

  return;
 8001154:	bf00      	nop
}
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001160:	4a05      	ldr	r2, [pc, #20]	; (8001178 <MX_FREERTOS_Init+0x1c>)
 8001162:	2100      	movs	r1, #0
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_FREERTOS_Init+0x20>)
 8001166:	f00a f9b5 	bl	800b4d4 <osThreadNew>
 800116a:	4602      	mov	r2, r0
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <MX_FREERTOS_Init+0x24>)
 800116e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  APPE_Init();
 8001170:	f7ff fe5e 	bl	8000e30 <APPE_Init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	08013fa0 	.word	0x08013fa0
 800117c:	08001185 	.word	0x08001185
 8001180:	20006cdc 	.word	0x20006cdc

08001184 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800118c:	2001      	movs	r0, #1
 800118e:	f00a fb3d 	bl	800b80c <osDelay>
 8001192:	e7fb      	b.n	800118c <StartDefaultTask+0x8>

08001194 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800119c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4013      	ands	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011b8:	68fb      	ldr	r3, [r7, #12]
}
 80011ba:	bf00      	nop
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011ca:	2004      	movs	r0, #4
 80011cc:	f7ff ffe2 	bl	8001194 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d0:	2001      	movs	r0, #1
 80011d2:	f7ff ffdf 	bl	8001194 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011d6:	2002      	movs	r0, #2
 80011d8:	f7ff ffdc 	bl	8001194 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2105      	movs	r1, #5
 80011e0:	200e      	movs	r0, #14
 80011e2:	f002 f9c4 	bl	800356e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80011e6:	200e      	movs	r0, #14
 80011e8:	f002 f9db 	bl	80035a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2105      	movs	r1, #5
 80011f0:	203a      	movs	r0, #58	; 0x3a
 80011f2:	f002 f9bc 	bl	800356e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80011f6:	203a      	movs	r0, #58	; 0x3a
 80011f8:	f002 f9d3 	bl	80035a2 <HAL_NVIC_EnableIRQ>

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800121c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001220:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001222:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4313      	orrs	r3, r2
 800122a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800122c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001230:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001238:	68fb      	ldr	r3, [r7, #12]
}
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124a:	2004      	movs	r0, #4
 800124c:	f7ff ffe2 	bl	8001214 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001250:	2001      	movs	r0, #1
 8001252:	f7ff ffdf 	bl	8001214 <LL_AHB2_GRP1_EnableClock>

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <LL_EXTI_EnableIT_0_31>:
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <LL_EXTI_EnableIT_0_31+0x24>)
 8001266:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800126a:	4905      	ldr	r1, [pc, #20]	; (8001280 <LL_EXTI_EnableIT_0_31+0x24>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4313      	orrs	r3, r2
 8001270:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	58000800 	.word	0x58000800

08001284 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4904      	ldr	r1, [pc, #16]	; (80012a4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4313      	orrs	r3, r2
 8001296:	600b      	str	r3, [r1, #0]

}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	58000800 	.word	0x58000800

080012a8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <ReadRtcSsrValue+0x3c>)
 80012b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <ReadRtcSsrValue+0x3c>)
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80012be:	e005      	b.n	80012cc <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <ReadRtcSsrValue+0x3c>)
 80012c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d1f5      	bne.n	80012c0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80012d4:	683b      	ldr	r3, [r7, #0]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40002800 	.word	0x40002800

080012e8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	4613      	mov	r3, r2
 80012f6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80012f8:	79ba      	ldrb	r2, [r7, #6]
 80012fa:	491d      	ldr	r1, [pc, #116]	; (8001370 <LinkTimerAfter+0x88>)
 80012fc:	4613      	mov	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	440b      	add	r3, r1
 8001306:	3315      	adds	r3, #21
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	2b06      	cmp	r3, #6
 8001310:	d009      	beq.n	8001326 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001312:	7bfa      	ldrb	r2, [r7, #15]
 8001314:	4916      	ldr	r1, [pc, #88]	; (8001370 <LinkTimerAfter+0x88>)
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	3314      	adds	r3, #20
 8001322:	79fa      	ldrb	r2, [r7, #7]
 8001324:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001326:	79fa      	ldrb	r2, [r7, #7]
 8001328:	4911      	ldr	r1, [pc, #68]	; (8001370 <LinkTimerAfter+0x88>)
 800132a:	4613      	mov	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	440b      	add	r3, r1
 8001334:	3315      	adds	r3, #21
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800133a:	79fa      	ldrb	r2, [r7, #7]
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <LinkTimerAfter+0x88>)
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	440b      	add	r3, r1
 8001348:	3314      	adds	r3, #20
 800134a:	79ba      	ldrb	r2, [r7, #6]
 800134c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800134e:	79ba      	ldrb	r2, [r7, #6]
 8001350:	4907      	ldr	r1, [pc, #28]	; (8001370 <LinkTimerAfter+0x88>)
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	440b      	add	r3, r1
 800135c:	3315      	adds	r3, #21
 800135e:	79fa      	ldrb	r2, [r7, #7]
 8001360:	701a      	strb	r2, [r3, #0]

  return;
 8001362:	bf00      	nop
}
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	2000008c 	.word	0x2000008c

08001374 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	460a      	mov	r2, r1
 800137e:	71fb      	strb	r3, [r7, #7]
 8001380:	4613      	mov	r3, r2
 8001382:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <LinkTimerBefore+0xb8>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	79ba      	ldrb	r2, [r7, #6]
 800138c:	429a      	cmp	r2, r3
 800138e:	d032      	beq.n	80013f6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001390:	79ba      	ldrb	r2, [r7, #6]
 8001392:	4927      	ldr	r1, [pc, #156]	; (8001430 <LinkTimerBefore+0xbc>)
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	440b      	add	r3, r1
 800139e:	3314      	adds	r3, #20
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	4922      	ldr	r1, [pc, #136]	; (8001430 <LinkTimerBefore+0xbc>)
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	440b      	add	r3, r1
 80013b2:	3315      	adds	r3, #21
 80013b4:	79fa      	ldrb	r2, [r7, #7]
 80013b6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80013b8:	79fa      	ldrb	r2, [r7, #7]
 80013ba:	491d      	ldr	r1, [pc, #116]	; (8001430 <LinkTimerBefore+0xbc>)
 80013bc:	4613      	mov	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4413      	add	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	440b      	add	r3, r1
 80013c6:	3315      	adds	r3, #21
 80013c8:	79ba      	ldrb	r2, [r7, #6]
 80013ca:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80013cc:	79fa      	ldrb	r2, [r7, #7]
 80013ce:	4918      	ldr	r1, [pc, #96]	; (8001430 <LinkTimerBefore+0xbc>)
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	440b      	add	r3, r1
 80013da:	3314      	adds	r3, #20
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80013e0:	79ba      	ldrb	r2, [r7, #6]
 80013e2:	4913      	ldr	r1, [pc, #76]	; (8001430 <LinkTimerBefore+0xbc>)
 80013e4:	4613      	mov	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4413      	add	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	440b      	add	r3, r1
 80013ee:	3314      	adds	r3, #20
 80013f0:	79fa      	ldrb	r2, [r7, #7]
 80013f2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80013f4:	e014      	b.n	8001420 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80013f6:	79fa      	ldrb	r2, [r7, #7]
 80013f8:	490d      	ldr	r1, [pc, #52]	; (8001430 <LinkTimerBefore+0xbc>)
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	440b      	add	r3, r1
 8001404:	3315      	adds	r3, #21
 8001406:	79ba      	ldrb	r2, [r7, #6]
 8001408:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800140a:	79ba      	ldrb	r2, [r7, #6]
 800140c:	4908      	ldr	r1, [pc, #32]	; (8001430 <LinkTimerBefore+0xbc>)
 800140e:	4613      	mov	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	440b      	add	r3, r1
 8001418:	3314      	adds	r3, #20
 800141a:	79fa      	ldrb	r2, [r7, #7]
 800141c:	701a      	strb	r2, [r3, #0]
  return;
 800141e:	bf00      	nop
}
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	2000011c 	.word	0x2000011c
 8001430:	2000008c 	.word	0x2000008c

08001434 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800143e:	4b4e      	ldr	r3, [pc, #312]	; (8001578 <linkTimer+0x144>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b06      	cmp	r3, #6
 8001446:	d118      	bne.n	800147a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001448:	4b4b      	ldr	r3, [pc, #300]	; (8001578 <linkTimer+0x144>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4b4b      	ldr	r3, [pc, #300]	; (800157c <linkTimer+0x148>)
 8001450:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001452:	4a49      	ldr	r2, [pc, #292]	; (8001578 <linkTimer+0x144>)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001458:	79fa      	ldrb	r2, [r7, #7]
 800145a:	4949      	ldr	r1, [pc, #292]	; (8001580 <linkTimer+0x14c>)
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	440b      	add	r3, r1
 8001466:	3315      	adds	r3, #21
 8001468:	2206      	movs	r2, #6
 800146a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800146c:	4b45      	ldr	r3, [pc, #276]	; (8001584 <linkTimer+0x150>)
 800146e:	f04f 32ff 	mov.w	r2, #4294967295
 8001472:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	81fb      	strh	r3, [r7, #14]
 8001478:	e078      	b.n	800156c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800147a:	f000 f909 	bl	8001690 <ReturnTimeElapsed>
 800147e:	4603      	mov	r3, r0
 8001480:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	493e      	ldr	r1, [pc, #248]	; (8001580 <linkTimer+0x14c>)
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	3308      	adds	r3, #8
 8001492:	6819      	ldr	r1, [r3, #0]
 8001494:	89fb      	ldrh	r3, [r7, #14]
 8001496:	79fa      	ldrb	r2, [r7, #7]
 8001498:	4419      	add	r1, r3
 800149a:	4839      	ldr	r0, [pc, #228]	; (8001580 <linkTimer+0x14c>)
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4403      	add	r3, r0
 80014a6:	3308      	adds	r3, #8
 80014a8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80014aa:	79fa      	ldrb	r2, [r7, #7]
 80014ac:	4934      	ldr	r1, [pc, #208]	; (8001580 <linkTimer+0x14c>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	440b      	add	r3, r1
 80014b8:	3308      	adds	r3, #8
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80014be:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <linkTimer+0x144>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	4619      	mov	r1, r3
 80014c6:	4a2e      	ldr	r2, [pc, #184]	; (8001580 <linkTimer+0x14c>)
 80014c8:	460b      	mov	r3, r1
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	440b      	add	r3, r1
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4413      	add	r3, r2
 80014d2:	3308      	adds	r3, #8
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d337      	bcc.n	800154c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80014dc:	4b26      	ldr	r3, [pc, #152]	; (8001578 <linkTimer+0x144>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80014e2:	7b7a      	ldrb	r2, [r7, #13]
 80014e4:	4926      	ldr	r1, [pc, #152]	; (8001580 <linkTimer+0x14c>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	440b      	add	r3, r1
 80014f0:	3315      	adds	r3, #21
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80014f6:	e013      	b.n	8001520 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80014f8:	7b7a      	ldrb	r2, [r7, #13]
 80014fa:	4921      	ldr	r1, [pc, #132]	; (8001580 <linkTimer+0x14c>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	440b      	add	r3, r1
 8001506:	3315      	adds	r3, #21
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800150c:	7b7a      	ldrb	r2, [r7, #13]
 800150e:	491c      	ldr	r1, [pc, #112]	; (8001580 <linkTimer+0x14c>)
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	440b      	add	r3, r1
 800151a:	3315      	adds	r3, #21
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001520:	7b3b      	ldrb	r3, [r7, #12]
 8001522:	2b06      	cmp	r3, #6
 8001524:	d00b      	beq.n	800153e <linkTimer+0x10a>
 8001526:	7b3a      	ldrb	r2, [r7, #12]
 8001528:	4915      	ldr	r1, [pc, #84]	; (8001580 <linkTimer+0x14c>)
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	440b      	add	r3, r1
 8001534:	3308      	adds	r3, #8
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	429a      	cmp	r2, r3
 800153c:	d2dc      	bcs.n	80014f8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800153e:	7b7a      	ldrb	r2, [r7, #13]
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fecf 	bl	80012e8 <LinkTimerAfter>
 800154a:	e00f      	b.n	800156c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <linkTimer+0x144>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ff0c 	bl	8001374 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <linkTimer+0x144>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <linkTimer+0x148>)
 8001564:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <linkTimer+0x144>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800156c:	89fb      	ldrh	r3, [r7, #14]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	2000011c 	.word	0x2000011c
 800157c:	2000011d 	.word	0x2000011d
 8001580:	2000008c 	.word	0x2000008c
 8001584:	20000120 	.word	0x20000120

08001588 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	460a      	mov	r2, r1
 8001592:	71fb      	strb	r3, [r7, #7]
 8001594:	4613      	mov	r3, r2
 8001596:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001598:	4b39      	ldr	r3, [pc, #228]	; (8001680 <UnlinkTimer+0xf8>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	79fa      	ldrb	r2, [r7, #7]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d111      	bne.n	80015c8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <UnlinkTimer+0xf8>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b36      	ldr	r3, [pc, #216]	; (8001684 <UnlinkTimer+0xfc>)
 80015ac:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80015ae:	79fa      	ldrb	r2, [r7, #7]
 80015b0:	4935      	ldr	r1, [pc, #212]	; (8001688 <UnlinkTimer+0x100>)
 80015b2:	4613      	mov	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	440b      	add	r3, r1
 80015bc:	3315      	adds	r3, #21
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <UnlinkTimer+0xf8>)
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	e03e      	b.n	8001646 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80015c8:	79fa      	ldrb	r2, [r7, #7]
 80015ca:	492f      	ldr	r1, [pc, #188]	; (8001688 <UnlinkTimer+0x100>)
 80015cc:	4613      	mov	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	3314      	adds	r3, #20
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80015dc:	79fa      	ldrb	r2, [r7, #7]
 80015de:	492a      	ldr	r1, [pc, #168]	; (8001688 <UnlinkTimer+0x100>)
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	440b      	add	r3, r1
 80015ea:	3315      	adds	r3, #21
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80015f0:	79f9      	ldrb	r1, [r7, #7]
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	4824      	ldr	r0, [pc, #144]	; (8001688 <UnlinkTimer+0x100>)
 80015f6:	460b      	mov	r3, r1
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	440b      	add	r3, r1
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4403      	add	r3, r0
 8001600:	3315      	adds	r3, #21
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b2d8      	uxtb	r0, r3
 8001606:	4920      	ldr	r1, [pc, #128]	; (8001688 <UnlinkTimer+0x100>)
 8001608:	4613      	mov	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	440b      	add	r3, r1
 8001612:	3315      	adds	r3, #21
 8001614:	4602      	mov	r2, r0
 8001616:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001618:	7bbb      	ldrb	r3, [r7, #14]
 800161a:	2b06      	cmp	r3, #6
 800161c:	d013      	beq.n	8001646 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800161e:	79f9      	ldrb	r1, [r7, #7]
 8001620:	7bba      	ldrb	r2, [r7, #14]
 8001622:	4819      	ldr	r0, [pc, #100]	; (8001688 <UnlinkTimer+0x100>)
 8001624:	460b      	mov	r3, r1
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	440b      	add	r3, r1
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4403      	add	r3, r0
 800162e:	3314      	adds	r3, #20
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b2d8      	uxtb	r0, r3
 8001634:	4914      	ldr	r1, [pc, #80]	; (8001688 <UnlinkTimer+0x100>)
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	440b      	add	r3, r1
 8001640:	3314      	adds	r3, #20
 8001642:	4602      	mov	r2, r0
 8001644:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001646:	79fa      	ldrb	r2, [r7, #7]
 8001648:	490f      	ldr	r1, [pc, #60]	; (8001688 <UnlinkTimer+0x100>)
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	440b      	add	r3, r1
 8001654:	330c      	adds	r3, #12
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <UnlinkTimer+0xf8>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b06      	cmp	r3, #6
 8001662:	d107      	bne.n	8001674 <UnlinkTimer+0xec>
 8001664:	79bb      	ldrb	r3, [r7, #6]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d104      	bne.n	8001674 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <UnlinkTimer+0x104>)
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	601a      	str	r2, [r3, #0]
  }

  return;
 8001672:	bf00      	nop
 8001674:	bf00      	nop
}
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	2000011c 	.word	0x2000011c
 8001684:	2000011d 	.word	0x2000011d
 8001688:	2000008c 	.word	0x2000008c
 800168c:	20000120 	.word	0x20000120

08001690 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <ReturnTimeElapsed+0x70>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169e:	d026      	beq.n	80016ee <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80016a0:	f7ff fe02 	bl	80012a8 <ReadRtcSsrValue>
 80016a4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <ReturnTimeElapsed+0x70>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d805      	bhi.n	80016bc <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <ReturnTimeElapsed+0x70>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	e00a      	b.n	80016d2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <ReturnTimeElapsed+0x74>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80016c8:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <ReturnTimeElapsed+0x70>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <ReturnTimeElapsed+0x78>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <ReturnTimeElapsed+0x7c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	40d3      	lsrs	r3, r2
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	e001      	b.n	80016f2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	b29b      	uxth	r3, r3
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000120 	.word	0x20000120
 8001704:	20000252 	.word	0x20000252
 8001708:	20000251 	.word	0x20000251
 800170c:	20000250 	.word	0x20000250

08001710 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d108      	bne.n	8001732 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001720:	f7ff fdc2 	bl	80012a8 <ReadRtcSsrValue>
 8001724:	4602      	mov	r2, r0
 8001726:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <RestartWakeupCounter+0xa8>)
 8001728:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800172a:	2003      	movs	r0, #3
 800172c:	f001 ff59 	bl	80035e2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001730:	e03e      	b.n	80017b0 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d803      	bhi.n	8001740 <RestartWakeupCounter+0x30>
 8001738:	4b20      	ldr	r3, [pc, #128]	; (80017bc <RestartWakeupCounter+0xac>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d002      	beq.n	8001746 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	3b01      	subs	r3, #1
 8001744:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001746:	bf00      	nop
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <RestartWakeupCounter+0xb0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f7      	beq.n	8001748 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <RestartWakeupCounter+0xb0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <RestartWakeupCounter+0xb0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800176c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <RestartWakeupCounter+0xb4>)
 8001770:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001774:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001776:	2003      	movs	r0, #3
 8001778:	f001 ff41 	bl	80035fe <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <RestartWakeupCounter+0xb8>)
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	0c1b      	lsrs	r3, r3, #16
 8001782:	041b      	lsls	r3, r3, #16
 8001784:	88fa      	ldrh	r2, [r7, #6]
 8001786:	4910      	ldr	r1, [pc, #64]	; (80017c8 <RestartWakeupCounter+0xb8>)
 8001788:	4313      	orrs	r3, r2
 800178a:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800178c:	f7ff fd8c 	bl	80012a8 <ReadRtcSsrValue>
 8001790:	4602      	mov	r2, r0
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <RestartWakeupCounter+0xa8>)
 8001794:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <RestartWakeupCounter+0xb0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <RestartWakeupCounter+0xb0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017a8:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80017aa:	f3af 8000 	nop.w
  return ;
 80017ae:	bf00      	nop
}
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000120 	.word	0x20000120
 80017bc:	20000250 	.word	0x20000250
 80017c0:	2000024c 	.word	0x2000024c
 80017c4:	58000800 	.word	0x58000800
 80017c8:	40002800 	.word	0x40002800

080017cc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80017d2:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <RescheduleTimerList+0x124>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017de:	d108      	bne.n	80017f2 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80017e0:	bf00      	nop
 80017e2:	4b44      	ldr	r3, [pc, #272]	; (80018f4 <RescheduleTimerList+0x128>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f7      	bne.n	80017e2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80017f2:	4b40      	ldr	r3, [pc, #256]	; (80018f4 <RescheduleTimerList+0x128>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	4b3e      	ldr	r3, [pc, #248]	; (80018f4 <RescheduleTimerList+0x128>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001804:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001806:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <RescheduleTimerList+0x12c>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800180c:	7bfa      	ldrb	r2, [r7, #15]
 800180e:	493b      	ldr	r1, [pc, #236]	; (80018fc <RescheduleTimerList+0x130>)
 8001810:	4613      	mov	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	440b      	add	r3, r1
 800181a:	3308      	adds	r3, #8
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001820:	f7ff ff36 	bl	8001690 <ReturnTimeElapsed>
 8001824:	4603      	mov	r3, r0
 8001826:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	429a      	cmp	r2, r3
 800182e:	d205      	bcs.n	800183c <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001834:	4b32      	ldr	r3, [pc, #200]	; (8001900 <RescheduleTimerList+0x134>)
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
 800183a:	e04d      	b.n	80018d8 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800183c:	88fb      	ldrh	r3, [r7, #6]
 800183e:	4a31      	ldr	r2, [pc, #196]	; (8001904 <RescheduleTimerList+0x138>)
 8001840:	8812      	ldrh	r2, [r2, #0]
 8001842:	b292      	uxth	r2, r2
 8001844:	4413      	add	r3, r2
 8001846:	461a      	mov	r2, r3
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4293      	cmp	r3, r2
 800184c:	d906      	bls.n	800185c <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800184e:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <RescheduleTimerList+0x138>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001854:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <RescheduleTimerList+0x134>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e03d      	b.n	80018d8 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	b29a      	uxth	r2, r3
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001866:	4b26      	ldr	r3, [pc, #152]	; (8001900 <RescheduleTimerList+0x134>)
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800186c:	e034      	b.n	80018d8 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	4922      	ldr	r1, [pc, #136]	; (80018fc <RescheduleTimerList+0x130>)
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	440b      	add	r3, r1
 800187c:	3308      	adds	r3, #8
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	429a      	cmp	r2, r3
 8001884:	d20a      	bcs.n	800189c <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001886:	7bfa      	ldrb	r2, [r7, #15]
 8001888:	491c      	ldr	r1, [pc, #112]	; (80018fc <RescheduleTimerList+0x130>)
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	440b      	add	r3, r1
 8001894:	3308      	adds	r3, #8
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e013      	b.n	80018c4 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	4917      	ldr	r1, [pc, #92]	; (80018fc <RescheduleTimerList+0x130>)
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	3308      	adds	r3, #8
 80018ac:	6819      	ldr	r1, [r3, #0]
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	7bfa      	ldrb	r2, [r7, #15]
 80018b2:	1ac9      	subs	r1, r1, r3
 80018b4:	4811      	ldr	r0, [pc, #68]	; (80018fc <RescheduleTimerList+0x130>)
 80018b6:	4613      	mov	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4403      	add	r3, r0
 80018c0:	3308      	adds	r3, #8
 80018c2:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80018c4:	7bfa      	ldrb	r2, [r7, #15]
 80018c6:	490d      	ldr	r1, [pc, #52]	; (80018fc <RescheduleTimerList+0x130>)
 80018c8:	4613      	mov	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	440b      	add	r3, r1
 80018d2:	3315      	adds	r3, #21
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d1c7      	bne.n	800186e <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80018de:	89bb      	ldrh	r3, [r7, #12]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff15 	bl	8001710 <RestartWakeupCounter>

  return ;
 80018e6:	bf00      	nop
}
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40002800 	.word	0x40002800
 80018f4:	2000024c 	.word	0x2000024c
 80018f8:	2000011c 	.word	0x2000011c
 80018fc:	2000008c 	.word	0x2000008c
 8001900:	20000124 	.word	0x20000124
 8001904:	20000254 	.word	0x20000254

08001908 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800190e:	f3ef 8310 	mrs	r3, PRIMASK
 8001912:	617b      	str	r3, [r7, #20]
  return(result);
 8001914:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001918:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800191a:	4b5e      	ldr	r3, [pc, #376]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	22ca      	movs	r2, #202	; 0xca
 8001922:	625a      	str	r2, [r3, #36]	; 0x24
 8001924:	4b5b      	ldr	r3, [pc, #364]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2253      	movs	r2, #83	; 0x53
 800192c:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 800192e:	4b59      	ldr	r3, [pc, #356]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	4b57      	ldr	r3, [pc, #348]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001940:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001942:	4b55      	ldr	r3, [pc, #340]	; (8001a98 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800194a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800194e:	4953      	ldr	r1, [pc, #332]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	330c      	adds	r3, #12
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d170      	bne.n	8001a46 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001964:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001968:	494c      	ldr	r1, [pc, #304]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	440b      	add	r3, r1
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001978:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800197c:	4947      	ldr	r1, [pc, #284]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	440b      	add	r3, r1
 8001988:	3310      	adds	r3, #16
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800198e:	4b44      	ldr	r3, [pc, #272]	; (8001aa0 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d04e      	beq.n	8001a36 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001998:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800199c:	493f      	ldr	r1, [pc, #252]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	440b      	add	r3, r1
 80019a8:	330d      	adds	r3, #13
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d125      	bne.n	80019fe <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80019b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019b6:	2101      	movs	r1, #1
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fde5 	bl	8001588 <UnlinkTimer>
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80019c8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019cc:	4933      	ldr	r1, [pc, #204]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	440b      	add	r3, r1
 80019d8:	3304      	adds	r3, #4
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019e0:	4611      	mov	r1, r2
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 fa46 	bl	8001e74 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80019e8:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	22ca      	movs	r2, #202	; 0xca
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24
 80019f2:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2253      	movs	r2, #83	; 0x53
 80019fa:	625a      	str	r2, [r3, #36]	; 0x24
 80019fc:	e013      	b.n	8001a26 <HW_TS_RTC_Wakeup_Handler+0x11e>
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001a08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 f9a7 	bl	8001d60 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	22ca      	movs	r2, #202	; 0xca
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2253      	movs	r2, #83	; 0x53
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001a26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	69b8      	ldr	r0, [r7, #24]
 8001a30:	f000 faa6 	bl	8001f80 <HW_TS_RTC_Int_AppNot>
 8001a34:	e024      	b.n	8001a80 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8001a36:	f7ff fec9 	bl	80017cc <RescheduleTimerList>
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	f383 8810 	msr	PRIMASK, r3
 8001a44:	e01c      	b.n	8001a80 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001a46:	bf00      	nop
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f7      	beq.n	8001a48 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a58:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001a6c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001a70:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	22ff      	movs	r2, #255	; 0xff
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001a8a:	bf00      	nop
}
 8001a8c:	3728      	adds	r7, #40	; 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2000024c 	.word	0x2000024c
 8001a98:	2000011c 	.word	0x2000011c
 8001a9c:	2000008c 	.word	0x2000008c
 8001aa0:	20000124 	.word	0x20000124
 8001aa4:	58000800 	.word	0x58000800

08001aa8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001ab4:	4a64      	ldr	r2, [pc, #400]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001aba:	4b63      	ldr	r3, [pc, #396]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	22ca      	movs	r2, #202	; 0xca
 8001ac2:	625a      	str	r2, [r3, #36]	; 0x24
 8001ac4:	4b60      	ldr	r3, [pc, #384]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2253      	movs	r2, #83	; 0x53
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001ace:	4b5f      	ldr	r3, [pc, #380]	; (8001c4c <HW_TS_Init+0x1a4>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	4a5e      	ldr	r2, [pc, #376]	; (8001c4c <HW_TS_Init+0x1a4>)
 8001ad4:	f043 0320 	orr.w	r3, r3, #32
 8001ad8:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001ada:	4b5c      	ldr	r3, [pc, #368]	; (8001c4c <HW_TS_Init+0x1a4>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	f1c3 0304 	rsb	r3, r3, #4
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	4b58      	ldr	r3, [pc, #352]	; (8001c50 <HW_TS_Init+0x1a8>)
 8001aee:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001af0:	4b56      	ldr	r3, [pc, #344]	; (8001c4c <HW_TS_Init+0x1a4>)
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001af8:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001afc:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	fa92 f2a2 	rbit	r2, r2
 8001b04:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	2a00      	cmp	r2, #0
 8001b0e:	d101      	bne.n	8001b14 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001b10:	2220      	movs	r2, #32
 8001b12:	e003      	b.n	8001b1c <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	fab2 f282 	clz	r2, r2
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	40d3      	lsrs	r3, r2
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	3301      	adds	r3, #1
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <HW_TS_Init+0x1ac>)
 8001b26:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001b28:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <HW_TS_Init+0x1a4>)
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	3301      	adds	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HW_TS_Init+0x1b0>)
 8001b3a:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001b3c:	4b46      	ldr	r3, [pc, #280]	; (8001c58 <HW_TS_Init+0x1b0>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	4a44      	ldr	r2, [pc, #272]	; (8001c54 <HW_TS_Init+0x1ac>)
 8001b44:	7812      	ldrb	r2, [r2, #0]
 8001b46:	fb02 f303 	mul.w	r3, r2, r3
 8001b4a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b4e:	4a40      	ldr	r2, [pc, #256]	; (8001c50 <HW_TS_Init+0x1a8>)
 8001b50:	7812      	ldrb	r2, [r2, #0]
 8001b52:	40d3      	lsrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d904      	bls.n	8001b6a <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001b60:	4b3e      	ldr	r3, [pc, #248]	; (8001c5c <HW_TS_Init+0x1b4>)
 8001b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b66:	801a      	strh	r2, [r3, #0]
 8001b68:	e003      	b.n	8001b72 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <HW_TS_Init+0x1b4>)
 8001b70:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001b72:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b76:	f7ff fb85 	bl	8001284 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001b7a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b7e:	f7ff fb6d 	bl	800125c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d143      	bne.n	8001c10 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b88:	4b35      	ldr	r3, [pc, #212]	; (8001c60 <HW_TS_Init+0x1b8>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b8e:	4b35      	ldr	r3, [pc, #212]	; (8001c64 <HW_TS_Init+0x1bc>)
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	77fb      	strb	r3, [r7, #31]
 8001b9a:	e00c      	b.n	8001bb6 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001b9c:	7ffa      	ldrb	r2, [r7, #31]
 8001b9e:	4932      	ldr	r1, [pc, #200]	; (8001c68 <HW_TS_Init+0x1c0>)
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	330c      	adds	r3, #12
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001bb0:	7ffb      	ldrb	r3, [r7, #31]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	77fb      	strb	r3, [r7, #31]
 8001bb6:	7ffb      	ldrb	r3, [r7, #31]
 8001bb8:	2b05      	cmp	r3, #5
 8001bba:	d9ef      	bls.n	8001b9c <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <HW_TS_Init+0x1c4>)
 8001bbe:	2206      	movs	r2, #6
 8001bc0:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001bc2:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bd4:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001bea:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001bec:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <HW_TS_Init+0x1c8>)
 8001bee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bf2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	f001 fd02 	bl	80035fe <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	e00a      	b.n	8001c26 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f001 fcde 	bl	80035e2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <HW_TS_Init+0x1a0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	22ff      	movs	r2, #255	; 0xff
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001c30:	2200      	movs	r2, #0
 8001c32:	2106      	movs	r1, #6
 8001c34:	2003      	movs	r0, #3
 8001c36:	f001 fc9a 	bl	800356e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001c3a:	2003      	movs	r0, #3
 8001c3c:	f001 fcb1 	bl	80035a2 <HAL_NVIC_EnableIRQ>

  return;
 8001c40:	bf00      	nop
}
 8001c42:	3720      	adds	r7, #32
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	2000024c 	.word	0x2000024c
 8001c4c:	40002800 	.word	0x40002800
 8001c50:	20000250 	.word	0x20000250
 8001c54:	20000251 	.word	0x20000251
 8001c58:	20000252 	.word	0x20000252
 8001c5c:	20000254 	.word	0x20000254
 8001c60:	20000124 	.word	0x20000124
 8001c64:	20000120 	.word	0x20000120
 8001c68:	2000008c 	.word	0x2000008c
 8001c6c:	2000011c 	.word	0x2000011c
 8001c70:	58000800 	.word	0x58000800

08001c74 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b08b      	sub	sp, #44	; 0x2c
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	4613      	mov	r3, r2
 8001c82:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c8e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001c90:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001c92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c94:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001c96:	e004      	b.n	8001ca2 <HW_TS_Create+0x2e>
  {
    loop++;
 8001c98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001ca2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	d80c      	bhi.n	8001cc4 <HW_TS_Create+0x50>
 8001caa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001cae:	492b      	ldr	r1, [pc, #172]	; (8001d5c <HW_TS_Create+0xe8>)
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	440b      	add	r3, r1
 8001cba:	330c      	adds	r3, #12
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1e9      	bne.n	8001c98 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001cc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cc8:	2b06      	cmp	r3, #6
 8001cca:	d037      	beq.n	8001d3c <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001ccc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001cd0:	4922      	ldr	r1, [pc, #136]	; (8001d5c <HW_TS_Create+0xe8>)
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	440b      	add	r3, r1
 8001cdc:	330c      	adds	r3, #12
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001cec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001cf0:	491a      	ldr	r1, [pc, #104]	; (8001d5c <HW_TS_Create+0xe8>)
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	440b      	add	r3, r1
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001d02:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001d06:	4915      	ldr	r1, [pc, #84]	; (8001d5c <HW_TS_Create+0xe8>)
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	440b      	add	r3, r1
 8001d12:	330d      	adds	r3, #13
 8001d14:	79fa      	ldrb	r2, [r7, #7]
 8001d16:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001d18:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001d1c:	490f      	ldr	r1, [pc, #60]	; (8001d5c <HW_TS_Create+0xe8>)
 8001d1e:	4613      	mov	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	440b      	add	r3, r1
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001d32:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d3a:	e007      	b.n	8001d4c <HW_TS_Create+0xd8>
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	372c      	adds	r7, #44	; 0x2c
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	2000008c 	.word	0x2000008c

08001d60 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8001d6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d70:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001d72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d74:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001d76:	2003      	movs	r0, #3
 8001d78:	f001 fc21 	bl	80035be <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001d7c:	4b37      	ldr	r3, [pc, #220]	; (8001e5c <HW_TS_Stop+0xfc>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	22ca      	movs	r2, #202	; 0xca
 8001d84:	625a      	str	r2, [r3, #36]	; 0x24
 8001d86:	4b35      	ldr	r3, [pc, #212]	; (8001e5c <HW_TS_Stop+0xfc>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2253      	movs	r2, #83	; 0x53
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001d90:	79fa      	ldrb	r2, [r7, #7]
 8001d92:	4933      	ldr	r1, [pc, #204]	; (8001e60 <HW_TS_Stop+0x100>)
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	440b      	add	r3, r1
 8001d9e:	330c      	adds	r3, #12
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d148      	bne.n	8001e3a <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fbeb 	bl	8001588 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001db2:	4b2c      	ldr	r3, [pc, #176]	; (8001e64 <HW_TS_Stop+0x104>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001db8:	7cfb      	ldrb	r3, [r7, #19]
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d135      	bne.n	8001e2a <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001dbe:	4b2a      	ldr	r3, [pc, #168]	; (8001e68 <HW_TS_Stop+0x108>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dca:	d108      	bne.n	8001dde <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001dcc:	bf00      	nop
 8001dce:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <HW_TS_Stop+0xfc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f7      	bne.n	8001dce <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001dde:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <HW_TS_Stop+0xfc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HW_TS_Stop+0xfc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001df0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001df2:	bf00      	nop
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <HW_TS_Stop+0xfc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f7      	beq.n	8001df4 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HW_TS_Stop+0xfc>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <HW_TS_Stop+0xfc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001e18:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <HW_TS_Stop+0x10c>)
 8001e1c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e20:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001e22:	2003      	movs	r0, #3
 8001e24:	f001 fbeb 	bl	80035fe <HAL_NVIC_ClearPendingIRQ>
 8001e28:	e007      	b.n	8001e3a <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HW_TS_Stop+0x110>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	7cfa      	ldrb	r2, [r7, #19]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d001      	beq.n	8001e3a <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8001e36:	f7ff fcc9 	bl	80017cc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001e3a:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <HW_TS_Stop+0xfc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	22ff      	movs	r2, #255	; 0xff
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001e44:	2003      	movs	r0, #3
 8001e46:	f001 fbac 	bl	80035a2 <HAL_NVIC_EnableIRQ>
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001e54:	bf00      	nop
}
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2000024c 	.word	0x2000024c
 8001e60:	2000008c 	.word	0x2000008c
 8001e64:	2000011c 	.word	0x2000011c
 8001e68:	40002800 	.word	0x40002800
 8001e6c:	58000800 	.word	0x58000800
 8001e70:	2000011d 	.word	0x2000011d

08001e74 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001e80:	79fa      	ldrb	r2, [r7, #7]
 8001e82:	493b      	ldr	r1, [pc, #236]	; (8001f70 <HW_TS_Start+0xfc>)
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	440b      	add	r3, r1
 8001e8e:	330c      	adds	r3, #12
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d103      	bne.n	8001ea0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff60 	bl	8001d60 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8001ea4:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ea8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001eaa:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001eac:	2003      	movs	r0, #3
 8001eae:	f001 fb86 	bl	80035be <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001eb2:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <HW_TS_Start+0x100>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	22ca      	movs	r2, #202	; 0xca
 8001eba:	625a      	str	r2, [r3, #36]	; 0x24
 8001ebc:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <HW_TS_Start+0x100>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2253      	movs	r2, #83	; 0x53
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001ec6:	79fa      	ldrb	r2, [r7, #7]
 8001ec8:	4929      	ldr	r1, [pc, #164]	; (8001f70 <HW_TS_Start+0xfc>)
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	330c      	adds	r3, #12
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001eda:	79fa      	ldrb	r2, [r7, #7]
 8001edc:	4924      	ldr	r1, [pc, #144]	; (8001f70 <HW_TS_Start+0xfc>)
 8001ede:	4613      	mov	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	440b      	add	r3, r1
 8001ee8:	3308      	adds	r3, #8
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001eee:	79fa      	ldrb	r2, [r7, #7]
 8001ef0:	491f      	ldr	r1, [pc, #124]	; (8001f70 <HW_TS_Start+0xfc>)
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	440b      	add	r3, r1
 8001efc:	3304      	adds	r3, #4
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fa95 	bl	8001434 <linkTimer>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <HW_TS_Start+0x104>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HW_TS_Start+0x108>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	7c7a      	ldrb	r2, [r7, #17]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d002      	beq.n	8001f26 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8001f20:	f7ff fc54 	bl	80017cc <RescheduleTimerList>
 8001f24:	e013      	b.n	8001f4e <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001f26:	79fa      	ldrb	r2, [r7, #7]
 8001f28:	4911      	ldr	r1, [pc, #68]	; (8001f70 <HW_TS_Start+0xfc>)
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	440b      	add	r3, r1
 8001f34:	3308      	adds	r3, #8
 8001f36:	6819      	ldr	r1, [r3, #0]
 8001f38:	8a7b      	ldrh	r3, [r7, #18]
 8001f3a:	79fa      	ldrb	r2, [r7, #7]
 8001f3c:	1ac9      	subs	r1, r1, r3
 8001f3e:	480c      	ldr	r0, [pc, #48]	; (8001f70 <HW_TS_Start+0xfc>)
 8001f40:	4613      	mov	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4403      	add	r3, r0
 8001f4a:	3308      	adds	r3, #8
 8001f4c:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HW_TS_Start+0x100>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	22ff      	movs	r2, #255	; 0xff
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001f58:	2003      	movs	r0, #3
 8001f5a:	f001 fb22 	bl	80035a2 <HAL_NVIC_EnableIRQ>
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001f68:	bf00      	nop
}
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	2000008c 	.word	0x2000008c
 8001f74:	2000024c 	.word	0x2000024c
 8001f78:	2000011c 	.word	0x2000011c
 8001f7c:	2000011d 	.word	0x2000011d

08001f80 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4798      	blx	r3

  return;
 8001f92:	bf00      	nop
}
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607b      	str	r3, [r7, #4]
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	73fb      	strb	r3, [r7, #15]
 8001faa:	4613      	mov	r3, r2
 8001fac:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <HW_UART_Receive_IT+0x1e>
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d00d      	beq.n	8001fd4 <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8001fb8:	e019      	b.n	8001fee <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 8001fba:	4a0f      	ldr	r2, [pc, #60]	; (8001ff8 <HW_UART_Receive_IT+0x5c>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HW_UART_Receive_IT+0x60>)
 8001fc2:	4a0f      	ldr	r2, [pc, #60]	; (8002000 <HW_UART_Receive_IT+0x64>)
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	89bb      	ldrh	r3, [r7, #12]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68b9      	ldr	r1, [r7, #8]
 8001fcc:	480b      	ldr	r0, [pc, #44]	; (8001ffc <HW_UART_Receive_IT+0x60>)
 8001fce:	f004 fa23 	bl	8006418 <HAL_UART_Receive_IT>
            break;
 8001fd2:	e00c      	b.n	8001fee <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 8001fd4:	4a0b      	ldr	r2, [pc, #44]	; (8002004 <HW_UART_Receive_IT+0x68>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HW_UART_Receive_IT+0x6c>)
 8001fdc:	4a0b      	ldr	r2, [pc, #44]	; (800200c <HW_UART_Receive_IT+0x70>)
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	89bb      	ldrh	r3, [r7, #12]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	4808      	ldr	r0, [pc, #32]	; (8002008 <HW_UART_Receive_IT+0x6c>)
 8001fe8:	f004 fa16 	bl	8006418 <HAL_UART_Receive_IT>
            break;
 8001fec:	bf00      	nop
    }

    return;
 8001fee:	bf00      	nop
}
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20006ce4 	.word	0x20006ce4
 8001ffc:	20006e4c 	.word	0x20006e4c
 8002000:	40013800 	.word	0x40013800
 8002004:	20006ce8 	.word	0x20006ce8
 8002008:	20006d60 	.word	0x20006d60
 800200c:	40008000 	.word	0x40008000

08002010 <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	4603      	mov	r3, r0
 800201c:	73fb      	strb	r3, [r7, #15]
 800201e:	4613      	mov	r3, r2
 8002020:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <HW_UART_Transmit_IT+0x1e>
 8002028:	2b02      	cmp	r3, #2
 800202a:	d00d      	beq.n	8002048 <HW_UART_Transmit_IT+0x38>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 800202c:	e019      	b.n	8002062 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(huart1, USART1);
 800202e:	4a0f      	ldr	r2, [pc, #60]	; (800206c <HW_UART_Transmit_IT+0x5c>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HW_UART_Transmit_IT+0x60>)
 8002036:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <HW_UART_Transmit_IT+0x64>)
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	89bb      	ldrh	r3, [r7, #12]
 800203c:	461a      	mov	r2, r3
 800203e:	68b9      	ldr	r1, [r7, #8]
 8002040:	480b      	ldr	r0, [pc, #44]	; (8002070 <HW_UART_Transmit_IT+0x60>)
 8002042:	f004 f965 	bl	8006310 <HAL_UART_Transmit_IT>
            break;
 8002046:	e00c      	b.n	8002062 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(hlpuart1, LPUART1);
 8002048:	4a0b      	ldr	r2, [pc, #44]	; (8002078 <HW_UART_Transmit_IT+0x68>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HW_UART_Transmit_IT+0x6c>)
 8002050:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <HW_UART_Transmit_IT+0x70>)
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	89bb      	ldrh	r3, [r7, #12]
 8002056:	461a      	mov	r2, r3
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	4808      	ldr	r0, [pc, #32]	; (800207c <HW_UART_Transmit_IT+0x6c>)
 800205c:	f004 f958 	bl	8006310 <HAL_UART_Transmit_IT>
            break;
 8002060:	bf00      	nop
    }

    return;
 8002062:	bf00      	nop
}
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20006cec 	.word	0x20006cec
 8002070:	20006e4c 	.word	0x20006e4c
 8002074:	40013800 	.word	0x40013800
 8002078:	20006ce0 	.word	0x20006ce0
 800207c:	20006d60 	.word	0x20006d60
 8002080:	40008000 	.word	0x40008000

08002084 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	4603      	mov	r3, r0
 8002090:	73fb      	strb	r3, [r7, #15]
 8002092:	4613      	mov	r3, r2
 8002094:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800209a:	2300      	movs	r3, #0
 800209c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <HW_UART_Transmit_DMA+0x26>
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d00f      	beq.n	80020c8 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80020a8:	e01d      	b.n	80020e6 <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 80020aa:	4a1f      	ldr	r2, [pc, #124]	; (8002128 <HW_UART_Transmit_DMA+0xa4>)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80020b0:	4b1e      	ldr	r3, [pc, #120]	; (800212c <HW_UART_Transmit_DMA+0xa8>)
 80020b2:	4a1f      	ldr	r2, [pc, #124]	; (8002130 <HW_UART_Transmit_DMA+0xac>)
 80020b4:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80020b6:	89bb      	ldrh	r3, [r7, #12]
 80020b8:	461a      	mov	r2, r3
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	481b      	ldr	r0, [pc, #108]	; (800212c <HW_UART_Transmit_DMA+0xa8>)
 80020be:	f004 fa83 	bl	80065c8 <HAL_UART_Transmit_DMA>
 80020c2:	4603      	mov	r3, r0
 80020c4:	75fb      	strb	r3, [r7, #23]
            break;
 80020c6:	e00e      	b.n	80020e6 <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 80020c8:	4a1a      	ldr	r2, [pc, #104]	; (8002134 <HW_UART_Transmit_DMA+0xb0>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <HW_UART_Transmit_DMA+0xb4>)
 80020d0:	4a1a      	ldr	r2, [pc, #104]	; (800213c <HW_UART_Transmit_DMA+0xb8>)
 80020d2:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 80020d4:	89bb      	ldrh	r3, [r7, #12]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	4817      	ldr	r0, [pc, #92]	; (8002138 <HW_UART_Transmit_DMA+0xb4>)
 80020dc:	f004 fa74 	bl	80065c8 <HAL_UART_Transmit_DMA>
 80020e0:	4603      	mov	r3, r0
 80020e2:	75fb      	strb	r3, [r7, #23]
            break;
 80020e4:	bf00      	nop
    }

    switch (hal_status)
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d817      	bhi.n	800211c <HW_UART_Transmit_DMA+0x98>
 80020ec:	a201      	add	r2, pc, #4	; (adr r2, 80020f4 <HW_UART_Transmit_DMA+0x70>)
 80020ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f2:	bf00      	nop
 80020f4:	08002105 	.word	0x08002105
 80020f8:	0800210b 	.word	0x0800210b
 80020fc:	08002111 	.word	0x08002111
 8002100:	08002117 	.word	0x08002117
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002104:	2300      	movs	r3, #0
 8002106:	75bb      	strb	r3, [r7, #22]
            break;
 8002108:	e009      	b.n	800211e <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800210a:	2301      	movs	r3, #1
 800210c:	75bb      	strb	r3, [r7, #22]
            break;
 800210e:	e006      	b.n	800211e <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002110:	2302      	movs	r3, #2
 8002112:	75bb      	strb	r3, [r7, #22]
            break;
 8002114:	e003      	b.n	800211e <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002116:	2303      	movs	r3, #3
 8002118:	75bb      	strb	r3, [r7, #22]
            break;
 800211a:	e000      	b.n	800211e <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 800211c:	bf00      	nop
    }

    return hw_status;
 800211e:	7dbb      	ldrb	r3, [r7, #22]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20006cec 	.word	0x20006cec
 800212c:	20006e4c 	.word	0x20006e4c
 8002130:	40013800 	.word	0x40013800
 8002134:	20006ce0 	.word	0x20006ce0
 8002138:	20006d60 	.word	0x20006d60
 800213c:	40008000 	.word	0x40008000

08002140 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0e      	ldr	r2, [pc, #56]	; (8002188 <HAL_UART_RxCpltCallback+0x48>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d00b      	beq.n	800216a <HAL_UART_RxCpltCallback+0x2a>
 8002152:	4a0e      	ldr	r2, [pc, #56]	; (800218c <HAL_UART_RxCpltCallback+0x4c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d000      	beq.n	800215a <HAL_UART_RxCpltCallback+0x1a>
            }
            break;
#endif

        default:
            break;
 8002158:	e012      	b.n	8002180 <HAL_UART_RxCpltCallback+0x40>
            if(HW_huart1RxCb)
 800215a:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <HAL_UART_RxCpltCallback+0x50>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00b      	beq.n	800217a <HAL_UART_RxCpltCallback+0x3a>
                HW_huart1RxCb();
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_UART_RxCpltCallback+0x50>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4798      	blx	r3
            break;
 8002168:	e007      	b.n	800217a <HAL_UART_RxCpltCallback+0x3a>
            if(HW_hlpuart1RxCb)
 800216a:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <HAL_UART_RxCpltCallback+0x54>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_UART_RxCpltCallback+0x3e>
                HW_hlpuart1RxCb();
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_UART_RxCpltCallback+0x54>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4798      	blx	r3
            break;
 8002178:	e001      	b.n	800217e <HAL_UART_RxCpltCallback+0x3e>
            break;
 800217a:	bf00      	nop
 800217c:	e000      	b.n	8002180 <HAL_UART_RxCpltCallback+0x40>
            break;
 800217e:	bf00      	nop
    }

    return;
 8002180:	bf00      	nop
}
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40008000 	.word	0x40008000
 800218c:	40013800 	.word	0x40013800
 8002190:	20006ce4 	.word	0x20006ce4
 8002194:	20006ce8 	.word	0x20006ce8

08002198 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0e      	ldr	r2, [pc, #56]	; (80021e0 <HAL_UART_TxCpltCallback+0x48>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00b      	beq.n	80021c2 <HAL_UART_TxCpltCallback+0x2a>
 80021aa:	4a0e      	ldr	r2, [pc, #56]	; (80021e4 <HAL_UART_TxCpltCallback+0x4c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d000      	beq.n	80021b2 <HAL_UART_TxCpltCallback+0x1a>
            }
            break;
#endif

        default:
            break;
 80021b0:	e012      	b.n	80021d8 <HAL_UART_TxCpltCallback+0x40>
            if(HW_huart1TxCb)
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_UART_TxCpltCallback+0x50>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00b      	beq.n	80021d2 <HAL_UART_TxCpltCallback+0x3a>
                HW_huart1TxCb();
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_UART_TxCpltCallback+0x50>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4798      	blx	r3
            break;
 80021c0:	e007      	b.n	80021d2 <HAL_UART_TxCpltCallback+0x3a>
            if(HW_hlpuart1TxCb)
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_UART_TxCpltCallback+0x54>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d005      	beq.n	80021d6 <HAL_UART_TxCpltCallback+0x3e>
                HW_hlpuart1TxCb();
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_UART_TxCpltCallback+0x54>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4798      	blx	r3
            break;
 80021d0:	e001      	b.n	80021d6 <HAL_UART_TxCpltCallback+0x3e>
            break;
 80021d2:	bf00      	nop
 80021d4:	e000      	b.n	80021d8 <HAL_UART_TxCpltCallback+0x40>
            break;
 80021d6:	bf00      	nop
    }

    return;
 80021d8:	bf00      	nop
}
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40008000 	.word	0x40008000
 80021e4:	40013800 	.word	0x40013800
 80021e8:	20006cec 	.word	0x20006cec
 80021ec:	20006ce0 	.word	0x20006ce0

080021f0 <LL_EXTI_DisableIT_0_31>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80021f8:	4b07      	ldr	r3, [pc, #28]	; (8002218 <LL_EXTI_DisableIT_0_31+0x28>)
 80021fa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	43db      	mvns	r3, r3
 8002202:	4905      	ldr	r1, [pc, #20]	; (8002218 <LL_EXTI_DisableIT_0_31+0x28>)
 8002204:	4013      	ands	r3, r2
 8002206:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	58000800 	.word	0x58000800

0800221c <LL_EXTI_DisableIT_32_63>:
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002224:	4b07      	ldr	r3, [pc, #28]	; (8002244 <LL_EXTI_DisableIT_32_63+0x28>)
 8002226:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	43db      	mvns	r3, r3
 800222e:	4905      	ldr	r1, [pc, #20]	; (8002244 <LL_EXTI_DisableIT_32_63+0x28>)
 8002230:	4013      	ands	r3, r2
 8002232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	58000800 	.word	0x58000800

08002248 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8002250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002254:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8002256:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800225a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002262:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	cafecafe 	.word	0xcafecafe

08002284 <LL_RCC_LSE_SetDriveCapability>:
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800228c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002294:	f023 0218 	bic.w	r2, r3, #24
 8002298:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80022b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80022d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80022f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002300:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002308:	d101      	bne.n	800230e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800231e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800232e:	d101      	bne.n	8002334 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_AHB2_GRP1_EnableClock>:
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800234e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4313      	orrs	r3, r2
 8002356:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4013      	ands	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002364:	68fb      	ldr	r3, [r7, #12]
}
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002372:	b480      	push	{r7}
 8002374:	b085      	sub	sp, #20
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800237a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002380:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4313      	orrs	r3, r2
 8002388:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800238a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4013      	ands	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002396:	68fb      	ldr	r3, [r7, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	041b      	lsls	r3, r3, #16
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	605a      	str	r2, [r3, #4]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	605a      	str	r2, [r3, #4]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695a      	ldr	r2, [r3, #20]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	041b      	lsls	r3, r3, #16
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	615a      	str	r2, [r3, #20]
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	695a      	ldr	r2, [r3, #20]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	615a      	str	r2, [r3, #20]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	609a      	str	r2, [r3, #8]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	619a      	str	r2, [r3, #24]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  /**
	   * The OPTVERR flag is wrongly set at power on
	   * It shall be cleared before using any HAL_FLASH_xxx() api
	   */
	   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800246c:	4b13      	ldr	r3, [pc, #76]	; (80024bc <main+0x54>)
 800246e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002472:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8002474:	f000 fefe 	bl	8003274 <HAL_Init>

  /* USER CODE BEGIN Init */
   Reset_Device();
 8002478:	f000 f8bd 	bl	80025f6 <Reset_Device>
   Config_HSE();
 800247c:	f000 f8a7 	bl	80025ce <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002480:	f000 f81e 	bl	80024c0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8002484:	f000 f89c 	bl	80025c0 <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 8002488:	f000 f8f7 	bl	800267a <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800248c:	f7fe fedb 	bl	8001246 <MX_GPIO_Init>
  MX_DMA_Init();
 8002490:	f7fe fe99 	bl	80011c6 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002494:	f000 fd52 	bl	8002f3c <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8002498:	f000 f9b2 	bl	8002800 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800249c:	f000 fd9a 	bl	8002fd4 <MX_USART1_UART_Init>
  MX_RF_Init();
 80024a0:	f000 f97c 	bl	800279c <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80024a4:	f008 ffac 	bl	800b400 <osKernelInitialize>
  MX_FREERTOS_Init();
 80024a8:	f7fe fe58 	bl	800115c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80024ac:	f008 ffdc 	bl	800b468 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295
 80024b4:	f00f fa54 	bl	8011960 <UTIL_SEQ_Run>
 80024b8:	e7fa      	b.n	80024b0 <main+0x48>
 80024ba:	bf00      	nop
 80024bc:	58004000 	.word	0x58004000

080024c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b0ae      	sub	sp, #184	; 0xb8
 80024c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024ca:	2248      	movs	r2, #72	; 0x48
 80024cc:	2100      	movs	r1, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f00f fbab 	bl	8011c2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
 80024e4:	615a      	str	r2, [r3, #20]
 80024e6:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	2250      	movs	r2, #80	; 0x50
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f00f fb9b 	bl	8011c2a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess(); //todo: not there
 80024f4:	f001 fd12 	bl	8003f1c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7ff fec3 	bl	8002284 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024fe:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <SystemClock_Config+0xfc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002506:	4a2d      	ldr	r2, [pc, #180]	; (80025bc <SystemClock_Config+0xfc>)
 8002508:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <SystemClock_Config+0xfc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800251a:	2307      	movs	r3, #7
 800251c:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800251e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002522:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002524:	2301      	movs	r3, #1
 8002526:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800252c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800252e:	2340      	movs	r3, #64	; 0x40
 8002530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002534:	2300      	movs	r3, #0
 8002536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800253a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800253e:	4618      	mov	r0, r3
 8002540:	f002 f88c 	bl	800465c <HAL_RCC_OscConfig>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800254a:	f000 f923 	bl	8002794 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800254e:	236f      	movs	r3, #111	; 0x6f
 8002550:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002552:	2302      	movs	r3, #2
 8002554:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002556:	2300      	movs	r3, #0
 8002558:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800255a:	2300      	movs	r3, #0
 800255c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800255e:	2300      	movs	r3, #0
 8002560:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002562:	2300      	movs	r3, #0
 8002564:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002566:	2300      	movs	r3, #0
 8002568:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800256a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800256e:	2101      	movs	r1, #1
 8002570:	4618      	mov	r0, r3
 8002572:	f002 fbff 	bl	8004d74 <HAL_RCC_ClockConfig>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800257c:	f000 f90a 	bl	8002794 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002580:	f643 0303 	movw	r3, #14339	; 0x3803
 8002584:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800258a:	2300      	movs	r3, #0
 800258c:	623b      	str	r3, [r7, #32]

  /**
   * This is what the example API prefers or funny things happen
   */
  //PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800258e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002592:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002594:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002598:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800259a:	2302      	movs	r3, #2
 800259c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800259e:	2310      	movs	r3, #16
 80025a0:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	4618      	mov	r0, r3
 80025a6:	f003 f856 	bl	8005656 <HAL_RCCEx_PeriphCLKConfig>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <SystemClock_Config+0xf4>
      {
        Error_Handler();
 80025b0:	f000 f8f0 	bl	8002794 <Error_Handler>
      }
  /* USER CODE END Smps */
}
 80025b4:	bf00      	nop
 80025b6:	37b8      	adds	r7, #184	; 0xb8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	58000400 	.word	0x58000400

080025c0 <PeriphClock_Config>:

/* USER CODE BEGIN 4 */
void PeriphClock_Config(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 80025c4:	bf00      	nop
}
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <Config_HSE>:
//
//  /* USER CODE END Smps */
//}

static void Config_HSE(void)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f008 fa2d 	bl	800aa34 <OTP_Read>
 80025da:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	799b      	ldrb	r3, [r3, #6]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fe2e 	bl	8002248 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
}
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <Reset_Device>:


static void Reset_Device( void )
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 80025fa:	f000 f827 	bl	800264c <Reset_BackupDomain>

	Reset_IPCC();
 80025fe:	f000 f803 	bl	8002608 <Reset_IPCC>
#endif

	return;
 8002602:	bf00      	nop
}
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800260c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002610:	f7ff feaf 	bl	8002372 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8002614:	213f      	movs	r1, #63	; 0x3f
 8002616:	480c      	ldr	r0, [pc, #48]	; (8002648 <Reset_IPCC+0x40>)
 8002618:	f7ff ff0a 	bl	8002430 <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 800261c:	213f      	movs	r1, #63	; 0x3f
 800261e:	480a      	ldr	r0, [pc, #40]	; (8002648 <Reset_IPCC+0x40>)
 8002620:	f7ff ff14 	bl	800244c <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8002624:	213f      	movs	r1, #63	; 0x3f
 8002626:	4808      	ldr	r0, [pc, #32]	; (8002648 <Reset_IPCC+0x40>)
 8002628:	f7ff febc 	bl	80023a4 <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 800262c:	213f      	movs	r1, #63	; 0x3f
 800262e:	4806      	ldr	r0, [pc, #24]	; (8002648 <Reset_IPCC+0x40>)
 8002630:	f7ff fedb 	bl	80023ea <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8002634:	213f      	movs	r1, #63	; 0x3f
 8002636:	4804      	ldr	r0, [pc, #16]	; (8002648 <Reset_IPCC+0x40>)
 8002638:	f7ff fec6 	bl	80023c8 <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 800263c:	213f      	movs	r1, #63	; 0x3f
 800263e:	4802      	ldr	r0, [pc, #8]	; (8002648 <Reset_IPCC+0x40>)
 8002640:	f7ff fee5 	bl	800240e <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8002644:	bf00      	nop
}
 8002646:	bd80      	pop	{r7, pc}
 8002648:	58000c00 	.word	0x58000c00

0800264c <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8002650:	f7ff fe50 	bl	80022f4 <LL_RCC_IsActiveFlag_PINRST>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00d      	beq.n	8002676 <Reset_BackupDomain+0x2a>
 800265a:	f7ff fe5e 	bl	800231a <LL_RCC_IsActiveFlag_SFTRST>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d108      	bne.n	8002676 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002664:	f001 fc5a 	bl	8003f1c <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8002668:	f001 fc58 	bl	8003f1c <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 800266c:	f7ff fe20 	bl	80022b0 <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 8002670:	f7ff fe2f 	bl	80022d2 <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8002674:	bf00      	nop
 8002676:	bf00      	nop
}
 8002678:	bd80      	pop	{r7, pc}

0800267a <Init_Exti>:

static void Init_Exti( void )
{
 800267a:	b580      	push	{r7, lr}
 800267c:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 800267e:	f04f 30ff 	mov.w	r0, #4294967295
 8002682:	f7ff fdb5 	bl	80021f0 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8002686:	f06f 0050 	mvn.w	r0, #80	; 0x50
 800268a:	f7ff fdc7 	bl	800221c <LL_EXTI_DisableIT_32_63>

  return;
 800268e:	bf00      	nop
}
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <BSP_LED_Init>:

void BSP_LED_Init(Led_TypeDef Led)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800269e:	f107 030c 	add.w	r3, r7, #12
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	60da      	str	r2, [r3, #12]
 80026ac:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80026ae:	2002      	movs	r0, #2
 80026b0:	f7ff fe46 	bl	8002340 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	4a12      	ldr	r2, [pc, #72]	; (8002700 <BSP_LED_Init+0x6c>)
 80026b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026bc:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026be:	2301      	movs	r3, #1
 80026c0:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026c6:	2302      	movs	r3, #2
 80026c8:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	4a0d      	ldr	r2, [pc, #52]	; (8002704 <BSP_LED_Init+0x70>)
 80026ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d2:	f107 020c 	add.w	r2, r7, #12
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f001 fa73 	bl	8003bc4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	4a08      	ldr	r2, [pc, #32]	; (8002704 <BSP_LED_Init+0x70>)
 80026e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	4a05      	ldr	r2, [pc, #20]	; (8002700 <BSP_LED_Init+0x6c>)
 80026ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026ee:	2200      	movs	r2, #0
 80026f0:	4619      	mov	r1, r3
 80026f2:	f001 fbd7 	bl	8003ea4 <HAL_GPIO_WritePin>
}
 80026f6:	bf00      	nop
 80026f8:	3720      	adds	r7, #32
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	08013fc4 	.word	0x08013fc4
 8002704:	20000004 	.word	0x20000004

08002708 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	4a07      	ldr	r2, [pc, #28]	; (8002734 <BSP_LED_On+0x2c>)
 8002716:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	4a06      	ldr	r2, [pc, #24]	; (8002738 <BSP_LED_On+0x30>)
 800271e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002722:	2201      	movs	r2, #1
 8002724:	4619      	mov	r1, r3
 8002726:	f001 fbbd 	bl	8003ea4 <HAL_GPIO_WritePin>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000004 	.word	0x20000004
 8002738:	08013fc4 	.word	0x08013fc4

0800273c <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	4a07      	ldr	r2, [pc, #28]	; (8002768 <BSP_LED_Off+0x2c>)
 800274a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	4a06      	ldr	r2, [pc, #24]	; (800276c <BSP_LED_Off+0x30>)
 8002752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002756:	2200      	movs	r2, #0
 8002758:	4619      	mov	r1, r3
 800275a:	f001 fba3 	bl	8003ea4 <HAL_GPIO_WritePin>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000004 	.word	0x20000004
 800276c:	08013fc4 	.word	0x08013fc4

08002770 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a04      	ldr	r2, [pc, #16]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d101      	bne.n	8002786 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002782:	f000 fd97 	bl	80032b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40014800 	.word	0x40014800

08002794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002798:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800279a:	e7fe      	b.n	800279a <Error_Handler+0x6>

0800279c <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0

}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <LL_RCC_EnableRTC>:
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80027ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80027d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80027e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4013      	ands	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027f0:	68fb      	ldr	r3, [r7, #12]
}
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <MX_RTC_Init+0x4c>)
 8002806:	4a12      	ldr	r2, [pc, #72]	; (8002850 <MX_RTC_Init+0x50>)
 8002808:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <MX_RTC_Init+0x4c>)
 800280c:	2200      	movs	r2, #0
 800280e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002810:	4b0e      	ldr	r3, [pc, #56]	; (800284c <MX_RTC_Init+0x4c>)
 8002812:	220f      	movs	r2, #15
 8002814:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <MX_RTC_Init+0x4c>)
 8002818:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800281c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <MX_RTC_Init+0x4c>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <MX_RTC_Init+0x4c>)
 8002826:	2200      	movs	r2, #0
 8002828:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <MX_RTC_Init+0x4c>)
 800282c:	2200      	movs	r2, #0
 800282e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <MX_RTC_Init+0x4c>)
 8002832:	2200      	movs	r2, #0
 8002834:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002836:	4805      	ldr	r0, [pc, #20]	; (800284c <MX_RTC_Init+0x4c>)
 8002838:	f003 f993 	bl	8005b62 <HAL_RTC_Init>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002842:	f7ff ffa7 	bl	8002794 <Error_Handler>
  }

}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20006cf0 	.word	0x20006cf0
 8002850:	40002800 	.word	0x40002800

08002854 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a06      	ldr	r2, [pc, #24]	; (800287c <HAL_RTC_MspInit+0x28>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d105      	bne.n	8002872 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002866:	f7ff ffa0 	bl	80027aa <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800286a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800286e:	f7ff ffad 	bl	80027cc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40002800 	.word	0x40002800

08002880 <LL_AHB3_GRP1_EnableClock>:
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800288e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4313      	orrs	r3, r2
 8002896:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4013      	ands	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028a4:	68fb      	ldr	r3, [r7, #12]
}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80028b6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80028ba:	f7ff ffe1 	bl	8002880 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	210f      	movs	r1, #15
 80028c2:	f06f 0001 	mvn.w	r0, #1
 80028c6:	f000 fe52 	bl	800356e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2105      	movs	r1, #5
 80028ce:	202e      	movs	r0, #46	; 0x2e
 80028d0:	f000 fe4d 	bl	800356e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80028d4:	202e      	movs	r0, #46	; 0x2e
 80028d6:	f000 fe64 	bl	80035a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 80028da:	2200      	movs	r2, #0
 80028dc:	210f      	movs	r1, #15
 80028de:	202c      	movs	r0, #44	; 0x2c
 80028e0:	f000 fe45 	bl	800356e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 80028e4:	2200      	movs	r2, #0
 80028e6:	210f      	movs	r1, #15
 80028e8:	202d      	movs	r0, #45	; 0x2d
 80028ea:	f000 fe40 	bl	800356e <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b085      	sub	sp, #20
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80028fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002900:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4313      	orrs	r3, r2
 8002908:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800290a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4013      	ands	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002916:	68fb      	ldr	r3, [r7, #12]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08c      	sub	sp, #48	; 0x30
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8002934:	2200      	movs	r2, #0
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	201a      	movs	r0, #26
 800293a:	f000 fe18 	bl	800356e <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800293e:	201a      	movs	r0, #26
 8002940:	f000 fe2f 	bl	80035a2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002944:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002948:	f7ff ffd3 	bl	80028f2 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800294c:	f107 0208 	add.w	r2, r7, #8
 8002950:	f107 030c 	add.w	r3, r7, #12
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f002 fbf6 	bl	8005148 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800295c:	f002 fbde 	bl	800511c <HAL_RCC_GetPCLK2Freq>
 8002960:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002964:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <HAL_InitTick+0x8c>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	0c9b      	lsrs	r3, r3, #18
 800296c:	3b01      	subs	r3, #1
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002970:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <HAL_InitTick+0x90>)
 8002972:	4a11      	ldr	r2, [pc, #68]	; (80029b8 <HAL_InitTick+0x94>)
 8002974:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <HAL_InitTick+0x90>)
 8002978:	f240 32e7 	movw	r2, #999	; 0x3e7
 800297c:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800297e:	4a0d      	ldr	r2, [pc, #52]	; (80029b4 <HAL_InitTick+0x90>)
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002982:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_InitTick+0x90>)
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <HAL_InitTick+0x90>)
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002990:	4808      	ldr	r0, [pc, #32]	; (80029b4 <HAL_InitTick+0x90>)
 8002992:	f003 f9d4 	bl	8005d3e <HAL_TIM_Base_Init>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d104      	bne.n	80029a6 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 800299c:	4805      	ldr	r0, [pc, #20]	; (80029b4 <HAL_InitTick+0x90>)
 800299e:	f003 fa2f 	bl	8005e00 <HAL_TIM_Base_Start_IT>
 80029a2:	4603      	mov	r3, r0
 80029a4:	e000      	b.n	80029a8 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3730      	adds	r7, #48	; 0x30
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	431bde83 	.word	0x431bde83
 80029b4:	20006d14 	.word	0x20006d14
 80029b8:	40014800 	.word	0x40014800

080029bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029c0:	e7fe      	b.n	80029c0 <NMI_Handler+0x4>

080029c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029c6:	e7fe      	b.n	80029c6 <HardFault_Handler+0x4>

080029c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029cc:	e7fe      	b.n	80029cc <MemManage_Handler+0x4>

080029ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ce:	b480      	push	{r7}
 80029d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029d2:	e7fe      	b.n	80029d2 <BusFault_Handler+0x4>

080029d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029d8:	e7fe      	b.n	80029d8 <UsageFault_Handler+0x4>

080029da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80029ec:	4802      	ldr	r0, [pc, #8]	; (80029f8 <DMA1_Channel4_IRQHandler+0x10>)
 80029ee:	f000 ff97 	bl	8003920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20006ed8 	.word	0x20006ed8

080029fc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002a00:	4802      	ldr	r0, [pc, #8]	; (8002a0c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002a02:	f003 fa4b 	bl	8005e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20006d14 	.word	0x20006d14

08002a10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a14:	4802      	ldr	r0, [pc, #8]	; (8002a20 <USART1_IRQHandler+0x10>)
 8002a16:	f003 fe57 	bl	80066c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20006e4c 	.word	0x20006e4c

08002a24 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002a28:	4802      	ldr	r0, [pc, #8]	; (8002a34 <LPUART1_IRQHandler+0x10>)
 8002a2a:	f003 fe4d 	bl	80066c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20006d60 	.word	0x20006d60

08002a38 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002a3c:	f001 fa4a 	bl	8003ed4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002a40:	bf00      	nop
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002a48:	4802      	ldr	r0, [pc, #8]	; (8002a54 <DMA2_Channel4_IRQHandler+0x10>)
 8002a4a:	f000 ff69 	bl	8003920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20006dec 	.word	0x20006dec

08002a58 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8002a5c:	f7fe ff54 	bl	8001908 <HW_TS_RTC_Wakeup_Handler>
}
 8002a60:	bf00      	nop
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <IPCC_C1_TX_IRQHandler>:
void IPCC_C1_TX_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8002a68:	f00e fda6 	bl	80115b8 <HW_IPCC_Tx_Handler>
  return;
 8002a6c:	bf00      	nop
}
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8002a74:	f00e fd46 	bl	8011504 <HW_IPCC_Rx_Handler>
  return;
 8002a78:	bf00      	nop
}
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <logRegion>:
 *
 * @returns  String with a log level color value.
 */
static inline uint16_t logRegion(char *aLogString, uint16_t aMaxSize,
        appliLogRegion_t aLogRegion)
{
 8002a7c:	b5b0      	push	{r4, r5, r7, lr}
 8002a7e:	b08a      	sub	sp, #40	; 0x28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	707b      	strb	r3, [r7, #1]
  char logRegionString[30U];

  switch (aLogRegion)
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d83e      	bhi.n	8002b12 <logRegion+0x96>
 8002a94:	a201      	add	r2, pc, #4	; (adr r2, 8002a9c <logRegion+0x20>)
 8002a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9a:	bf00      	nop
 8002a9c:	08002ab1 	.word	0x08002ab1
 8002aa0:	08002ac5 	.word	0x08002ac5
 8002aa4:	08002ad9 	.word	0x08002ad9
 8002aa8:	08002aeb 	.word	0x08002aeb
 8002aac:	08002aff 	.word	0x08002aff
  {
    case APPLI_LOG_REGION_GENERAL:
      strcpy(logRegionString, "[M4 APPLICATION]");
 8002ab0:	f107 0308 	add.w	r3, r7, #8
 8002ab4:	4a22      	ldr	r2, [pc, #136]	; (8002b40 <logRegion+0xc4>)
 8002ab6:	461c      	mov	r4, r3
 8002ab8:	4615      	mov	r5, r2
 8002aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002abe:	682b      	ldr	r3, [r5, #0]
 8002ac0:	7023      	strb	r3, [r4, #0]
      break;
 8002ac2:	e02f      	b.n	8002b24 <logRegion+0xa8>
    case APPLI_LOG_REGION_OPENTHREAD_API:
      strcpy(logRegionString, "[M4 OPENTHREAD API]");
 8002ac4:	f107 0308 	add.w	r3, r7, #8
 8002ac8:	4a1e      	ldr	r2, [pc, #120]	; (8002b44 <logRegion+0xc8>)
 8002aca:	461c      	mov	r4, r3
 8002acc:	4615      	mov	r5, r2
 8002ace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ad2:	682b      	ldr	r3, [r5, #0]
 8002ad4:	6023      	str	r3, [r4, #0]
      break;
 8002ad6:	e025      	b.n	8002b24 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_LINK:
      strcpy(logRegionString, "[M4 LINK API]");
 8002ad8:	f107 0308 	add.w	r3, r7, #8
 8002adc:	4a1a      	ldr	r2, [pc, #104]	; (8002b48 <logRegion+0xcc>)
 8002ade:	461c      	mov	r4, r3
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ae4:	c407      	stmia	r4!, {r0, r1, r2}
 8002ae6:	8023      	strh	r3, [r4, #0]
      break;
 8002ae8:	e01c      	b.n	8002b24 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_INSTANCE:
      strcpy(logRegionString, "[M4 INSTANCE API]");
 8002aea:	f107 0308 	add.w	r3, r7, #8
 8002aee:	4a17      	ldr	r2, [pc, #92]	; (8002b4c <logRegion+0xd0>)
 8002af0:	461c      	mov	r4, r3
 8002af2:	4615      	mov	r5, r2
 8002af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002af8:	682b      	ldr	r3, [r5, #0]
 8002afa:	8023      	strh	r3, [r4, #0]
      break;
 8002afc:	e012      	b.n	8002b24 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_MESSAGE:
      strcpy(logRegionString, "[M4 MESSAGE API]");
 8002afe:	f107 0308 	add.w	r3, r7, #8
 8002b02:	4a13      	ldr	r2, [pc, #76]	; (8002b50 <logRegion+0xd4>)
 8002b04:	461c      	mov	r4, r3
 8002b06:	4615      	mov	r5, r2
 8002b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b0c:	682b      	ldr	r3, [r5, #0]
 8002b0e:	7023      	strb	r3, [r4, #0]
      break;
 8002b10:	e008      	b.n	8002b24 <logRegion+0xa8>
    default:
      strcpy(logRegionString, "[M4]");
 8002b12:	f107 0308 	add.w	r3, r7, #8
 8002b16:	4a0f      	ldr	r2, [pc, #60]	; (8002b54 <logRegion+0xd8>)
 8002b18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b1c:	6018      	str	r0, [r3, #0]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	7019      	strb	r1, [r3, #0]
      break;
 8002b22:	bf00      	nop
  }

  return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 8002b24:	8879      	ldrh	r1, [r7, #2]
 8002b26:	f107 0308 	add.w	r3, r7, #8
 8002b2a:	4a0b      	ldr	r2, [pc, #44]	; (8002b58 <logRegion+0xdc>)
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f00f f901 	bl	8011d34 <sniprintf>
 8002b32:	4603      	mov	r3, r0
 8002b34:	b29b      	uxth	r3, r3
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3728      	adds	r7, #40	; 0x28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	08013068 	.word	0x08013068
 8002b44:	0801307c 	.word	0x0801307c
 8002b48:	08013090 	.word	0x08013090
 8002b4c:	080130a0 	.word	0x080130a0
 8002b50:	080130b4 	.word	0x080130b4
 8002b54:	080130c8 	.word	0x080130c8
 8002b58:	080130d0 	.word	0x080130d0

08002b5c <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d005      	beq.n	8002b78 <levelToString+0x1c>
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d005      	beq.n	8002b7c <levelToString+0x20>
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <levelToString+0x24>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <levelToString+0x34>)
 8002b76:	e004      	b.n	8002b82 <levelToString+0x26>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <levelToString+0x38>)
 8002b7a:	e002      	b.n	8002b82 <levelToString+0x26>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <levelToString+0x3c>)
 8002b7e:	e000      	b.n	8002b82 <levelToString+0x26>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <levelToString+0x40>)
  }
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	080130d4 	.word	0x080130d4
 8002b94:	080130dc 	.word	0x080130dc
 8002b98:	080130e4 	.word	0x080130e4
 8002b9c:	080130ec 	.word	0x080130ec

08002ba0 <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 8002ba0:	b590      	push	{r4, r7, lr}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	807b      	strh	r3, [r7, #2]
 8002bac:	4613      	mov	r3, r2
 8002bae:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 8002bb0:	887c      	ldrh	r4, [r7, #2]
 8002bb2:	787b      	ldrb	r3, [r7, #1]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ffd1 	bl	8002b5c <levelToString>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4a05      	ldr	r2, [pc, #20]	; (8002bd4 <logLevel+0x34>)
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f00f f8b7 	bl	8011d34 <sniprintf>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	b29b      	uxth	r3, r3
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd90      	pop	{r4, r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	080130f4 	.word	0x080130f4

08002bd8 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8002bd8:	b40c      	push	{r2, r3}
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b0c4      	sub	sp, #272	; 0x110
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	4602      	mov	r2, r0
 8002be2:	1dfb      	adds	r3, r7, #7
 8002be4:	701a      	strb	r2, [r3, #0]
 8002be6:	1dbb      	adds	r3, r7, #6
 8002be8:	460a      	mov	r2, r1
 8002bea:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8002bf2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002bf6:	f107 020c 	add.w	r2, r7, #12
 8002bfa:	18d0      	adds	r0, r2, r3
 8002bfc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002c00:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002c04:	b299      	uxth	r1, r3
 8002c06:	1dfb      	adds	r3, r7, #7
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f7ff ffc8 	bl	8002ba0 <logLevel>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002c18:	4413      	add	r3, r2
 8002c1a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8002c1e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002c22:	f107 020c 	add.w	r2, r7, #12
 8002c26:	18d0      	adds	r0, r2, r3
 8002c28:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002c2c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002c30:	b299      	uxth	r1, r3
 8002c32:	1dbb      	adds	r3, r7, #6
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f7ff ff20 	bl	8002a7c <logRegion>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002c44:	4413      	add	r3, r2
 8002c46:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogRegion);
#endif

  /* Parse user string */
  va_list paramList;
  va_start(paramList, aFormat);
 8002c4a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8002c4e:	f107 0308 	add.w	r3, r7, #8
 8002c52:	601a      	str	r2, [r3, #0]
  length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8002c54:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002c58:	f107 020c 	add.w	r2, r7, #12
 8002c5c:	18d0      	adds	r0, r2, r3
 8002c5e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002c62:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8002c66:	f107 0308 	add.w	r3, r7, #8
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c70:	f00f f8c0 	bl	8011df4 <vsniprintf>
 8002c74:	4603      	mov	r3, r0
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aFormat, paramList);
  logString[length++] = '\r';
 8002c82:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f107 030c 	add.w	r3, r7, #12
 8002c92:	210d      	movs	r1, #13
 8002c94:	5499      	strb	r1, [r3, r2]
  logString[length++] = '\n';
 8002c96:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f107 030c 	add.w	r3, r7, #12
 8002ca6:	210a      	movs	r1, #10
 8002ca8:	5499      	strb	r1, [r3, r2]
  logString[length++] = 0;
 8002caa:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f107 030c 	add.w	r3, r7, #12
 8002cba:	2100      	movs	r1, #0
 8002cbc:	5499      	strb	r1, [r3, r2]
  va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 8002cbe:	1dfb      	adds	r3, r7, #7
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d805      	bhi.n	8002cd2 <logApplication+0xfa>
  {
    printf("%s", logString);
 8002cc6:	f107 030c 	add.w	r3, r7, #12
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4805      	ldr	r0, [pc, #20]	; (8002ce4 <logApplication+0x10c>)
 8002cce:	f00e ffb5 	bl	8011c3c <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8002cd2:	bf00      	nop
 8002cd4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cde:	b002      	add	sp, #8
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	080130f4 	.word	0x080130f4

08002ce8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	e00a      	b.n	8002d10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cfa:	f3af 8000 	nop.w
 8002cfe:	4601      	mov	r1, r0
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	60ba      	str	r2, [r7, #8]
 8002d06:	b2ca      	uxtb	r2, r1
 8002d08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	dbf0      	blt.n	8002cfa <_read+0x12>
	}

return len;
 8002d18:	687b      	ldr	r3, [r7, #4]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
	return -1;
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d4a:	605a      	str	r2, [r3, #4]
	return 0;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <_isatty>:

int _isatty(int file)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
	return 1;
 8002d62:	2301      	movs	r3, #1
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
	return 0;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d94:	4a14      	ldr	r2, [pc, #80]	; (8002de8 <_sbrk+0x5c>)
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <_sbrk+0x60>)
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002da0:	4b13      	ldr	r3, [pc, #76]	; (8002df0 <_sbrk+0x64>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d102      	bne.n	8002dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <_sbrk+0x64>)
 8002daa:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <_sbrk+0x68>)
 8002dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dae:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <_sbrk+0x64>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4413      	add	r3, r2
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d207      	bcs.n	8002dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dbc:	f00e ff00 	bl	8011bc0 <__errno>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	230c      	movs	r3, #12
 8002dc4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dca:	e009      	b.n	8002de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dcc:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <_sbrk+0x64>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dd2:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <_sbrk+0x64>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	4a05      	ldr	r2, [pc, #20]	; (8002df0 <_sbrk+0x64>)
 8002ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dde:	68fb      	ldr	r3, [r7, #12]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20030000 	.word	0x20030000
 8002dec:	00000400 	.word	0x00000400
 8002df0:	20000258 	.word	0x20000258
 8002df4:	20006ff8 	.word	0x20006ff8

08002df8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002dfc:	4b26      	ldr	r3, [pc, #152]	; (8002e98 <SystemInit+0xa0>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002e02:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <SystemInit+0xa0>)
 8002e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e08:	4a23      	ldr	r2, [pc, #140]	; (8002e98 <SystemInit+0xa0>)
 8002e0a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e0e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e26:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002e2a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e36:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <SystemInit+0xa4>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e48:	f023 0305 	bic.w	r3, r3, #5
 8002e4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e68:	4a0d      	ldr	r2, [pc, #52]	; (8002ea0 <SystemInit+0xa8>)
 8002e6a:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e70:	4a0b      	ldr	r2, [pc, #44]	; (8002ea0 <SystemInit+0xa8>)
 8002e72:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e88:	2200      	movs	r2, #0
 8002e8a:	619a      	str	r2, [r3, #24]
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	e000ed00 	.word	0xe000ed00
 8002e9c:	faf6fefb 	.word	0xfaf6fefb
 8002ea0:	22041000 	.word	0x22041000

08002ea4 <LL_AHB2_GRP1_EnableClock>:
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
}
 8002eca:	bf00      	nop
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <LL_APB1_GRP2_EnableClock>:
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b085      	sub	sp, #20
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ee4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002efa:	68fb      	ldr	r3, [r7, #12]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_APB2_GRP1_EnableClock>:
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
}
 8002f2e:	bf00      	nop
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8002f40:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <MX_LPUART1_UART_Init+0x90>)
 8002f42:	4a23      	ldr	r2, [pc, #140]	; (8002fd0 <MX_LPUART1_UART_Init+0x94>)
 8002f44:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002f46:	4b21      	ldr	r3, [pc, #132]	; (8002fcc <MX_LPUART1_UART_Init+0x90>)
 8002f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f4c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f4e:	4b1f      	ldr	r3, [pc, #124]	; (8002fcc <MX_LPUART1_UART_Init+0x90>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002f54:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <MX_LPUART1_UART_Init+0x90>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002f5a:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <MX_LPUART1_UART_Init+0x90>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002f60:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <MX_LPUART1_UART_Init+0x90>)
 8002f62:	220c      	movs	r2, #12
 8002f64:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f66:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <MX_LPUART1_UART_Init+0x90>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f6c:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <MX_LPUART1_UART_Init+0x90>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f72:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <MX_LPUART1_UART_Init+0x90>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f78:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <MX_LPUART1_UART_Init+0x90>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002f7e:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <MX_LPUART1_UART_Init+0x90>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002f84:	4811      	ldr	r0, [pc, #68]	; (8002fcc <MX_LPUART1_UART_Init+0x90>)
 8002f86:	f003 f973 	bl	8006270 <HAL_UART_Init>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002f90:	f7ff fc00 	bl	8002794 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f94:	2100      	movs	r1, #0
 8002f96:	480d      	ldr	r0, [pc, #52]	; (8002fcc <MX_LPUART1_UART_Init+0x90>)
 8002f98:	f004 fcad 	bl	80078f6 <HAL_UARTEx_SetTxFifoThreshold>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002fa2:	f7ff fbf7 	bl	8002794 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4808      	ldr	r0, [pc, #32]	; (8002fcc <MX_LPUART1_UART_Init+0x90>)
 8002faa:	f004 fce2 	bl	8007972 <HAL_UARTEx_SetRxFifoThreshold>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002fb4:	f7ff fbee 	bl	8002794 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002fb8:	4804      	ldr	r0, [pc, #16]	; (8002fcc <MX_LPUART1_UART_Init+0x90>)
 8002fba:	f004 fc63 	bl	8007884 <HAL_UARTEx_DisableFifoMode>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002fc4:	f7ff fbe6 	bl	8002794 <Error_Handler>
  }

}
 8002fc8:	bf00      	nop
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20006d60 	.word	0x20006d60
 8002fd0:	40008000 	.word	0x40008000

08002fd4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002fd8:	4b23      	ldr	r3, [pc, #140]	; (8003068 <MX_USART1_UART_Init+0x94>)
 8002fda:	4a24      	ldr	r2, [pc, #144]	; (800306c <MX_USART1_UART_Init+0x98>)
 8002fdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <MX_USART1_UART_Init+0x94>)
 8002fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fe4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fe6:	4b20      	ldr	r3, [pc, #128]	; (8003068 <MX_USART1_UART_Init+0x94>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fec:	4b1e      	ldr	r3, [pc, #120]	; (8003068 <MX_USART1_UART_Init+0x94>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ff2:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <MX_USART1_UART_Init+0x94>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <MX_USART1_UART_Init+0x94>)
 8002ffa:	220c      	movs	r2, #12
 8002ffc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ffe:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <MX_USART1_UART_Init+0x94>)
 8003000:	2200      	movs	r2, #0
 8003002:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8003004:	4b18      	ldr	r3, [pc, #96]	; (8003068 <MX_USART1_UART_Init+0x94>)
 8003006:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800300a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800300c:	4b16      	ldr	r3, [pc, #88]	; (8003068 <MX_USART1_UART_Init+0x94>)
 800300e:	2200      	movs	r2, #0
 8003010:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <MX_USART1_UART_Init+0x94>)
 8003014:	2200      	movs	r2, #0
 8003016:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003018:	4b13      	ldr	r3, [pc, #76]	; (8003068 <MX_USART1_UART_Init+0x94>)
 800301a:	2200      	movs	r2, #0
 800301c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800301e:	4812      	ldr	r0, [pc, #72]	; (8003068 <MX_USART1_UART_Init+0x94>)
 8003020:	f003 f926 	bl	8006270 <HAL_UART_Init>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800302a:	f7ff fbb3 	bl	8002794 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800302e:	2100      	movs	r1, #0
 8003030:	480d      	ldr	r0, [pc, #52]	; (8003068 <MX_USART1_UART_Init+0x94>)
 8003032:	f004 fc60 	bl	80078f6 <HAL_UARTEx_SetTxFifoThreshold>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 800303c:	f7ff fbaa 	bl	8002794 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003040:	2100      	movs	r1, #0
 8003042:	4809      	ldr	r0, [pc, #36]	; (8003068 <MX_USART1_UART_Init+0x94>)
 8003044:	f004 fc95 	bl	8007972 <HAL_UARTEx_SetRxFifoThreshold>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800304e:	f7ff fba1 	bl	8002794 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003052:	4805      	ldr	r0, [pc, #20]	; (8003068 <MX_USART1_UART_Init+0x94>)
 8003054:	f004 fc16 	bl	8007884 <HAL_UARTEx_DisableFifoMode>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800305e:	f7ff fb99 	bl	8002794 <Error_Handler>
  }

}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20006e4c 	.word	0x20006e4c
 800306c:	40013800 	.word	0x40013800

08003070 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003078:	f107 030c 	add.w	r3, r7, #12
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a4f      	ldr	r2, [pc, #316]	; (80031cc <HAL_UART_MspInit+0x15c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d148      	bne.n	8003124 <HAL_UART_MspInit+0xb4>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003092:	2001      	movs	r0, #1
 8003094:	f7ff ff1f 	bl	8002ed6 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003098:	2001      	movs	r0, #1
 800309a:	f7ff ff03 	bl	8002ea4 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800309e:	230c      	movs	r3, #12
 80030a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a2:	2302      	movs	r3, #2
 80030a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80030ae:	2308      	movs	r3, #8
 80030b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b2:	f107 030c 	add.w	r3, r7, #12
 80030b6:	4619      	mov	r1, r3
 80030b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030bc:	f000 fd82 	bl	8003bc4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 80030c0:	4b43      	ldr	r3, [pc, #268]	; (80031d0 <HAL_UART_MspInit+0x160>)
 80030c2:	4a44      	ldr	r2, [pc, #272]	; (80031d4 <HAL_UART_MspInit+0x164>)
 80030c4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80030c6:	4b42      	ldr	r3, [pc, #264]	; (80031d0 <HAL_UART_MspInit+0x160>)
 80030c8:	2211      	movs	r2, #17
 80030ca:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030cc:	4b40      	ldr	r3, [pc, #256]	; (80031d0 <HAL_UART_MspInit+0x160>)
 80030ce:	2210      	movs	r2, #16
 80030d0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030d2:	4b3f      	ldr	r3, [pc, #252]	; (80031d0 <HAL_UART_MspInit+0x160>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030d8:	4b3d      	ldr	r3, [pc, #244]	; (80031d0 <HAL_UART_MspInit+0x160>)
 80030da:	2280      	movs	r2, #128	; 0x80
 80030dc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030de:	4b3c      	ldr	r3, [pc, #240]	; (80031d0 <HAL_UART_MspInit+0x160>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030e4:	4b3a      	ldr	r3, [pc, #232]	; (80031d0 <HAL_UART_MspInit+0x160>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80030ea:	4b39      	ldr	r3, [pc, #228]	; (80031d0 <HAL_UART_MspInit+0x160>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030f0:	4b37      	ldr	r3, [pc, #220]	; (80031d0 <HAL_UART_MspInit+0x160>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80030f6:	4836      	ldr	r0, [pc, #216]	; (80031d0 <HAL_UART_MspInit+0x160>)
 80030f8:	f000 fa90 	bl	800361c <HAL_DMA_Init>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 8003102:	f7ff fb47 	bl	8002794 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a31      	ldr	r2, [pc, #196]	; (80031d0 <HAL_UART_MspInit+0x160>)
 800310a:	675a      	str	r2, [r3, #116]	; 0x74
 800310c:	4a30      	ldr	r2, [pc, #192]	; (80031d0 <HAL_UART_MspInit+0x160>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8003112:	2200      	movs	r2, #0
 8003114:	2105      	movs	r1, #5
 8003116:	2025      	movs	r0, #37	; 0x25
 8003118:	f000 fa29 	bl	800356e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800311c:	2025      	movs	r0, #37	; 0x25
 800311e:	f000 fa40 	bl	80035a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003122:	e04e      	b.n	80031c2 <HAL_UART_MspInit+0x152>
  else if(uartHandle->Instance==USART1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a2b      	ldr	r2, [pc, #172]	; (80031d8 <HAL_UART_MspInit+0x168>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d149      	bne.n	80031c2 <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART1_CLK_ENABLE();
 800312e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003132:	f7ff fee9 	bl	8002f08 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003136:	2001      	movs	r0, #1
 8003138:	f7ff feb4 	bl	8002ea4 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800313c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003140:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003142:	2302      	movs	r3, #2
 8003144:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314a:	2300      	movs	r3, #0
 800314c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800314e:	2307      	movs	r3, #7
 8003150:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003152:	f107 030c 	add.w	r3, r7, #12
 8003156:	4619      	mov	r1, r3
 8003158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800315c:	f000 fd32 	bl	8003bc4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8003160:	4b1e      	ldr	r3, [pc, #120]	; (80031dc <HAL_UART_MspInit+0x16c>)
 8003162:	4a1f      	ldr	r2, [pc, #124]	; (80031e0 <HAL_UART_MspInit+0x170>)
 8003164:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003166:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <HAL_UART_MspInit+0x16c>)
 8003168:	220f      	movs	r2, #15
 800316a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800316c:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <HAL_UART_MspInit+0x16c>)
 800316e:	2210      	movs	r2, #16
 8003170:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <HAL_UART_MspInit+0x16c>)
 8003174:	2200      	movs	r2, #0
 8003176:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003178:	4b18      	ldr	r3, [pc, #96]	; (80031dc <HAL_UART_MspInit+0x16c>)
 800317a:	2280      	movs	r2, #128	; 0x80
 800317c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800317e:	4b17      	ldr	r3, [pc, #92]	; (80031dc <HAL_UART_MspInit+0x16c>)
 8003180:	2200      	movs	r2, #0
 8003182:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003184:	4b15      	ldr	r3, [pc, #84]	; (80031dc <HAL_UART_MspInit+0x16c>)
 8003186:	2200      	movs	r2, #0
 8003188:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800318a:	4b14      	ldr	r3, [pc, #80]	; (80031dc <HAL_UART_MspInit+0x16c>)
 800318c:	2200      	movs	r2, #0
 800318e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003190:	4b12      	ldr	r3, [pc, #72]	; (80031dc <HAL_UART_MspInit+0x16c>)
 8003192:	2200      	movs	r2, #0
 8003194:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003196:	4811      	ldr	r0, [pc, #68]	; (80031dc <HAL_UART_MspInit+0x16c>)
 8003198:	f000 fa40 	bl	800361c <HAL_DMA_Init>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_UART_MspInit+0x136>
      Error_Handler();
 80031a2:	f7ff faf7 	bl	8002794 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a0c      	ldr	r2, [pc, #48]	; (80031dc <HAL_UART_MspInit+0x16c>)
 80031aa:	675a      	str	r2, [r3, #116]	; 0x74
 80031ac:	4a0b      	ldr	r2, [pc, #44]	; (80031dc <HAL_UART_MspInit+0x16c>)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80031b2:	2200      	movs	r2, #0
 80031b4:	2105      	movs	r1, #5
 80031b6:	2024      	movs	r0, #36	; 0x24
 80031b8:	f000 f9d9 	bl	800356e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031bc:	2024      	movs	r0, #36	; 0x24
 80031be:	f000 f9f0 	bl	80035a2 <HAL_NVIC_EnableIRQ>
}
 80031c2:	bf00      	nop
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40008000 	.word	0x40008000
 80031d0:	20006ed8 	.word	0x20006ed8
 80031d4:	40020044 	.word	0x40020044
 80031d8:	40013800 	.word	0x40013800
 80031dc:	20006dec 	.word	0x20006dec
 80031e0:	40020444 	.word	0x40020444

080031e4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80031e4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031e6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031e8:	3304      	adds	r3, #4

080031ea <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031ea:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ec:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80031ee:	d3f9      	bcc.n	80031e4 <CopyDataInit>
  bx lr
 80031f0:	4770      	bx	lr

080031f2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80031f2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80031f4:	3004      	adds	r0, #4

080031f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80031f6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80031f8:	d3fb      	bcc.n	80031f2 <FillZerobss>
  bx lr
 80031fa:	4770      	bx	lr

080031fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031fc:	480c      	ldr	r0, [pc, #48]	; (8003230 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80031fe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003200:	f7ff fdfa 	bl	8002df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003204:	480b      	ldr	r0, [pc, #44]	; (8003234 <LoopForever+0x8>)
 8003206:	490c      	ldr	r1, [pc, #48]	; (8003238 <LoopForever+0xc>)
 8003208:	4a0c      	ldr	r2, [pc, #48]	; (800323c <LoopForever+0x10>)
 800320a:	2300      	movs	r3, #0
 800320c:	f7ff ffed 	bl	80031ea <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003210:	480b      	ldr	r0, [pc, #44]	; (8003240 <LoopForever+0x14>)
 8003212:	490c      	ldr	r1, [pc, #48]	; (8003244 <LoopForever+0x18>)
 8003214:	2300      	movs	r3, #0
 8003216:	f7ff ffee 	bl	80031f6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800321a:	480b      	ldr	r0, [pc, #44]	; (8003248 <LoopForever+0x1c>)
 800321c:	490b      	ldr	r1, [pc, #44]	; (800324c <LoopForever+0x20>)
 800321e:	2300      	movs	r3, #0
 8003220:	f7ff ffe9 	bl	80031f6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003224:	f00e fcd2 	bl	8011bcc <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003228:	f7ff f91e 	bl	8002468 <main>

0800322c <LoopForever>:

LoopForever:
  b LoopForever
 800322c:	e7fe      	b.n	800322c <LoopForever>
 800322e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003230:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003234:	20000004 	.word	0x20000004
 8003238:	2000008c 	.word	0x2000008c
 800323c:	080142c4 	.word	0x080142c4
  INIT_BSS _sbss, _ebss
 8003240:	20000230 	.word	0x20000230
 8003244:	20006ff4 	.word	0x20006ff4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003248:	200301ec 	.word	0x200301ec
 800324c:	20030d7f 	.word	0x20030d7f

08003250 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003250:	e7fe      	b.n	8003250 <ADC1_IRQHandler>
	...

08003254 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4a04      	ldr	r2, [pc, #16]	; (8003270 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	6053      	str	r3, [r2, #4]
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	e0042000 	.word	0xe0042000

08003274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800327e:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <HAL_Init+0x3c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a0b      	ldr	r2, [pc, #44]	; (80032b0 <HAL_Init+0x3c>)
 8003284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003288:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800328a:	2003      	movs	r0, #3
 800328c:	f000 f964 	bl	8003558 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003290:	2000      	movs	r0, #0
 8003292:	f7ff fb47 	bl	8002924 <HAL_InitTick>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	71fb      	strb	r3, [r7, #7]
 80032a0:	e001      	b.n	80032a6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032a2:	f7ff fb06 	bl	80028b2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032a6:	79fb      	ldrb	r3, [r7, #7]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	58004000 	.word	0x58004000

080032b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_IncTick+0x20>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_IncTick+0x24>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4413      	add	r3, r2
 80032c4:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <HAL_IncTick+0x24>)
 80032c6:	6013      	str	r3, [r2, #0]
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20000018 	.word	0x20000018
 80032d8:	20006f38 	.word	0x20006f38

080032dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return uwTick;
 80032e0:	4b03      	ldr	r3, [pc, #12]	; (80032f0 <HAL_GetTick+0x14>)
 80032e2:	681b      	ldr	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20006f38 	.word	0x20006f38

080032f4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80032f8:	4b03      	ldr	r3, [pc, #12]	; (8003308 <HAL_GetTickPrio+0x14>)
 80032fa:	681b      	ldr	r3, [r3, #0]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	20000014 	.word	0x20000014

0800330c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003310:	f7ff ffa0 	bl	8003254 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003314:	bf00      	nop
 8003316:	bd80      	pop	{r7, pc}

08003318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003328:	4b0c      	ldr	r3, [pc, #48]	; (800335c <__NVIC_SetPriorityGrouping+0x44>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003334:	4013      	ands	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800334a:	4a04      	ldr	r2, [pc, #16]	; (800335c <__NVIC_SetPriorityGrouping+0x44>)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	60d3      	str	r3, [r2, #12]
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003364:	4b04      	ldr	r3, [pc, #16]	; (8003378 <__NVIC_GetPriorityGrouping+0x18>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	0a1b      	lsrs	r3, r3, #8
 800336a:	f003 0307 	and.w	r3, r3, #7
}
 800336e:	4618      	mov	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	2b00      	cmp	r3, #0
 800338c:	db0b      	blt.n	80033a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	f003 021f 	and.w	r2, r3, #31
 8003394:	4907      	ldr	r1, [pc, #28]	; (80033b4 <__NVIC_EnableIRQ+0x38>)
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	2001      	movs	r0, #1
 800339e:	fa00 f202 	lsl.w	r2, r0, r2
 80033a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	e000e100 	.word	0xe000e100

080033b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	db10      	blt.n	80033ec <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	f003 021f 	and.w	r2, r3, #31
 80033d0:	4909      	ldr	r1, [pc, #36]	; (80033f8 <__NVIC_DisableIRQ+0x40>)
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2001      	movs	r0, #1
 80033da:	fa00 f202 	lsl.w	r2, r0, r2
 80033de:	3320      	adds	r3, #32
 80033e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80033e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80033e8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	e000e100 	.word	0xe000e100

080033fc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340a:	2b00      	cmp	r3, #0
 800340c:	db0c      	blt.n	8003428 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	f003 021f 	and.w	r2, r3, #31
 8003414:	4907      	ldr	r1, [pc, #28]	; (8003434 <__NVIC_SetPendingIRQ+0x38>)
 8003416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	2001      	movs	r0, #1
 800341e:	fa00 f202 	lsl.w	r2, r0, r2
 8003422:	3340      	adds	r3, #64	; 0x40
 8003424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	e000e100 	.word	0xe000e100

08003438 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	2b00      	cmp	r3, #0
 8003448:	db0c      	blt.n	8003464 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	f003 021f 	and.w	r2, r3, #31
 8003450:	4907      	ldr	r1, [pc, #28]	; (8003470 <__NVIC_ClearPendingIRQ+0x38>)
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	2001      	movs	r0, #1
 800345a:	fa00 f202 	lsl.w	r2, r0, r2
 800345e:	3360      	adds	r3, #96	; 0x60
 8003460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000e100 	.word	0xe000e100

08003474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	6039      	str	r1, [r7, #0]
 800347e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003484:	2b00      	cmp	r3, #0
 8003486:	db0a      	blt.n	800349e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	b2da      	uxtb	r2, r3
 800348c:	490c      	ldr	r1, [pc, #48]	; (80034c0 <__NVIC_SetPriority+0x4c>)
 800348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003492:	0112      	lsls	r2, r2, #4
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	440b      	add	r3, r1
 8003498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800349c:	e00a      	b.n	80034b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	4908      	ldr	r1, [pc, #32]	; (80034c4 <__NVIC_SetPriority+0x50>)
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	3b04      	subs	r3, #4
 80034ac:	0112      	lsls	r2, r2, #4
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	440b      	add	r3, r1
 80034b2:	761a      	strb	r2, [r3, #24]
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	e000e100 	.word	0xe000e100
 80034c4:	e000ed00 	.word	0xe000ed00

080034c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b089      	sub	sp, #36	; 0x24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f1c3 0307 	rsb	r3, r3, #7
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	bf28      	it	cs
 80034e6:	2304      	movcs	r3, #4
 80034e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	3304      	adds	r3, #4
 80034ee:	2b06      	cmp	r3, #6
 80034f0:	d902      	bls.n	80034f8 <NVIC_EncodePriority+0x30>
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	3b03      	subs	r3, #3
 80034f6:	e000      	b.n	80034fa <NVIC_EncodePriority+0x32>
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43da      	mvns	r2, r3
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	401a      	ands	r2, r3
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003510:	f04f 31ff 	mov.w	r1, #4294967295
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	fa01 f303 	lsl.w	r3, r1, r3
 800351a:	43d9      	mvns	r1, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003520:	4313      	orrs	r3, r2
         );
}
 8003522:	4618      	mov	r0, r3
 8003524:	3724      	adds	r7, #36	; 0x24
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
	...

08003530 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003534:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003538:	4b05      	ldr	r3, [pc, #20]	; (8003550 <__NVIC_SystemReset+0x20>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003540:	4903      	ldr	r1, [pc, #12]	; (8003550 <__NVIC_SystemReset+0x20>)
 8003542:	4b04      	ldr	r3, [pc, #16]	; (8003554 <__NVIC_SystemReset+0x24>)
 8003544:	4313      	orrs	r3, r2
 8003546:	60cb      	str	r3, [r1, #12]
 8003548:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800354c:	bf00      	nop
 800354e:	e7fd      	b.n	800354c <__NVIC_SystemReset+0x1c>
 8003550:	e000ed00 	.word	0xe000ed00
 8003554:	05fa0004 	.word	0x05fa0004

08003558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff fed9 	bl	8003318 <__NVIC_SetPriorityGrouping>
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b086      	sub	sp, #24
 8003572:	af00      	add	r7, sp, #0
 8003574:	4603      	mov	r3, r0
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800357c:	f7ff fef0 	bl	8003360 <__NVIC_GetPriorityGrouping>
 8003580:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	6978      	ldr	r0, [r7, #20]
 8003588:	f7ff ff9e 	bl	80034c8 <NVIC_EncodePriority>
 800358c:	4602      	mov	r2, r0
 800358e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff ff6d 	bl	8003474 <__NVIC_SetPriority>
}
 800359a:	bf00      	nop
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	4603      	mov	r3, r0
 80035aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fee3 	bl	800337c <__NVIC_EnableIRQ>
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	4603      	mov	r3, r0
 80035c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80035c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff fef3 	bl	80033b8 <__NVIC_DisableIRQ>
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80035de:	f7ff ffa7 	bl	8003530 <__NVIC_SystemReset>

080035e2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	4603      	mov	r3, r0
 80035ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80035ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff ff03 	bl	80033fc <__NVIC_SetPendingIRQ>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	4603      	mov	r3, r0
 8003606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff13 	bl	8003438 <__NVIC_ClearPendingIRQ>
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e08e      	b.n	800374c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	4b47      	ldr	r3, [pc, #284]	; (8003754 <HAL_DMA_Init+0x138>)
 8003636:	429a      	cmp	r2, r3
 8003638:	d80f      	bhi.n	800365a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	4b45      	ldr	r3, [pc, #276]	; (8003758 <HAL_DMA_Init+0x13c>)
 8003642:	4413      	add	r3, r2
 8003644:	4a45      	ldr	r2, [pc, #276]	; (800375c <HAL_DMA_Init+0x140>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	009a      	lsls	r2, r3, #2
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a42      	ldr	r2, [pc, #264]	; (8003760 <HAL_DMA_Init+0x144>)
 8003656:	641a      	str	r2, [r3, #64]	; 0x40
 8003658:	e00e      	b.n	8003678 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	4b40      	ldr	r3, [pc, #256]	; (8003764 <HAL_DMA_Init+0x148>)
 8003662:	4413      	add	r3, r2
 8003664:	4a3d      	ldr	r2, [pc, #244]	; (800375c <HAL_DMA_Init+0x140>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	091b      	lsrs	r3, r3, #4
 800366c:	009a      	lsls	r2, r3, #2
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a3c      	ldr	r2, [pc, #240]	; (8003768 <HAL_DMA_Init+0x14c>)
 8003676:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800368e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003692:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800369c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fa16 	bl	8003afc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036d8:	d102      	bne.n	80036e0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80036ec:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036f6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d010      	beq.n	8003722 <HAL_DMA_Init+0x106>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b04      	cmp	r3, #4
 8003706:	d80c      	bhi.n	8003722 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 fa35 	bl	8003b78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800371e:	605a      	str	r2, [r3, #4]
 8003720:	e008      	b.n	8003734 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40020407 	.word	0x40020407
 8003758:	bffdfff8 	.word	0xbffdfff8
 800375c:	cccccccd 	.word	0xcccccccd
 8003760:	40020000 	.word	0x40020000
 8003764:	bffdfbf8 	.word	0xbffdfbf8
 8003768:	40020400 	.word	0x40020400

0800376c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_DMA_Start_IT+0x20>
 8003788:	2302      	movs	r3, #2
 800378a:	e066      	b.n	800385a <HAL_DMA_Start_IT+0xee>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b01      	cmp	r3, #1
 800379e:	d155      	bne.n	800384c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0201 	bic.w	r2, r2, #1
 80037bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f95a 	bl	8003a7e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d008      	beq.n	80037e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 020e 	orr.w	r2, r2, #14
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	e00f      	b.n	8003804 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0204 	bic.w	r2, r2, #4
 80037f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 020a 	orr.w	r2, r2, #10
 8003802:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003820:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	2b00      	cmp	r3, #0
 8003828:	d007      	beq.n	800383a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003838:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0201 	orr.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	e005      	b.n	8003858 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003854:	2302      	movs	r3, #2
 8003856:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003858:	7dfb      	ldrb	r3, [r7, #23]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d005      	beq.n	8003886 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2204      	movs	r2, #4
 800387e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
 8003884:	e047      	b.n	8003916 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 020e 	bic.w	r2, r2, #14
 8003894:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ba:	f003 021c 	and.w	r2, r3, #28
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	2101      	movs	r1, #1
 80038c4:	fa01 f202 	lsl.w	r2, r1, r2
 80038c8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038d2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00c      	beq.n	80038f6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038f4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	4798      	blx	r3
    }
  }
  return status;
 8003916:	7bfb      	ldrb	r3, [r7, #15]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393c:	f003 031c 	and.w	r3, r3, #28
 8003940:	2204      	movs	r2, #4
 8003942:	409a      	lsls	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4013      	ands	r3, r2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d026      	beq.n	800399a <HAL_DMA_IRQHandler+0x7a>
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	2b00      	cmp	r3, #0
 8003954:	d021      	beq.n	800399a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b00      	cmp	r3, #0
 8003962:	d107      	bne.n	8003974 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0204 	bic.w	r2, r2, #4
 8003972:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003978:	f003 021c 	and.w	r2, r3, #28
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	2104      	movs	r1, #4
 8003982:	fa01 f202 	lsl.w	r2, r1, r2
 8003986:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	2b00      	cmp	r3, #0
 800398e:	d071      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003998:	e06c      	b.n	8003a74 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	f003 031c 	and.w	r3, r3, #28
 80039a2:	2202      	movs	r2, #2
 80039a4:	409a      	lsls	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d02e      	beq.n	8003a0c <HAL_DMA_IRQHandler+0xec>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d029      	beq.n	8003a0c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10b      	bne.n	80039de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 020a 	bic.w	r2, r2, #10
 80039d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	f003 021c 	and.w	r2, r3, #28
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	2102      	movs	r1, #2
 80039ec:	fa01 f202 	lsl.w	r2, r1, r2
 80039f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d038      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a0a:	e033      	b.n	8003a74 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a10:	f003 031c 	and.w	r3, r3, #28
 8003a14:	2208      	movs	r2, #8
 8003a16:	409a      	lsls	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d02a      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x156>
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d025      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 020e 	bic.w	r2, r2, #14
 8003a38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	f003 021c 	and.w	r2, r3, #28
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	2101      	movs	r1, #1
 8003a48:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d004      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop
}
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b085      	sub	sp, #20
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a94:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d004      	beq.n	8003aa8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003aa6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aac:	f003 021c 	and.w	r2, r3, #28
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d108      	bne.n	8003ade <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003adc:	e007      	b.n	8003aee <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	60da      	str	r2, [r3, #12]
}
 8003aee:	bf00      	nop
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d80a      	bhi.n	8003b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b14:	089b      	lsrs	r3, r3, #2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b1c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6493      	str	r3, [r2, #72]	; 0x48
 8003b24:	e007      	b.n	8003b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	089b      	lsrs	r3, r3, #2
 8003b2c:	009a      	lsls	r2, r3, #2
 8003b2e:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b30:	4413      	add	r3, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	3b08      	subs	r3, #8
 8003b3e:	4a0c      	ldr	r2, [pc, #48]	; (8003b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b40:	fba2 2303 	umull	r2, r3, r2, r3
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a0a      	ldr	r2, [pc, #40]	; (8003b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b4c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	2201      	movs	r2, #1
 8003b56:	409a      	lsls	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	40020407 	.word	0x40020407
 8003b6c:	4002081c 	.word	0x4002081c
 8003b70:	cccccccd 	.word	0xcccccccd
 8003b74:	40020880 	.word	0x40020880

08003b78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b88:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	461a      	mov	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a09      	ldr	r2, [pc, #36]	; (8003bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003b9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	409a      	lsls	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003bae:	bf00      	nop
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	1000823f 	.word	0x1000823f
 8003bc0:	40020940 	.word	0x40020940

08003bc4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bd2:	e14c      	b.n	8003e6e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	2101      	movs	r1, #1
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003be0:	4013      	ands	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 813e 	beq.w	8003e68 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d00b      	beq.n	8003c0c <HAL_GPIO_Init+0x48>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d007      	beq.n	8003c0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c00:	2b11      	cmp	r3, #17
 8003c02:	d003      	beq.n	8003c0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b12      	cmp	r3, #18
 8003c0a:	d130      	bne.n	8003c6e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	2203      	movs	r2, #3
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4013      	ands	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c42:	2201      	movs	r2, #1
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	091b      	lsrs	r3, r3, #4
 8003c58:	f003 0201 	and.w	r2, r3, #1
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	2203      	movs	r2, #3
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4013      	ands	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_Init+0xea>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b12      	cmp	r3, #18
 8003cac:	d123      	bne.n	8003cf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	08da      	lsrs	r2, r3, #3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3208      	adds	r2, #8
 8003cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	220f      	movs	r2, #15
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	08da      	lsrs	r2, r3, #3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3208      	adds	r2, #8
 8003cf0:	6939      	ldr	r1, [r7, #16]
 8003cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	2203      	movs	r2, #3
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f003 0203 	and.w	r2, r3, #3
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 8098 	beq.w	8003e68 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003d38:	4a54      	ldr	r2, [pc, #336]	; (8003e8c <HAL_GPIO_Init+0x2c8>)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	089b      	lsrs	r3, r3, #2
 8003d3e:	3302      	adds	r3, #2
 8003d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	220f      	movs	r2, #15
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	43db      	mvns	r3, r3
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d62:	d019      	beq.n	8003d98 <HAL_GPIO_Init+0x1d4>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a4a      	ldr	r2, [pc, #296]	; (8003e90 <HAL_GPIO_Init+0x2cc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d013      	beq.n	8003d94 <HAL_GPIO_Init+0x1d0>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a49      	ldr	r2, [pc, #292]	; (8003e94 <HAL_GPIO_Init+0x2d0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00d      	beq.n	8003d90 <HAL_GPIO_Init+0x1cc>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a48      	ldr	r2, [pc, #288]	; (8003e98 <HAL_GPIO_Init+0x2d4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d007      	beq.n	8003d8c <HAL_GPIO_Init+0x1c8>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a47      	ldr	r2, [pc, #284]	; (8003e9c <HAL_GPIO_Init+0x2d8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d101      	bne.n	8003d88 <HAL_GPIO_Init+0x1c4>
 8003d84:	2304      	movs	r3, #4
 8003d86:	e008      	b.n	8003d9a <HAL_GPIO_Init+0x1d6>
 8003d88:	2307      	movs	r3, #7
 8003d8a:	e006      	b.n	8003d9a <HAL_GPIO_Init+0x1d6>
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e004      	b.n	8003d9a <HAL_GPIO_Init+0x1d6>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e002      	b.n	8003d9a <HAL_GPIO_Init+0x1d6>
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <HAL_GPIO_Init+0x1d6>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	f002 0203 	and.w	r2, r2, #3
 8003da0:	0092      	lsls	r2, r2, #2
 8003da2:	4093      	lsls	r3, r2
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003daa:	4938      	ldr	r1, [pc, #224]	; (8003e8c <HAL_GPIO_Init+0x2c8>)
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	089b      	lsrs	r3, r3, #2
 8003db0:	3302      	adds	r3, #2
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003db8:	4b39      	ldr	r3, [pc, #228]	; (8003ea0 <HAL_GPIO_Init+0x2dc>)
 8003dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003dde:	4a30      	ldr	r2, [pc, #192]	; (8003ea0 <HAL_GPIO_Init+0x2dc>)
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003de6:	4b2e      	ldr	r3, [pc, #184]	; (8003ea0 <HAL_GPIO_Init+0x2dc>)
 8003de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	43db      	mvns	r3, r3
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4013      	ands	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e0c:	4a24      	ldr	r2, [pc, #144]	; (8003ea0 <HAL_GPIO_Init+0x2dc>)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e14:	4b22      	ldr	r3, [pc, #136]	; (8003ea0 <HAL_GPIO_Init+0x2dc>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4013      	ands	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e38:	4a19      	ldr	r2, [pc, #100]	; (8003ea0 <HAL_GPIO_Init+0x2dc>)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e3e:	4b18      	ldr	r3, [pc, #96]	; (8003ea0 <HAL_GPIO_Init+0x2dc>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	43db      	mvns	r3, r3
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e62:	4a0f      	ldr	r2, [pc, #60]	; (8003ea0 <HAL_GPIO_Init+0x2dc>)
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f47f aeab 	bne.w	8003bd4 <HAL_GPIO_Init+0x10>
  }
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40010000 	.word	0x40010000
 8003e90:	48000400 	.word	0x48000400
 8003e94:	48000800 	.word	0x48000800
 8003e98:	48000c00 	.word	0x48000c00
 8003e9c:	48001000 	.word	0x48001000
 8003ea0:	58000800 	.word	0x58000800

08003ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	807b      	strh	r3, [r7, #2]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eb4:	787b      	ldrb	r3, [r7, #1]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eba:	887a      	ldrh	r2, [r7, #2]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ec0:	e002      	b.n	8003ec8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ec2:	887a      	ldrh	r2, [r7, #2]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003eda:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <HAL_HSEM_IRQHandler+0x30>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003ee0:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <HAL_HSEM_IRQHandler+0x30>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	4906      	ldr	r1, [pc, #24]	; (8003f04 <HAL_HSEM_IRQHandler+0x30>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003eee:	4a05      	ldr	r2, [pc, #20]	; (8003f04 <HAL_HSEM_IRQHandler+0x30>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f807 	bl	8003f08 <HAL_HSEM_FreeCallback>
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	58001500 	.word	0x58001500

08003f08 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f20:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a04      	ldr	r2, [pc, #16]	; (8003f38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2a:	6013      	str	r3, [r2, #0]
}
 8003f2c:	bf00      	nop
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	58000400 	.word	0x58000400

08003f3c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	58000400 	.word	0x58000400

08003f58 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f6a:	d101      	bne.n	8003f70 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e000      	b.n	8003f72 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <LL_RCC_HSE_Enable>:
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8e:	6013      	str	r3, [r2, #0]
}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <LL_RCC_HSE_Disable>:
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fac:	6013      	str	r3, [r2, #0]
}
 8003fae:	bf00      	nop
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <LL_RCC_HSE_IsReady>:
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fca:	d101      	bne.n	8003fd0 <LL_RCC_HSE_IsReady+0x18>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <LL_RCC_HSE_IsReady+0x1a>
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <LL_RCC_HSI_Enable>:
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fee:	6013      	str	r3, [r2, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <LL_RCC_HSI_Disable>:
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800400c:	6013      	str	r3, [r2, #0]
}
 800400e:	bf00      	nop
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <LL_RCC_HSI_IsReady>:
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800401c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402a:	d101      	bne.n	8004030 <LL_RCC_HSI_IsReady+0x18>
 800402c:	2301      	movs	r3, #1
 800402e:	e000      	b.n	8004032 <LL_RCC_HSI_IsReady+0x1a>
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <LL_RCC_HSI_SetCalibTrimming>:
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	061b      	lsls	r3, r3, #24
 8004052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004056:	4313      	orrs	r3, r2
 8004058:	604b      	str	r3, [r1, #4]
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <LL_RCC_HSI48_Enable>:
{
 8004066:	b480      	push	{r7}
 8004068:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800406a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004072:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800407e:	bf00      	nop
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <LL_RCC_HSI48_Disable>:
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800408c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004090:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004094:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80040a0:	bf00      	nop
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <LL_RCC_HSI48_IsReady>:
{
 80040aa:	b480      	push	{r7}
 80040ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80040ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d101      	bne.n	80040c2 <LL_RCC_HSI48_IsReady+0x18>
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <LL_RCC_HSI48_IsReady+0x1a>
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <LL_RCC_LSE_Enable>:
{
 80040ce:	b480      	push	{r7}
 80040d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80040d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040e6:	bf00      	nop
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <LL_RCC_LSE_Disable>:
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80040f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <LL_RCC_LSE_EnableBypass>:
{
 8004112:	b480      	push	{r7}
 8004114:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004122:	f043 0304 	orr.w	r3, r3, #4
 8004126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800412a:	bf00      	nop
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <LL_RCC_LSE_DisableBypass>:
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004144:	f023 0304 	bic.w	r3, r3, #4
 8004148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <LL_RCC_LSE_IsReady>:
{
 8004156:	b480      	push	{r7}
 8004158:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800415a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b02      	cmp	r3, #2
 8004168:	d101      	bne.n	800416e <LL_RCC_LSE_IsReady+0x18>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <LL_RCC_LSE_IsReady+0x1a>
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <LL_RCC_LSI1_Enable>:
{
 800417a:	b480      	push	{r7}
 800417c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800417e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004186:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004192:	bf00      	nop
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <LL_RCC_LSI1_Disable>:
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80041a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041ac:	f023 0301 	bic.w	r3, r3, #1
 80041b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80041b4:	bf00      	nop
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <LL_RCC_LSI1_IsReady>:
{
 80041be:	b480      	push	{r7}
 80041c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80041c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d101      	bne.n	80041d6 <LL_RCC_LSI1_IsReady+0x18>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <LL_RCC_LSI1_IsReady+0x1a>
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <LL_RCC_LSI2_Enable>:
{
 80041e2:	b480      	push	{r7}
 80041e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80041e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041f2:	f043 0304 	orr.w	r3, r3, #4
 80041f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80041fa:	bf00      	nop
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <LL_RCC_LSI2_Disable>:
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004210:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004214:	f023 0304 	bic.w	r3, r3, #4
 8004218:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <LL_RCC_LSI2_IsReady>:
{
 8004226:	b480      	push	{r7}
 8004228:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800422a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b08      	cmp	r3, #8
 8004238:	d101      	bne.n	800423e <LL_RCC_LSI2_IsReady+0x18>
 800423a:	2301      	movs	r3, #1
 800423c:	e000      	b.n	8004240 <LL_RCC_LSI2_IsReady+0x1a>
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <LL_RCC_LSI2_SetTrimming>:
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800425a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	021b      	lsls	r3, r3, #8
 8004262:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <LL_RCC_MSI_Enable>:
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800427c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004286:	f043 0301 	orr.w	r3, r3, #1
 800428a:	6013      	str	r3, [r2, #0]
}
 800428c:	bf00      	nop
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <LL_RCC_MSI_Disable>:
{
 8004296:	b480      	push	{r7}
 8004298:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800429a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	6013      	str	r3, [r2, #0]
}
 80042aa:	bf00      	nop
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <LL_RCC_MSI_IsReady>:
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80042b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d101      	bne.n	80042ca <LL_RCC_MSI_IsReady+0x16>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <LL_RCC_MSI_IsReady+0x18>
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <LL_RCC_MSI_SetRange>:
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80042de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	600b      	str	r3, [r1, #0]
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <LL_RCC_MSI_GetRange>:
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800430e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2bb0      	cmp	r3, #176	; 0xb0
 8004314:	d901      	bls.n	800431a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004316:	23b0      	movs	r3, #176	; 0xb0
 8004318:	607b      	str	r3, [r7, #4]
  return msiRange;
 800431a:	687b      	ldr	r3, [r7, #4]
}
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	021b      	lsls	r3, r3, #8
 800433e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004342:	4313      	orrs	r3, r2
 8004344:	604b      	str	r3, [r1, #4]
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <LL_RCC_SetSysClkSource>:
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800435a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f023 0203 	bic.w	r2, r3, #3
 8004364:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4313      	orrs	r3, r2
 800436c:	608b      	str	r3, [r1, #8]
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <LL_RCC_GetSysClkSource>:
{
 800437a:	b480      	push	{r7}
 800437c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800437e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 030c 	and.w	r3, r3, #12
}
 8004388:	4618      	mov	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <LL_RCC_SetAHBPrescaler>:
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800439a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	608b      	str	r3, [r1, #8]
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <LL_C2_RCC_SetAHBPrescaler>:
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80043c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <LL_RCC_SetAHB4Prescaler>:
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80043ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043f6:	f023 020f 	bic.w	r2, r3, #15
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <LL_RCC_SetAPB1Prescaler>:
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800441c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004426:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4313      	orrs	r3, r2
 800442e:	608b      	str	r3, [r1, #8]
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <LL_RCC_SetAPB2Prescaler>:
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800444e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4313      	orrs	r3, r2
 8004456:	608b      	str	r3, [r1, #8]
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <LL_RCC_GetAHBPrescaler>:
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004472:	4618      	mov	r0, r3
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <LL_C2_RCC_GetAHBPrescaler>:
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8004480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004484:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800448c:	4618      	mov	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <LL_RCC_GetAHB4Prescaler>:
{
 8004496:	b480      	push	{r7}
 8004498:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800449a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <LL_RCC_GetAPB1Prescaler>:
{
 80044b2:	b480      	push	{r7}
 80044b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80044b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <LL_RCC_GetAPB2Prescaler>:
{
 80044ca:	b480      	push	{r7}
 80044cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80044ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80044d8:	4618      	mov	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <LL_RCC_PLL_Enable>:
{
 80044e2:	b480      	push	{r7}
 80044e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80044e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044f4:	6013      	str	r3, [r2, #0]
}
 80044f6:	bf00      	nop
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <LL_RCC_PLL_Disable>:
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800450e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004512:	6013      	str	r3, [r2, #0]
}
 8004514:	bf00      	nop
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <LL_RCC_PLL_IsReady>:
{
 800451e:	b480      	push	{r7}
 8004520:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004530:	d101      	bne.n	8004536 <LL_RCC_PLL_IsReady+0x18>
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <LL_RCC_PLL_IsReady+0x1a>
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <LL_RCC_PLL_GetN>:
{
 8004542:	b480      	push	{r7}
 8004544:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	0a1b      	lsrs	r3, r3, #8
 800454e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004552:	4618      	mov	r0, r3
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <LL_RCC_PLL_GetR>:
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800456a:	4618      	mov	r0, r3
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <LL_RCC_PLL_GetDivider>:
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004582:	4618      	mov	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <LL_RCC_PLL_GetMainSource>:
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f003 0303 	and.w	r3, r3, #3
}
 800459a:	4618      	mov	r0, r3
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <LL_RCC_IsActiveFlag_HPRE>:
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80045a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b6:	d101      	bne.n	80045bc <LL_RCC_IsActiveFlag_HPRE+0x18>
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80045cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045dc:	d101      	bne.n	80045e2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80045ee:	b480      	push	{r7}
 80045f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80045f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004602:	d101      	bne.n	8004608 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004604:	2301      	movs	r3, #1
 8004606:	e000      	b.n	800460a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004622:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004626:	d101      	bne.n	800462c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004628:	2301      	movs	r3, #1
 800462a:	e000      	b.n	800462e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800463c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004646:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800464a:	d101      	bne.n	8004650 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800465c:	b590      	push	{r4, r7, lr}
 800465e:	b08d      	sub	sp, #52	; 0x34
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e37e      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 8092 	beq.w	80047a0 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800467c:	f7ff fe7d 	bl	800437a <LL_RCC_GetSysClkSource>
 8004680:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004682:	f7ff ff83 	bl	800458c <LL_RCC_PLL_GetMainSource>
 8004686:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <HAL_RCC_OscConfig+0x3e>
 800468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004690:	2b0c      	cmp	r3, #12
 8004692:	d14c      	bne.n	800472e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004696:	2b01      	cmp	r3, #1
 8004698:	d149      	bne.n	800472e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800469a:	f7ff fe0b 	bl	80042b4 <LL_RCC_MSI_IsReady>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <HAL_RCC_OscConfig+0x54>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e35d      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80046b4:	f7ff fe23 	bl	80042fe <LL_RCC_MSI_GetRange>
 80046b8:	4603      	mov	r3, r0
 80046ba:	429c      	cmp	r4, r3
 80046bc:	d914      	bls.n	80046e8 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fd72 	bl	80051ac <RCC_SetFlashLatencyFromMSIRange>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e34c      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff fdfd 	bl	80042d6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff fe21 	bl	8004328 <LL_RCC_MSI_SetCalibTrimming>
 80046e6:	e013      	b.n	8004710 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff fdf2 	bl	80042d6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff fe16 	bl	8004328 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	4618      	mov	r0, r3
 8004702:	f000 fd53 	bl	80051ac <RCC_SetFlashLatencyFromMSIRange>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e32d      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004710:	f000 fcda 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 8004714:	4602      	mov	r2, r0
 8004716:	4bb3      	ldr	r3, [pc, #716]	; (80049e4 <HAL_RCC_OscConfig+0x388>)
 8004718:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800471a:	4bb3      	ldr	r3, [pc, #716]	; (80049e8 <HAL_RCC_OscConfig+0x38c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f7fe f900 	bl	8002924 <HAL_InitTick>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d039      	beq.n	800479e <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e31e      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01e      	beq.n	8004774 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004736:	f7ff fd9f 	bl	8004278 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800473a:	f7fe fdcf 	bl	80032dc <HAL_GetTick>
 800473e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004742:	f7fe fdcb 	bl	80032dc <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e30b      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004754:	f7ff fdae 	bl	80042b4 <LL_RCC_MSI_IsReady>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0f1      	beq.n	8004742 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff fdb7 	bl	80042d6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff fddb 	bl	8004328 <LL_RCC_MSI_SetCalibTrimming>
 8004772:	e015      	b.n	80047a0 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004774:	f7ff fd8f 	bl	8004296 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004778:	f7fe fdb0 	bl	80032dc <HAL_GetTick>
 800477c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004780:	f7fe fdac 	bl	80032dc <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e2ec      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004792:	f7ff fd8f 	bl	80042b4 <LL_RCC_MSI_IsReady>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1f1      	bne.n	8004780 <HAL_RCC_OscConfig+0x124>
 800479c:	e000      	b.n	80047a0 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800479e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d04e      	beq.n	800484a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ac:	f7ff fde5 	bl	800437a <LL_RCC_GetSysClkSource>
 80047b0:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047b2:	f7ff feeb 	bl	800458c <LL_RCC_PLL_GetMainSource>
 80047b6:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d005      	beq.n	80047ca <HAL_RCC_OscConfig+0x16e>
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	2b0c      	cmp	r3, #12
 80047c2:	d10d      	bne.n	80047e0 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d10a      	bne.n	80047e0 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ca:	f7ff fbf5 	bl	8003fb8 <LL_RCC_HSE_IsReady>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d039      	beq.n	8004848 <HAL_RCC_OscConfig+0x1ec>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d135      	bne.n	8004848 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e2c5      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e8:	d102      	bne.n	80047f0 <HAL_RCC_OscConfig+0x194>
 80047ea:	f7ff fbc7 	bl	8003f7c <LL_RCC_HSE_Enable>
 80047ee:	e001      	b.n	80047f4 <HAL_RCC_OscConfig+0x198>
 80047f0:	f7ff fbd3 	bl	8003f9a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d012      	beq.n	8004822 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fc:	f7fe fd6e 	bl	80032dc <HAL_GetTick>
 8004800:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004804:	f7fe fd6a 	bl	80032dc <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b64      	cmp	r3, #100	; 0x64
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e2aa      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004816:	f7ff fbcf 	bl	8003fb8 <LL_RCC_HSE_IsReady>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0f1      	beq.n	8004804 <HAL_RCC_OscConfig+0x1a8>
 8004820:	e013      	b.n	800484a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004822:	f7fe fd5b 	bl	80032dc <HAL_GetTick>
 8004826:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800482a:	f7fe fd57 	bl	80032dc <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b64      	cmp	r3, #100	; 0x64
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e297      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 800483c:	f7ff fbbc 	bl	8003fb8 <LL_RCC_HSE_IsReady>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f1      	bne.n	800482a <HAL_RCC_OscConfig+0x1ce>
 8004846:	e000      	b.n	800484a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d051      	beq.n	80048fa <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004856:	f7ff fd90 	bl	800437a <LL_RCC_GetSysClkSource>
 800485a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800485c:	f7ff fe96 	bl	800458c <LL_RCC_PLL_GetMainSource>
 8004860:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	2b04      	cmp	r3, #4
 8004866:	d005      	beq.n	8004874 <HAL_RCC_OscConfig+0x218>
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	2b0c      	cmp	r3, #12
 800486c:	d113      	bne.n	8004896 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b02      	cmp	r3, #2
 8004872:	d110      	bne.n	8004896 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004874:	f7ff fbd0 	bl	8004018 <LL_RCC_HSI_IsReady>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d005      	beq.n	800488a <HAL_RCC_OscConfig+0x22e>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e270      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fbd4 	bl	800403c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004894:	e031      	b.n	80048fa <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d019      	beq.n	80048d2 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800489e:	f7ff fb9d 	bl	8003fdc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a2:	f7fe fd1b 	bl	80032dc <HAL_GetTick>
 80048a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048aa:	f7fe fd17 	bl	80032dc <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e257      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80048bc:	f7ff fbac 	bl	8004018 <LL_RCC_HSI_IsReady>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0f1      	beq.n	80048aa <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff fbb6 	bl	800403c <LL_RCC_HSI_SetCalibTrimming>
 80048d0:	e013      	b.n	80048fa <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048d2:	f7ff fb92 	bl	8003ffa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d6:	f7fe fd01 	bl	80032dc <HAL_GetTick>
 80048da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048de:	f7fe fcfd 	bl	80032dc <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e23d      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80048f0:	f7ff fb92 	bl	8004018 <LL_RCC_HSI_IsReady>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f1      	bne.n	80048de <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 80a3 	beq.w	8004a5a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d076      	beq.n	8004a0a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	2b00      	cmp	r3, #0
 8004926:	d046      	beq.n	80049b6 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004928:	f7ff fc49 	bl	80041be <LL_RCC_LSI1_IsReady>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d113      	bne.n	800495a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004932:	f7ff fc22 	bl	800417a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004936:	f7fe fcd1 	bl	80032dc <HAL_GetTick>
 800493a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800493e:	f7fe fccd 	bl	80032dc <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e20d      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004950:	f7ff fc35 	bl	80041be <LL_RCC_LSI1_IsReady>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f1      	beq.n	800493e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800495a:	f7ff fc42 	bl	80041e2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495e:	f7fe fcbd 	bl	80032dc <HAL_GetTick>
 8004962:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004966:	f7fe fcb9 	bl	80032dc <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b03      	cmp	r3, #3
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e1f9      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004978:	f7ff fc55 	bl	8004226 <LL_RCC_LSI2_IsReady>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f1      	beq.n	8004966 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff fc5f 	bl	800424a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800498c:	f7ff fc06 	bl	800419c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004990:	f7fe fca4 	bl	80032dc <HAL_GetTick>
 8004994:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004998:	f7fe fca0 	bl	80032dc <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e1e0      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80049aa:	f7ff fc08 	bl	80041be <LL_RCC_LSI1_IsReady>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f1      	bne.n	8004998 <HAL_RCC_OscConfig+0x33c>
 80049b4:	e051      	b.n	8004a5a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80049b6:	f7ff fbe0 	bl	800417a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ba:	f7fe fc8f 	bl	80032dc <HAL_GetTick>
 80049be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80049c0:	e008      	b.n	80049d4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80049c2:	f7fe fc8b 	bl	80032dc <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e1cb      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80049d4:	f7ff fbf3 	bl	80041be <LL_RCC_LSI1_IsReady>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0f1      	beq.n	80049c2 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80049de:	f7ff fc11 	bl	8004204 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80049e2:	e00c      	b.n	80049fe <HAL_RCC_OscConfig+0x3a2>
 80049e4:	20000010 	.word	0x20000010
 80049e8:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80049ec:	f7fe fc76 	bl	80032dc <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e1b6      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80049fe:	f7ff fc12 	bl	8004226 <LL_RCC_LSI2_IsReady>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f1      	bne.n	80049ec <HAL_RCC_OscConfig+0x390>
 8004a08:	e027      	b.n	8004a5a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004a0a:	f7ff fbfb 	bl	8004204 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0e:	f7fe fc65 	bl	80032dc <HAL_GetTick>
 8004a12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004a16:	f7fe fc61 	bl	80032dc <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e1a1      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004a28:	f7ff fbfd 	bl	8004226 <LL_RCC_LSI2_IsReady>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f1      	bne.n	8004a16 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004a32:	f7ff fbb3 	bl	800419c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a36:	f7fe fc51 	bl	80032dc <HAL_GetTick>
 8004a3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004a3e:	f7fe fc4d 	bl	80032dc <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e18d      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004a50:	f7ff fbb5 	bl	80041be <LL_RCC_LSI1_IsReady>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f1      	bne.n	8004a3e <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d05b      	beq.n	8004b1e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a66:	4bb5      	ldr	r3, [pc, #724]	; (8004d3c <HAL_RCC_OscConfig+0x6e0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d114      	bne.n	8004a9c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004a72:	f7ff fa53 	bl	8003f1c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a76:	f7fe fc31 	bl	80032dc <HAL_GetTick>
 8004a7a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7e:	f7fe fc2d 	bl	80032dc <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e16d      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a90:	4baa      	ldr	r3, [pc, #680]	; (8004d3c <HAL_RCC_OscConfig+0x6e0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0f0      	beq.n	8004a7e <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d102      	bne.n	8004aaa <HAL_RCC_OscConfig+0x44e>
 8004aa4:	f7ff fb13 	bl	80040ce <LL_RCC_LSE_Enable>
 8004aa8:	e00c      	b.n	8004ac4 <HAL_RCC_OscConfig+0x468>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2b05      	cmp	r3, #5
 8004ab0:	d104      	bne.n	8004abc <HAL_RCC_OscConfig+0x460>
 8004ab2:	f7ff fb2e 	bl	8004112 <LL_RCC_LSE_EnableBypass>
 8004ab6:	f7ff fb0a 	bl	80040ce <LL_RCC_LSE_Enable>
 8004aba:	e003      	b.n	8004ac4 <HAL_RCC_OscConfig+0x468>
 8004abc:	f7ff fb18 	bl	80040f0 <LL_RCC_LSE_Disable>
 8004ac0:	f7ff fb38 	bl	8004134 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d014      	beq.n	8004af6 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004acc:	f7fe fc06 	bl	80032dc <HAL_GetTick>
 8004ad0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004ad2:	e00a      	b.n	8004aea <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad4:	f7fe fc02 	bl	80032dc <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e140      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004aea:	f7ff fb34 	bl	8004156 <LL_RCC_LSE_IsReady>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0ef      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x478>
 8004af4:	e013      	b.n	8004b1e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af6:	f7fe fbf1 	bl	80032dc <HAL_GetTick>
 8004afa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004afc:	e00a      	b.n	8004b14 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004afe:	f7fe fbed 	bl	80032dc <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e12b      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004b14:	f7ff fb1f 	bl	8004156 <LL_RCC_LSE_IsReady>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1ef      	bne.n	8004afe <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d02c      	beq.n	8004b84 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d014      	beq.n	8004b5c <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b32:	f7ff fa98 	bl	8004066 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b36:	f7fe fbd1 	bl	80032dc <HAL_GetTick>
 8004b3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b3e:	f7fe fbcd 	bl	80032dc <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e10d      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004b50:	f7ff faab 	bl	80040aa <LL_RCC_HSI48_IsReady>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f1      	beq.n	8004b3e <HAL_RCC_OscConfig+0x4e2>
 8004b5a:	e013      	b.n	8004b84 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b5c:	f7ff fa94 	bl	8004088 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b60:	f7fe fbbc 	bl	80032dc <HAL_GetTick>
 8004b64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b68:	f7fe fbb8 	bl	80032dc <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e0f8      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004b7a:	f7ff fa96 	bl	80040aa <LL_RCC_HSI48_IsReady>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f1      	bne.n	8004b68 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 80ee 	beq.w	8004d6a <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b8e:	f7ff fbf4 	bl	800437a <LL_RCC_GetSysClkSource>
 8004b92:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	f040 80af 	bne.w	8004d04 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f003 0203 	and.w	r2, r3, #3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d123      	bne.n	8004bfc <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d11c      	bne.n	8004bfc <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	0a1b      	lsrs	r3, r3, #8
 8004bc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d114      	bne.n	8004bfc <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d10d      	bne.n	8004bfc <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d106      	bne.n	8004bfc <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d05d      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	2b0c      	cmp	r3, #12
 8004c00:	d058      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e0ab      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c14:	f7ff fc74 	bl	8004500 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c18:	f7fe fb60 	bl	80032dc <HAL_GetTick>
 8004c1c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c20:	f7fe fb5c 	bl	80032dc <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e09c      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1ef      	bne.n	8004c20 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	4b3e      	ldr	r3, [pc, #248]	; (8004d40 <HAL_RCC_OscConfig+0x6e4>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c52:	4311      	orrs	r1, r2
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c58:	0212      	lsls	r2, r2, #8
 8004c5a:	4311      	orrs	r1, r2
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c60:	4311      	orrs	r1, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c66:	4311      	orrs	r1, r2
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c76:	f7ff fc34 	bl	80044e2 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c88:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c8a:	f7fe fb27 	bl	80032dc <HAL_GetTick>
 8004c8e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c92:	f7fe fb23 	bl	80032dc <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e063      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0ef      	beq.n	8004c92 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cb2:	e05a      	b.n	8004d6a <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e059      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d151      	bne.n	8004d6a <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004cc6:	f7ff fc0c 	bl	80044e2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cda:	f7fe faff 	bl	80032dc <HAL_GetTick>
 8004cde:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce2:	f7fe fafb 	bl	80032dc <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e03b      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0ef      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x686>
 8004d02:	e032      	b.n	8004d6a <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	2b0c      	cmp	r3, #12
 8004d08:	d02d      	beq.n	8004d66 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d0a:	f7ff fbf9 	bl	8004500 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d18:	f023 0303 	bic.w	r3, r3, #3
 8004d1c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d28:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d30:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d32:	f7fe fad3 	bl	80032dc <HAL_GetTick>
 8004d36:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d38:	e00d      	b.n	8004d56 <HAL_RCC_OscConfig+0x6fa>
 8004d3a:	bf00      	nop
 8004d3c:	58000400 	.word	0x58000400
 8004d40:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d44:	f7fe faca 	bl	80032dc <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e00a      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1ef      	bne.n	8004d44 <HAL_RCC_OscConfig+0x6e8>
 8004d64:	e001      	b.n	8004d6a <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e000      	b.n	8004d6c <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3734      	adds	r7, #52	; 0x34
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd90      	pop	{r4, r7, pc}

08004d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e12d      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d88:	4b98      	ldr	r3, [pc, #608]	; (8004fec <HAL_RCC_ClockConfig+0x278>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d91b      	bls.n	8004dce <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d96:	4b95      	ldr	r3, [pc, #596]	; (8004fec <HAL_RCC_ClockConfig+0x278>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f023 0207 	bic.w	r2, r3, #7
 8004d9e:	4993      	ldr	r1, [pc, #588]	; (8004fec <HAL_RCC_ClockConfig+0x278>)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da6:	f7fe fa99 	bl	80032dc <HAL_GetTick>
 8004daa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004dae:	f7fe fa95 	bl	80032dc <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e111      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc0:	4b8a      	ldr	r3, [pc, #552]	; (8004fec <HAL_RCC_ClockConfig+0x278>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d1ef      	bne.n	8004dae <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d016      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff fad7 	bl	8004392 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004de4:	f7fe fa7a 	bl	80032dc <HAL_GetTick>
 8004de8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004dec:	f7fe fa76 	bl	80032dc <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e0f2      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004dfe:	f7ff fbd1 	bl	80045a4 <LL_RCC_IsActiveFlag_HPRE>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0f1      	beq.n	8004dec <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d016      	beq.n	8004e42 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff face 	bl	80043ba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e1e:	f7fe fa5d 	bl	80032dc <HAL_GetTick>
 8004e22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e26:	f7fe fa59 	bl	80032dc <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0d5      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004e38:	f7ff fbc6 	bl	80045c8 <LL_RCC_IsActiveFlag_C2HPRE>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0f1      	beq.n	8004e26 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d016      	beq.n	8004e7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff fac7 	bl	80043e6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e58:	f7fe fa40 	bl	80032dc <HAL_GetTick>
 8004e5c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e60:	f7fe fa3c 	bl	80032dc <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e0b8      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004e72:	f7ff fbbc 	bl	80045ee <LL_RCC_IsActiveFlag_SHDHPRE>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f1      	beq.n	8004e60 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d016      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff fac1 	bl	8004414 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e92:	f7fe fa23 	bl	80032dc <HAL_GetTick>
 8004e96:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e9a:	f7fe fa1f 	bl	80032dc <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e09b      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004eac:	f7ff fbb2 	bl	8004614 <LL_RCC_IsActiveFlag_PPRE1>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f1      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d017      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff fab7 	bl	800443c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ece:	f7fe fa05 	bl	80032dc <HAL_GetTick>
 8004ed2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ed6:	f7fe fa01 	bl	80032dc <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e07d      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004ee8:	f7ff fba6 	bl	8004638 <LL_RCC_IsActiveFlag_PPRE2>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f1      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d043      	beq.n	8004f86 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d106      	bne.n	8004f14 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004f06:	f7ff f857 	bl	8003fb8 <LL_RCC_HSE_IsReady>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d11e      	bne.n	8004f4e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e067      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d106      	bne.n	8004f2a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004f1c:	f7ff faff 	bl	800451e <LL_RCC_PLL_IsReady>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d113      	bne.n	8004f4e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e05c      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004f32:	f7ff f9bf 	bl	80042b4 <LL_RCC_MSI_IsReady>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d108      	bne.n	8004f4e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e051      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004f40:	f7ff f86a 	bl	8004018 <LL_RCC_HSI_IsReady>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e04a      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7ff f9fd 	bl	8004352 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f58:	f7fe f9c0 	bl	80032dc <HAL_GetTick>
 8004f5c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f60:	f7fe f9bc 	bl	80032dc <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e036      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f76:	f7ff fa00 	bl	800437a <LL_RCC_GetSysClkSource>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d1ec      	bne.n	8004f60 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f86:	4b19      	ldr	r3, [pc, #100]	; (8004fec <HAL_RCC_ClockConfig+0x278>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d21b      	bcs.n	8004fcc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f94:	4b15      	ldr	r3, [pc, #84]	; (8004fec <HAL_RCC_ClockConfig+0x278>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f023 0207 	bic.w	r2, r3, #7
 8004f9c:	4913      	ldr	r1, [pc, #76]	; (8004fec <HAL_RCC_ClockConfig+0x278>)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa4:	f7fe f99a 	bl	80032dc <HAL_GetTick>
 8004fa8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004fac:	f7fe f996 	bl	80032dc <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e012      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fbe:	4b0b      	ldr	r3, [pc, #44]	; (8004fec <HAL_RCC_ClockConfig+0x278>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d1ef      	bne.n	8004fac <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004fcc:	f000 f87c 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <HAL_RCC_ClockConfig+0x27c>)
 8004fd4:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004fd6:	f7fe f98d 	bl	80032f4 <HAL_GetTickPrio>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fd fca1 	bl	8002924 <HAL_InitTick>
 8004fe2:	4603      	mov	r3, r0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	58004000 	.word	0x58004000
 8004ff0:	20000010 	.word	0x20000010

08004ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff4:	b590      	push	{r4, r7, lr}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ffa:	f7ff f9be 	bl	800437a <LL_RCC_GetSysClkSource>
 8004ffe:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10a      	bne.n	800501c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005006:	f7ff f97a 	bl	80042fe <LL_RCC_MSI_GetRange>
 800500a:	4603      	mov	r3, r0
 800500c:	091b      	lsrs	r3, r3, #4
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	4a2a      	ldr	r2, [pc, #168]	; (80050bc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	e04a      	b.n	80050b2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b04      	cmp	r3, #4
 8005020:	d102      	bne.n	8005028 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005022:	4b27      	ldr	r3, [pc, #156]	; (80050c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	e044      	b.n	80050b2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b08      	cmp	r3, #8
 800502c:	d10a      	bne.n	8005044 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800502e:	f7fe ff93 	bl	8003f58 <LL_RCC_HSE_IsEnabledDiv2>
 8005032:	4603      	mov	r3, r0
 8005034:	2b01      	cmp	r3, #1
 8005036:	d102      	bne.n	800503e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005038:	4b21      	ldr	r3, [pc, #132]	; (80050c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	e039      	b.n	80050b2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800503e:	4b21      	ldr	r3, [pc, #132]	; (80050c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	e036      	b.n	80050b2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005044:	f7ff faa2 	bl	800458c <LL_RCC_PLL_GetMainSource>
 8005048:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b02      	cmp	r3, #2
 800504e:	d002      	beq.n	8005056 <HAL_RCC_GetSysClockFreq+0x62>
 8005050:	2b03      	cmp	r3, #3
 8005052:	d003      	beq.n	800505c <HAL_RCC_GetSysClockFreq+0x68>
 8005054:	e00d      	b.n	8005072 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005056:	4b1a      	ldr	r3, [pc, #104]	; (80050c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005058:	60bb      	str	r3, [r7, #8]
        break;
 800505a:	e015      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800505c:	f7fe ff7c 	bl	8003f58 <LL_RCC_HSE_IsEnabledDiv2>
 8005060:	4603      	mov	r3, r0
 8005062:	2b01      	cmp	r3, #1
 8005064:	d102      	bne.n	800506c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005066:	4b16      	ldr	r3, [pc, #88]	; (80050c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005068:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800506a:	e00d      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800506c:	4b15      	ldr	r3, [pc, #84]	; (80050c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800506e:	60bb      	str	r3, [r7, #8]
        break;
 8005070:	e00a      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005072:	f7ff f944 	bl	80042fe <LL_RCC_MSI_GetRange>
 8005076:	4603      	mov	r3, r0
 8005078:	091b      	lsrs	r3, r3, #4
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	4a0f      	ldr	r2, [pc, #60]	; (80050bc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005084:	60bb      	str	r3, [r7, #8]
        break;
 8005086:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005088:	f7ff fa5b 	bl	8004542 <LL_RCC_PLL_GetN>
 800508c:	4602      	mov	r2, r0
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	fb03 f402 	mul.w	r4, r3, r2
 8005094:	f7ff fa6e 	bl	8004574 <LL_RCC_PLL_GetDivider>
 8005098:	4603      	mov	r3, r0
 800509a:	091b      	lsrs	r3, r3, #4
 800509c:	3301      	adds	r3, #1
 800509e:	fbb4 f4f3 	udiv	r4, r4, r3
 80050a2:	f7ff fa5b 	bl	800455c <LL_RCC_PLL_GetR>
 80050a6:	4603      	mov	r3, r0
 80050a8:	0f5b      	lsrs	r3, r3, #29
 80050aa:	3301      	adds	r3, #1
 80050ac:	fbb4 f3f3 	udiv	r3, r4, r3
 80050b0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80050b2:	68fb      	ldr	r3, [r7, #12]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd90      	pop	{r4, r7, pc}
 80050bc:	0801402c 	.word	0x0801402c
 80050c0:	00f42400 	.word	0x00f42400
 80050c4:	01e84800 	.word	0x01e84800

080050c8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050c8:	b598      	push	{r3, r4, r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80050cc:	f7ff ff92 	bl	8004ff4 <HAL_RCC_GetSysClockFreq>
 80050d0:	4604      	mov	r4, r0
 80050d2:	f7ff f9c7 	bl	8004464 <LL_RCC_GetAHBPrescaler>
 80050d6:	4603      	mov	r3, r0
 80050d8:	091b      	lsrs	r3, r3, #4
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	4a03      	ldr	r2, [pc, #12]	; (80050ec <HAL_RCC_GetHCLKFreq+0x24>)
 80050e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	bd98      	pop	{r3, r4, r7, pc}
 80050ec:	08013fcc 	.word	0x08013fcc

080050f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050f0:	b598      	push	{r3, r4, r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80050f4:	f7ff ffe8 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 80050f8:	4604      	mov	r4, r0
 80050fa:	f7ff f9da 	bl	80044b2 <LL_RCC_GetAPB1Prescaler>
 80050fe:	4603      	mov	r3, r0
 8005100:	0a1b      	lsrs	r3, r3, #8
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	4a04      	ldr	r2, [pc, #16]	; (8005118 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800510c:	f003 031f 	and.w	r3, r3, #31
 8005110:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005114:	4618      	mov	r0, r3
 8005116:	bd98      	pop	{r3, r4, r7, pc}
 8005118:	0801400c 	.word	0x0801400c

0800511c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800511c:	b598      	push	{r3, r4, r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005120:	f7ff ffd2 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 8005124:	4604      	mov	r4, r0
 8005126:	f7ff f9d0 	bl	80044ca <LL_RCC_GetAPB2Prescaler>
 800512a:	4603      	mov	r3, r0
 800512c:	0adb      	lsrs	r3, r3, #11
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	4a04      	ldr	r2, [pc, #16]	; (8005144 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005138:	f003 031f 	and.w	r3, r3, #31
 800513c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005140:	4618      	mov	r0, r3
 8005142:	bd98      	pop	{r3, r4, r7, pc}
 8005144:	0801400c 	.word	0x0801400c

08005148 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	226f      	movs	r2, #111	; 0x6f
 8005156:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8005158:	f7ff f90f 	bl	800437a <LL_RCC_GetSysClkSource>
 800515c:	4602      	mov	r2, r0
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8005162:	f7ff f97f 	bl	8004464 <LL_RCC_GetAHBPrescaler>
 8005166:	4602      	mov	r2, r0
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800516c:	f7ff f9a1 	bl	80044b2 <LL_RCC_GetAPB1Prescaler>
 8005170:	4602      	mov	r2, r0
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8005176:	f7ff f9a8 	bl	80044ca <LL_RCC_GetAPB2Prescaler>
 800517a:	4602      	mov	r2, r0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8005180:	f7ff f97c 	bl	800447c <LL_C2_RCC_GetAHBPrescaler>
 8005184:	4602      	mov	r2, r0
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800518a:	f7ff f984 	bl	8004496 <LL_RCC_GetAHB4Prescaler>
 800518e:	4602      	mov	r2, r0
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005194:	4b04      	ldr	r3, [pc, #16]	; (80051a8 <HAL_RCC_GetClockConfig+0x60>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0207 	and.w	r2, r3, #7
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	601a      	str	r2, [r3, #0]
}
 80051a0:	bf00      	nop
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	58004000 	.word	0x58004000

080051ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80051ac:	b590      	push	{r4, r7, lr}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2bb0      	cmp	r3, #176	; 0xb0
 80051b8:	d903      	bls.n	80051c2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80051ba:	4b15      	ldr	r3, [pc, #84]	; (8005210 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80051bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	e007      	b.n	80051d2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	091b      	lsrs	r3, r3, #4
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	4a11      	ldr	r2, [pc, #68]	; (8005210 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80051cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80051d2:	f7ff f960 	bl	8004496 <LL_RCC_GetAHB4Prescaler>
 80051d6:	4603      	mov	r3, r0
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	4a0d      	ldr	r2, [pc, #52]	; (8005214 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80051e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ea:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4a0a      	ldr	r2, [pc, #40]	; (8005218 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80051f0:	fba2 2303 	umull	r2, r3, r2, r3
 80051f4:	0c9c      	lsrs	r4, r3, #18
 80051f6:	f7fe fea1 	bl	8003f3c <HAL_PWREx_GetVoltageRange>
 80051fa:	4603      	mov	r3, r0
 80051fc:	4619      	mov	r1, r3
 80051fe:	4620      	mov	r0, r4
 8005200:	f000 f80c 	bl	800521c <RCC_SetFlashLatency>
 8005204:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	bd90      	pop	{r4, r7, pc}
 800520e:	bf00      	nop
 8005210:	0801402c 	.word	0x0801402c
 8005214:	08013fcc 	.word	0x08013fcc
 8005218:	431bde83 	.word	0x431bde83

0800521c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800521c:	b590      	push	{r4, r7, lr}
 800521e:	b093      	sub	sp, #76	; 0x4c
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005226:	4b39      	ldr	r3, [pc, #228]	; (800530c <RCC_SetFlashLatency+0xf0>)
 8005228:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800522c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800522e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005232:	4a37      	ldr	r2, [pc, #220]	; (8005310 <RCC_SetFlashLatency+0xf4>)
 8005234:	f107 031c 	add.w	r3, r7, #28
 8005238:	ca07      	ldmia	r2, {r0, r1, r2}
 800523a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800523e:	4b35      	ldr	r3, [pc, #212]	; (8005314 <RCC_SetFlashLatency+0xf8>)
 8005240:	f107 040c 	add.w	r4, r7, #12
 8005244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005246:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800524a:	2300      	movs	r3, #0
 800524c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005254:	d11c      	bne.n	8005290 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005256:	2300      	movs	r3, #0
 8005258:	643b      	str	r3, [r7, #64]	; 0x40
 800525a:	e015      	b.n	8005288 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800525c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005264:	4413      	add	r3, r2
 8005266:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	429a      	cmp	r2, r3
 800526e:	d808      	bhi.n	8005282 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005278:	4413      	add	r3, r2
 800527a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800527e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005280:	e022      	b.n	80052c8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005284:	3301      	adds	r3, #1
 8005286:	643b      	str	r3, [r7, #64]	; 0x40
 8005288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800528a:	2b03      	cmp	r3, #3
 800528c:	d9e6      	bls.n	800525c <RCC_SetFlashLatency+0x40>
 800528e:	e01b      	b.n	80052c8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005290:	2300      	movs	r3, #0
 8005292:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005294:	e015      	b.n	80052c2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800529e:	4413      	add	r3, r2
 80052a0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d808      	bhi.n	80052bc <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80052aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80052b2:	4413      	add	r3, r2
 80052b4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80052b8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80052ba:	e005      	b.n	80052c8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80052bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052be:	3301      	adds	r3, #1
 80052c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d9e6      	bls.n	8005296 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80052c8:	4b13      	ldr	r3, [pc, #76]	; (8005318 <RCC_SetFlashLatency+0xfc>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f023 0207 	bic.w	r2, r3, #7
 80052d0:	4911      	ldr	r1, [pc, #68]	; (8005318 <RCC_SetFlashLatency+0xfc>)
 80052d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d4:	4313      	orrs	r3, r2
 80052d6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80052d8:	f7fe f800 	bl	80032dc <HAL_GetTick>
 80052dc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80052de:	e008      	b.n	80052f2 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80052e0:	f7fd fffc 	bl	80032dc <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e007      	b.n	8005302 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80052f2:	4b09      	ldr	r3, [pc, #36]	; (8005318 <RCC_SetFlashLatency+0xfc>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d1ef      	bne.n	80052e0 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	374c      	adds	r7, #76	; 0x4c
 8005306:	46bd      	mov	sp, r7
 8005308:	bd90      	pop	{r4, r7, pc}
 800530a:	bf00      	nop
 800530c:	080130f8 	.word	0x080130f8
 8005310:	08013108 	.word	0x08013108
 8005314:	08013114 	.word	0x08013114
 8005318:	58004000 	.word	0x58004000

0800531c <LL_RCC_LSE_IsEnabled>:
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <LL_RCC_LSE_IsEnabled+0x18>
 8005330:	2301      	movs	r3, #1
 8005332:	e000      	b.n	8005336 <LL_RCC_LSE_IsEnabled+0x1a>
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <LL_RCC_LSE_IsReady>:
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b02      	cmp	r3, #2
 8005352:	d101      	bne.n	8005358 <LL_RCC_LSE_IsReady+0x18>
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <LL_RCC_LSE_IsReady+0x1a>
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <LL_RCC_SetRFWKPClockSource>:
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800536c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005374:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005378:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <LL_RCC_SetSMPSClockSource>:
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	f023 0203 	bic.w	r2, r3, #3
 80053a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	624b      	str	r3, [r1, #36]	; 0x24
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <LL_RCC_SetSMPSPrescaler>:
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80053c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <LL_RCC_SetUSARTClockSource>:
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80053e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f0:	f023 0203 	bic.w	r2, r3, #3
 80053f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <LL_RCC_SetLPUARTClockSource>:
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005420:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4313      	orrs	r3, r2
 8005428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <LL_RCC_SetI2CClockSource>:
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005444:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	091b      	lsrs	r3, r3, #4
 800544c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005450:	43db      	mvns	r3, r3
 8005452:	401a      	ands	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800545c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <LL_RCC_SetLPTIMClockSource>:
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800547a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800547e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	0c1b      	lsrs	r3, r3, #16
 8005486:	041b      	lsls	r3, r3, #16
 8005488:	43db      	mvns	r3, r3
 800548a:	401a      	ands	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	041b      	lsls	r3, r3, #16
 8005490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <LL_RCC_SetSAIClockSource>:
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80054ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <LL_RCC_SetRNGClockSource>:
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80054da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80054e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <LL_RCC_SetCLK48ClockSource>:
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800550a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <LL_RCC_SetUSBClockSource>:
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b082      	sub	sp, #8
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7ff ffe3 	bl	80054fe <LL_RCC_SetCLK48ClockSource>
}
 8005538:	bf00      	nop
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <LL_RCC_SetADCClockSource>:
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005550:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <LL_RCC_SetRTCClockSource>:
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005580:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4313      	orrs	r3, r2
 8005588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <LL_RCC_GetRTCClockSource>:
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800559c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <LL_RCC_ForceBackupDomainReset>:
{
 80055b2:	b480      	push	{r7}
 80055b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80055b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80055ca:	bf00      	nop
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80055d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80055ec:	bf00      	nop
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <LL_RCC_PLLSAI1_Enable>:
{
 80055f6:	b480      	push	{r7}
 80055f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80055fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005604:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005608:	6013      	str	r3, [r2, #0]
}
 800560a:	bf00      	nop
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <LL_RCC_PLLSAI1_Disable>:
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005622:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005626:	6013      	str	r3, [r2, #0]
}
 8005628:	bf00      	nop
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <LL_RCC_PLLSAI1_IsReady>:
{
 8005632:	b480      	push	{r7}
 8005634:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005640:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005644:	d101      	bne.n	800564a <LL_RCC_PLLSAI1_IsReady+0x18>
 8005646:	2301      	movs	r3, #1
 8005648:	e000      	b.n	800564c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b088      	sub	sp, #32
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800565e:	2300      	movs	r3, #0
 8005660:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005662:	2300      	movs	r3, #0
 8005664:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	d033      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800567a:	d00c      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800567c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005680:	d802      	bhi.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d010      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005686:	e017      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005688:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800568c:	d017      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x68>
 800568e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005692:	d016      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8005694:	e010      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80056a6:	e00d      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3304      	adds	r3, #4
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 f947 	bl	8005940 <RCCEx_PLLSAI1_ConfigNP>
 80056b2:	4603      	mov	r3, r0
 80056b4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80056b6:	e005      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	77fb      	strb	r3, [r7, #31]
        break;
 80056bc:	e002      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80056be:	bf00      	nop
 80056c0:	e000      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80056c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056c4:	7ffb      	ldrb	r3, [r7, #31]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d105      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff fee9 	bl	80054a6 <LL_RCC_SetSAIClockSource>
 80056d4:	e001      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d6:	7ffb      	ldrb	r3, [r7, #31]
 80056d8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d046      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80056e6:	f7ff ff57 	bl	8005598 <LL_RCC_GetRTCClockSource>
 80056ea:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d03c      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80056f6:	f7fe fc11 	bl	8003f1c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d105      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff ff31 	bl	800556c <LL_RCC_SetRTCClockSource>
 800570a:	e02e      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800570c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005714:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005716:	f7ff ff4c 	bl	80055b2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800571a:	f7ff ff5b 	bl	80055d4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800572c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005736:	f7ff fdf1 	bl	800531c <LL_RCC_LSE_IsEnabled>
 800573a:	4603      	mov	r3, r0
 800573c:	2b01      	cmp	r3, #1
 800573e:	d114      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005740:	f7fd fdcc 	bl	80032dc <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005746:	e00b      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005748:	f7fd fdc8 	bl	80032dc <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	f241 3288 	movw	r2, #5000	; 0x1388
 8005756:	4293      	cmp	r3, r2
 8005758:	d902      	bls.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	77fb      	strb	r3, [r7, #31]
              break;
 800575e:	e004      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005760:	f7ff fdee 	bl	8005340 <LL_RCC_LSE_IsReady>
 8005764:	4603      	mov	r3, r0
 8005766:	2b01      	cmp	r3, #1
 8005768:	d1ee      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800576a:	7ffb      	ldrb	r3, [r7, #31]
 800576c:	77bb      	strb	r3, [r7, #30]
 800576e:	e001      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005770:	7ffb      	ldrb	r3, [r7, #31]
 8005772:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d004      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff fe2b 	bl	80053e0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d004      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff fe36 	bl	800540c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d004      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff fe5e 	bl	8005472 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d004      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff fe53 	bl	8005472 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d004      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff fe2b 	bl	8005438 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0308 	and.w	r3, r3, #8
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d004      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff fe20 	bl	8005438 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005800:	2b00      	cmp	r3, #0
 8005802:	d022      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff fe8e 	bl	800552a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005812:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005816:	d107      	bne.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005826:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800582c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005830:	d10b      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3304      	adds	r3, #4
 8005836:	4618      	mov	r0, r3
 8005838:	f000 f8dd 	bl	80059f6 <RCCEx_PLLSAI1_ConfigNQ>
 800583c:	4603      	mov	r3, r0
 800583e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005840:	7ffb      	ldrb	r3, [r7, #31]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8005846:	7ffb      	ldrb	r3, [r7, #31]
 8005848:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005852:	2b00      	cmp	r3, #0
 8005854:	d02b      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585e:	d008      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005868:	d003      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586e:	2b00      	cmp	r3, #0
 8005870:	d105      	bne.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x228>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff fe2b 	bl	80054d2 <LL_RCC_SetRNGClockSource>
 800587c:	e00a      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	2000      	movs	r0, #0
 800588a:	f7ff fe22 	bl	80054d2 <LL_RCC_SetRNGClockSource>
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f7ff fe35 	bl	80054fe <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005898:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800589c:	d107      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800589e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058ac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d022      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058be:	4618      	mov	r0, r3
 80058c0:	f7ff fe3e 	bl	8005540 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058cc:	d107      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80058ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058dc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058e6:	d10b      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3304      	adds	r3, #4
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 f8dd 	bl	8005aac <RCCEx_PLLSAI1_ConfigNR>
 80058f2:	4603      	mov	r3, r0
 80058f4:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80058f6:	7ffb      	ldrb	r3, [r7, #31]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 80058fc:	7ffb      	ldrb	r3, [r7, #31]
 80058fe:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d004      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff fd27 	bl	8005364 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d009      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff fd46 	bl	80053b8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005930:	4618      	mov	r0, r3
 8005932:	f7ff fd2d 	bl	8005390 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8005936:	7fbb      	ldrb	r3, [r7, #30]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3720      	adds	r7, #32
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800594c:	f7ff fe62 	bl	8005614 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005950:	f7fd fcc4 	bl	80032dc <HAL_GetTick>
 8005954:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005956:	e009      	b.n	800596c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005958:	f7fd fcc0 	bl	80032dc <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d902      	bls.n	800596c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	73fb      	strb	r3, [r7, #15]
      break;
 800596a:	e004      	b.n	8005976 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800596c:	f7ff fe61 	bl	8005632 <LL_RCC_PLLSAI1_IsReady>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f0      	bne.n	8005958 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d137      	bne.n	80059ec <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800597c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	021b      	lsls	r3, r3, #8
 800598c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005990:	4313      	orrs	r3, r2
 8005992:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059a6:	4313      	orrs	r3, r2
 80059a8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80059aa:	f7ff fe24 	bl	80055f6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ae:	f7fd fc95 	bl	80032dc <HAL_GetTick>
 80059b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80059b4:	e009      	b.n	80059ca <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059b6:	f7fd fc91 	bl	80032dc <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d902      	bls.n	80059ca <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	73fb      	strb	r3, [r7, #15]
        break;
 80059c8:	e004      	b.n	80059d4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80059ca:	f7ff fe32 	bl	8005632 <LL_RCC_PLLSAI1_IsReady>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d1f0      	bne.n	80059b6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d108      	bne.n	80059ec <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80059da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059e8:	4313      	orrs	r3, r2
 80059ea:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005a02:	f7ff fe07 	bl	8005614 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a06:	f7fd fc69 	bl	80032dc <HAL_GetTick>
 8005a0a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a0c:	e009      	b.n	8005a22 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a0e:	f7fd fc65 	bl	80032dc <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d902      	bls.n	8005a22 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a20:	e004      	b.n	8005a2c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a22:	f7ff fe06 	bl	8005632 <LL_RCC_PLLSAI1_IsReady>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1f0      	bne.n	8005a0e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d137      	bne.n	8005aa2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	021b      	lsls	r3, r3, #8
 8005a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a46:	4313      	orrs	r3, r2
 8005a48:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005a60:	f7ff fdc9 	bl	80055f6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a64:	f7fd fc3a 	bl	80032dc <HAL_GetTick>
 8005a68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a6a:	e009      	b.n	8005a80 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a6c:	f7fd fc36 	bl	80032dc <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d902      	bls.n	8005a80 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a7e:	e004      	b.n	8005a8a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a80:	f7ff fdd7 	bl	8005632 <LL_RCC_PLLSAI1_IsReady>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d1f0      	bne.n	8005a6c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d108      	bne.n	8005aa2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a94:	691a      	ldr	r2, [r3, #16]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005ab8:	f7ff fdac 	bl	8005614 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005abc:	f7fd fc0e 	bl	80032dc <HAL_GetTick>
 8005ac0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ac2:	e009      	b.n	8005ad8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ac4:	f7fd fc0a 	bl	80032dc <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d902      	bls.n	8005ad8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad6:	e004      	b.n	8005ae2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ad8:	f7ff fdab 	bl	8005632 <LL_RCC_PLLSAI1_IsReady>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1f0      	bne.n	8005ac4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005ae2:	7bfb      	ldrb	r3, [r7, #15]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d137      	bne.n	8005b58 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	021b      	lsls	r3, r3, #8
 8005af8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005afc:	4313      	orrs	r3, r2
 8005afe:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b12:	4313      	orrs	r3, r2
 8005b14:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005b16:	f7ff fd6e 	bl	80055f6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b1a:	f7fd fbdf 	bl	80032dc <HAL_GetTick>
 8005b1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b20:	e009      	b.n	8005b36 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b22:	f7fd fbdb 	bl	80032dc <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d902      	bls.n	8005b36 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	73fb      	strb	r3, [r7, #15]
        break;
 8005b34:	e004      	b.n	8005b40 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b36:	f7ff fd7c 	bl	8005632 <LL_RCC_PLLSAI1_IsReady>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d1f0      	bne.n	8005b22 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d108      	bne.n	8005b58 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b54:	4313      	orrs	r3, r2
 8005b56:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b082      	sub	sp, #8
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e090      	b.n	8005c96 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d106      	bne.n	8005b8e <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7fc fe63 	bl	8002854 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	22ca      	movs	r2, #202	; 0xca
 8005b9c:	625a      	str	r2, [r3, #36]	; 0x24
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2253      	movs	r2, #83	; 0x53
 8005ba4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f89f 	bl	8005cea <RTC_EnterInitMode>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d009      	beq.n	8005bc6 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	22ff      	movs	r2, #255	; 0xff
 8005bb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2204      	movs	r2, #4
 8005bbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e067      	b.n	8005c96 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6812      	ldr	r2, [r2, #0]
 8005bd0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bd8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6899      	ldr	r1, [r3, #8]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	431a      	orrs	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	68d2      	ldr	r2, [r2, #12]
 8005c00:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6919      	ldr	r1, [r3, #16]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	041a      	lsls	r2, r3, #16
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c24:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0203 	bic.w	r2, r2, #3
 8005c34:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69da      	ldr	r2, [r3, #28]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	431a      	orrs	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d113      	bne.n	8005c84 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f81e 	bl	8005c9e <HAL_RTC_WaitForSynchro>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00d      	beq.n	8005c84 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	22ff      	movs	r2, #255	; 0xff
 8005c6e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2204      	movs	r2, #4
 8005c74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e008      	b.n	8005c96 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	22ff      	movs	r2, #255	; 0xff
 8005c8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8005c94:	2300      	movs	r3, #0
  }
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cb4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005cb6:	f7fd fb11 	bl	80032dc <HAL_GetTick>
 8005cba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005cbc:	e009      	b.n	8005cd2 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005cbe:	f7fd fb0d 	bl	80032dc <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e007      	b.n	8005ce2 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0ee      	beq.n	8005cbe <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d119      	bne.n	8005d34 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f04f 32ff 	mov.w	r2, #4294967295
 8005d08:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005d0a:	f7fd fae7 	bl	80032dc <HAL_GetTick>
 8005d0e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005d10:	e009      	b.n	8005d26 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d12:	f7fd fae3 	bl	80032dc <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d20:	d901      	bls.n	8005d26 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e007      	b.n	8005d36 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0ee      	beq.n	8005d12 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b082      	sub	sp, #8
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e049      	b.n	8005de4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d106      	bne.n	8005d6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f841 	bl	8005dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3304      	adds	r3, #4
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	f000 f9d5 	bl	800612c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d001      	beq.n	8005e18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e036      	b.n	8005e86 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0201 	orr.w	r2, r2, #1
 8005e2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a17      	ldr	r2, [pc, #92]	; (8005e94 <HAL_TIM_Base_Start_IT+0x94>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d004      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x44>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e42:	d115      	bne.n	8005e70 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689a      	ldr	r2, [r3, #8]
 8005e4a:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <HAL_TIM_Base_Start_IT+0x98>)
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b06      	cmp	r3, #6
 8005e54:	d015      	beq.n	8005e82 <HAL_TIM_Base_Start_IT+0x82>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e5c:	d011      	beq.n	8005e82 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 0201 	orr.w	r2, r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e6e:	e008      	b.n	8005e82 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0201 	orr.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	e000      	b.n	8005e84 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40012c00 	.word	0x40012c00
 8005e98:	00010007 	.word	0x00010007

08005e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d122      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d11b      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0202 	mvn.w	r2, #2
 8005ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f905 	bl	80060ee <HAL_TIM_IC_CaptureCallback>
 8005ee4:	e005      	b.n	8005ef2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f8f7 	bl	80060da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f908 	bl	8006102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d122      	bne.n	8005f4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b04      	cmp	r3, #4
 8005f12:	d11b      	bne.n	8005f4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0204 	mvn.w	r2, #4
 8005f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2202      	movs	r2, #2
 8005f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f8db 	bl	80060ee <HAL_TIM_IC_CaptureCallback>
 8005f38:	e005      	b.n	8005f46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f8cd 	bl	80060da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f8de 	bl	8006102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	2b08      	cmp	r3, #8
 8005f58:	d122      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d11b      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f06f 0208 	mvn.w	r2, #8
 8005f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2204      	movs	r2, #4
 8005f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f8b1 	bl	80060ee <HAL_TIM_IC_CaptureCallback>
 8005f8c:	e005      	b.n	8005f9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f8a3 	bl	80060da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f8b4 	bl	8006102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f003 0310 	and.w	r3, r3, #16
 8005faa:	2b10      	cmp	r3, #16
 8005fac:	d122      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f003 0310 	and.w	r3, r3, #16
 8005fb8:	2b10      	cmp	r3, #16
 8005fba:	d11b      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f06f 0210 	mvn.w	r2, #16
 8005fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2208      	movs	r2, #8
 8005fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f887 	bl	80060ee <HAL_TIM_IC_CaptureCallback>
 8005fe0:	e005      	b.n	8005fee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f879 	bl	80060da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f88a 	bl	8006102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d10e      	bne.n	8006020 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b01      	cmp	r3, #1
 800600e:	d107      	bne.n	8006020 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0201 	mvn.w	r2, #1
 8006018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7fc fba8 	bl	8002770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602a:	2b80      	cmp	r3, #128	; 0x80
 800602c:	d10e      	bne.n	800604c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006038:	2b80      	cmp	r3, #128	; 0x80
 800603a:	d107      	bne.n	800604c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f8de 	bl	8006208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800605a:	d10e      	bne.n	800607a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006066:	2b80      	cmp	r3, #128	; 0x80
 8006068:	d107      	bne.n	800607a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f8d1 	bl	800621c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006084:	2b40      	cmp	r3, #64	; 0x40
 8006086:	d10e      	bne.n	80060a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006092:	2b40      	cmp	r3, #64	; 0x40
 8006094:	d107      	bne.n	80060a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800609e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f838 	bl	8006116 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	f003 0320 	and.w	r3, r3, #32
 80060b0:	2b20      	cmp	r3, #32
 80060b2:	d10e      	bne.n	80060d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f003 0320 	and.w	r3, r3, #32
 80060be:	2b20      	cmp	r3, #32
 80060c0:	d107      	bne.n	80060d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f06f 0220 	mvn.w	r2, #32
 80060ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f891 	bl	80061f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060d2:	bf00      	nop
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
	...

0800612c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a2a      	ldr	r2, [pc, #168]	; (80061e8 <TIM_Base_SetConfig+0xbc>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d003      	beq.n	800614c <TIM_Base_SetConfig+0x20>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614a:	d108      	bne.n	800615e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a21      	ldr	r2, [pc, #132]	; (80061e8 <TIM_Base_SetConfig+0xbc>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d00b      	beq.n	800617e <TIM_Base_SetConfig+0x52>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616c:	d007      	beq.n	800617e <TIM_Base_SetConfig+0x52>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a1e      	ldr	r2, [pc, #120]	; (80061ec <TIM_Base_SetConfig+0xc0>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d003      	beq.n	800617e <TIM_Base_SetConfig+0x52>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a1d      	ldr	r2, [pc, #116]	; (80061f0 <TIM_Base_SetConfig+0xc4>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d108      	bne.n	8006190 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	4313      	orrs	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a0c      	ldr	r2, [pc, #48]	; (80061e8 <TIM_Base_SetConfig+0xbc>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d007      	beq.n	80061cc <TIM_Base_SetConfig+0xa0>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a0b      	ldr	r2, [pc, #44]	; (80061ec <TIM_Base_SetConfig+0xc0>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d003      	beq.n	80061cc <TIM_Base_SetConfig+0xa0>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a0a      	ldr	r2, [pc, #40]	; (80061f0 <TIM_Base_SetConfig+0xc4>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d103      	bne.n	80061d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	691a      	ldr	r2, [r3, #16]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	615a      	str	r2, [r3, #20]
}
 80061da:	bf00      	nop
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	40012c00 	.word	0x40012c00
 80061ec:	40014400 	.word	0x40014400
 80061f0:	40014800 	.word	0x40014800

080061f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <LL_RCC_GetUSARTClockSource>:
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800623c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4013      	ands	r3, r2
}
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <LL_RCC_GetLPUARTClockSource>:
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800625c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4013      	ands	r3, r2
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e042      	b.n	8006308 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7fc feeb 	bl	8003070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2224      	movs	r2, #36	; 0x24
 800629e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0201 	bic.w	r2, r2, #1
 80062b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fb9c 	bl	80069f0 <UART_SetConfig>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d101      	bne.n	80062c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e022      	b.n	8006308 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fd9e 	bl	8006e0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0201 	orr.w	r2, r2, #1
 80062fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fe25 	bl	8006f50 <UART_CheckIdleState>
 8006306:	4603      	mov	r3, r0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	4613      	mov	r3, r2
 800631c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006324:	2b20      	cmp	r3, #32
 8006326:	d168      	bne.n	80063fa <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <HAL_UART_Transmit_IT+0x24>
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e061      	b.n	80063fc <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <HAL_UART_Transmit_IT+0x36>
 8006342:	2302      	movs	r3, #2
 8006344:	e05a      	b.n	80063fc <HAL_UART_Transmit_IT+0xec>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	88fa      	ldrh	r2, [r7, #6]
 8006358:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	88fa      	ldrh	r2, [r7, #6]
 8006360:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2221      	movs	r2, #33	; 0x21
 8006376:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800637e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006382:	d11c      	bne.n	80063be <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800638c:	d107      	bne.n	800639e <HAL_UART_Transmit_IT+0x8e>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d103      	bne.n	800639e <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4a1b      	ldr	r2, [pc, #108]	; (8006408 <HAL_UART_Transmit_IT+0xf8>)
 800639a:	671a      	str	r2, [r3, #112]	; 0x70
 800639c:	e002      	b.n	80063a4 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4a1a      	ldr	r2, [pc, #104]	; (800640c <HAL_UART_Transmit_IT+0xfc>)
 80063a2:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80063ba:	609a      	str	r2, [r3, #8]
 80063bc:	e01b      	b.n	80063f6 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c6:	d107      	bne.n	80063d8 <HAL_UART_Transmit_IT+0xc8>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d103      	bne.n	80063d8 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4a0f      	ldr	r2, [pc, #60]	; (8006410 <HAL_UART_Transmit_IT+0x100>)
 80063d4:	671a      	str	r2, [r3, #112]	; 0x70
 80063d6:	e002      	b.n	80063de <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4a0e      	ldr	r2, [pc, #56]	; (8006414 <HAL_UART_Transmit_IT+0x104>)
 80063dc:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063f4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	e000      	b.n	80063fc <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 80063fa:	2302      	movs	r3, #2
  }
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	0800740b 	.word	0x0800740b
 800640c:	08007371 	.word	0x08007371
 8006410:	080072f3 	.word	0x080072f3
 8006414:	0800727f 	.word	0x0800727f

08006418 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	4613      	mov	r3, r2
 8006424:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800642c:	2b20      	cmp	r3, #32
 800642e:	f040 80bc 	bne.w	80065aa <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d002      	beq.n	800643e <HAL_UART_Receive_IT+0x26>
 8006438:	88fb      	ldrh	r3, [r7, #6]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e0b4      	b.n	80065ac <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <HAL_UART_Receive_IT+0x38>
 800644c:	2302      	movs	r3, #2
 800644e:	e0ad      	b.n	80065ac <HAL_UART_Receive_IT+0x194>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	88fa      	ldrh	r2, [r7, #6]
 8006462:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	88fa      	ldrh	r2, [r7, #6]
 800646a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800647c:	d10e      	bne.n	800649c <HAL_UART_Receive_IT+0x84>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d105      	bne.n	8006492 <HAL_UART_Receive_IT+0x7a>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f240 12ff 	movw	r2, #511	; 0x1ff
 800648c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006490:	e02d      	b.n	80064ee <HAL_UART_Receive_IT+0xd6>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	22ff      	movs	r2, #255	; 0xff
 8006496:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800649a:	e028      	b.n	80064ee <HAL_UART_Receive_IT+0xd6>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10d      	bne.n	80064c0 <HAL_UART_Receive_IT+0xa8>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d104      	bne.n	80064b6 <HAL_UART_Receive_IT+0x9e>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	22ff      	movs	r2, #255	; 0xff
 80064b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064b4:	e01b      	b.n	80064ee <HAL_UART_Receive_IT+0xd6>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	227f      	movs	r2, #127	; 0x7f
 80064ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064be:	e016      	b.n	80064ee <HAL_UART_Receive_IT+0xd6>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064c8:	d10d      	bne.n	80064e6 <HAL_UART_Receive_IT+0xce>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d104      	bne.n	80064dc <HAL_UART_Receive_IT+0xc4>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	227f      	movs	r2, #127	; 0x7f
 80064d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064da:	e008      	b.n	80064ee <HAL_UART_Receive_IT+0xd6>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	223f      	movs	r2, #63	; 0x3f
 80064e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064e4:	e003      	b.n	80064ee <HAL_UART_Receive_IT+0xd6>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2222      	movs	r2, #34	; 0x22
 80064fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f042 0201 	orr.w	r2, r2, #1
 800650c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006516:	d12a      	bne.n	800656e <HAL_UART_Receive_IT+0x156>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800651e:	88fa      	ldrh	r2, [r7, #6]
 8006520:	429a      	cmp	r2, r3
 8006522:	d324      	bcc.n	800656e <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800652c:	d107      	bne.n	800653e <HAL_UART_Receive_IT+0x126>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d103      	bne.n	800653e <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4a1f      	ldr	r2, [pc, #124]	; (80065b8 <HAL_UART_Receive_IT+0x1a0>)
 800653a:	66da      	str	r2, [r3, #108]	; 0x6c
 800653c:	e002      	b.n	8006544 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4a1e      	ldr	r2, [pc, #120]	; (80065bc <HAL_UART_Receive_IT+0x1a4>)
 8006542:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800655a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689a      	ldr	r2, [r3, #8]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800656a:	609a      	str	r2, [r3, #8]
 800656c:	e01b      	b.n	80065a6 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006576:	d107      	bne.n	8006588 <HAL_UART_Receive_IT+0x170>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d103      	bne.n	8006588 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4a0f      	ldr	r2, [pc, #60]	; (80065c0 <HAL_UART_Receive_IT+0x1a8>)
 8006584:	66da      	str	r2, [r3, #108]	; 0x6c
 8006586:	e002      	b.n	800658e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4a0e      	ldr	r2, [pc, #56]	; (80065c4 <HAL_UART_Receive_IT+0x1ac>)
 800658c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80065a4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	e000      	b.n	80065ac <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80065aa:	2302      	movs	r3, #2
  }
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	08007741 	.word	0x08007741
 80065bc:	08007639 	.word	0x08007639
 80065c0:	0800758d 	.word	0x0800758d
 80065c4:	080074e3 	.word	0x080074e3

080065c8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	4613      	mov	r3, r2
 80065d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065dc:	2b20      	cmp	r3, #32
 80065de:	d168      	bne.n	80066b2 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <HAL_UART_Transmit_DMA+0x24>
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e061      	b.n	80066b4 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d101      	bne.n	80065fe <HAL_UART_Transmit_DMA+0x36>
 80065fa:	2302      	movs	r3, #2
 80065fc:	e05a      	b.n	80066b4 <HAL_UART_Transmit_DMA+0xec>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	88fa      	ldrh	r2, [r7, #6]
 8006610:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	88fa      	ldrh	r2, [r7, #6]
 8006618:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2221      	movs	r2, #33	; 0x21
 8006628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006630:	2b00      	cmp	r3, #0
 8006632:	d02c      	beq.n	800668e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006638:	4a20      	ldr	r2, [pc, #128]	; (80066bc <HAL_UART_Transmit_DMA+0xf4>)
 800663a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006640:	4a1f      	ldr	r2, [pc, #124]	; (80066c0 <HAL_UART_Transmit_DMA+0xf8>)
 8006642:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006648:	4a1e      	ldr	r2, [pc, #120]	; (80066c4 <HAL_UART_Transmit_DMA+0xfc>)
 800664a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006650:	2200      	movs	r2, #0
 8006652:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800665c:	4619      	mov	r1, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3328      	adds	r3, #40	; 0x28
 8006664:	461a      	mov	r2, r3
 8006666:	88fb      	ldrh	r3, [r7, #6]
 8006668:	f7fd f880 	bl	800376c <HAL_DMA_Start_IT>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00d      	beq.n	800668e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2210      	movs	r2, #16
 8006676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e012      	b.n	80066b4 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2240      	movs	r2, #64	; 0x40
 8006694:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689a      	ldr	r2, [r3, #8]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80066ac:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	e000      	b.n	80066b4 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80066b2:	2302      	movs	r3, #2
  }
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	08007163 	.word	0x08007163
 80066c0:	080071b7 	.word	0x080071b7
 80066c4:	080071d3 	.word	0x080071d3

080066c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066e8:	69fa      	ldr	r2, [r7, #28]
 80066ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80066ee:	4013      	ands	r3, r2
 80066f0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d118      	bne.n	800672a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d013      	beq.n	800672a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	f003 0320 	and.w	r3, r3, #32
 8006708:	2b00      	cmp	r3, #0
 800670a:	d104      	bne.n	8006716 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d009      	beq.n	800672a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 8145 	beq.w	80069aa <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	4798      	blx	r3
      }
      return;
 8006728:	e13f      	b.n	80069aa <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 80e8 	beq.w	8006902 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	4ba1      	ldr	r3, [pc, #644]	; (80069bc <HAL_UART_IRQHandler+0x2f4>)
 8006736:	4013      	ands	r3, r2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d105      	bne.n	8006748 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	4ba0      	ldr	r3, [pc, #640]	; (80069c0 <HAL_UART_IRQHandler+0x2f8>)
 8006740:	4013      	ands	r3, r2
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 80dd 	beq.w	8006902 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	d010      	beq.n	8006774 <HAL_UART_IRQHandler+0xac>
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00b      	beq.n	8006774 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2201      	movs	r2, #1
 8006762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800676a:	f043 0201 	orr.w	r2, r3, #1
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d010      	beq.n	80067a0 <HAL_UART_IRQHandler+0xd8>
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00b      	beq.n	80067a0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2202      	movs	r2, #2
 800678e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006796:	f043 0204 	orr.w	r2, r3, #4
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d010      	beq.n	80067cc <HAL_UART_IRQHandler+0x104>
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00b      	beq.n	80067cc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2204      	movs	r2, #4
 80067ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c2:	f043 0202 	orr.w	r2, r3, #2
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	f003 0308 	and.w	r3, r3, #8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d015      	beq.n	8006802 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d104      	bne.n	80067ea <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	4b76      	ldr	r3, [pc, #472]	; (80069bc <HAL_UART_IRQHandler+0x2f4>)
 80067e4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00b      	beq.n	8006802 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2208      	movs	r2, #8
 80067f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f8:	f043 0208 	orr.w	r2, r3, #8
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006808:	2b00      	cmp	r3, #0
 800680a:	d011      	beq.n	8006830 <HAL_UART_IRQHandler+0x168>
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00c      	beq.n	8006830 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800681e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006826:	f043 0220 	orr.w	r2, r3, #32
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 80b9 	beq.w	80069ae <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b00      	cmp	r3, #0
 8006844:	d011      	beq.n	800686a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b00      	cmp	r3, #0
 800684e:	d104      	bne.n	800685a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d007      	beq.n	800686a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006870:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687c:	2b40      	cmp	r3, #64	; 0x40
 800687e:	d004      	beq.n	800688a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006886:	2b00      	cmp	r3, #0
 8006888:	d031      	beq.n	80068ee <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fc46 	bl	800711c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689a:	2b40      	cmp	r3, #64	; 0x40
 800689c:	d123      	bne.n	80068e6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068ac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d013      	beq.n	80068de <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068ba:	4a42      	ldr	r2, [pc, #264]	; (80069c4 <HAL_UART_IRQHandler+0x2fc>)
 80068bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fc ffcd 	bl	8003862 <HAL_DMA_Abort_IT>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d017      	beq.n	80068fe <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80068d8:	4610      	mov	r0, r2
 80068da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068dc:	e00f      	b.n	80068fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f87c 	bl	80069dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e4:	e00b      	b.n	80068fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f878 	bl	80069dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ec:	e007      	b.n	80068fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f874 	bl	80069dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80068fc:	e057      	b.n	80069ae <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068fe:	bf00      	nop
    return;
 8006900:	e055      	b.n	80069ae <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00d      	beq.n	8006928 <HAL_UART_IRQHandler+0x260>
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d008      	beq.n	8006928 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800691e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 ff91 	bl	8007848 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006926:	e045      	b.n	80069b4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692e:	2b00      	cmp	r3, #0
 8006930:	d012      	beq.n	8006958 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006938:	2b00      	cmp	r3, #0
 800693a:	d104      	bne.n	8006946 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d008      	beq.n	8006958 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694a:	2b00      	cmp	r3, #0
 800694c:	d031      	beq.n	80069b2 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	4798      	blx	r3
    }
    return;
 8006956:	e02c      	b.n	80069b2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695e:	2b00      	cmp	r3, #0
 8006960:	d008      	beq.n	8006974 <HAL_UART_IRQHandler+0x2ac>
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006968:	2b00      	cmp	r3, #0
 800696a:	d003      	beq.n	8006974 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fd9e 	bl	80074ae <UART_EndTransmit_IT>
    return;
 8006972:	e01f      	b.n	80069b4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d008      	beq.n	8006990 <HAL_UART_IRQHandler+0x2c8>
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 ff71 	bl	8007870 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800698e:	e011      	b.n	80069b4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00c      	beq.n	80069b4 <HAL_UART_IRQHandler+0x2ec>
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	2b00      	cmp	r3, #0
 800699e:	da09      	bge.n	80069b4 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 ff5b 	bl	800785c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069a6:	bf00      	nop
 80069a8:	e004      	b.n	80069b4 <HAL_UART_IRQHandler+0x2ec>
      return;
 80069aa:	bf00      	nop
 80069ac:	e002      	b.n	80069b4 <HAL_UART_IRQHandler+0x2ec>
    return;
 80069ae:	bf00      	nop
 80069b0:	e000      	b.n	80069b4 <HAL_UART_IRQHandler+0x2ec>
    return;
 80069b2:	bf00      	nop
  }
}
 80069b4:	3720      	adds	r7, #32
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	10000001 	.word	0x10000001
 80069c0:	04000120 	.word	0x04000120
 80069c4:	08007253 	.word	0x08007253

080069c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069f0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80069f4:	b088      	sub	sp, #32
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	689a      	ldr	r2, [r3, #8]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	431a      	orrs	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a1a:	69fa      	ldr	r2, [r7, #28]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	4ba4      	ldr	r3, [pc, #656]	; (8006cb8 <UART_SetConfig+0x2c8>)
 8006a28:	4013      	ands	r3, r2
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	6812      	ldr	r2, [r2, #0]
 8006a2e:	69f9      	ldr	r1, [r7, #28]
 8006a30:	430b      	orrs	r3, r1
 8006a32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a99      	ldr	r2, [pc, #612]	; (8006cbc <UART_SetConfig+0x2cc>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d004      	beq.n	8006a64 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	69fa      	ldr	r2, [r7, #28]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006a6e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6812      	ldr	r2, [r2, #0]
 8006a76:	69f9      	ldr	r1, [r7, #28]
 8006a78:	430b      	orrs	r3, r1
 8006a7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a82:	f023 010f 	bic.w	r1, r3, #15
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a8a      	ldr	r2, [pc, #552]	; (8006cc0 <UART_SetConfig+0x2d0>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d121      	bne.n	8006ae0 <UART_SetConfig+0xf0>
 8006a9c:	2003      	movs	r0, #3
 8006a9e:	f7ff fbc7 	bl	8006230 <LL_RCC_GetUSARTClockSource>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b03      	cmp	r3, #3
 8006aa6:	d817      	bhi.n	8006ad8 <UART_SetConfig+0xe8>
 8006aa8:	a201      	add	r2, pc, #4	; (adr r2, 8006ab0 <UART_SetConfig+0xc0>)
 8006aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aae:	bf00      	nop
 8006ab0:	08006ac1 	.word	0x08006ac1
 8006ab4:	08006acd 	.word	0x08006acd
 8006ab8:	08006ac7 	.word	0x08006ac7
 8006abc:	08006ad3 	.word	0x08006ad3
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	76fb      	strb	r3, [r7, #27]
 8006ac4:	e038      	b.n	8006b38 <UART_SetConfig+0x148>
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	76fb      	strb	r3, [r7, #27]
 8006aca:	e035      	b.n	8006b38 <UART_SetConfig+0x148>
 8006acc:	2304      	movs	r3, #4
 8006ace:	76fb      	strb	r3, [r7, #27]
 8006ad0:	e032      	b.n	8006b38 <UART_SetConfig+0x148>
 8006ad2:	2308      	movs	r3, #8
 8006ad4:	76fb      	strb	r3, [r7, #27]
 8006ad6:	e02f      	b.n	8006b38 <UART_SetConfig+0x148>
 8006ad8:	2310      	movs	r3, #16
 8006ada:	76fb      	strb	r3, [r7, #27]
 8006adc:	bf00      	nop
 8006ade:	e02b      	b.n	8006b38 <UART_SetConfig+0x148>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a75      	ldr	r2, [pc, #468]	; (8006cbc <UART_SetConfig+0x2cc>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d124      	bne.n	8006b34 <UART_SetConfig+0x144>
 8006aea:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006aee:	f7ff fbaf 	bl	8006250 <LL_RCC_GetLPUARTClockSource>
 8006af2:	4603      	mov	r3, r0
 8006af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006af8:	d012      	beq.n	8006b20 <UART_SetConfig+0x130>
 8006afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006afe:	d802      	bhi.n	8006b06 <UART_SetConfig+0x116>
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d007      	beq.n	8006b14 <UART_SetConfig+0x124>
 8006b04:	e012      	b.n	8006b2c <UART_SetConfig+0x13c>
 8006b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b0a:	d006      	beq.n	8006b1a <UART_SetConfig+0x12a>
 8006b0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b10:	d009      	beq.n	8006b26 <UART_SetConfig+0x136>
 8006b12:	e00b      	b.n	8006b2c <UART_SetConfig+0x13c>
 8006b14:	2300      	movs	r3, #0
 8006b16:	76fb      	strb	r3, [r7, #27]
 8006b18:	e00e      	b.n	8006b38 <UART_SetConfig+0x148>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	76fb      	strb	r3, [r7, #27]
 8006b1e:	e00b      	b.n	8006b38 <UART_SetConfig+0x148>
 8006b20:	2304      	movs	r3, #4
 8006b22:	76fb      	strb	r3, [r7, #27]
 8006b24:	e008      	b.n	8006b38 <UART_SetConfig+0x148>
 8006b26:	2308      	movs	r3, #8
 8006b28:	76fb      	strb	r3, [r7, #27]
 8006b2a:	e005      	b.n	8006b38 <UART_SetConfig+0x148>
 8006b2c:	2310      	movs	r3, #16
 8006b2e:	76fb      	strb	r3, [r7, #27]
 8006b30:	bf00      	nop
 8006b32:	e001      	b.n	8006b38 <UART_SetConfig+0x148>
 8006b34:	2310      	movs	r3, #16
 8006b36:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a5f      	ldr	r2, [pc, #380]	; (8006cbc <UART_SetConfig+0x2cc>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	f040 808e 	bne.w	8006c60 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b44:	7efb      	ldrb	r3, [r7, #27]
 8006b46:	2b08      	cmp	r3, #8
 8006b48:	d823      	bhi.n	8006b92 <UART_SetConfig+0x1a2>
 8006b4a:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <UART_SetConfig+0x160>)
 8006b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b50:	08006b75 	.word	0x08006b75
 8006b54:	08006b93 	.word	0x08006b93
 8006b58:	08006b7d 	.word	0x08006b7d
 8006b5c:	08006b93 	.word	0x08006b93
 8006b60:	08006b83 	.word	0x08006b83
 8006b64:	08006b93 	.word	0x08006b93
 8006b68:	08006b93 	.word	0x08006b93
 8006b6c:	08006b93 	.word	0x08006b93
 8006b70:	08006b8b 	.word	0x08006b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b74:	f7fe fabc 	bl	80050f0 <HAL_RCC_GetPCLK1Freq>
 8006b78:	6178      	str	r0, [r7, #20]
        break;
 8006b7a:	e00f      	b.n	8006b9c <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b7c:	4b51      	ldr	r3, [pc, #324]	; (8006cc4 <UART_SetConfig+0x2d4>)
 8006b7e:	617b      	str	r3, [r7, #20]
        break;
 8006b80:	e00c      	b.n	8006b9c <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b82:	f7fe fa37 	bl	8004ff4 <HAL_RCC_GetSysClockFreq>
 8006b86:	6178      	str	r0, [r7, #20]
        break;
 8006b88:	e008      	b.n	8006b9c <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b8e:	617b      	str	r3, [r7, #20]
        break;
 8006b90:	e004      	b.n	8006b9c <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	76bb      	strb	r3, [r7, #26]
        break;
 8006b9a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f000 811c 	beq.w	8006ddc <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba8:	4a47      	ldr	r2, [pc, #284]	; (8006cc8 <UART_SetConfig+0x2d8>)
 8006baa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bb6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	005b      	lsls	r3, r3, #1
 8006bc0:	4413      	add	r3, r2
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d305      	bcc.n	8006bd4 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d902      	bls.n	8006bda <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	76bb      	strb	r3, [r7, #26]
 8006bd8:	e100      	b.n	8006ddc <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f04f 0100 	mov.w	r1, #0
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	4a38      	ldr	r2, [pc, #224]	; (8006cc8 <UART_SetConfig+0x2d8>)
 8006be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	f04f 0400 	mov.w	r4, #0
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	4623      	mov	r3, r4
 8006bf6:	f7f9 ff49 	bl	8000a8c <__aeabi_uldivmod>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	460c      	mov	r4, r1
 8006bfe:	4619      	mov	r1, r3
 8006c00:	4622      	mov	r2, r4
 8006c02:	f04f 0300 	mov.w	r3, #0
 8006c06:	f04f 0400 	mov.w	r4, #0
 8006c0a:	0214      	lsls	r4, r2, #8
 8006c0c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006c10:	020b      	lsls	r3, r1, #8
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	6852      	ldr	r2, [r2, #4]
 8006c16:	0852      	lsrs	r2, r2, #1
 8006c18:	4611      	mov	r1, r2
 8006c1a:	f04f 0200 	mov.w	r2, #0
 8006c1e:	eb13 0b01 	adds.w	fp, r3, r1
 8006c22:	eb44 0c02 	adc.w	ip, r4, r2
 8006c26:	4658      	mov	r0, fp
 8006c28:	4661      	mov	r1, ip
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f04f 0400 	mov.w	r4, #0
 8006c32:	461a      	mov	r2, r3
 8006c34:	4623      	mov	r3, r4
 8006c36:	f7f9 ff29 	bl	8000a8c <__aeabi_uldivmod>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	460c      	mov	r4, r1
 8006c3e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c46:	d308      	bcc.n	8006c5a <UART_SetConfig+0x26a>
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c4e:	d204      	bcs.n	8006c5a <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	60da      	str	r2, [r3, #12]
 8006c58:	e0c0      	b.n	8006ddc <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	76bb      	strb	r3, [r7, #26]
 8006c5e:	e0bd      	b.n	8006ddc <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c68:	d169      	bne.n	8006d3e <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006c6a:	7efb      	ldrb	r3, [r7, #27]
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	2b07      	cmp	r3, #7
 8006c70:	d82c      	bhi.n	8006ccc <UART_SetConfig+0x2dc>
 8006c72:	a201      	add	r2, pc, #4	; (adr r2, 8006c78 <UART_SetConfig+0x288>)
 8006c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c78:	08006c99 	.word	0x08006c99
 8006c7c:	08006ca1 	.word	0x08006ca1
 8006c80:	08006ccd 	.word	0x08006ccd
 8006c84:	08006ca7 	.word	0x08006ca7
 8006c88:	08006ccd 	.word	0x08006ccd
 8006c8c:	08006ccd 	.word	0x08006ccd
 8006c90:	08006ccd 	.word	0x08006ccd
 8006c94:	08006caf 	.word	0x08006caf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c98:	f7fe fa40 	bl	800511c <HAL_RCC_GetPCLK2Freq>
 8006c9c:	6178      	str	r0, [r7, #20]
        break;
 8006c9e:	e01a      	b.n	8006cd6 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ca0:	4b08      	ldr	r3, [pc, #32]	; (8006cc4 <UART_SetConfig+0x2d4>)
 8006ca2:	617b      	str	r3, [r7, #20]
        break;
 8006ca4:	e017      	b.n	8006cd6 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ca6:	f7fe f9a5 	bl	8004ff4 <HAL_RCC_GetSysClockFreq>
 8006caa:	6178      	str	r0, [r7, #20]
        break;
 8006cac:	e013      	b.n	8006cd6 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cb2:	617b      	str	r3, [r7, #20]
        break;
 8006cb4:	e00f      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006cb6:	bf00      	nop
 8006cb8:	cfff69f3 	.word	0xcfff69f3
 8006cbc:	40008000 	.word	0x40008000
 8006cc0:	40013800 	.word	0x40013800
 8006cc4:	00f42400 	.word	0x00f42400
 8006cc8:	0801406c 	.word	0x0801406c
      default:
        pclk = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	76bb      	strb	r3, [r7, #26]
        break;
 8006cd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d07f      	beq.n	8006ddc <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	4a48      	ldr	r2, [pc, #288]	; (8006e04 <UART_SetConfig+0x414>)
 8006ce2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cee:	005a      	lsls	r2, r3, #1
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	085b      	lsrs	r3, r3, #1
 8006cf6:	441a      	add	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	2b0f      	cmp	r3, #15
 8006d08:	d916      	bls.n	8006d38 <UART_SetConfig+0x348>
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d10:	d212      	bcs.n	8006d38 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	f023 030f 	bic.w	r3, r3, #15
 8006d1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	085b      	lsrs	r3, r3, #1
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	89fb      	ldrh	r3, [r7, #14]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	89fa      	ldrh	r2, [r7, #14]
 8006d34:	60da      	str	r2, [r3, #12]
 8006d36:	e051      	b.n	8006ddc <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	76bb      	strb	r3, [r7, #26]
 8006d3c:	e04e      	b.n	8006ddc <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d3e:	7efb      	ldrb	r3, [r7, #27]
 8006d40:	3b01      	subs	r3, #1
 8006d42:	2b07      	cmp	r3, #7
 8006d44:	d821      	bhi.n	8006d8a <UART_SetConfig+0x39a>
 8006d46:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <UART_SetConfig+0x35c>)
 8006d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4c:	08006d6d 	.word	0x08006d6d
 8006d50:	08006d75 	.word	0x08006d75
 8006d54:	08006d8b 	.word	0x08006d8b
 8006d58:	08006d7b 	.word	0x08006d7b
 8006d5c:	08006d8b 	.word	0x08006d8b
 8006d60:	08006d8b 	.word	0x08006d8b
 8006d64:	08006d8b 	.word	0x08006d8b
 8006d68:	08006d83 	.word	0x08006d83
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d6c:	f7fe f9d6 	bl	800511c <HAL_RCC_GetPCLK2Freq>
 8006d70:	6178      	str	r0, [r7, #20]
        break;
 8006d72:	e00f      	b.n	8006d94 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d74:	4b24      	ldr	r3, [pc, #144]	; (8006e08 <UART_SetConfig+0x418>)
 8006d76:	617b      	str	r3, [r7, #20]
        break;
 8006d78:	e00c      	b.n	8006d94 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d7a:	f7fe f93b 	bl	8004ff4 <HAL_RCC_GetSysClockFreq>
 8006d7e:	6178      	str	r0, [r7, #20]
        break;
 8006d80:	e008      	b.n	8006d94 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d86:	617b      	str	r3, [r7, #20]
        break;
 8006d88:	e004      	b.n	8006d94 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	76bb      	strb	r3, [r7, #26]
        break;
 8006d92:	bf00      	nop
    }

    if (pclk != 0U)
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d020      	beq.n	8006ddc <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	4a19      	ldr	r2, [pc, #100]	; (8006e04 <UART_SetConfig+0x414>)
 8006da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006da4:	461a      	mov	r2, r3
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	fbb3 f2f2 	udiv	r2, r3, r2
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	085b      	lsrs	r3, r3, #1
 8006db2:	441a      	add	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2b0f      	cmp	r3, #15
 8006dc4:	d908      	bls.n	8006dd8 <UART_SetConfig+0x3e8>
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dcc:	d204      	bcs.n	8006dd8 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	60da      	str	r2, [r3, #12]
 8006dd6:	e001      	b.n	8006ddc <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006df8:	7ebb      	ldrb	r3, [r7, #26]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3720      	adds	r7, #32
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006e04:	0801406c 	.word	0x0801406c
 8006e08:	00f42400 	.word	0x00f42400

08006e0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00a      	beq.n	8006e36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00a      	beq.n	8006e58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00a      	beq.n	8006e7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7e:	f003 0308 	and.w	r3, r3, #8
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00a      	beq.n	8006e9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea0:	f003 0310 	and.w	r3, r3, #16
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00a      	beq.n	8006ebe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec2:	f003 0320 	and.w	r3, r3, #32
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00a      	beq.n	8006ee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d01a      	beq.n	8006f22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f0a:	d10a      	bne.n	8006f22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00a      	beq.n	8006f44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	605a      	str	r2, [r3, #4]
  }
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006f60:	f7fc f9bc 	bl	80032dc <HAL_GetTick>
 8006f64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0308 	and.w	r3, r3, #8
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d10e      	bne.n	8006f92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f82c 	bl	8006fe0 <UART_WaitOnFlagUntilTimeout>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e022      	b.n	8006fd8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b04      	cmp	r3, #4
 8006f9e:	d10e      	bne.n	8006fbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f816 	bl	8006fe0 <UART_WaitOnFlagUntilTimeout>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e00c      	b.n	8006fd8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	603b      	str	r3, [r7, #0]
 8006fec:	4613      	mov	r3, r2
 8006fee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ff0:	e062      	b.n	80070b8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff8:	d05e      	beq.n	80070b8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ffa:	f7fc f96f 	bl	80032dc <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	69ba      	ldr	r2, [r7, #24]
 8007006:	429a      	cmp	r2, r3
 8007008:	d302      	bcc.n	8007010 <UART_WaitOnFlagUntilTimeout+0x30>
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d11d      	bne.n	800704c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800701e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689a      	ldr	r2, [r3, #8]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 0201 	bic.w	r2, r2, #1
 800702e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2220      	movs	r2, #32
 8007034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2220      	movs	r2, #32
 800703c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e045      	b.n	80070d8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0304 	and.w	r3, r3, #4
 8007056:	2b00      	cmp	r3, #0
 8007058:	d02e      	beq.n	80070b8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007068:	d126      	bne.n	80070b8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007072:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007082:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689a      	ldr	r2, [r3, #8]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 0201 	bic.w	r2, r2, #1
 8007092:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2220      	movs	r2, #32
 8007098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2220      	movs	r2, #32
 80070a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2220      	movs	r2, #32
 80070a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e00f      	b.n	80070d8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	69da      	ldr	r2, [r3, #28]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	4013      	ands	r3, r2
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	bf0c      	ite	eq
 80070c8:	2301      	moveq	r3, #1
 80070ca:	2300      	movne	r3, #0
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	461a      	mov	r2, r3
 80070d0:	79fb      	ldrb	r3, [r7, #7]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d08d      	beq.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80070f6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689a      	ldr	r2, [r3, #8]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007106:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2220      	movs	r2, #32
 800710c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007132:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	6812      	ldr	r2, [r2, #0]
 800713e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007142:	f023 0301 	bic.w	r3, r3, #1
 8007146:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2220      	movs	r2, #32
 800714c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b084      	sub	sp, #16
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b00      	cmp	r3, #0
 800717c:	d114      	bne.n	80071a8 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689a      	ldr	r2, [r3, #8]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007194:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071a4:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071a6:	e002      	b.n	80071ae <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f7fa fff5 	bl	8002198 <HAL_UART_TxCpltCallback>
}
 80071ae:	bf00      	nop
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b084      	sub	sp, #16
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f7ff fbff 	bl	80069c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071ca:	bf00      	nop
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b086      	sub	sp, #24
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071de:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071e6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071fa:	2b80      	cmp	r3, #128	; 0x80
 80071fc:	d109      	bne.n	8007212 <UART_DMAError+0x40>
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	2b21      	cmp	r3, #33	; 0x21
 8007202:	d106      	bne.n	8007212 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	2200      	movs	r2, #0
 8007208:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800720c:	6978      	ldr	r0, [r7, #20]
 800720e:	f7ff ff67 	bl	80070e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721c:	2b40      	cmp	r3, #64	; 0x40
 800721e:	d109      	bne.n	8007234 <UART_DMAError+0x62>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2b22      	cmp	r3, #34	; 0x22
 8007224:	d106      	bne.n	8007234 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2200      	movs	r2, #0
 800722a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800722e:	6978      	ldr	r0, [r7, #20]
 8007230:	f7ff ff74 	bl	800711c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800723a:	f043 0210 	orr.w	r2, r3, #16
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007244:	6978      	ldr	r0, [r7, #20]
 8007246:	f7ff fbc9 	bl	80069dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800724a:	bf00      	nop
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f7ff fbb3 	bl	80069dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007276:	bf00      	nop
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800727e:	b480      	push	{r7}
 8007280:	b083      	sub	sp, #12
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800728c:	2b21      	cmp	r3, #33	; 0x21
 800728e:	d12a      	bne.n	80072e6 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007296:	b29b      	uxth	r3, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d110      	bne.n	80072be <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072aa:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072ba:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80072bc:	e013      	b.n	80072e6 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c2:	781a      	ldrb	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80072da:	b29b      	uxth	r3, r3
 80072dc:	3b01      	subs	r3, #1
 80072de:	b29a      	uxth	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80072e6:	bf00      	nop
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b085      	sub	sp, #20
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007300:	2b21      	cmp	r3, #33	; 0x21
 8007302:	d12f      	bne.n	8007364 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800730a:	b29b      	uxth	r3, r3
 800730c:	2b00      	cmp	r3, #0
 800730e:	d110      	bne.n	8007332 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800731e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800732e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007330:	e018      	b.n	8007364 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007336:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007346:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734c:	1c9a      	adds	r2, r3, #2
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007358:	b29b      	uxth	r3, r3
 800735a:	3b01      	subs	r3, #1
 800735c:	b29a      	uxth	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007364:	bf00      	nop
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800737e:	2b21      	cmp	r3, #33	; 0x21
 8007380:	d13d      	bne.n	80073fe <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007388:	81fb      	strh	r3, [r7, #14]
 800738a:	e035      	b.n	80073f8 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007392:	b29b      	uxth	r3, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	d111      	bne.n	80073bc <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689a      	ldr	r2, [r3, #8]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80073a6:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073b6:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80073b8:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 80073ba:	e020      	b.n	80073fe <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d013      	beq.n	80073f2 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ce:	781a      	ldrb	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	3b01      	subs	r3, #1
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80073f2:	89fb      	ldrh	r3, [r7, #14]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	81fb      	strh	r3, [r7, #14]
 80073f8:	89fb      	ldrh	r3, [r7, #14]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1c6      	bne.n	800738c <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 80073fe:	bf00      	nop
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800740a:	b480      	push	{r7}
 800740c:	b085      	sub	sp, #20
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007418:	2b21      	cmp	r3, #33	; 0x21
 800741a:	d142      	bne.n	80074a2 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007422:	81fb      	strh	r3, [r7, #14]
 8007424:	e03a      	b.n	800749c <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800742c:	b29b      	uxth	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d111      	bne.n	8007456 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007440:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007450:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8007452:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8007454:	e025      	b.n	80074a2 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69db      	ldr	r3, [r3, #28]
 800745c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007460:	2b00      	cmp	r3, #0
 8007462:	d018      	beq.n	8007496 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007468:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007478:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800747e:	1c9a      	adds	r2, r3, #2
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800748a:	b29b      	uxth	r3, r3
 800748c:	3b01      	subs	r3, #1
 800748e:	b29a      	uxth	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007496:	89fb      	ldrh	r3, [r7, #14]
 8007498:	3b01      	subs	r3, #1
 800749a:	81fb      	strh	r3, [r7, #14]
 800749c:	89fb      	ldrh	r3, [r7, #14]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1c1      	bne.n	8007426 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 80074a2:	bf00      	nop
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b082      	sub	sp, #8
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074c4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2220      	movs	r2, #32
 80074ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7fa fe5f 	bl	8002198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074da:	bf00      	nop
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80074f0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074f8:	2b22      	cmp	r3, #34	; 0x22
 80074fa:	d13b      	bne.n	8007574 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007502:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007504:	89bb      	ldrh	r3, [r7, #12]
 8007506:	b2d9      	uxtb	r1, r3
 8007508:	89fb      	ldrh	r3, [r7, #14]
 800750a:	b2da      	uxtb	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007510:	400a      	ands	r2, r1
 8007512:	b2d2      	uxtb	r2, r2
 8007514:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800751a:	1c5a      	adds	r2, r3, #1
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007526:	b29b      	uxth	r3, r3
 8007528:	3b01      	subs	r3, #1
 800752a:	b29a      	uxth	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007538:	b29b      	uxth	r3, r3
 800753a:	2b00      	cmp	r3, #0
 800753c:	d122      	bne.n	8007584 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800754c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f022 0201 	bic.w	r2, r2, #1
 800755c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2220      	movs	r2, #32
 8007562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7fa fde7 	bl	8002140 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007572:	e007      	b.n	8007584 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	699a      	ldr	r2, [r3, #24]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f042 0208 	orr.w	r2, r2, #8
 8007582:	619a      	str	r2, [r3, #24]
}
 8007584:	bf00      	nop
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800759a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075a2:	2b22      	cmp	r3, #34	; 0x22
 80075a4:	d13b      	bne.n	800761e <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80075b4:	89ba      	ldrh	r2, [r7, #12]
 80075b6:	89fb      	ldrh	r3, [r7, #14]
 80075b8:	4013      	ands	r3, r2
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c4:	1c9a      	adds	r2, r3, #2
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	3b01      	subs	r3, #1
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d122      	bne.n	800762e <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80075f6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689a      	ldr	r2, [r3, #8]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 0201 	bic.w	r2, r2, #1
 8007606:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2220      	movs	r2, #32
 800760c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7fa fd92 	bl	8002140 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800761c:	e007      	b.n	800762e <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	699a      	ldr	r2, [r3, #24]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f042 0208 	orr.w	r2, r2, #8
 800762c:	619a      	str	r2, [r3, #24]
}
 800762e:	bf00      	nop
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007646:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800764e:	2b22      	cmp	r3, #34	; 0x22
 8007650:	d168      	bne.n	8007724 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007658:	81fb      	strh	r3, [r7, #14]
 800765a:	e03f      	b.n	80076dc <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007664:	893b      	ldrh	r3, [r7, #8]
 8007666:	b2d9      	uxtb	r1, r3
 8007668:	89bb      	ldrh	r3, [r7, #12]
 800766a:	b2da      	uxtb	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007670:	400a      	ands	r2, r1
 8007672:	b2d2      	uxtb	r2, r2
 8007674:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007686:	b29b      	uxth	r3, r3
 8007688:	3b01      	subs	r3, #1
 800768a:	b29a      	uxth	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007698:	b29b      	uxth	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d11b      	bne.n	80076d6 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076ac:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	6812      	ldr	r2, [r2, #0]
 80076b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076bc:	f023 0301 	bic.w	r3, r3, #1
 80076c0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7fa fd35 	bl	8002140 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80076d6:	89fb      	ldrh	r3, [r7, #14]
 80076d8:	3b01      	subs	r3, #1
 80076da:	81fb      	strh	r3, [r7, #14]
 80076dc:	89fb      	ldrh	r3, [r7, #14]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1bc      	bne.n	800765c <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076e8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80076ea:	897b      	ldrh	r3, [r7, #10]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d021      	beq.n	8007734 <UART_RxISR_8BIT_FIFOEN+0xfc>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80076f6:	897a      	ldrh	r2, [r7, #10]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d21b      	bcs.n	8007734 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	689a      	ldr	r2, [r3, #8]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800770a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a0b      	ldr	r2, [pc, #44]	; (800773c <UART_RxISR_8BIT_FIFOEN+0x104>)
 8007710:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f042 0220 	orr.w	r2, r2, #32
 8007720:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007722:	e007      	b.n	8007734 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	699a      	ldr	r2, [r3, #24]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f042 0208 	orr.w	r2, r2, #8
 8007732:	619a      	str	r2, [r3, #24]
}
 8007734:	bf00      	nop
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	080074e3 	.word	0x080074e3

08007740 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800774e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007756:	2b22      	cmp	r3, #34	; 0x22
 8007758:	d168      	bne.n	800782c <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007760:	82fb      	strh	r3, [r7, #22]
 8007762:	e03f      	b.n	80077e4 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776a:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007770:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8007772:	8a3a      	ldrh	r2, [r7, #16]
 8007774:	8abb      	ldrh	r3, [r7, #20]
 8007776:	4013      	ands	r3, r2
 8007778:	b29a      	uxth	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007782:	1c9a      	adds	r2, r3, #2
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800778e:	b29b      	uxth	r3, r3
 8007790:	3b01      	subs	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d11b      	bne.n	80077de <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077b4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	6812      	ldr	r2, [r2, #0]
 80077c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077c4:	f023 0301 	bic.w	r3, r3, #1
 80077c8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7fa fcb1 	bl	8002140 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80077de:	8afb      	ldrh	r3, [r7, #22]
 80077e0:	3b01      	subs	r3, #1
 80077e2:	82fb      	strh	r3, [r7, #22]
 80077e4:	8afb      	ldrh	r3, [r7, #22]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1bc      	bne.n	8007764 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077f0:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80077f2:	8a7b      	ldrh	r3, [r7, #18]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d021      	beq.n	800783c <UART_RxISR_16BIT_FIFOEN+0xfc>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80077fe:	8a7a      	ldrh	r2, [r7, #18]
 8007800:	429a      	cmp	r2, r3
 8007802:	d21b      	bcs.n	800783c <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689a      	ldr	r2, [r3, #8]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007812:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a0b      	ldr	r2, [pc, #44]	; (8007844 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8007818:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f042 0220 	orr.w	r2, r2, #32
 8007828:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800782a:	e007      	b.n	800783c <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0208 	orr.w	r2, r2, #8
 800783a:	619a      	str	r2, [r3, #24]
}
 800783c:	bf00      	nop
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	0800758d 	.word	0x0800758d

08007848 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007892:	2b01      	cmp	r3, #1
 8007894:	d101      	bne.n	800789a <HAL_UARTEx_DisableFifoMode+0x16>
 8007896:	2302      	movs	r3, #2
 8007898:	e027      	b.n	80078ea <HAL_UARTEx_DisableFifoMode+0x66>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2224      	movs	r2, #36	; 0x24
 80078a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 0201 	bic.w	r2, r2, #1
 80078c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80078c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2220      	movs	r2, #32
 80078dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b084      	sub	sp, #16
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007906:	2b01      	cmp	r3, #1
 8007908:	d101      	bne.n	800790e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800790a:	2302      	movs	r3, #2
 800790c:	e02d      	b.n	800796a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2224      	movs	r2, #36	; 0x24
 800791a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f022 0201 	bic.w	r2, r2, #1
 8007934:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	683a      	ldr	r2, [r7, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f850 	bl	80079f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2220      	movs	r2, #32
 800795c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b084      	sub	sp, #16
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
 800797a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007982:	2b01      	cmp	r3, #1
 8007984:	d101      	bne.n	800798a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007986:	2302      	movs	r3, #2
 8007988:	e02d      	b.n	80079e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2224      	movs	r2, #36	; 0x24
 8007996:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0201 	bic.w	r2, r2, #1
 80079b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f812 	bl	80079f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2220      	movs	r2, #32
 80079d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
	...

080079f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b089      	sub	sp, #36	; 0x24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80079f8:	4a2f      	ldr	r2, [pc, #188]	; (8007ab8 <UARTEx_SetNbDataToProcess+0xc8>)
 80079fa:	f107 0314 	add.w	r3, r7, #20
 80079fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a02:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007a06:	4a2d      	ldr	r2, [pc, #180]	; (8007abc <UARTEx_SetNbDataToProcess+0xcc>)
 8007a08:	f107 030c 	add.w	r3, r7, #12
 8007a0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a10:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d108      	bne.n	8007a2e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a2c:	e03d      	b.n	8007aaa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a2e:	2308      	movs	r3, #8
 8007a30:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a32:	2308      	movs	r3, #8
 8007a34:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	0e5b      	lsrs	r3, r3, #25
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	f003 0307 	and.w	r3, r3, #7
 8007a44:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	0f5b      	lsrs	r3, r3, #29
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	f003 0307 	and.w	r3, r3, #7
 8007a54:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007a56:	7fbb      	ldrb	r3, [r7, #30]
 8007a58:	7f3a      	ldrb	r2, [r7, #28]
 8007a5a:	f107 0120 	add.w	r1, r7, #32
 8007a5e:	440a      	add	r2, r1
 8007a60:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007a64:	fb02 f303 	mul.w	r3, r2, r3
 8007a68:	7f3a      	ldrb	r2, [r7, #28]
 8007a6a:	f107 0120 	add.w	r1, r7, #32
 8007a6e:	440a      	add	r2, r1
 8007a70:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007a74:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007a80:	7ffb      	ldrb	r3, [r7, #31]
 8007a82:	7f7a      	ldrb	r2, [r7, #29]
 8007a84:	f107 0120 	add.w	r1, r7, #32
 8007a88:	440a      	add	r2, r1
 8007a8a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007a8e:	fb02 f303 	mul.w	r3, r2, r3
 8007a92:	7f7a      	ldrb	r2, [r7, #29]
 8007a94:	f107 0120 	add.w	r1, r7, #32
 8007a98:	440a      	add	r2, r1
 8007a9a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007a9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007aaa:	bf00      	nop
 8007aac:	3724      	adds	r7, #36	; 0x24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	08013124 	.word	0x08013124
 8007abc:	0801312c 	.word	0x0801312c

08007ac0 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b088      	sub	sp, #32
 8007ac4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007aca:	f107 0308 	add.w	r3, r7, #8
 8007ace:	2218      	movs	r2, #24
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f001 fa3f 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007ad8:	233f      	movs	r3, #63	; 0x3f
 8007ada:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8007adc:	2381      	movs	r3, #129	; 0x81
 8007ade:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007ae0:	1dfb      	adds	r3, r7, #7
 8007ae2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ae8:	f107 0308 	add.w	r3, r7, #8
 8007aec:	2100      	movs	r1, #0
 8007aee:	4618      	mov	r0, r3
 8007af0:	f001 fe38 	bl	8009764 <hci_send_req>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	da01      	bge.n	8007afe <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007afa:	23ff      	movs	r3, #255	; 0xff
 8007afc:	e000      	b.n	8007b00 <aci_gap_set_non_discoverable+0x40>
  return status;
 8007afe:	79fb      	ldrb	r3, [r7, #7]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3720      	adds	r7, #32
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8007b08:	b5b0      	push	{r4, r5, r7, lr}
 8007b0a:	b0ce      	sub	sp, #312	; 0x138
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4605      	mov	r5, r0
 8007b10:	460c      	mov	r4, r1
 8007b12:	4610      	mov	r0, r2
 8007b14:	4619      	mov	r1, r3
 8007b16:	1dfb      	adds	r3, r7, #7
 8007b18:	462a      	mov	r2, r5
 8007b1a:	701a      	strb	r2, [r3, #0]
 8007b1c:	1d3b      	adds	r3, r7, #4
 8007b1e:	4622      	mov	r2, r4
 8007b20:	801a      	strh	r2, [r3, #0]
 8007b22:	1cbb      	adds	r3, r7, #2
 8007b24:	4602      	mov	r2, r0
 8007b26:	801a      	strh	r2, [r3, #0]
 8007b28:	1dbb      	adds	r3, r7, #6
 8007b2a:	460a      	mov	r2, r1
 8007b2c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8007b2e:	f107 0310 	add.w	r3, r7, #16
 8007b32:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8007b36:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	f107 0210 	add.w	r2, r7, #16
 8007b40:	4413      	add	r3, r2
 8007b42:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8007b46:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007b4a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007b4e:	4413      	add	r3, r2
 8007b50:	3309      	adds	r3, #9
 8007b52:	f107 0210 	add.w	r2, r7, #16
 8007b56:	4413      	add	r3, r2
 8007b58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007b5c:	f107 030f 	add.w	r3, r7, #15
 8007b60:	2200      	movs	r2, #0
 8007b62:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b64:	2300      	movs	r3, #0
 8007b66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8007b6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b6e:	1dfa      	adds	r2, r7, #7
 8007b70:	7812      	ldrb	r2, [r2, #0]
 8007b72:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007b74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b78:	3301      	adds	r3, #1
 8007b7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007b7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b82:	1d3a      	adds	r2, r7, #4
 8007b84:	8812      	ldrh	r2, [r2, #0]
 8007b86:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8007b8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b8e:	3302      	adds	r3, #2
 8007b90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8007b94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b98:	1cba      	adds	r2, r7, #2
 8007b9a:	8812      	ldrh	r2, [r2, #0]
 8007b9c:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007ba0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ba4:	3302      	adds	r3, #2
 8007ba6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8007baa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007bae:	1dba      	adds	r2, r7, #6
 8007bb0:	7812      	ldrb	r2, [r2, #0]
 8007bb2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007bb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bb8:	3301      	adds	r3, #1
 8007bba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007bbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007bc2:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007bc6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007bc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bcc:	3301      	adds	r3, #1
 8007bce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007bd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007bd6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007bda:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007bdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007be0:	3301      	adds	r3, #1
 8007be2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8007be6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007bea:	3308      	adds	r3, #8
 8007bec:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007bf0:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f001 f99e 	bl	8008f36 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8007bfa:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007bfe:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007c02:	4413      	add	r3, r2
 8007c04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8007c08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007c0c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007c10:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007c12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c16:	3301      	adds	r3, #1
 8007c18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007c1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007c20:	3301      	adds	r3, #1
 8007c22:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007c26:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f001 f983 	bl	8008f36 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007c30:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007c34:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007c38:	4413      	add	r3, r2
 8007c3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8007c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c42:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8007c46:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007c48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c4c:	3302      	adds	r3, #2
 8007c4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8007c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c56:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007c5a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007c5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c60:	3302      	adds	r3, #2
 8007c62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c6a:	2218      	movs	r2, #24
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f001 f971 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c74:	233f      	movs	r3, #63	; 0x3f
 8007c76:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8007c7a:	2383      	movs	r3, #131	; 0x83
 8007c7c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007c80:	f107 0310 	add.w	r3, r7, #16
 8007c84:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007c88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007c90:	f107 030f 	add.w	r3, r7, #15
 8007c94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f001 fd5d 	bl	8009764 <hci_send_req>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	da01      	bge.n	8007cb4 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8007cb0:	23ff      	movs	r3, #255	; 0xff
 8007cb2:	e002      	b.n	8007cba <aci_gap_set_discoverable+0x1b2>
  return status;
 8007cb4:	f107 030f 	add.w	r3, r7, #15
 8007cb8:	781b      	ldrb	r3, [r3, #0]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bdb0      	pop	{r4, r5, r7, pc}

08007cc4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b0cc      	sub	sp, #304	; 0x130
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	4602      	mov	r2, r0
 8007ccc:	1dfb      	adds	r3, r7, #7
 8007cce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007cd0:	f107 0310 	add.w	r3, r7, #16
 8007cd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007cd8:	f107 030f 	add.w	r3, r7, #15
 8007cdc:	2200      	movs	r2, #0
 8007cde:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8007ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cea:	1dfa      	adds	r2, r7, #7
 8007cec:	7812      	ldrb	r2, [r2, #0]
 8007cee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007cf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007cfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007cfe:	2218      	movs	r2, #24
 8007d00:	2100      	movs	r1, #0
 8007d02:	4618      	mov	r0, r3
 8007d04:	f001 f927 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d08:	233f      	movs	r3, #63	; 0x3f
 8007d0a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8007d0e:	2385      	movs	r3, #133	; 0x85
 8007d10:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007d14:	f107 0310 	add.w	r3, r7, #16
 8007d18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007d24:	f107 030f 	add.w	r3, r7, #15
 8007d28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d36:	2100      	movs	r1, #0
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f001 fd13 	bl	8009764 <hci_send_req>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	da01      	bge.n	8007d48 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8007d44:	23ff      	movs	r3, #255	; 0xff
 8007d46:	e002      	b.n	8007d4e <aci_gap_set_io_capability+0x8a>
  return status;
 8007d48:	f107 030f 	add.w	r3, r7, #15
 8007d4c:	781b      	ldrb	r3, [r3, #0]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007d58:	b5b0      	push	{r4, r5, r7, lr}
 8007d5a:	b0cc      	sub	sp, #304	; 0x130
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	4605      	mov	r5, r0
 8007d60:	460c      	mov	r4, r1
 8007d62:	4610      	mov	r0, r2
 8007d64:	4619      	mov	r1, r3
 8007d66:	1dfb      	adds	r3, r7, #7
 8007d68:	462a      	mov	r2, r5
 8007d6a:	701a      	strb	r2, [r3, #0]
 8007d6c:	1dbb      	adds	r3, r7, #6
 8007d6e:	4622      	mov	r2, r4
 8007d70:	701a      	strb	r2, [r3, #0]
 8007d72:	1d7b      	adds	r3, r7, #5
 8007d74:	4602      	mov	r2, r0
 8007d76:	701a      	strb	r2, [r3, #0]
 8007d78:	1d3b      	adds	r3, r7, #4
 8007d7a:	460a      	mov	r2, r1
 8007d7c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007d7e:	f107 0310 	add.w	r3, r7, #16
 8007d82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007d86:	f107 030f 	add.w	r3, r7, #15
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d98:	1dfa      	adds	r2, r7, #7
 8007d9a:	7812      	ldrb	r2, [r2, #0]
 8007d9c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007d9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007da2:	3301      	adds	r3, #1
 8007da4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007da8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dac:	1dba      	adds	r2, r7, #6
 8007dae:	7812      	ldrb	r2, [r2, #0]
 8007db0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007db2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007db6:	3301      	adds	r3, #1
 8007db8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dc0:	1d7a      	adds	r2, r7, #5
 8007dc2:	7812      	ldrb	r2, [r2, #0]
 8007dc4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007dc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dca:	3301      	adds	r3, #1
 8007dcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd4:	1d3a      	adds	r2, r7, #4
 8007dd6:	7812      	ldrb	r2, [r2, #0]
 8007dd8:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007dda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dde:	3301      	adds	r3, #1
 8007de0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de8:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007dec:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007dee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007df2:	3301      	adds	r3, #1
 8007df4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8007df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dfc:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007e00:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007e02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e06:	3301      	adds	r3, #1
 8007e08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007e0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e10:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007e14:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007e16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e24:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007e28:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007e2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e30:	3304      	adds	r3, #4
 8007e32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007e36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e3a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007e3e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007e40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e44:	3301      	adds	r3, #1
 8007e46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e4e:	2218      	movs	r2, #24
 8007e50:	2100      	movs	r1, #0
 8007e52:	4618      	mov	r0, r3
 8007e54:	f001 f87f 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e58:	233f      	movs	r3, #63	; 0x3f
 8007e5a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007e5e:	2386      	movs	r3, #134	; 0x86
 8007e60:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007e64:	f107 0310 	add.w	r3, r7, #16
 8007e68:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007e74:	f107 030f 	add.w	r3, r7, #15
 8007e78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e86:	2100      	movs	r1, #0
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f001 fc6b 	bl	8009764 <hci_send_req>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	da01      	bge.n	8007e98 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8007e94:	23ff      	movs	r3, #255	; 0xff
 8007e96:	e002      	b.n	8007e9e <aci_gap_set_authentication_requirement+0x146>
  return status;
 8007e98:	f107 030f 	add.w	r3, r7, #15
 8007e9c:	781b      	ldrb	r3, [r3, #0]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bdb0      	pop	{r4, r5, r7, pc}

08007ea8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b0cc      	sub	sp, #304	; 0x130
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	4602      	mov	r2, r0
 8007eb0:	463b      	mov	r3, r7
 8007eb2:	6019      	str	r1, [r3, #0]
 8007eb4:	1dbb      	adds	r3, r7, #6
 8007eb6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8007eb8:	f107 0310 	add.w	r3, r7, #16
 8007ebc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007ec0:	f107 030f 	add.w	r3, r7, #15
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ed2:	1dba      	adds	r2, r7, #6
 8007ed4:	8812      	ldrh	r2, [r2, #0]
 8007ed6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007ed8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007edc:	3302      	adds	r3, #2
 8007ede:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8007ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee6:	463a      	mov	r2, r7
 8007ee8:	6812      	ldr	r2, [r2, #0]
 8007eea:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8007eee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ef8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007efc:	2218      	movs	r2, #24
 8007efe:	2100      	movs	r1, #0
 8007f00:	4618      	mov	r0, r3
 8007f02:	f001 f828 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f06:	233f      	movs	r3, #63	; 0x3f
 8007f08:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8007f0c:	2388      	movs	r3, #136	; 0x88
 8007f0e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007f12:	f107 0310 	add.w	r3, r7, #16
 8007f16:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007f1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007f22:	f107 030f 	add.w	r3, r7, #15
 8007f26:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f34:	2100      	movs	r1, #0
 8007f36:	4618      	mov	r0, r3
 8007f38:	f001 fc14 	bl	8009764 <hci_send_req>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	da01      	bge.n	8007f46 <aci_gap_pass_key_resp+0x9e>
    return BLE_STATUS_TIMEOUT;
 8007f42:	23ff      	movs	r3, #255	; 0xff
 8007f44:	e002      	b.n	8007f4c <aci_gap_pass_key_resp+0xa4>
  return status;
 8007f46:	f107 030f 	add.w	r3, r7, #15
 8007f4a:	781b      	ldrb	r3, [r3, #0]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007f56:	b590      	push	{r4, r7, lr}
 8007f58:	b0cd      	sub	sp, #308	; 0x134
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	4608      	mov	r0, r1
 8007f60:	4611      	mov	r1, r2
 8007f62:	463a      	mov	r2, r7
 8007f64:	6013      	str	r3, [r2, #0]
 8007f66:	1dfb      	adds	r3, r7, #7
 8007f68:	4622      	mov	r2, r4
 8007f6a:	701a      	strb	r2, [r3, #0]
 8007f6c:	1dbb      	adds	r3, r7, #6
 8007f6e:	4602      	mov	r2, r0
 8007f70:	701a      	strb	r2, [r3, #0]
 8007f72:	1d7b      	adds	r3, r7, #5
 8007f74:	460a      	mov	r2, r1
 8007f76:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007f78:	f107 0310 	add.w	r3, r7, #16
 8007f7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007f80:	f107 0308 	add.w	r3, r7, #8
 8007f84:	2207      	movs	r2, #7
 8007f86:	2100      	movs	r1, #0
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 ffe4 	bl	8008f56 <Osal_MemSet>
  int index_input = 0;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f98:	1dfa      	adds	r2, r7, #7
 8007f9a:	7812      	ldrb	r2, [r2, #0]
 8007f9c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007f9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8007fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fac:	1dba      	adds	r2, r7, #6
 8007fae:	7812      	ldrb	r2, [r2, #0]
 8007fb0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007fb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc0:	1d7a      	adds	r2, r7, #5
 8007fc2:	7812      	ldrb	r2, [r2, #0]
 8007fc4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007fc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fca:	3301      	adds	r3, #1
 8007fcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007fd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007fd4:	2218      	movs	r2, #24
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 ffbc 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007fde:	233f      	movs	r3, #63	; 0x3f
 8007fe0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8007fe4:	238a      	movs	r3, #138	; 0x8a
 8007fe6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007fea:	f107 0310 	add.w	r3, r7, #16
 8007fee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007ff2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ff6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007ffa:	f107 0308 	add.w	r3, r7, #8
 8007ffe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008002:	2307      	movs	r3, #7
 8008004:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008008:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800800c:	2100      	movs	r1, #0
 800800e:	4618      	mov	r0, r3
 8008010:	f001 fba8 	bl	8009764 <hci_send_req>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	da01      	bge.n	800801e <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800801a:	23ff      	movs	r3, #255	; 0xff
 800801c:	e021      	b.n	8008062 <aci_gap_init+0x10c>
  if ( resp.Status )
 800801e:	f107 0308 	add.w	r3, r7, #8
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d003      	beq.n	8008030 <aci_gap_init+0xda>
    return resp.Status;
 8008028:	f107 0308 	add.w	r3, r7, #8
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	e018      	b.n	8008062 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8008030:	f107 0308 	add.w	r3, r7, #8
 8008034:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008038:	b29a      	uxth	r2, r3
 800803a:	463b      	mov	r3, r7
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008040:	f107 0308 	add.w	r3, r7, #8
 8008044:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008048:	b29a      	uxth	r2, r3
 800804a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800804e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008050:	f107 0308 	add.w	r3, r7, #8
 8008054:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008058:	b29a      	uxth	r2, r3
 800805a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800805e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008068:	46bd      	mov	sp, r7
 800806a:	bd90      	pop	{r4, r7, pc}

0800806c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b0cc      	sub	sp, #304	; 0x130
 8008070:	af00      	add	r7, sp, #0
 8008072:	4602      	mov	r2, r0
 8008074:	463b      	mov	r3, r7
 8008076:	6019      	str	r1, [r3, #0]
 8008078:	1dfb      	adds	r3, r7, #7
 800807a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800807c:	f107 0310 	add.w	r3, r7, #16
 8008080:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008084:	f107 030f 	add.w	r3, r7, #15
 8008088:	2200      	movs	r2, #0
 800808a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800808c:	2300      	movs	r3, #0
 800808e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008096:	1dfa      	adds	r2, r7, #7
 8008098:	7812      	ldrb	r2, [r2, #0]
 800809a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800809c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080a0:	3301      	adds	r3, #1
 80080a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80080a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080aa:	1c58      	adds	r0, r3, #1
 80080ac:	1dfb      	adds	r3, r7, #7
 80080ae:	781a      	ldrb	r2, [r3, #0]
 80080b0:	463b      	mov	r3, r7
 80080b2:	6819      	ldr	r1, [r3, #0]
 80080b4:	f000 ff3f 	bl	8008f36 <Osal_MemCpy>
  index_input += AdvDataLen;
 80080b8:	1dfb      	adds	r3, r7, #7
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80080c0:	4413      	add	r3, r2
 80080c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80080c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080ca:	2218      	movs	r2, #24
 80080cc:	2100      	movs	r1, #0
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 ff41 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 80080d4:	233f      	movs	r3, #63	; 0x3f
 80080d6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80080da:	238e      	movs	r3, #142	; 0x8e
 80080dc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80080e0:	f107 0310 	add.w	r3, r7, #16
 80080e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80080e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80080f0:	f107 030f 	add.w	r3, r7, #15
 80080f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80080f8:	2301      	movs	r3, #1
 80080fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80080fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008102:	2100      	movs	r1, #0
 8008104:	4618      	mov	r0, r3
 8008106:	f001 fb2d 	bl	8009764 <hci_send_req>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	da01      	bge.n	8008114 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8008110:	23ff      	movs	r3, #255	; 0xff
 8008112:	e002      	b.n	800811a <aci_gap_update_adv_data+0xae>
  return status;
 8008114:	f107 030f 	add.w	r3, r7, #15
 8008118:	781b      	ldrb	r3, [r3, #0]
}
 800811a:	4618      	mov	r0, r3
 800811c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b088      	sub	sp, #32
 8008128:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800812a:	2300      	movs	r3, #0
 800812c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800812e:	f107 0308 	add.w	r3, r7, #8
 8008132:	2218      	movs	r2, #24
 8008134:	2100      	movs	r1, #0
 8008136:	4618      	mov	r0, r3
 8008138:	f000 ff0d 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 800813c:	233f      	movs	r3, #63	; 0x3f
 800813e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008140:	2392      	movs	r3, #146	; 0x92
 8008142:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008144:	1dfb      	adds	r3, r7, #7
 8008146:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008148:	2301      	movs	r3, #1
 800814a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800814c:	f107 0308 	add.w	r3, r7, #8
 8008150:	2100      	movs	r1, #0
 8008152:	4618      	mov	r0, r3
 8008154:	f001 fb06 	bl	8009764 <hci_send_req>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	da01      	bge.n	8008162 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800815e:	23ff      	movs	r3, #255	; 0xff
 8008160:	e000      	b.n	8008164 <aci_gap_configure_whitelist+0x40>
  return status;
 8008162:	79fb      	ldrb	r3, [r7, #7]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3720      	adds	r7, #32
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <aci_gap_clear_security_db>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_clear_security_db( void )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b088      	sub	sp, #32
 8008170:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008172:	2300      	movs	r3, #0
 8008174:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008176:	f107 0308 	add.w	r3, r7, #8
 800817a:	2218      	movs	r2, #24
 800817c:	2100      	movs	r1, #0
 800817e:	4618      	mov	r0, r3
 8008180:	f000 fee9 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008184:	233f      	movs	r3, #63	; 0x3f
 8008186:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x094;
 8008188:	2394      	movs	r3, #148	; 0x94
 800818a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800818c:	1dfb      	adds	r3, r7, #7
 800818e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008190:	2301      	movs	r3, #1
 8008192:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008194:	f107 0308 	add.w	r3, r7, #8
 8008198:	2100      	movs	r1, #0
 800819a:	4618      	mov	r0, r3
 800819c:	f001 fae2 	bl	8009764 <hci_send_req>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	da01      	bge.n	80081aa <aci_gap_clear_security_db+0x3e>
    return BLE_STATUS_TIMEOUT;
 80081a6:	23ff      	movs	r3, #255	; 0xff
 80081a8:	e000      	b.n	80081ac <aci_gap_clear_security_db+0x40>
  return status;
 80081aa:	79fb      	ldrb	r3, [r7, #7]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3720      	adds	r7, #32
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <aci_gap_terminate_gap_proc>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_terminate_gap_proc( uint8_t Procedure_Code )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b0cc      	sub	sp, #304	; 0x130
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	4602      	mov	r2, r0
 80081bc:	1dfb      	adds	r3, r7, #7
 80081be:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 80081c0:	f107 0310 	add.w	r3, r7, #16
 80081c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80081c8:	f107 030f 	add.w	r3, r7, #15
 80081cc:	2200      	movs	r2, #0
 80081ce:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80081d0:	2300      	movs	r3, #0
 80081d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Procedure_Code = Procedure_Code;
 80081d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081da:	1dfa      	adds	r2, r7, #7
 80081dc:	7812      	ldrb	r2, [r2, #0]
 80081de:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80081e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081e4:	3301      	adds	r3, #1
 80081e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80081ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081ee:	2218      	movs	r2, #24
 80081f0:	2100      	movs	r1, #0
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 feaf 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 80081f8:	233f      	movs	r3, #63	; 0x3f
 80081fa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 80081fe:	239d      	movs	r3, #157	; 0x9d
 8008200:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008204:	f107 0310 	add.w	r3, r7, #16
 8008208:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800820c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008210:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008214:	f107 030f 	add.w	r3, r7, #15
 8008218:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800821c:	2301      	movs	r3, #1
 800821e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008222:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008226:	2100      	movs	r1, #0
 8008228:	4618      	mov	r0, r3
 800822a:	f001 fa9b 	bl	8009764 <hci_send_req>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	da01      	bge.n	8008238 <aci_gap_terminate_gap_proc+0x84>
    return BLE_STATUS_TIMEOUT;
 8008234:	23ff      	movs	r3, #255	; 0xff
 8008236:	e002      	b.n	800823e <aci_gap_terminate_gap_proc+0x8a>
  return status;
 8008238:	f107 030f 	add.w	r3, r7, #15
 800823c:	781b      	ldrb	r3, [r3, #0]
}
 800823e:	4618      	mov	r0, r3
 8008240:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b0cc      	sub	sp, #304	; 0x130
 800824c:	af00      	add	r7, sp, #0
 800824e:	4602      	mov	r2, r0
 8008250:	1dbb      	adds	r3, r7, #6
 8008252:	801a      	strh	r2, [r3, #0]
 8008254:	1d7b      	adds	r3, r7, #5
 8008256:	460a      	mov	r2, r1
 8008258:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800825a:	f107 0310 	add.w	r3, r7, #16
 800825e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008262:	f107 030f 	add.w	r3, r7, #15
 8008266:	2200      	movs	r2, #0
 8008268:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008274:	1dba      	adds	r2, r7, #6
 8008276:	8812      	ldrh	r2, [r2, #0]
 8008278:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800827a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800827e:	3302      	adds	r3, #2
 8008280:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8008284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008288:	1d7a      	adds	r2, r7, #5
 800828a:	7812      	ldrb	r2, [r2, #0]
 800828c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800828e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008292:	3301      	adds	r3, #1
 8008294:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008298:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800829c:	2218      	movs	r2, #24
 800829e:	2100      	movs	r1, #0
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 fe58 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 80082a6:	233f      	movs	r3, #63	; 0x3f
 80082a8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80082ac:	23a5      	movs	r3, #165	; 0xa5
 80082ae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80082b2:	f107 0310 	add.w	r3, r7, #16
 80082b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80082ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80082c2:	f107 030f 	add.w	r3, r7, #15
 80082c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80082ca:	2301      	movs	r3, #1
 80082cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80082d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80082d4:	2100      	movs	r1, #0
 80082d6:	4618      	mov	r0, r3
 80082d8:	f001 fa44 	bl	8009764 <hci_send_req>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	da01      	bge.n	80082e6 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 80082e2:	23ff      	movs	r3, #255	; 0xff
 80082e4:	e002      	b.n	80082ec <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 80082e6:	f107 030f 	add.w	r3, r7, #15
 80082ea:	781b      	ldrb	r3, [r3, #0]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b088      	sub	sp, #32
 80082fa:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008300:	f107 0308 	add.w	r3, r7, #8
 8008304:	2218      	movs	r2, #24
 8008306:	2100      	movs	r1, #0
 8008308:	4618      	mov	r0, r3
 800830a:	f000 fe24 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 800830e:	233f      	movs	r3, #63	; 0x3f
 8008310:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008312:	f240 1301 	movw	r3, #257	; 0x101
 8008316:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008318:	1dfb      	adds	r3, r7, #7
 800831a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800831c:	2301      	movs	r3, #1
 800831e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008320:	f107 0308 	add.w	r3, r7, #8
 8008324:	2100      	movs	r1, #0
 8008326:	4618      	mov	r0, r3
 8008328:	f001 fa1c 	bl	8009764 <hci_send_req>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	da01      	bge.n	8008336 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008332:	23ff      	movs	r3, #255	; 0xff
 8008334:	e000      	b.n	8008338 <aci_gatt_init+0x42>
  return status;
 8008336:	79fb      	ldrb	r3, [r7, #7]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3720      	adds	r7, #32
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008340:	b590      	push	{r4, r7, lr}
 8008342:	b0cf      	sub	sp, #316	; 0x13c
 8008344:	af00      	add	r7, sp, #0
 8008346:	4604      	mov	r4, r0
 8008348:	4638      	mov	r0, r7
 800834a:	6001      	str	r1, [r0, #0]
 800834c:	4610      	mov	r0, r2
 800834e:	4619      	mov	r1, r3
 8008350:	1dfb      	adds	r3, r7, #7
 8008352:	4622      	mov	r2, r4
 8008354:	701a      	strb	r2, [r3, #0]
 8008356:	1dbb      	adds	r3, r7, #6
 8008358:	4602      	mov	r2, r0
 800835a:	701a      	strb	r2, [r3, #0]
 800835c:	1d7b      	adds	r3, r7, #5
 800835e:	460a      	mov	r2, r1
 8008360:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008362:	f107 0310 	add.w	r3, r7, #16
 8008366:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800836a:	1dfb      	adds	r3, r7, #7
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d007      	beq.n	8008382 <aci_gatt_add_service+0x42>
 8008372:	1dfb      	adds	r3, r7, #7
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	2b02      	cmp	r3, #2
 8008378:	d101      	bne.n	800837e <aci_gatt_add_service+0x3e>
 800837a:	2311      	movs	r3, #17
 800837c:	e002      	b.n	8008384 <aci_gatt_add_service+0x44>
 800837e:	2301      	movs	r3, #1
 8008380:	e000      	b.n	8008384 <aci_gatt_add_service+0x44>
 8008382:	2303      	movs	r3, #3
 8008384:	f107 0210 	add.w	r2, r7, #16
 8008388:	4413      	add	r3, r2
 800838a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800838e:	f107 030c 	add.w	r3, r7, #12
 8008392:	2203      	movs	r2, #3
 8008394:	2100      	movs	r1, #0
 8008396:	4618      	mov	r0, r3
 8008398:	f000 fddd 	bl	8008f56 <Osal_MemSet>
  int index_input = 0;
 800839c:	2300      	movs	r3, #0
 800839e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80083a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80083a6:	1dfa      	adds	r2, r7, #7
 80083a8:	7812      	ldrb	r2, [r2, #0]
 80083aa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80083ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083b0:	3301      	adds	r3, #1
 80083b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80083b6:	1dfb      	adds	r3, r7, #7
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d002      	beq.n	80083c4 <aci_gatt_add_service+0x84>
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d004      	beq.n	80083cc <aci_gatt_add_service+0x8c>
 80083c2:	e007      	b.n	80083d4 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 80083c4:	2302      	movs	r3, #2
 80083c6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80083ca:	e005      	b.n	80083d8 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 80083cc:	2310      	movs	r3, #16
 80083ce:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80083d2:	e001      	b.n	80083d8 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 80083d4:	2347      	movs	r3, #71	; 0x47
 80083d6:	e05d      	b.n	8008494 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80083d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80083dc:	1c58      	adds	r0, r3, #1
 80083de:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80083e2:	463b      	mov	r3, r7
 80083e4:	6819      	ldr	r1, [r3, #0]
 80083e6:	f000 fda6 	bl	8008f36 <Osal_MemCpy>
    index_input += size;
 80083ea:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80083ee:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80083f2:	4413      	add	r3, r2
 80083f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80083f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083fc:	1dba      	adds	r2, r7, #6
 80083fe:	7812      	ldrb	r2, [r2, #0]
 8008400:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008402:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008406:	3301      	adds	r3, #1
 8008408:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800840c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008410:	1d7a      	adds	r2, r7, #5
 8008412:	7812      	ldrb	r2, [r2, #0]
 8008414:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008416:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800841a:	3301      	adds	r3, #1
 800841c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008420:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008424:	2218      	movs	r2, #24
 8008426:	2100      	movs	r1, #0
 8008428:	4618      	mov	r0, r3
 800842a:	f000 fd94 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 800842e:	233f      	movs	r3, #63	; 0x3f
 8008430:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8008434:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008438:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800843c:	f107 0310 	add.w	r3, r7, #16
 8008440:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008444:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008448:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800844c:	f107 030c 	add.w	r3, r7, #12
 8008450:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008454:	2303      	movs	r3, #3
 8008456:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800845a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800845e:	2100      	movs	r1, #0
 8008460:	4618      	mov	r0, r3
 8008462:	f001 f97f 	bl	8009764 <hci_send_req>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	da01      	bge.n	8008470 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800846c:	23ff      	movs	r3, #255	; 0xff
 800846e:	e011      	b.n	8008494 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8008470:	f107 030c 	add.w	r3, r7, #12
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <aci_gatt_add_service+0x142>
    return resp.Status;
 800847a:	f107 030c 	add.w	r3, r7, #12
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	e008      	b.n	8008494 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8008482:	f107 030c 	add.w	r3, r7, #12
 8008486:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800848a:	b29a      	uxth	r2, r3
 800848c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008490:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800849a:	46bd      	mov	sp, r7
 800849c:	bd90      	pop	{r4, r7, pc}

0800849e <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800849e:	b590      	push	{r4, r7, lr}
 80084a0:	b0d1      	sub	sp, #324	; 0x144
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	4604      	mov	r4, r0
 80084a6:	4608      	mov	r0, r1
 80084a8:	f107 0108 	add.w	r1, r7, #8
 80084ac:	600a      	str	r2, [r1, #0]
 80084ae:	4619      	mov	r1, r3
 80084b0:	f107 030e 	add.w	r3, r7, #14
 80084b4:	4622      	mov	r2, r4
 80084b6:	801a      	strh	r2, [r3, #0]
 80084b8:	f107 030d 	add.w	r3, r7, #13
 80084bc:	4602      	mov	r2, r0
 80084be:	701a      	strb	r2, [r3, #0]
 80084c0:	1dbb      	adds	r3, r7, #6
 80084c2:	460a      	mov	r2, r1
 80084c4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80084c6:	f107 0318 	add.w	r3, r7, #24
 80084ca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80084ce:	f107 030d 	add.w	r3, r7, #13
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d008      	beq.n	80084ea <aci_gatt_add_char+0x4c>
 80084d8:	f107 030d 	add.w	r3, r7, #13
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d101      	bne.n	80084e6 <aci_gatt_add_char+0x48>
 80084e2:	2313      	movs	r3, #19
 80084e4:	e002      	b.n	80084ec <aci_gatt_add_char+0x4e>
 80084e6:	2303      	movs	r3, #3
 80084e8:	e000      	b.n	80084ec <aci_gatt_add_char+0x4e>
 80084ea:	2305      	movs	r3, #5
 80084ec:	f107 0218 	add.w	r2, r7, #24
 80084f0:	4413      	add	r3, r2
 80084f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80084f6:	f107 0314 	add.w	r3, r7, #20
 80084fa:	2203      	movs	r2, #3
 80084fc:	2100      	movs	r1, #0
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 fd29 	bl	8008f56 <Osal_MemSet>
  int index_input = 0;
 8008504:	2300      	movs	r3, #0
 8008506:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800850a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800850e:	f107 020e 	add.w	r2, r7, #14
 8008512:	8812      	ldrh	r2, [r2, #0]
 8008514:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008516:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800851a:	3302      	adds	r3, #2
 800851c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008520:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008524:	f107 020d 	add.w	r2, r7, #13
 8008528:	7812      	ldrb	r2, [r2, #0]
 800852a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800852c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008530:	3301      	adds	r3, #1
 8008532:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8008536:	f107 030d 	add.w	r3, r7, #13
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d002      	beq.n	8008546 <aci_gatt_add_char+0xa8>
 8008540:	2b02      	cmp	r3, #2
 8008542:	d004      	beq.n	800854e <aci_gatt_add_char+0xb0>
 8008544:	e007      	b.n	8008556 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8008546:	2302      	movs	r3, #2
 8008548:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800854c:	e005      	b.n	800855a <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800854e:	2310      	movs	r3, #16
 8008550:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008554:	e001      	b.n	800855a <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8008556:	2347      	movs	r3, #71	; 0x47
 8008558:	e086      	b.n	8008668 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800855a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800855e:	1cd8      	adds	r0, r3, #3
 8008560:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8008564:	f107 0308 	add.w	r3, r7, #8
 8008568:	6819      	ldr	r1, [r3, #0]
 800856a:	f000 fce4 	bl	8008f36 <Osal_MemCpy>
    index_input += size;
 800856e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8008572:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008576:	4413      	add	r3, r2
 8008578:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800857c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008580:	1dba      	adds	r2, r7, #6
 8008582:	8812      	ldrh	r2, [r2, #0]
 8008584:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008586:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800858a:	3302      	adds	r3, #2
 800858c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8008590:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008594:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008598:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800859a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800859e:	3301      	adds	r3, #1
 80085a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80085a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085a8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80085ac:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80085ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80085b2:	3301      	adds	r3, #1
 80085b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80085b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085bc:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80085c0:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80085c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80085c6:	3301      	adds	r3, #1
 80085c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80085cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085d0:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80085d4:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80085d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80085da:	3301      	adds	r3, #1
 80085dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80085e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085e4:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80085e8:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80085ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80085ee:	3301      	adds	r3, #1
 80085f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80085f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085f8:	2218      	movs	r2, #24
 80085fa:	2100      	movs	r1, #0
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 fcaa 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008602:	233f      	movs	r3, #63	; 0x3f
 8008604:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8008608:	f44f 7382 	mov.w	r3, #260	; 0x104
 800860c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008610:	f107 0318 	add.w	r3, r7, #24
 8008614:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008618:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800861c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008620:	f107 0314 	add.w	r3, r7, #20
 8008624:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008628:	2303      	movs	r3, #3
 800862a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800862e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008632:	2100      	movs	r1, #0
 8008634:	4618      	mov	r0, r3
 8008636:	f001 f895 	bl	8009764 <hci_send_req>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	da01      	bge.n	8008644 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8008640:	23ff      	movs	r3, #255	; 0xff
 8008642:	e011      	b.n	8008668 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8008644:	f107 0314 	add.w	r3, r7, #20
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 800864e:	f107 0314 	add.w	r3, r7, #20
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	e008      	b.n	8008668 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8008656:	f107 0314 	add.w	r3, r7, #20
 800865a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800865e:	b29a      	uxth	r2, r3
 8008660:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008664:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800866e:	46bd      	mov	sp, r7
 8008670:	bd90      	pop	{r4, r7, pc}

08008672 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008672:	b5b0      	push	{r4, r5, r7, lr}
 8008674:	b0cc      	sub	sp, #304	; 0x130
 8008676:	af00      	add	r7, sp, #0
 8008678:	4605      	mov	r5, r0
 800867a:	460c      	mov	r4, r1
 800867c:	4610      	mov	r0, r2
 800867e:	4619      	mov	r1, r3
 8008680:	1dbb      	adds	r3, r7, #6
 8008682:	462a      	mov	r2, r5
 8008684:	801a      	strh	r2, [r3, #0]
 8008686:	1d3b      	adds	r3, r7, #4
 8008688:	4622      	mov	r2, r4
 800868a:	801a      	strh	r2, [r3, #0]
 800868c:	1cfb      	adds	r3, r7, #3
 800868e:	4602      	mov	r2, r0
 8008690:	701a      	strb	r2, [r3, #0]
 8008692:	1cbb      	adds	r3, r7, #2
 8008694:	460a      	mov	r2, r1
 8008696:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008698:	f107 0310 	add.w	r3, r7, #16
 800869c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80086a0:	f107 030f 	add.w	r3, r7, #15
 80086a4:	2200      	movs	r2, #0
 80086a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80086a8:	2300      	movs	r3, #0
 80086aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80086ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086b2:	1dba      	adds	r2, r7, #6
 80086b4:	8812      	ldrh	r2, [r2, #0]
 80086b6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80086b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086bc:	3302      	adds	r3, #2
 80086be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80086c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086c6:	1d3a      	adds	r2, r7, #4
 80086c8:	8812      	ldrh	r2, [r2, #0]
 80086ca:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80086cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086d0:	3302      	adds	r3, #2
 80086d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80086d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086da:	1cfa      	adds	r2, r7, #3
 80086dc:	7812      	ldrb	r2, [r2, #0]
 80086de:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80086e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086e4:	3301      	adds	r3, #1
 80086e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80086ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ee:	1cba      	adds	r2, r7, #2
 80086f0:	7812      	ldrb	r2, [r2, #0]
 80086f2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80086f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086f8:	3301      	adds	r3, #1
 80086fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80086fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008702:	1d98      	adds	r0, r3, #6
 8008704:	1cbb      	adds	r3, r7, #2
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	461a      	mov	r2, r3
 800870a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800870e:	f000 fc12 	bl	8008f36 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8008712:	1cbb      	adds	r3, r7, #2
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800871a:	4413      	add	r3, r2
 800871c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008720:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008724:	2218      	movs	r2, #24
 8008726:	2100      	movs	r1, #0
 8008728:	4618      	mov	r0, r3
 800872a:	f000 fc14 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 800872e:	233f      	movs	r3, #63	; 0x3f
 8008730:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8008734:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008738:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800873c:	f107 0310 	add.w	r3, r7, #16
 8008740:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008744:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008748:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800874c:	f107 030f 	add.w	r3, r7, #15
 8008750:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008754:	2301      	movs	r3, #1
 8008756:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800875a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800875e:	2100      	movs	r1, #0
 8008760:	4618      	mov	r0, r3
 8008762:	f000 ffff 	bl	8009764 <hci_send_req>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	da01      	bge.n	8008770 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800876c:	23ff      	movs	r3, #255	; 0xff
 800876e:	e002      	b.n	8008776 <aci_gatt_update_char_value+0x104>
  return status;
 8008770:	f107 030f 	add.w	r3, r7, #15
 8008774:	781b      	ldrb	r3, [r3, #0]
}
 8008776:	4618      	mov	r0, r3
 8008778:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800877c:	46bd      	mov	sp, r7
 800877e:	bdb0      	pop	{r4, r5, r7, pc}

08008780 <aci_gatt_exchange_config>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_exchange_config( uint16_t Connection_Handle )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b0cc      	sub	sp, #304	; 0x130
 8008784:	af00      	add	r7, sp, #0
 8008786:	4602      	mov	r2, r0
 8008788:	1dbb      	adds	r3, r7, #6
 800878a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
 800878c:	f107 0310 	add.w	r3, r7, #16
 8008790:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008794:	f107 030f 	add.w	r3, r7, #15
 8008798:	2200      	movs	r2, #0
 800879a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80087a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087a6:	1dba      	adds	r2, r7, #6
 80087a8:	8812      	ldrh	r2, [r2, #0]
 80087aa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80087ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087b0:	3302      	adds	r3, #2
 80087b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80087b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087ba:	2218      	movs	r2, #24
 80087bc:	2100      	movs	r1, #0
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 fbc9 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 80087c4:	233f      	movs	r3, #63	; 0x3f
 80087c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x10b;
 80087ca:	f240 130b 	movw	r3, #267	; 0x10b
 80087ce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80087d2:	230f      	movs	r3, #15
 80087d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80087d8:	f107 0310 	add.w	r3, r7, #16
 80087dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80087e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80087e8:	f107 030f 	add.w	r3, r7, #15
 80087ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80087f0:	2301      	movs	r3, #1
 80087f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80087f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087fa:	2100      	movs	r1, #0
 80087fc:	4618      	mov	r0, r3
 80087fe:	f000 ffb1 	bl	8009764 <hci_send_req>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	da01      	bge.n	800880c <aci_gatt_exchange_config+0x8c>
    return BLE_STATUS_TIMEOUT;
 8008808:	23ff      	movs	r3, #255	; 0xff
 800880a:	e002      	b.n	8008812 <aci_gatt_exchange_config+0x92>
  return status;
 800880c:	f107 030f 	add.w	r3, r7, #15
 8008810:	781b      	ldrb	r3, [r3, #0]
}
 8008812:	4618      	mov	r0, r3
 8008814:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <aci_gatt_disc_all_primary_services>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_disc_all_primary_services( uint16_t Connection_Handle )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b0cc      	sub	sp, #304	; 0x130
 8008820:	af00      	add	r7, sp, #0
 8008822:	4602      	mov	r2, r0
 8008824:	1dbb      	adds	r3, r7, #6
 8008826:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 8008828:	f107 0310 	add.w	r3, r7, #16
 800882c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008830:	f107 030f 	add.w	r3, r7, #15
 8008834:	2200      	movs	r2, #0
 8008836:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008838:	2300      	movs	r3, #0
 800883a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800883e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008842:	1dba      	adds	r2, r7, #6
 8008844:	8812      	ldrh	r2, [r2, #0]
 8008846:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008848:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800884c:	3302      	adds	r3, #2
 800884e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008852:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008856:	2218      	movs	r2, #24
 8008858:	2100      	movs	r1, #0
 800885a:	4618      	mov	r0, r3
 800885c:	f000 fb7b 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008860:	233f      	movs	r3, #63	; 0x3f
 8008862:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 8008866:	f44f 7389 	mov.w	r3, #274	; 0x112
 800886a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800886e:	230f      	movs	r3, #15
 8008870:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008874:	f107 0310 	add.w	r3, r7, #16
 8008878:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800887c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008880:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008884:	f107 030f 	add.w	r3, r7, #15
 8008888:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800888c:	2301      	movs	r3, #1
 800888e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008892:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008896:	2100      	movs	r1, #0
 8008898:	4618      	mov	r0, r3
 800889a:	f000 ff63 	bl	8009764 <hci_send_req>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	da01      	bge.n	80088a8 <aci_gatt_disc_all_primary_services+0x8c>
    return BLE_STATUS_TIMEOUT;
 80088a4:	23ff      	movs	r3, #255	; 0xff
 80088a6:	e002      	b.n	80088ae <aci_gatt_disc_all_primary_services+0x92>
  return status;
 80088a8:	f107 030f 	add.w	r3, r7, #15
 80088ac:	781b      	ldrb	r3, [r3, #0]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service( uint16_t Connection_Handle,
                                              uint16_t Start_Handle,
                                              uint16_t End_Handle )
{
 80088b8:	b590      	push	{r4, r7, lr}
 80088ba:	b0cd      	sub	sp, #308	; 0x134
 80088bc:	af00      	add	r7, sp, #0
 80088be:	4604      	mov	r4, r0
 80088c0:	4608      	mov	r0, r1
 80088c2:	4611      	mov	r1, r2
 80088c4:	1dbb      	adds	r3, r7, #6
 80088c6:	4622      	mov	r2, r4
 80088c8:	801a      	strh	r2, [r3, #0]
 80088ca:	1d3b      	adds	r3, r7, #4
 80088cc:	4602      	mov	r2, r0
 80088ce:	801a      	strh	r2, [r3, #0]
 80088d0:	1cbb      	adds	r3, r7, #2
 80088d2:	460a      	mov	r2, r1
 80088d4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 80088d6:	f107 0310 	add.w	r3, r7, #16
 80088da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80088de:	f107 030f 	add.w	r3, r7, #15
 80088e2:	2200      	movs	r2, #0
 80088e4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80088e6:	2300      	movs	r3, #0
 80088e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80088ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088f0:	1dba      	adds	r2, r7, #6
 80088f2:	8812      	ldrh	r2, [r2, #0]
 80088f4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80088f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088fa:	3302      	adds	r3, #2
 80088fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = Start_Handle;
 8008900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008904:	1d3a      	adds	r2, r7, #4
 8008906:	8812      	ldrh	r2, [r2, #0]
 8008908:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800890a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800890e:	3302      	adds	r3, #2
 8008910:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 8008914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008918:	1cba      	adds	r2, r7, #2
 800891a:	8812      	ldrh	r2, [r2, #0]
 800891c:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800891e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008922:	3302      	adds	r3, #2
 8008924:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008928:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800892c:	2218      	movs	r2, #24
 800892e:	2100      	movs	r1, #0
 8008930:	4618      	mov	r0, r3
 8008932:	f000 fb10 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008936:	233f      	movs	r3, #63	; 0x3f
 8008938:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 800893c:	f240 1315 	movw	r3, #277	; 0x115
 8008940:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008944:	230f      	movs	r3, #15
 8008946:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800894a:	f107 0310 	add.w	r3, r7, #16
 800894e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008952:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008956:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800895a:	f107 030f 	add.w	r3, r7, #15
 800895e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008962:	2301      	movs	r3, #1
 8008964:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008968:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800896c:	2100      	movs	r1, #0
 800896e:	4618      	mov	r0, r3
 8008970:	f000 fef8 	bl	8009764 <hci_send_req>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	da01      	bge.n	800897e <aci_gatt_disc_all_char_of_service+0xc6>
    return BLE_STATUS_TIMEOUT;
 800897a:	23ff      	movs	r3, #255	; 0xff
 800897c:	e002      	b.n	8008984 <aci_gatt_disc_all_char_of_service+0xcc>
  return status;
 800897e:	f107 030f 	add.w	r3, r7, #15
 8008982:	781b      	ldrb	r3, [r3, #0]
}
 8008984:	4618      	mov	r0, r3
 8008986:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800898a:	46bd      	mov	sp, r7
 800898c:	bd90      	pop	{r4, r7, pc}

0800898e <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc( uint16_t Connection_Handle,
                                        uint16_t Char_Handle,
                                        uint16_t End_Handle )
{
 800898e:	b590      	push	{r4, r7, lr}
 8008990:	b0cd      	sub	sp, #308	; 0x134
 8008992:	af00      	add	r7, sp, #0
 8008994:	4604      	mov	r4, r0
 8008996:	4608      	mov	r0, r1
 8008998:	4611      	mov	r1, r2
 800899a:	1dbb      	adds	r3, r7, #6
 800899c:	4622      	mov	r2, r4
 800899e:	801a      	strh	r2, [r3, #0]
 80089a0:	1d3b      	adds	r3, r7, #4
 80089a2:	4602      	mov	r2, r0
 80089a4:	801a      	strh	r2, [r3, #0]
 80089a6:	1cbb      	adds	r3, r7, #2
 80089a8:	460a      	mov	r2, r1
 80089aa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 80089ac:	f107 0310 	add.w	r3, r7, #16
 80089b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80089b4:	f107 030f 	add.w	r3, r7, #15
 80089b8:	2200      	movs	r2, #0
 80089ba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80089bc:	2300      	movs	r3, #0
 80089be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80089c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089c6:	1dba      	adds	r2, r7, #6
 80089c8:	8812      	ldrh	r2, [r2, #0]
 80089ca:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80089cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089d0:	3302      	adds	r3, #2
 80089d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80089d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089da:	1d3a      	adds	r2, r7, #4
 80089dc:	8812      	ldrh	r2, [r2, #0]
 80089de:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80089e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089e4:	3302      	adds	r3, #2
 80089e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 80089ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ee:	1cba      	adds	r2, r7, #2
 80089f0:	8812      	ldrh	r2, [r2, #0]
 80089f2:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80089f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089f8:	3302      	adds	r3, #2
 80089fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80089fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a02:	2218      	movs	r2, #24
 8008a04:	2100      	movs	r1, #0
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 faa5 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a0c:	233f      	movs	r3, #63	; 0x3f
 8008a0e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 8008a12:	f240 1317 	movw	r3, #279	; 0x117
 8008a16:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008a1a:	230f      	movs	r3, #15
 8008a1c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008a20:	f107 0310 	add.w	r3, r7, #16
 8008a24:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008a28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008a30:	f107 030f 	add.w	r3, r7, #15
 8008a34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a42:	2100      	movs	r1, #0
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 fe8d 	bl	8009764 <hci_send_req>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	da01      	bge.n	8008a54 <aci_gatt_disc_all_char_desc+0xc6>
    return BLE_STATUS_TIMEOUT;
 8008a50:	23ff      	movs	r3, #255	; 0xff
 8008a52:	e002      	b.n	8008a5a <aci_gatt_disc_all_char_desc+0xcc>
  return status;
 8008a54:	f107 030f 	add.w	r3, r7, #15
 8008a58:	781b      	ldrb	r3, [r3, #0]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd90      	pop	{r4, r7, pc}

08008a64 <aci_gatt_write_resp>:
                                uint16_t Attr_Handle,
                                uint8_t Write_status,
                                uint8_t Error_Code,
                                uint8_t Attribute_Val_Length,
                                const uint8_t* Attribute_Val )
{
 8008a64:	b5b0      	push	{r4, r5, r7, lr}
 8008a66:	b0cc      	sub	sp, #304	; 0x130
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	4605      	mov	r5, r0
 8008a6c:	460c      	mov	r4, r1
 8008a6e:	4610      	mov	r0, r2
 8008a70:	4619      	mov	r1, r3
 8008a72:	1dbb      	adds	r3, r7, #6
 8008a74:	462a      	mov	r2, r5
 8008a76:	801a      	strh	r2, [r3, #0]
 8008a78:	1d3b      	adds	r3, r7, #4
 8008a7a:	4622      	mov	r2, r4
 8008a7c:	801a      	strh	r2, [r3, #0]
 8008a7e:	1cfb      	adds	r3, r7, #3
 8008a80:	4602      	mov	r2, r0
 8008a82:	701a      	strb	r2, [r3, #0]
 8008a84:	1cbb      	adds	r3, r7, #2
 8008a86:	460a      	mov	r2, r1
 8008a88:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_resp_cp0 *cp0 = (aci_gatt_write_resp_cp0*)(cmd_buffer);
 8008a8a:	f107 0310 	add.w	r3, r7, #16
 8008a8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008a92:	f107 030f 	add.w	r3, r7, #15
 8008a96:	2200      	movs	r2, #0
 8008a98:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aa4:	1dba      	adds	r2, r7, #6
 8008aa6:	8812      	ldrh	r2, [r2, #0]
 8008aa8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008aaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008aae:	3302      	adds	r3, #2
 8008ab0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attr_Handle = Attr_Handle;
 8008ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ab8:	1d3a      	adds	r2, r7, #4
 8008aba:	8812      	ldrh	r2, [r2, #0]
 8008abc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008abe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ac2:	3302      	adds	r3, #2
 8008ac4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Write_status = Write_status;
 8008ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008acc:	1cfa      	adds	r2, r7, #3
 8008ace:	7812      	ldrb	r2, [r2, #0]
 8008ad0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008ad2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Error_Code = Error_Code;
 8008adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ae0:	1cba      	adds	r2, r7, #2
 8008ae2:	7812      	ldrb	r2, [r2, #0]
 8008ae4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008ae6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008aea:	3301      	adds	r3, #1
 8008aec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 8008af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008af4:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008af8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008afa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008afe:	3301      	adds	r3, #1
 8008b00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 8008b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b08:	3307      	adds	r3, #7
 8008b0a:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008b0e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 fa0f 	bl	8008f36 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 8008b18:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8008b1c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008b20:	4413      	add	r3, r2
 8008b22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b2a:	2218      	movs	r2, #24
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fa11 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b34:	233f      	movs	r3, #63	; 0x3f
 8008b36:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x126;
 8008b3a:	f44f 7393 	mov.w	r3, #294	; 0x126
 8008b3e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b42:	f107 0310 	add.w	r3, r7, #16
 8008b46:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008b52:	f107 030f 	add.w	r3, r7, #15
 8008b56:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b64:	2100      	movs	r1, #0
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 fdfc 	bl	8009764 <hci_send_req>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	da01      	bge.n	8008b76 <aci_gatt_write_resp+0x112>
    return BLE_STATUS_TIMEOUT;
 8008b72:	23ff      	movs	r3, #255	; 0xff
 8008b74:	e002      	b.n	8008b7c <aci_gatt_write_resp+0x118>
  return status;
 8008b76:	f107 030f 	add.w	r3, r7, #15
 8008b7a:	781b      	ldrb	r3, [r3, #0]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bdb0      	pop	{r4, r5, r7, pc}

08008b86 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b0cc      	sub	sp, #304	; 0x130
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	463b      	mov	r3, r7
 8008b8e:	601a      	str	r2, [r3, #0]
 8008b90:	1dfb      	adds	r3, r7, #7
 8008b92:	4602      	mov	r2, r0
 8008b94:	701a      	strb	r2, [r3, #0]
 8008b96:	1dbb      	adds	r3, r7, #6
 8008b98:	460a      	mov	r2, r1
 8008b9a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8008b9c:	f107 0310 	add.w	r3, r7, #16
 8008ba0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008ba4:	f107 030f 	add.w	r3, r7, #15
 8008ba8:	2200      	movs	r2, #0
 8008baa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008bac:	2300      	movs	r3, #0
 8008bae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8008bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bb6:	1dfa      	adds	r2, r7, #7
 8008bb8:	7812      	ldrb	r2, [r2, #0]
 8008bba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008bbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8008bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bca:	1dba      	adds	r2, r7, #6
 8008bcc:	7812      	ldrb	r2, [r2, #0]
 8008bce:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008bd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8008bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bde:	1c98      	adds	r0, r3, #2
 8008be0:	1dbb      	adds	r3, r7, #6
 8008be2:	781a      	ldrb	r2, [r3, #0]
 8008be4:	463b      	mov	r3, r7
 8008be6:	6819      	ldr	r1, [r3, #0]
 8008be8:	f000 f9a5 	bl	8008f36 <Osal_MemCpy>
  index_input += Length;
 8008bec:	1dbb      	adds	r3, r7, #6
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008bfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008bfe:	2218      	movs	r2, #24
 8008c00:	2100      	movs	r1, #0
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 f9a7 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c08:	233f      	movs	r3, #63	; 0x3f
 8008c0a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8008c0e:	230c      	movs	r3, #12
 8008c10:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008c14:	f107 0310 	add.w	r3, r7, #16
 8008c18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008c1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008c24:	f107 030f 	add.w	r3, r7, #15
 8008c28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c36:	2100      	movs	r1, #0
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 fd93 	bl	8009764 <hci_send_req>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	da01      	bge.n	8008c48 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8008c44:	23ff      	movs	r3, #255	; 0xff
 8008c46:	e002      	b.n	8008c4e <aci_hal_write_config_data+0xc8>
  return status;
 8008c48:	f107 030f 	add.w	r3, r7, #15
 8008c4c:	781b      	ldrb	r3, [r3, #0]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b0cc      	sub	sp, #304	; 0x130
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	4602      	mov	r2, r0
 8008c60:	1dfb      	adds	r3, r7, #7
 8008c62:	701a      	strb	r2, [r3, #0]
 8008c64:	1dbb      	adds	r3, r7, #6
 8008c66:	460a      	mov	r2, r1
 8008c68:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8008c6a:	f107 0310 	add.w	r3, r7, #16
 8008c6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008c72:	f107 030f 	add.w	r3, r7, #15
 8008c76:	2200      	movs	r2, #0
 8008c78:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8008c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c84:	1dfa      	adds	r2, r7, #7
 8008c86:	7812      	ldrb	r2, [r2, #0]
 8008c88:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008c8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c8e:	3301      	adds	r3, #1
 8008c90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8008c94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c98:	1dba      	adds	r2, r7, #6
 8008c9a:	7812      	ldrb	r2, [r2, #0]
 8008c9c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008c9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008ca8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cac:	2218      	movs	r2, #24
 8008cae:	2100      	movs	r1, #0
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f000 f950 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008cb6:	233f      	movs	r3, #63	; 0x3f
 8008cb8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8008cbc:	230f      	movs	r3, #15
 8008cbe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008cc2:	f107 0310 	add.w	r3, r7, #16
 8008cc6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008cca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008cd2:	f107 030f 	add.w	r3, r7, #15
 8008cd6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ce0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 fd3c 	bl	8009764 <hci_send_req>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	da01      	bge.n	8008cf6 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8008cf2:	23ff      	movs	r3, #255	; 0xff
 8008cf4:	e002      	b.n	8008cfc <aci_hal_set_tx_power_level+0xa4>
  return status;
 8008cf6:	f107 030f 	add.w	r3, r7, #15
 8008cfa:	781b      	ldrb	r3, [r3, #0]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b088      	sub	sp, #32
 8008d0a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d10:	f107 0308 	add.w	r3, r7, #8
 8008d14:	2218      	movs	r2, #24
 8008d16:	2100      	movs	r1, #0
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 f91c 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x03;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8008d22:	2303      	movs	r3, #3
 8008d24:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008d26:	1dfb      	adds	r3, r7, #7
 8008d28:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d2e:	f107 0308 	add.w	r3, r7, #8
 8008d32:	2100      	movs	r1, #0
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 fd15 	bl	8009764 <hci_send_req>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	da01      	bge.n	8008d44 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008d40:	23ff      	movs	r3, #255	; 0xff
 8008d42:	e000      	b.n	8008d46 <hci_reset+0x40>
  return status;
 8008d44:	79fb      	ldrb	r3, [r7, #7]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3720      	adds	r7, #32
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <hci_le_set_data_length>:
}

tBleStatus hci_le_set_data_length( uint16_t Connection_Handle,
                                   uint16_t TxOctets,
                                   uint16_t TxTime )
{
 8008d4e:	b590      	push	{r4, r7, lr}
 8008d50:	b0cd      	sub	sp, #308	; 0x134
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	4604      	mov	r4, r0
 8008d56:	4608      	mov	r0, r1
 8008d58:	4611      	mov	r1, r2
 8008d5a:	1dbb      	adds	r3, r7, #6
 8008d5c:	4622      	mov	r2, r4
 8008d5e:	801a      	strh	r2, [r3, #0]
 8008d60:	1d3b      	adds	r3, r7, #4
 8008d62:	4602      	mov	r2, r0
 8008d64:	801a      	strh	r2, [r3, #0]
 8008d66:	1cbb      	adds	r3, r7, #2
 8008d68:	460a      	mov	r2, r1
 8008d6a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_data_length_cp0 *cp0 = (hci_le_set_data_length_cp0*)(cmd_buffer);
 8008d6c:	f107 0310 	add.w	r3, r7, #16
 8008d70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  hci_le_set_data_length_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008d74:	f107 030c 	add.w	r3, r7, #12
 8008d78:	2203      	movs	r2, #3
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 f8ea 	bl	8008f56 <Osal_MemSet>
  int index_input = 0;
 8008d82:	2300      	movs	r3, #0
 8008d84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d8c:	1dba      	adds	r2, r7, #6
 8008d8e:	8812      	ldrh	r2, [r2, #0]
 8008d90:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008d92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d96:	3302      	adds	r3, #2
 8008d98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TxOctets = TxOctets;
 8008d9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008da0:	1d3a      	adds	r2, r7, #4
 8008da2:	8812      	ldrh	r2, [r2, #0]
 8008da4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008da6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008daa:	3302      	adds	r3, #2
 8008dac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TxTime = TxTime;
 8008db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008db4:	1cba      	adds	r2, r7, #2
 8008db6:	8812      	ldrh	r2, [r2, #0]
 8008db8:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8008dba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dbe:	3302      	adds	r3, #2
 8008dc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008dc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008dc8:	2218      	movs	r2, #24
 8008dca:	2100      	movs	r1, #0
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f000 f8c2 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x08;
 8008dd2:	2308      	movs	r3, #8
 8008dd4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x022;
 8008dd8:	2322      	movs	r3, #34	; 0x22
 8008dda:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008dde:	f107 0310 	add.w	r3, r7, #16
 8008de2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008de6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008dee:	f107 030c 	add.w	r3, r7, #12
 8008df2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008df6:	2303      	movs	r3, #3
 8008df8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008dfc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e00:	2100      	movs	r1, #0
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 fcae 	bl	8009764 <hci_send_req>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	da01      	bge.n	8008e12 <hci_le_set_data_length+0xc4>
    return BLE_STATUS_TIMEOUT;
 8008e0e:	23ff      	movs	r3, #255	; 0xff
 8008e10:	e009      	b.n	8008e26 <hci_le_set_data_length+0xd8>
  if ( resp.Status )
 8008e12:	f107 030c 	add.w	r3, r7, #12
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d003      	beq.n	8008e24 <hci_le_set_data_length+0xd6>
    return resp.Status;
 8008e1c:	f107 030c 	add.w	r3, r7, #12
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	e000      	b.n	8008e26 <hci_le_set_data_length+0xd8>
  return BLE_STATUS_SUCCESS;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd90      	pop	{r4, r7, pc}

08008e30 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Slave_latency,
                                                      uint16_t Timeout_Multiplier )
{
 8008e30:	b5b0      	push	{r4, r5, r7, lr}
 8008e32:	b0cc      	sub	sp, #304	; 0x130
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	4605      	mov	r5, r0
 8008e38:	460c      	mov	r4, r1
 8008e3a:	4610      	mov	r0, r2
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	1dbb      	adds	r3, r7, #6
 8008e40:	462a      	mov	r2, r5
 8008e42:	801a      	strh	r2, [r3, #0]
 8008e44:	1d3b      	adds	r3, r7, #4
 8008e46:	4622      	mov	r2, r4
 8008e48:	801a      	strh	r2, [r3, #0]
 8008e4a:	1cbb      	adds	r3, r7, #2
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	801a      	strh	r2, [r3, #0]
 8008e50:	463b      	mov	r3, r7
 8008e52:	460a      	mov	r2, r1
 8008e54:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 8008e56:	f107 0310 	add.w	r3, r7, #16
 8008e5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008e5e:	f107 030f 	add.w	r3, r7, #15
 8008e62:	2200      	movs	r2, #0
 8008e64:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008e66:	2300      	movs	r3, #0
 8008e68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e70:	1dba      	adds	r2, r7, #6
 8008e72:	8812      	ldrh	r2, [r2, #0]
 8008e74:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008e76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e7a:	3302      	adds	r3, #2
 8008e7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8008e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e84:	1d3a      	adds	r2, r7, #4
 8008e86:	8812      	ldrh	r2, [r2, #0]
 8008e88:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008e8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e8e:	3302      	adds	r3, #2
 8008e90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8008e94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e98:	1cba      	adds	r2, r7, #2
 8008e9a:	8812      	ldrh	r2, [r2, #0]
 8008e9c:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8008e9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ea2:	3302      	adds	r3, #2
 8008ea4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = Slave_latency;
 8008ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eac:	463a      	mov	r2, r7
 8008eae:	8812      	ldrh	r2, [r2, #0]
 8008eb0:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8008eb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008eb6:	3302      	adds	r3, #2
 8008eb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8008ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ec0:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8008ec4:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8008ec6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008eca:	3302      	adds	r3, #2
 8008ecc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008ed0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ed4:	2218      	movs	r2, #24
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 f83c 	bl	8008f56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008ede:	233f      	movs	r3, #63	; 0x3f
 8008ee0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 8008ee4:	f240 1381 	movw	r3, #385	; 0x181
 8008ee8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008eec:	230f      	movs	r3, #15
 8008eee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008ef2:	f107 0310 	add.w	r3, r7, #16
 8008ef6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008efa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008efe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008f02:	f107 030f 	add.w	r3, r7, #15
 8008f06:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f14:	2100      	movs	r1, #0
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 fc24 	bl	8009764 <hci_send_req>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	da01      	bge.n	8008f26 <aci_l2cap_connection_parameter_update_req+0xf6>
    return BLE_STATUS_TIMEOUT;
 8008f22:	23ff      	movs	r3, #255	; 0xff
 8008f24:	e002      	b.n	8008f2c <aci_l2cap_connection_parameter_update_req+0xfc>
  return status;
 8008f26:	f107 030f 	add.w	r3, r7, #15
 8008f2a:	781b      	ldrb	r3, [r3, #0]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bdb0      	pop	{r4, r5, r7, pc}

08008f36 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b084      	sub	sp, #16
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	60f8      	str	r0, [r7, #12]
 8008f3e:	60b9      	str	r1, [r7, #8]
 8008f40:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	68b9      	ldr	r1, [r7, #8]
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f008 fe64 	bl	8011c14 <memcpy>
 8008f4c:	4603      	mov	r3, r0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	60f8      	str	r0, [r7, #12]
 8008f5e:	60b9      	str	r1, [r7, #8]
 8008f60:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	68b9      	ldr	r1, [r7, #8]
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f008 fe5f 	bl	8011c2a <memset>
 8008f6c:	4603      	mov	r3, r0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
	...

08008f78 <DIS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DIS_Init(void)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b088      	sub	sp, #32
 8008f7c:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult;

  memset ( &DIS_Context, 0, sizeof(DIS_Context_t) );
 8008f7e:	2204      	movs	r2, #4
 8008f80:	2100      	movs	r1, #0
 8008f82:	4816      	ldr	r0, [pc, #88]	; (8008fdc <DIS_Init+0x64>)
 8008f84:	f008 fe51 	bl	8011c2a <memset>
   */

  /**
   *  Add Device Information Service
   */
  uuid = DEVICE_INFORMATION_SERVICE_UUID;
 8008f88:	f641 030a 	movw	r3, #6154	; 0x180a
 8008f8c:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 8008f8e:	1d39      	adds	r1, r7, #4
 8008f90:	4b12      	ldr	r3, [pc, #72]	; (8008fdc <DIS_Init+0x64>)
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	2303      	movs	r3, #3
 8008f96:	2201      	movs	r2, #1
 8008f98:	2001      	movs	r0, #1
 8008f9a:	f7ff f9d1 	bl	8008340 <aci_gatt_add_service>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
  /**
   *  Add Manufacturer Name String Characteristic
   */
  uuid = MANUFACTURER_NAME_UUID;
 8008fa2:	f642 2329 	movw	r3, #10793	; 0x2a29
 8008fa6:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(DIS_Context.DeviceInformationSvcHdle,
 8008fa8:	4b0c      	ldr	r3, [pc, #48]	; (8008fdc <DIS_Init+0x64>)
 8008faa:	8818      	ldrh	r0, [r3, #0]
 8008fac:	1d3a      	adds	r2, r7, #4
 8008fae:	4b0c      	ldr	r3, [pc, #48]	; (8008fe0 <DIS_Init+0x68>)
 8008fb0:	9305      	str	r3, [sp, #20]
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	9304      	str	r3, [sp, #16]
 8008fb6:	230a      	movs	r3, #10
 8008fb8:	9303      	str	r3, [sp, #12]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	9302      	str	r3, [sp, #8]
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	9301      	str	r3, [sp, #4]
 8008fc2:	2302      	movs	r3, #2
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	2320      	movs	r3, #32
 8008fc8:	2101      	movs	r1, #1
 8008fca:	f7ff fa68 	bl	800849e <aci_gatt_add_char>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	71fb      	strb	r3, [r7, #7]
    BLE_DBG_DIS_MSG ("FAILED to add PNP ID Characteristic, Error: %02X !!\n", 
                hciCmdResult);
  }
#endif
      
  return;
 8008fd2:	bf00      	nop
}
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	20000128 	.word	0x20000128
 8008fe0:	2000012a 	.word	0x2000012a

08008fe4 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08a      	sub	sp, #40	; 0x28
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8008fec:	2300      	movs	r3, #0
 8008fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8008ff8:	6a3b      	ldr	r3, [r7, #32]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	2bff      	cmp	r3, #255	; 0xff
 8008ffe:	d000      	beq.n	8009002 <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8009000:	e04d      	b.n	800909e <PeerToPeer_Event_Handler+0xba>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8009002:	6a3b      	ldr	r3, [r7, #32]
 8009004:	3302      	adds	r3, #2
 8009006:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	881b      	ldrh	r3, [r3, #0]
 800900c:	b29b      	uxth	r3, r3
 800900e:	461a      	mov	r2, r3
 8009010:	f640 4301 	movw	r3, #3073	; 0xc01
 8009014:	429a      	cmp	r2, r3
 8009016:	d000      	beq.n	800901a <PeerToPeer_Event_Handler+0x36>
          break;
 8009018:	e040      	b.n	800909c <PeerToPeer_Event_Handler+0xb8>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	3302      	adds	r3, #2
 800901e:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	885b      	ldrh	r3, [r3, #2]
 8009024:	b29b      	uxth	r3, r3
 8009026:	461a      	mov	r2, r3
 8009028:	4b20      	ldr	r3, [pc, #128]	; (80090ac <PeerToPeer_Event_Handler+0xc8>)
 800902a:	889b      	ldrh	r3, [r3, #4]
 800902c:	3302      	adds	r3, #2
 800902e:	429a      	cmp	r2, r3
 8009030:	d118      	bne.n	8009064 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 8009032:	2301      	movs	r3, #1
 8009034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	7a1b      	ldrb	r3, [r3, #8]
 800903c:	f003 0301 	and.w	r3, r3, #1
 8009040:	2b00      	cmp	r3, #0
 8009042:	d007      	beq.n	8009054 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8009044:	2300      	movs	r3, #0
 8009046:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8009048:	f107 0308 	add.w	r3, r7, #8
 800904c:	4618      	mov	r0, r3
 800904e:	f008 f8e9 	bl	8011224 <P2PS_STM_App_Notification>
        break;
 8009052:	e022      	b.n	800909a <PeerToPeer_Event_Handler+0xb6>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8009054:	2301      	movs	r3, #1
 8009056:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8009058:	f107 0308 	add.w	r3, r7, #8
 800905c:	4618      	mov	r0, r3
 800905e:	f008 f8e1 	bl	8011224 <P2PS_STM_App_Notification>
        break;
 8009062:	e01a      	b.n	800909a <PeerToPeer_Event_Handler+0xb6>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	885b      	ldrh	r3, [r3, #2]
 8009068:	b29b      	uxth	r3, r3
 800906a:	461a      	mov	r2, r3
 800906c:	4b0f      	ldr	r3, [pc, #60]	; (80090ac <PeerToPeer_Event_Handler+0xc8>)
 800906e:	885b      	ldrh	r3, [r3, #2]
 8009070:	3301      	adds	r3, #1
 8009072:	429a      	cmp	r2, r3
 8009074:	d111      	bne.n	800909a <PeerToPeer_Event_Handler+0xb6>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 8009076:	480e      	ldr	r0, [pc, #56]	; (80090b0 <PeerToPeer_Event_Handler+0xcc>)
 8009078:	f008 fe54 	bl	8011d24 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800907c:	2303      	movs	r3, #3
 800907e:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	88db      	ldrh	r3, [r3, #6]
 8009084:	b29b      	uxth	r3, r3
 8009086:	b2db      	uxtb	r3, r3
 8009088:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	3308      	adds	r3, #8
 800908e:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8009090:	f107 0308 	add.w	r3, r7, #8
 8009094:	4618      	mov	r0, r3
 8009096:	f008 f8c5 	bl	8011224 <P2PS_STM_App_Notification>
        break;
 800909a:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800909c:	bf00      	nop
  }

  return(return_value);
 800909e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 80090a2:	4618      	mov	r0, r3
 80090a4:	3728      	adds	r7, #40	; 0x28
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	2000012c 	.word	0x2000012c
 80090b0:	08013134 	.word	0x08013134

080090b4 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b08a      	sub	sp, #40	; 0x28
 80090b8:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 80090ba:	484a      	ldr	r0, [pc, #296]	; (80091e4 <P2PS_STM_Init+0x130>)
 80090bc:	f000 f922 	bl	8009304 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 80090c0:	238f      	movs	r3, #143	; 0x8f
 80090c2:	703b      	strb	r3, [r7, #0]
 80090c4:	23e5      	movs	r3, #229	; 0xe5
 80090c6:	707b      	strb	r3, [r7, #1]
 80090c8:	23b3      	movs	r3, #179	; 0xb3
 80090ca:	70bb      	strb	r3, [r7, #2]
 80090cc:	23d5      	movs	r3, #213	; 0xd5
 80090ce:	70fb      	strb	r3, [r7, #3]
 80090d0:	232e      	movs	r3, #46	; 0x2e
 80090d2:	713b      	strb	r3, [r7, #4]
 80090d4:	237f      	movs	r3, #127	; 0x7f
 80090d6:	717b      	strb	r3, [r7, #5]
 80090d8:	234a      	movs	r3, #74	; 0x4a
 80090da:	71bb      	strb	r3, [r7, #6]
 80090dc:	2398      	movs	r3, #152	; 0x98
 80090de:	71fb      	strb	r3, [r7, #7]
 80090e0:	232a      	movs	r3, #42	; 0x2a
 80090e2:	723b      	strb	r3, [r7, #8]
 80090e4:	2348      	movs	r3, #72	; 0x48
 80090e6:	727b      	strb	r3, [r7, #9]
 80090e8:	237a      	movs	r3, #122	; 0x7a
 80090ea:	72bb      	strb	r3, [r7, #10]
 80090ec:	23cc      	movs	r3, #204	; 0xcc
 80090ee:	72fb      	strb	r3, [r7, #11]
 80090f0:	2340      	movs	r3, #64	; 0x40
 80090f2:	733b      	strb	r3, [r7, #12]
 80090f4:	23fe      	movs	r3, #254	; 0xfe
 80090f6:	737b      	strb	r3, [r7, #13]
 80090f8:	2300      	movs	r3, #0
 80090fa:	73bb      	strb	r3, [r7, #14]
 80090fc:	2300      	movs	r3, #0
 80090fe:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8009100:	4639      	mov	r1, r7
 8009102:	4b39      	ldr	r3, [pc, #228]	; (80091e8 <P2PS_STM_Init+0x134>)
 8009104:	9300      	str	r3, [sp, #0]
 8009106:	2308      	movs	r3, #8
 8009108:	2201      	movs	r2, #1
 800910a:	2002      	movs	r0, #2
 800910c:	f7ff f918 	bl	8008340 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8009110:	2319      	movs	r3, #25
 8009112:	703b      	strb	r3, [r7, #0]
 8009114:	23ed      	movs	r3, #237	; 0xed
 8009116:	707b      	strb	r3, [r7, #1]
 8009118:	2382      	movs	r3, #130	; 0x82
 800911a:	70bb      	strb	r3, [r7, #2]
 800911c:	23ae      	movs	r3, #174	; 0xae
 800911e:	70fb      	strb	r3, [r7, #3]
 8009120:	23ed      	movs	r3, #237	; 0xed
 8009122:	713b      	strb	r3, [r7, #4]
 8009124:	2321      	movs	r3, #33	; 0x21
 8009126:	717b      	strb	r3, [r7, #5]
 8009128:	234c      	movs	r3, #76	; 0x4c
 800912a:	71bb      	strb	r3, [r7, #6]
 800912c:	239d      	movs	r3, #157	; 0x9d
 800912e:	71fb      	strb	r3, [r7, #7]
 8009130:	2341      	movs	r3, #65	; 0x41
 8009132:	723b      	strb	r3, [r7, #8]
 8009134:	2345      	movs	r3, #69	; 0x45
 8009136:	727b      	strb	r3, [r7, #9]
 8009138:	2322      	movs	r3, #34	; 0x22
 800913a:	72bb      	strb	r3, [r7, #10]
 800913c:	238e      	movs	r3, #142	; 0x8e
 800913e:	72fb      	strb	r3, [r7, #11]
 8009140:	2341      	movs	r3, #65	; 0x41
 8009142:	733b      	strb	r3, [r7, #12]
 8009144:	23fe      	movs	r3, #254	; 0xfe
 8009146:	737b      	strb	r3, [r7, #13]
 8009148:	2300      	movs	r3, #0
 800914a:	73bb      	strb	r3, [r7, #14]
 800914c:	2300      	movs	r3, #0
 800914e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8009150:	4b25      	ldr	r3, [pc, #148]	; (80091e8 <P2PS_STM_Init+0x134>)
 8009152:	8818      	ldrh	r0, [r3, #0]
 8009154:	463a      	mov	r2, r7
 8009156:	4b25      	ldr	r3, [pc, #148]	; (80091ec <P2PS_STM_Init+0x138>)
 8009158:	9305      	str	r3, [sp, #20]
 800915a:	2301      	movs	r3, #1
 800915c:	9304      	str	r3, [sp, #16]
 800915e:	230a      	movs	r3, #10
 8009160:	9303      	str	r3, [sp, #12]
 8009162:	2301      	movs	r3, #1
 8009164:	9302      	str	r3, [sp, #8]
 8009166:	2300      	movs	r3, #0
 8009168:	9301      	str	r3, [sp, #4]
 800916a:	2306      	movs	r3, #6
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	2302      	movs	r3, #2
 8009170:	2102      	movs	r1, #2
 8009172:	f7ff f994 	bl	800849e <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8009176:	2319      	movs	r3, #25
 8009178:	703b      	strb	r3, [r7, #0]
 800917a:	23ed      	movs	r3, #237	; 0xed
 800917c:	707b      	strb	r3, [r7, #1]
 800917e:	2382      	movs	r3, #130	; 0x82
 8009180:	70bb      	strb	r3, [r7, #2]
 8009182:	23ae      	movs	r3, #174	; 0xae
 8009184:	70fb      	strb	r3, [r7, #3]
 8009186:	23ed      	movs	r3, #237	; 0xed
 8009188:	713b      	strb	r3, [r7, #4]
 800918a:	2321      	movs	r3, #33	; 0x21
 800918c:	717b      	strb	r3, [r7, #5]
 800918e:	234c      	movs	r3, #76	; 0x4c
 8009190:	71bb      	strb	r3, [r7, #6]
 8009192:	239d      	movs	r3, #157	; 0x9d
 8009194:	71fb      	strb	r3, [r7, #7]
 8009196:	2341      	movs	r3, #65	; 0x41
 8009198:	723b      	strb	r3, [r7, #8]
 800919a:	2345      	movs	r3, #69	; 0x45
 800919c:	727b      	strb	r3, [r7, #9]
 800919e:	2322      	movs	r3, #34	; 0x22
 80091a0:	72bb      	strb	r3, [r7, #10]
 80091a2:	238e      	movs	r3, #142	; 0x8e
 80091a4:	72fb      	strb	r3, [r7, #11]
 80091a6:	2342      	movs	r3, #66	; 0x42
 80091a8:	733b      	strb	r3, [r7, #12]
 80091aa:	23fe      	movs	r3, #254	; 0xfe
 80091ac:	737b      	strb	r3, [r7, #13]
 80091ae:	2300      	movs	r3, #0
 80091b0:	73bb      	strb	r3, [r7, #14]
 80091b2:	2300      	movs	r3, #0
 80091b4:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80091b6:	4b0c      	ldr	r3, [pc, #48]	; (80091e8 <P2PS_STM_Init+0x134>)
 80091b8:	8818      	ldrh	r0, [r3, #0]
 80091ba:	463a      	mov	r2, r7
 80091bc:	4b0c      	ldr	r3, [pc, #48]	; (80091f0 <P2PS_STM_Init+0x13c>)
 80091be:	9305      	str	r3, [sp, #20]
 80091c0:	2301      	movs	r3, #1
 80091c2:	9304      	str	r3, [sp, #16]
 80091c4:	230a      	movs	r3, #10
 80091c6:	9303      	str	r3, [sp, #12]
 80091c8:	2301      	movs	r3, #1
 80091ca:	9302      	str	r3, [sp, #8]
 80091cc:	2300      	movs	r3, #0
 80091ce:	9301      	str	r3, [sp, #4]
 80091d0:	2310      	movs	r3, #16
 80091d2:	9300      	str	r3, [sp, #0]
 80091d4:	2302      	movs	r3, #2
 80091d6:	2102      	movs	r1, #2
 80091d8:	f7ff f961 	bl	800849e <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 80091dc:	bf00      	nop
}
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	08008fe5 	.word	0x08008fe5
 80091e8:	2000012c 	.word	0x2000012c
 80091ec:	2000012e 	.word	0x2000012e
 80091f0:	20000130 	.word	0x20000130

080091f4 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 80091f4:	b480      	push	{r7}
 80091f6:	af00      	add	r7, sp, #0
  return;
 80091f8:	bf00      	nop
}
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8009202:	b480      	push	{r7}
 8009204:	af00      	add	r7, sp, #0
  return;
 8009206:	bf00      	nop
}
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <EDS_STM_Init>:
__weak void DIS_Init( void )
{
  return;
}
__weak void EDS_STM_Init( void )
{
 8009210:	b480      	push	{r7}
 8009212:	af00      	add	r7, sp, #0
  return;
 8009214:	bf00      	nop
}
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800921e:	b480      	push	{r7}
 8009220:	af00      	add	r7, sp, #0
  return;
 8009222:	bf00      	nop
}
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HRS_Init>:
__weak void HRS_Init( void )
{
 800922c:	b480      	push	{r7}
 800922e:	af00      	add	r7, sp, #0
  return;
 8009230:	bf00      	nop
}
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <HTS_Init>:
__weak void HTS_Init( void )
{
 800923a:	b480      	push	{r7}
 800923c:	af00      	add	r7, sp, #0
  return;
 800923e:	bf00      	nop
}
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <IAS_Init>:
__weak void IAS_Init( void )
{
 8009248:	b480      	push	{r7}
 800924a:	af00      	add	r7, sp, #0
  return;
 800924c:	bf00      	nop
}
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr

08009256 <LLS_Init>:
__weak void LLS_Init( void )
{
 8009256:	b480      	push	{r7}
 8009258:	af00      	add	r7, sp, #0
  return;
 800925a:	bf00      	nop
}
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <MOTENV_STM_Init>:
__weak void TPS_Init( void )
{
  return;
}
__weak void MOTENV_STM_Init( void )
{
 8009264:	b480      	push	{r7}
 8009266:	af00      	add	r7, sp, #0
  return;
 8009268:	bf00      	nop
}
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr

08009272 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8009272:	b480      	push	{r7}
 8009274:	af00      	add	r7, sp, #0
  return;
 8009276:	bf00      	nop
}
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <MESH_Init>:
__weak void MESH_Init( void )
{
 8009280:	b480      	push	{r7}
 8009282:	af00      	add	r7, sp, #0
  return;
 8009284:	bf00      	nop
}
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800928e:	b480      	push	{r7}
 8009290:	af00      	add	r7, sp, #0
  return;
 8009292:	bf00      	nop
}
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80092a0:	4b04      	ldr	r3, [pc, #16]	; (80092b4 <SVCCTL_Init+0x18>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80092a6:	4b04      	ldr	r3, [pc, #16]	; (80092b8 <SVCCTL_Init+0x1c>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	731a      	strb	r2, [r3, #12]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80092ac:	f000 f806 	bl	80092bc <SVCCTL_SvcInit>

  return;
 80092b0:	bf00      	nop
}
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	20000134 	.word	0x20000134
 80092b8:	20000154 	.word	0x20000154

080092bc <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	af00      	add	r7, sp, #0
  BLS_Init();
 80092c0:	f7ff ff98 	bl	80091f4 <BLS_Init>

  CRS_STM_Init();
 80092c4:	f7ff ff9d 	bl	8009202 <CRS_STM_Init>

  DIS_Init();
 80092c8:	f7ff fe56 	bl	8008f78 <DIS_Init>

  EDS_STM_Init();
 80092cc:	f7ff ffa0 	bl	8009210 <EDS_STM_Init>

  HIDS_Init();
 80092d0:	f7ff ffa5 	bl	800921e <HIDS_Init>

  HRS_Init();
 80092d4:	f7ff ffaa 	bl	800922c <HRS_Init>

  HTS_Init();
 80092d8:	f7ff ffaf 	bl	800923a <HTS_Init>

  IAS_Init();
 80092dc:	f7ff ffb4 	bl	8009248 <IAS_Init>

  LLS_Init();
 80092e0:	f7ff ffb9 	bl	8009256 <LLS_Init>

  TPS_Init();
 80092e4:	f000 f8b0 	bl	8009448 <TPS_Init>

  MOTENV_STM_Init();
 80092e8:	f7ff ffbc 	bl	8009264 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80092ec:	f7ff fee2 	bl	80090b4 <P2PS_STM_Init>

  OTAS_STM_Init();
 80092f0:	f7ff ffbf 	bl	8009272 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80092f4:	f7ff ffcb 	bl	800928e <BVOPUS_STM_Init>

  MESH_Init();
 80092f8:	f7ff ffc2 	bl	8009280 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80092fc:	f006 fdfe 	bl	800fefc <SVCCTL_InitCustomSvc>
  
  return;
 8009300:	bf00      	nop
}
 8009302:	bd80      	pop	{r7, pc}

08009304 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800930c:	4b09      	ldr	r3, [pc, #36]	; (8009334 <SVCCTL_RegisterSvcHandler+0x30>)
 800930e:	7f1b      	ldrb	r3, [r3, #28]
 8009310:	4619      	mov	r1, r3
 8009312:	4a08      	ldr	r2, [pc, #32]	; (8009334 <SVCCTL_RegisterSvcHandler+0x30>)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800931a:	4b06      	ldr	r3, [pc, #24]	; (8009334 <SVCCTL_RegisterSvcHandler+0x30>)
 800931c:	7f1b      	ldrb	r3, [r3, #28]
 800931e:	3301      	adds	r3, #1
 8009320:	b2da      	uxtb	r2, r3
 8009322:	4b04      	ldr	r3, [pc, #16]	; (8009334 <SVCCTL_RegisterSvcHandler+0x30>)
 8009324:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8009326:	bf00      	nop
}
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	20000134 	.word	0x20000134

08009338 <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 8009340:	4b09      	ldr	r3, [pc, #36]	; (8009368 <SVCCTL_RegisterCltHandler+0x30>)
 8009342:	7b1b      	ldrb	r3, [r3, #12]
 8009344:	4619      	mov	r1, r3
 8009346:	4a08      	ldr	r2, [pc, #32]	; (8009368 <SVCCTL_RegisterCltHandler+0x30>)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 800934e:	4b06      	ldr	r3, [pc, #24]	; (8009368 <SVCCTL_RegisterCltHandler+0x30>)
 8009350:	7b1b      	ldrb	r3, [r3, #12]
 8009352:	3301      	adds	r3, #1
 8009354:	b2da      	uxtb	r2, r3
 8009356:	4b04      	ldr	r3, [pc, #16]	; (8009368 <SVCCTL_RegisterCltHandler+0x30>)
 8009358:	731a      	strb	r2, [r3, #12]
#else
  (void)(pfBLE_SVC_Client_Event_Handler);
#endif

  return;
 800935a:	bf00      	nop
}
 800935c:	370c      	adds	r7, #12
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	20000154 	.word	0x20000154

0800936c <SVCCTL_UserEvtRx>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b086      	sub	sp, #24
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	3301      	adds	r3, #1
 8009378:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800937a:	2300      	movs	r3, #0
 800937c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	2bff      	cmp	r3, #255	; 0xff
 8009384:	d000      	beq.n	8009388 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8009386:	e03f      	b.n	8009408 <SVCCTL_UserEvtRx+0x9c>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	3302      	adds	r3, #2
 800938c:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	881b      	ldrh	r3, [r3, #0]
 8009392:	b29b      	uxth	r3, r3
 8009394:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009398:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800939c:	d000      	beq.n	80093a0 <SVCCTL_UserEvtRx+0x34>
          break;
 800939e:	e032      	b.n	8009406 <SVCCTL_UserEvtRx+0x9a>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80093a0:	2300      	movs	r3, #0
 80093a2:	757b      	strb	r3, [r7, #21]
 80093a4:	e00d      	b.n	80093c2 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80093a6:	7d7b      	ldrb	r3, [r7, #21]
 80093a8:	4a25      	ldr	r2, [pc, #148]	; (8009440 <SVCCTL_UserEvtRx+0xd4>)
 80093aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	4798      	blx	r3
 80093b2:	4603      	mov	r3, r0
 80093b4:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 80093b6:	7dfb      	ldrb	r3, [r7, #23]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d108      	bne.n	80093ce <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80093bc:	7d7b      	ldrb	r3, [r7, #21]
 80093be:	3301      	adds	r3, #1
 80093c0:	757b      	strb	r3, [r7, #21]
 80093c2:	4b1f      	ldr	r3, [pc, #124]	; (8009440 <SVCCTL_UserEvtRx+0xd4>)
 80093c4:	7f1b      	ldrb	r3, [r3, #28]
 80093c6:	7d7a      	ldrb	r2, [r7, #21]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d3ec      	bcc.n	80093a6 <SVCCTL_UserEvtRx+0x3a>
 80093cc:	e000      	b.n	80093d0 <SVCCTL_UserEvtRx+0x64>
              break;
 80093ce:	bf00      	nop
          event_notification_status = SVCCTL_EvtNotAck;
 80093d0:	2300      	movs	r3, #0
 80093d2:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 80093d4:	2300      	movs	r3, #0
 80093d6:	757b      	strb	r3, [r7, #21]
 80093d8:	e00d      	b.n	80093f6 <SVCCTL_UserEvtRx+0x8a>
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 80093da:	7d7b      	ldrb	r3, [r7, #21]
 80093dc:	4a19      	ldr	r2, [pc, #100]	; (8009444 <SVCCTL_UserEvtRx+0xd8>)
 80093de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	4798      	blx	r3
 80093e6:	4603      	mov	r3, r0
 80093e8:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d108      	bne.n	8009402 <SVCCTL_UserEvtRx+0x96>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 80093f0:	7d7b      	ldrb	r3, [r7, #21]
 80093f2:	3301      	adds	r3, #1
 80093f4:	757b      	strb	r3, [r7, #21]
 80093f6:	4b13      	ldr	r3, [pc, #76]	; (8009444 <SVCCTL_UserEvtRx+0xd8>)
 80093f8:	7b1b      	ldrb	r3, [r3, #12]
 80093fa:	7d7a      	ldrb	r2, [r7, #21]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d3ec      	bcc.n	80093da <SVCCTL_UserEvtRx+0x6e>
          break;
 8009400:	e000      	b.n	8009404 <SVCCTL_UserEvtRx+0x98>
              break;
 8009402:	bf00      	nop
          break;
 8009404:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 8009406:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8009408:	7dfb      	ldrb	r3, [r7, #23]
 800940a:	2b01      	cmp	r3, #1
 800940c:	d009      	beq.n	8009422 <SVCCTL_UserEvtRx+0xb6>
 800940e:	2b02      	cmp	r3, #2
 8009410:	d00a      	beq.n	8009428 <SVCCTL_UserEvtRx+0xbc>
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10b      	bne.n	800942e <SVCCTL_UserEvtRx+0xc2>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f006 f894 	bl	800f544 <SVCCTL_App_Notification>
 800941c:	4603      	mov	r3, r0
 800941e:	75bb      	strb	r3, [r7, #22]
      break;
 8009420:	e008      	b.n	8009434 <SVCCTL_UserEvtRx+0xc8>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009422:	2301      	movs	r3, #1
 8009424:	75bb      	strb	r3, [r7, #22]
      break;
 8009426:	e005      	b.n	8009434 <SVCCTL_UserEvtRx+0xc8>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8009428:	2300      	movs	r3, #0
 800942a:	75bb      	strb	r3, [r7, #22]
      break;
 800942c:	e002      	b.n	8009434 <SVCCTL_UserEvtRx+0xc8>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800942e:	2301      	movs	r3, #1
 8009430:	75bb      	strb	r3, [r7, #22]
      break;
 8009432:	bf00      	nop
  }

  return (return_status);
 8009434:	7dbb      	ldrb	r3, [r7, #22]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	20000134 	.word	0x20000134
 8009444:	20000154 	.word	0x20000154

08009448 <TPS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void TPS_Init(void)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b088      	sub	sp, #32
 800944c:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult = BLE_STATUS_SUCCESS;
 800944e:	2300      	movs	r3, #0
 8009450:	71fb      	strb	r3, [r7, #7]
   *
   * Max_Attribute_Records = 2*no_of_char + 1
   * service_max_attribute_record = 1 for Tx Power service +
   *                                2 for Tx Power Level measurement characteristic +
   */
  uuid = TX_POWER_SERVICE_UUID;
 8009452:	f641 0304 	movw	r3, #6148	; 0x1804
 8009456:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 8009458:	1d39      	adds	r1, r7, #4
 800945a:	4b12      	ldr	r3, [pc, #72]	; (80094a4 <TPS_Init+0x5c>)
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	2303      	movs	r3, #3
 8009460:	2201      	movs	r2, #1
 8009462:	2001      	movs	r0, #1
 8009464:	f7fe ff6c 	bl	8008340 <aci_gatt_add_service>
 8009468:	4603      	mov	r3, r0
 800946a:	71fb      	strb	r3, [r7, #7]
  }
  
  /**
   *  Add Tx Power Level Characteristic
   */
  uuid = TX_POWER_LEVEL_CHARACTERISTIC_UUID;
 800946c:	f642 2307 	movw	r3, #10759	; 0x2a07
 8009470:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(TPS_Context.SvcHdle,
 8009472:	4b0c      	ldr	r3, [pc, #48]	; (80094a4 <TPS_Init+0x5c>)
 8009474:	8818      	ldrh	r0, [r3, #0]
 8009476:	1d3a      	adds	r2, r7, #4
 8009478:	4b0b      	ldr	r3, [pc, #44]	; (80094a8 <TPS_Init+0x60>)
 800947a:	9305      	str	r3, [sp, #20]
 800947c:	2301      	movs	r3, #1
 800947e:	9304      	str	r3, [sp, #16]
 8009480:	230a      	movs	r3, #10
 8009482:	9303      	str	r3, [sp, #12]
 8009484:	2300      	movs	r3, #0
 8009486:	9302      	str	r3, [sp, #8]
 8009488:	2300      	movs	r3, #0
 800948a:	9301      	str	r3, [sp, #4]
 800948c:	2302      	movs	r3, #2
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	2301      	movs	r3, #1
 8009492:	2101      	movs	r1, #1
 8009494:	f7ff f803 	bl	800849e <aci_gatt_add_char>
 8009498:	4603      	mov	r3, r0
 800949a:	71fb      	strb	r3, [r7, #7]
  {
    BLE_DBG_TPS_MSG ("FAILED to add Tx Power Level Characteristic, Error: %02X !!\n", 
                        hciCmdResult);
  }

  return;
 800949c:	bf00      	nop
}
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	20000164 	.word	0x20000164
 80094a8:	20000166 	.word	0x20000166

080094ac <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80094b4:	f107 030c 	add.w	r3, r7, #12
 80094b8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	2121      	movs	r1, #33	; 0x21
 80094c4:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80094c8:	f000 fae2 	bl	8009a90 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	330b      	adds	r3, #11
 80094d0:	78db      	ldrb	r3, [r3, #3]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3720      	adds	r7, #32
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <SHCI_C2_THREAD_Init>:

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b086      	sub	sp, #24
 80094de:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80094e0:	1d3b      	adds	r3, r7, #4
 80094e2:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	2200      	movs	r2, #0
 80094e8:	2100      	movs	r1, #0
 80094ea:	f64f 4067 	movw	r0, #64615	; 0xfc67
 80094ee:	f000 facf 	bl	8009a90 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	330b      	adds	r3, #11
 80094f6:	78db      	ldrb	r3, [r3, #3]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3718      	adds	r7, #24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b088      	sub	sp, #32
 8009504:	af00      	add	r7, sp, #0
 8009506:	4603      	mov	r3, r0
 8009508:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800950a:	f107 030c 	add.w	r3, r7, #12
 800950e:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8009510:	79fb      	ldrb	r3, [r7, #7]
 8009512:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 8009514:	f107 020c 	add.w	r2, r7, #12
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	2101      	movs	r1, #1
 800951c:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 8009520:	f000 fab6 	bl	8009a90 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	330b      	adds	r3, #11
 8009528:	78db      	ldrb	r3, [r3, #3]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3720      	adds	r7, #32
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
	...

08009534 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009534:	b480      	push	{r7}
 8009536:	b08b      	sub	sp, #44	; 0x2c
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800953c:	2300      	movs	r3, #0
 800953e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009540:	2300      	movs	r3, #0
 8009542:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009544:	2300      	movs	r3, #0
 8009546:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009548:	2300      	movs	r3, #0
 800954a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800954c:	2300      	movs	r3, #0
 800954e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009550:	2300      	movs	r3, #0
 8009552:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009554:	2300      	movs	r3, #0
 8009556:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009558:	2300      	movs	r3, #0
 800955a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800955c:	4b4a      	ldr	r3, [pc, #296]	; (8009688 <SHCI_GetWirelessFwInfo+0x154>)
 800955e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009560:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009564:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800956e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a44      	ldr	r2, [pc, #272]	; (800968c <SHCI_GetWirelessFwInfo+0x158>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d10f      	bne.n	80095a0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	695b      	ldr	r3, [r3, #20]
 8009584:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	69db      	ldr	r3, [r3, #28]
 8009590:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	617b      	str	r3, [r7, #20]
 800959e:	e01a      	b.n	80095d6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */

    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80095a8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80095ac:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	695b      	ldr	r3, [r3, #20]
 80095bc:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80095d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d8:	0e1b      	lsrs	r3, r3, #24
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	0c1b      	lsrs	r3, r3, #16
 80095e4:	b2da      	uxtb	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	0a1b      	lsrs	r3, r3, #8
 80095ee:	b2da      	uxtb	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	091b      	lsrs	r3, r3, #4
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	f003 030f 	and.w	r3, r3, #15
 80095fe:	b2da      	uxtb	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009606:	b2db      	uxtb	r3, r3
 8009608:	f003 030f 	and.w	r3, r3, #15
 800960c:	b2da      	uxtb	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009612:	6a3b      	ldr	r3, [r7, #32]
 8009614:	0e1b      	lsrs	r3, r3, #24
 8009616:	b2da      	uxtb	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800961c:	6a3b      	ldr	r3, [r7, #32]
 800961e:	0c1b      	lsrs	r3, r3, #16
 8009620:	b2da      	uxtb	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009626:	6a3b      	ldr	r3, [r7, #32]
 8009628:	0a1b      	lsrs	r3, r3, #8
 800962a:	b2da      	uxtb	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009630:	6a3b      	ldr	r3, [r7, #32]
 8009632:	b2da      	uxtb	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	b2da      	uxtb	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	0e1b      	lsrs	r3, r3, #24
 8009644:	b2da      	uxtb	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	0c1b      	lsrs	r3, r3, #16
 800964e:	b2da      	uxtb	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	0a1b      	lsrs	r3, r3, #8
 8009658:	b2da      	uxtb	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	0e1b      	lsrs	r3, r3, #24
 8009662:	b2da      	uxtb	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	0c1b      	lsrs	r3, r3, #16
 800966c:	b2da      	uxtb	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	b2da      	uxtb	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	372c      	adds	r7, #44	; 0x2c
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	58004000 	.word	0x58004000
 800968c:	a94656b9 	.word	0xa94656b9

08009690 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	4a08      	ldr	r2, [pc, #32]	; (80096c0 <hci_init+0x30>)
 80096a0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80096a2:	4a08      	ldr	r2, [pc, #32]	; (80096c4 <hci_init+0x34>)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80096a8:	4806      	ldr	r0, [pc, #24]	; (80096c4 <hci_init+0x34>)
 80096aa:	f000 f973 	bl	8009994 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f000 f8d4 	bl	8009860 <TlInit>

  return;
 80096b8:	bf00      	nop
}
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	20000284 	.word	0x20000284
 80096c4:	2000025c 	.word	0x2000025c

080096c8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80096ce:	4822      	ldr	r0, [pc, #136]	; (8009758 <hci_user_evt_proc+0x90>)
 80096d0:	f001 f9e8 	bl	800aaa4 <LST_is_empty>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d12b      	bne.n	8009732 <hci_user_evt_proc+0x6a>
 80096da:	4b20      	ldr	r3, [pc, #128]	; (800975c <hci_user_evt_proc+0x94>)
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d027      	beq.n	8009732 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80096e2:	f107 030c 	add.w	r3, r7, #12
 80096e6:	4619      	mov	r1, r3
 80096e8:	481b      	ldr	r0, [pc, #108]	; (8009758 <hci_user_evt_proc+0x90>)
 80096ea:	f001 fa62 	bl	800abb2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80096ee:	4b1c      	ldr	r3, [pc, #112]	; (8009760 <hci_user_evt_proc+0x98>)
 80096f0:	69db      	ldr	r3, [r3, #28]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00c      	beq.n	8009710 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80096fa:	2301      	movs	r3, #1
 80096fc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80096fe:	4b18      	ldr	r3, [pc, #96]	; (8009760 <hci_user_evt_proc+0x98>)
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	1d3a      	adds	r2, r7, #4
 8009704:	4610      	mov	r0, r2
 8009706:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009708:	793a      	ldrb	r2, [r7, #4]
 800970a:	4b14      	ldr	r3, [pc, #80]	; (800975c <hci_user_evt_proc+0x94>)
 800970c:	701a      	strb	r2, [r3, #0]
 800970e:	e002      	b.n	8009716 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009710:	4b12      	ldr	r3, [pc, #72]	; (800975c <hci_user_evt_proc+0x94>)
 8009712:	2201      	movs	r2, #1
 8009714:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8009716:	4b11      	ldr	r3, [pc, #68]	; (800975c <hci_user_evt_proc+0x94>)
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d004      	beq.n	8009728 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	4618      	mov	r0, r3
 8009722:	f000 fc7b 	bl	800a01c <TL_MM_EvtDone>
 8009726:	e004      	b.n	8009732 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	4619      	mov	r1, r3
 800972c:	480a      	ldr	r0, [pc, #40]	; (8009758 <hci_user_evt_proc+0x90>)
 800972e:	f001 f9d9 	bl	800aae4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009732:	4809      	ldr	r0, [pc, #36]	; (8009758 <hci_user_evt_proc+0x90>)
 8009734:	f001 f9b6 	bl	800aaa4 <LST_is_empty>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d107      	bne.n	800974e <hci_user_evt_proc+0x86>
 800973e:	4b07      	ldr	r3, [pc, #28]	; (800975c <hci_user_evt_proc+0x94>)
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d003      	beq.n	800974e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8009746:	4804      	ldr	r0, [pc, #16]	; (8009758 <hci_user_evt_proc+0x90>)
 8009748:	f006 fb6a 	bl	800fe20 <hci_notify_asynch_evt>
  }


  return;
 800974c:	bf00      	nop
 800974e:	bf00      	nop
}
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	2000016c 	.word	0x2000016c
 800975c:	20000178 	.word	0x20000178
 8009760:	2000025c 	.word	0x2000025c

08009764 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b088      	sub	sp, #32
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	460b      	mov	r3, r1
 800976e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009770:	2000      	movs	r0, #0
 8009772:	f000 f8cb 	bl	800990c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8009776:	2300      	movs	r3, #0
 8009778:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	885b      	ldrh	r3, [r3, #2]
 800977e:	b21b      	sxth	r3, r3
 8009780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009784:	b21a      	sxth	r2, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	881b      	ldrh	r3, [r3, #0]
 800978a:	029b      	lsls	r3, r3, #10
 800978c:	b21b      	sxth	r3, r3
 800978e:	4313      	orrs	r3, r2
 8009790:	b21b      	sxth	r3, r3
 8009792:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	b2d9      	uxtb	r1, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	689a      	ldr	r2, [r3, #8]
 800979e:	8bbb      	ldrh	r3, [r7, #28]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 f88d 	bl	80098c0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80097a6:	e04e      	b.n	8009846 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80097a8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80097ac:	f006 fb58 	bl	800fe60 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80097b0:	e043      	b.n	800983a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80097b2:	f107 030c 	add.w	r3, r7, #12
 80097b6:	4619      	mov	r1, r3
 80097b8:	4828      	ldr	r0, [pc, #160]	; (800985c <hci_send_req+0xf8>)
 80097ba:	f001 f9fa 	bl	800abb2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	7a5b      	ldrb	r3, [r3, #9]
 80097c2:	2b0f      	cmp	r3, #15
 80097c4:	d114      	bne.n	80097f0 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	330b      	adds	r3, #11
 80097ca:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	885b      	ldrh	r3, [r3, #2]
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	8bba      	ldrh	r2, [r7, #28]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d104      	bne.n	80097e2 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	7812      	ldrb	r2, [r2, #0]
 80097e0:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	785b      	ldrb	r3, [r3, #1]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d027      	beq.n	800983a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80097ea:	2301      	movs	r3, #1
 80097ec:	77fb      	strb	r3, [r7, #31]
 80097ee:	e024      	b.n	800983a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	330b      	adds	r3, #11
 80097f4:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	8bba      	ldrh	r2, [r7, #28]
 8009800:	429a      	cmp	r2, r3
 8009802:	d114      	bne.n	800982e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	7a9b      	ldrb	r3, [r3, #10]
 8009808:	3b03      	subs	r3, #3
 800980a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	695a      	ldr	r2, [r3, #20]
 8009810:	7dfb      	ldrb	r3, [r7, #23]
 8009812:	429a      	cmp	r2, r3
 8009814:	bfa8      	it	ge
 8009816:	461a      	movge	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6918      	ldr	r0, [r3, #16]
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	1cd9      	adds	r1, r3, #3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	461a      	mov	r2, r3
 800982a:	f008 f9f3 	bl	8011c14 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009836:	2301      	movs	r3, #1
 8009838:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800983a:	4808      	ldr	r0, [pc, #32]	; (800985c <hci_send_req+0xf8>)
 800983c:	f001 f932 	bl	800aaa4 <LST_is_empty>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0b5      	beq.n	80097b2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009846:	7ffb      	ldrb	r3, [r7, #31]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d0ad      	beq.n	80097a8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800984c:	2001      	movs	r0, #1
 800984e:	f000 f85d 	bl	800990c <NotifyCmdStatus>

  return 0;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	3720      	adds	r7, #32
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	2000027c 	.word	0x2000027c

08009860 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b086      	sub	sp, #24
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009868:	480f      	ldr	r0, [pc, #60]	; (80098a8 <TlInit+0x48>)
 800986a:	f001 f90b 	bl	800aa84 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800986e:	4a0f      	ldr	r2, [pc, #60]	; (80098ac <TlInit+0x4c>)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009874:	480e      	ldr	r0, [pc, #56]	; (80098b0 <TlInit+0x50>)
 8009876:	f001 f905 	bl	800aa84 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800987a:	4b0e      	ldr	r3, [pc, #56]	; (80098b4 <TlInit+0x54>)
 800987c:	2201      	movs	r2, #1
 800987e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009880:	4b0d      	ldr	r3, [pc, #52]	; (80098b8 <TlInit+0x58>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00a      	beq.n	800989e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800988c:	4b0b      	ldr	r3, [pc, #44]	; (80098bc <TlInit+0x5c>)
 800988e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009890:	4b09      	ldr	r3, [pc, #36]	; (80098b8 <TlInit+0x58>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f107 0208 	add.w	r2, r7, #8
 8009898:	4610      	mov	r0, r2
 800989a:	4798      	blx	r3
  }

  return;
 800989c:	bf00      	nop
 800989e:	bf00      	nop
}
 80098a0:	3718      	adds	r7, #24
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	2000027c 	.word	0x2000027c
 80098ac:	20000174 	.word	0x20000174
 80098b0:	2000016c 	.word	0x2000016c
 80098b4:	20000178 	.word	0x20000178
 80098b8:	2000025c 	.word	0x2000025c
 80098bc:	0800994d 	.word	0x0800994d

080098c0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	4603      	mov	r3, r0
 80098c8:	603a      	str	r2, [r7, #0]
 80098ca:	80fb      	strh	r3, [r7, #6]
 80098cc:	460b      	mov	r3, r1
 80098ce:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80098d0:	4b0c      	ldr	r3, [pc, #48]	; (8009904 <SendCmd+0x44>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	88fa      	ldrh	r2, [r7, #6]
 80098d6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80098da:	4b0a      	ldr	r3, [pc, #40]	; (8009904 <SendCmd+0x44>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	797a      	ldrb	r2, [r7, #5]
 80098e0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80098e2:	4b08      	ldr	r3, [pc, #32]	; (8009904 <SendCmd+0x44>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	330c      	adds	r3, #12
 80098e8:	797a      	ldrb	r2, [r7, #5]
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f008 f991 	bl	8011c14 <memcpy>

  hciContext.io.Send(0,0);
 80098f2:	4b05      	ldr	r3, [pc, #20]	; (8009908 <SendCmd+0x48>)
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	2100      	movs	r1, #0
 80098f8:	2000      	movs	r0, #0
 80098fa:	4798      	blx	r3

  return;
 80098fc:	bf00      	nop
}
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	20000174 	.word	0x20000174
 8009908:	2000025c 	.word	0x2000025c

0800990c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	4603      	mov	r3, r0
 8009914:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009916:	79fb      	ldrb	r3, [r7, #7]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d108      	bne.n	800992e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800991c:	4b0a      	ldr	r3, [pc, #40]	; (8009948 <NotifyCmdStatus+0x3c>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00d      	beq.n	8009940 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009924:	4b08      	ldr	r3, [pc, #32]	; (8009948 <NotifyCmdStatus+0x3c>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2000      	movs	r0, #0
 800992a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800992c:	e008      	b.n	8009940 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800992e:	4b06      	ldr	r3, [pc, #24]	; (8009948 <NotifyCmdStatus+0x3c>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d004      	beq.n	8009940 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009936:	4b04      	ldr	r3, [pc, #16]	; (8009948 <NotifyCmdStatus+0x3c>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2001      	movs	r0, #1
 800993c:	4798      	blx	r3
  return;
 800993e:	bf00      	nop
 8009940:	bf00      	nop
}
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	20000284 	.word	0x20000284

0800994c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	7a5b      	ldrb	r3, [r3, #9]
 8009958:	2b0f      	cmp	r3, #15
 800995a:	d003      	beq.n	8009964 <TlEvtReceived+0x18>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	7a5b      	ldrb	r3, [r3, #9]
 8009960:	2b0e      	cmp	r3, #14
 8009962:	d107      	bne.n	8009974 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009964:	6879      	ldr	r1, [r7, #4]
 8009966:	4809      	ldr	r0, [pc, #36]	; (800998c <TlEvtReceived+0x40>)
 8009968:	f001 f8e0 	bl	800ab2c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800996c:	2000      	movs	r0, #0
 800996e:	f006 fa67 	bl	800fe40 <hci_cmd_resp_release>
 8009972:	e006      	b.n	8009982 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009974:	6879      	ldr	r1, [r7, #4]
 8009976:	4806      	ldr	r0, [pc, #24]	; (8009990 <TlEvtReceived+0x44>)
 8009978:	f001 f8d8 	bl	800ab2c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800997c:	4804      	ldr	r0, [pc, #16]	; (8009990 <TlEvtReceived+0x44>)
 800997e:	f006 fa4f 	bl	800fe20 <hci_notify_asynch_evt>
  }

  return;
 8009982:	bf00      	nop
}
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	2000027c 	.word	0x2000027c
 8009990:	2000016c 	.word	0x2000016c

08009994 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a05      	ldr	r2, [pc, #20]	; (80099b4 <hci_register_io_bus+0x20>)
 80099a0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a04      	ldr	r2, [pc, #16]	; (80099b8 <hci_register_io_bus+0x24>)
 80099a6:	611a      	str	r2, [r3, #16]

  return;
 80099a8:	bf00      	nop
}
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr
 80099b4:	08009ca5 	.word	0x08009ca5
 80099b8:	08009d0d 	.word	0x08009d0d

080099bc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	4a08      	ldr	r2, [pc, #32]	; (80099ec <shci_init+0x30>)
 80099cc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80099ce:	4a08      	ldr	r2, [pc, #32]	; (80099f0 <shci_init+0x34>)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80099d4:	4806      	ldr	r0, [pc, #24]	; (80099f0 <shci_init+0x34>)
 80099d6:	f000 f911 	bl	8009bfc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 f894 	bl	8009b0c <TlInit>

  return;
 80099e4:	bf00      	nop
}
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	200002a8 	.word	0x200002a8
 80099f0:	20000288 	.word	0x20000288

080099f4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80099fa:	4822      	ldr	r0, [pc, #136]	; (8009a84 <shci_user_evt_proc+0x90>)
 80099fc:	f001 f852 	bl	800aaa4 <LST_is_empty>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d12b      	bne.n	8009a5e <shci_user_evt_proc+0x6a>
 8009a06:	4b20      	ldr	r3, [pc, #128]	; (8009a88 <shci_user_evt_proc+0x94>)
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d027      	beq.n	8009a5e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009a0e:	f107 030c 	add.w	r3, r7, #12
 8009a12:	4619      	mov	r1, r3
 8009a14:	481b      	ldr	r0, [pc, #108]	; (8009a84 <shci_user_evt_proc+0x90>)
 8009a16:	f001 f8cc 	bl	800abb2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8009a1a:	4b1c      	ldr	r3, [pc, #112]	; (8009a8c <shci_user_evt_proc+0x98>)
 8009a1c:	69db      	ldr	r3, [r3, #28]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00c      	beq.n	8009a3c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009a26:	2301      	movs	r3, #1
 8009a28:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009a2a:	4b18      	ldr	r3, [pc, #96]	; (8009a8c <shci_user_evt_proc+0x98>)
 8009a2c:	69db      	ldr	r3, [r3, #28]
 8009a2e:	1d3a      	adds	r2, r7, #4
 8009a30:	4610      	mov	r0, r2
 8009a32:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009a34:	793a      	ldrb	r2, [r7, #4]
 8009a36:	4b14      	ldr	r3, [pc, #80]	; (8009a88 <shci_user_evt_proc+0x94>)
 8009a38:	701a      	strb	r2, [r3, #0]
 8009a3a:	e002      	b.n	8009a42 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009a3c:	4b12      	ldr	r3, [pc, #72]	; (8009a88 <shci_user_evt_proc+0x94>)
 8009a3e:	2201      	movs	r2, #1
 8009a40:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009a42:	4b11      	ldr	r3, [pc, #68]	; (8009a88 <shci_user_evt_proc+0x94>)
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d004      	beq.n	8009a54 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f000 fae5 	bl	800a01c <TL_MM_EvtDone>
 8009a52:	e004      	b.n	8009a5e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	4619      	mov	r1, r3
 8009a58:	480a      	ldr	r0, [pc, #40]	; (8009a84 <shci_user_evt_proc+0x90>)
 8009a5a:	f001 f843 	bl	800aae4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009a5e:	4809      	ldr	r0, [pc, #36]	; (8009a84 <shci_user_evt_proc+0x90>)
 8009a60:	f001 f820 	bl	800aaa4 <LST_is_empty>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d107      	bne.n	8009a7a <shci_user_evt_proc+0x86>
 8009a6a:	4b07      	ldr	r3, [pc, #28]	; (8009a88 <shci_user_evt_proc+0x94>)
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d003      	beq.n	8009a7a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009a72:	4804      	ldr	r0, [pc, #16]	; (8009a84 <shci_user_evt_proc+0x90>)
 8009a74:	f7f7 fb14 	bl	80010a0 <shci_notify_asynch_evt>
  }


  return;
 8009a78:	bf00      	nop
 8009a7a:	bf00      	nop
}
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	2000017c 	.word	0x2000017c
 8009a88:	2000018c 	.word	0x2000018c
 8009a8c:	20000288 	.word	0x20000288

08009a90 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60ba      	str	r2, [r7, #8]
 8009a98:	607b      	str	r3, [r7, #4]
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	81fb      	strh	r3, [r7, #14]
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	f000 f864 	bl	8009b70 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009aa8:	4b16      	ldr	r3, [pc, #88]	; (8009b04 <shci_send+0x74>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	89fa      	ldrh	r2, [r7, #14]
 8009aae:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009ab2:	4b14      	ldr	r3, [pc, #80]	; (8009b04 <shci_send+0x74>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	7b7a      	ldrb	r2, [r7, #13]
 8009ab8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009aba:	4b12      	ldr	r3, [pc, #72]	; (8009b04 <shci_send+0x74>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	330c      	adds	r3, #12
 8009ac0:	7b7a      	ldrb	r2, [r7, #13]
 8009ac2:	68b9      	ldr	r1, [r7, #8]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f008 f8a5 	bl	8011c14 <memcpy>

  shciContext.io.Send(0,0);
 8009aca:	4b0f      	ldr	r3, [pc, #60]	; (8009b08 <shci_send+0x78>)
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	2100      	movs	r1, #0
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009ad4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009ad8:	f7f7 fb02 	bl	80010e0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f103 0008 	add.w	r0, r3, #8
 8009ae2:	4b08      	ldr	r3, [pc, #32]	; (8009b04 <shci_send+0x74>)
 8009ae4:	6819      	ldr	r1, [r3, #0]
 8009ae6:	4b07      	ldr	r3, [pc, #28]	; (8009b04 <shci_send+0x74>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	789b      	ldrb	r3, [r3, #2]
 8009aec:	3303      	adds	r3, #3
 8009aee:	461a      	mov	r2, r3
 8009af0:	f008 f890 	bl	8011c14 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009af4:	2001      	movs	r0, #1
 8009af6:	f000 f83b 	bl	8009b70 <Cmd_SetStatus>

  return;
 8009afa:	bf00      	nop
}
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	20000188 	.word	0x20000188
 8009b08:	20000288 	.word	0x20000288

08009b0c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b086      	sub	sp, #24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009b14:	4a10      	ldr	r2, [pc, #64]	; (8009b58 <TlInit+0x4c>)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009b1a:	4810      	ldr	r0, [pc, #64]	; (8009b5c <TlInit+0x50>)
 8009b1c:	f000 ffb2 	bl	800aa84 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009b20:	2001      	movs	r0, #1
 8009b22:	f000 f825 	bl	8009b70 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009b26:	4b0e      	ldr	r3, [pc, #56]	; (8009b60 <TlInit+0x54>)
 8009b28:	2201      	movs	r2, #1
 8009b2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009b2c:	4b0d      	ldr	r3, [pc, #52]	; (8009b64 <TlInit+0x58>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00c      	beq.n	8009b4e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009b38:	4b0b      	ldr	r3, [pc, #44]	; (8009b68 <TlInit+0x5c>)
 8009b3a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009b3c:	4b0b      	ldr	r3, [pc, #44]	; (8009b6c <TlInit+0x60>)
 8009b3e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009b40:	4b08      	ldr	r3, [pc, #32]	; (8009b64 <TlInit+0x58>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f107 020c 	add.w	r2, r7, #12
 8009b48:	4610      	mov	r0, r2
 8009b4a:	4798      	blx	r3
  }

  return;
 8009b4c:	bf00      	nop
 8009b4e:	bf00      	nop
}
 8009b50:	3718      	adds	r7, #24
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	20000188 	.word	0x20000188
 8009b5c:	2000017c 	.word	0x2000017c
 8009b60:	2000018c 	.word	0x2000018c
 8009b64:	20000288 	.word	0x20000288
 8009b68:	08009bc1 	.word	0x08009bc1
 8009b6c:	08009bd9 	.word	0x08009bd9

08009b70 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009b7a:	79fb      	ldrb	r3, [r7, #7]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10b      	bne.n	8009b98 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009b80:	4b0d      	ldr	r3, [pc, #52]	; (8009bb8 <Cmd_SetStatus+0x48>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d003      	beq.n	8009b90 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009b88:	4b0b      	ldr	r3, [pc, #44]	; (8009bb8 <Cmd_SetStatus+0x48>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009b90:	4b0a      	ldr	r3, [pc, #40]	; (8009bbc <Cmd_SetStatus+0x4c>)
 8009b92:	2200      	movs	r2, #0
 8009b94:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009b96:	e00b      	b.n	8009bb0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009b98:	4b08      	ldr	r3, [pc, #32]	; (8009bbc <Cmd_SetStatus+0x4c>)
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009b9e:	4b06      	ldr	r3, [pc, #24]	; (8009bb8 <Cmd_SetStatus+0x48>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d004      	beq.n	8009bb0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009ba6:	4b04      	ldr	r3, [pc, #16]	; (8009bb8 <Cmd_SetStatus+0x48>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2001      	movs	r0, #1
 8009bac:	4798      	blx	r3
  return;
 8009bae:	bf00      	nop
 8009bb0:	bf00      	nop
}
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	200002a8 	.word	0x200002a8
 8009bbc:	20000184 	.word	0x20000184

08009bc0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009bc8:	2000      	movs	r0, #0
 8009bca:	f7f7 fa79 	bl	80010c0 <shci_cmd_resp_release>

  return;
 8009bce:	bf00      	nop
}
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
	...

08009bd8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009be0:	6879      	ldr	r1, [r7, #4]
 8009be2:	4805      	ldr	r0, [pc, #20]	; (8009bf8 <TlUserEvtReceived+0x20>)
 8009be4:	f000 ffa2 	bl	800ab2c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009be8:	4803      	ldr	r0, [pc, #12]	; (8009bf8 <TlUserEvtReceived+0x20>)
 8009bea:	f7f7 fa59 	bl	80010a0 <shci_notify_asynch_evt>

  return;
 8009bee:	bf00      	nop
}
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	2000017c 	.word	0x2000017c

08009bfc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a05      	ldr	r2, [pc, #20]	; (8009c1c <shci_register_io_bus+0x20>)
 8009c08:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4a04      	ldr	r2, [pc, #16]	; (8009c20 <shci_register_io_bus+0x24>)
 8009c0e:	611a      	str	r2, [r3, #16]

  return;
 8009c10:	bf00      	nop
}
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr
 8009c1c:	08009db9 	.word	0x08009db9
 8009c20:	08009e0d 	.word	0x08009e0d

08009c24 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009c28:	f007 fd22 	bl	8011670 <HW_IPCC_Enable>

  return;
 8009c2c:	bf00      	nop
}
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <TL_Init>:


void TL_Init( void )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009c34:	4b10      	ldr	r3, [pc, #64]	; (8009c78 <TL_Init+0x48>)
 8009c36:	4a11      	ldr	r2, [pc, #68]	; (8009c7c <TL_Init+0x4c>)
 8009c38:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009c3a:	4b0f      	ldr	r3, [pc, #60]	; (8009c78 <TL_Init+0x48>)
 8009c3c:	4a10      	ldr	r2, [pc, #64]	; (8009c80 <TL_Init+0x50>)
 8009c3e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009c40:	4b0d      	ldr	r3, [pc, #52]	; (8009c78 <TL_Init+0x48>)
 8009c42:	4a10      	ldr	r2, [pc, #64]	; (8009c84 <TL_Init+0x54>)
 8009c44:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8009c46:	4b0c      	ldr	r3, [pc, #48]	; (8009c78 <TL_Init+0x48>)
 8009c48:	4a0f      	ldr	r2, [pc, #60]	; (8009c88 <TL_Init+0x58>)
 8009c4a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 8009c4c:	4b0a      	ldr	r3, [pc, #40]	; (8009c78 <TL_Init+0x48>)
 8009c4e:	4a0f      	ldr	r2, [pc, #60]	; (8009c8c <TL_Init+0x5c>)
 8009c50:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009c52:	4b09      	ldr	r3, [pc, #36]	; (8009c78 <TL_Init+0x48>)
 8009c54:	4a0e      	ldr	r2, [pc, #56]	; (8009c90 <TL_Init+0x60>)
 8009c56:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009c58:	4b07      	ldr	r3, [pc, #28]	; (8009c78 <TL_Init+0x48>)
 8009c5a:	4a0e      	ldr	r2, [pc, #56]	; (8009c94 <TL_Init+0x64>)
 8009c5c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009c5e:	4b06      	ldr	r3, [pc, #24]	; (8009c78 <TL_Init+0x48>)
 8009c60:	4a0d      	ldr	r2, [pc, #52]	; (8009c98 <TL_Init+0x68>)
 8009c62:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009c64:	4b04      	ldr	r3, [pc, #16]	; (8009c78 <TL_Init+0x48>)
 8009c66:	4a0d      	ldr	r2, [pc, #52]	; (8009c9c <TL_Init+0x6c>)
 8009c68:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8009c6a:	4b03      	ldr	r3, [pc, #12]	; (8009c78 <TL_Init+0x48>)
 8009c6c:	4a0c      	ldr	r2, [pc, #48]	; (8009ca0 <TL_Init+0x70>)
 8009c6e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009c70:	f007 fd12 	bl	8011698 <HW_IPCC_Init>

  return;
 8009c74:	bf00      	nop
}
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	20030000 	.word	0x20030000
 8009c7c:	20030028 	.word	0x20030028
 8009c80:	20030048 	.word	0x20030048
 8009c84:	20030058 	.word	0x20030058
 8009c88:	20030064 	.word	0x20030064
 8009c8c:	2003006c 	.word	0x2003006c
 8009c90:	20030074 	.word	0x20030074
 8009c94:	2003007c 	.word	0x2003007c
 8009c98:	20030098 	.word	0x20030098
 8009c9c:	2003009c 	.word	0x2003009c
 8009ca0:	200300a8 	.word	0x200300a8

08009ca4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8009cb0:	4811      	ldr	r0, [pc, #68]	; (8009cf8 <TL_BLE_Init+0x54>)
 8009cb2:	f000 fee7 	bl	800aa84 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8009cb6:	4b11      	ldr	r3, [pc, #68]	; (8009cfc <TL_BLE_Init+0x58>)
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	689a      	ldr	r2, [r3, #8]
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	68da      	ldr	r2, [r3, #12]
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	4a0c      	ldr	r2, [pc, #48]	; (8009d00 <TL_BLE_Init+0x5c>)
 8009cd0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	4a08      	ldr	r2, [pc, #32]	; (8009cf8 <TL_BLE_Init+0x54>)
 8009cd6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009cd8:	f007 fcf4 	bl	80116c4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a08      	ldr	r2, [pc, #32]	; (8009d04 <TL_BLE_Init+0x60>)
 8009ce2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	4a07      	ldr	r2, [pc, #28]	; (8009d08 <TL_BLE_Init+0x64>)
 8009cea:	6013      	str	r3, [r2, #0]

  return 0;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	200300c4 	.word	0x200300c4
 8009cfc:	20030000 	.word	0x20030000
 8009d00:	20030a4c 	.word	0x20030a4c
 8009d04:	200002b4 	.word	0x200002b4
 8009d08:	200002b8 	.word	0x200002b8

08009d0c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	460b      	mov	r3, r1
 8009d16:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009d18:	4b09      	ldr	r3, [pc, #36]	; (8009d40 <TL_BLE_SendCmd+0x34>)
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8009d22:	4b07      	ldr	r3, [pc, #28]	; (8009d40 <TL_BLE_SendCmd+0x34>)
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	2001      	movs	r0, #1
 8009d2c:	f000 f9da 	bl	800a0e4 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009d30:	f007 fcd2 	bl	80116d8 <HW_IPCC_BLE_SendCmd>

  return 0;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	20030000 	.word	0x20030000

08009d44 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009d4a:	e01c      	b.n	8009d86 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009d4c:	1d3b      	adds	r3, r7, #4
 8009d4e:	4619      	mov	r1, r3
 8009d50:	4812      	ldr	r0, [pc, #72]	; (8009d9c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009d52:	f000 ff2e 	bl	800abb2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	7a5b      	ldrb	r3, [r3, #9]
 8009d5a:	2b0f      	cmp	r3, #15
 8009d5c:	d003      	beq.n	8009d66 <HW_IPCC_BLE_RxEvtNot+0x22>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	7a5b      	ldrb	r3, [r3, #9]
 8009d62:	2b0e      	cmp	r3, #14
 8009d64:	d105      	bne.n	8009d72 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	2002      	movs	r0, #2
 8009d6c:	f000 f9ba 	bl	800a0e4 <OutputDbgTrace>
 8009d70:	e004      	b.n	8009d7c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4619      	mov	r1, r3
 8009d76:	2003      	movs	r0, #3
 8009d78:	f000 f9b4 	bl	800a0e4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009d7c:	4b08      	ldr	r3, [pc, #32]	; (8009da0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	4610      	mov	r0, r2
 8009d84:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009d86:	4805      	ldr	r0, [pc, #20]	; (8009d9c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009d88:	f000 fe8c 	bl	800aaa4 <LST_is_empty>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d0dc      	beq.n	8009d4c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009d92:	bf00      	nop
}
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	200300c4 	.word	0x200300c4
 8009da0:	200002b4 	.word	0x200002b4

08009da4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009da8:	4b02      	ldr	r3, [pc, #8]	; (8009db4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4798      	blx	r3

  return;
 8009dae:	bf00      	nop
}
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	200002b8 	.word	0x200002b8

08009db8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009dc4:	480d      	ldr	r0, [pc, #52]	; (8009dfc <TL_SYS_Init+0x44>)
 8009dc6:	f000 fe5d 	bl	800aa84 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009dca:	4b0d      	ldr	r3, [pc, #52]	; (8009e00 <TL_SYS_Init+0x48>)
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	689a      	ldr	r2, [r3, #8]
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	4a08      	ldr	r2, [pc, #32]	; (8009dfc <TL_SYS_Init+0x44>)
 8009ddc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009dde:	f007 fc9d 	bl	801171c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a07      	ldr	r2, [pc, #28]	; (8009e04 <TL_SYS_Init+0x4c>)
 8009de8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	4a06      	ldr	r2, [pc, #24]	; (8009e08 <TL_SYS_Init+0x50>)
 8009df0:	6013      	str	r3, [r2, #0]

  return 0;
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3710      	adds	r7, #16
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	200300cc 	.word	0x200300cc
 8009e00:	20030000 	.word	0x20030000
 8009e04:	200002bc 	.word	0x200002bc
 8009e08:	200002c0 	.word	0x200002c0

08009e0c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	460b      	mov	r3, r1
 8009e16:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009e18:	4b09      	ldr	r3, [pc, #36]	; (8009e40 <TL_SYS_SendCmd+0x34>)
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2210      	movs	r2, #16
 8009e20:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8009e22:	4b07      	ldr	r3, [pc, #28]	; (8009e40 <TL_SYS_SendCmd+0x34>)
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4619      	mov	r1, r3
 8009e2a:	2004      	movs	r0, #4
 8009e2c:	f000 f95a 	bl	800a0e4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009e30:	f007 fc7e 	bl	8011730 <HW_IPCC_SYS_SendCmd>

  return 0;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3708      	adds	r7, #8
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	20030000 	.word	0x20030000

08009e44 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009e48:	4b07      	ldr	r3, [pc, #28]	; (8009e68 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4619      	mov	r1, r3
 8009e50:	2005      	movs	r0, #5
 8009e52:	f000 f947 	bl	800a0e4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009e56:	4b05      	ldr	r3, [pc, #20]	; (8009e6c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a03      	ldr	r2, [pc, #12]	; (8009e68 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009e5c:	68d2      	ldr	r2, [r2, #12]
 8009e5e:	6812      	ldr	r2, [r2, #0]
 8009e60:	4610      	mov	r0, r2
 8009e62:	4798      	blx	r3

  return;
 8009e64:	bf00      	nop
}
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	20030000 	.word	0x20030000
 8009e6c:	200002bc 	.word	0x200002bc

08009e70 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009e76:	e00e      	b.n	8009e96 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009e78:	1d3b      	adds	r3, r7, #4
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	480b      	ldr	r0, [pc, #44]	; (8009eac <HW_IPCC_SYS_EvtNot+0x3c>)
 8009e7e:	f000 fe98 	bl	800abb2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4619      	mov	r1, r3
 8009e86:	2006      	movs	r0, #6
 8009e88:	f000 f92c 	bl	800a0e4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009e8c:	4b08      	ldr	r3, [pc, #32]	; (8009eb0 <HW_IPCC_SYS_EvtNot+0x40>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	4610      	mov	r0, r2
 8009e94:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009e96:	4805      	ldr	r0, [pc, #20]	; (8009eac <HW_IPCC_SYS_EvtNot+0x3c>)
 8009e98:	f000 fe04 	bl	800aaa4 <LST_is_empty>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d0ea      	beq.n	8009e78 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009ea2:	bf00      	nop
}
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	200300cc 	.word	0x200300cc
 8009eb0:	200002c0 	.word	0x200002c0

08009eb4 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8009ebc:	4b0a      	ldr	r3, [pc, #40]	; (8009ee8 <TL_THREAD_Init+0x34>)
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	689a      	ldr	r2, [r3, #8]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 8009eda:	f007 fc4f 	bl	801177c <HW_IPCC_THREAD_Init>

  return;
 8009ede:	bf00      	nop
}
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	20030000 	.word	0x20030000

08009eec <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8009ef0:	4b04      	ldr	r3, [pc, #16]	; (8009f04 <TL_OT_SendCmd+0x18>)
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	2208      	movs	r2, #8
 8009ef8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 8009efa:	f007 fc4d 	bl	8011798 <HW_IPCC_OT_SendCmd>

  return;
 8009efe:	bf00      	nop
}
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	20030000 	.word	0x20030000

08009f08 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 8009f0c:	4b04      	ldr	r3, [pc, #16]	; (8009f20 <TL_CLI_SendCmd+0x18>)
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	220a      	movs	r2, #10
 8009f14:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 8009f16:	f007 fc4d 	bl	80117b4 <HW_IPCC_CLI_SendCmd>

  return;
 8009f1a:	bf00      	nop
}
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	20030000 	.word	0x20030000

08009f24 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8009f28:	4b04      	ldr	r3, [pc, #16]	; (8009f3c <TL_THREAD_SendAck+0x18>)
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	220d      	movs	r2, #13
 8009f30:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 8009f32:	f007 fc49 	bl	80117c8 <HW_IPCC_THREAD_SendAck>

  return;
 8009f36:	bf00      	nop
}
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	20030000 	.word	0x20030000

08009f40 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8009f44:	4b04      	ldr	r3, [pc, #16]	; (8009f58 <TL_THREAD_CliSendAck+0x18>)
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	220d      	movs	r2, #13
 8009f4c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 8009f4e:	f007 fc49 	bl	80117e4 <HW_IPCC_THREAD_CliSendAck>

  return;
 8009f52:	bf00      	nop
}
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	20030000 	.word	0x20030000

08009f5c <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8009f60:	4b03      	ldr	r3, [pc, #12]	; (8009f70 <HW_IPCC_OT_CmdEvtNot+0x14>)
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	4618      	mov	r0, r3
 8009f68:	f006 fa0e 	bl	8010388 <TL_OT_CmdEvtReceived>

  return;
 8009f6c:	bf00      	nop
}
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	20030000 	.word	0x20030000

08009f74 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 8009f78:	4b03      	ldr	r3, [pc, #12]	; (8009f88 <HW_IPCC_THREAD_EvtNot+0x14>)
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f006 fa0c 	bl	801039c <TL_THREAD_NotReceived>

  return;
 8009f84:	bf00      	nop
}
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	20030000 	.word	0x20030000

08009f8c <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 8009f90:	4b03      	ldr	r3, [pc, #12]	; (8009fa0 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	4618      	mov	r0, r3
 8009f98:	f006 faee 	bl	8010578 <TL_THREAD_CliNotReceived>

  return;
 8009f9c:	bf00      	nop
}
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	20030000 	.word	0x20030000

08009fa4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009fac:	4817      	ldr	r0, [pc, #92]	; (800a00c <TL_MM_Init+0x68>)
 8009fae:	f000 fd69 	bl	800aa84 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009fb2:	4817      	ldr	r0, [pc, #92]	; (800a010 <TL_MM_Init+0x6c>)
 8009fb4:	f000 fd66 	bl	800aa84 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009fb8:	4b16      	ldr	r3, [pc, #88]	; (800a014 <TL_MM_Init+0x70>)
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	4a16      	ldr	r2, [pc, #88]	; (800a018 <TL_MM_Init+0x74>)
 8009fbe:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009fc0:	4b15      	ldr	r3, [pc, #84]	; (800a018 <TL_MM_Init+0x74>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	6892      	ldr	r2, [r2, #8]
 8009fc8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009fca:	4b13      	ldr	r3, [pc, #76]	; (800a018 <TL_MM_Init+0x74>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	68d2      	ldr	r2, [r2, #12]
 8009fd2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009fd4:	4b10      	ldr	r3, [pc, #64]	; (800a018 <TL_MM_Init+0x74>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a0c      	ldr	r2, [pc, #48]	; (800a00c <TL_MM_Init+0x68>)
 8009fda:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009fdc:	4b0e      	ldr	r3, [pc, #56]	; (800a018 <TL_MM_Init+0x74>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	6812      	ldr	r2, [r2, #0]
 8009fe4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8009fe6:	4b0c      	ldr	r3, [pc, #48]	; (800a018 <TL_MM_Init+0x74>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	6852      	ldr	r2, [r2, #4]
 8009fee:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009ff0:	4b09      	ldr	r3, [pc, #36]	; (800a018 <TL_MM_Init+0x74>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	6912      	ldr	r2, [r2, #16]
 8009ff8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009ffa:	4b07      	ldr	r3, [pc, #28]	; (800a018 <TL_MM_Init+0x74>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	6952      	ldr	r2, [r2, #20]
 800a002:	619a      	str	r2, [r3, #24]

  return;
 800a004:	bf00      	nop
}
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	200300b4 	.word	0x200300b4
 800a010:	200002ac 	.word	0x200002ac
 800a014:	20030000 	.word	0x20030000
 800a018:	200002c4 	.word	0x200002c4

0800a01c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a024:	6879      	ldr	r1, [r7, #4]
 800a026:	4807      	ldr	r0, [pc, #28]	; (800a044 <TL_MM_EvtDone+0x28>)
 800a028:	f000 fd80 	bl	800ab2c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a02c:	6879      	ldr	r1, [r7, #4]
 800a02e:	2000      	movs	r0, #0
 800a030:	f000 f858 	bl	800a0e4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a034:	4804      	ldr	r0, [pc, #16]	; (800a048 <TL_MM_EvtDone+0x2c>)
 800a036:	f007 fc07 	bl	8011848 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a03a:	bf00      	nop
}
 800a03c:	3708      	adds	r7, #8
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	200002ac 	.word	0x200002ac
 800a048:	0800a04d 	.word	0x0800a04d

0800a04c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a052:	e00c      	b.n	800a06e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a054:	1d3b      	adds	r3, r7, #4
 800a056:	4619      	mov	r1, r3
 800a058:	480a      	ldr	r0, [pc, #40]	; (800a084 <SendFreeBuf+0x38>)
 800a05a:	f000 fdaa 	bl	800abb2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a05e:	4b0a      	ldr	r3, [pc, #40]	; (800a088 <SendFreeBuf+0x3c>)
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	4611      	mov	r1, r2
 800a068:	4618      	mov	r0, r3
 800a06a:	f000 fd5f 	bl	800ab2c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a06e:	4805      	ldr	r0, [pc, #20]	; (800a084 <SendFreeBuf+0x38>)
 800a070:	f000 fd18 	bl	800aaa4 <LST_is_empty>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d0ec      	beq.n	800a054 <SendFreeBuf+0x8>
  }

  return;
 800a07a:	bf00      	nop
}
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	200002ac 	.word	0x200002ac
 800a088:	20030000 	.word	0x20030000

0800a08c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a090:	4805      	ldr	r0, [pc, #20]	; (800a0a8 <TL_TRACES_Init+0x1c>)
 800a092:	f000 fcf7 	bl	800aa84 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a096:	4b05      	ldr	r3, [pc, #20]	; (800a0ac <TL_TRACES_Init+0x20>)
 800a098:	695b      	ldr	r3, [r3, #20]
 800a09a:	4a03      	ldr	r2, [pc, #12]	; (800a0a8 <TL_TRACES_Init+0x1c>)
 800a09c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a09e:	f007 fc09 	bl	80118b4 <HW_IPCC_TRACES_Init>

  return;
 800a0a2:	bf00      	nop
}
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	200300bc 	.word	0x200300bc
 800a0ac:	20030000 	.word	0x20030000

0800a0b0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a0b6:	e008      	b.n	800a0ca <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a0b8:	1d3b      	adds	r3, r7, #4
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	4808      	ldr	r0, [pc, #32]	; (800a0e0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a0be:	f000 fd78 	bl	800abb2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7f7 f81d 	bl	8001104 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a0ca:	4805      	ldr	r0, [pc, #20]	; (800a0e0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a0cc:	f000 fcea 	bl	800aaa4 <LST_is_empty>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d0f0      	beq.n	800a0b8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a0d6:	bf00      	nop
}
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	200300bc 	.word	0x200300bc

0800a0e4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	6039      	str	r1, [r7, #0]
 800a0ee:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a0f0:	79fb      	ldrb	r3, [r7, #7]
 800a0f2:	2b06      	cmp	r3, #6
 800a0f4:	d849      	bhi.n	800a18a <OutputDbgTrace+0xa6>
 800a0f6:	a201      	add	r2, pc, #4	; (adr r2, 800a0fc <OutputDbgTrace+0x18>)
 800a0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fc:	0800a119 	.word	0x0800a119
 800a100:	0800a13b 	.word	0x0800a13b
 800a104:	0800a141 	.word	0x0800a141
 800a108:	0800a15b 	.word	0x0800a15b
 800a10c:	0800a167 	.word	0x0800a167
 800a110:	0800a16d 	.word	0x0800a16d
 800a114:	0800a17f 	.word	0x0800a17f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	7a5b      	ldrb	r3, [r3, #9]
 800a120:	2b0f      	cmp	r3, #15
 800a122:	d004      	beq.n	800a12e <OutputDbgTrace+0x4a>
 800a124:	2bff      	cmp	r3, #255	; 0xff
 800a126:	d004      	beq.n	800a132 <OutputDbgTrace+0x4e>
 800a128:	2b0e      	cmp	r3, #14
 800a12a:	d004      	beq.n	800a136 <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a12c:	e004      	b.n	800a138 <OutputDbgTrace+0x54>
          break;
 800a12e:	bf00      	nop
 800a130:	e02c      	b.n	800a18c <OutputDbgTrace+0xa8>
          break;
 800a132:	bf00      	nop
 800a134:	e02a      	b.n	800a18c <OutputDbgTrace+0xa8>
          break;
 800a136:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a138:	e028      	b.n	800a18c <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a13e:	e025      	b.n	800a18c <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	7a5b      	ldrb	r3, [r3, #9]
 800a148:	2b0e      	cmp	r3, #14
 800a14a:	d002      	beq.n	800a152 <OutputDbgTrace+0x6e>
 800a14c:	2b0f      	cmp	r3, #15
 800a14e:	d002      	beq.n	800a156 <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a150:	e002      	b.n	800a158 <OutputDbgTrace+0x74>
          break;
 800a152:	bf00      	nop
 800a154:	e01a      	b.n	800a18c <OutputDbgTrace+0xa8>
          break;
 800a156:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a158:	e018      	b.n	800a18c <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	7a5b      	ldrb	r3, [r3, #9]
 800a162:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a164:	e012      	b.n	800a18c <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a16a:	e00f      	b.n	800a18c <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	7a5b      	ldrb	r3, [r3, #9]
 800a174:	2b0e      	cmp	r3, #14
 800a176:	d000      	beq.n	800a17a <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a178:	e000      	b.n	800a17c <OutputDbgTrace+0x98>
          break;
 800a17a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a17c:	e006      	b.n	800a18c <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	7a5b      	ldrb	r3, [r3, #9]
 800a186:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a188:	e000      	b.n	800a18c <OutputDbgTrace+0xa8>

    default:
      break;
 800a18a:	bf00      	nop
  }

  return;
 800a18c:	bf00      	nop
}
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 800a19e:	f006 f90d 	bl	80103bc <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a1a2:	f006 f8a9 	bl	80102f8 <THREAD_Get_OTCmdPayloadBuffer>
 800a1a6:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f062 026b 	orn	r2, r2, #107	; 0x6b
 800a1b0:	701a      	strb	r2, [r3, #0]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	705a      	strb	r2, [r3, #1]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	709a      	strb	r2, [r3, #2]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	711a      	strb	r2, [r3, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	715a      	strb	r2, [r3, #5]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	719a      	strb	r2, [r3, #6]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800a1d0:	f006 f8b6 	bl	8010340 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a1d4:	f006 f89c 	bl	8010310 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a1d8:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	689b      	ldr	r3, [r3, #8]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800a1ee:	f006 f8e5 	bl	80103bc <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a1f2:	f006 f881 	bl	80102f8 <THREAD_Get_OTCmdPayloadBuffer>
 800a1f6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f062 0269 	orn	r2, r2, #105	; 0x69
 800a200:	701a      	strb	r2, [r3, #0]
 800a202:	2200      	movs	r2, #0
 800a204:	705a      	strb	r2, [r3, #1]
 800a206:	2200      	movs	r2, #0
 800a208:	709a      	strb	r2, [r3, #2]
 800a20a:	2200      	movs	r2, #0
 800a20c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2200      	movs	r2, #0
 800a212:	711a      	strb	r2, [r3, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	715a      	strb	r2, [r3, #5]
 800a218:	2200      	movs	r2, #0
 800a21a:	719a      	strb	r2, [r3, #6]
 800a21c:	2200      	movs	r2, #0
 800a21e:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800a220:	f006 f88e 	bl	8010340 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a224:	f006 f874 	bl	8010310 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a228:	60f8      	str	r0, [r7, #12]
}
 800a22a:	bf00      	nop
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
	...

0800a234 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b086      	sub	sp, #24
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 800a240:	f006 f8bc 	bl	80103bc <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 800a244:	4a15      	ldr	r2, [pc, #84]	; (800a29c <otSetStateChangedCallback+0x68>)
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a24a:	f006 f855 	bl	80102f8 <THREAD_Get_OTCmdPayloadBuffer>
 800a24e:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	2200      	movs	r2, #0
 800a254:	f062 0268 	orn	r2, r2, #104	; 0x68
 800a258:	701a      	strb	r2, [r3, #0]
 800a25a:	2200      	movs	r2, #0
 800a25c:	705a      	strb	r2, [r3, #1]
 800a25e:	2200      	movs	r2, #0
 800a260:	709a      	strb	r2, [r3, #2]
 800a262:	2200      	movs	r2, #0
 800a264:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	2200      	movs	r2, #0
 800a26a:	f042 0201 	orr.w	r2, r2, #1
 800a26e:	711a      	strb	r2, [r3, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	715a      	strb	r2, [r3, #5]
 800a274:	2200      	movs	r2, #0
 800a276:	719a      	strb	r2, [r3, #6]
 800a278:	2200      	movs	r2, #0
 800a27a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800a282:	f006 f85d 	bl	8010340 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a286:	f006 f843 	bl	8010310 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a28a:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	b2db      	uxtb	r3, r3
}
 800a292:	4618      	mov	r0, r3
 800a294:	3718      	adds	r7, #24
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	200002c8 	.word	0x200002c8

0800a2a0 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800a2a8:	f006 f888 	bl	80103bc <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a2ac:	f006 f824 	bl	80102f8 <THREAD_Get_OTCmdPayloadBuffer>
 800a2b0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	f062 0264 	orn	r2, r2, #100	; 0x64
 800a2ba:	701a      	strb	r2, [r3, #0]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	705a      	strb	r2, [r3, #1]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	709a      	strb	r2, [r3, #2]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	711a      	strb	r2, [r3, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	715a      	strb	r2, [r3, #5]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	719a      	strb	r2, [r3, #6]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800a2da:	f006 f831 	bl	8010340 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a2de:	f006 f817 	bl	8010310 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a2e2:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	b2db      	uxtb	r3, r3
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b084      	sub	sp, #16
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a2fe:	f006 f85d 	bl	80103bc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a302:	f005 fff9 	bl	80102f8 <THREAD_Get_OTCmdPayloadBuffer>
 800a306:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800a310:	701a      	strb	r2, [r3, #0]
 800a312:	2200      	movs	r2, #0
 800a314:	705a      	strb	r2, [r3, #1]
 800a316:	2200      	movs	r2, #0
 800a318:	709a      	strb	r2, [r3, #2]
 800a31a:	2200      	movs	r2, #0
 800a31c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2200      	movs	r2, #0
 800a322:	f042 0201 	orr.w	r2, r2, #1
 800a326:	711a      	strb	r2, [r3, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	715a      	strb	r2, [r3, #5]
 800a32c:	2200      	movs	r2, #0
 800a32e:	719a      	strb	r2, [r3, #6]
 800a330:	2200      	movs	r2, #0
 800a332:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800a334:	78fa      	ldrb	r2, [r7, #3]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a33a:	f006 f801 	bl	8010340 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a33e:	f005 ffe7 	bl	8010310 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a342:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	b2db      	uxtb	r3, r3
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b084      	sub	sp, #16
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	460b      	mov	r3, r1
 800a35c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a35e:	f006 f82d 	bl	80103bc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a362:	f005 ffc9 	bl	80102f8 <THREAD_Get_OTCmdPayloadBuffer>
 800a366:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f042 0208 	orr.w	r2, r2, #8
 800a370:	701a      	strb	r2, [r3, #0]
 800a372:	2200      	movs	r2, #0
 800a374:	705a      	strb	r2, [r3, #1]
 800a376:	2200      	movs	r2, #0
 800a378:	709a      	strb	r2, [r3, #2]
 800a37a:	2200      	movs	r2, #0
 800a37c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	f042 0201 	orr.w	r2, r2, #1
 800a386:	711a      	strb	r2, [r3, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	715a      	strb	r2, [r3, #5]
 800a38c:	2200      	movs	r2, #0
 800a38e:	719a      	strb	r2, [r3, #6]
 800a390:	2200      	movs	r2, #0
 800a392:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800a394:	78fa      	ldrb	r2, [r7, #3]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a39a:	f005 ffd1 	bl	8010340 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a39e:	f005 ffb7 	bl	8010310 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a3a2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	b2db      	uxtb	r3, r3
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b084      	sub	sp, #16
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800a3be:	f005 fffd 	bl	80103bc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a3c2:	f005 ff99 	bl	80102f8 <THREAD_Get_OTCmdPayloadBuffer>
 800a3c6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f042 020f 	orr.w	r2, r2, #15
 800a3d0:	701a      	strb	r2, [r3, #0]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	705a      	strb	r2, [r3, #1]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	709a      	strb	r2, [r3, #2]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f042 0201 	orr.w	r2, r2, #1
 800a3e6:	711a      	strb	r2, [r3, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	715a      	strb	r2, [r3, #5]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	719a      	strb	r2, [r3, #6]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800a3f4:	887a      	ldrh	r2, [r7, #2]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a3fa:	f005 ffa1 	bl	8010340 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a3fe:	f005 ff87 	bl	8010310 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a402:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	b2db      	uxtb	r3, r3
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
	...

0800a414 <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800a414:	b5b0      	push	{r4, r5, r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	71fb      	strb	r3, [r7, #7]


    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800a41e:	f005 ff83 	bl	8010328 <THREAD_Get_NotificationPayloadBuffer>
 800a422:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	3b01      	subs	r3, #1
 800a42a:	2b17      	cmp	r3, #23
 800a42c:	f200 81c3 	bhi.w	800a7b6 <OpenThread_CallBack_Processing+0x3a2>
 800a430:	a201      	add	r2, pc, #4	; (adr r2, 800a438 <OpenThread_CallBack_Processing+0x24>)
 800a432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a436:	bf00      	nop
 800a438:	0800a499 	.word	0x0800a499
 800a43c:	0800a4b5 	.word	0x0800a4b5
 800a440:	0800a519 	.word	0x0800a519
 800a444:	0800a561 	.word	0x0800a561
 800a448:	0800a56d 	.word	0x0800a56d
 800a44c:	0800a58b 	.word	0x0800a58b
 800a450:	0800a5a9 	.word	0x0800a5a9
 800a454:	0800a5c7 	.word	0x0800a5c7
 800a458:	0800a5e5 	.word	0x0800a5e5
 800a45c:	0800a603 	.word	0x0800a603
 800a460:	0800a625 	.word	0x0800a625
 800a464:	0800a643 	.word	0x0800a643
 800a468:	0800a7b7 	.word	0x0800a7b7
 800a46c:	0800a669 	.word	0x0800a669
 800a470:	0800a69d 	.word	0x0800a69d
 800a474:	0800a6c5 	.word	0x0800a6c5
 800a478:	0800a6e3 	.word	0x0800a6e3
 800a47c:	0800a751 	.word	0x0800a751
 800a480:	0800a779 	.word	0x0800a779
 800a484:	0800a7b7 	.word	0x0800a7b7
 800a488:	0800a797 	.word	0x0800a797
 800a48c:	0800a7b7 	.word	0x0800a7b7
 800a490:	0800a7b7 	.word	0x0800a7b7
 800a494:	0800a4f1 	.word	0x0800a4f1
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 800a498:	4b9b      	ldr	r3, [pc, #620]	; (800a708 <OpenThread_CallBack_Processing+0x2f4>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f000 818d 	beq.w	800a7bc <OpenThread_CallBack_Processing+0x3a8>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800a4a2:	4b99      	ldr	r3, [pc, #612]	; (800a708 <OpenThread_CallBack_Processing+0x2f4>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800a4ae:	4611      	mov	r1, r2
 800a4b0:	4798      	blx	r3
        }
        break;
 800a4b2:	e183      	b.n	800a7bc <OpenThread_CallBack_Processing+0x3a8>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        mySTCoapContext = (STCoapSpecificRequestContextType * ) p_notification->Data[0];
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	4b94      	ldr	r3, [pc, #592]	; (800a70c <OpenThread_CallBack_Processing+0x2f8>)
 800a4bc:	601a      	str	r2, [r3, #0]
        coapRequestHandlerCb = mySTCoapContext->mHandler;
 800a4be:	4b93      	ldr	r3, [pc, #588]	; (800a70c <OpenThread_CallBack_Processing+0x2f8>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	4a92      	ldr	r2, [pc, #584]	; (800a710 <OpenThread_CallBack_Processing+0x2fc>)
 800a4c6:	6013      	str	r3, [r2, #0]
        if (coapRequestHandlerCb != NULL)
 800a4c8:	4b91      	ldr	r3, [pc, #580]	; (800a710 <OpenThread_CallBack_Processing+0x2fc>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f000 8177 	beq.w	800a7c0 <OpenThread_CallBack_Processing+0x3ac>
        {
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800a4d2:	4b8f      	ldr	r3, [pc, #572]	; (800a710 <OpenThread_CallBack_Processing+0x2fc>)
 800a4d4:	681c      	ldr	r4, [r3, #0]
 800a4d6:	4b8d      	ldr	r3, [pc, #564]	; (800a70c <OpenThread_CallBack_Processing+0x2f8>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6818      	ldr	r0, [r3, #0]
                                (otCoapHeader *) p_notification->Data[1],
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	68db      	ldr	r3, [r3, #12]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800a4e0:	4619      	mov	r1, r3
                                (otMessage *) p_notification->Data[2],
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	691b      	ldr	r3, [r3, #16]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800a4e6:	461a      	mov	r2, r3
                                (otMessageInfo *) p_notification->Data[3]);
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	695b      	ldr	r3, [r3, #20]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800a4ec:	47a0      	blx	r4
        }
        break;
 800a4ee:	e167      	b.n	800a7c0 <OpenThread_CallBack_Processing+0x3ac>
    case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
        if (defaultCoapRequestHandlerCb != NULL)
 800a4f0:	4b88      	ldr	r3, [pc, #544]	; (800a714 <OpenThread_CallBack_Processing+0x300>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 8165 	beq.w	800a7c4 <OpenThread_CallBack_Processing+0x3b0>
        {
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a4fa:	4b86      	ldr	r3, [pc, #536]	; (800a714 <OpenThread_CallBack_Processing+0x300>)
 800a4fc:	681c      	ldr	r4, [r3, #0]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	4618      	mov	r0, r3
                    (otCoapHeader *) p_notification->Data[1],
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	68db      	ldr	r3, [r3, #12]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a508:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	691b      	ldr	r3, [r3, #16]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a50e:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3]);
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	695b      	ldr	r3, [r3, #20]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a514:	47a0      	blx	r4
        }
        break;
 800a516:	e155      	b.n	800a7c4 <OpenThread_CallBack_Processing+0x3b0>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER: 
        mySTCoapResponseContext = (STCoapSpecificResponseContextType * ) p_notification->Data[0];
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	461a      	mov	r2, r3
 800a51e:	4b7e      	ldr	r3, [pc, #504]	; (800a718 <OpenThread_CallBack_Processing+0x304>)
 800a520:	601a      	str	r2, [r3, #0]
        coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800a522:	4b7d      	ldr	r3, [pc, #500]	; (800a718 <OpenThread_CallBack_Processing+0x304>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	4a7c      	ldr	r2, [pc, #496]	; (800a71c <OpenThread_CallBack_Processing+0x308>)
 800a52a:	6013      	str	r3, [r2, #0]
        if (coapResponseHandlerCb != NULL)
 800a52c:	4b7b      	ldr	r3, [pc, #492]	; (800a71c <OpenThread_CallBack_Processing+0x308>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	f000 8149 	beq.w	800a7c8 <OpenThread_CallBack_Processing+0x3b4>
        {
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a536:	4b79      	ldr	r3, [pc, #484]	; (800a71c <OpenThread_CallBack_Processing+0x308>)
 800a538:	681c      	ldr	r4, [r3, #0]
 800a53a:	4b77      	ldr	r3, [pc, #476]	; (800a718 <OpenThread_CallBack_Processing+0x304>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	6818      	ldr	r0, [r3, #0]
                    (otCoapHeader *) p_notification->Data[1],
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	68db      	ldr	r3, [r3, #12]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a544:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a54a:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3],
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a550:	461d      	mov	r5, r3
                    (otError) p_notification->Data[4]);
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a556:	b2db      	uxtb	r3, r3
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	462b      	mov	r3, r5
 800a55c:	47a0      	blx	r4
        }
        break;
 800a55e:	e133      	b.n	800a7c8 <OpenThread_CallBack_Processing+0x3b4>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 800a560:	2001      	movs	r0, #1
 800a562:	f7fe ffcd 	bl	8009500 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 800a566:	f7f9 f838 	bl	80035da <HAL_NVIC_SystemReset>
        break;
 800a56a:	e14c      	b.n	800a806 <OpenThread_CallBack_Processing+0x3f2>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 800a56c:	4b6c      	ldr	r3, [pc, #432]	; (800a720 <OpenThread_CallBack_Processing+0x30c>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	f000 812b 	beq.w	800a7cc <OpenThread_CallBack_Processing+0x3b8>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800a576:	4b6a      	ldr	r3, [pc, #424]	; (800a720 <OpenThread_CallBack_Processing+0x30c>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	683a      	ldr	r2, [r7, #0]
 800a57c:	6892      	ldr	r2, [r2, #8]
 800a57e:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800a580:	683a      	ldr	r2, [r7, #0]
 800a582:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800a584:	4611      	mov	r1, r2
 800a586:	4798      	blx	r3
        }
        break;
 800a588:	e120      	b.n	800a7cc <OpenThread_CallBack_Processing+0x3b8>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 800a58a:	4b66      	ldr	r3, [pc, #408]	; (800a724 <OpenThread_CallBack_Processing+0x310>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f000 811e 	beq.w	800a7d0 <OpenThread_CallBack_Processing+0x3bc>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800a594:	4b63      	ldr	r3, [pc, #396]	; (800a724 <OpenThread_CallBack_Processing+0x310>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	6892      	ldr	r2, [r2, #8]
 800a59c:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 800a59e:	683a      	ldr	r2, [r7, #0]
 800a5a0:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	4798      	blx	r3
        }
        break;
 800a5a6:	e113      	b.n	800a7d0 <OpenThread_CallBack_Processing+0x3bc>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 800a5a8:	4b5f      	ldr	r3, [pc, #380]	; (800a728 <OpenThread_CallBack_Processing+0x314>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f000 8111 	beq.w	800a7d4 <OpenThread_CallBack_Processing+0x3c0>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800a5b2:	4b5d      	ldr	r3, [pc, #372]	; (800a728 <OpenThread_CallBack_Processing+0x314>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	6892      	ldr	r2, [r2, #8]
 800a5ba:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800a5bc:	683a      	ldr	r2, [r7, #0]
 800a5be:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800a5c0:	4611      	mov	r1, r2
 800a5c2:	4798      	blx	r3
        }
        break;
 800a5c4:	e106      	b.n	800a7d4 <OpenThread_CallBack_Processing+0x3c0>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 800a5c6:	4b59      	ldr	r3, [pc, #356]	; (800a72c <OpenThread_CallBack_Processing+0x318>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	f000 8104 	beq.w	800a7d8 <OpenThread_CallBack_Processing+0x3c4>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800a5d0:	4b56      	ldr	r3, [pc, #344]	; (800a72c <OpenThread_CallBack_Processing+0x318>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	683a      	ldr	r2, [r7, #0]
 800a5d6:	6892      	ldr	r2, [r2, #8]
 800a5d8:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800a5da:	683a      	ldr	r2, [r7, #0]
 800a5dc:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800a5de:	4611      	mov	r1, r2
 800a5e0:	4798      	blx	r3
        }
        break;
 800a5e2:	e0f9      	b.n	800a7d8 <OpenThread_CallBack_Processing+0x3c4>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 800a5e4:	4b52      	ldr	r3, [pc, #328]	; (800a730 <OpenThread_CallBack_Processing+0x31c>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f000 80f7 	beq.w	800a7dc <OpenThread_CallBack_Processing+0x3c8>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800a5ee:	4b50      	ldr	r3, [pc, #320]	; (800a730 <OpenThread_CallBack_Processing+0x31c>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	6892      	ldr	r2, [r2, #8]
 800a5f6:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800a5f8:	683a      	ldr	r2, [r7, #0]
 800a5fa:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	4798      	blx	r3
        }
        break;
 800a600:	e0ec      	b.n	800a7dc <OpenThread_CallBack_Processing+0x3c8>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 800a602:	4b4c      	ldr	r3, [pc, #304]	; (800a734 <OpenThread_CallBack_Processing+0x320>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	f000 80ea 	beq.w	800a7e0 <OpenThread_CallBack_Processing+0x3cc>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800a60c:	4b49      	ldr	r3, [pc, #292]	; (800a734 <OpenThread_CallBack_Processing+0x320>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	683a      	ldr	r2, [r7, #0]
 800a612:	6892      	ldr	r2, [r2, #8]
 800a614:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800a61a:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 800a61c:	683a      	ldr	r2, [r7, #0]
 800a61e:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800a620:	4798      	blx	r3
        }
        break;
 800a622:	e0dd      	b.n	800a7e0 <OpenThread_CallBack_Processing+0x3cc>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 800a624:	4b44      	ldr	r3, [pc, #272]	; (800a738 <OpenThread_CallBack_Processing+0x324>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f000 80db 	beq.w	800a7e4 <OpenThread_CallBack_Processing+0x3d0>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800a62e:	4b42      	ldr	r3, [pc, #264]	; (800a738 <OpenThread_CallBack_Processing+0x324>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	683a      	ldr	r2, [r7, #0]
 800a634:	6892      	ldr	r2, [r2, #8]
 800a636:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 800a638:	683a      	ldr	r2, [r7, #0]
 800a63a:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800a63c:	4611      	mov	r1, r2
 800a63e:	4798      	blx	r3
        }
        break;
 800a640:	e0d0      	b.n	800a7e4 <OpenThread_CallBack_Processing+0x3d0>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 800a642:	4b3e      	ldr	r3, [pc, #248]	; (800a73c <OpenThread_CallBack_Processing+0x328>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	f000 80ce 	beq.w	800a7e8 <OpenThread_CallBack_Processing+0x3d4>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a64c:	4b3b      	ldr	r3, [pc, #236]	; (800a73c <OpenThread_CallBack_Processing+0x328>)
 800a64e:	681c      	ldr	r4, [r3, #0]
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a658:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a65e:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a664:	47a0      	blx	r4
        }
        break;
 800a666:	e0bf      	b.n	800a7e8 <OpenThread_CallBack_Processing+0x3d4>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 800a668:	4b35      	ldr	r3, [pc, #212]	; (800a740 <OpenThread_CallBack_Processing+0x32c>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f000 80bd 	beq.w	800a7ec <OpenThread_CallBack_Processing+0x3d8>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a672:	4b33      	ldr	r3, [pc, #204]	; (800a740 <OpenThread_CallBack_Processing+0x32c>)
 800a674:	681c      	ldr	r4, [r3, #0]
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a680:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a686:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a690:	b2db      	uxtb	r3, r3
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	4613      	mov	r3, r2
 800a696:	462a      	mov	r2, r5
 800a698:	47a0      	blx	r4
        }
        break;
 800a69a:	e0a7      	b.n	800a7ec <OpenThread_CallBack_Processing+0x3d8>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 800a69c:	4b29      	ldr	r3, [pc, #164]	; (800a744 <OpenThread_CallBack_Processing+0x330>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f000 80a5 	beq.w	800a7f0 <OpenThread_CallBack_Processing+0x3dc>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a6a6:	4b27      	ldr	r3, [pc, #156]	; (800a744 <OpenThread_CallBack_Processing+0x330>)
 800a6a8:	681c      	ldr	r4, [r3, #0]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a6b4:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a6ba:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a6c0:	47a0      	blx	r4
        }
        break;
 800a6c2:	e095      	b.n	800a7f0 <OpenThread_CallBack_Processing+0x3dc>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 800a6c4:	4b20      	ldr	r3, [pc, #128]	; (800a748 <OpenThread_CallBack_Processing+0x334>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f000 8093 	beq.w	800a7f4 <OpenThread_CallBack_Processing+0x3e0>
        {
            otJoinerCb((otError) p_notification->Data[0],
 800a6ce:	4b1e      	ldr	r3, [pc, #120]	; (800a748 <OpenThread_CallBack_Processing+0x334>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	683a      	ldr	r2, [r7, #0]
 800a6d4:	6892      	ldr	r2, [r2, #8]
 800a6d6:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 800a6d8:	683a      	ldr	r2, [r7, #0]
 800a6da:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 800a6dc:	4611      	mov	r1, r2
 800a6de:	4798      	blx	r3
        }
        break;
 800a6e0:	e088      	b.n	800a7f4 <OpenThread_CallBack_Processing+0x3e0>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 800a6e2:	4b1a      	ldr	r3, [pc, #104]	; (800a74c <OpenThread_CallBack_Processing+0x338>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	f000 8086 	beq.w	800a7f8 <OpenThread_CallBack_Processing+0x3e4>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a6ec:	4b17      	ldr	r3, [pc, #92]	; (800a74c <OpenThread_CallBack_Processing+0x338>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	6892      	ldr	r2, [r2, #8]
 800a6f4:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 800a6f6:	683a      	ldr	r2, [r7, #0]
 800a6f8:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a6fa:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a700:	b2d2      	uxtb	r2, r2
 800a702:	4798      	blx	r3
        }
        break;
 800a704:	e078      	b.n	800a7f8 <OpenThread_CallBack_Processing+0x3e4>
 800a706:	bf00      	nop
 800a708:	200002c8 	.word	0x200002c8
 800a70c:	20006f40 	.word	0x20006f40
 800a710:	20000308 	.word	0x20000308
 800a714:	2000030c 	.word	0x2000030c
 800a718:	20006f3c 	.word	0x20006f3c
 800a71c:	20000310 	.word	0x20000310
 800a720:	200002d0 	.word	0x200002d0
 800a724:	200002cc 	.word	0x200002cc
 800a728:	200002d4 	.word	0x200002d4
 800a72c:	200002d8 	.word	0x200002d8
 800a730:	200002dc 	.word	0x200002dc
 800a734:	200002e0 	.word	0x200002e0
 800a738:	200002e4 	.word	0x200002e4
 800a73c:	200002e8 	.word	0x200002e8
 800a740:	200002ec 	.word	0x200002ec
 800a744:	200002f0 	.word	0x200002f0
 800a748:	200002f4 	.word	0x200002f4
 800a74c:	200002f8 	.word	0x200002f8
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 800a750:	4b30      	ldr	r3, [pc, #192]	; (800a814 <OpenThread_CallBack_Processing+0x400>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d051      	beq.n	800a7fc <OpenThread_CallBack_Processing+0x3e8>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a758:	4b2e      	ldr	r3, [pc, #184]	; (800a814 <OpenThread_CallBack_Processing+0x400>)
 800a75a:	681c      	ldr	r4, [r3, #0]
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a766:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a76c:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a772:	b2db      	uxtb	r3, r3
 800a774:	47a0      	blx	r4
        }
        break;
 800a776:	e041      	b.n	800a7fc <OpenThread_CallBack_Processing+0x3e8>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 800a778:	4b27      	ldr	r3, [pc, #156]	; (800a818 <OpenThread_CallBack_Processing+0x404>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d03f      	beq.n	800a800 <OpenThread_CallBack_Processing+0x3ec>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800a780:	4b25      	ldr	r3, [pc, #148]	; (800a818 <OpenThread_CallBack_Processing+0x404>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	683a      	ldr	r2, [r7, #0]
 800a786:	6892      	ldr	r2, [r2, #8]
 800a788:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 800a78a:	683a      	ldr	r2, [r7, #0]
 800a78c:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800a78e:	b252      	sxtb	r2, r2
 800a790:	4611      	mov	r1, r2
 800a792:	4798      	blx	r3
        }
        break;
 800a794:	e034      	b.n	800a800 <OpenThread_CallBack_Processing+0x3ec>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 800a796:	4b21      	ldr	r3, [pc, #132]	; (800a81c <OpenThread_CallBack_Processing+0x408>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d032      	beq.n	800a804 <OpenThread_CallBack_Processing+0x3f0>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 800a79e:	4b1f      	ldr	r3, [pc, #124]	; (800a81c <OpenThread_CallBack_Processing+0x408>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	683a      	ldr	r2, [r7, #0]
 800a7a4:	6892      	ldr	r2, [r2, #8]
 800a7a6:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 800a7a8:	683a      	ldr	r2, [r7, #0]
 800a7aa:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800a7ac:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 800a7ae:	683a      	ldr	r2, [r7, #0]
 800a7b0:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800a7b2:	4798      	blx	r3
        }
        break;
 800a7b4:	e026      	b.n	800a804 <OpenThread_CallBack_Processing+0x3f0>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	71fb      	strb	r3, [r7, #7]
        break;
 800a7ba:	e024      	b.n	800a806 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7bc:	bf00      	nop
 800a7be:	e022      	b.n	800a806 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7c0:	bf00      	nop
 800a7c2:	e020      	b.n	800a806 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7c4:	bf00      	nop
 800a7c6:	e01e      	b.n	800a806 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7c8:	bf00      	nop
 800a7ca:	e01c      	b.n	800a806 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7cc:	bf00      	nop
 800a7ce:	e01a      	b.n	800a806 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7d0:	bf00      	nop
 800a7d2:	e018      	b.n	800a806 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7d4:	bf00      	nop
 800a7d6:	e016      	b.n	800a806 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7d8:	bf00      	nop
 800a7da:	e014      	b.n	800a806 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7dc:	bf00      	nop
 800a7de:	e012      	b.n	800a806 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7e0:	bf00      	nop
 800a7e2:	e010      	b.n	800a806 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7e4:	bf00      	nop
 800a7e6:	e00e      	b.n	800a806 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7e8:	bf00      	nop
 800a7ea:	e00c      	b.n	800a806 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7ec:	bf00      	nop
 800a7ee:	e00a      	b.n	800a806 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7f0:	bf00      	nop
 800a7f2:	e008      	b.n	800a806 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7f4:	bf00      	nop
 800a7f6:	e006      	b.n	800a806 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7f8:	bf00      	nop
 800a7fa:	e004      	b.n	800a806 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7fc:	bf00      	nop
 800a7fe:	e002      	b.n	800a806 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a800:	bf00      	nop
 800a802:	e000      	b.n	800a806 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a804:	bf00      	nop
    }

    TL_THREAD_SendAck();
 800a806:	f7ff fb8d 	bl	8009f24 <TL_THREAD_SendAck>
    return status;
 800a80a:	79fb      	ldrb	r3, [r7, #7]

}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3708      	adds	r7, #8
 800a810:	46bd      	mov	sp, r7
 800a812:	bdb0      	pop	{r4, r5, r7, pc}
 800a814:	200002fc 	.word	0x200002fc
 800a818:	20000300 	.word	0x20000300
 800a81c:	20000304 	.word	0x20000304

0800a820 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	460b      	mov	r3, r1
 800a82a:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a82c:	f005 fdc6 	bl	80103bc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a830:	f005 fd62 	bl	80102f8 <THREAD_Get_OTCmdPayloadBuffer>
 800a834:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2200      	movs	r2, #0
 800a83a:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 800a83e:	701a      	strb	r2, [r3, #0]
 800a840:	2200      	movs	r2, #0
 800a842:	705a      	strb	r2, [r3, #1]
 800a844:	2200      	movs	r2, #0
 800a846:	709a      	strb	r2, [r3, #2]
 800a848:	2200      	movs	r2, #0
 800a84a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2200      	movs	r2, #0
 800a850:	f042 0201 	orr.w	r2, r2, #1
 800a854:	711a      	strb	r2, [r3, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	715a      	strb	r2, [r3, #5]
 800a85a:	2200      	movs	r2, #0
 800a85c:	719a      	strb	r2, [r3, #6]
 800a85e:	2200      	movs	r2, #0
 800a860:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800a862:	78fa      	ldrb	r2, [r7, #3]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a868:	f005 fd6a 	bl	8010340 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a86c:	f005 fd50 	bl	8010310 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a870:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	b2db      	uxtb	r3, r3
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a888:	f005 fd98 	bl	80103bc <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a88c:	f005 fd34 	bl	80102f8 <THREAD_Get_OTCmdPayloadBuffer>
 800a890:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2200      	movs	r2, #0
 800a896:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 800a89a:	701a      	strb	r2, [r3, #0]
 800a89c:	2200      	movs	r2, #0
 800a89e:	705a      	strb	r2, [r3, #1]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	709a      	strb	r2, [r3, #2]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	711a      	strb	r2, [r3, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	715a      	strb	r2, [r3, #5]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	719a      	strb	r2, [r3, #6]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800a8ba:	f005 fd41 	bl	8010340 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a8be:	f005 fd27 	bl	8010310 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a8c2:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	b2db      	uxtb	r3, r3
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
	...

0800a8d4 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b086      	sub	sp, #24
 800a8d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8da:	f3ef 8310 	mrs	r3, PRIMASK
 800a8de:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800a8e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8e4:	b672      	cpsid	i

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800a8e6:	1cbb      	adds	r3, r7, #2
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	4812      	ldr	r0, [pc, #72]	; (800a934 <DbgTrace_TxCpltCallback+0x60>)
 800a8ec:	f000 fbd7 	bl	800b09e <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800a8f0:	1cbb      	adds	r3, r7, #2
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	480f      	ldr	r0, [pc, #60]	; (800a934 <DbgTrace_TxCpltCallback+0x60>)
 800a8f6:	f000 fcc6 	bl	800b286 <CircularQueue_Sense>
 800a8fa:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d00b      	beq.n	800a91a <DbgTrace_TxCpltCallback+0x46>
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800a90c:	887b      	ldrh	r3, [r7, #2]
 800a90e:	4a0a      	ldr	r2, [pc, #40]	; (800a938 <DbgTrace_TxCpltCallback+0x64>)
 800a910:	4619      	mov	r1, r3
 800a912:	6938      	ldr	r0, [r7, #16]
 800a914:	f7f6 fc11 	bl	800113a <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800a918:	e007      	b.n	800a92a <DbgTrace_TxCpltCallback+0x56>
    DbgTracePeripheralReady = SET;
 800a91a:	4b08      	ldr	r3, [pc, #32]	; (800a93c <DbgTrace_TxCpltCallback+0x68>)
 800a91c:	2201      	movs	r2, #1
 800a91e:	701a      	strb	r2, [r3, #0]
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	607b      	str	r3, [r7, #4]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f383 8810 	msr	PRIMASK, r3
}
 800a92a:	bf00      	nop
 800a92c:	3718      	adds	r7, #24
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	20000314 	.word	0x20000314
 800a938:	0800a8d5 	.word	0x0800a8d5
 800a93c:	20000019 	.word	0x20000019

0800a940 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800a946:	f7f6 fbf2 	bl	800112e <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800a94a:	2302      	movs	r3, #2
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	2300      	movs	r3, #0
 800a950:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a954:	4903      	ldr	r1, [pc, #12]	; (800a964 <DbgTraceInit+0x24>)
 800a956:	4804      	ldr	r0, [pc, #16]	; (800a968 <DbgTraceInit+0x28>)
 800a958:	f000 f948 	bl	800abec <CircularQueue_Init>
#endif 
#endif
  return;
 800a95c:	bf00      	nop
}
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	20000334 	.word	0x20000334
 800a968:	20000314 	.word	0x20000314

0800a96c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	68b9      	ldr	r1, [r7, #8]
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f000 f805 	bl	800a98c <DbgTraceWrite>
 800a982:	4603      	mov	r3, r0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b08a      	sub	sp, #40	; 0x28
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800a998:	2300      	movs	r3, #0
 800a99a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a99c:	f3ef 8310 	mrs	r3, PRIMASK
 800a9a0:	61bb      	str	r3, [r7, #24]
  return(result);
 800a9a2:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800a9a4:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ac:	d102      	bne.n	800a9b4 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	627b      	str	r3, [r7, #36]	; 0x24
 800a9b2:	e034      	b.n	800aa1e <DbgTraceWrite+0x92>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d006      	beq.n	800a9c8 <DbgTraceWrite+0x3c>
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	d003      	beq.n	800a9c8 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800a9c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a9c6:	e02a      	b.n	800aa1e <DbgTraceWrite+0x92>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d027      	beq.n	800aa1e <DbgTraceWrite+0x92>
  {
    chars_written = bufSize;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800a9d2:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	2301      	movs	r3, #1
 800a9da:	68b9      	ldr	r1, [r7, #8]
 800a9dc:	4812      	ldr	r0, [pc, #72]	; (800aa28 <DbgTraceWrite+0x9c>)
 800a9de:	f000 f937 	bl	800ac50 <CircularQueue_Add>
 800a9e2:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d014      	beq.n	800aa14 <DbgTraceWrite+0x88>
 800a9ea:	4b10      	ldr	r3, [pc, #64]	; (800aa2c <DbgTraceWrite+0xa0>)
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00f      	beq.n	800aa14 <DbgTraceWrite+0x88>
    {
      DbgTracePeripheralReady = RESET;
 800a9f4:	4b0d      	ldr	r3, [pc, #52]	; (800aa2c <DbgTraceWrite+0xa0>)
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	701a      	strb	r2, [r3, #0]
 800a9fa:	6a3b      	ldr	r3, [r7, #32]
 800a9fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	f383 8810 	msr	PRIMASK, r3
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	4a09      	ldr	r2, [pc, #36]	; (800aa30 <DbgTraceWrite+0xa4>)
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	69f8      	ldr	r0, [r7, #28]
 800aa0e:	f7f6 fb94 	bl	800113a <DbgOutputTraces>
 800aa12:	e004      	b.n	800aa1e <DbgTraceWrite+0x92>
 800aa14:	6a3b      	ldr	r3, [r7, #32]
 800aa16:	613b      	str	r3, [r7, #16]
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	f383 8810 	msr	PRIMASK, r3
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800aa1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3728      	adds	r7, #40	; 0x28
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	20000314 	.word	0x20000314
 800aa2c:	20000019 	.word	0x20000019
 800aa30:	0800a8d5 	.word	0x0800a8d5

0800aa34 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800aa3e:	4b0f      	ldr	r3, [pc, #60]	; (800aa7c <OTP_Read+0x48>)
 800aa40:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800aa42:	e002      	b.n	800aa4a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	3b08      	subs	r3, #8
 800aa48:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	3307      	adds	r3, #7
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	79fa      	ldrb	r2, [r7, #7]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d003      	beq.n	800aa5e <OTP_Read+0x2a>
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	4a09      	ldr	r2, [pc, #36]	; (800aa80 <OTP_Read+0x4c>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d1f2      	bne.n	800aa44 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	3307      	adds	r3, #7
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	79fa      	ldrb	r2, [r7, #7]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d001      	beq.n	800aa6e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3714      	adds	r7, #20
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr
 800aa7c:	1fff73f8 	.word	0x1fff73f8
 800aa80:	1fff7000 	.word	0x1fff7000

0800aa84 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	605a      	str	r2, [r3, #4]
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b087      	sub	sp, #28
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aaac:	f3ef 8310 	mrs	r3, PRIMASK
 800aab0:	60fb      	str	r3, [r7, #12]
  return(result);
 800aab2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aab4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800aab6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d102      	bne.n	800aac8 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800aac2:	2301      	movs	r3, #1
 800aac4:	75fb      	strb	r3, [r7, #23]
 800aac6:	e001      	b.n	800aacc <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800aac8:	2300      	movs	r3, #0
 800aaca:	75fb      	strb	r3, [r7, #23]
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800aad6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	371c      	adds	r7, #28
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b087      	sub	sp, #28
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aaee:	f3ef 8310 	mrs	r3, PRIMASK
 800aaf2:	60fb      	str	r3, [r7, #12]
  return(result);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aaf6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aaf8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	683a      	ldr	r2, [r7, #0]
 800ab0c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	605a      	str	r2, [r3, #4]
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ab20:	bf00      	nop
 800ab22:	371c      	adds	r7, #28
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b087      	sub	sp, #28
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab36:	f3ef 8310 	mrs	r3, PRIMASK
 800ab3a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ab3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab40:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	683a      	ldr	r2, [r7, #0]
 800ab54:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	683a      	ldr	r2, [r7, #0]
 800ab5c:	601a      	str	r2, [r3, #0]
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ab68:	bf00      	nop
 800ab6a:	371c      	adds	r7, #28
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b087      	sub	sp, #28
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab7c:	f3ef 8310 	mrs	r3, PRIMASK
 800ab80:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab82:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ab84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab86:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	6812      	ldr	r2, [r2, #0]
 800ab90:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	6852      	ldr	r2, [r2, #4]
 800ab9a:	605a      	str	r2, [r3, #4]
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800aba6:	bf00      	nop
 800aba8:	371c      	adds	r7, #28
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b086      	sub	sp, #24
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abbc:	f3ef 8310 	mrs	r3, PRIMASK
 800abc0:	60fb      	str	r3, [r7, #12]
  return(result);
 800abc2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800abc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800abc6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7ff ffcd 	bl	800ab74 <LST_remove_node>
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800abe4:	bf00      	nop
 800abe6:	3718      	adds	r7, #24
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]
 800abf8:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	887a      	ldrh	r2, [r7, #2]
 800ac22:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	7e3a      	ldrb	r2, [r7, #24]
 800ac28:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800ac2a:	7e3b      	ldrb	r3, [r7, #24]
 800ac2c:	f003 0302 	and.w	r3, r3, #2
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d006      	beq.n	800ac42 <CircularQueue_Init+0x56>
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	891b      	ldrh	r3, [r3, #8]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d002      	beq.n	800ac42 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800ac3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac40:	e000      	b.n	800ac44 <CircularQueue_Init+0x58>
  }
  return 0;
 800ac42:	2300      	movs	r3, #0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3714      	adds	r7, #20
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b08e      	sub	sp, #56	; 0x38
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	603b      	str	r3, [r7, #0]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800ac60:	2300      	movs	r3, #0
 800ac62:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800ac64:	2300      	movs	r3, #0
 800ac66:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800ac68:	2300      	movs	r3, #0
 800ac6a:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac70:	2300      	movs	r3, #0
 800ac72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800ac74:	2300      	movs	r3, #0
 800ac76:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800ac78:	2300      	movs	r3, #0
 800ac7a:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	891b      	ldrh	r3, [r3, #8]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d101      	bne.n	800ac88 <CircularQueue_Add+0x38>
 800ac84:	2302      	movs	r3, #2
 800ac86:	e000      	b.n	800ac8a <CircularQueue_Add+0x3a>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	695b      	ldr	r3, [r3, #20]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d02a      	beq.n	800acea <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	891b      	ldrh	r3, [r3, #8]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d123      	bne.n	800ace4 <CircularQueue_Add+0x94>
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	4413      	add	r3, r2
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	6819      	ldr	r1, [r3, #0]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	691b      	ldr	r3, [r3, #16]
 800acb2:	1c58      	adds	r0, r3, #1
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	4298      	cmp	r0, r3
 800acba:	d306      	bcc.n	800acca <CircularQueue_Add+0x7a>
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6918      	ldr	r0, [r3, #16]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	1ac3      	subs	r3, r0, r3
 800acc6:	3301      	adds	r3, #1
 800acc8:	e002      	b.n	800acd0 <CircularQueue_Add+0x80>
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	3301      	adds	r3, #1
 800acd0:	440b      	add	r3, r1
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	021b      	lsls	r3, r3, #8
 800acd8:	b29b      	uxth	r3, r3
 800acda:	4413      	add	r3, r2
 800acdc:	b29b      	uxth	r3, r3
 800acde:	3302      	adds	r3, #2
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	e001      	b.n	800ace8 <CircularQueue_Add+0x98>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	891b      	ldrh	r3, [r3, #8]
 800ace8:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	891b      	ldrh	r3, [r3, #8]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d002      	beq.n	800acf8 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	891b      	ldrh	r3, [r3, #8]
 800acf6:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	691a      	ldr	r2, [r3, #16]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d307      	bcc.n	800ad14 <CircularQueue_Add+0xc4>
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	685a      	ldr	r2, [r3, #4]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6919      	ldr	r1, [r3, #16]
 800ad0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad0e:	440b      	add	r3, r1
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	e000      	b.n	800ad16 <CircularQueue_Add+0xc6>
 800ad14:	2300      	movs	r3, #0
 800ad16:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800ad18:	88fa      	ldrh	r2, [r7, #6]
 800ad1a:	7ffb      	ldrb	r3, [r7, #31]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	461a      	mov	r2, r3
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	fb03 f302 	mul.w	r3, r3, r2
 800ad26:	69ba      	ldr	r2, [r7, #24]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d80b      	bhi.n	800ad44 <CircularQueue_Add+0xf4>
 800ad2c:	88fa      	ldrh	r2, [r7, #6]
 800ad2e:	7ffb      	ldrb	r3, [r7, #31]
 800ad30:	4413      	add	r3, r2
 800ad32:	461a      	mov	r2, r3
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad3a:	fb02 f201 	mul.w	r2, r2, r1
 800ad3e:	1a9b      	subs	r3, r3, r2
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	e000      	b.n	800ad46 <CircularQueue_Add+0xf6>
 800ad44:	2300      	movs	r3, #0
 800ad46:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800ad48:	7dfa      	ldrb	r2, [r7, #23]
 800ad4a:	7ffb      	ldrb	r3, [r7, #31]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	bf8c      	ite	hi
 800ad50:	2301      	movhi	r3, #1
 800ad52:	2300      	movls	r3, #0
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800ad58:	7fbb      	ldrb	r3, [r7, #30]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d008      	beq.n	800ad70 <CircularQueue_Add+0x120>
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	7f1b      	ldrb	r3, [r3, #28]
 800ad62:	f003 0301 	and.w	r3, r3, #1
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d002      	beq.n	800ad70 <CircularQueue_Add+0x120>
 800ad6a:	7dfb      	ldrb	r3, [r7, #23]
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	e000      	b.n	800ad72 <CircularQueue_Add+0x122>
 800ad70:	8bbb      	ldrh	r3, [r7, #28]
 800ad72:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800ad74:	7fbb      	ldrb	r3, [r7, #30]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d008      	beq.n	800ad8c <CircularQueue_Add+0x13c>
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	7f1b      	ldrb	r3, [r3, #28]
 800ad7e:	f003 0302 	and.w	r3, r3, #2
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d002      	beq.n	800ad8c <CircularQueue_Add+0x13c>
 800ad86:	7ffb      	ldrb	r3, [r7, #31]
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	e000      	b.n	800ad8e <CircularQueue_Add+0x13e>
 800ad8c:	8bbb      	ldrh	r3, [r7, #28]
 800ad8e:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800ad90:	88fb      	ldrh	r3, [r7, #6]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f000 817e 	beq.w	800b094 <CircularQueue_Add+0x444>
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	695a      	ldr	r2, [r3, #20]
 800ad9c:	88f9      	ldrh	r1, [r7, #6]
 800ad9e:	7ffb      	ldrb	r3, [r7, #31]
 800ada0:	440b      	add	r3, r1
 800ada2:	4619      	mov	r1, r3
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	fb03 f301 	mul.w	r3, r3, r1
 800adaa:	441a      	add	r2, r3
 800adac:	8bbb      	ldrh	r3, [r7, #28]
 800adae:	441a      	add	r2, r3
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	f200 816d 	bhi.w	800b094 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800adba:	2300      	movs	r3, #0
 800adbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adbe:	e14a      	b.n	800b056 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	691a      	ldr	r2, [r3, #16]
 800adc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800adc6:	441a      	add	r2, r3
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d307      	bcc.n	800ade0 <CircularQueue_Add+0x190>
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	691a      	ldr	r2, [r3, #16]
 800add4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800add6:	441a      	add	r2, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	e003      	b.n	800ade8 <CircularQueue_Add+0x198>
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	691a      	ldr	r2, [r3, #16]
 800ade4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ade6:	4413      	add	r3, r2
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	691b      	ldr	r3, [r3, #16]
 800adf0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	891b      	ldrh	r3, [r3, #8]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d130      	bne.n	800ae5c <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae00:	1c59      	adds	r1, r3, #1
 800ae02:	6339      	str	r1, [r7, #48]	; 0x30
 800ae04:	4413      	add	r3, r2
 800ae06:	88fa      	ldrh	r2, [r7, #6]
 800ae08:	b2d2      	uxtb	r2, r2
 800ae0a:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d304      	bcc.n	800ae20 <CircularQueue_Add+0x1d0>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae1c:	1ad3      	subs	r3, r2, r3
 800ae1e:	e000      	b.n	800ae22 <CircularQueue_Add+0x1d2>
 800ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae22:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800ae24:	88fb      	ldrh	r3, [r7, #6]
 800ae26:	0a1b      	lsrs	r3, r3, #8
 800ae28:	b298      	uxth	r0, r3
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae30:	1c59      	adds	r1, r3, #1
 800ae32:	6339      	str	r1, [r7, #48]	; 0x30
 800ae34:	4413      	add	r3, r2
 800ae36:	b2c2      	uxtb	r2, r0
 800ae38:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d304      	bcc.n	800ae4e <CircularQueue_Add+0x1fe>
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	e000      	b.n	800ae50 <CircularQueue_Add+0x200>
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae50:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	695b      	ldr	r3, [r3, #20]
 800ae56:	1c9a      	adds	r2, r3, #2
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800ae5c:	88fa      	ldrh	r2, [r7, #6]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6859      	ldr	r1, [r3, #4]
 800ae62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae64:	1acb      	subs	r3, r1, r3
 800ae66:	4293      	cmp	r3, r2
 800ae68:	bf28      	it	cs
 800ae6a:	4613      	movcs	r3, r2
 800ae6c:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800ae6e:	88fb      	ldrh	r3, [r7, #6]
 800ae70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d007      	beq.n	800ae86 <CircularQueue_Add+0x236>
 800ae76:	88fb      	ldrh	r3, [r7, #6]
 800ae78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d225      	bcs.n	800aeca <CircularQueue_Add+0x27a>
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	7f1b      	ldrb	r3, [r3, #28]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d121      	bne.n	800aeca <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8c:	18d0      	adds	r0, r2, r3
 800ae8e:	88fb      	ldrh	r3, [r7, #6]
 800ae90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae92:	fb02 f303 	mul.w	r3, r2, r3
 800ae96:	68ba      	ldr	r2, [r7, #8]
 800ae98:	4413      	add	r3, r2
 800ae9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	f006 feb9 	bl	8011c14 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	695a      	ldr	r2, [r3, #20]
 800aea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea8:	441a      	add	r2, r3
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800aeae:	2300      	movs	r3, #0
 800aeb0:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800aeb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb4:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800aeb6:	88fa      	ldrh	r2, [r7, #6]
 800aeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeba:	1ad3      	subs	r3, r2, r3
 800aebc:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800aebe:	7ffb      	ldrb	r3, [r7, #31]
 800aec0:	b29a      	uxth	r2, r3
 800aec2:	88fb      	ldrh	r3, [r7, #6]
 800aec4:	4413      	add	r3, r2
 800aec6:	86fb      	strh	r3, [r7, #54]	; 0x36
 800aec8:	e0a4      	b.n	800b014 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800aeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f000 80a1 	beq.w	800b014 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	7f1b      	ldrb	r3, [r3, #28]
 800aed6:	f003 0301 	and.w	r3, r3, #1
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d03a      	beq.n	800af54 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	891b      	ldrh	r3, [r3, #8]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10d      	bne.n	800af02 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeec:	3b02      	subs	r3, #2
 800aeee:	4413      	add	r3, r2
 800aef0:	22ff      	movs	r2, #255	; 0xff
 800aef2:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefa:	3b01      	subs	r3, #1
 800aefc:	4413      	add	r3, r2
 800aefe:	22ff      	movs	r2, #255	; 0xff
 800af00:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	695a      	ldr	r2, [r3, #20]
 800af06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af08:	441a      	add	r2, r3
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800af0e:	2300      	movs	r3, #0
 800af10:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800af12:	88fb      	ldrh	r3, [r7, #6]
 800af14:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800af16:	2300      	movs	r3, #0
 800af18:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	891b      	ldrh	r3, [r3, #8]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d16f      	bne.n	800b002 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af28:	1c59      	adds	r1, r3, #1
 800af2a:	6339      	str	r1, [r7, #48]	; 0x30
 800af2c:	4413      	add	r3, r2
 800af2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af30:	b2d2      	uxtb	r2, r2
 800af32:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800af34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af36:	0a18      	lsrs	r0, r3, #8
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3e:	1c59      	adds	r1, r3, #1
 800af40:	6339      	str	r1, [r7, #48]	; 0x30
 800af42:	4413      	add	r3, r2
 800af44:	b2c2      	uxtb	r2, r0
 800af46:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	695b      	ldr	r3, [r3, #20]
 800af4c:	1c9a      	adds	r2, r3, #2
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	615a      	str	r2, [r3, #20]
 800af52:	e056      	b.n	800b002 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	7f1b      	ldrb	r3, [r3, #28]
 800af58:	f003 0302 	and.w	r3, r3, #2
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d050      	beq.n	800b002 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	891b      	ldrh	r3, [r3, #8]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d14a      	bne.n	800affe <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6e:	3b02      	subs	r3, #2
 800af70:	4413      	add	r3, r2
 800af72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af74:	b2d2      	uxtb	r2, r2
 800af76:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800af78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7a:	0a19      	lsrs	r1, r3, #8
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af82:	3b01      	subs	r3, #1
 800af84:	4413      	add	r3, r2
 800af86:	b2ca      	uxtb	r2, r1
 800af88:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af90:	18d0      	adds	r0, r2, r3
 800af92:	88fb      	ldrh	r3, [r7, #6]
 800af94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af96:	fb02 f303 	mul.w	r3, r2, r3
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	4413      	add	r3, r2
 800af9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afa0:	4619      	mov	r1, r3
 800afa2:	f006 fe37 	bl	8011c14 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	695a      	ldr	r2, [r3, #20]
 800afaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afac:	441a      	add	r2, r3
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800afb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb4:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800afb6:	88fa      	ldrh	r2, [r7, #6]
 800afb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	1c5a      	adds	r2, r3, #1
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800afc8:	2300      	movs	r3, #0
 800afca:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd2:	1c59      	adds	r1, r3, #1
 800afd4:	6339      	str	r1, [r7, #48]	; 0x30
 800afd6:	4413      	add	r3, r2
 800afd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afda:	b2d2      	uxtb	r2, r2
 800afdc:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800afde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe0:	0a18      	lsrs	r0, r3, #8
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe8:	1c59      	adds	r1, r3, #1
 800afea:	6339      	str	r1, [r7, #48]	; 0x30
 800afec:	4413      	add	r3, r2
 800afee:	b2c2      	uxtb	r2, r0
 800aff0:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	695b      	ldr	r3, [r3, #20]
 800aff6:	1c9a      	adds	r2, r3, #2
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	615a      	str	r2, [r3, #20]
 800affc:	e001      	b.n	800b002 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800affe:	2300      	movs	r3, #0
 800b000:	e049      	b.n	800b096 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800b002:	7ffb      	ldrb	r3, [r7, #31]
 800b004:	b29a      	uxth	r2, r3
 800b006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b008:	b29b      	uxth	r3, r3
 800b00a:	4413      	add	r3, r2
 800b00c:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800b014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b016:	2b00      	cmp	r3, #0
 800b018:	d015      	beq.n	800b046 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b020:	18d0      	adds	r0, r2, r3
 800b022:	88fb      	ldrh	r3, [r7, #6]
 800b024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b026:	fb02 f203 	mul.w	r2, r2, r3
 800b02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02c:	4413      	add	r3, r2
 800b02e:	68ba      	ldr	r2, [r7, #8]
 800b030:	4413      	add	r3, r2
 800b032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b034:	4619      	mov	r1, r3
 800b036:	f006 fded 	bl	8011c14 <memcpy>
        q->byteCount += NbBytesToCopy;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	695a      	ldr	r2, [r3, #20]
 800b03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b040:	441a      	add	r2, r3
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	699b      	ldr	r3, [r3, #24]
 800b04a:	1c5a      	adds	r2, r3, #1
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800b050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b052:	3301      	adds	r3, #1
 800b054:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	f4ff aeb0 	bcc.w	800adc0 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6919      	ldr	r1, [r3, #16]
 800b068:	7ffb      	ldrb	r3, [r7, #31]
 800b06a:	4419      	add	r1, r3
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	4299      	cmp	r1, r3
 800b072:	d307      	bcc.n	800b084 <CircularQueue_Add+0x434>
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	6919      	ldr	r1, [r3, #16]
 800b078:	7ffb      	ldrb	r3, [r7, #31]
 800b07a:	4419      	add	r1, r3
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	1acb      	subs	r3, r1, r3
 800b082:	e003      	b.n	800b08c <CircularQueue_Add+0x43c>
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	6919      	ldr	r1, [r3, #16]
 800b088:	7ffb      	ldrb	r3, [r7, #31]
 800b08a:	440b      	add	r3, r1
 800b08c:	4413      	add	r3, r2
 800b08e:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	e000      	b.n	800b096 <CircularQueue_Add+0x446>
    return NULL;
 800b094:	2300      	movs	r3, #0
}
 800b096:	4618      	mov	r0, r3
 800b098:	3738      	adds	r7, #56	; 0x38
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800b09e:	b480      	push	{r7}
 800b0a0:	b085      	sub	sp, #20
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	891b      	ldrh	r3, [r3, #8]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d101      	bne.n	800b0bc <CircularQueue_Remove+0x1e>
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	e000      	b.n	800b0be <CircularQueue_Remove+0x20>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	695b      	ldr	r3, [r3, #20]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	f000 80d4 	beq.w	800b278 <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	891b      	ldrh	r3, [r3, #8]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d121      	bne.n	800b11c <CircularQueue_Remove+0x7e>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	b29a      	uxth	r2, r3
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6819      	ldr	r1, [r3, #0]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	1c58      	adds	r0, r3, #1
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	4298      	cmp	r0, r3
 800b0f6:	d306      	bcc.n	800b106 <CircularQueue_Remove+0x68>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	68d8      	ldr	r0, [r3, #12]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	1ac3      	subs	r3, r0, r3
 800b102:	3301      	adds	r3, #1
 800b104:	e002      	b.n	800b10c <CircularQueue_Remove+0x6e>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	3301      	adds	r3, #1
 800b10c:	440b      	add	r3, r1
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	b29b      	uxth	r3, r3
 800b112:	021b      	lsls	r3, r3, #8
 800b114:	b29b      	uxth	r3, r3
 800b116:	4413      	add	r3, r2
 800b118:	b29b      	uxth	r3, r3
 800b11a:	e001      	b.n	800b120 <CircularQueue_Remove+0x82>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	891b      	ldrh	r3, [r3, #8]
 800b120:	683a      	ldr	r2, [r7, #0]
 800b122:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	7f1b      	ldrb	r3, [r3, #28]
 800b128:	f003 0301 	and.w	r3, r3, #1
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d059      	beq.n	800b1e4 <CircularQueue_Remove+0x146>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	7f1b      	ldrb	r3, [r3, #28]
 800b134:	f003 0302 	and.w	r3, r3, #2
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d153      	bne.n	800b1e4 <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	881b      	ldrh	r3, [r3, #0]
 800b140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b144:	4293      	cmp	r3, r2
 800b146:	d103      	bne.n	800b150 <CircularQueue_Remove+0xb2>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	891b      	ldrh	r3, [r3, #8]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d012      	beq.n	800b176 <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	68da      	ldr	r2, [r3, #12]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800b158:	429a      	cmp	r2, r3
 800b15a:	d943      	bls.n	800b1e4 <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	891b      	ldrh	r3, [r3, #8]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d03f      	beq.n	800b1e4 <CircularQueue_Remove+0x146>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	685a      	ldr	r2, [r3, #4]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	1ad3      	subs	r3, r2, r3
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	8912      	ldrh	r2, [r2, #8]
 800b172:	4293      	cmp	r3, r2
 800b174:	d236      	bcs.n	800b1e4 <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	695a      	ldr	r2, [r3, #20]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	68d9      	ldr	r1, [r3, #12]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	1acb      	subs	r3, r1, r3
 800b184:	441a      	add	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	891b      	ldrh	r3, [r3, #8]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d121      	bne.n	800b1dc <CircularQueue_Remove+0x13e>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	b29a      	uxth	r2, r3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6819      	ldr	r1, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	1c58      	adds	r0, r3, #1
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	4298      	cmp	r0, r3
 800b1b6:	d306      	bcc.n	800b1c6 <CircularQueue_Remove+0x128>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	68d8      	ldr	r0, [r3, #12]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	1ac3      	subs	r3, r0, r3
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	e002      	b.n	800b1cc <CircularQueue_Remove+0x12e>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	440b      	add	r3, r1
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	021b      	lsls	r3, r3, #8
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	4413      	add	r3, r2
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	e001      	b.n	800b1e0 <CircularQueue_Remove+0x142>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	891b      	ldrh	r3, [r3, #8]
 800b1e0:	683a      	ldr	r2, [r7, #0]
 800b1e2:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	68d9      	ldr	r1, [r3, #12]
 800b1ec:	7afb      	ldrb	r3, [r7, #11]
 800b1ee:	4419      	add	r1, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	4299      	cmp	r1, r3
 800b1f6:	d307      	bcc.n	800b208 <CircularQueue_Remove+0x16a>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	68d9      	ldr	r1, [r3, #12]
 800b1fc:	7afb      	ldrb	r3, [r7, #11]
 800b1fe:	4419      	add	r1, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	1acb      	subs	r3, r1, r3
 800b206:	e003      	b.n	800b210 <CircularQueue_Remove+0x172>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	68d9      	ldr	r1, [r3, #12]
 800b20c:	7afb      	ldrb	r3, [r7, #11]
 800b20e:	440b      	add	r3, r1
 800b210:	4413      	add	r3, r2
 800b212:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	695b      	ldr	r3, [r3, #20]
 800b218:	683a      	ldr	r2, [r7, #0]
 800b21a:	8812      	ldrh	r2, [r2, #0]
 800b21c:	4611      	mov	r1, r2
 800b21e:	7afa      	ldrb	r2, [r7, #11]
 800b220:	440a      	add	r2, r1
 800b222:	1a9a      	subs	r2, r3, r2
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	695b      	ldr	r3, [r3, #20]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d01e      	beq.n	800b26e <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	683a      	ldr	r2, [r7, #0]
 800b236:	8812      	ldrh	r2, [r2, #0]
 800b238:	441a      	add	r2, r3
 800b23a:	7afb      	ldrb	r3, [r7, #11]
 800b23c:	441a      	add	r2, r3
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	429a      	cmp	r2, r3
 800b244:	d30a      	bcc.n	800b25c <CircularQueue_Remove+0x1be>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	8812      	ldrh	r2, [r2, #0]
 800b24e:	441a      	add	r2, r3
 800b250:	7afb      	ldrb	r3, [r7, #11]
 800b252:	441a      	add	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	1ad3      	subs	r3, r2, r3
 800b25a:	e006      	b.n	800b26a <CircularQueue_Remove+0x1cc>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	683a      	ldr	r2, [r7, #0]
 800b262:	8812      	ldrh	r2, [r2, #0]
 800b264:	441a      	add	r2, r3
 800b266:	7afb      	ldrb	r3, [r7, #11]
 800b268:	4413      	add	r3, r2
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	699b      	ldr	r3, [r3, #24]
 800b272:	1e5a      	subs	r2, r3, #1
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 800b278:	68fb      	ldr	r3, [r7, #12]
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3714      	adds	r7, #20
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr

0800b286 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800b286:	b480      	push	{r7}
 800b288:	b087      	sub	sp, #28
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b290:	2300      	movs	r3, #0
 800b292:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 800b294:	2300      	movs	r3, #0
 800b296:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	891b      	ldrh	r3, [r3, #8]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d101      	bne.n	800b2a4 <CircularQueue_Sense+0x1e>
 800b2a0:	2302      	movs	r3, #2
 800b2a2:	e000      	b.n	800b2a6 <CircularQueue_Sense+0x20>
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	695b      	ldr	r3, [r3, #20]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	f000 8093 	beq.w	800b3e2 <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	891b      	ldrh	r3, [r3, #8]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d121      	bne.n	800b30e <CircularQueue_Sense+0x88>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	4413      	add	r3, r2
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	b29a      	uxth	r2, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6819      	ldr	r1, [r3, #0]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	1c58      	adds	r0, r3, #1
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	4298      	cmp	r0, r3
 800b2e8:	d306      	bcc.n	800b2f8 <CircularQueue_Sense+0x72>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	68d8      	ldr	r0, [r3, #12]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	1ac3      	subs	r3, r0, r3
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	e002      	b.n	800b2fe <CircularQueue_Sense+0x78>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	440b      	add	r3, r1
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	b29b      	uxth	r3, r3
 800b304:	021b      	lsls	r3, r3, #8
 800b306:	b29b      	uxth	r3, r3
 800b308:	4413      	add	r3, r2
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	e001      	b.n	800b312 <CircularQueue_Sense+0x8c>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	891b      	ldrh	r3, [r3, #8]
 800b312:	683a      	ldr	r2, [r7, #0]
 800b314:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	7f1b      	ldrb	r3, [r3, #28]
 800b31a:	f003 0301 	and.w	r3, r3, #1
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d04a      	beq.n	800b3b8 <CircularQueue_Sense+0x132>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	7f1b      	ldrb	r3, [r3, #28]
 800b326:	f003 0302 	and.w	r3, r3, #2
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d144      	bne.n	800b3b8 <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	881b      	ldrh	r3, [r3, #0]
 800b332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b336:	4293      	cmp	r3, r2
 800b338:	d103      	bne.n	800b342 <CircularQueue_Sense+0xbc>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	891b      	ldrh	r3, [r3, #8]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d012      	beq.n	800b368 <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	68da      	ldr	r2, [r3, #12]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d934      	bls.n	800b3b8 <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	891b      	ldrh	r3, [r3, #8]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d030      	beq.n	800b3b8 <CircularQueue_Sense+0x132>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	685a      	ldr	r2, [r3, #4]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	8912      	ldrh	r2, [r2, #8]
 800b364:	4293      	cmp	r3, r2
 800b366:	d227      	bcs.n	800b3b8 <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800b368:	2300      	movs	r3, #0
 800b36a:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	891b      	ldrh	r3, [r3, #8]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d11d      	bne.n	800b3b0 <CircularQueue_Sense+0x12a>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	4413      	add	r3, r2
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	b29a      	uxth	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6819      	ldr	r1, [r3, #0]
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	1c58      	adds	r0, r3, #1
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	4298      	cmp	r0, r3
 800b38e:	d305      	bcc.n	800b39c <CircularQueue_Sense+0x116>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	6938      	ldr	r0, [r7, #16]
 800b396:	1ac3      	subs	r3, r0, r3
 800b398:	3301      	adds	r3, #1
 800b39a:	e001      	b.n	800b3a0 <CircularQueue_Sense+0x11a>
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	440b      	add	r3, r1
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	021b      	lsls	r3, r3, #8
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	4413      	add	r3, r2
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	e001      	b.n	800b3b4 <CircularQueue_Sense+0x12e>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	891b      	ldrh	r3, [r3, #8]
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	7bf9      	ldrb	r1, [r7, #15]
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	4419      	add	r1, r3
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	4299      	cmp	r1, r3
 800b3c8:	d306      	bcc.n	800b3d8 <CircularQueue_Sense+0x152>
 800b3ca:	7bf9      	ldrb	r1, [r7, #15]
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	4419      	add	r1, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	1acb      	subs	r3, r1, r3
 800b3d6:	e002      	b.n	800b3de <CircularQueue_Sense+0x158>
 800b3d8:	7bf9      	ldrb	r1, [r7, #15]
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	440b      	add	r3, r1
 800b3de:	4413      	add	r3, r2
 800b3e0:	617b      	str	r3, [r7, #20]
  }
  return x;
 800b3e2:	697b      	ldr	r3, [r7, #20]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	371c      	adds	r7, #28
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b3f0:	b480      	push	{r7}
 800b3f2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800b3f4:	bf00      	nop
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr
	...

0800b400 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b406:	f3ef 8305 	mrs	r3, IPSR
 800b40a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b40c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d10f      	bne.n	800b432 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b412:	f3ef 8310 	mrs	r3, PRIMASK
 800b416:	607b      	str	r3, [r7, #4]
  return(result);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d105      	bne.n	800b42a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b41e:	f3ef 8311 	mrs	r3, BASEPRI
 800b422:	603b      	str	r3, [r7, #0]
  return(result);
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d007      	beq.n	800b43a <osKernelInitialize+0x3a>
 800b42a:	4b0e      	ldr	r3, [pc, #56]	; (800b464 <osKernelInitialize+0x64>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b02      	cmp	r3, #2
 800b430:	d103      	bne.n	800b43a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b432:	f06f 0305 	mvn.w	r3, #5
 800b436:	60fb      	str	r3, [r7, #12]
 800b438:	e00c      	b.n	800b454 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b43a:	4b0a      	ldr	r3, [pc, #40]	; (800b464 <osKernelInitialize+0x64>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d105      	bne.n	800b44e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b442:	4b08      	ldr	r3, [pc, #32]	; (800b464 <osKernelInitialize+0x64>)
 800b444:	2201      	movs	r2, #1
 800b446:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b448:	2300      	movs	r3, #0
 800b44a:	60fb      	str	r3, [r7, #12]
 800b44c:	e002      	b.n	800b454 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b44e:	f04f 33ff 	mov.w	r3, #4294967295
 800b452:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b454:	68fb      	ldr	r3, [r7, #12]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3714      	adds	r7, #20
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	20001334 	.word	0x20001334

0800b468 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b46e:	f3ef 8305 	mrs	r3, IPSR
 800b472:	60bb      	str	r3, [r7, #8]
  return(result);
 800b474:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10f      	bne.n	800b49a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b47a:	f3ef 8310 	mrs	r3, PRIMASK
 800b47e:	607b      	str	r3, [r7, #4]
  return(result);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d105      	bne.n	800b492 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b486:	f3ef 8311 	mrs	r3, BASEPRI
 800b48a:	603b      	str	r3, [r7, #0]
  return(result);
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d007      	beq.n	800b4a2 <osKernelStart+0x3a>
 800b492:	4b0f      	ldr	r3, [pc, #60]	; (800b4d0 <osKernelStart+0x68>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2b02      	cmp	r3, #2
 800b498:	d103      	bne.n	800b4a2 <osKernelStart+0x3a>
    stat = osErrorISR;
 800b49a:	f06f 0305 	mvn.w	r3, #5
 800b49e:	60fb      	str	r3, [r7, #12]
 800b4a0:	e010      	b.n	800b4c4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b4a2:	4b0b      	ldr	r3, [pc, #44]	; (800b4d0 <osKernelStart+0x68>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d109      	bne.n	800b4be <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b4aa:	f7ff ffa1 	bl	800b3f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b4ae:	4b08      	ldr	r3, [pc, #32]	; (800b4d0 <osKernelStart+0x68>)
 800b4b0:	2202      	movs	r2, #2
 800b4b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b4b4:	f001 ffd8 	bl	800d468 <vTaskStartScheduler>
      stat = osOK;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	60fb      	str	r3, [r7, #12]
 800b4bc:	e002      	b.n	800b4c4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800b4be:	f04f 33ff 	mov.w	r3, #4294967295
 800b4c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	20001334 	.word	0x20001334

0800b4d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b090      	sub	sp, #64	; 0x40
 800b4d8:	af04      	add	r7, sp, #16
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4e4:	f3ef 8305 	mrs	r3, IPSR
 800b4e8:	61fb      	str	r3, [r7, #28]
  return(result);
 800b4ea:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f040 8090 	bne.w	800b612 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4f2:	f3ef 8310 	mrs	r3, PRIMASK
 800b4f6:	61bb      	str	r3, [r7, #24]
  return(result);
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d105      	bne.n	800b50a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b4fe:	f3ef 8311 	mrs	r3, BASEPRI
 800b502:	617b      	str	r3, [r7, #20]
  return(result);
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d003      	beq.n	800b512 <osThreadNew+0x3e>
 800b50a:	4b44      	ldr	r3, [pc, #272]	; (800b61c <osThreadNew+0x148>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	2b02      	cmp	r3, #2
 800b510:	d07f      	beq.n	800b612 <osThreadNew+0x13e>
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d07c      	beq.n	800b612 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800b518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b51c:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b51e:	2318      	movs	r3, #24
 800b520:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800b522:	2300      	movs	r3, #0
 800b524:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800b526:	f04f 33ff 	mov.w	r3, #4294967295
 800b52a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d045      	beq.n	800b5be <osThreadNew+0xea>
      if (attr->name != NULL) {
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d002      	beq.n	800b540 <osThreadNew+0x6c>
        name = attr->name;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	699b      	ldr	r3, [r3, #24]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d002      	beq.n	800b54e <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	699b      	ldr	r3, [r3, #24]
 800b54c:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b550:	2b00      	cmp	r3, #0
 800b552:	d008      	beq.n	800b566 <osThreadNew+0x92>
 800b554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b556:	2b38      	cmp	r3, #56	; 0x38
 800b558:	d805      	bhi.n	800b566 <osThreadNew+0x92>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	f003 0301 	and.w	r3, r3, #1
 800b562:	2b00      	cmp	r3, #0
 800b564:	d001      	beq.n	800b56a <osThreadNew+0x96>
        return (NULL);
 800b566:	2300      	movs	r3, #0
 800b568:	e054      	b.n	800b614 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	695b      	ldr	r3, [r3, #20]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d003      	beq.n	800b57a <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	695b      	ldr	r3, [r3, #20]
 800b576:	089b      	lsrs	r3, r3, #2
 800b578:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00e      	beq.n	800b5a0 <osThreadNew+0xcc>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	2b5b      	cmp	r3, #91	; 0x5b
 800b588:	d90a      	bls.n	800b5a0 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d006      	beq.n	800b5a0 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	695b      	ldr	r3, [r3, #20]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d002      	beq.n	800b5a0 <osThreadNew+0xcc>
        mem = 1;
 800b59a:	2301      	movs	r3, #1
 800b59c:	623b      	str	r3, [r7, #32]
 800b59e:	e010      	b.n	800b5c2 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d10c      	bne.n	800b5c2 <osThreadNew+0xee>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d108      	bne.n	800b5c2 <osThreadNew+0xee>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	691b      	ldr	r3, [r3, #16]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d104      	bne.n	800b5c2 <osThreadNew+0xee>
          mem = 0;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	623b      	str	r3, [r7, #32]
 800b5bc:	e001      	b.n	800b5c2 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b5c2:	6a3b      	ldr	r3, [r7, #32]
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d110      	bne.n	800b5ea <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b5d0:	9202      	str	r2, [sp, #8]
 800b5d2:	9301      	str	r3, [sp, #4]
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d6:	9300      	str	r3, [sp, #0]
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	f001 fd70 	bl	800d0c4 <xTaskCreateStatic>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	613b      	str	r3, [r7, #16]
 800b5e8:	e013      	b.n	800b612 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800b5ea:	6a3b      	ldr	r3, [r7, #32]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d110      	bne.n	800b612 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f2:	b29a      	uxth	r2, r3
 800b5f4:	f107 0310 	add.w	r3, r7, #16
 800b5f8:	9301      	str	r3, [sp, #4]
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	f001 fdb8 	bl	800d178 <xTaskCreate>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d001      	beq.n	800b612 <osThreadNew+0x13e>
          hTask = NULL;
 800b60e:	2300      	movs	r3, #0
 800b610:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b612:	693b      	ldr	r3, [r7, #16]
}
 800b614:	4618      	mov	r0, r3
 800b616:	3730      	adds	r7, #48	; 0x30
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	20001334 	.word	0x20001334

0800b620 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800b620:	b580      	push	{r7, lr}
 800b622:	b08a      	sub	sp, #40	; 0x28
 800b624:	af02      	add	r7, sp, #8
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d002      	beq.n	800b63a <osThreadFlagsSet+0x1a>
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	da03      	bge.n	800b642 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800b63a:	f06f 0303 	mvn.w	r3, #3
 800b63e:	60fb      	str	r3, [r7, #12]
 800b640:	e046      	b.n	800b6d0 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800b642:	f04f 33ff 	mov.w	r3, #4294967295
 800b646:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b648:	f3ef 8305 	mrs	r3, IPSR
 800b64c:	61bb      	str	r3, [r7, #24]
  return(result);
 800b64e:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10f      	bne.n	800b674 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b654:	f3ef 8310 	mrs	r3, PRIMASK
 800b658:	617b      	str	r3, [r7, #20]
  return(result);
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d105      	bne.n	800b66c <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b660:	f3ef 8311 	mrs	r3, BASEPRI
 800b664:	613b      	str	r3, [r7, #16]
  return(result);
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d024      	beq.n	800b6b6 <osThreadFlagsSet+0x96>
 800b66c:	4b1b      	ldr	r3, [pc, #108]	; (800b6dc <osThreadFlagsSet+0xbc>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2b02      	cmp	r3, #2
 800b672:	d120      	bne.n	800b6b6 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800b674:	2300      	movs	r3, #0
 800b676:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800b678:	f107 0308 	add.w	r3, r7, #8
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	2300      	movs	r3, #0
 800b680:	2201      	movs	r2, #1
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	69f8      	ldr	r0, [r7, #28]
 800b686:	f002 fe2b 	bl	800e2e0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800b68a:	f107 020c 	add.w	r2, r7, #12
 800b68e:	2300      	movs	r3, #0
 800b690:	9300      	str	r3, [sp, #0]
 800b692:	4613      	mov	r3, r2
 800b694:	2200      	movs	r2, #0
 800b696:	2100      	movs	r1, #0
 800b698:	69f8      	ldr	r0, [r7, #28]
 800b69a:	f002 fe21 	bl	800e2e0 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d015      	beq.n	800b6d0 <osThreadFlagsSet+0xb0>
 800b6a4:	4b0e      	ldr	r3, [pc, #56]	; (800b6e0 <osThreadFlagsSet+0xc0>)
 800b6a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6aa:	601a      	str	r2, [r3, #0]
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	f3bf 8f6f 	isb	sy
 800b6b4:	e00c      	b.n	800b6d0 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	6839      	ldr	r1, [r7, #0]
 800b6bc:	69f8      	ldr	r0, [r7, #28]
 800b6be:	f002 fd59 	bl	800e174 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800b6c2:	f107 030c 	add.w	r3, r7, #12
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	69f8      	ldr	r0, [r7, #28]
 800b6cc:	f002 fd52 	bl	800e174 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3720      	adds	r7, #32
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	20001334 	.word	0x20001334
 800b6e0:	e000ed04 	.word	0xe000ed04

0800b6e4 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b08e      	sub	sp, #56	; 0x38
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6f0:	f3ef 8305 	mrs	r3, IPSR
 800b6f4:	61fb      	str	r3, [r7, #28]
  return(result);
 800b6f6:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10f      	bne.n	800b71c <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6fc:	f3ef 8310 	mrs	r3, PRIMASK
 800b700:	61bb      	str	r3, [r7, #24]
  return(result);
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d105      	bne.n	800b714 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b708:	f3ef 8311 	mrs	r3, BASEPRI
 800b70c:	617b      	str	r3, [r7, #20]
  return(result);
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d007      	beq.n	800b724 <osThreadFlagsWait+0x40>
 800b714:	4b3c      	ldr	r3, [pc, #240]	; (800b808 <osThreadFlagsWait+0x124>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b02      	cmp	r3, #2
 800b71a:	d103      	bne.n	800b724 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800b71c:	f06f 0305 	mvn.w	r3, #5
 800b720:	637b      	str	r3, [r7, #52]	; 0x34
 800b722:	e06b      	b.n	800b7fc <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2b00      	cmp	r3, #0
 800b728:	da03      	bge.n	800b732 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800b72a:	f06f 0303 	mvn.w	r3, #3
 800b72e:	637b      	str	r3, [r7, #52]	; 0x34
 800b730:	e064      	b.n	800b7fc <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	f003 0302 	and.w	r3, r3, #2
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d002      	beq.n	800b742 <osThreadFlagsWait+0x5e>
      clear = 0U;
 800b73c:	2300      	movs	r3, #0
 800b73e:	633b      	str	r3, [r7, #48]	; 0x30
 800b740:	e001      	b.n	800b746 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800b746:	2300      	movs	r3, #0
 800b748:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800b74e:	f001 ffd1 	bl	800d6f4 <xTaskGetTickCount>
 800b752:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800b754:	f107 0210 	add.w	r2, r7, #16
 800b758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b75c:	2000      	movs	r0, #0
 800b75e:	f002 fcaf 	bl	800e0c0 <xTaskNotifyWait>
 800b762:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800b764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b766:	2b01      	cmp	r3, #1
 800b768:	d137      	bne.n	800b7da <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800b76a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	4013      	ands	r3, r2
 800b770:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b776:	4313      	orrs	r3, r2
 800b778:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	f003 0301 	and.w	r3, r3, #1
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00c      	beq.n	800b79e <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b788:	4013      	ands	r3, r2
 800b78a:	68fa      	ldr	r2, [r7, #12]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d032      	beq.n	800b7f6 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d10f      	bne.n	800b7b6 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800b796:	f06f 0302 	mvn.w	r3, #2
 800b79a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b79c:	e02e      	b.n	800b7fc <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7a2:	4013      	ands	r3, r2
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d128      	bne.n	800b7fa <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d103      	bne.n	800b7b6 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800b7ae:	f06f 0302 	mvn.w	r3, #2
 800b7b2:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b7b4:	e022      	b.n	800b7fc <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800b7b6:	f001 ff9d 	bl	800d6f4 <xTaskGetTickCount>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800b7c2:	6a3a      	ldr	r2, [r7, #32]
 800b7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d902      	bls.n	800b7d0 <osThreadFlagsWait+0xec>
          tout  = 0;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7ce:	e00e      	b.n	800b7ee <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800b7d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7d2:	6a3b      	ldr	r3, [r7, #32]
 800b7d4:	1ad3      	subs	r3, r2, r3
 800b7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7d8:	e009      	b.n	800b7ee <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d103      	bne.n	800b7e8 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800b7e0:	f06f 0302 	mvn.w	r3, #2
 800b7e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b7e6:	e002      	b.n	800b7ee <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800b7e8:	f06f 0301 	mvn.w	r3, #1
 800b7ec:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800b7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1af      	bne.n	800b754 <osThreadFlagsWait+0x70>
 800b7f4:	e002      	b.n	800b7fc <osThreadFlagsWait+0x118>
            break;
 800b7f6:	bf00      	nop
 800b7f8:	e000      	b.n	800b7fc <osThreadFlagsWait+0x118>
            break;
 800b7fa:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800b7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3738      	adds	r7, #56	; 0x38
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	20001334 	.word	0x20001334

0800b80c <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b086      	sub	sp, #24
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b814:	f3ef 8305 	mrs	r3, IPSR
 800b818:	613b      	str	r3, [r7, #16]
  return(result);
 800b81a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10f      	bne.n	800b840 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b820:	f3ef 8310 	mrs	r3, PRIMASK
 800b824:	60fb      	str	r3, [r7, #12]
  return(result);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d105      	bne.n	800b838 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b82c:	f3ef 8311 	mrs	r3, BASEPRI
 800b830:	60bb      	str	r3, [r7, #8]
  return(result);
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d007      	beq.n	800b848 <osDelay+0x3c>
 800b838:	4b0a      	ldr	r3, [pc, #40]	; (800b864 <osDelay+0x58>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b02      	cmp	r3, #2
 800b83e:	d103      	bne.n	800b848 <osDelay+0x3c>
    stat = osErrorISR;
 800b840:	f06f 0305 	mvn.w	r3, #5
 800b844:	617b      	str	r3, [r7, #20]
 800b846:	e007      	b.n	800b858 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b848:	2300      	movs	r3, #0
 800b84a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d002      	beq.n	800b858 <osDelay+0x4c>
      vTaskDelay(ticks);
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f001 fdd4 	bl	800d400 <vTaskDelay>
    }
  }

  return (stat);
 800b858:	697b      	ldr	r3, [r7, #20]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3718      	adds	r7, #24
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	20001334 	.word	0x20001334

0800b868 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b868:	b580      	push	{r7, lr}
 800b86a:	b08a      	sub	sp, #40	; 0x28
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b870:	2300      	movs	r3, #0
 800b872:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b874:	f3ef 8305 	mrs	r3, IPSR
 800b878:	613b      	str	r3, [r7, #16]
  return(result);
 800b87a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f040 8085 	bne.w	800b98c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b882:	f3ef 8310 	mrs	r3, PRIMASK
 800b886:	60fb      	str	r3, [r7, #12]
  return(result);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d105      	bne.n	800b89a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b88e:	f3ef 8311 	mrs	r3, BASEPRI
 800b892:	60bb      	str	r3, [r7, #8]
  return(result);
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d003      	beq.n	800b8a2 <osMutexNew+0x3a>
 800b89a:	4b3f      	ldr	r3, [pc, #252]	; (800b998 <osMutexNew+0x130>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2b02      	cmp	r3, #2
 800b8a0:	d074      	beq.n	800b98c <osMutexNew+0x124>
    if (attr != NULL) {
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d003      	beq.n	800b8b0 <osMutexNew+0x48>
      type = attr->attr_bits;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	623b      	str	r3, [r7, #32]
 800b8ae:	e001      	b.n	800b8b4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b8b4:	6a3b      	ldr	r3, [r7, #32]
 800b8b6:	f003 0301 	and.w	r3, r3, #1
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d002      	beq.n	800b8c4 <osMutexNew+0x5c>
      rmtx = 1U;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	61fb      	str	r3, [r7, #28]
 800b8c2:	e001      	b.n	800b8c8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b8c8:	6a3b      	ldr	r3, [r7, #32]
 800b8ca:	f003 0308 	and.w	r3, r3, #8
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d15c      	bne.n	800b98c <osMutexNew+0x124>
      mem = -1;
 800b8d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b8d6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d015      	beq.n	800b90a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d006      	beq.n	800b8f4 <osMutexNew+0x8c>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	2b4f      	cmp	r3, #79	; 0x4f
 800b8ec:	d902      	bls.n	800b8f4 <osMutexNew+0x8c>
          mem = 1;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	61bb      	str	r3, [r7, #24]
 800b8f2:	e00c      	b.n	800b90e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d108      	bne.n	800b90e <osMutexNew+0xa6>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d104      	bne.n	800b90e <osMutexNew+0xa6>
            mem = 0;
 800b904:	2300      	movs	r3, #0
 800b906:	61bb      	str	r3, [r7, #24]
 800b908:	e001      	b.n	800b90e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800b90a:	2300      	movs	r3, #0
 800b90c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	2b01      	cmp	r3, #1
 800b912:	d112      	bne.n	800b93a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800b914:	69fb      	ldr	r3, [r7, #28]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d007      	beq.n	800b92a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	4619      	mov	r1, r3
 800b920:	2004      	movs	r0, #4
 800b922:	f000 fc9c 	bl	800c25e <xQueueCreateMutexStatic>
 800b926:	6278      	str	r0, [r7, #36]	; 0x24
 800b928:	e016      	b.n	800b958 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	4619      	mov	r1, r3
 800b930:	2001      	movs	r0, #1
 800b932:	f000 fc94 	bl	800c25e <xQueueCreateMutexStatic>
 800b936:	6278      	str	r0, [r7, #36]	; 0x24
 800b938:	e00e      	b.n	800b958 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800b93a:	69bb      	ldr	r3, [r7, #24]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d10b      	bne.n	800b958 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d004      	beq.n	800b950 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800b946:	2004      	movs	r0, #4
 800b948:	f000 fc71 	bl	800c22e <xQueueCreateMutex>
 800b94c:	6278      	str	r0, [r7, #36]	; 0x24
 800b94e:	e003      	b.n	800b958 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800b950:	2001      	movs	r0, #1
 800b952:	f000 fc6c 	bl	800c22e <xQueueCreateMutex>
 800b956:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00c      	beq.n	800b978 <osMutexNew+0x110>
        if (attr != NULL) {
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d003      	beq.n	800b96c <osMutexNew+0x104>
          name = attr->name;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	617b      	str	r3, [r7, #20]
 800b96a:	e001      	b.n	800b970 <osMutexNew+0x108>
        } else {
          name = NULL;
 800b96c:	2300      	movs	r3, #0
 800b96e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800b970:	6979      	ldr	r1, [r7, #20]
 800b972:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b974:	f001 fb20 	bl	800cfb8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d006      	beq.n	800b98c <osMutexNew+0x124>
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d003      	beq.n	800b98c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b986:	f043 0301 	orr.w	r3, r3, #1
 800b98a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3728      	adds	r7, #40	; 0x28
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	20001334 	.word	0x20001334

0800b99c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b088      	sub	sp, #32
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f023 0301 	bic.w	r3, r3, #1
 800b9ac:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f003 0301 	and.w	r3, r3, #1
 800b9b4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9ba:	f3ef 8305 	mrs	r3, IPSR
 800b9be:	613b      	str	r3, [r7, #16]
  return(result);
 800b9c0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d10f      	bne.n	800b9e6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9c6:	f3ef 8310 	mrs	r3, PRIMASK
 800b9ca:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d105      	bne.n	800b9de <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b9d2:	f3ef 8311 	mrs	r3, BASEPRI
 800b9d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d007      	beq.n	800b9ee <osMutexAcquire+0x52>
 800b9de:	4b1d      	ldr	r3, [pc, #116]	; (800ba54 <osMutexAcquire+0xb8>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	2b02      	cmp	r3, #2
 800b9e4:	d103      	bne.n	800b9ee <osMutexAcquire+0x52>
    stat = osErrorISR;
 800b9e6:	f06f 0305 	mvn.w	r3, #5
 800b9ea:	61fb      	str	r3, [r7, #28]
 800b9ec:	e02c      	b.n	800ba48 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d103      	bne.n	800b9fc <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800b9f4:	f06f 0303 	mvn.w	r3, #3
 800b9f8:	61fb      	str	r3, [r7, #28]
 800b9fa:	e025      	b.n	800ba48 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d011      	beq.n	800ba26 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ba02:	6839      	ldr	r1, [r7, #0]
 800ba04:	69b8      	ldr	r0, [r7, #24]
 800ba06:	f000 fc78 	bl	800c2fa <xQueueTakeMutexRecursive>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d01b      	beq.n	800ba48 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d003      	beq.n	800ba1e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800ba16:	f06f 0301 	mvn.w	r3, #1
 800ba1a:	61fb      	str	r3, [r7, #28]
 800ba1c:	e014      	b.n	800ba48 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ba1e:	f06f 0302 	mvn.w	r3, #2
 800ba22:	61fb      	str	r3, [r7, #28]
 800ba24:	e010      	b.n	800ba48 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ba26:	6839      	ldr	r1, [r7, #0]
 800ba28:	69b8      	ldr	r0, [r7, #24]
 800ba2a:	f000 fff5 	bl	800ca18 <xQueueSemaphoreTake>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d009      	beq.n	800ba48 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d003      	beq.n	800ba42 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800ba3a:	f06f 0301 	mvn.w	r3, #1
 800ba3e:	61fb      	str	r3, [r7, #28]
 800ba40:	e002      	b.n	800ba48 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ba42:	f06f 0302 	mvn.w	r3, #2
 800ba46:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ba48:	69fb      	ldr	r3, [r7, #28]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3720      	adds	r7, #32
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	20001334 	.word	0x20001334

0800ba58 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b088      	sub	sp, #32
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f023 0301 	bic.w	r3, r3, #1
 800ba66:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f003 0301 	and.w	r3, r3, #1
 800ba6e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ba70:	2300      	movs	r3, #0
 800ba72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba74:	f3ef 8305 	mrs	r3, IPSR
 800ba78:	613b      	str	r3, [r7, #16]
  return(result);
 800ba7a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d10f      	bne.n	800baa0 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba80:	f3ef 8310 	mrs	r3, PRIMASK
 800ba84:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d105      	bne.n	800ba98 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ba8c:	f3ef 8311 	mrs	r3, BASEPRI
 800ba90:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d007      	beq.n	800baa8 <osMutexRelease+0x50>
 800ba98:	4b16      	ldr	r3, [pc, #88]	; (800baf4 <osMutexRelease+0x9c>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2b02      	cmp	r3, #2
 800ba9e:	d103      	bne.n	800baa8 <osMutexRelease+0x50>
    stat = osErrorISR;
 800baa0:	f06f 0305 	mvn.w	r3, #5
 800baa4:	61fb      	str	r3, [r7, #28]
 800baa6:	e01f      	b.n	800bae8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d103      	bne.n	800bab6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800baae:	f06f 0303 	mvn.w	r3, #3
 800bab2:	61fb      	str	r3, [r7, #28]
 800bab4:	e018      	b.n	800bae8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d009      	beq.n	800bad0 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800babc:	69b8      	ldr	r0, [r7, #24]
 800babe:	f000 fbe9 	bl	800c294 <xQueueGiveMutexRecursive>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d00f      	beq.n	800bae8 <osMutexRelease+0x90>
        stat = osErrorResource;
 800bac8:	f06f 0302 	mvn.w	r3, #2
 800bacc:	61fb      	str	r3, [r7, #28]
 800bace:	e00b      	b.n	800bae8 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800bad0:	2300      	movs	r3, #0
 800bad2:	2200      	movs	r2, #0
 800bad4:	2100      	movs	r1, #0
 800bad6:	69b8      	ldr	r0, [r7, #24]
 800bad8:	f000 fcaa 	bl	800c430 <xQueueGenericSend>
 800badc:	4603      	mov	r3, r0
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d002      	beq.n	800bae8 <osMutexRelease+0x90>
        stat = osErrorResource;
 800bae2:	f06f 0302 	mvn.w	r3, #2
 800bae6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800bae8:	69fb      	ldr	r3, [r7, #28]
}
 800baea:	4618      	mov	r0, r3
 800baec:	3720      	adds	r7, #32
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	20001334 	.word	0x20001334

0800baf8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b08c      	sub	sp, #48	; 0x30
 800bafc:	af02      	add	r7, sp, #8
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800bb04:	2300      	movs	r3, #0
 800bb06:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb08:	f3ef 8305 	mrs	r3, IPSR
 800bb0c:	61bb      	str	r3, [r7, #24]
  return(result);
 800bb0e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f040 8087 	bne.w	800bc24 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb16:	f3ef 8310 	mrs	r3, PRIMASK
 800bb1a:	617b      	str	r3, [r7, #20]
  return(result);
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d105      	bne.n	800bb2e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bb22:	f3ef 8311 	mrs	r3, BASEPRI
 800bb26:	613b      	str	r3, [r7, #16]
  return(result);
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d003      	beq.n	800bb36 <osSemaphoreNew+0x3e>
 800bb2e:	4b40      	ldr	r3, [pc, #256]	; (800bc30 <osSemaphoreNew+0x138>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2b02      	cmp	r3, #2
 800bb34:	d076      	beq.n	800bc24 <osSemaphoreNew+0x12c>
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d073      	beq.n	800bc24 <osSemaphoreNew+0x12c>
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d86f      	bhi.n	800bc24 <osSemaphoreNew+0x12c>
    mem = -1;
 800bb44:	f04f 33ff 	mov.w	r3, #4294967295
 800bb48:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d015      	beq.n	800bb7c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d006      	beq.n	800bb66 <osSemaphoreNew+0x6e>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	2b4f      	cmp	r3, #79	; 0x4f
 800bb5e:	d902      	bls.n	800bb66 <osSemaphoreNew+0x6e>
        mem = 1;
 800bb60:	2301      	movs	r3, #1
 800bb62:	623b      	str	r3, [r7, #32]
 800bb64:	e00c      	b.n	800bb80 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d108      	bne.n	800bb80 <osSemaphoreNew+0x88>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d104      	bne.n	800bb80 <osSemaphoreNew+0x88>
          mem = 0;
 800bb76:	2300      	movs	r3, #0
 800bb78:	623b      	str	r3, [r7, #32]
 800bb7a:	e001      	b.n	800bb80 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800bb80:	6a3b      	ldr	r3, [r7, #32]
 800bb82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb86:	d04d      	beq.n	800bc24 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d129      	bne.n	800bbe2 <osSemaphoreNew+0xea>
        if (mem == 1) {
 800bb8e:	6a3b      	ldr	r3, [r7, #32]
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d10b      	bne.n	800bbac <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	689a      	ldr	r2, [r3, #8]
 800bb98:	2303      	movs	r3, #3
 800bb9a:	9300      	str	r3, [sp, #0]
 800bb9c:	4613      	mov	r3, r2
 800bb9e:	2200      	movs	r2, #0
 800bba0:	2100      	movs	r1, #0
 800bba2:	2001      	movs	r0, #1
 800bba4:	f000 fa54 	bl	800c050 <xQueueGenericCreateStatic>
 800bba8:	6278      	str	r0, [r7, #36]	; 0x24
 800bbaa:	e005      	b.n	800bbb8 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800bbac:	2203      	movs	r2, #3
 800bbae:	2100      	movs	r1, #0
 800bbb0:	2001      	movs	r0, #1
 800bbb2:	f000 fac0 	bl	800c136 <xQueueGenericCreate>
 800bbb6:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800bbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d022      	beq.n	800bc04 <osSemaphoreNew+0x10c>
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d01f      	beq.n	800bc04 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	2100      	movs	r1, #0
 800bbca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbcc:	f000 fc30 	bl	800c430 <xQueueGenericSend>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d016      	beq.n	800bc04 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800bbd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbd8:	f001 f8a3 	bl	800cd22 <vQueueDelete>
            hSemaphore = NULL;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	627b      	str	r3, [r7, #36]	; 0x24
 800bbe0:	e010      	b.n	800bc04 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800bbe2:	6a3b      	ldr	r3, [r7, #32]
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d108      	bne.n	800bbfa <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	689b      	ldr	r3, [r3, #8]
 800bbec:	461a      	mov	r2, r3
 800bbee:	68b9      	ldr	r1, [r7, #8]
 800bbf0:	68f8      	ldr	r0, [r7, #12]
 800bbf2:	f000 fbb7 	bl	800c364 <xQueueCreateCountingSemaphoreStatic>
 800bbf6:	6278      	str	r0, [r7, #36]	; 0x24
 800bbf8:	e004      	b.n	800bc04 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800bbfa:	68b9      	ldr	r1, [r7, #8]
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	f000 fbe6 	bl	800c3ce <xQueueCreateCountingSemaphore>
 800bc02:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800bc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00c      	beq.n	800bc24 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d003      	beq.n	800bc18 <osSemaphoreNew+0x120>
          name = attr->name;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	61fb      	str	r3, [r7, #28]
 800bc16:	e001      	b.n	800bc1c <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800bc1c:	69f9      	ldr	r1, [r7, #28]
 800bc1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc20:	f001 f9ca 	bl	800cfb8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800bc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3728      	adds	r7, #40	; 0x28
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	20001334 	.word	0x20001334

0800bc34 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b088      	sub	sp, #32
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bc42:	2300      	movs	r3, #0
 800bc44:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d103      	bne.n	800bc54 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800bc4c:	f06f 0303 	mvn.w	r3, #3
 800bc50:	61fb      	str	r3, [r7, #28]
 800bc52:	e04b      	b.n	800bcec <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc54:	f3ef 8305 	mrs	r3, IPSR
 800bc58:	617b      	str	r3, [r7, #20]
  return(result);
 800bc5a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d10f      	bne.n	800bc80 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc60:	f3ef 8310 	mrs	r3, PRIMASK
 800bc64:	613b      	str	r3, [r7, #16]
  return(result);
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d105      	bne.n	800bc78 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bc6c:	f3ef 8311 	mrs	r3, BASEPRI
 800bc70:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d026      	beq.n	800bcc6 <osSemaphoreAcquire+0x92>
 800bc78:	4b1f      	ldr	r3, [pc, #124]	; (800bcf8 <osSemaphoreAcquire+0xc4>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d122      	bne.n	800bcc6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d003      	beq.n	800bc8e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800bc86:	f06f 0303 	mvn.w	r3, #3
 800bc8a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800bc8c:	e02d      	b.n	800bcea <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800bc92:	f107 0308 	add.w	r3, r7, #8
 800bc96:	461a      	mov	r2, r3
 800bc98:	2100      	movs	r1, #0
 800bc9a:	69b8      	ldr	r0, [r7, #24]
 800bc9c:	f000 ffc4 	bl	800cc28 <xQueueReceiveFromISR>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d003      	beq.n	800bcae <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800bca6:	f06f 0302 	mvn.w	r3, #2
 800bcaa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800bcac:	e01d      	b.n	800bcea <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d01a      	beq.n	800bcea <osSemaphoreAcquire+0xb6>
 800bcb4:	4b11      	ldr	r3, [pc, #68]	; (800bcfc <osSemaphoreAcquire+0xc8>)
 800bcb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcba:	601a      	str	r2, [r3, #0]
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800bcc4:	e011      	b.n	800bcea <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800bcc6:	6839      	ldr	r1, [r7, #0]
 800bcc8:	69b8      	ldr	r0, [r7, #24]
 800bcca:	f000 fea5 	bl	800ca18 <xQueueSemaphoreTake>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d00b      	beq.n	800bcec <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d003      	beq.n	800bce2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800bcda:	f06f 0301 	mvn.w	r3, #1
 800bcde:	61fb      	str	r3, [r7, #28]
 800bce0:	e004      	b.n	800bcec <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800bce2:	f06f 0302 	mvn.w	r3, #2
 800bce6:	61fb      	str	r3, [r7, #28]
 800bce8:	e000      	b.n	800bcec <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800bcea:	bf00      	nop
      }
    }
  }

  return (stat);
 800bcec:	69fb      	ldr	r3, [r7, #28]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3720      	adds	r7, #32
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	20001334 	.word	0x20001334
 800bcfc:	e000ed04 	.word	0xe000ed04

0800bd00 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b088      	sub	sp, #32
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d103      	bne.n	800bd1e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800bd16:	f06f 0303 	mvn.w	r3, #3
 800bd1a:	61fb      	str	r3, [r7, #28]
 800bd1c:	e03e      	b.n	800bd9c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd1e:	f3ef 8305 	mrs	r3, IPSR
 800bd22:	617b      	str	r3, [r7, #20]
  return(result);
 800bd24:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d10f      	bne.n	800bd4a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd2a:	f3ef 8310 	mrs	r3, PRIMASK
 800bd2e:	613b      	str	r3, [r7, #16]
  return(result);
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d105      	bne.n	800bd42 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bd36:	f3ef 8311 	mrs	r3, BASEPRI
 800bd3a:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d01e      	beq.n	800bd80 <osSemaphoreRelease+0x80>
 800bd42:	4b19      	ldr	r3, [pc, #100]	; (800bda8 <osSemaphoreRelease+0xa8>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b02      	cmp	r3, #2
 800bd48:	d11a      	bne.n	800bd80 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bd4e:	f107 0308 	add.w	r3, r7, #8
 800bd52:	4619      	mov	r1, r3
 800bd54:	69b8      	ldr	r0, [r7, #24]
 800bd56:	f000 fcf9 	bl	800c74c <xQueueGiveFromISR>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d003      	beq.n	800bd68 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800bd60:	f06f 0302 	mvn.w	r3, #2
 800bd64:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bd66:	e018      	b.n	800bd9a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d015      	beq.n	800bd9a <osSemaphoreRelease+0x9a>
 800bd6e:	4b0f      	ldr	r3, [pc, #60]	; (800bdac <osSemaphoreRelease+0xac>)
 800bd70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd74:	601a      	str	r2, [r3, #0]
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bd7e:	e00c      	b.n	800bd9a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bd80:	2300      	movs	r3, #0
 800bd82:	2200      	movs	r2, #0
 800bd84:	2100      	movs	r1, #0
 800bd86:	69b8      	ldr	r0, [r7, #24]
 800bd88:	f000 fb52 	bl	800c430 <xQueueGenericSend>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d004      	beq.n	800bd9c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800bd92:	f06f 0302 	mvn.w	r3, #2
 800bd96:	61fb      	str	r3, [r7, #28]
 800bd98:	e000      	b.n	800bd9c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bd9a:	bf00      	nop
    }
  }

  return (stat);
 800bd9c:	69fb      	ldr	r3, [r7, #28]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3720      	adds	r7, #32
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	20001334 	.word	0x20001334
 800bdac:	e000ed04 	.word	0xe000ed04

0800bdb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	4a07      	ldr	r2, [pc, #28]	; (800bddc <vApplicationGetIdleTaskMemory+0x2c>)
 800bdc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	4a06      	ldr	r2, [pc, #24]	; (800bde0 <vApplicationGetIdleTaskMemory+0x30>)
 800bdc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bdce:	601a      	str	r2, [r3, #0]
}
 800bdd0:	bf00      	nop
 800bdd2:	3714      	adds	r7, #20
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr
 800bddc:	20001338 	.word	0x20001338
 800bde0:	20001394 	.word	0x20001394

0800bde4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bde4:	b480      	push	{r7}
 800bde6:	b085      	sub	sp, #20
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	4a07      	ldr	r2, [pc, #28]	; (800be10 <vApplicationGetTimerTaskMemory+0x2c>)
 800bdf4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	4a06      	ldr	r2, [pc, #24]	; (800be14 <vApplicationGetTimerTaskMemory+0x30>)
 800bdfa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800be02:	601a      	str	r2, [r3, #0]
}
 800be04:	bf00      	nop
 800be06:	3714      	adds	r7, #20
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr
 800be10:	20001794 	.word	0x20001794
 800be14:	200017f0 	.word	0x200017f0

0800be18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f103 0208 	add.w	r2, r3, #8
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f04f 32ff 	mov.w	r2, #4294967295
 800be30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f103 0208 	add.w	r2, r3, #8
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f103 0208 	add.w	r2, r3, #8
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800be4c:	bf00      	nop
 800be4e:	370c      	adds	r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr

0800be58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800be58:	b480      	push	{r7}
 800be5a:	b083      	sub	sp, #12
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2200      	movs	r2, #0
 800be64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800be66:	bf00      	nop
 800be68:	370c      	adds	r7, #12
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr

0800be72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be72:	b480      	push	{r7}
 800be74:	b085      	sub	sp, #20
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
 800be7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	689a      	ldr	r2, [r3, #8]
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	683a      	ldr	r2, [r7, #0]
 800be96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	683a      	ldr	r2, [r7, #0]
 800be9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	1c5a      	adds	r2, r3, #1
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	601a      	str	r2, [r3, #0]
}
 800beae:	bf00      	nop
 800beb0:	3714      	adds	r7, #20
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr

0800beba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800beba:	b480      	push	{r7}
 800bebc:	b085      	sub	sp, #20
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
 800bec2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed0:	d103      	bne.n	800beda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	691b      	ldr	r3, [r3, #16]
 800bed6:	60fb      	str	r3, [r7, #12]
 800bed8:	e00c      	b.n	800bef4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	3308      	adds	r3, #8
 800bede:	60fb      	str	r3, [r7, #12]
 800bee0:	e002      	b.n	800bee8 <vListInsert+0x2e>
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	60fb      	str	r3, [r7, #12]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	685b      	ldr	r3, [r3, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	68ba      	ldr	r2, [r7, #8]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d2f6      	bcs.n	800bee2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	685a      	ldr	r2, [r3, #4]
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	683a      	ldr	r2, [r7, #0]
 800bf02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	683a      	ldr	r2, [r7, #0]
 800bf0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	1c5a      	adds	r2, r3, #1
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	601a      	str	r2, [r3, #0]
}
 800bf20:	bf00      	nop
 800bf22:	3714      	adds	r7, #20
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr

0800bf2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b085      	sub	sp, #20
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	691b      	ldr	r3, [r3, #16]
 800bf38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	6892      	ldr	r2, [r2, #8]
 800bf42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	6852      	ldr	r2, [r2, #4]
 800bf4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d103      	bne.n	800bf60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	689a      	ldr	r2, [r3, #8]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	1e5a      	subs	r2, r3, #1
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3714      	adds	r7, #20
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr

0800bf80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d109      	bne.n	800bfa8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bf94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf98:	f383 8811 	msr	BASEPRI, r3
 800bf9c:	f3bf 8f6f 	isb	sy
 800bfa0:	f3bf 8f4f 	dsb	sy
 800bfa4:	60bb      	str	r3, [r7, #8]
 800bfa6:	e7fe      	b.n	800bfa6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800bfa8:	f002 ff30 	bl	800ee0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfb4:	68f9      	ldr	r1, [r7, #12]
 800bfb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bfb8:	fb01 f303 	mul.w	r3, r1, r3
 800bfbc:	441a      	add	r2, r3
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681a      	ldr	r2, [r3, #0]
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd8:	3b01      	subs	r3, #1
 800bfda:	68f9      	ldr	r1, [r7, #12]
 800bfdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bfde:	fb01 f303 	mul.w	r3, r1, r3
 800bfe2:	441a      	add	r2, r3
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	22ff      	movs	r2, #255	; 0xff
 800bfec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	22ff      	movs	r2, #255	; 0xff
 800bff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d114      	bne.n	800c028 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d01a      	beq.n	800c03c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	3310      	adds	r3, #16
 800c00a:	4618      	mov	r0, r3
 800c00c:	f001 fce4 	bl	800d9d8 <xTaskRemoveFromEventList>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d012      	beq.n	800c03c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c016:	4b0d      	ldr	r3, [pc, #52]	; (800c04c <xQueueGenericReset+0xcc>)
 800c018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c01c:	601a      	str	r2, [r3, #0]
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	f3bf 8f6f 	isb	sy
 800c026:	e009      	b.n	800c03c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	3310      	adds	r3, #16
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7ff fef3 	bl	800be18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	3324      	adds	r3, #36	; 0x24
 800c036:	4618      	mov	r0, r3
 800c038:	f7ff feee 	bl	800be18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c03c:	f002 ff14 	bl	800ee68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c040:	2301      	movs	r3, #1
}
 800c042:	4618      	mov	r0, r3
 800c044:	3710      	adds	r7, #16
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	e000ed04 	.word	0xe000ed04

0800c050 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c050:	b580      	push	{r7, lr}
 800c052:	b08e      	sub	sp, #56	; 0x38
 800c054:	af02      	add	r7, sp, #8
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	607a      	str	r2, [r7, #4]
 800c05c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d109      	bne.n	800c078 <xQueueGenericCreateStatic+0x28>
 800c064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c068:	f383 8811 	msr	BASEPRI, r3
 800c06c:	f3bf 8f6f 	isb	sy
 800c070:	f3bf 8f4f 	dsb	sy
 800c074:	62bb      	str	r3, [r7, #40]	; 0x28
 800c076:	e7fe      	b.n	800c076 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d109      	bne.n	800c092 <xQueueGenericCreateStatic+0x42>
 800c07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	627b      	str	r3, [r7, #36]	; 0x24
 800c090:	e7fe      	b.n	800c090 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d002      	beq.n	800c09e <xQueueGenericCreateStatic+0x4e>
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d001      	beq.n	800c0a2 <xQueueGenericCreateStatic+0x52>
 800c09e:	2301      	movs	r3, #1
 800c0a0:	e000      	b.n	800c0a4 <xQueueGenericCreateStatic+0x54>
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d109      	bne.n	800c0bc <xQueueGenericCreateStatic+0x6c>
 800c0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ac:	f383 8811 	msr	BASEPRI, r3
 800c0b0:	f3bf 8f6f 	isb	sy
 800c0b4:	f3bf 8f4f 	dsb	sy
 800c0b8:	623b      	str	r3, [r7, #32]
 800c0ba:	e7fe      	b.n	800c0ba <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d102      	bne.n	800c0c8 <xQueueGenericCreateStatic+0x78>
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d101      	bne.n	800c0cc <xQueueGenericCreateStatic+0x7c>
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e000      	b.n	800c0ce <xQueueGenericCreateStatic+0x7e>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d109      	bne.n	800c0e6 <xQueueGenericCreateStatic+0x96>
 800c0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d6:	f383 8811 	msr	BASEPRI, r3
 800c0da:	f3bf 8f6f 	isb	sy
 800c0de:	f3bf 8f4f 	dsb	sy
 800c0e2:	61fb      	str	r3, [r7, #28]
 800c0e4:	e7fe      	b.n	800c0e4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c0e6:	2350      	movs	r3, #80	; 0x50
 800c0e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	2b50      	cmp	r3, #80	; 0x50
 800c0ee:	d009      	beq.n	800c104 <xQueueGenericCreateStatic+0xb4>
 800c0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	61bb      	str	r3, [r7, #24]
 800c102:	e7fe      	b.n	800c102 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c104:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d00d      	beq.n	800c12c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c112:	2201      	movs	r2, #1
 800c114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c118:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	4613      	mov	r3, r2
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	68b9      	ldr	r1, [r7, #8]
 800c126:	68f8      	ldr	r0, [r7, #12]
 800c128:	f000 f844 	bl	800c1b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c12e:	4618      	mov	r0, r3
 800c130:	3730      	adds	r7, #48	; 0x30
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}

0800c136 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c136:	b580      	push	{r7, lr}
 800c138:	b08a      	sub	sp, #40	; 0x28
 800c13a:	af02      	add	r7, sp, #8
 800c13c:	60f8      	str	r0, [r7, #12]
 800c13e:	60b9      	str	r1, [r7, #8]
 800c140:	4613      	mov	r3, r2
 800c142:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d109      	bne.n	800c15e <xQueueGenericCreate+0x28>
 800c14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14e:	f383 8811 	msr	BASEPRI, r3
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	613b      	str	r3, [r7, #16]
 800c15c:	e7fe      	b.n	800c15c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d102      	bne.n	800c16a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c164:	2300      	movs	r3, #0
 800c166:	61fb      	str	r3, [r7, #28]
 800c168:	e004      	b.n	800c174 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	fb02 f303 	mul.w	r3, r2, r3
 800c172:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	3350      	adds	r3, #80	; 0x50
 800c178:	4618      	mov	r0, r3
 800c17a:	f002 ff61 	bl	800f040 <pvPortMalloc>
 800c17e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d011      	beq.n	800c1aa <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	3350      	adds	r3, #80	; 0x50
 800c18e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	2200      	movs	r2, #0
 800c194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c198:	79fa      	ldrb	r2, [r7, #7]
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	9300      	str	r3, [sp, #0]
 800c19e:	4613      	mov	r3, r2
 800c1a0:	697a      	ldr	r2, [r7, #20]
 800c1a2:	68b9      	ldr	r1, [r7, #8]
 800c1a4:	68f8      	ldr	r0, [r7, #12]
 800c1a6:	f000 f805 	bl	800c1b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c1aa:	69bb      	ldr	r3, [r7, #24]
	}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3720      	adds	r7, #32
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
 800c1c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d103      	bne.n	800c1d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	69ba      	ldr	r2, [r7, #24]
 800c1cc:	601a      	str	r2, [r3, #0]
 800c1ce:	e002      	b.n	800c1d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	68fa      	ldr	r2, [r7, #12]
 800c1da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	68ba      	ldr	r2, [r7, #8]
 800c1e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c1e2:	2101      	movs	r1, #1
 800c1e4:	69b8      	ldr	r0, [r7, #24]
 800c1e6:	f7ff fecb 	bl	800bf80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	78fa      	ldrb	r2, [r7, #3]
 800c1ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c1f2:	bf00      	nop
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b082      	sub	sp, #8
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d00e      	beq.n	800c226 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2200      	movs	r2, #0
 800c212:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c21a:	2300      	movs	r3, #0
 800c21c:	2200      	movs	r2, #0
 800c21e:	2100      	movs	r1, #0
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 f905 	bl	800c430 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c226:	bf00      	nop
 800c228:	3708      	adds	r7, #8
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c22e:	b580      	push	{r7, lr}
 800c230:	b086      	sub	sp, #24
 800c232:	af00      	add	r7, sp, #0
 800c234:	4603      	mov	r3, r0
 800c236:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c238:	2301      	movs	r3, #1
 800c23a:	617b      	str	r3, [r7, #20]
 800c23c:	2300      	movs	r3, #0
 800c23e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c240:	79fb      	ldrb	r3, [r7, #7]
 800c242:	461a      	mov	r2, r3
 800c244:	6939      	ldr	r1, [r7, #16]
 800c246:	6978      	ldr	r0, [r7, #20]
 800c248:	f7ff ff75 	bl	800c136 <xQueueGenericCreate>
 800c24c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c24e:	68f8      	ldr	r0, [r7, #12]
 800c250:	f7ff ffd3 	bl	800c1fa <prvInitialiseMutex>

		return xNewQueue;
 800c254:	68fb      	ldr	r3, [r7, #12]
	}
 800c256:	4618      	mov	r0, r3
 800c258:	3718      	adds	r7, #24
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}

0800c25e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c25e:	b580      	push	{r7, lr}
 800c260:	b088      	sub	sp, #32
 800c262:	af02      	add	r7, sp, #8
 800c264:	4603      	mov	r3, r0
 800c266:	6039      	str	r1, [r7, #0]
 800c268:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c26a:	2301      	movs	r3, #1
 800c26c:	617b      	str	r3, [r7, #20]
 800c26e:	2300      	movs	r3, #0
 800c270:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c272:	79fb      	ldrb	r3, [r7, #7]
 800c274:	9300      	str	r3, [sp, #0]
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	2200      	movs	r2, #0
 800c27a:	6939      	ldr	r1, [r7, #16]
 800c27c:	6978      	ldr	r0, [r7, #20]
 800c27e:	f7ff fee7 	bl	800c050 <xQueueGenericCreateStatic>
 800c282:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f7ff ffb8 	bl	800c1fa <prvInitialiseMutex>

		return xNewQueue;
 800c28a:	68fb      	ldr	r3, [r7, #12]
	}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3718      	adds	r7, #24
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c294:	b590      	push	{r4, r7, lr}
 800c296:	b087      	sub	sp, #28
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d109      	bne.n	800c2ba <xQueueGiveMutexRecursive+0x26>
 800c2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2aa:	f383 8811 	msr	BASEPRI, r3
 800c2ae:	f3bf 8f6f 	isb	sy
 800c2b2:	f3bf 8f4f 	dsb	sy
 800c2b6:	60fb      	str	r3, [r7, #12]
 800c2b8:	e7fe      	b.n	800c2b8 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	689c      	ldr	r4, [r3, #8]
 800c2be:	f001 fd69 	bl	800dd94 <xTaskGetCurrentTaskHandle>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	429c      	cmp	r4, r3
 800c2c6:	d111      	bne.n	800c2ec <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	68db      	ldr	r3, [r3, #12]
 800c2cc:	1e5a      	subs	r2, r3, #1
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	68db      	ldr	r3, [r3, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d105      	bne.n	800c2e6 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c2da:	2300      	movs	r3, #0
 800c2dc:	2200      	movs	r2, #0
 800c2de:	2100      	movs	r1, #0
 800c2e0:	6938      	ldr	r0, [r7, #16]
 800c2e2:	f000 f8a5 	bl	800c430 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	617b      	str	r3, [r7, #20]
 800c2ea:	e001      	b.n	800c2f0 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c2f0:	697b      	ldr	r3, [r7, #20]
	}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	371c      	adds	r7, #28
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd90      	pop	{r4, r7, pc}

0800c2fa <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c2fa:	b590      	push	{r4, r7, lr}
 800c2fc:	b087      	sub	sp, #28
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
 800c302:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d109      	bne.n	800c322 <xQueueTakeMutexRecursive+0x28>
 800c30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c312:	f383 8811 	msr	BASEPRI, r3
 800c316:	f3bf 8f6f 	isb	sy
 800c31a:	f3bf 8f4f 	dsb	sy
 800c31e:	60fb      	str	r3, [r7, #12]
 800c320:	e7fe      	b.n	800c320 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	689c      	ldr	r4, [r3, #8]
 800c326:	f001 fd35 	bl	800dd94 <xTaskGetCurrentTaskHandle>
 800c32a:	4603      	mov	r3, r0
 800c32c:	429c      	cmp	r4, r3
 800c32e:	d107      	bne.n	800c340 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	1c5a      	adds	r2, r3, #1
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c33a:	2301      	movs	r3, #1
 800c33c:	617b      	str	r3, [r7, #20]
 800c33e:	e00c      	b.n	800c35a <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c340:	6839      	ldr	r1, [r7, #0]
 800c342:	6938      	ldr	r0, [r7, #16]
 800c344:	f000 fb68 	bl	800ca18 <xQueueSemaphoreTake>
 800c348:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d004      	beq.n	800c35a <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	68db      	ldr	r3, [r3, #12]
 800c354:	1c5a      	adds	r2, r3, #1
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c35a:	697b      	ldr	r3, [r7, #20]
	}
 800c35c:	4618      	mov	r0, r3
 800c35e:	371c      	adds	r7, #28
 800c360:	46bd      	mov	sp, r7
 800c362:	bd90      	pop	{r4, r7, pc}

0800c364 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c364:	b580      	push	{r7, lr}
 800c366:	b08a      	sub	sp, #40	; 0x28
 800c368:	af02      	add	r7, sp, #8
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d109      	bne.n	800c38a <xQueueCreateCountingSemaphoreStatic+0x26>
 800c376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37a:	f383 8811 	msr	BASEPRI, r3
 800c37e:	f3bf 8f6f 	isb	sy
 800c382:	f3bf 8f4f 	dsb	sy
 800c386:	61bb      	str	r3, [r7, #24]
 800c388:	e7fe      	b.n	800c388 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c38a:	68ba      	ldr	r2, [r7, #8]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d909      	bls.n	800c3a6 <xQueueCreateCountingSemaphoreStatic+0x42>
 800c392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c396:	f383 8811 	msr	BASEPRI, r3
 800c39a:	f3bf 8f6f 	isb	sy
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	617b      	str	r3, [r7, #20]
 800c3a4:	e7fe      	b.n	800c3a4 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c3a6:	2302      	movs	r3, #2
 800c3a8:	9300      	str	r3, [sp, #0]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	68f8      	ldr	r0, [r7, #12]
 800c3b2:	f7ff fe4d 	bl	800c050 <xQueueGenericCreateStatic>
 800c3b6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c3b8:	69fb      	ldr	r3, [r7, #28]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d002      	beq.n	800c3c4 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	68ba      	ldr	r2, [r7, #8]
 800c3c2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c3c4:	69fb      	ldr	r3, [r7, #28]
	}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3720      	adds	r7, #32
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b086      	sub	sp, #24
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
 800c3d6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d109      	bne.n	800c3f2 <xQueueCreateCountingSemaphore+0x24>
 800c3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	613b      	str	r3, [r7, #16]
 800c3f0:	e7fe      	b.n	800c3f0 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c3f2:	683a      	ldr	r2, [r7, #0]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d909      	bls.n	800c40e <xQueueCreateCountingSemaphore+0x40>
 800c3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3fe:	f383 8811 	msr	BASEPRI, r3
 800c402:	f3bf 8f6f 	isb	sy
 800c406:	f3bf 8f4f 	dsb	sy
 800c40a:	60fb      	str	r3, [r7, #12]
 800c40c:	e7fe      	b.n	800c40c <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c40e:	2202      	movs	r2, #2
 800c410:	2100      	movs	r1, #0
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f7ff fe8f 	bl	800c136 <xQueueGenericCreate>
 800c418:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d002      	beq.n	800c426 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c426:	697b      	ldr	r3, [r7, #20]
	}
 800c428:	4618      	mov	r0, r3
 800c42a:	3718      	adds	r7, #24
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b08e      	sub	sp, #56	; 0x38
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	607a      	str	r2, [r7, #4]
 800c43c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c43e:	2300      	movs	r3, #0
 800c440:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d109      	bne.n	800c460 <xQueueGenericSend+0x30>
 800c44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c450:	f383 8811 	msr	BASEPRI, r3
 800c454:	f3bf 8f6f 	isb	sy
 800c458:	f3bf 8f4f 	dsb	sy
 800c45c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c45e:	e7fe      	b.n	800c45e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d103      	bne.n	800c46e <xQueueGenericSend+0x3e>
 800c466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d101      	bne.n	800c472 <xQueueGenericSend+0x42>
 800c46e:	2301      	movs	r3, #1
 800c470:	e000      	b.n	800c474 <xQueueGenericSend+0x44>
 800c472:	2300      	movs	r3, #0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d109      	bne.n	800c48c <xQueueGenericSend+0x5c>
 800c478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47c:	f383 8811 	msr	BASEPRI, r3
 800c480:	f3bf 8f6f 	isb	sy
 800c484:	f3bf 8f4f 	dsb	sy
 800c488:	627b      	str	r3, [r7, #36]	; 0x24
 800c48a:	e7fe      	b.n	800c48a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	2b02      	cmp	r3, #2
 800c490:	d103      	bne.n	800c49a <xQueueGenericSend+0x6a>
 800c492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c496:	2b01      	cmp	r3, #1
 800c498:	d101      	bne.n	800c49e <xQueueGenericSend+0x6e>
 800c49a:	2301      	movs	r3, #1
 800c49c:	e000      	b.n	800c4a0 <xQueueGenericSend+0x70>
 800c49e:	2300      	movs	r3, #0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d109      	bne.n	800c4b8 <xQueueGenericSend+0x88>
 800c4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a8:	f383 8811 	msr	BASEPRI, r3
 800c4ac:	f3bf 8f6f 	isb	sy
 800c4b0:	f3bf 8f4f 	dsb	sy
 800c4b4:	623b      	str	r3, [r7, #32]
 800c4b6:	e7fe      	b.n	800c4b6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4b8:	f001 fc7c 	bl	800ddb4 <xTaskGetSchedulerState>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d102      	bne.n	800c4c8 <xQueueGenericSend+0x98>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d101      	bne.n	800c4cc <xQueueGenericSend+0x9c>
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	e000      	b.n	800c4ce <xQueueGenericSend+0x9e>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d109      	bne.n	800c4e6 <xQueueGenericSend+0xb6>
 800c4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d6:	f383 8811 	msr	BASEPRI, r3
 800c4da:	f3bf 8f6f 	isb	sy
 800c4de:	f3bf 8f4f 	dsb	sy
 800c4e2:	61fb      	str	r3, [r7, #28]
 800c4e4:	e7fe      	b.n	800c4e4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c4e6:	f002 fc91 	bl	800ee0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d302      	bcc.n	800c4fc <xQueueGenericSend+0xcc>
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	2b02      	cmp	r3, #2
 800c4fa:	d129      	bne.n	800c550 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c4fc:	683a      	ldr	r2, [r7, #0]
 800c4fe:	68b9      	ldr	r1, [r7, #8]
 800c500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c502:	f000 fc48 	bl	800cd96 <prvCopyDataToQueue>
 800c506:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d010      	beq.n	800c532 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c512:	3324      	adds	r3, #36	; 0x24
 800c514:	4618      	mov	r0, r3
 800c516:	f001 fa5f 	bl	800d9d8 <xTaskRemoveFromEventList>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d013      	beq.n	800c548 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c520:	4b3f      	ldr	r3, [pc, #252]	; (800c620 <xQueueGenericSend+0x1f0>)
 800c522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c526:	601a      	str	r2, [r3, #0]
 800c528:	f3bf 8f4f 	dsb	sy
 800c52c:	f3bf 8f6f 	isb	sy
 800c530:	e00a      	b.n	800c548 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c534:	2b00      	cmp	r3, #0
 800c536:	d007      	beq.n	800c548 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c538:	4b39      	ldr	r3, [pc, #228]	; (800c620 <xQueueGenericSend+0x1f0>)
 800c53a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c53e:	601a      	str	r2, [r3, #0]
 800c540:	f3bf 8f4f 	dsb	sy
 800c544:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c548:	f002 fc8e 	bl	800ee68 <vPortExitCritical>
				return pdPASS;
 800c54c:	2301      	movs	r3, #1
 800c54e:	e063      	b.n	800c618 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d103      	bne.n	800c55e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c556:	f002 fc87 	bl	800ee68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c55a:	2300      	movs	r3, #0
 800c55c:	e05c      	b.n	800c618 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c560:	2b00      	cmp	r3, #0
 800c562:	d106      	bne.n	800c572 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c564:	f107 0314 	add.w	r3, r7, #20
 800c568:	4618      	mov	r0, r3
 800c56a:	f001 fa99 	bl	800daa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c56e:	2301      	movs	r3, #1
 800c570:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c572:	f002 fc79 	bl	800ee68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c576:	f000 ffdb 	bl	800d530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c57a:	f002 fc47 	bl	800ee0c <vPortEnterCritical>
 800c57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c580:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c584:	b25b      	sxtb	r3, r3
 800c586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c58a:	d103      	bne.n	800c594 <xQueueGenericSend+0x164>
 800c58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58e:	2200      	movs	r2, #0
 800c590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c596:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c59a:	b25b      	sxtb	r3, r3
 800c59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5a0:	d103      	bne.n	800c5aa <xQueueGenericSend+0x17a>
 800c5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5aa:	f002 fc5d 	bl	800ee68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c5ae:	1d3a      	adds	r2, r7, #4
 800c5b0:	f107 0314 	add.w	r3, r7, #20
 800c5b4:	4611      	mov	r1, r2
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f001 fa88 	bl	800dacc <xTaskCheckForTimeOut>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d124      	bne.n	800c60c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c5c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5c4:	f000 fcdf 	bl	800cf86 <prvIsQueueFull>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d018      	beq.n	800c600 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d0:	3310      	adds	r3, #16
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	4611      	mov	r1, r2
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f001 f9b0 	bl	800d93c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c5dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5de:	f000 fc6a 	bl	800ceb6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c5e2:	f000 ffeb 	bl	800d5bc <xTaskResumeAll>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	f47f af7c 	bne.w	800c4e6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800c5ee:	4b0c      	ldr	r3, [pc, #48]	; (800c620 <xQueueGenericSend+0x1f0>)
 800c5f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5f4:	601a      	str	r2, [r3, #0]
 800c5f6:	f3bf 8f4f 	dsb	sy
 800c5fa:	f3bf 8f6f 	isb	sy
 800c5fe:	e772      	b.n	800c4e6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c602:	f000 fc58 	bl	800ceb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c606:	f000 ffd9 	bl	800d5bc <xTaskResumeAll>
 800c60a:	e76c      	b.n	800c4e6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c60c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c60e:	f000 fc52 	bl	800ceb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c612:	f000 ffd3 	bl	800d5bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c616:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3738      	adds	r7, #56	; 0x38
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}
 800c620:	e000ed04 	.word	0xe000ed04

0800c624 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b08e      	sub	sp, #56	; 0x38
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
 800c630:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d109      	bne.n	800c650 <xQueueGenericSendFromISR+0x2c>
 800c63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c640:	f383 8811 	msr	BASEPRI, r3
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	627b      	str	r3, [r7, #36]	; 0x24
 800c64e:	e7fe      	b.n	800c64e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d103      	bne.n	800c65e <xQueueGenericSendFromISR+0x3a>
 800c656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d101      	bne.n	800c662 <xQueueGenericSendFromISR+0x3e>
 800c65e:	2301      	movs	r3, #1
 800c660:	e000      	b.n	800c664 <xQueueGenericSendFromISR+0x40>
 800c662:	2300      	movs	r3, #0
 800c664:	2b00      	cmp	r3, #0
 800c666:	d109      	bne.n	800c67c <xQueueGenericSendFromISR+0x58>
 800c668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66c:	f383 8811 	msr	BASEPRI, r3
 800c670:	f3bf 8f6f 	isb	sy
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	623b      	str	r3, [r7, #32]
 800c67a:	e7fe      	b.n	800c67a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d103      	bne.n	800c68a <xQueueGenericSendFromISR+0x66>
 800c682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c686:	2b01      	cmp	r3, #1
 800c688:	d101      	bne.n	800c68e <xQueueGenericSendFromISR+0x6a>
 800c68a:	2301      	movs	r3, #1
 800c68c:	e000      	b.n	800c690 <xQueueGenericSendFromISR+0x6c>
 800c68e:	2300      	movs	r3, #0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d109      	bne.n	800c6a8 <xQueueGenericSendFromISR+0x84>
 800c694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c698:	f383 8811 	msr	BASEPRI, r3
 800c69c:	f3bf 8f6f 	isb	sy
 800c6a0:	f3bf 8f4f 	dsb	sy
 800c6a4:	61fb      	str	r3, [r7, #28]
 800c6a6:	e7fe      	b.n	800c6a6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c6a8:	f002 fc8c 	bl	800efc4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c6ac:	f3ef 8211 	mrs	r2, BASEPRI
 800c6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	61ba      	str	r2, [r7, #24]
 800c6c2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c6c4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c6c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d302      	bcc.n	800c6da <xQueueGenericSendFromISR+0xb6>
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d12c      	bne.n	800c734 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c6e4:	683a      	ldr	r2, [r7, #0]
 800c6e6:	68b9      	ldr	r1, [r7, #8]
 800c6e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6ea:	f000 fb54 	bl	800cd96 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c6ee:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f6:	d112      	bne.n	800c71e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d016      	beq.n	800c72e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c702:	3324      	adds	r3, #36	; 0x24
 800c704:	4618      	mov	r0, r3
 800c706:	f001 f967 	bl	800d9d8 <xTaskRemoveFromEventList>
 800c70a:	4603      	mov	r3, r0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d00e      	beq.n	800c72e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d00b      	beq.n	800c72e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2201      	movs	r2, #1
 800c71a:	601a      	str	r2, [r3, #0]
 800c71c:	e007      	b.n	800c72e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c71e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c722:	3301      	adds	r3, #1
 800c724:	b2db      	uxtb	r3, r3
 800c726:	b25a      	sxtb	r2, r3
 800c728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c72e:	2301      	movs	r3, #1
 800c730:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c732:	e001      	b.n	800c738 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c734:	2300      	movs	r3, #0
 800c736:	637b      	str	r3, [r7, #52]	; 0x34
 800c738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c744:	4618      	mov	r0, r3
 800c746:	3738      	adds	r7, #56	; 0x38
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b08e      	sub	sp, #56	; 0x38
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d109      	bne.n	800c774 <xQueueGiveFromISR+0x28>
	__asm volatile
 800c760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c764:	f383 8811 	msr	BASEPRI, r3
 800c768:	f3bf 8f6f 	isb	sy
 800c76c:	f3bf 8f4f 	dsb	sy
 800c770:	623b      	str	r3, [r7, #32]
 800c772:	e7fe      	b.n	800c772 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d009      	beq.n	800c790 <xQueueGiveFromISR+0x44>
 800c77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c780:	f383 8811 	msr	BASEPRI, r3
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	f3bf 8f4f 	dsb	sy
 800c78c:	61fb      	str	r3, [r7, #28]
 800c78e:	e7fe      	b.n	800c78e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d103      	bne.n	800c7a0 <xQueueGiveFromISR+0x54>
 800c798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d101      	bne.n	800c7a4 <xQueueGiveFromISR+0x58>
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	e000      	b.n	800c7a6 <xQueueGiveFromISR+0x5a>
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d109      	bne.n	800c7be <xQueueGiveFromISR+0x72>
 800c7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ae:	f383 8811 	msr	BASEPRI, r3
 800c7b2:	f3bf 8f6f 	isb	sy
 800c7b6:	f3bf 8f4f 	dsb	sy
 800c7ba:	61bb      	str	r3, [r7, #24]
 800c7bc:	e7fe      	b.n	800c7bc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7be:	f002 fc01 	bl	800efc4 <vPortValidateInterruptPriority>
	__asm volatile
 800c7c2:	f3ef 8211 	mrs	r2, BASEPRI
 800c7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	617a      	str	r2, [r7, #20]
 800c7d8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c7da:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d22b      	bcs.n	800c846 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fa:	1c5a      	adds	r2, r3, #1
 800c7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c800:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c808:	d112      	bne.n	800c830 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d016      	beq.n	800c840 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c814:	3324      	adds	r3, #36	; 0x24
 800c816:	4618      	mov	r0, r3
 800c818:	f001 f8de 	bl	800d9d8 <xTaskRemoveFromEventList>
 800c81c:	4603      	mov	r3, r0
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d00e      	beq.n	800c840 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00b      	beq.n	800c840 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	2201      	movs	r2, #1
 800c82c:	601a      	str	r2, [r3, #0]
 800c82e:	e007      	b.n	800c840 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c834:	3301      	adds	r3, #1
 800c836:	b2db      	uxtb	r3, r3
 800c838:	b25a      	sxtb	r2, r3
 800c83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c840:	2301      	movs	r3, #1
 800c842:	637b      	str	r3, [r7, #52]	; 0x34
 800c844:	e001      	b.n	800c84a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c846:	2300      	movs	r3, #0
 800c848:	637b      	str	r3, [r7, #52]	; 0x34
 800c84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c856:	4618      	mov	r0, r3
 800c858:	3738      	adds	r7, #56	; 0x38
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
	...

0800c860 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b08c      	sub	sp, #48	; 0x30
 800c864:	af00      	add	r7, sp, #0
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c86c:	2300      	movs	r3, #0
 800c86e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c876:	2b00      	cmp	r3, #0
 800c878:	d109      	bne.n	800c88e <xQueueReceive+0x2e>
	__asm volatile
 800c87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	623b      	str	r3, [r7, #32]
 800c88c:	e7fe      	b.n	800c88c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d103      	bne.n	800c89c <xQueueReceive+0x3c>
 800c894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d101      	bne.n	800c8a0 <xQueueReceive+0x40>
 800c89c:	2301      	movs	r3, #1
 800c89e:	e000      	b.n	800c8a2 <xQueueReceive+0x42>
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d109      	bne.n	800c8ba <xQueueReceive+0x5a>
 800c8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8aa:	f383 8811 	msr	BASEPRI, r3
 800c8ae:	f3bf 8f6f 	isb	sy
 800c8b2:	f3bf 8f4f 	dsb	sy
 800c8b6:	61fb      	str	r3, [r7, #28]
 800c8b8:	e7fe      	b.n	800c8b8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c8ba:	f001 fa7b 	bl	800ddb4 <xTaskGetSchedulerState>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d102      	bne.n	800c8ca <xQueueReceive+0x6a>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d101      	bne.n	800c8ce <xQueueReceive+0x6e>
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	e000      	b.n	800c8d0 <xQueueReceive+0x70>
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d109      	bne.n	800c8e8 <xQueueReceive+0x88>
 800c8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d8:	f383 8811 	msr	BASEPRI, r3
 800c8dc:	f3bf 8f6f 	isb	sy
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	61bb      	str	r3, [r7, #24]
 800c8e6:	e7fe      	b.n	800c8e6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c8e8:	f002 fa90 	bl	800ee0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d01f      	beq.n	800c938 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c8f8:	68b9      	ldr	r1, [r7, #8]
 800c8fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8fc:	f000 fab5 	bl	800ce6a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c902:	1e5a      	subs	r2, r3, #1
 800c904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c906:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90a:	691b      	ldr	r3, [r3, #16]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d00f      	beq.n	800c930 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c912:	3310      	adds	r3, #16
 800c914:	4618      	mov	r0, r3
 800c916:	f001 f85f 	bl	800d9d8 <xTaskRemoveFromEventList>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d007      	beq.n	800c930 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c920:	4b3c      	ldr	r3, [pc, #240]	; (800ca14 <xQueueReceive+0x1b4>)
 800c922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c926:	601a      	str	r2, [r3, #0]
 800c928:	f3bf 8f4f 	dsb	sy
 800c92c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c930:	f002 fa9a 	bl	800ee68 <vPortExitCritical>
				return pdPASS;
 800c934:	2301      	movs	r3, #1
 800c936:	e069      	b.n	800ca0c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d103      	bne.n	800c946 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c93e:	f002 fa93 	bl	800ee68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c942:	2300      	movs	r3, #0
 800c944:	e062      	b.n	800ca0c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d106      	bne.n	800c95a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c94c:	f107 0310 	add.w	r3, r7, #16
 800c950:	4618      	mov	r0, r3
 800c952:	f001 f8a5 	bl	800daa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c956:	2301      	movs	r3, #1
 800c958:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c95a:	f002 fa85 	bl	800ee68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c95e:	f000 fde7 	bl	800d530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c962:	f002 fa53 	bl	800ee0c <vPortEnterCritical>
 800c966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c968:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c96c:	b25b      	sxtb	r3, r3
 800c96e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c972:	d103      	bne.n	800c97c <xQueueReceive+0x11c>
 800c974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c976:	2200      	movs	r2, #0
 800c978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c982:	b25b      	sxtb	r3, r3
 800c984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c988:	d103      	bne.n	800c992 <xQueueReceive+0x132>
 800c98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98c:	2200      	movs	r2, #0
 800c98e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c992:	f002 fa69 	bl	800ee68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c996:	1d3a      	adds	r2, r7, #4
 800c998:	f107 0310 	add.w	r3, r7, #16
 800c99c:	4611      	mov	r1, r2
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f001 f894 	bl	800dacc <xTaskCheckForTimeOut>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d123      	bne.n	800c9f2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9ac:	f000 fad5 	bl	800cf5a <prvIsQueueEmpty>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d017      	beq.n	800c9e6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b8:	3324      	adds	r3, #36	; 0x24
 800c9ba:	687a      	ldr	r2, [r7, #4]
 800c9bc:	4611      	mov	r1, r2
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f000 ffbc 	bl	800d93c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c9c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9c6:	f000 fa76 	bl	800ceb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c9ca:	f000 fdf7 	bl	800d5bc <xTaskResumeAll>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d189      	bne.n	800c8e8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800c9d4:	4b0f      	ldr	r3, [pc, #60]	; (800ca14 <xQueueReceive+0x1b4>)
 800c9d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9da:	601a      	str	r2, [r3, #0]
 800c9dc:	f3bf 8f4f 	dsb	sy
 800c9e0:	f3bf 8f6f 	isb	sy
 800c9e4:	e780      	b.n	800c8e8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c9e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9e8:	f000 fa65 	bl	800ceb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c9ec:	f000 fde6 	bl	800d5bc <xTaskResumeAll>
 800c9f0:	e77a      	b.n	800c8e8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c9f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9f4:	f000 fa5f 	bl	800ceb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c9f8:	f000 fde0 	bl	800d5bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9fe:	f000 faac 	bl	800cf5a <prvIsQueueEmpty>
 800ca02:	4603      	mov	r3, r0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f43f af6f 	beq.w	800c8e8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ca0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3730      	adds	r7, #48	; 0x30
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	e000ed04 	.word	0xe000ed04

0800ca18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b08e      	sub	sp, #56	; 0x38
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ca22:	2300      	movs	r3, #0
 800ca24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ca2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d109      	bne.n	800ca48 <xQueueSemaphoreTake+0x30>
 800ca34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca38:	f383 8811 	msr	BASEPRI, r3
 800ca3c:	f3bf 8f6f 	isb	sy
 800ca40:	f3bf 8f4f 	dsb	sy
 800ca44:	623b      	str	r3, [r7, #32]
 800ca46:	e7fe      	b.n	800ca46 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ca48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d009      	beq.n	800ca64 <xQueueSemaphoreTake+0x4c>
 800ca50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca54:	f383 8811 	msr	BASEPRI, r3
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	61fb      	str	r3, [r7, #28]
 800ca62:	e7fe      	b.n	800ca62 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca64:	f001 f9a6 	bl	800ddb4 <xTaskGetSchedulerState>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d102      	bne.n	800ca74 <xQueueSemaphoreTake+0x5c>
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d101      	bne.n	800ca78 <xQueueSemaphoreTake+0x60>
 800ca74:	2301      	movs	r3, #1
 800ca76:	e000      	b.n	800ca7a <xQueueSemaphoreTake+0x62>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d109      	bne.n	800ca92 <xQueueSemaphoreTake+0x7a>
 800ca7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	61bb      	str	r3, [r7, #24]
 800ca90:	e7fe      	b.n	800ca90 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca92:	f002 f9bb 	bl	800ee0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca9a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ca9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d024      	beq.n	800caec <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800caa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa4:	1e5a      	subs	r2, r3, #1
 800caa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800caaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d104      	bne.n	800cabc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cab2:	f001 faf1 	bl	800e098 <pvTaskIncrementMutexHeldCount>
 800cab6:	4602      	mov	r2, r0
 800cab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cabe:	691b      	ldr	r3, [r3, #16]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d00f      	beq.n	800cae4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac6:	3310      	adds	r3, #16
 800cac8:	4618      	mov	r0, r3
 800caca:	f000 ff85 	bl	800d9d8 <xTaskRemoveFromEventList>
 800cace:	4603      	mov	r3, r0
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d007      	beq.n	800cae4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cad4:	4b53      	ldr	r3, [pc, #332]	; (800cc24 <xQueueSemaphoreTake+0x20c>)
 800cad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cada:	601a      	str	r2, [r3, #0]
 800cadc:	f3bf 8f4f 	dsb	sy
 800cae0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cae4:	f002 f9c0 	bl	800ee68 <vPortExitCritical>
				return pdPASS;
 800cae8:	2301      	movs	r3, #1
 800caea:	e096      	b.n	800cc1a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d110      	bne.n	800cb14 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800caf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d009      	beq.n	800cb0c <xQueueSemaphoreTake+0xf4>
 800caf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafc:	f383 8811 	msr	BASEPRI, r3
 800cb00:	f3bf 8f6f 	isb	sy
 800cb04:	f3bf 8f4f 	dsb	sy
 800cb08:	617b      	str	r3, [r7, #20]
 800cb0a:	e7fe      	b.n	800cb0a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cb0c:	f002 f9ac 	bl	800ee68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cb10:	2300      	movs	r3, #0
 800cb12:	e082      	b.n	800cc1a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d106      	bne.n	800cb28 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb1a:	f107 030c 	add.w	r3, r7, #12
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f000 ffbe 	bl	800daa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb24:	2301      	movs	r3, #1
 800cb26:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb28:	f002 f99e 	bl	800ee68 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb2c:	f000 fd00 	bl	800d530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb30:	f002 f96c 	bl	800ee0c <vPortEnterCritical>
 800cb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb3a:	b25b      	sxtb	r3, r3
 800cb3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb40:	d103      	bne.n	800cb4a <xQueueSemaphoreTake+0x132>
 800cb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb44:	2200      	movs	r2, #0
 800cb46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb50:	b25b      	sxtb	r3, r3
 800cb52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb56:	d103      	bne.n	800cb60 <xQueueSemaphoreTake+0x148>
 800cb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb60:	f002 f982 	bl	800ee68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb64:	463a      	mov	r2, r7
 800cb66:	f107 030c 	add.w	r3, r7, #12
 800cb6a:	4611      	mov	r1, r2
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f000 ffad 	bl	800dacc <xTaskCheckForTimeOut>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d132      	bne.n	800cbde <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb7a:	f000 f9ee 	bl	800cf5a <prvIsQueueEmpty>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d026      	beq.n	800cbd2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d109      	bne.n	800cba0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800cb8c:	f002 f93e 	bl	800ee0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb92:	689b      	ldr	r3, [r3, #8]
 800cb94:	4618      	mov	r0, r3
 800cb96:	f001 f92b 	bl	800ddf0 <xTaskPriorityInherit>
 800cb9a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cb9c:	f002 f964 	bl	800ee68 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba2:	3324      	adds	r3, #36	; 0x24
 800cba4:	683a      	ldr	r2, [r7, #0]
 800cba6:	4611      	mov	r1, r2
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f000 fec7 	bl	800d93c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cbae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbb0:	f000 f981 	bl	800ceb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cbb4:	f000 fd02 	bl	800d5bc <xTaskResumeAll>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f47f af69 	bne.w	800ca92 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800cbc0:	4b18      	ldr	r3, [pc, #96]	; (800cc24 <xQueueSemaphoreTake+0x20c>)
 800cbc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbc6:	601a      	str	r2, [r3, #0]
 800cbc8:	f3bf 8f4f 	dsb	sy
 800cbcc:	f3bf 8f6f 	isb	sy
 800cbd0:	e75f      	b.n	800ca92 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cbd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbd4:	f000 f96f 	bl	800ceb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cbd8:	f000 fcf0 	bl	800d5bc <xTaskResumeAll>
 800cbdc:	e759      	b.n	800ca92 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cbde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbe0:	f000 f969 	bl	800ceb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cbe4:	f000 fcea 	bl	800d5bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbe8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbea:	f000 f9b6 	bl	800cf5a <prvIsQueueEmpty>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	f43f af4e 	beq.w	800ca92 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d00d      	beq.n	800cc18 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800cbfc:	f002 f906 	bl	800ee0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cc00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc02:	f000 f8b0 	bl	800cd66 <prvGetDisinheritPriorityAfterTimeout>
 800cc06:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0a:	689b      	ldr	r3, [r3, #8]
 800cc0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f001 f9c2 	bl	800df98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cc14:	f002 f928 	bl	800ee68 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cc18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3738      	adds	r7, #56	; 0x38
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	e000ed04 	.word	0xe000ed04

0800cc28 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b08e      	sub	sp, #56	; 0x38
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d109      	bne.n	800cc52 <xQueueReceiveFromISR+0x2a>
 800cc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc42:	f383 8811 	msr	BASEPRI, r3
 800cc46:	f3bf 8f6f 	isb	sy
 800cc4a:	f3bf 8f4f 	dsb	sy
 800cc4e:	623b      	str	r3, [r7, #32]
 800cc50:	e7fe      	b.n	800cc50 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d103      	bne.n	800cc60 <xQueueReceiveFromISR+0x38>
 800cc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d101      	bne.n	800cc64 <xQueueReceiveFromISR+0x3c>
 800cc60:	2301      	movs	r3, #1
 800cc62:	e000      	b.n	800cc66 <xQueueReceiveFromISR+0x3e>
 800cc64:	2300      	movs	r3, #0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d109      	bne.n	800cc7e <xQueueReceiveFromISR+0x56>
 800cc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6e:	f383 8811 	msr	BASEPRI, r3
 800cc72:	f3bf 8f6f 	isb	sy
 800cc76:	f3bf 8f4f 	dsb	sy
 800cc7a:	61fb      	str	r3, [r7, #28]
 800cc7c:	e7fe      	b.n	800cc7c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc7e:	f002 f9a1 	bl	800efc4 <vPortValidateInterruptPriority>
	__asm volatile
 800cc82:	f3ef 8211 	mrs	r2, BASEPRI
 800cc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8a:	f383 8811 	msr	BASEPRI, r3
 800cc8e:	f3bf 8f6f 	isb	sy
 800cc92:	f3bf 8f4f 	dsb	sy
 800cc96:	61ba      	str	r2, [r7, #24]
 800cc98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cc9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cca2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d02f      	beq.n	800cd0a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ccb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ccb4:	68b9      	ldr	r1, [r7, #8]
 800ccb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccb8:	f000 f8d7 	bl	800ce6a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ccbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccbe:	1e5a      	subs	r2, r3, #1
 800ccc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ccc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ccc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cccc:	d112      	bne.n	800ccf4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd0:	691b      	ldr	r3, [r3, #16]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d016      	beq.n	800cd04 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd8:	3310      	adds	r3, #16
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f000 fe7c 	bl	800d9d8 <xTaskRemoveFromEventList>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d00e      	beq.n	800cd04 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d00b      	beq.n	800cd04 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2201      	movs	r2, #1
 800ccf0:	601a      	str	r2, [r3, #0]
 800ccf2:	e007      	b.n	800cd04 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ccf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	b25a      	sxtb	r2, r3
 800ccfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cd04:	2301      	movs	r3, #1
 800cd06:	637b      	str	r3, [r7, #52]	; 0x34
 800cd08:	e001      	b.n	800cd0e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	637b      	str	r3, [r7, #52]	; 0x34
 800cd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd10:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cd18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3738      	adds	r7, #56	; 0x38
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b084      	sub	sp, #16
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d109      	bne.n	800cd48 <vQueueDelete+0x26>
	__asm volatile
 800cd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd38:	f383 8811 	msr	BASEPRI, r3
 800cd3c:	f3bf 8f6f 	isb	sy
 800cd40:	f3bf 8f4f 	dsb	sy
 800cd44:	60bb      	str	r3, [r7, #8]
 800cd46:	e7fe      	b.n	800cd46 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f000 f95d 	bl	800d008 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d102      	bne.n	800cd5e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800cd58:	68f8      	ldr	r0, [r7, #12]
 800cd5a:	f002 fa33 	bl	800f1c4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cd5e:	bf00      	nop
 800cd60:	3710      	adds	r7, #16
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}

0800cd66 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cd66:	b480      	push	{r7}
 800cd68:	b085      	sub	sp, #20
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d006      	beq.n	800cd84 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800cd80:	60fb      	str	r3, [r7, #12]
 800cd82:	e001      	b.n	800cd88 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cd84:	2300      	movs	r3, #0
 800cd86:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cd88:	68fb      	ldr	r3, [r7, #12]
	}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3714      	adds	r7, #20
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr

0800cd96 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b086      	sub	sp, #24
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	60f8      	str	r0, [r7, #12]
 800cd9e:	60b9      	str	r1, [r7, #8]
 800cda0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cda2:	2300      	movs	r3, #0
 800cda4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdaa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d10d      	bne.n	800cdd0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d14d      	bne.n	800ce58 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	689b      	ldr	r3, [r3, #8]
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f001 f87d 	bl	800dec0 <xTaskPriorityDisinherit>
 800cdc6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	609a      	str	r2, [r3, #8]
 800cdce:	e043      	b.n	800ce58 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d119      	bne.n	800ce0a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	6858      	ldr	r0, [r3, #4]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdde:	461a      	mov	r2, r3
 800cde0:	68b9      	ldr	r1, [r7, #8]
 800cde2:	f004 ff17 	bl	8011c14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	685a      	ldr	r2, [r3, #4]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdee:	441a      	add	r2, r3
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	685a      	ldr	r2, [r3, #4]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	689b      	ldr	r3, [r3, #8]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d32b      	bcc.n	800ce58 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	681a      	ldr	r2, [r3, #0]
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	605a      	str	r2, [r3, #4]
 800ce08:	e026      	b.n	800ce58 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	68d8      	ldr	r0, [r3, #12]
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce12:	461a      	mov	r2, r3
 800ce14:	68b9      	ldr	r1, [r7, #8]
 800ce16:	f004 fefd 	bl	8011c14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	68da      	ldr	r2, [r3, #12]
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce22:	425b      	negs	r3, r3
 800ce24:	441a      	add	r2, r3
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	68da      	ldr	r2, [r3, #12]
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d207      	bcs.n	800ce46 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	689a      	ldr	r2, [r3, #8]
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce3e:	425b      	negs	r3, r3
 800ce40:	441a      	add	r2, r3
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2b02      	cmp	r3, #2
 800ce4a:	d105      	bne.n	800ce58 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d002      	beq.n	800ce58 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	3b01      	subs	r3, #1
 800ce56:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	1c5a      	adds	r2, r3, #1
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ce60:	697b      	ldr	r3, [r7, #20]
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3718      	adds	r7, #24
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}

0800ce6a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b082      	sub	sp, #8
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
 800ce72:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d018      	beq.n	800ceae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	68da      	ldr	r2, [r3, #12]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce84:	441a      	add	r2, r3
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	68da      	ldr	r2, [r3, #12]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d303      	bcc.n	800ce9e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681a      	ldr	r2, [r3, #0]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	68d9      	ldr	r1, [r3, #12]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cea6:	461a      	mov	r2, r3
 800cea8:	6838      	ldr	r0, [r7, #0]
 800ceaa:	f004 feb3 	bl	8011c14 <memcpy>
	}
}
 800ceae:	bf00      	nop
 800ceb0:	3708      	adds	r7, #8
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ceb6:	b580      	push	{r7, lr}
 800ceb8:	b084      	sub	sp, #16
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cebe:	f001 ffa5 	bl	800ee0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cec8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ceca:	e011      	b.n	800cef0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d012      	beq.n	800cefa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	3324      	adds	r3, #36	; 0x24
 800ced8:	4618      	mov	r0, r3
 800ceda:	f000 fd7d 	bl	800d9d8 <xTaskRemoveFromEventList>
 800cede:	4603      	mov	r3, r0
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d001      	beq.n	800cee8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cee4:	f000 fe52 	bl	800db8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cee8:	7bfb      	ldrb	r3, [r7, #15]
 800ceea:	3b01      	subs	r3, #1
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	dce9      	bgt.n	800cecc <prvUnlockQueue+0x16>
 800cef8:	e000      	b.n	800cefc <prvUnlockQueue+0x46>
					break;
 800cefa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	22ff      	movs	r2, #255	; 0xff
 800cf00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cf04:	f001 ffb0 	bl	800ee68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cf08:	f001 ff80 	bl	800ee0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf12:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf14:	e011      	b.n	800cf3a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	691b      	ldr	r3, [r3, #16]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d012      	beq.n	800cf44 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	3310      	adds	r3, #16
 800cf22:	4618      	mov	r0, r3
 800cf24:	f000 fd58 	bl	800d9d8 <xTaskRemoveFromEventList>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d001      	beq.n	800cf32 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cf2e:	f000 fe2d 	bl	800db8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cf32:	7bbb      	ldrb	r3, [r7, #14]
 800cf34:	3b01      	subs	r3, #1
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	dce9      	bgt.n	800cf16 <prvUnlockQueue+0x60>
 800cf42:	e000      	b.n	800cf46 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cf44:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	22ff      	movs	r2, #255	; 0xff
 800cf4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cf4e:	f001 ff8b 	bl	800ee68 <vPortExitCritical>
}
 800cf52:	bf00      	nop
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b084      	sub	sp, #16
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cf62:	f001 ff53 	bl	800ee0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d102      	bne.n	800cf74 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	60fb      	str	r3, [r7, #12]
 800cf72:	e001      	b.n	800cf78 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cf74:	2300      	movs	r3, #0
 800cf76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cf78:	f001 ff76 	bl	800ee68 <vPortExitCritical>

	return xReturn;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}

0800cf86 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cf86:	b580      	push	{r7, lr}
 800cf88:	b084      	sub	sp, #16
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cf8e:	f001 ff3d 	bl	800ee0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d102      	bne.n	800cfa4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	60fb      	str	r3, [r7, #12]
 800cfa2:	e001      	b.n	800cfa8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cfa8:	f001 ff5e 	bl	800ee68 <vPortExitCritical>

	return xReturn;
 800cfac:	68fb      	ldr	r3, [r7, #12]
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3710      	adds	r7, #16
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
	...

0800cfb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	60fb      	str	r3, [r7, #12]
 800cfc6:	e014      	b.n	800cff2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cfc8:	4a0e      	ldr	r2, [pc, #56]	; (800d004 <vQueueAddToRegistry+0x4c>)
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d10b      	bne.n	800cfec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cfd4:	490b      	ldr	r1, [pc, #44]	; (800d004 <vQueueAddToRegistry+0x4c>)
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	683a      	ldr	r2, [r7, #0]
 800cfda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cfde:	4a09      	ldr	r2, [pc, #36]	; (800d004 <vQueueAddToRegistry+0x4c>)
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	00db      	lsls	r3, r3, #3
 800cfe4:	4413      	add	r3, r2
 800cfe6:	687a      	ldr	r2, [r7, #4]
 800cfe8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cfea:	e005      	b.n	800cff8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	3301      	adds	r3, #1
 800cff0:	60fb      	str	r3, [r7, #12]
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2b07      	cmp	r3, #7
 800cff6:	d9e7      	bls.n	800cfc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cff8:	bf00      	nop
 800cffa:	3714      	adds	r7, #20
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr
 800d004:	20006f44 	.word	0x20006f44

0800d008 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d008:	b480      	push	{r7}
 800d00a:	b085      	sub	sp, #20
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d010:	2300      	movs	r3, #0
 800d012:	60fb      	str	r3, [r7, #12]
 800d014:	e016      	b.n	800d044 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d016:	4a10      	ldr	r2, [pc, #64]	; (800d058 <vQueueUnregisterQueue+0x50>)
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	00db      	lsls	r3, r3, #3
 800d01c:	4413      	add	r3, r2
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	429a      	cmp	r2, r3
 800d024:	d10b      	bne.n	800d03e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d026:	4a0c      	ldr	r2, [pc, #48]	; (800d058 <vQueueUnregisterQueue+0x50>)
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2100      	movs	r1, #0
 800d02c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d030:	4a09      	ldr	r2, [pc, #36]	; (800d058 <vQueueUnregisterQueue+0x50>)
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	00db      	lsls	r3, r3, #3
 800d036:	4413      	add	r3, r2
 800d038:	2200      	movs	r2, #0
 800d03a:	605a      	str	r2, [r3, #4]
				break;
 800d03c:	e005      	b.n	800d04a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	3301      	adds	r3, #1
 800d042:	60fb      	str	r3, [r7, #12]
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2b07      	cmp	r3, #7
 800d048:	d9e5      	bls.n	800d016 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d04a:	bf00      	nop
 800d04c:	3714      	adds	r7, #20
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	20006f44 	.word	0x20006f44

0800d05c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b086      	sub	sp, #24
 800d060:	af00      	add	r7, sp, #0
 800d062:	60f8      	str	r0, [r7, #12]
 800d064:	60b9      	str	r1, [r7, #8]
 800d066:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d06c:	f001 fece 	bl	800ee0c <vPortEnterCritical>
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d076:	b25b      	sxtb	r3, r3
 800d078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d07c:	d103      	bne.n	800d086 <vQueueWaitForMessageRestricted+0x2a>
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	2200      	movs	r2, #0
 800d082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d08c:	b25b      	sxtb	r3, r3
 800d08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d092:	d103      	bne.n	800d09c <vQueueWaitForMessageRestricted+0x40>
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	2200      	movs	r2, #0
 800d098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d09c:	f001 fee4 	bl	800ee68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d106      	bne.n	800d0b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	3324      	adds	r3, #36	; 0x24
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	68b9      	ldr	r1, [r7, #8]
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f000 fc67 	bl	800d984 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d0b6:	6978      	ldr	r0, [r7, #20]
 800d0b8:	f7ff fefd 	bl	800ceb6 <prvUnlockQueue>
	}
 800d0bc:	bf00      	nop
 800d0be:	3718      	adds	r7, #24
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b08e      	sub	sp, #56	; 0x38
 800d0c8:	af04      	add	r7, sp, #16
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	607a      	str	r2, [r7, #4]
 800d0d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d0d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d109      	bne.n	800d0ec <xTaskCreateStatic+0x28>
 800d0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0dc:	f383 8811 	msr	BASEPRI, r3
 800d0e0:	f3bf 8f6f 	isb	sy
 800d0e4:	f3bf 8f4f 	dsb	sy
 800d0e8:	623b      	str	r3, [r7, #32]
 800d0ea:	e7fe      	b.n	800d0ea <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800d0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d109      	bne.n	800d106 <xTaskCreateStatic+0x42>
 800d0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f6:	f383 8811 	msr	BASEPRI, r3
 800d0fa:	f3bf 8f6f 	isb	sy
 800d0fe:	f3bf 8f4f 	dsb	sy
 800d102:	61fb      	str	r3, [r7, #28]
 800d104:	e7fe      	b.n	800d104 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d106:	235c      	movs	r3, #92	; 0x5c
 800d108:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	2b5c      	cmp	r3, #92	; 0x5c
 800d10e:	d009      	beq.n	800d124 <xTaskCreateStatic+0x60>
 800d110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d114:	f383 8811 	msr	BASEPRI, r3
 800d118:	f3bf 8f6f 	isb	sy
 800d11c:	f3bf 8f4f 	dsb	sy
 800d120:	61bb      	str	r3, [r7, #24]
 800d122:	e7fe      	b.n	800d122 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d124:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d01e      	beq.n	800d16a <xTaskCreateStatic+0xa6>
 800d12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d01b      	beq.n	800d16a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d134:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d138:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d13a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13e:	2202      	movs	r2, #2
 800d140:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d144:	2300      	movs	r3, #0
 800d146:	9303      	str	r3, [sp, #12]
 800d148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14a:	9302      	str	r3, [sp, #8]
 800d14c:	f107 0314 	add.w	r3, r7, #20
 800d150:	9301      	str	r3, [sp, #4]
 800d152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d154:	9300      	str	r3, [sp, #0]
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	68b9      	ldr	r1, [r7, #8]
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f000 f850 	bl	800d202 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d162:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d164:	f000 f8dc 	bl	800d320 <prvAddNewTaskToReadyList>
 800d168:	e001      	b.n	800d16e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800d16a:	2300      	movs	r3, #0
 800d16c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d16e:	697b      	ldr	r3, [r7, #20]
	}
 800d170:	4618      	mov	r0, r3
 800d172:	3728      	adds	r7, #40	; 0x28
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b08c      	sub	sp, #48	; 0x30
 800d17c:	af04      	add	r7, sp, #16
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	603b      	str	r3, [r7, #0]
 800d184:	4613      	mov	r3, r2
 800d186:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d188:	88fb      	ldrh	r3, [r7, #6]
 800d18a:	009b      	lsls	r3, r3, #2
 800d18c:	4618      	mov	r0, r3
 800d18e:	f001 ff57 	bl	800f040 <pvPortMalloc>
 800d192:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00e      	beq.n	800d1b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d19a:	205c      	movs	r0, #92	; 0x5c
 800d19c:	f001 ff50 	bl	800f040 <pvPortMalloc>
 800d1a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d1a2:	69fb      	ldr	r3, [r7, #28]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d003      	beq.n	800d1b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d1a8:	69fb      	ldr	r3, [r7, #28]
 800d1aa:	697a      	ldr	r2, [r7, #20]
 800d1ac:	631a      	str	r2, [r3, #48]	; 0x30
 800d1ae:	e005      	b.n	800d1bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d1b0:	6978      	ldr	r0, [r7, #20]
 800d1b2:	f002 f807 	bl	800f1c4 <vPortFree>
 800d1b6:	e001      	b.n	800d1bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d017      	beq.n	800d1f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d1c2:	69fb      	ldr	r3, [r7, #28]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d1ca:	88fa      	ldrh	r2, [r7, #6]
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	9303      	str	r3, [sp, #12]
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	9302      	str	r3, [sp, #8]
 800d1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d6:	9301      	str	r3, [sp, #4]
 800d1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1da:	9300      	str	r3, [sp, #0]
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	68b9      	ldr	r1, [r7, #8]
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f000 f80e 	bl	800d202 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d1e6:	69f8      	ldr	r0, [r7, #28]
 800d1e8:	f000 f89a 	bl	800d320 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	61bb      	str	r3, [r7, #24]
 800d1f0:	e002      	b.n	800d1f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d1f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d1f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d1f8:	69bb      	ldr	r3, [r7, #24]
	}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3720      	adds	r7, #32
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b088      	sub	sp, #32
 800d206:	af00      	add	r7, sp, #0
 800d208:	60f8      	str	r0, [r7, #12]
 800d20a:	60b9      	str	r1, [r7, #8]
 800d20c:	607a      	str	r2, [r7, #4]
 800d20e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d212:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	461a      	mov	r2, r3
 800d21a:	21a5      	movs	r1, #165	; 0xa5
 800d21c:	f004 fd05 	bl	8011c2a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d22a:	3b01      	subs	r3, #1
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	4413      	add	r3, r2
 800d230:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d232:	69bb      	ldr	r3, [r7, #24]
 800d234:	f023 0307 	bic.w	r3, r3, #7
 800d238:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d23a:	69bb      	ldr	r3, [r7, #24]
 800d23c:	f003 0307 	and.w	r3, r3, #7
 800d240:	2b00      	cmp	r3, #0
 800d242:	d009      	beq.n	800d258 <prvInitialiseNewTask+0x56>
 800d244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d248:	f383 8811 	msr	BASEPRI, r3
 800d24c:	f3bf 8f6f 	isb	sy
 800d250:	f3bf 8f4f 	dsb	sy
 800d254:	617b      	str	r3, [r7, #20]
 800d256:	e7fe      	b.n	800d256 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d01f      	beq.n	800d29e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d25e:	2300      	movs	r3, #0
 800d260:	61fb      	str	r3, [r7, #28]
 800d262:	e012      	b.n	800d28a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d264:	68ba      	ldr	r2, [r7, #8]
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	4413      	add	r3, r2
 800d26a:	7819      	ldrb	r1, [r3, #0]
 800d26c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	4413      	add	r3, r2
 800d272:	3334      	adds	r3, #52	; 0x34
 800d274:	460a      	mov	r2, r1
 800d276:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d278:	68ba      	ldr	r2, [r7, #8]
 800d27a:	69fb      	ldr	r3, [r7, #28]
 800d27c:	4413      	add	r3, r2
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d006      	beq.n	800d292 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d284:	69fb      	ldr	r3, [r7, #28]
 800d286:	3301      	adds	r3, #1
 800d288:	61fb      	str	r3, [r7, #28]
 800d28a:	69fb      	ldr	r3, [r7, #28]
 800d28c:	2b0f      	cmp	r3, #15
 800d28e:	d9e9      	bls.n	800d264 <prvInitialiseNewTask+0x62>
 800d290:	e000      	b.n	800d294 <prvInitialiseNewTask+0x92>
			{
				break;
 800d292:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d296:	2200      	movs	r2, #0
 800d298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d29c:	e003      	b.n	800d2a6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a8:	2b37      	cmp	r3, #55	; 0x37
 800d2aa:	d901      	bls.n	800d2b0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d2ac:	2337      	movs	r3, #55	; 0x37
 800d2ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2be:	2200      	movs	r2, #0
 800d2c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c4:	3304      	adds	r3, #4
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7fe fdc6 	bl	800be58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ce:	3318      	adds	r3, #24
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7fe fdc1 	bl	800be58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d2fa:	683a      	ldr	r2, [r7, #0]
 800d2fc:	68f9      	ldr	r1, [r7, #12]
 800d2fe:	69b8      	ldr	r0, [r7, #24]
 800d300:	f001 fc60 	bl	800ebc4 <pxPortInitialiseStack>
 800d304:	4602      	mov	r2, r0
 800d306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d308:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d002      	beq.n	800d316 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d316:	bf00      	nop
 800d318:	3720      	adds	r7, #32
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
	...

0800d320 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d328:	f001 fd70 	bl	800ee0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d32c:	4b2d      	ldr	r3, [pc, #180]	; (800d3e4 <prvAddNewTaskToReadyList+0xc4>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	3301      	adds	r3, #1
 800d332:	4a2c      	ldr	r2, [pc, #176]	; (800d3e4 <prvAddNewTaskToReadyList+0xc4>)
 800d334:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d336:	4b2c      	ldr	r3, [pc, #176]	; (800d3e8 <prvAddNewTaskToReadyList+0xc8>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d109      	bne.n	800d352 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d33e:	4a2a      	ldr	r2, [pc, #168]	; (800d3e8 <prvAddNewTaskToReadyList+0xc8>)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d344:	4b27      	ldr	r3, [pc, #156]	; (800d3e4 <prvAddNewTaskToReadyList+0xc4>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2b01      	cmp	r3, #1
 800d34a:	d110      	bne.n	800d36e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d34c:	f000 fc68 	bl	800dc20 <prvInitialiseTaskLists>
 800d350:	e00d      	b.n	800d36e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d352:	4b26      	ldr	r3, [pc, #152]	; (800d3ec <prvAddNewTaskToReadyList+0xcc>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d109      	bne.n	800d36e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d35a:	4b23      	ldr	r3, [pc, #140]	; (800d3e8 <prvAddNewTaskToReadyList+0xc8>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d364:	429a      	cmp	r2, r3
 800d366:	d802      	bhi.n	800d36e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d368:	4a1f      	ldr	r2, [pc, #124]	; (800d3e8 <prvAddNewTaskToReadyList+0xc8>)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d36e:	4b20      	ldr	r3, [pc, #128]	; (800d3f0 <prvAddNewTaskToReadyList+0xd0>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	3301      	adds	r3, #1
 800d374:	4a1e      	ldr	r2, [pc, #120]	; (800d3f0 <prvAddNewTaskToReadyList+0xd0>)
 800d376:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d378:	4b1d      	ldr	r3, [pc, #116]	; (800d3f0 <prvAddNewTaskToReadyList+0xd0>)
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d384:	4b1b      	ldr	r3, [pc, #108]	; (800d3f4 <prvAddNewTaskToReadyList+0xd4>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d903      	bls.n	800d394 <prvAddNewTaskToReadyList+0x74>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d390:	4a18      	ldr	r2, [pc, #96]	; (800d3f4 <prvAddNewTaskToReadyList+0xd4>)
 800d392:	6013      	str	r3, [r2, #0]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d398:	4613      	mov	r3, r2
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	4413      	add	r3, r2
 800d39e:	009b      	lsls	r3, r3, #2
 800d3a0:	4a15      	ldr	r2, [pc, #84]	; (800d3f8 <prvAddNewTaskToReadyList+0xd8>)
 800d3a2:	441a      	add	r2, r3
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	3304      	adds	r3, #4
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	4610      	mov	r0, r2
 800d3ac:	f7fe fd61 	bl	800be72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d3b0:	f001 fd5a 	bl	800ee68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d3b4:	4b0d      	ldr	r3, [pc, #52]	; (800d3ec <prvAddNewTaskToReadyList+0xcc>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d00e      	beq.n	800d3da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d3bc:	4b0a      	ldr	r3, [pc, #40]	; (800d3e8 <prvAddNewTaskToReadyList+0xc8>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d207      	bcs.n	800d3da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d3ca:	4b0c      	ldr	r3, [pc, #48]	; (800d3fc <prvAddNewTaskToReadyList+0xdc>)
 800d3cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3d0:	601a      	str	r2, [r3, #0]
 800d3d2:	f3bf 8f4f 	dsb	sy
 800d3d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3da:	bf00      	nop
 800d3dc:	3708      	adds	r7, #8
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	20002cc4 	.word	0x20002cc4
 800d3e8:	200027f0 	.word	0x200027f0
 800d3ec:	20002cd0 	.word	0x20002cd0
 800d3f0:	20002ce0 	.word	0x20002ce0
 800d3f4:	20002ccc 	.word	0x20002ccc
 800d3f8:	200027f4 	.word	0x200027f4
 800d3fc:	e000ed04 	.word	0xe000ed04

0800d400 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d400:	b580      	push	{r7, lr}
 800d402:	b084      	sub	sp, #16
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d408:	2300      	movs	r3, #0
 800d40a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d016      	beq.n	800d440 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d412:	4b13      	ldr	r3, [pc, #76]	; (800d460 <vTaskDelay+0x60>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d009      	beq.n	800d42e <vTaskDelay+0x2e>
 800d41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d41e:	f383 8811 	msr	BASEPRI, r3
 800d422:	f3bf 8f6f 	isb	sy
 800d426:	f3bf 8f4f 	dsb	sy
 800d42a:	60bb      	str	r3, [r7, #8]
 800d42c:	e7fe      	b.n	800d42c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800d42e:	f000 f87f 	bl	800d530 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d432:	2100      	movs	r1, #0
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f001 f82b 	bl	800e490 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d43a:	f000 f8bf 	bl	800d5bc <xTaskResumeAll>
 800d43e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d107      	bne.n	800d456 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800d446:	4b07      	ldr	r3, [pc, #28]	; (800d464 <vTaskDelay+0x64>)
 800d448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d44c:	601a      	str	r2, [r3, #0]
 800d44e:	f3bf 8f4f 	dsb	sy
 800d452:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d456:	bf00      	nop
 800d458:	3710      	adds	r7, #16
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	20002cec 	.word	0x20002cec
 800d464:	e000ed04 	.word	0xe000ed04

0800d468 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b08a      	sub	sp, #40	; 0x28
 800d46c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d46e:	2300      	movs	r3, #0
 800d470:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d472:	2300      	movs	r3, #0
 800d474:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d476:	463a      	mov	r2, r7
 800d478:	1d39      	adds	r1, r7, #4
 800d47a:	f107 0308 	add.w	r3, r7, #8
 800d47e:	4618      	mov	r0, r3
 800d480:	f7fe fc96 	bl	800bdb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d484:	6839      	ldr	r1, [r7, #0]
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	68ba      	ldr	r2, [r7, #8]
 800d48a:	9202      	str	r2, [sp, #8]
 800d48c:	9301      	str	r3, [sp, #4]
 800d48e:	2300      	movs	r3, #0
 800d490:	9300      	str	r3, [sp, #0]
 800d492:	2300      	movs	r3, #0
 800d494:	460a      	mov	r2, r1
 800d496:	4920      	ldr	r1, [pc, #128]	; (800d518 <vTaskStartScheduler+0xb0>)
 800d498:	4820      	ldr	r0, [pc, #128]	; (800d51c <vTaskStartScheduler+0xb4>)
 800d49a:	f7ff fe13 	bl	800d0c4 <xTaskCreateStatic>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	4b1f      	ldr	r3, [pc, #124]	; (800d520 <vTaskStartScheduler+0xb8>)
 800d4a2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d4a4:	4b1e      	ldr	r3, [pc, #120]	; (800d520 <vTaskStartScheduler+0xb8>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d002      	beq.n	800d4b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	617b      	str	r3, [r7, #20]
 800d4b0:	e001      	b.n	800d4b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	d102      	bne.n	800d4c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d4bc:	f001 f83c 	bl	800e538 <xTimerCreateTimerTask>
 800d4c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	d115      	bne.n	800d4f4 <vTaskStartScheduler+0x8c>
 800d4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4cc:	f383 8811 	msr	BASEPRI, r3
 800d4d0:	f3bf 8f6f 	isb	sy
 800d4d4:	f3bf 8f4f 	dsb	sy
 800d4d8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d4da:	4b12      	ldr	r3, [pc, #72]	; (800d524 <vTaskStartScheduler+0xbc>)
 800d4dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d4e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d4e2:	4b11      	ldr	r3, [pc, #68]	; (800d528 <vTaskStartScheduler+0xc0>)
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d4e8:	4b10      	ldr	r3, [pc, #64]	; (800d52c <vTaskStartScheduler+0xc4>)
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d4ee:	f001 fbef 	bl	800ecd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d4f2:	e00d      	b.n	800d510 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4fa:	d109      	bne.n	800d510 <vTaskStartScheduler+0xa8>
 800d4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d500:	f383 8811 	msr	BASEPRI, r3
 800d504:	f3bf 8f6f 	isb	sy
 800d508:	f3bf 8f4f 	dsb	sy
 800d50c:	60fb      	str	r3, [r7, #12]
 800d50e:	e7fe      	b.n	800d50e <vTaskStartScheduler+0xa6>
}
 800d510:	bf00      	nop
 800d512:	3718      	adds	r7, #24
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}
 800d518:	0801315c 	.word	0x0801315c
 800d51c:	0800dba5 	.word	0x0800dba5
 800d520:	20002ce8 	.word	0x20002ce8
 800d524:	20002ce4 	.word	0x20002ce4
 800d528:	20002cd0 	.word	0x20002cd0
 800d52c:	20002cc8 	.word	0x20002cc8

0800d530 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d530:	b480      	push	{r7}
 800d532:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d534:	4b04      	ldr	r3, [pc, #16]	; (800d548 <vTaskSuspendAll+0x18>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	3301      	adds	r3, #1
 800d53a:	4a03      	ldr	r2, [pc, #12]	; (800d548 <vTaskSuspendAll+0x18>)
 800d53c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d53e:	bf00      	nop
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr
 800d548:	20002cec 	.word	0x20002cec

0800d54c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800d54c:	b480      	push	{r7}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800d552:	2300      	movs	r3, #0
 800d554:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800d556:	4b14      	ldr	r3, [pc, #80]	; (800d5a8 <prvGetExpectedIdleTime+0x5c>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d001      	beq.n	800d562 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800d55e:	2301      	movs	r3, #1
 800d560:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800d562:	4b12      	ldr	r3, [pc, #72]	; (800d5ac <prvGetExpectedIdleTime+0x60>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d002      	beq.n	800d572 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800d56c:	2300      	movs	r3, #0
 800d56e:	607b      	str	r3, [r7, #4]
 800d570:	e012      	b.n	800d598 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800d572:	4b0f      	ldr	r3, [pc, #60]	; (800d5b0 <prvGetExpectedIdleTime+0x64>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	2b01      	cmp	r3, #1
 800d578:	d902      	bls.n	800d580 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800d57a:	2300      	movs	r3, #0
 800d57c:	607b      	str	r3, [r7, #4]
 800d57e:	e00b      	b.n	800d598 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d002      	beq.n	800d58c <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800d586:	2300      	movs	r3, #0
 800d588:	607b      	str	r3, [r7, #4]
 800d58a:	e005      	b.n	800d598 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800d58c:	4b09      	ldr	r3, [pc, #36]	; (800d5b4 <prvGetExpectedIdleTime+0x68>)
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	4b09      	ldr	r3, [pc, #36]	; (800d5b8 <prvGetExpectedIdleTime+0x6c>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	1ad3      	subs	r3, r2, r3
 800d596:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800d598:	687b      	ldr	r3, [r7, #4]
	}
 800d59a:	4618      	mov	r0, r3
 800d59c:	370c      	adds	r7, #12
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr
 800d5a6:	bf00      	nop
 800d5a8:	20002ccc 	.word	0x20002ccc
 800d5ac:	200027f0 	.word	0x200027f0
 800d5b0:	200027f4 	.word	0x200027f4
 800d5b4:	20002ce4 	.word	0x20002ce4
 800d5b8:	20002cc8 	.word	0x20002cc8

0800d5bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d5ca:	4b41      	ldr	r3, [pc, #260]	; (800d6d0 <xTaskResumeAll+0x114>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d109      	bne.n	800d5e6 <xTaskResumeAll+0x2a>
 800d5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d6:	f383 8811 	msr	BASEPRI, r3
 800d5da:	f3bf 8f6f 	isb	sy
 800d5de:	f3bf 8f4f 	dsb	sy
 800d5e2:	603b      	str	r3, [r7, #0]
 800d5e4:	e7fe      	b.n	800d5e4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d5e6:	f001 fc11 	bl	800ee0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d5ea:	4b39      	ldr	r3, [pc, #228]	; (800d6d0 <xTaskResumeAll+0x114>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	3b01      	subs	r3, #1
 800d5f0:	4a37      	ldr	r2, [pc, #220]	; (800d6d0 <xTaskResumeAll+0x114>)
 800d5f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5f4:	4b36      	ldr	r3, [pc, #216]	; (800d6d0 <xTaskResumeAll+0x114>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d162      	bne.n	800d6c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d5fc:	4b35      	ldr	r3, [pc, #212]	; (800d6d4 <xTaskResumeAll+0x118>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d05e      	beq.n	800d6c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d604:	e02f      	b.n	800d666 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d606:	4b34      	ldr	r3, [pc, #208]	; (800d6d8 <xTaskResumeAll+0x11c>)
 800d608:	68db      	ldr	r3, [r3, #12]
 800d60a:	68db      	ldr	r3, [r3, #12]
 800d60c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	3318      	adds	r3, #24
 800d612:	4618      	mov	r0, r3
 800d614:	f7fe fc8a 	bl	800bf2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	3304      	adds	r3, #4
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7fe fc85 	bl	800bf2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d626:	4b2d      	ldr	r3, [pc, #180]	; (800d6dc <xTaskResumeAll+0x120>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d903      	bls.n	800d636 <xTaskResumeAll+0x7a>
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d632:	4a2a      	ldr	r2, [pc, #168]	; (800d6dc <xTaskResumeAll+0x120>)
 800d634:	6013      	str	r3, [r2, #0]
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d63a:	4613      	mov	r3, r2
 800d63c:	009b      	lsls	r3, r3, #2
 800d63e:	4413      	add	r3, r2
 800d640:	009b      	lsls	r3, r3, #2
 800d642:	4a27      	ldr	r2, [pc, #156]	; (800d6e0 <xTaskResumeAll+0x124>)
 800d644:	441a      	add	r2, r3
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	3304      	adds	r3, #4
 800d64a:	4619      	mov	r1, r3
 800d64c:	4610      	mov	r0, r2
 800d64e:	f7fe fc10 	bl	800be72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d656:	4b23      	ldr	r3, [pc, #140]	; (800d6e4 <xTaskResumeAll+0x128>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d302      	bcc.n	800d666 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d660:	4b21      	ldr	r3, [pc, #132]	; (800d6e8 <xTaskResumeAll+0x12c>)
 800d662:	2201      	movs	r2, #1
 800d664:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d666:	4b1c      	ldr	r3, [pc, #112]	; (800d6d8 <xTaskResumeAll+0x11c>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d1cb      	bne.n	800d606 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d001      	beq.n	800d678 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d674:	f000 fb6e 	bl	800dd54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d678:	4b1c      	ldr	r3, [pc, #112]	; (800d6ec <xTaskResumeAll+0x130>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d010      	beq.n	800d6a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d684:	f000 f846 	bl	800d714 <xTaskIncrementTick>
 800d688:	4603      	mov	r3, r0
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d002      	beq.n	800d694 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d68e:	4b16      	ldr	r3, [pc, #88]	; (800d6e8 <xTaskResumeAll+0x12c>)
 800d690:	2201      	movs	r2, #1
 800d692:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	3b01      	subs	r3, #1
 800d698:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d1f1      	bne.n	800d684 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800d6a0:	4b12      	ldr	r3, [pc, #72]	; (800d6ec <xTaskResumeAll+0x130>)
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d6a6:	4b10      	ldr	r3, [pc, #64]	; (800d6e8 <xTaskResumeAll+0x12c>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d009      	beq.n	800d6c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d6b2:	4b0f      	ldr	r3, [pc, #60]	; (800d6f0 <xTaskResumeAll+0x134>)
 800d6b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6b8:	601a      	str	r2, [r3, #0]
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d6c2:	f001 fbd1 	bl	800ee68 <vPortExitCritical>

	return xAlreadyYielded;
 800d6c6:	68bb      	ldr	r3, [r7, #8]
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3710      	adds	r7, #16
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	20002cec 	.word	0x20002cec
 800d6d4:	20002cc4 	.word	0x20002cc4
 800d6d8:	20002c84 	.word	0x20002c84
 800d6dc:	20002ccc 	.word	0x20002ccc
 800d6e0:	200027f4 	.word	0x200027f4
 800d6e4:	200027f0 	.word	0x200027f0
 800d6e8:	20002cd8 	.word	0x20002cd8
 800d6ec:	20002cd4 	.word	0x20002cd4
 800d6f0:	e000ed04 	.word	0xe000ed04

0800d6f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d6fa:	4b05      	ldr	r3, [pc, #20]	; (800d710 <xTaskGetTickCount+0x1c>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d700:	687b      	ldr	r3, [r7, #4]
}
 800d702:	4618      	mov	r0, r3
 800d704:	370c      	adds	r7, #12
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr
 800d70e:	bf00      	nop
 800d710:	20002cc8 	.word	0x20002cc8

0800d714 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b086      	sub	sp, #24
 800d718:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d71a:	2300      	movs	r3, #0
 800d71c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d71e:	4b4e      	ldr	r3, [pc, #312]	; (800d858 <xTaskIncrementTick+0x144>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	2b00      	cmp	r3, #0
 800d724:	f040 8088 	bne.w	800d838 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d728:	4b4c      	ldr	r3, [pc, #304]	; (800d85c <xTaskIncrementTick+0x148>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	3301      	adds	r3, #1
 800d72e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d730:	4a4a      	ldr	r2, [pc, #296]	; (800d85c <xTaskIncrementTick+0x148>)
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d11f      	bne.n	800d77c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800d73c:	4b48      	ldr	r3, [pc, #288]	; (800d860 <xTaskIncrementTick+0x14c>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d009      	beq.n	800d75a <xTaskIncrementTick+0x46>
 800d746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d74a:	f383 8811 	msr	BASEPRI, r3
 800d74e:	f3bf 8f6f 	isb	sy
 800d752:	f3bf 8f4f 	dsb	sy
 800d756:	603b      	str	r3, [r7, #0]
 800d758:	e7fe      	b.n	800d758 <xTaskIncrementTick+0x44>
 800d75a:	4b41      	ldr	r3, [pc, #260]	; (800d860 <xTaskIncrementTick+0x14c>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	60fb      	str	r3, [r7, #12]
 800d760:	4b40      	ldr	r3, [pc, #256]	; (800d864 <xTaskIncrementTick+0x150>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	4a3e      	ldr	r2, [pc, #248]	; (800d860 <xTaskIncrementTick+0x14c>)
 800d766:	6013      	str	r3, [r2, #0]
 800d768:	4a3e      	ldr	r2, [pc, #248]	; (800d864 <xTaskIncrementTick+0x150>)
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	6013      	str	r3, [r2, #0]
 800d76e:	4b3e      	ldr	r3, [pc, #248]	; (800d868 <xTaskIncrementTick+0x154>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	3301      	adds	r3, #1
 800d774:	4a3c      	ldr	r2, [pc, #240]	; (800d868 <xTaskIncrementTick+0x154>)
 800d776:	6013      	str	r3, [r2, #0]
 800d778:	f000 faec 	bl	800dd54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d77c:	4b3b      	ldr	r3, [pc, #236]	; (800d86c <xTaskIncrementTick+0x158>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	693a      	ldr	r2, [r7, #16]
 800d782:	429a      	cmp	r2, r3
 800d784:	d349      	bcc.n	800d81a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d786:	4b36      	ldr	r3, [pc, #216]	; (800d860 <xTaskIncrementTick+0x14c>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d104      	bne.n	800d79a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d790:	4b36      	ldr	r3, [pc, #216]	; (800d86c <xTaskIncrementTick+0x158>)
 800d792:	f04f 32ff 	mov.w	r2, #4294967295
 800d796:	601a      	str	r2, [r3, #0]
					break;
 800d798:	e03f      	b.n	800d81a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d79a:	4b31      	ldr	r3, [pc, #196]	; (800d860 <xTaskIncrementTick+0x14c>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	68db      	ldr	r3, [r3, #12]
 800d7a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	685b      	ldr	r3, [r3, #4]
 800d7a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d7aa:	693a      	ldr	r2, [r7, #16]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d203      	bcs.n	800d7ba <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d7b2:	4a2e      	ldr	r2, [pc, #184]	; (800d86c <xTaskIncrementTick+0x158>)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d7b8:	e02f      	b.n	800d81a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	3304      	adds	r3, #4
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7fe fbb4 	bl	800bf2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d004      	beq.n	800d7d6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	3318      	adds	r3, #24
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7fe fbab 	bl	800bf2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7da:	4b25      	ldr	r3, [pc, #148]	; (800d870 <xTaskIncrementTick+0x15c>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d903      	bls.n	800d7ea <xTaskIncrementTick+0xd6>
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e6:	4a22      	ldr	r2, [pc, #136]	; (800d870 <xTaskIncrementTick+0x15c>)
 800d7e8:	6013      	str	r3, [r2, #0]
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ee:	4613      	mov	r3, r2
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	4413      	add	r3, r2
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	4a1f      	ldr	r2, [pc, #124]	; (800d874 <xTaskIncrementTick+0x160>)
 800d7f8:	441a      	add	r2, r3
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	3304      	adds	r3, #4
 800d7fe:	4619      	mov	r1, r3
 800d800:	4610      	mov	r0, r2
 800d802:	f7fe fb36 	bl	800be72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d80a:	4b1b      	ldr	r3, [pc, #108]	; (800d878 <xTaskIncrementTick+0x164>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d810:	429a      	cmp	r2, r3
 800d812:	d3b8      	bcc.n	800d786 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800d814:	2301      	movs	r3, #1
 800d816:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d818:	e7b5      	b.n	800d786 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d81a:	4b17      	ldr	r3, [pc, #92]	; (800d878 <xTaskIncrementTick+0x164>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d820:	4914      	ldr	r1, [pc, #80]	; (800d874 <xTaskIncrementTick+0x160>)
 800d822:	4613      	mov	r3, r2
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	4413      	add	r3, r2
 800d828:	009b      	lsls	r3, r3, #2
 800d82a:	440b      	add	r3, r1
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d907      	bls.n	800d842 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800d832:	2301      	movs	r3, #1
 800d834:	617b      	str	r3, [r7, #20]
 800d836:	e004      	b.n	800d842 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d838:	4b10      	ldr	r3, [pc, #64]	; (800d87c <xTaskIncrementTick+0x168>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	3301      	adds	r3, #1
 800d83e:	4a0f      	ldr	r2, [pc, #60]	; (800d87c <xTaskIncrementTick+0x168>)
 800d840:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d842:	4b0f      	ldr	r3, [pc, #60]	; (800d880 <xTaskIncrementTick+0x16c>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d001      	beq.n	800d84e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800d84a:	2301      	movs	r3, #1
 800d84c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d84e:	697b      	ldr	r3, [r7, #20]
}
 800d850:	4618      	mov	r0, r3
 800d852:	3718      	adds	r7, #24
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	20002cec 	.word	0x20002cec
 800d85c:	20002cc8 	.word	0x20002cc8
 800d860:	20002c7c 	.word	0x20002c7c
 800d864:	20002c80 	.word	0x20002c80
 800d868:	20002cdc 	.word	0x20002cdc
 800d86c:	20002ce4 	.word	0x20002ce4
 800d870:	20002ccc 	.word	0x20002ccc
 800d874:	200027f4 	.word	0x200027f4
 800d878:	200027f0 	.word	0x200027f0
 800d87c:	20002cd4 	.word	0x20002cd4
 800d880:	20002cd8 	.word	0x20002cd8

0800d884 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d88a:	4b27      	ldr	r3, [pc, #156]	; (800d928 <vTaskSwitchContext+0xa4>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d003      	beq.n	800d89a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d892:	4b26      	ldr	r3, [pc, #152]	; (800d92c <vTaskSwitchContext+0xa8>)
 800d894:	2201      	movs	r2, #1
 800d896:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d898:	e040      	b.n	800d91c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800d89a:	4b24      	ldr	r3, [pc, #144]	; (800d92c <vTaskSwitchContext+0xa8>)
 800d89c:	2200      	movs	r2, #0
 800d89e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8a0:	4b23      	ldr	r3, [pc, #140]	; (800d930 <vTaskSwitchContext+0xac>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	60fb      	str	r3, [r7, #12]
 800d8a6:	e00f      	b.n	800d8c8 <vTaskSwitchContext+0x44>
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d109      	bne.n	800d8c2 <vTaskSwitchContext+0x3e>
 800d8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b2:	f383 8811 	msr	BASEPRI, r3
 800d8b6:	f3bf 8f6f 	isb	sy
 800d8ba:	f3bf 8f4f 	dsb	sy
 800d8be:	607b      	str	r3, [r7, #4]
 800d8c0:	e7fe      	b.n	800d8c0 <vTaskSwitchContext+0x3c>
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	3b01      	subs	r3, #1
 800d8c6:	60fb      	str	r3, [r7, #12]
 800d8c8:	491a      	ldr	r1, [pc, #104]	; (800d934 <vTaskSwitchContext+0xb0>)
 800d8ca:	68fa      	ldr	r2, [r7, #12]
 800d8cc:	4613      	mov	r3, r2
 800d8ce:	009b      	lsls	r3, r3, #2
 800d8d0:	4413      	add	r3, r2
 800d8d2:	009b      	lsls	r3, r3, #2
 800d8d4:	440b      	add	r3, r1
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d0e5      	beq.n	800d8a8 <vTaskSwitchContext+0x24>
 800d8dc:	68fa      	ldr	r2, [r7, #12]
 800d8de:	4613      	mov	r3, r2
 800d8e0:	009b      	lsls	r3, r3, #2
 800d8e2:	4413      	add	r3, r2
 800d8e4:	009b      	lsls	r3, r3, #2
 800d8e6:	4a13      	ldr	r2, [pc, #76]	; (800d934 <vTaskSwitchContext+0xb0>)
 800d8e8:	4413      	add	r3, r2
 800d8ea:	60bb      	str	r3, [r7, #8]
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	685a      	ldr	r2, [r3, #4]
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	605a      	str	r2, [r3, #4]
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	685a      	ldr	r2, [r3, #4]
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	3308      	adds	r3, #8
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d104      	bne.n	800d90c <vTaskSwitchContext+0x88>
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	685a      	ldr	r2, [r3, #4]
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	605a      	str	r2, [r3, #4]
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	68db      	ldr	r3, [r3, #12]
 800d912:	4a09      	ldr	r2, [pc, #36]	; (800d938 <vTaskSwitchContext+0xb4>)
 800d914:	6013      	str	r3, [r2, #0]
 800d916:	4a06      	ldr	r2, [pc, #24]	; (800d930 <vTaskSwitchContext+0xac>)
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	6013      	str	r3, [r2, #0]
}
 800d91c:	bf00      	nop
 800d91e:	3714      	adds	r7, #20
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr
 800d928:	20002cec 	.word	0x20002cec
 800d92c:	20002cd8 	.word	0x20002cd8
 800d930:	20002ccc 	.word	0x20002ccc
 800d934:	200027f4 	.word	0x200027f4
 800d938:	200027f0 	.word	0x200027f0

0800d93c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b084      	sub	sp, #16
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d109      	bne.n	800d960 <vTaskPlaceOnEventList+0x24>
 800d94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d950:	f383 8811 	msr	BASEPRI, r3
 800d954:	f3bf 8f6f 	isb	sy
 800d958:	f3bf 8f4f 	dsb	sy
 800d95c:	60fb      	str	r3, [r7, #12]
 800d95e:	e7fe      	b.n	800d95e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d960:	4b07      	ldr	r3, [pc, #28]	; (800d980 <vTaskPlaceOnEventList+0x44>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	3318      	adds	r3, #24
 800d966:	4619      	mov	r1, r3
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f7fe faa6 	bl	800beba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d96e:	2101      	movs	r1, #1
 800d970:	6838      	ldr	r0, [r7, #0]
 800d972:	f000 fd8d 	bl	800e490 <prvAddCurrentTaskToDelayedList>
}
 800d976:	bf00      	nop
 800d978:	3710      	adds	r7, #16
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	200027f0 	.word	0x200027f0

0800d984 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d984:	b580      	push	{r7, lr}
 800d986:	b086      	sub	sp, #24
 800d988:	af00      	add	r7, sp, #0
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	60b9      	str	r1, [r7, #8]
 800d98e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d109      	bne.n	800d9aa <vTaskPlaceOnEventListRestricted+0x26>
 800d996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d99a:	f383 8811 	msr	BASEPRI, r3
 800d99e:	f3bf 8f6f 	isb	sy
 800d9a2:	f3bf 8f4f 	dsb	sy
 800d9a6:	617b      	str	r3, [r7, #20]
 800d9a8:	e7fe      	b.n	800d9a8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d9aa:	4b0a      	ldr	r3, [pc, #40]	; (800d9d4 <vTaskPlaceOnEventListRestricted+0x50>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	3318      	adds	r3, #24
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	68f8      	ldr	r0, [r7, #12]
 800d9b4:	f7fe fa5d 	bl	800be72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d002      	beq.n	800d9c4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800d9be:	f04f 33ff 	mov.w	r3, #4294967295
 800d9c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d9c4:	6879      	ldr	r1, [r7, #4]
 800d9c6:	68b8      	ldr	r0, [r7, #8]
 800d9c8:	f000 fd62 	bl	800e490 <prvAddCurrentTaskToDelayedList>
	}
 800d9cc:	bf00      	nop
 800d9ce:	3718      	adds	r7, #24
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	200027f0 	.word	0x200027f0

0800d9d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b086      	sub	sp, #24
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	68db      	ldr	r3, [r3, #12]
 800d9e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d109      	bne.n	800da02 <xTaskRemoveFromEventList+0x2a>
 800d9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f2:	f383 8811 	msr	BASEPRI, r3
 800d9f6:	f3bf 8f6f 	isb	sy
 800d9fa:	f3bf 8f4f 	dsb	sy
 800d9fe:	60fb      	str	r3, [r7, #12]
 800da00:	e7fe      	b.n	800da00 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	3318      	adds	r3, #24
 800da06:	4618      	mov	r0, r3
 800da08:	f7fe fa90 	bl	800bf2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da0c:	4b1e      	ldr	r3, [pc, #120]	; (800da88 <xTaskRemoveFromEventList+0xb0>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d11f      	bne.n	800da54 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	3304      	adds	r3, #4
 800da18:	4618      	mov	r0, r3
 800da1a:	f7fe fa87 	bl	800bf2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da22:	4b1a      	ldr	r3, [pc, #104]	; (800da8c <xTaskRemoveFromEventList+0xb4>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	429a      	cmp	r2, r3
 800da28:	d903      	bls.n	800da32 <xTaskRemoveFromEventList+0x5a>
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da2e:	4a17      	ldr	r2, [pc, #92]	; (800da8c <xTaskRemoveFromEventList+0xb4>)
 800da30:	6013      	str	r3, [r2, #0]
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da36:	4613      	mov	r3, r2
 800da38:	009b      	lsls	r3, r3, #2
 800da3a:	4413      	add	r3, r2
 800da3c:	009b      	lsls	r3, r3, #2
 800da3e:	4a14      	ldr	r2, [pc, #80]	; (800da90 <xTaskRemoveFromEventList+0xb8>)
 800da40:	441a      	add	r2, r3
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	3304      	adds	r3, #4
 800da46:	4619      	mov	r1, r3
 800da48:	4610      	mov	r0, r2
 800da4a:	f7fe fa12 	bl	800be72 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800da4e:	f000 f981 	bl	800dd54 <prvResetNextTaskUnblockTime>
 800da52:	e005      	b.n	800da60 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	3318      	adds	r3, #24
 800da58:	4619      	mov	r1, r3
 800da5a:	480e      	ldr	r0, [pc, #56]	; (800da94 <xTaskRemoveFromEventList+0xbc>)
 800da5c:	f7fe fa09 	bl	800be72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da64:	4b0c      	ldr	r3, [pc, #48]	; (800da98 <xTaskRemoveFromEventList+0xc0>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d905      	bls.n	800da7a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800da6e:	2301      	movs	r3, #1
 800da70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800da72:	4b0a      	ldr	r3, [pc, #40]	; (800da9c <xTaskRemoveFromEventList+0xc4>)
 800da74:	2201      	movs	r2, #1
 800da76:	601a      	str	r2, [r3, #0]
 800da78:	e001      	b.n	800da7e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800da7a:	2300      	movs	r3, #0
 800da7c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800da7e:	697b      	ldr	r3, [r7, #20]
}
 800da80:	4618      	mov	r0, r3
 800da82:	3718      	adds	r7, #24
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}
 800da88:	20002cec 	.word	0x20002cec
 800da8c:	20002ccc 	.word	0x20002ccc
 800da90:	200027f4 	.word	0x200027f4
 800da94:	20002c84 	.word	0x20002c84
 800da98:	200027f0 	.word	0x200027f0
 800da9c:	20002cd8 	.word	0x20002cd8

0800daa0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800daa8:	4b06      	ldr	r3, [pc, #24]	; (800dac4 <vTaskInternalSetTimeOutState+0x24>)
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dab0:	4b05      	ldr	r3, [pc, #20]	; (800dac8 <vTaskInternalSetTimeOutState+0x28>)
 800dab2:	681a      	ldr	r2, [r3, #0]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	605a      	str	r2, [r3, #4]
}
 800dab8:	bf00      	nop
 800daba:	370c      	adds	r7, #12
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr
 800dac4:	20002cdc 	.word	0x20002cdc
 800dac8:	20002cc8 	.word	0x20002cc8

0800dacc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b088      	sub	sp, #32
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d109      	bne.n	800daf0 <xTaskCheckForTimeOut+0x24>
 800dadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae0:	f383 8811 	msr	BASEPRI, r3
 800dae4:	f3bf 8f6f 	isb	sy
 800dae8:	f3bf 8f4f 	dsb	sy
 800daec:	613b      	str	r3, [r7, #16]
 800daee:	e7fe      	b.n	800daee <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d109      	bne.n	800db0a <xTaskCheckForTimeOut+0x3e>
 800daf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dafa:	f383 8811 	msr	BASEPRI, r3
 800dafe:	f3bf 8f6f 	isb	sy
 800db02:	f3bf 8f4f 	dsb	sy
 800db06:	60fb      	str	r3, [r7, #12]
 800db08:	e7fe      	b.n	800db08 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800db0a:	f001 f97f 	bl	800ee0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800db0e:	4b1d      	ldr	r3, [pc, #116]	; (800db84 <xTaskCheckForTimeOut+0xb8>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	69ba      	ldr	r2, [r7, #24]
 800db1a:	1ad3      	subs	r3, r2, r3
 800db1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db26:	d102      	bne.n	800db2e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800db28:	2300      	movs	r3, #0
 800db2a:	61fb      	str	r3, [r7, #28]
 800db2c:	e023      	b.n	800db76 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681a      	ldr	r2, [r3, #0]
 800db32:	4b15      	ldr	r3, [pc, #84]	; (800db88 <xTaskCheckForTimeOut+0xbc>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	429a      	cmp	r2, r3
 800db38:	d007      	beq.n	800db4a <xTaskCheckForTimeOut+0x7e>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	685b      	ldr	r3, [r3, #4]
 800db3e:	69ba      	ldr	r2, [r7, #24]
 800db40:	429a      	cmp	r2, r3
 800db42:	d302      	bcc.n	800db4a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800db44:	2301      	movs	r3, #1
 800db46:	61fb      	str	r3, [r7, #28]
 800db48:	e015      	b.n	800db76 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	697a      	ldr	r2, [r7, #20]
 800db50:	429a      	cmp	r2, r3
 800db52:	d20b      	bcs.n	800db6c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	1ad2      	subs	r2, r2, r3
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7ff ff9d 	bl	800daa0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800db66:	2300      	movs	r3, #0
 800db68:	61fb      	str	r3, [r7, #28]
 800db6a:	e004      	b.n	800db76 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	2200      	movs	r2, #0
 800db70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800db72:	2301      	movs	r3, #1
 800db74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800db76:	f001 f977 	bl	800ee68 <vPortExitCritical>

	return xReturn;
 800db7a:	69fb      	ldr	r3, [r7, #28]
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3720      	adds	r7, #32
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}
 800db84:	20002cc8 	.word	0x20002cc8
 800db88:	20002cdc 	.word	0x20002cdc

0800db8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800db8c:	b480      	push	{r7}
 800db8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800db90:	4b03      	ldr	r3, [pc, #12]	; (800dba0 <vTaskMissedYield+0x14>)
 800db92:	2201      	movs	r2, #1
 800db94:	601a      	str	r2, [r3, #0]
}
 800db96:	bf00      	nop
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr
 800dba0:	20002cd8 	.word	0x20002cd8

0800dba4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dbac:	f000 f878 	bl	800dca0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dbb0:	4b17      	ldr	r3, [pc, #92]	; (800dc10 <prvIdleTask+0x6c>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d907      	bls.n	800dbc8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800dbb8:	4b16      	ldr	r3, [pc, #88]	; (800dc14 <prvIdleTask+0x70>)
 800dbba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbbe:	601a      	str	r2, [r3, #0]
 800dbc0:	f3bf 8f4f 	dsb	sy
 800dbc4:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800dbc8:	f7ff fcc0 	bl	800d54c <prvGetExpectedIdleTime>
 800dbcc:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d9eb      	bls.n	800dbac <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800dbd4:	f7ff fcac 	bl	800d530 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800dbd8:	4b0f      	ldr	r3, [pc, #60]	; (800dc18 <prvIdleTask+0x74>)
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	4b0f      	ldr	r3, [pc, #60]	; (800dc1c <prvIdleTask+0x78>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d209      	bcs.n	800dbf8 <prvIdleTask+0x54>
 800dbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe8:	f383 8811 	msr	BASEPRI, r3
 800dbec:	f3bf 8f6f 	isb	sy
 800dbf0:	f3bf 8f4f 	dsb	sy
 800dbf4:	60bb      	str	r3, [r7, #8]
 800dbf6:	e7fe      	b.n	800dbf6 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800dbf8:	f7ff fca8 	bl	800d54c <prvGetExpectedIdleTime>
 800dbfc:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d902      	bls.n	800dc0a <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	f7f3 fafb 	bl	8001200 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800dc0a:	f7ff fcd7 	bl	800d5bc <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800dc0e:	e7cd      	b.n	800dbac <prvIdleTask+0x8>
 800dc10:	200027f4 	.word	0x200027f4
 800dc14:	e000ed04 	.word	0xe000ed04
 800dc18:	20002ce4 	.word	0x20002ce4
 800dc1c:	20002cc8 	.word	0x20002cc8

0800dc20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc26:	2300      	movs	r3, #0
 800dc28:	607b      	str	r3, [r7, #4]
 800dc2a:	e00c      	b.n	800dc46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dc2c:	687a      	ldr	r2, [r7, #4]
 800dc2e:	4613      	mov	r3, r2
 800dc30:	009b      	lsls	r3, r3, #2
 800dc32:	4413      	add	r3, r2
 800dc34:	009b      	lsls	r3, r3, #2
 800dc36:	4a12      	ldr	r2, [pc, #72]	; (800dc80 <prvInitialiseTaskLists+0x60>)
 800dc38:	4413      	add	r3, r2
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fe f8ec 	bl	800be18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	3301      	adds	r3, #1
 800dc44:	607b      	str	r3, [r7, #4]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2b37      	cmp	r3, #55	; 0x37
 800dc4a:	d9ef      	bls.n	800dc2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dc4c:	480d      	ldr	r0, [pc, #52]	; (800dc84 <prvInitialiseTaskLists+0x64>)
 800dc4e:	f7fe f8e3 	bl	800be18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dc52:	480d      	ldr	r0, [pc, #52]	; (800dc88 <prvInitialiseTaskLists+0x68>)
 800dc54:	f7fe f8e0 	bl	800be18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dc58:	480c      	ldr	r0, [pc, #48]	; (800dc8c <prvInitialiseTaskLists+0x6c>)
 800dc5a:	f7fe f8dd 	bl	800be18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dc5e:	480c      	ldr	r0, [pc, #48]	; (800dc90 <prvInitialiseTaskLists+0x70>)
 800dc60:	f7fe f8da 	bl	800be18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dc64:	480b      	ldr	r0, [pc, #44]	; (800dc94 <prvInitialiseTaskLists+0x74>)
 800dc66:	f7fe f8d7 	bl	800be18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dc6a:	4b0b      	ldr	r3, [pc, #44]	; (800dc98 <prvInitialiseTaskLists+0x78>)
 800dc6c:	4a05      	ldr	r2, [pc, #20]	; (800dc84 <prvInitialiseTaskLists+0x64>)
 800dc6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dc70:	4b0a      	ldr	r3, [pc, #40]	; (800dc9c <prvInitialiseTaskLists+0x7c>)
 800dc72:	4a05      	ldr	r2, [pc, #20]	; (800dc88 <prvInitialiseTaskLists+0x68>)
 800dc74:	601a      	str	r2, [r3, #0]
}
 800dc76:	bf00      	nop
 800dc78:	3708      	adds	r7, #8
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	200027f4 	.word	0x200027f4
 800dc84:	20002c54 	.word	0x20002c54
 800dc88:	20002c68 	.word	0x20002c68
 800dc8c:	20002c84 	.word	0x20002c84
 800dc90:	20002c98 	.word	0x20002c98
 800dc94:	20002cb0 	.word	0x20002cb0
 800dc98:	20002c7c 	.word	0x20002c7c
 800dc9c:	20002c80 	.word	0x20002c80

0800dca0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b082      	sub	sp, #8
 800dca4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dca6:	e019      	b.n	800dcdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dca8:	f001 f8b0 	bl	800ee0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcac:	4b0f      	ldr	r3, [pc, #60]	; (800dcec <prvCheckTasksWaitingTermination+0x4c>)
 800dcae:	68db      	ldr	r3, [r3, #12]
 800dcb0:	68db      	ldr	r3, [r3, #12]
 800dcb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	3304      	adds	r3, #4
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7fe f937 	bl	800bf2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dcbe:	4b0c      	ldr	r3, [pc, #48]	; (800dcf0 <prvCheckTasksWaitingTermination+0x50>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	3b01      	subs	r3, #1
 800dcc4:	4a0a      	ldr	r2, [pc, #40]	; (800dcf0 <prvCheckTasksWaitingTermination+0x50>)
 800dcc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dcc8:	4b0a      	ldr	r3, [pc, #40]	; (800dcf4 <prvCheckTasksWaitingTermination+0x54>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	3b01      	subs	r3, #1
 800dcce:	4a09      	ldr	r2, [pc, #36]	; (800dcf4 <prvCheckTasksWaitingTermination+0x54>)
 800dcd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dcd2:	f001 f8c9 	bl	800ee68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 f80e 	bl	800dcf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dcdc:	4b05      	ldr	r3, [pc, #20]	; (800dcf4 <prvCheckTasksWaitingTermination+0x54>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d1e1      	bne.n	800dca8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dce4:	bf00      	nop
 800dce6:	3708      	adds	r7, #8
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}
 800dcec:	20002c98 	.word	0x20002c98
 800dcf0:	20002cc4 	.word	0x20002cc4
 800dcf4:	20002cac 	.word	0x20002cac

0800dcf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d108      	bne.n	800dd1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f001 fa58 	bl	800f1c4 <vPortFree>
				vPortFree( pxTCB );
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f001 fa55 	bl	800f1c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dd1a:	e017      	b.n	800dd4c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	d103      	bne.n	800dd2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f001 fa4c 	bl	800f1c4 <vPortFree>
	}
 800dd2c:	e00e      	b.n	800dd4c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dd34:	2b02      	cmp	r3, #2
 800dd36:	d009      	beq.n	800dd4c <prvDeleteTCB+0x54>
 800dd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd3c:	f383 8811 	msr	BASEPRI, r3
 800dd40:	f3bf 8f6f 	isb	sy
 800dd44:	f3bf 8f4f 	dsb	sy
 800dd48:	60fb      	str	r3, [r7, #12]
 800dd4a:	e7fe      	b.n	800dd4a <prvDeleteTCB+0x52>
	}
 800dd4c:	bf00      	nop
 800dd4e:	3710      	adds	r7, #16
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dd54:	b480      	push	{r7}
 800dd56:	b083      	sub	sp, #12
 800dd58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd5a:	4b0c      	ldr	r3, [pc, #48]	; (800dd8c <prvResetNextTaskUnblockTime+0x38>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d104      	bne.n	800dd6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dd64:	4b0a      	ldr	r3, [pc, #40]	; (800dd90 <prvResetNextTaskUnblockTime+0x3c>)
 800dd66:	f04f 32ff 	mov.w	r2, #4294967295
 800dd6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dd6c:	e008      	b.n	800dd80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd6e:	4b07      	ldr	r3, [pc, #28]	; (800dd8c <prvResetNextTaskUnblockTime+0x38>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	68db      	ldr	r3, [r3, #12]
 800dd74:	68db      	ldr	r3, [r3, #12]
 800dd76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	4a04      	ldr	r2, [pc, #16]	; (800dd90 <prvResetNextTaskUnblockTime+0x3c>)
 800dd7e:	6013      	str	r3, [r2, #0]
}
 800dd80:	bf00      	nop
 800dd82:	370c      	adds	r7, #12
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr
 800dd8c:	20002c7c 	.word	0x20002c7c
 800dd90:	20002ce4 	.word	0x20002ce4

0800dd94 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800dd9a:	4b05      	ldr	r3, [pc, #20]	; (800ddb0 <xTaskGetCurrentTaskHandle+0x1c>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800dda0:	687b      	ldr	r3, [r7, #4]
	}
 800dda2:	4618      	mov	r0, r3
 800dda4:	370c      	adds	r7, #12
 800dda6:	46bd      	mov	sp, r7
 800dda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop
 800ddb0:	200027f0 	.word	0x200027f0

0800ddb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b083      	sub	sp, #12
 800ddb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ddba:	4b0b      	ldr	r3, [pc, #44]	; (800dde8 <xTaskGetSchedulerState+0x34>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d102      	bne.n	800ddc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	607b      	str	r3, [r7, #4]
 800ddc6:	e008      	b.n	800ddda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddc8:	4b08      	ldr	r3, [pc, #32]	; (800ddec <xTaskGetSchedulerState+0x38>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d102      	bne.n	800ddd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ddd0:	2302      	movs	r3, #2
 800ddd2:	607b      	str	r3, [r7, #4]
 800ddd4:	e001      	b.n	800ddda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ddda:	687b      	ldr	r3, [r7, #4]
	}
 800dddc:	4618      	mov	r0, r3
 800ddde:	370c      	adds	r7, #12
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr
 800dde8:	20002cd0 	.word	0x20002cd0
 800ddec:	20002cec 	.word	0x20002cec

0800ddf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d051      	beq.n	800deaa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de0a:	4b2a      	ldr	r3, [pc, #168]	; (800deb4 <xTaskPriorityInherit+0xc4>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de10:	429a      	cmp	r2, r3
 800de12:	d241      	bcs.n	800de98 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	699b      	ldr	r3, [r3, #24]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	db06      	blt.n	800de2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de1c:	4b25      	ldr	r3, [pc, #148]	; (800deb4 <xTaskPriorityInherit+0xc4>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	6959      	ldr	r1, [r3, #20]
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de32:	4613      	mov	r3, r2
 800de34:	009b      	lsls	r3, r3, #2
 800de36:	4413      	add	r3, r2
 800de38:	009b      	lsls	r3, r3, #2
 800de3a:	4a1f      	ldr	r2, [pc, #124]	; (800deb8 <xTaskPriorityInherit+0xc8>)
 800de3c:	4413      	add	r3, r2
 800de3e:	4299      	cmp	r1, r3
 800de40:	d122      	bne.n	800de88 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	3304      	adds	r3, #4
 800de46:	4618      	mov	r0, r3
 800de48:	f7fe f870 	bl	800bf2c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800de4c:	4b19      	ldr	r3, [pc, #100]	; (800deb4 <xTaskPriorityInherit+0xc4>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de5a:	4b18      	ldr	r3, [pc, #96]	; (800debc <xTaskPriorityInherit+0xcc>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d903      	bls.n	800de6a <xTaskPriorityInherit+0x7a>
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de66:	4a15      	ldr	r2, [pc, #84]	; (800debc <xTaskPriorityInherit+0xcc>)
 800de68:	6013      	str	r3, [r2, #0]
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de6e:	4613      	mov	r3, r2
 800de70:	009b      	lsls	r3, r3, #2
 800de72:	4413      	add	r3, r2
 800de74:	009b      	lsls	r3, r3, #2
 800de76:	4a10      	ldr	r2, [pc, #64]	; (800deb8 <xTaskPriorityInherit+0xc8>)
 800de78:	441a      	add	r2, r3
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	3304      	adds	r3, #4
 800de7e:	4619      	mov	r1, r3
 800de80:	4610      	mov	r0, r2
 800de82:	f7fd fff6 	bl	800be72 <vListInsertEnd>
 800de86:	e004      	b.n	800de92 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800de88:	4b0a      	ldr	r3, [pc, #40]	; (800deb4 <xTaskPriorityInherit+0xc4>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800de92:	2301      	movs	r3, #1
 800de94:	60fb      	str	r3, [r7, #12]
 800de96:	e008      	b.n	800deaa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de9c:	4b05      	ldr	r3, [pc, #20]	; (800deb4 <xTaskPriorityInherit+0xc4>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d201      	bcs.n	800deaa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dea6:	2301      	movs	r3, #1
 800dea8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800deaa:	68fb      	ldr	r3, [r7, #12]
	}
 800deac:	4618      	mov	r0, r3
 800deae:	3710      	adds	r7, #16
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	200027f0 	.word	0x200027f0
 800deb8:	200027f4 	.word	0x200027f4
 800debc:	20002ccc 	.word	0x20002ccc

0800dec0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b086      	sub	sp, #24
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800decc:	2300      	movs	r3, #0
 800dece:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d054      	beq.n	800df80 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ded6:	4b2d      	ldr	r3, [pc, #180]	; (800df8c <xTaskPriorityDisinherit+0xcc>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	693a      	ldr	r2, [r7, #16]
 800dedc:	429a      	cmp	r2, r3
 800dede:	d009      	beq.n	800def4 <xTaskPriorityDisinherit+0x34>
 800dee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee4:	f383 8811 	msr	BASEPRI, r3
 800dee8:	f3bf 8f6f 	isb	sy
 800deec:	f3bf 8f4f 	dsb	sy
 800def0:	60fb      	str	r3, [r7, #12]
 800def2:	e7fe      	b.n	800def2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800def8:	2b00      	cmp	r3, #0
 800defa:	d109      	bne.n	800df10 <xTaskPriorityDisinherit+0x50>
 800defc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df00:	f383 8811 	msr	BASEPRI, r3
 800df04:	f3bf 8f6f 	isb	sy
 800df08:	f3bf 8f4f 	dsb	sy
 800df0c:	60bb      	str	r3, [r7, #8]
 800df0e:	e7fe      	b.n	800df0e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df14:	1e5a      	subs	r2, r3, #1
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df22:	429a      	cmp	r2, r3
 800df24:	d02c      	beq.n	800df80 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d128      	bne.n	800df80 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	3304      	adds	r3, #4
 800df32:	4618      	mov	r0, r3
 800df34:	f7fd fffa 	bl	800bf2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df3c:	693b      	ldr	r3, [r7, #16]
 800df3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df50:	4b0f      	ldr	r3, [pc, #60]	; (800df90 <xTaskPriorityDisinherit+0xd0>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	429a      	cmp	r2, r3
 800df56:	d903      	bls.n	800df60 <xTaskPriorityDisinherit+0xa0>
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df5c:	4a0c      	ldr	r2, [pc, #48]	; (800df90 <xTaskPriorityDisinherit+0xd0>)
 800df5e:	6013      	str	r3, [r2, #0]
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df64:	4613      	mov	r3, r2
 800df66:	009b      	lsls	r3, r3, #2
 800df68:	4413      	add	r3, r2
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	4a09      	ldr	r2, [pc, #36]	; (800df94 <xTaskPriorityDisinherit+0xd4>)
 800df6e:	441a      	add	r2, r3
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	3304      	adds	r3, #4
 800df74:	4619      	mov	r1, r3
 800df76:	4610      	mov	r0, r2
 800df78:	f7fd ff7b 	bl	800be72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800df7c:	2301      	movs	r3, #1
 800df7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800df80:	697b      	ldr	r3, [r7, #20]
	}
 800df82:	4618      	mov	r0, r3
 800df84:	3718      	adds	r7, #24
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	200027f0 	.word	0x200027f0
 800df90:	20002ccc 	.word	0x20002ccc
 800df94:	200027f4 	.word	0x200027f4

0800df98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b088      	sub	sp, #32
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
 800dfa0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d068      	beq.n	800e082 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dfb0:	69bb      	ldr	r3, [r7, #24]
 800dfb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d109      	bne.n	800dfcc <vTaskPriorityDisinheritAfterTimeout+0x34>
 800dfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfbc:	f383 8811 	msr	BASEPRI, r3
 800dfc0:	f3bf 8f6f 	isb	sy
 800dfc4:	f3bf 8f4f 	dsb	sy
 800dfc8:	60fb      	str	r3, [r7, #12]
 800dfca:	e7fe      	b.n	800dfca <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dfcc:	69bb      	ldr	r3, [r7, #24]
 800dfce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfd0:	683a      	ldr	r2, [r7, #0]
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d902      	bls.n	800dfdc <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	61fb      	str	r3, [r7, #28]
 800dfda:	e002      	b.n	800dfe2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dfdc:	69bb      	ldr	r3, [r7, #24]
 800dfde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfe0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dfe2:	69bb      	ldr	r3, [r7, #24]
 800dfe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfe6:	69fa      	ldr	r2, [r7, #28]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d04a      	beq.n	800e082 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dfec:	69bb      	ldr	r3, [r7, #24]
 800dfee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dff0:	697a      	ldr	r2, [r7, #20]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d145      	bne.n	800e082 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dff6:	4b25      	ldr	r3, [pc, #148]	; (800e08c <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	69ba      	ldr	r2, [r7, #24]
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d109      	bne.n	800e014 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800e000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e004:	f383 8811 	msr	BASEPRI, r3
 800e008:	f3bf 8f6f 	isb	sy
 800e00c:	f3bf 8f4f 	dsb	sy
 800e010:	60bb      	str	r3, [r7, #8]
 800e012:	e7fe      	b.n	800e012 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e014:	69bb      	ldr	r3, [r7, #24]
 800e016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e018:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e01a:	69bb      	ldr	r3, [r7, #24]
 800e01c:	69fa      	ldr	r2, [r7, #28]
 800e01e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	699b      	ldr	r3, [r3, #24]
 800e024:	2b00      	cmp	r3, #0
 800e026:	db04      	blt.n	800e032 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e02e:	69bb      	ldr	r3, [r7, #24]
 800e030:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e032:	69bb      	ldr	r3, [r7, #24]
 800e034:	6959      	ldr	r1, [r3, #20]
 800e036:	693a      	ldr	r2, [r7, #16]
 800e038:	4613      	mov	r3, r2
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	4413      	add	r3, r2
 800e03e:	009b      	lsls	r3, r3, #2
 800e040:	4a13      	ldr	r2, [pc, #76]	; (800e090 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e042:	4413      	add	r3, r2
 800e044:	4299      	cmp	r1, r3
 800e046:	d11c      	bne.n	800e082 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e048:	69bb      	ldr	r3, [r7, #24]
 800e04a:	3304      	adds	r3, #4
 800e04c:	4618      	mov	r0, r3
 800e04e:	f7fd ff6d 	bl	800bf2c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e052:	69bb      	ldr	r3, [r7, #24]
 800e054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e056:	4b0f      	ldr	r3, [pc, #60]	; (800e094 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d903      	bls.n	800e066 <vTaskPriorityDisinheritAfterTimeout+0xce>
 800e05e:	69bb      	ldr	r3, [r7, #24]
 800e060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e062:	4a0c      	ldr	r2, [pc, #48]	; (800e094 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e064:	6013      	str	r3, [r2, #0]
 800e066:	69bb      	ldr	r3, [r7, #24]
 800e068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e06a:	4613      	mov	r3, r2
 800e06c:	009b      	lsls	r3, r3, #2
 800e06e:	4413      	add	r3, r2
 800e070:	009b      	lsls	r3, r3, #2
 800e072:	4a07      	ldr	r2, [pc, #28]	; (800e090 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e074:	441a      	add	r2, r3
 800e076:	69bb      	ldr	r3, [r7, #24]
 800e078:	3304      	adds	r3, #4
 800e07a:	4619      	mov	r1, r3
 800e07c:	4610      	mov	r0, r2
 800e07e:	f7fd fef8 	bl	800be72 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e082:	bf00      	nop
 800e084:	3720      	adds	r7, #32
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	200027f0 	.word	0x200027f0
 800e090:	200027f4 	.word	0x200027f4
 800e094:	20002ccc 	.word	0x20002ccc

0800e098 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e098:	b480      	push	{r7}
 800e09a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e09c:	4b07      	ldr	r3, [pc, #28]	; (800e0bc <pvTaskIncrementMutexHeldCount+0x24>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d004      	beq.n	800e0ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e0a4:	4b05      	ldr	r3, [pc, #20]	; (800e0bc <pvTaskIncrementMutexHeldCount+0x24>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0aa:	3201      	adds	r2, #1
 800e0ac:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e0ae:	4b03      	ldr	r3, [pc, #12]	; (800e0bc <pvTaskIncrementMutexHeldCount+0x24>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
	}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr
 800e0bc:	200027f0 	.word	0x200027f0

0800e0c0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b086      	sub	sp, #24
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	60f8      	str	r0, [r7, #12]
 800e0c8:	60b9      	str	r1, [r7, #8]
 800e0ca:	607a      	str	r2, [r7, #4]
 800e0cc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800e0ce:	f000 fe9d 	bl	800ee0c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e0d2:	4b26      	ldr	r3, [pc, #152]	; (800e16c <xTaskNotifyWait+0xac>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	2b02      	cmp	r3, #2
 800e0de:	d01a      	beq.n	800e116 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800e0e0:	4b22      	ldr	r3, [pc, #136]	; (800e16c <xTaskNotifyWait+0xac>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e0e6:	68fa      	ldr	r2, [r7, #12]
 800e0e8:	43d2      	mvns	r2, r2
 800e0ea:	400a      	ands	r2, r1
 800e0ec:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800e0ee:	4b1f      	ldr	r3, [pc, #124]	; (800e16c <xTaskNotifyWait+0xac>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d00b      	beq.n	800e116 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e0fe:	2101      	movs	r1, #1
 800e100:	6838      	ldr	r0, [r7, #0]
 800e102:	f000 f9c5 	bl	800e490 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800e106:	4b1a      	ldr	r3, [pc, #104]	; (800e170 <xTaskNotifyWait+0xb0>)
 800e108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e10c:	601a      	str	r2, [r3, #0]
 800e10e:	f3bf 8f4f 	dsb	sy
 800e112:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e116:	f000 fea7 	bl	800ee68 <vPortExitCritical>

		taskENTER_CRITICAL();
 800e11a:	f000 fe77 	bl	800ee0c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d004      	beq.n	800e12e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800e124:	4b11      	ldr	r3, [pc, #68]	; (800e16c <xTaskNotifyWait+0xac>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e12e:	4b0f      	ldr	r3, [pc, #60]	; (800e16c <xTaskNotifyWait+0xac>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e136:	b2db      	uxtb	r3, r3
 800e138:	2b02      	cmp	r3, #2
 800e13a:	d002      	beq.n	800e142 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800e13c:	2300      	movs	r3, #0
 800e13e:	617b      	str	r3, [r7, #20]
 800e140:	e008      	b.n	800e154 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800e142:	4b0a      	ldr	r3, [pc, #40]	; (800e16c <xTaskNotifyWait+0xac>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e148:	68ba      	ldr	r2, [r7, #8]
 800e14a:	43d2      	mvns	r2, r2
 800e14c:	400a      	ands	r2, r1
 800e14e:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800e150:	2301      	movs	r3, #1
 800e152:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e154:	4b05      	ldr	r3, [pc, #20]	; (800e16c <xTaskNotifyWait+0xac>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2200      	movs	r2, #0
 800e15a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800e15e:	f000 fe83 	bl	800ee68 <vPortExitCritical>

		return xReturn;
 800e162:	697b      	ldr	r3, [r7, #20]
	}
 800e164:	4618      	mov	r0, r3
 800e166:	3718      	adds	r7, #24
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	200027f0 	.word	0x200027f0
 800e170:	e000ed04 	.word	0xe000ed04

0800e174 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e174:	b580      	push	{r7, lr}
 800e176:	b08a      	sub	sp, #40	; 0x28
 800e178:	af00      	add	r7, sp, #0
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	60b9      	str	r1, [r7, #8]
 800e17e:	603b      	str	r3, [r7, #0]
 800e180:	4613      	mov	r3, r2
 800e182:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800e184:	2301      	movs	r3, #1
 800e186:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d109      	bne.n	800e1a2 <xTaskGenericNotify+0x2e>
 800e18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e192:	f383 8811 	msr	BASEPRI, r3
 800e196:	f3bf 8f6f 	isb	sy
 800e19a:	f3bf 8f4f 	dsb	sy
 800e19e:	61bb      	str	r3, [r7, #24]
 800e1a0:	e7fe      	b.n	800e1a0 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800e1a6:	f000 fe31 	bl	800ee0c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d003      	beq.n	800e1b8 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e1b0:	6a3b      	ldr	r3, [r7, #32]
 800e1b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e1b8:	6a3b      	ldr	r3, [r7, #32]
 800e1ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e1be:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e1c0:	6a3b      	ldr	r3, [r7, #32]
 800e1c2:	2202      	movs	r2, #2
 800e1c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800e1c8:	79fb      	ldrb	r3, [r7, #7]
 800e1ca:	2b04      	cmp	r3, #4
 800e1cc:	d827      	bhi.n	800e21e <xTaskGenericNotify+0xaa>
 800e1ce:	a201      	add	r2, pc, #4	; (adr r2, 800e1d4 <xTaskGenericNotify+0x60>)
 800e1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1d4:	0800e23d 	.word	0x0800e23d
 800e1d8:	0800e1e9 	.word	0x0800e1e9
 800e1dc:	0800e1f7 	.word	0x0800e1f7
 800e1e0:	0800e203 	.word	0x0800e203
 800e1e4:	0800e20b 	.word	0x0800e20b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e1e8:	6a3b      	ldr	r3, [r7, #32]
 800e1ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	431a      	orrs	r2, r3
 800e1f0:	6a3b      	ldr	r3, [r7, #32]
 800e1f2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e1f4:	e025      	b.n	800e242 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e1f6:	6a3b      	ldr	r3, [r7, #32]
 800e1f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1fa:	1c5a      	adds	r2, r3, #1
 800e1fc:	6a3b      	ldr	r3, [r7, #32]
 800e1fe:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e200:	e01f      	b.n	800e242 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e202:	6a3b      	ldr	r3, [r7, #32]
 800e204:	68ba      	ldr	r2, [r7, #8]
 800e206:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e208:	e01b      	b.n	800e242 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e20a:	7ffb      	ldrb	r3, [r7, #31]
 800e20c:	2b02      	cmp	r3, #2
 800e20e:	d003      	beq.n	800e218 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e210:	6a3b      	ldr	r3, [r7, #32]
 800e212:	68ba      	ldr	r2, [r7, #8]
 800e214:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e216:	e014      	b.n	800e242 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 800e218:	2300      	movs	r3, #0
 800e21a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800e21c:	e011      	b.n	800e242 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800e21e:	6a3b      	ldr	r3, [r7, #32]
 800e220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e226:	d00b      	beq.n	800e240 <xTaskGenericNotify+0xcc>
 800e228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e22c:	f383 8811 	msr	BASEPRI, r3
 800e230:	f3bf 8f6f 	isb	sy
 800e234:	f3bf 8f4f 	dsb	sy
 800e238:	617b      	str	r3, [r7, #20]
 800e23a:	e7fe      	b.n	800e23a <xTaskGenericNotify+0xc6>
					break;
 800e23c:	bf00      	nop
 800e23e:	e000      	b.n	800e242 <xTaskGenericNotify+0xce>

					break;
 800e240:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e242:	7ffb      	ldrb	r3, [r7, #31]
 800e244:	2b01      	cmp	r3, #1
 800e246:	d13b      	bne.n	800e2c0 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e248:	6a3b      	ldr	r3, [r7, #32]
 800e24a:	3304      	adds	r3, #4
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7fd fe6d 	bl	800bf2c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e252:	6a3b      	ldr	r3, [r7, #32]
 800e254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e256:	4b1e      	ldr	r3, [pc, #120]	; (800e2d0 <xTaskGenericNotify+0x15c>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d903      	bls.n	800e266 <xTaskGenericNotify+0xf2>
 800e25e:	6a3b      	ldr	r3, [r7, #32]
 800e260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e262:	4a1b      	ldr	r2, [pc, #108]	; (800e2d0 <xTaskGenericNotify+0x15c>)
 800e264:	6013      	str	r3, [r2, #0]
 800e266:	6a3b      	ldr	r3, [r7, #32]
 800e268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e26a:	4613      	mov	r3, r2
 800e26c:	009b      	lsls	r3, r3, #2
 800e26e:	4413      	add	r3, r2
 800e270:	009b      	lsls	r3, r3, #2
 800e272:	4a18      	ldr	r2, [pc, #96]	; (800e2d4 <xTaskGenericNotify+0x160>)
 800e274:	441a      	add	r2, r3
 800e276:	6a3b      	ldr	r3, [r7, #32]
 800e278:	3304      	adds	r3, #4
 800e27a:	4619      	mov	r1, r3
 800e27c:	4610      	mov	r0, r2
 800e27e:	f7fd fdf8 	bl	800be72 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e282:	6a3b      	ldr	r3, [r7, #32]
 800e284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e286:	2b00      	cmp	r3, #0
 800e288:	d009      	beq.n	800e29e <xTaskGenericNotify+0x12a>
 800e28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28e:	f383 8811 	msr	BASEPRI, r3
 800e292:	f3bf 8f6f 	isb	sy
 800e296:	f3bf 8f4f 	dsb	sy
 800e29a:	613b      	str	r3, [r7, #16]
 800e29c:	e7fe      	b.n	800e29c <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 800e29e:	f7ff fd59 	bl	800dd54 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e2a2:	6a3b      	ldr	r3, [r7, #32]
 800e2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2a6:	4b0c      	ldr	r3, [pc, #48]	; (800e2d8 <xTaskGenericNotify+0x164>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d907      	bls.n	800e2c0 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800e2b0:	4b0a      	ldr	r3, [pc, #40]	; (800e2dc <xTaskGenericNotify+0x168>)
 800e2b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2b6:	601a      	str	r2, [r3, #0]
 800e2b8:	f3bf 8f4f 	dsb	sy
 800e2bc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e2c0:	f000 fdd2 	bl	800ee68 <vPortExitCritical>

		return xReturn;
 800e2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3728      	adds	r7, #40	; 0x28
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	20002ccc 	.word	0x20002ccc
 800e2d4:	200027f4 	.word	0x200027f4
 800e2d8:	200027f0 	.word	0x200027f0
 800e2dc:	e000ed04 	.word	0xe000ed04

0800e2e0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b08e      	sub	sp, #56	; 0x38
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	603b      	str	r3, [r7, #0]
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d109      	bne.n	800e30e <xTaskGenericNotifyFromISR+0x2e>
 800e2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2fe:	f383 8811 	msr	BASEPRI, r3
 800e302:	f3bf 8f6f 	isb	sy
 800e306:	f3bf 8f4f 	dsb	sy
 800e30a:	627b      	str	r3, [r7, #36]	; 0x24
 800e30c:	e7fe      	b.n	800e30c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e30e:	f000 fe59 	bl	800efc4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800e316:	f3ef 8211 	mrs	r2, BASEPRI
 800e31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e31e:	f383 8811 	msr	BASEPRI, r3
 800e322:	f3bf 8f6f 	isb	sy
 800e326:	f3bf 8f4f 	dsb	sy
 800e32a:	623a      	str	r2, [r7, #32]
 800e32c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800e32e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e330:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d003      	beq.n	800e340 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e342:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34c:	2202      	movs	r2, #2
 800e34e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800e352:	79fb      	ldrb	r3, [r7, #7]
 800e354:	2b04      	cmp	r3, #4
 800e356:	d829      	bhi.n	800e3ac <xTaskGenericNotifyFromISR+0xcc>
 800e358:	a201      	add	r2, pc, #4	; (adr r2, 800e360 <xTaskGenericNotifyFromISR+0x80>)
 800e35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e35e:	bf00      	nop
 800e360:	0800e3cb 	.word	0x0800e3cb
 800e364:	0800e375 	.word	0x0800e375
 800e368:	0800e383 	.word	0x0800e383
 800e36c:	0800e38f 	.word	0x0800e38f
 800e370:	0800e397 	.word	0x0800e397
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e376:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	431a      	orrs	r2, r3
 800e37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e37e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e380:	e026      	b.n	800e3d0 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e386:	1c5a      	adds	r2, r3, #1
 800e388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e38c:	e020      	b.n	800e3d0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e390:	68ba      	ldr	r2, [r7, #8]
 800e392:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e394:	e01c      	b.n	800e3d0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e396:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e39a:	2b02      	cmp	r3, #2
 800e39c:	d003      	beq.n	800e3a6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a0:	68ba      	ldr	r2, [r7, #8]
 800e3a2:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e3a4:	e014      	b.n	800e3d0 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800e3aa:	e011      	b.n	800e3d0 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800e3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3b4:	d00b      	beq.n	800e3ce <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800e3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ba:	f383 8811 	msr	BASEPRI, r3
 800e3be:	f3bf 8f6f 	isb	sy
 800e3c2:	f3bf 8f4f 	dsb	sy
 800e3c6:	61bb      	str	r3, [r7, #24]
 800e3c8:	e7fe      	b.n	800e3c8 <xTaskGenericNotifyFromISR+0xe8>
					break;
 800e3ca:	bf00      	nop
 800e3cc:	e000      	b.n	800e3d0 <xTaskGenericNotifyFromISR+0xf0>
					break;
 800e3ce:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e3d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d145      	bne.n	800e464 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d009      	beq.n	800e3f4 <xTaskGenericNotifyFromISR+0x114>
 800e3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e4:	f383 8811 	msr	BASEPRI, r3
 800e3e8:	f3bf 8f6f 	isb	sy
 800e3ec:	f3bf 8f4f 	dsb	sy
 800e3f0:	617b      	str	r3, [r7, #20]
 800e3f2:	e7fe      	b.n	800e3f2 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3f4:	4b20      	ldr	r3, [pc, #128]	; (800e478 <xTaskGenericNotifyFromISR+0x198>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d11d      	bne.n	800e438 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3fe:	3304      	adds	r3, #4
 800e400:	4618      	mov	r0, r3
 800e402:	f7fd fd93 	bl	800bf2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e40a:	4b1c      	ldr	r3, [pc, #112]	; (800e47c <xTaskGenericNotifyFromISR+0x19c>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	429a      	cmp	r2, r3
 800e410:	d903      	bls.n	800e41a <xTaskGenericNotifyFromISR+0x13a>
 800e412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e416:	4a19      	ldr	r2, [pc, #100]	; (800e47c <xTaskGenericNotifyFromISR+0x19c>)
 800e418:	6013      	str	r3, [r2, #0]
 800e41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e41e:	4613      	mov	r3, r2
 800e420:	009b      	lsls	r3, r3, #2
 800e422:	4413      	add	r3, r2
 800e424:	009b      	lsls	r3, r3, #2
 800e426:	4a16      	ldr	r2, [pc, #88]	; (800e480 <xTaskGenericNotifyFromISR+0x1a0>)
 800e428:	441a      	add	r2, r3
 800e42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e42c:	3304      	adds	r3, #4
 800e42e:	4619      	mov	r1, r3
 800e430:	4610      	mov	r0, r2
 800e432:	f7fd fd1e 	bl	800be72 <vListInsertEnd>
 800e436:	e005      	b.n	800e444 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800e438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43a:	3318      	adds	r3, #24
 800e43c:	4619      	mov	r1, r3
 800e43e:	4811      	ldr	r0, [pc, #68]	; (800e484 <xTaskGenericNotifyFromISR+0x1a4>)
 800e440:	f7fd fd17 	bl	800be72 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e448:	4b0f      	ldr	r3, [pc, #60]	; (800e488 <xTaskGenericNotifyFromISR+0x1a8>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e44e:	429a      	cmp	r2, r3
 800e450:	d908      	bls.n	800e464 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800e452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e454:	2b00      	cmp	r3, #0
 800e456:	d002      	beq.n	800e45e <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800e458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e45a:	2201      	movs	r2, #1
 800e45c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800e45e:	4b0b      	ldr	r3, [pc, #44]	; (800e48c <xTaskGenericNotifyFromISR+0x1ac>)
 800e460:	2201      	movs	r2, #1
 800e462:	601a      	str	r2, [r3, #0]
 800e464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e466:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800e46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800e470:	4618      	mov	r0, r3
 800e472:	3738      	adds	r7, #56	; 0x38
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	20002cec 	.word	0x20002cec
 800e47c:	20002ccc 	.word	0x20002ccc
 800e480:	200027f4 	.word	0x200027f4
 800e484:	20002c84 	.word	0x20002c84
 800e488:	200027f0 	.word	0x200027f0
 800e48c:	20002cd8 	.word	0x20002cd8

0800e490 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b084      	sub	sp, #16
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e49a:	4b21      	ldr	r3, [pc, #132]	; (800e520 <prvAddCurrentTaskToDelayedList+0x90>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4a0:	4b20      	ldr	r3, [pc, #128]	; (800e524 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	3304      	adds	r3, #4
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7fd fd40 	bl	800bf2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4b2:	d10a      	bne.n	800e4ca <prvAddCurrentTaskToDelayedList+0x3a>
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d007      	beq.n	800e4ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4ba:	4b1a      	ldr	r3, [pc, #104]	; (800e524 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	3304      	adds	r3, #4
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	4819      	ldr	r0, [pc, #100]	; (800e528 <prvAddCurrentTaskToDelayedList+0x98>)
 800e4c4:	f7fd fcd5 	bl	800be72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e4c8:	e026      	b.n	800e518 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e4ca:	68fa      	ldr	r2, [r7, #12]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	4413      	add	r3, r2
 800e4d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e4d2:	4b14      	ldr	r3, [pc, #80]	; (800e524 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	68ba      	ldr	r2, [r7, #8]
 800e4d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e4da:	68ba      	ldr	r2, [r7, #8]
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d209      	bcs.n	800e4f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4e2:	4b12      	ldr	r3, [pc, #72]	; (800e52c <prvAddCurrentTaskToDelayedList+0x9c>)
 800e4e4:	681a      	ldr	r2, [r3, #0]
 800e4e6:	4b0f      	ldr	r3, [pc, #60]	; (800e524 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	3304      	adds	r3, #4
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	4610      	mov	r0, r2
 800e4f0:	f7fd fce3 	bl	800beba <vListInsert>
}
 800e4f4:	e010      	b.n	800e518 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4f6:	4b0e      	ldr	r3, [pc, #56]	; (800e530 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	4b0a      	ldr	r3, [pc, #40]	; (800e524 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	3304      	adds	r3, #4
 800e500:	4619      	mov	r1, r3
 800e502:	4610      	mov	r0, r2
 800e504:	f7fd fcd9 	bl	800beba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e508:	4b0a      	ldr	r3, [pc, #40]	; (800e534 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	68ba      	ldr	r2, [r7, #8]
 800e50e:	429a      	cmp	r2, r3
 800e510:	d202      	bcs.n	800e518 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e512:	4a08      	ldr	r2, [pc, #32]	; (800e534 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	6013      	str	r3, [r2, #0]
}
 800e518:	bf00      	nop
 800e51a:	3710      	adds	r7, #16
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}
 800e520:	20002cc8 	.word	0x20002cc8
 800e524:	200027f0 	.word	0x200027f0
 800e528:	20002cb0 	.word	0x20002cb0
 800e52c:	20002c80 	.word	0x20002c80
 800e530:	20002c7c 	.word	0x20002c7c
 800e534:	20002ce4 	.word	0x20002ce4

0800e538 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b08a      	sub	sp, #40	; 0x28
 800e53c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e53e:	2300      	movs	r3, #0
 800e540:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e542:	f000 faff 	bl	800eb44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e546:	4b1c      	ldr	r3, [pc, #112]	; (800e5b8 <xTimerCreateTimerTask+0x80>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d021      	beq.n	800e592 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e54e:	2300      	movs	r3, #0
 800e550:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e552:	2300      	movs	r3, #0
 800e554:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e556:	1d3a      	adds	r2, r7, #4
 800e558:	f107 0108 	add.w	r1, r7, #8
 800e55c:	f107 030c 	add.w	r3, r7, #12
 800e560:	4618      	mov	r0, r3
 800e562:	f7fd fc3f 	bl	800bde4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e566:	6879      	ldr	r1, [r7, #4]
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	68fa      	ldr	r2, [r7, #12]
 800e56c:	9202      	str	r2, [sp, #8]
 800e56e:	9301      	str	r3, [sp, #4]
 800e570:	2302      	movs	r3, #2
 800e572:	9300      	str	r3, [sp, #0]
 800e574:	2300      	movs	r3, #0
 800e576:	460a      	mov	r2, r1
 800e578:	4910      	ldr	r1, [pc, #64]	; (800e5bc <xTimerCreateTimerTask+0x84>)
 800e57a:	4811      	ldr	r0, [pc, #68]	; (800e5c0 <xTimerCreateTimerTask+0x88>)
 800e57c:	f7fe fda2 	bl	800d0c4 <xTaskCreateStatic>
 800e580:	4602      	mov	r2, r0
 800e582:	4b10      	ldr	r3, [pc, #64]	; (800e5c4 <xTimerCreateTimerTask+0x8c>)
 800e584:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e586:	4b0f      	ldr	r3, [pc, #60]	; (800e5c4 <xTimerCreateTimerTask+0x8c>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d001      	beq.n	800e592 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e58e:	2301      	movs	r3, #1
 800e590:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d109      	bne.n	800e5ac <xTimerCreateTimerTask+0x74>
	__asm volatile
 800e598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59c:	f383 8811 	msr	BASEPRI, r3
 800e5a0:	f3bf 8f6f 	isb	sy
 800e5a4:	f3bf 8f4f 	dsb	sy
 800e5a8:	613b      	str	r3, [r7, #16]
 800e5aa:	e7fe      	b.n	800e5aa <xTimerCreateTimerTask+0x72>
	return xReturn;
 800e5ac:	697b      	ldr	r3, [r7, #20]
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3718      	adds	r7, #24
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	20002d20 	.word	0x20002d20
 800e5bc:	08013164 	.word	0x08013164
 800e5c0:	0800e6f9 	.word	0x0800e6f9
 800e5c4:	20002d24 	.word	0x20002d24

0800e5c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b08a      	sub	sp, #40	; 0x28
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	60b9      	str	r1, [r7, #8]
 800e5d2:	607a      	str	r2, [r7, #4]
 800e5d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d109      	bne.n	800e5f4 <xTimerGenericCommand+0x2c>
 800e5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e4:	f383 8811 	msr	BASEPRI, r3
 800e5e8:	f3bf 8f6f 	isb	sy
 800e5ec:	f3bf 8f4f 	dsb	sy
 800e5f0:	623b      	str	r3, [r7, #32]
 800e5f2:	e7fe      	b.n	800e5f2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e5f4:	4b19      	ldr	r3, [pc, #100]	; (800e65c <xTimerGenericCommand+0x94>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d02a      	beq.n	800e652 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	2b05      	cmp	r3, #5
 800e60c:	dc18      	bgt.n	800e640 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e60e:	f7ff fbd1 	bl	800ddb4 <xTaskGetSchedulerState>
 800e612:	4603      	mov	r3, r0
 800e614:	2b02      	cmp	r3, #2
 800e616:	d109      	bne.n	800e62c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e618:	4b10      	ldr	r3, [pc, #64]	; (800e65c <xTimerGenericCommand+0x94>)
 800e61a:	6818      	ldr	r0, [r3, #0]
 800e61c:	f107 0110 	add.w	r1, r7, #16
 800e620:	2300      	movs	r3, #0
 800e622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e624:	f7fd ff04 	bl	800c430 <xQueueGenericSend>
 800e628:	6278      	str	r0, [r7, #36]	; 0x24
 800e62a:	e012      	b.n	800e652 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e62c:	4b0b      	ldr	r3, [pc, #44]	; (800e65c <xTimerGenericCommand+0x94>)
 800e62e:	6818      	ldr	r0, [r3, #0]
 800e630:	f107 0110 	add.w	r1, r7, #16
 800e634:	2300      	movs	r3, #0
 800e636:	2200      	movs	r2, #0
 800e638:	f7fd fefa 	bl	800c430 <xQueueGenericSend>
 800e63c:	6278      	str	r0, [r7, #36]	; 0x24
 800e63e:	e008      	b.n	800e652 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e640:	4b06      	ldr	r3, [pc, #24]	; (800e65c <xTimerGenericCommand+0x94>)
 800e642:	6818      	ldr	r0, [r3, #0]
 800e644:	f107 0110 	add.w	r1, r7, #16
 800e648:	2300      	movs	r3, #0
 800e64a:	683a      	ldr	r2, [r7, #0]
 800e64c:	f7fd ffea 	bl	800c624 <xQueueGenericSendFromISR>
 800e650:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e654:	4618      	mov	r0, r3
 800e656:	3728      	adds	r7, #40	; 0x28
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	20002d20 	.word	0x20002d20

0800e660 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b088      	sub	sp, #32
 800e664:	af02      	add	r7, sp, #8
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e66a:	4b22      	ldr	r3, [pc, #136]	; (800e6f4 <prvProcessExpiredTimer+0x94>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	68db      	ldr	r3, [r3, #12]
 800e670:	68db      	ldr	r3, [r3, #12]
 800e672:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	3304      	adds	r3, #4
 800e678:	4618      	mov	r0, r3
 800e67a:	f7fd fc57 	bl	800bf2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e684:	f003 0304 	and.w	r3, r3, #4
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d021      	beq.n	800e6d0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	699a      	ldr	r2, [r3, #24]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	18d1      	adds	r1, r2, r3
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	683a      	ldr	r2, [r7, #0]
 800e698:	6978      	ldr	r0, [r7, #20]
 800e69a:	f000 f8d1 	bl	800e840 <prvInsertTimerInActiveList>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d01e      	beq.n	800e6e2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	9300      	str	r3, [sp, #0]
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	687a      	ldr	r2, [r7, #4]
 800e6ac:	2100      	movs	r1, #0
 800e6ae:	6978      	ldr	r0, [r7, #20]
 800e6b0:	f7ff ff8a 	bl	800e5c8 <xTimerGenericCommand>
 800e6b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d112      	bne.n	800e6e2 <prvProcessExpiredTimer+0x82>
 800e6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c0:	f383 8811 	msr	BASEPRI, r3
 800e6c4:	f3bf 8f6f 	isb	sy
 800e6c8:	f3bf 8f4f 	dsb	sy
 800e6cc:	60fb      	str	r3, [r7, #12]
 800e6ce:	e7fe      	b.n	800e6ce <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6d6:	f023 0301 	bic.w	r3, r3, #1
 800e6da:	b2da      	uxtb	r2, r3
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	6a1b      	ldr	r3, [r3, #32]
 800e6e6:	6978      	ldr	r0, [r7, #20]
 800e6e8:	4798      	blx	r3
}
 800e6ea:	bf00      	nop
 800e6ec:	3718      	adds	r7, #24
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	20002d18 	.word	0x20002d18

0800e6f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e700:	f107 0308 	add.w	r3, r7, #8
 800e704:	4618      	mov	r0, r3
 800e706:	f000 f857 	bl	800e7b8 <prvGetNextExpireTime>
 800e70a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	4619      	mov	r1, r3
 800e710:	68f8      	ldr	r0, [r7, #12]
 800e712:	f000 f803 	bl	800e71c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e716:	f000 f8d5 	bl	800e8c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e71a:	e7f1      	b.n	800e700 <prvTimerTask+0x8>

0800e71c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b084      	sub	sp, #16
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e726:	f7fe ff03 	bl	800d530 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e72a:	f107 0308 	add.w	r3, r7, #8
 800e72e:	4618      	mov	r0, r3
 800e730:	f000 f866 	bl	800e800 <prvSampleTimeNow>
 800e734:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d130      	bne.n	800e79e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d10a      	bne.n	800e758 <prvProcessTimerOrBlockTask+0x3c>
 800e742:	687a      	ldr	r2, [r7, #4]
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	429a      	cmp	r2, r3
 800e748:	d806      	bhi.n	800e758 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e74a:	f7fe ff37 	bl	800d5bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e74e:	68f9      	ldr	r1, [r7, #12]
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f7ff ff85 	bl	800e660 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e756:	e024      	b.n	800e7a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d008      	beq.n	800e770 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e75e:	4b13      	ldr	r3, [pc, #76]	; (800e7ac <prvProcessTimerOrBlockTask+0x90>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d101      	bne.n	800e76c <prvProcessTimerOrBlockTask+0x50>
 800e768:	2301      	movs	r3, #1
 800e76a:	e000      	b.n	800e76e <prvProcessTimerOrBlockTask+0x52>
 800e76c:	2300      	movs	r3, #0
 800e76e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e770:	4b0f      	ldr	r3, [pc, #60]	; (800e7b0 <prvProcessTimerOrBlockTask+0x94>)
 800e772:	6818      	ldr	r0, [r3, #0]
 800e774:	687a      	ldr	r2, [r7, #4]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	1ad3      	subs	r3, r2, r3
 800e77a:	683a      	ldr	r2, [r7, #0]
 800e77c:	4619      	mov	r1, r3
 800e77e:	f7fe fc6d 	bl	800d05c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e782:	f7fe ff1b 	bl	800d5bc <xTaskResumeAll>
 800e786:	4603      	mov	r3, r0
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d10a      	bne.n	800e7a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e78c:	4b09      	ldr	r3, [pc, #36]	; (800e7b4 <prvProcessTimerOrBlockTask+0x98>)
 800e78e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e792:	601a      	str	r2, [r3, #0]
 800e794:	f3bf 8f4f 	dsb	sy
 800e798:	f3bf 8f6f 	isb	sy
}
 800e79c:	e001      	b.n	800e7a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e79e:	f7fe ff0d 	bl	800d5bc <xTaskResumeAll>
}
 800e7a2:	bf00      	nop
 800e7a4:	3710      	adds	r7, #16
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	20002d1c 	.word	0x20002d1c
 800e7b0:	20002d20 	.word	0x20002d20
 800e7b4:	e000ed04 	.word	0xe000ed04

0800e7b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b085      	sub	sp, #20
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e7c0:	4b0e      	ldr	r3, [pc, #56]	; (800e7fc <prvGetNextExpireTime+0x44>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d101      	bne.n	800e7ce <prvGetNextExpireTime+0x16>
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	e000      	b.n	800e7d0 <prvGetNextExpireTime+0x18>
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d105      	bne.n	800e7e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e7dc:	4b07      	ldr	r3, [pc, #28]	; (800e7fc <prvGetNextExpireTime+0x44>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	68db      	ldr	r3, [r3, #12]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	60fb      	str	r3, [r7, #12]
 800e7e6:	e001      	b.n	800e7ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3714      	adds	r7, #20
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f8:	4770      	bx	lr
 800e7fa:	bf00      	nop
 800e7fc:	20002d18 	.word	0x20002d18

0800e800 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b084      	sub	sp, #16
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e808:	f7fe ff74 	bl	800d6f4 <xTaskGetTickCount>
 800e80c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e80e:	4b0b      	ldr	r3, [pc, #44]	; (800e83c <prvSampleTimeNow+0x3c>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	68fa      	ldr	r2, [r7, #12]
 800e814:	429a      	cmp	r2, r3
 800e816:	d205      	bcs.n	800e824 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e818:	f000 f930 	bl	800ea7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2201      	movs	r2, #1
 800e820:	601a      	str	r2, [r3, #0]
 800e822:	e002      	b.n	800e82a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2200      	movs	r2, #0
 800e828:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e82a:	4a04      	ldr	r2, [pc, #16]	; (800e83c <prvSampleTimeNow+0x3c>)
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e830:	68fb      	ldr	r3, [r7, #12]
}
 800e832:	4618      	mov	r0, r3
 800e834:	3710      	adds	r7, #16
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}
 800e83a:	bf00      	nop
 800e83c:	20002d28 	.word	0x20002d28

0800e840 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b086      	sub	sp, #24
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	607a      	str	r2, [r7, #4]
 800e84c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e84e:	2300      	movs	r3, #0
 800e850:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	68ba      	ldr	r2, [r7, #8]
 800e856:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e85e:	68ba      	ldr	r2, [r7, #8]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	429a      	cmp	r2, r3
 800e864:	d812      	bhi.n	800e88c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e866:	687a      	ldr	r2, [r7, #4]
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	1ad2      	subs	r2, r2, r3
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	699b      	ldr	r3, [r3, #24]
 800e870:	429a      	cmp	r2, r3
 800e872:	d302      	bcc.n	800e87a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e874:	2301      	movs	r3, #1
 800e876:	617b      	str	r3, [r7, #20]
 800e878:	e01b      	b.n	800e8b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e87a:	4b10      	ldr	r3, [pc, #64]	; (800e8bc <prvInsertTimerInActiveList+0x7c>)
 800e87c:	681a      	ldr	r2, [r3, #0]
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	3304      	adds	r3, #4
 800e882:	4619      	mov	r1, r3
 800e884:	4610      	mov	r0, r2
 800e886:	f7fd fb18 	bl	800beba <vListInsert>
 800e88a:	e012      	b.n	800e8b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	429a      	cmp	r2, r3
 800e892:	d206      	bcs.n	800e8a2 <prvInsertTimerInActiveList+0x62>
 800e894:	68ba      	ldr	r2, [r7, #8]
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	429a      	cmp	r2, r3
 800e89a:	d302      	bcc.n	800e8a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e89c:	2301      	movs	r3, #1
 800e89e:	617b      	str	r3, [r7, #20]
 800e8a0:	e007      	b.n	800e8b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e8a2:	4b07      	ldr	r3, [pc, #28]	; (800e8c0 <prvInsertTimerInActiveList+0x80>)
 800e8a4:	681a      	ldr	r2, [r3, #0]
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	3304      	adds	r3, #4
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	4610      	mov	r0, r2
 800e8ae:	f7fd fb04 	bl	800beba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e8b2:	697b      	ldr	r3, [r7, #20]
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3718      	adds	r7, #24
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}
 800e8bc:	20002d1c 	.word	0x20002d1c
 800e8c0:	20002d18 	.word	0x20002d18

0800e8c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b08e      	sub	sp, #56	; 0x38
 800e8c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e8ca:	e0c6      	b.n	800ea5a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	da17      	bge.n	800e902 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e8d2:	1d3b      	adds	r3, r7, #4
 800e8d4:	3304      	adds	r3, #4
 800e8d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d109      	bne.n	800e8f2 <prvProcessReceivedCommands+0x2e>
 800e8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e2:	f383 8811 	msr	BASEPRI, r3
 800e8e6:	f3bf 8f6f 	isb	sy
 800e8ea:	f3bf 8f4f 	dsb	sy
 800e8ee:	61fb      	str	r3, [r7, #28]
 800e8f0:	e7fe      	b.n	800e8f0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8f8:	6850      	ldr	r0, [r2, #4]
 800e8fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8fc:	6892      	ldr	r2, [r2, #8]
 800e8fe:	4611      	mov	r1, r2
 800e900:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2b00      	cmp	r3, #0
 800e906:	f2c0 80a7 	blt.w	800ea58 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e910:	695b      	ldr	r3, [r3, #20]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d004      	beq.n	800e920 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e918:	3304      	adds	r3, #4
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7fd fb06 	bl	800bf2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e920:	463b      	mov	r3, r7
 800e922:	4618      	mov	r0, r3
 800e924:	f7ff ff6c 	bl	800e800 <prvSampleTimeNow>
 800e928:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2b09      	cmp	r3, #9
 800e92e:	f200 8094 	bhi.w	800ea5a <prvProcessReceivedCommands+0x196>
 800e932:	a201      	add	r2, pc, #4	; (adr r2, 800e938 <prvProcessReceivedCommands+0x74>)
 800e934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e938:	0800e961 	.word	0x0800e961
 800e93c:	0800e961 	.word	0x0800e961
 800e940:	0800e961 	.word	0x0800e961
 800e944:	0800e9d3 	.word	0x0800e9d3
 800e948:	0800e9e7 	.word	0x0800e9e7
 800e94c:	0800ea2f 	.word	0x0800ea2f
 800e950:	0800e961 	.word	0x0800e961
 800e954:	0800e961 	.word	0x0800e961
 800e958:	0800e9d3 	.word	0x0800e9d3
 800e95c:	0800e9e7 	.word	0x0800e9e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e966:	f043 0301 	orr.w	r3, r3, #1
 800e96a:	b2da      	uxtb	r2, r3
 800e96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e972:	68ba      	ldr	r2, [r7, #8]
 800e974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e976:	699b      	ldr	r3, [r3, #24]
 800e978:	18d1      	adds	r1, r2, r3
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e97e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e980:	f7ff ff5e 	bl	800e840 <prvInsertTimerInActiveList>
 800e984:	4603      	mov	r3, r0
 800e986:	2b00      	cmp	r3, #0
 800e988:	d067      	beq.n	800ea5a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98c:	6a1b      	ldr	r3, [r3, #32]
 800e98e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e990:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e998:	f003 0304 	and.w	r3, r3, #4
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d05c      	beq.n	800ea5a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e9a0:	68ba      	ldr	r2, [r7, #8]
 800e9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a4:	699b      	ldr	r3, [r3, #24]
 800e9a6:	441a      	add	r2, r3
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	9300      	str	r3, [sp, #0]
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	2100      	movs	r1, #0
 800e9b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9b2:	f7ff fe09 	bl	800e5c8 <xTimerGenericCommand>
 800e9b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e9b8:	6a3b      	ldr	r3, [r7, #32]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d14d      	bne.n	800ea5a <prvProcessReceivedCommands+0x196>
 800e9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c2:	f383 8811 	msr	BASEPRI, r3
 800e9c6:	f3bf 8f6f 	isb	sy
 800e9ca:	f3bf 8f4f 	dsb	sy
 800e9ce:	61bb      	str	r3, [r7, #24]
 800e9d0:	e7fe      	b.n	800e9d0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9d8:	f023 0301 	bic.w	r3, r3, #1
 800e9dc:	b2da      	uxtb	r2, r3
 800e9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e9e4:	e039      	b.n	800ea5a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9ec:	f043 0301 	orr.w	r3, r3, #1
 800e9f0:	b2da      	uxtb	r2, r3
 800e9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e9f8:	68ba      	ldr	r2, [r7, #8]
 800e9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea00:	699b      	ldr	r3, [r3, #24]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d109      	bne.n	800ea1a <prvProcessReceivedCommands+0x156>
 800ea06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea0a:	f383 8811 	msr	BASEPRI, r3
 800ea0e:	f3bf 8f6f 	isb	sy
 800ea12:	f3bf 8f4f 	dsb	sy
 800ea16:	617b      	str	r3, [r7, #20]
 800ea18:	e7fe      	b.n	800ea18 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ea1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1c:	699a      	ldr	r2, [r3, #24]
 800ea1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea20:	18d1      	adds	r1, r2, r3
 800ea22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea28:	f7ff ff0a 	bl	800e840 <prvInsertTimerInActiveList>
					break;
 800ea2c:	e015      	b.n	800ea5a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ea2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea34:	f003 0302 	and.w	r3, r3, #2
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d103      	bne.n	800ea44 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800ea3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea3e:	f000 fbc1 	bl	800f1c4 <vPortFree>
 800ea42:	e00a      	b.n	800ea5a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea4a:	f023 0301 	bic.w	r3, r3, #1
 800ea4e:	b2da      	uxtb	r2, r3
 800ea50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ea56:	e000      	b.n	800ea5a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ea58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ea5a:	4b07      	ldr	r3, [pc, #28]	; (800ea78 <prvProcessReceivedCommands+0x1b4>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	1d39      	adds	r1, r7, #4
 800ea60:	2200      	movs	r2, #0
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7fd fefc 	bl	800c860 <xQueueReceive>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	f47f af2e 	bne.w	800e8cc <prvProcessReceivedCommands+0x8>
	}
}
 800ea70:	bf00      	nop
 800ea72:	3730      	adds	r7, #48	; 0x30
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	20002d20 	.word	0x20002d20

0800ea7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b088      	sub	sp, #32
 800ea80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ea82:	e047      	b.n	800eb14 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ea84:	4b2d      	ldr	r3, [pc, #180]	; (800eb3c <prvSwitchTimerLists+0xc0>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	68db      	ldr	r3, [r3, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea8e:	4b2b      	ldr	r3, [pc, #172]	; (800eb3c <prvSwitchTimerLists+0xc0>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	3304      	adds	r3, #4
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7fd fa45 	bl	800bf2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	6a1b      	ldr	r3, [r3, #32]
 800eaa6:	68f8      	ldr	r0, [r7, #12]
 800eaa8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eab0:	f003 0304 	and.w	r3, r3, #4
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d02d      	beq.n	800eb14 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	699b      	ldr	r3, [r3, #24]
 800eabc:	693a      	ldr	r2, [r7, #16]
 800eabe:	4413      	add	r3, r2
 800eac0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eac2:	68ba      	ldr	r2, [r7, #8]
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d90e      	bls.n	800eae8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	68ba      	ldr	r2, [r7, #8]
 800eace:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	68fa      	ldr	r2, [r7, #12]
 800ead4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ead6:	4b19      	ldr	r3, [pc, #100]	; (800eb3c <prvSwitchTimerLists+0xc0>)
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	3304      	adds	r3, #4
 800eade:	4619      	mov	r1, r3
 800eae0:	4610      	mov	r0, r2
 800eae2:	f7fd f9ea 	bl	800beba <vListInsert>
 800eae6:	e015      	b.n	800eb14 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eae8:	2300      	movs	r3, #0
 800eaea:	9300      	str	r3, [sp, #0]
 800eaec:	2300      	movs	r3, #0
 800eaee:	693a      	ldr	r2, [r7, #16]
 800eaf0:	2100      	movs	r1, #0
 800eaf2:	68f8      	ldr	r0, [r7, #12]
 800eaf4:	f7ff fd68 	bl	800e5c8 <xTimerGenericCommand>
 800eaf8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d109      	bne.n	800eb14 <prvSwitchTimerLists+0x98>
 800eb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb04:	f383 8811 	msr	BASEPRI, r3
 800eb08:	f3bf 8f6f 	isb	sy
 800eb0c:	f3bf 8f4f 	dsb	sy
 800eb10:	603b      	str	r3, [r7, #0]
 800eb12:	e7fe      	b.n	800eb12 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eb14:	4b09      	ldr	r3, [pc, #36]	; (800eb3c <prvSwitchTimerLists+0xc0>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d1b2      	bne.n	800ea84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eb1e:	4b07      	ldr	r3, [pc, #28]	; (800eb3c <prvSwitchTimerLists+0xc0>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eb24:	4b06      	ldr	r3, [pc, #24]	; (800eb40 <prvSwitchTimerLists+0xc4>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	4a04      	ldr	r2, [pc, #16]	; (800eb3c <prvSwitchTimerLists+0xc0>)
 800eb2a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eb2c:	4a04      	ldr	r2, [pc, #16]	; (800eb40 <prvSwitchTimerLists+0xc4>)
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	6013      	str	r3, [r2, #0]
}
 800eb32:	bf00      	nop
 800eb34:	3718      	adds	r7, #24
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	20002d18 	.word	0x20002d18
 800eb40:	20002d1c 	.word	0x20002d1c

0800eb44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800eb4a:	f000 f95f 	bl	800ee0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800eb4e:	4b15      	ldr	r3, [pc, #84]	; (800eba4 <prvCheckForValidListAndQueue+0x60>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d120      	bne.n	800eb98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800eb56:	4814      	ldr	r0, [pc, #80]	; (800eba8 <prvCheckForValidListAndQueue+0x64>)
 800eb58:	f7fd f95e 	bl	800be18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eb5c:	4813      	ldr	r0, [pc, #76]	; (800ebac <prvCheckForValidListAndQueue+0x68>)
 800eb5e:	f7fd f95b 	bl	800be18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eb62:	4b13      	ldr	r3, [pc, #76]	; (800ebb0 <prvCheckForValidListAndQueue+0x6c>)
 800eb64:	4a10      	ldr	r2, [pc, #64]	; (800eba8 <prvCheckForValidListAndQueue+0x64>)
 800eb66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eb68:	4b12      	ldr	r3, [pc, #72]	; (800ebb4 <prvCheckForValidListAndQueue+0x70>)
 800eb6a:	4a10      	ldr	r2, [pc, #64]	; (800ebac <prvCheckForValidListAndQueue+0x68>)
 800eb6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eb6e:	2300      	movs	r3, #0
 800eb70:	9300      	str	r3, [sp, #0]
 800eb72:	4b11      	ldr	r3, [pc, #68]	; (800ebb8 <prvCheckForValidListAndQueue+0x74>)
 800eb74:	4a11      	ldr	r2, [pc, #68]	; (800ebbc <prvCheckForValidListAndQueue+0x78>)
 800eb76:	2110      	movs	r1, #16
 800eb78:	200a      	movs	r0, #10
 800eb7a:	f7fd fa69 	bl	800c050 <xQueueGenericCreateStatic>
 800eb7e:	4602      	mov	r2, r0
 800eb80:	4b08      	ldr	r3, [pc, #32]	; (800eba4 <prvCheckForValidListAndQueue+0x60>)
 800eb82:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eb84:	4b07      	ldr	r3, [pc, #28]	; (800eba4 <prvCheckForValidListAndQueue+0x60>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d005      	beq.n	800eb98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800eb8c:	4b05      	ldr	r3, [pc, #20]	; (800eba4 <prvCheckForValidListAndQueue+0x60>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	490b      	ldr	r1, [pc, #44]	; (800ebc0 <prvCheckForValidListAndQueue+0x7c>)
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7fe fa10 	bl	800cfb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eb98:	f000 f966 	bl	800ee68 <vPortExitCritical>
}
 800eb9c:	bf00      	nop
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
 800eba2:	bf00      	nop
 800eba4:	20002d20 	.word	0x20002d20
 800eba8:	20002cf0 	.word	0x20002cf0
 800ebac:	20002d04 	.word	0x20002d04
 800ebb0:	20002d18 	.word	0x20002d18
 800ebb4:	20002d1c 	.word	0x20002d1c
 800ebb8:	20002dcc 	.word	0x20002dcc
 800ebbc:	20002d2c 	.word	0x20002d2c
 800ebc0:	0801316c 	.word	0x0801316c

0800ebc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b085      	sub	sp, #20
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	60f8      	str	r0, [r7, #12]
 800ebcc:	60b9      	str	r1, [r7, #8]
 800ebce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	3b04      	subs	r3, #4
 800ebd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ebdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	3b04      	subs	r3, #4
 800ebe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	f023 0201 	bic.w	r2, r3, #1
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	3b04      	subs	r3, #4
 800ebf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ebf4:	4a0c      	ldr	r2, [pc, #48]	; (800ec28 <pxPortInitialiseStack+0x64>)
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	3b14      	subs	r3, #20
 800ebfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ec00:	687a      	ldr	r2, [r7, #4]
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	3b04      	subs	r3, #4
 800ec0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f06f 0202 	mvn.w	r2, #2
 800ec12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	3b20      	subs	r3, #32
 800ec18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3714      	adds	r7, #20
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr
 800ec28:	0800ec2d 	.word	0x0800ec2d

0800ec2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b085      	sub	sp, #20
 800ec30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ec32:	2300      	movs	r3, #0
 800ec34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ec36:	4b11      	ldr	r3, [pc, #68]	; (800ec7c <prvTaskExitError+0x50>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec3e:	d009      	beq.n	800ec54 <prvTaskExitError+0x28>
 800ec40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec44:	f383 8811 	msr	BASEPRI, r3
 800ec48:	f3bf 8f6f 	isb	sy
 800ec4c:	f3bf 8f4f 	dsb	sy
 800ec50:	60fb      	str	r3, [r7, #12]
 800ec52:	e7fe      	b.n	800ec52 <prvTaskExitError+0x26>
 800ec54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec58:	f383 8811 	msr	BASEPRI, r3
 800ec5c:	f3bf 8f6f 	isb	sy
 800ec60:	f3bf 8f4f 	dsb	sy
 800ec64:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ec66:	bf00      	nop
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d0fc      	beq.n	800ec68 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ec6e:	bf00      	nop
 800ec70:	3714      	adds	r7, #20
 800ec72:	46bd      	mov	sp, r7
 800ec74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec78:	4770      	bx	lr
 800ec7a:	bf00      	nop
 800ec7c:	2000001c 	.word	0x2000001c

0800ec80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ec80:	4b07      	ldr	r3, [pc, #28]	; (800eca0 <pxCurrentTCBConst2>)
 800ec82:	6819      	ldr	r1, [r3, #0]
 800ec84:	6808      	ldr	r0, [r1, #0]
 800ec86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec8a:	f380 8809 	msr	PSP, r0
 800ec8e:	f3bf 8f6f 	isb	sy
 800ec92:	f04f 0000 	mov.w	r0, #0
 800ec96:	f380 8811 	msr	BASEPRI, r0
 800ec9a:	4770      	bx	lr
 800ec9c:	f3af 8000 	nop.w

0800eca0 <pxCurrentTCBConst2>:
 800eca0:	200027f0 	.word	0x200027f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eca4:	bf00      	nop
 800eca6:	bf00      	nop

0800eca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eca8:	4808      	ldr	r0, [pc, #32]	; (800eccc <prvPortStartFirstTask+0x24>)
 800ecaa:	6800      	ldr	r0, [r0, #0]
 800ecac:	6800      	ldr	r0, [r0, #0]
 800ecae:	f380 8808 	msr	MSP, r0
 800ecb2:	f04f 0000 	mov.w	r0, #0
 800ecb6:	f380 8814 	msr	CONTROL, r0
 800ecba:	b662      	cpsie	i
 800ecbc:	b661      	cpsie	f
 800ecbe:	f3bf 8f4f 	dsb	sy
 800ecc2:	f3bf 8f6f 	isb	sy
 800ecc6:	df00      	svc	0
 800ecc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ecca:	bf00      	nop
 800eccc:	e000ed08 	.word	0xe000ed08

0800ecd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b086      	sub	sp, #24
 800ecd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ecd6:	4b44      	ldr	r3, [pc, #272]	; (800ede8 <xPortStartScheduler+0x118>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	4a44      	ldr	r2, [pc, #272]	; (800edec <xPortStartScheduler+0x11c>)
 800ecdc:	4293      	cmp	r3, r2
 800ecde:	d109      	bne.n	800ecf4 <xPortStartScheduler+0x24>
 800ece0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ece4:	f383 8811 	msr	BASEPRI, r3
 800ece8:	f3bf 8f6f 	isb	sy
 800ecec:	f3bf 8f4f 	dsb	sy
 800ecf0:	613b      	str	r3, [r7, #16]
 800ecf2:	e7fe      	b.n	800ecf2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ecf4:	4b3c      	ldr	r3, [pc, #240]	; (800ede8 <xPortStartScheduler+0x118>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	4a3d      	ldr	r2, [pc, #244]	; (800edf0 <xPortStartScheduler+0x120>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d109      	bne.n	800ed12 <xPortStartScheduler+0x42>
 800ecfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed02:	f383 8811 	msr	BASEPRI, r3
 800ed06:	f3bf 8f6f 	isb	sy
 800ed0a:	f3bf 8f4f 	dsb	sy
 800ed0e:	60fb      	str	r3, [r7, #12]
 800ed10:	e7fe      	b.n	800ed10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ed12:	4b38      	ldr	r3, [pc, #224]	; (800edf4 <xPortStartScheduler+0x124>)
 800ed14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	b2db      	uxtb	r3, r3
 800ed1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	22ff      	movs	r2, #255	; 0xff
 800ed22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	b2db      	uxtb	r3, r3
 800ed2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ed2c:	78fb      	ldrb	r3, [r7, #3]
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ed34:	b2da      	uxtb	r2, r3
 800ed36:	4b30      	ldr	r3, [pc, #192]	; (800edf8 <xPortStartScheduler+0x128>)
 800ed38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ed3a:	4b30      	ldr	r3, [pc, #192]	; (800edfc <xPortStartScheduler+0x12c>)
 800ed3c:	2207      	movs	r2, #7
 800ed3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed40:	e009      	b.n	800ed56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ed42:	4b2e      	ldr	r3, [pc, #184]	; (800edfc <xPortStartScheduler+0x12c>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	3b01      	subs	r3, #1
 800ed48:	4a2c      	ldr	r2, [pc, #176]	; (800edfc <xPortStartScheduler+0x12c>)
 800ed4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ed4c:	78fb      	ldrb	r3, [r7, #3]
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	005b      	lsls	r3, r3, #1
 800ed52:	b2db      	uxtb	r3, r3
 800ed54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed56:	78fb      	ldrb	r3, [r7, #3]
 800ed58:	b2db      	uxtb	r3, r3
 800ed5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed5e:	2b80      	cmp	r3, #128	; 0x80
 800ed60:	d0ef      	beq.n	800ed42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ed62:	4b26      	ldr	r3, [pc, #152]	; (800edfc <xPortStartScheduler+0x12c>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	f1c3 0307 	rsb	r3, r3, #7
 800ed6a:	2b04      	cmp	r3, #4
 800ed6c:	d009      	beq.n	800ed82 <xPortStartScheduler+0xb2>
 800ed6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed72:	f383 8811 	msr	BASEPRI, r3
 800ed76:	f3bf 8f6f 	isb	sy
 800ed7a:	f3bf 8f4f 	dsb	sy
 800ed7e:	60bb      	str	r3, [r7, #8]
 800ed80:	e7fe      	b.n	800ed80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ed82:	4b1e      	ldr	r3, [pc, #120]	; (800edfc <xPortStartScheduler+0x12c>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	021b      	lsls	r3, r3, #8
 800ed88:	4a1c      	ldr	r2, [pc, #112]	; (800edfc <xPortStartScheduler+0x12c>)
 800ed8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ed8c:	4b1b      	ldr	r3, [pc, #108]	; (800edfc <xPortStartScheduler+0x12c>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ed94:	4a19      	ldr	r2, [pc, #100]	; (800edfc <xPortStartScheduler+0x12c>)
 800ed96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	b2da      	uxtb	r2, r3
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eda0:	4b17      	ldr	r3, [pc, #92]	; (800ee00 <xPortStartScheduler+0x130>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	4a16      	ldr	r2, [pc, #88]	; (800ee00 <xPortStartScheduler+0x130>)
 800eda6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800edaa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800edac:	4b14      	ldr	r3, [pc, #80]	; (800ee00 <xPortStartScheduler+0x130>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4a13      	ldr	r2, [pc, #76]	; (800ee00 <xPortStartScheduler+0x130>)
 800edb2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800edb6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800edb8:	f000 f8d6 	bl	800ef68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800edbc:	4b11      	ldr	r3, [pc, #68]	; (800ee04 <xPortStartScheduler+0x134>)
 800edbe:	2200      	movs	r2, #0
 800edc0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800edc2:	f000 f8f5 	bl	800efb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800edc6:	4b10      	ldr	r3, [pc, #64]	; (800ee08 <xPortStartScheduler+0x138>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	4a0f      	ldr	r2, [pc, #60]	; (800ee08 <xPortStartScheduler+0x138>)
 800edcc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800edd0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800edd2:	f7ff ff69 	bl	800eca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800edd6:	f7fe fd55 	bl	800d884 <vTaskSwitchContext>
	prvTaskExitError();
 800edda:	f7ff ff27 	bl	800ec2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800edde:	2300      	movs	r3, #0
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3718      	adds	r7, #24
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	e000ed00 	.word	0xe000ed00
 800edec:	410fc271 	.word	0x410fc271
 800edf0:	410fc270 	.word	0x410fc270
 800edf4:	e000e400 	.word	0xe000e400
 800edf8:	20002e1c 	.word	0x20002e1c
 800edfc:	20002e20 	.word	0x20002e20
 800ee00:	e000ed20 	.word	0xe000ed20
 800ee04:	2000001c 	.word	0x2000001c
 800ee08:	e000ef34 	.word	0xe000ef34

0800ee0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b083      	sub	sp, #12
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee16:	f383 8811 	msr	BASEPRI, r3
 800ee1a:	f3bf 8f6f 	isb	sy
 800ee1e:	f3bf 8f4f 	dsb	sy
 800ee22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ee24:	4b0e      	ldr	r3, [pc, #56]	; (800ee60 <vPortEnterCritical+0x54>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	3301      	adds	r3, #1
 800ee2a:	4a0d      	ldr	r2, [pc, #52]	; (800ee60 <vPortEnterCritical+0x54>)
 800ee2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ee2e:	4b0c      	ldr	r3, [pc, #48]	; (800ee60 <vPortEnterCritical+0x54>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	2b01      	cmp	r3, #1
 800ee34:	d10e      	bne.n	800ee54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ee36:	4b0b      	ldr	r3, [pc, #44]	; (800ee64 <vPortEnterCritical+0x58>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d009      	beq.n	800ee54 <vPortEnterCritical+0x48>
 800ee40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee44:	f383 8811 	msr	BASEPRI, r3
 800ee48:	f3bf 8f6f 	isb	sy
 800ee4c:	f3bf 8f4f 	dsb	sy
 800ee50:	603b      	str	r3, [r7, #0]
 800ee52:	e7fe      	b.n	800ee52 <vPortEnterCritical+0x46>
	}
}
 800ee54:	bf00      	nop
 800ee56:	370c      	adds	r7, #12
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr
 800ee60:	2000001c 	.word	0x2000001c
 800ee64:	e000ed04 	.word	0xe000ed04

0800ee68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b083      	sub	sp, #12
 800ee6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ee6e:	4b11      	ldr	r3, [pc, #68]	; (800eeb4 <vPortExitCritical+0x4c>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d109      	bne.n	800ee8a <vPortExitCritical+0x22>
 800ee76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee7a:	f383 8811 	msr	BASEPRI, r3
 800ee7e:	f3bf 8f6f 	isb	sy
 800ee82:	f3bf 8f4f 	dsb	sy
 800ee86:	607b      	str	r3, [r7, #4]
 800ee88:	e7fe      	b.n	800ee88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ee8a:	4b0a      	ldr	r3, [pc, #40]	; (800eeb4 <vPortExitCritical+0x4c>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	3b01      	subs	r3, #1
 800ee90:	4a08      	ldr	r2, [pc, #32]	; (800eeb4 <vPortExitCritical+0x4c>)
 800ee92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ee94:	4b07      	ldr	r3, [pc, #28]	; (800eeb4 <vPortExitCritical+0x4c>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d104      	bne.n	800eea6 <vPortExitCritical+0x3e>
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800eea6:	bf00      	nop
 800eea8:	370c      	adds	r7, #12
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb0:	4770      	bx	lr
 800eeb2:	bf00      	nop
 800eeb4:	2000001c 	.word	0x2000001c
	...

0800eec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eec0:	f3ef 8009 	mrs	r0, PSP
 800eec4:	f3bf 8f6f 	isb	sy
 800eec8:	4b15      	ldr	r3, [pc, #84]	; (800ef20 <pxCurrentTCBConst>)
 800eeca:	681a      	ldr	r2, [r3, #0]
 800eecc:	f01e 0f10 	tst.w	lr, #16
 800eed0:	bf08      	it	eq
 800eed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeda:	6010      	str	r0, [r2, #0]
 800eedc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eee4:	f380 8811 	msr	BASEPRI, r0
 800eee8:	f3bf 8f4f 	dsb	sy
 800eeec:	f3bf 8f6f 	isb	sy
 800eef0:	f7fe fcc8 	bl	800d884 <vTaskSwitchContext>
 800eef4:	f04f 0000 	mov.w	r0, #0
 800eef8:	f380 8811 	msr	BASEPRI, r0
 800eefc:	bc09      	pop	{r0, r3}
 800eefe:	6819      	ldr	r1, [r3, #0]
 800ef00:	6808      	ldr	r0, [r1, #0]
 800ef02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef06:	f01e 0f10 	tst.w	lr, #16
 800ef0a:	bf08      	it	eq
 800ef0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ef10:	f380 8809 	msr	PSP, r0
 800ef14:	f3bf 8f6f 	isb	sy
 800ef18:	4770      	bx	lr
 800ef1a:	bf00      	nop
 800ef1c:	f3af 8000 	nop.w

0800ef20 <pxCurrentTCBConst>:
 800ef20:	200027f0 	.word	0x200027f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ef24:	bf00      	nop
 800ef26:	bf00      	nop

0800ef28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ef2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef32:	f383 8811 	msr	BASEPRI, r3
 800ef36:	f3bf 8f6f 	isb	sy
 800ef3a:	f3bf 8f4f 	dsb	sy
 800ef3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ef40:	f7fe fbe8 	bl	800d714 <xTaskIncrementTick>
 800ef44:	4603      	mov	r3, r0
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d003      	beq.n	800ef52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ef4a:	4b06      	ldr	r3, [pc, #24]	; (800ef64 <SysTick_Handler+0x3c>)
 800ef4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef50:	601a      	str	r2, [r3, #0]
 800ef52:	2300      	movs	r3, #0
 800ef54:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ef5c:	bf00      	nop
 800ef5e:	3708      	adds	r7, #8
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}
 800ef64:	e000ed04 	.word	0xe000ed04

0800ef68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ef68:	b480      	push	{r7}
 800ef6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ef6c:	4b0b      	ldr	r3, [pc, #44]	; (800ef9c <vPortSetupTimerInterrupt+0x34>)
 800ef6e:	2200      	movs	r2, #0
 800ef70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ef72:	4b0b      	ldr	r3, [pc, #44]	; (800efa0 <vPortSetupTimerInterrupt+0x38>)
 800ef74:	2200      	movs	r2, #0
 800ef76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ef78:	4b0a      	ldr	r3, [pc, #40]	; (800efa4 <vPortSetupTimerInterrupt+0x3c>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	4a0a      	ldr	r2, [pc, #40]	; (800efa8 <vPortSetupTimerInterrupt+0x40>)
 800ef7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ef82:	099b      	lsrs	r3, r3, #6
 800ef84:	4a09      	ldr	r2, [pc, #36]	; (800efac <vPortSetupTimerInterrupt+0x44>)
 800ef86:	3b01      	subs	r3, #1
 800ef88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ef8a:	4b04      	ldr	r3, [pc, #16]	; (800ef9c <vPortSetupTimerInterrupt+0x34>)
 800ef8c:	2207      	movs	r2, #7
 800ef8e:	601a      	str	r2, [r3, #0]
}
 800ef90:	bf00      	nop
 800ef92:	46bd      	mov	sp, r7
 800ef94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef98:	4770      	bx	lr
 800ef9a:	bf00      	nop
 800ef9c:	e000e010 	.word	0xe000e010
 800efa0:	e000e018 	.word	0xe000e018
 800efa4:	20000010 	.word	0x20000010
 800efa8:	10624dd3 	.word	0x10624dd3
 800efac:	e000e014 	.word	0xe000e014

0800efb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800efb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800efc0 <vPortEnableVFP+0x10>
 800efb4:	6801      	ldr	r1, [r0, #0]
 800efb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800efba:	6001      	str	r1, [r0, #0]
 800efbc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800efbe:	bf00      	nop
 800efc0:	e000ed88 	.word	0xe000ed88

0800efc4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800efc4:	b480      	push	{r7}
 800efc6:	b085      	sub	sp, #20
 800efc8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800efca:	f3ef 8305 	mrs	r3, IPSR
 800efce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2b0f      	cmp	r3, #15
 800efd4:	d913      	bls.n	800effe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800efd6:	4a16      	ldr	r2, [pc, #88]	; (800f030 <vPortValidateInterruptPriority+0x6c>)
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	4413      	add	r3, r2
 800efdc:	781b      	ldrb	r3, [r3, #0]
 800efde:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800efe0:	4b14      	ldr	r3, [pc, #80]	; (800f034 <vPortValidateInterruptPriority+0x70>)
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	7afa      	ldrb	r2, [r7, #11]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d209      	bcs.n	800effe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800efea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efee:	f383 8811 	msr	BASEPRI, r3
 800eff2:	f3bf 8f6f 	isb	sy
 800eff6:	f3bf 8f4f 	dsb	sy
 800effa:	607b      	str	r3, [r7, #4]
 800effc:	e7fe      	b.n	800effc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800effe:	4b0e      	ldr	r3, [pc, #56]	; (800f038 <vPortValidateInterruptPriority+0x74>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f006:	4b0d      	ldr	r3, [pc, #52]	; (800f03c <vPortValidateInterruptPriority+0x78>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d909      	bls.n	800f022 <vPortValidateInterruptPriority+0x5e>
 800f00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f012:	f383 8811 	msr	BASEPRI, r3
 800f016:	f3bf 8f6f 	isb	sy
 800f01a:	f3bf 8f4f 	dsb	sy
 800f01e:	603b      	str	r3, [r7, #0]
 800f020:	e7fe      	b.n	800f020 <vPortValidateInterruptPriority+0x5c>
	}
 800f022:	bf00      	nop
 800f024:	3714      	adds	r7, #20
 800f026:	46bd      	mov	sp, r7
 800f028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02c:	4770      	bx	lr
 800f02e:	bf00      	nop
 800f030:	e000e3f0 	.word	0xe000e3f0
 800f034:	20002e1c 	.word	0x20002e1c
 800f038:	e000ed0c 	.word	0xe000ed0c
 800f03c:	20002e20 	.word	0x20002e20

0800f040 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b08a      	sub	sp, #40	; 0x28
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f048:	2300      	movs	r3, #0
 800f04a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f04c:	f7fe fa70 	bl	800d530 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f050:	4b57      	ldr	r3, [pc, #348]	; (800f1b0 <pvPortMalloc+0x170>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d101      	bne.n	800f05c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f058:	f000 f90c 	bl	800f274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f05c:	4b55      	ldr	r3, [pc, #340]	; (800f1b4 <pvPortMalloc+0x174>)
 800f05e:	681a      	ldr	r2, [r3, #0]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	4013      	ands	r3, r2
 800f064:	2b00      	cmp	r3, #0
 800f066:	f040 808c 	bne.w	800f182 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d01c      	beq.n	800f0aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800f070:	2208      	movs	r2, #8
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	4413      	add	r3, r2
 800f076:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f003 0307 	and.w	r3, r3, #7
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d013      	beq.n	800f0aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f023 0307 	bic.w	r3, r3, #7
 800f088:	3308      	adds	r3, #8
 800f08a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f003 0307 	and.w	r3, r3, #7
 800f092:	2b00      	cmp	r3, #0
 800f094:	d009      	beq.n	800f0aa <pvPortMalloc+0x6a>
 800f096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f09a:	f383 8811 	msr	BASEPRI, r3
 800f09e:	f3bf 8f6f 	isb	sy
 800f0a2:	f3bf 8f4f 	dsb	sy
 800f0a6:	617b      	str	r3, [r7, #20]
 800f0a8:	e7fe      	b.n	800f0a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d068      	beq.n	800f182 <pvPortMalloc+0x142>
 800f0b0:	4b41      	ldr	r3, [pc, #260]	; (800f1b8 <pvPortMalloc+0x178>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	687a      	ldr	r2, [r7, #4]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d863      	bhi.n	800f182 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f0ba:	4b40      	ldr	r3, [pc, #256]	; (800f1bc <pvPortMalloc+0x17c>)
 800f0bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f0be:	4b3f      	ldr	r3, [pc, #252]	; (800f1bc <pvPortMalloc+0x17c>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f0c4:	e004      	b.n	800f0d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800f0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d2:	685b      	ldr	r3, [r3, #4]
 800f0d4:	687a      	ldr	r2, [r7, #4]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d903      	bls.n	800f0e2 <pvPortMalloc+0xa2>
 800f0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d1f1      	bne.n	800f0c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f0e2:	4b33      	ldr	r3, [pc, #204]	; (800f1b0 <pvPortMalloc+0x170>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d04a      	beq.n	800f182 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f0ec:	6a3b      	ldr	r3, [r7, #32]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	2208      	movs	r2, #8
 800f0f2:	4413      	add	r3, r2
 800f0f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f8:	681a      	ldr	r2, [r3, #0]
 800f0fa:	6a3b      	ldr	r3, [r7, #32]
 800f0fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f100:	685a      	ldr	r2, [r3, #4]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	1ad2      	subs	r2, r2, r3
 800f106:	2308      	movs	r3, #8
 800f108:	005b      	lsls	r3, r3, #1
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d91e      	bls.n	800f14c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f10e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	4413      	add	r3, r2
 800f114:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f116:	69bb      	ldr	r3, [r7, #24]
 800f118:	f003 0307 	and.w	r3, r3, #7
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d009      	beq.n	800f134 <pvPortMalloc+0xf4>
 800f120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f124:	f383 8811 	msr	BASEPRI, r3
 800f128:	f3bf 8f6f 	isb	sy
 800f12c:	f3bf 8f4f 	dsb	sy
 800f130:	613b      	str	r3, [r7, #16]
 800f132:	e7fe      	b.n	800f132 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f136:	685a      	ldr	r2, [r3, #4]
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	1ad2      	subs	r2, r2, r3
 800f13c:	69bb      	ldr	r3, [r7, #24]
 800f13e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f142:	687a      	ldr	r2, [r7, #4]
 800f144:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f146:	69b8      	ldr	r0, [r7, #24]
 800f148:	f000 f8f6 	bl	800f338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f14c:	4b1a      	ldr	r3, [pc, #104]	; (800f1b8 <pvPortMalloc+0x178>)
 800f14e:	681a      	ldr	r2, [r3, #0]
 800f150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f152:	685b      	ldr	r3, [r3, #4]
 800f154:	1ad3      	subs	r3, r2, r3
 800f156:	4a18      	ldr	r2, [pc, #96]	; (800f1b8 <pvPortMalloc+0x178>)
 800f158:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f15a:	4b17      	ldr	r3, [pc, #92]	; (800f1b8 <pvPortMalloc+0x178>)
 800f15c:	681a      	ldr	r2, [r3, #0]
 800f15e:	4b18      	ldr	r3, [pc, #96]	; (800f1c0 <pvPortMalloc+0x180>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	429a      	cmp	r2, r3
 800f164:	d203      	bcs.n	800f16e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f166:	4b14      	ldr	r3, [pc, #80]	; (800f1b8 <pvPortMalloc+0x178>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	4a15      	ldr	r2, [pc, #84]	; (800f1c0 <pvPortMalloc+0x180>)
 800f16c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f170:	685a      	ldr	r2, [r3, #4]
 800f172:	4b10      	ldr	r3, [pc, #64]	; (800f1b4 <pvPortMalloc+0x174>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	431a      	orrs	r2, r3
 800f178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17e:	2200      	movs	r2, #0
 800f180:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f182:	f7fe fa1b 	bl	800d5bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f186:	69fb      	ldr	r3, [r7, #28]
 800f188:	f003 0307 	and.w	r3, r3, #7
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d009      	beq.n	800f1a4 <pvPortMalloc+0x164>
 800f190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f194:	f383 8811 	msr	BASEPRI, r3
 800f198:	f3bf 8f6f 	isb	sy
 800f19c:	f3bf 8f4f 	dsb	sy
 800f1a0:	60fb      	str	r3, [r7, #12]
 800f1a2:	e7fe      	b.n	800f1a2 <pvPortMalloc+0x162>
	return pvReturn;
 800f1a4:	69fb      	ldr	r3, [r7, #28]
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3728      	adds	r7, #40	; 0x28
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
 800f1ae:	bf00      	nop
 800f1b0:	200068c4 	.word	0x200068c4
 800f1b4:	200068d0 	.word	0x200068d0
 800f1b8:	200068c8 	.word	0x200068c8
 800f1bc:	200068bc 	.word	0x200068bc
 800f1c0:	200068cc 	.word	0x200068cc

0800f1c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b086      	sub	sp, #24
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d046      	beq.n	800f264 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f1d6:	2308      	movs	r3, #8
 800f1d8:	425b      	negs	r3, r3
 800f1da:	697a      	ldr	r2, [r7, #20]
 800f1dc:	4413      	add	r3, r2
 800f1de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	685a      	ldr	r2, [r3, #4]
 800f1e8:	4b20      	ldr	r3, [pc, #128]	; (800f26c <vPortFree+0xa8>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4013      	ands	r3, r2
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d109      	bne.n	800f206 <vPortFree+0x42>
 800f1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f6:	f383 8811 	msr	BASEPRI, r3
 800f1fa:	f3bf 8f6f 	isb	sy
 800f1fe:	f3bf 8f4f 	dsb	sy
 800f202:	60fb      	str	r3, [r7, #12]
 800f204:	e7fe      	b.n	800f204 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d009      	beq.n	800f222 <vPortFree+0x5e>
 800f20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f212:	f383 8811 	msr	BASEPRI, r3
 800f216:	f3bf 8f6f 	isb	sy
 800f21a:	f3bf 8f4f 	dsb	sy
 800f21e:	60bb      	str	r3, [r7, #8]
 800f220:	e7fe      	b.n	800f220 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f222:	693b      	ldr	r3, [r7, #16]
 800f224:	685a      	ldr	r2, [r3, #4]
 800f226:	4b11      	ldr	r3, [pc, #68]	; (800f26c <vPortFree+0xa8>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	4013      	ands	r3, r2
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d019      	beq.n	800f264 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d115      	bne.n	800f264 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	685a      	ldr	r2, [r3, #4]
 800f23c:	4b0b      	ldr	r3, [pc, #44]	; (800f26c <vPortFree+0xa8>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	43db      	mvns	r3, r3
 800f242:	401a      	ands	r2, r3
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f248:	f7fe f972 	bl	800d530 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	685a      	ldr	r2, [r3, #4]
 800f250:	4b07      	ldr	r3, [pc, #28]	; (800f270 <vPortFree+0xac>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	4413      	add	r3, r2
 800f256:	4a06      	ldr	r2, [pc, #24]	; (800f270 <vPortFree+0xac>)
 800f258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f25a:	6938      	ldr	r0, [r7, #16]
 800f25c:	f000 f86c 	bl	800f338 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f260:	f7fe f9ac 	bl	800d5bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f264:	bf00      	nop
 800f266:	3718      	adds	r7, #24
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}
 800f26c:	200068d0 	.word	0x200068d0
 800f270:	200068c8 	.word	0x200068c8

0800f274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f274:	b480      	push	{r7}
 800f276:	b085      	sub	sp, #20
 800f278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f27a:	f643 2398 	movw	r3, #15000	; 0x3a98
 800f27e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f280:	4b27      	ldr	r3, [pc, #156]	; (800f320 <prvHeapInit+0xac>)
 800f282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f003 0307 	and.w	r3, r3, #7
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d00c      	beq.n	800f2a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	3307      	adds	r3, #7
 800f292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f023 0307 	bic.w	r3, r3, #7
 800f29a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f29c:	68ba      	ldr	r2, [r7, #8]
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	1ad3      	subs	r3, r2, r3
 800f2a2:	4a1f      	ldr	r2, [pc, #124]	; (800f320 <prvHeapInit+0xac>)
 800f2a4:	4413      	add	r3, r2
 800f2a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f2ac:	4a1d      	ldr	r2, [pc, #116]	; (800f324 <prvHeapInit+0xb0>)
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f2b2:	4b1c      	ldr	r3, [pc, #112]	; (800f324 <prvHeapInit+0xb0>)
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	68ba      	ldr	r2, [r7, #8]
 800f2bc:	4413      	add	r3, r2
 800f2be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f2c0:	2208      	movs	r2, #8
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	1a9b      	subs	r3, r3, r2
 800f2c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	f023 0307 	bic.w	r3, r3, #7
 800f2ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	4a15      	ldr	r2, [pc, #84]	; (800f328 <prvHeapInit+0xb4>)
 800f2d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f2d6:	4b14      	ldr	r3, [pc, #80]	; (800f328 <prvHeapInit+0xb4>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f2de:	4b12      	ldr	r3, [pc, #72]	; (800f328 <prvHeapInit+0xb4>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	68fa      	ldr	r2, [r7, #12]
 800f2ee:	1ad2      	subs	r2, r2, r3
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f2f4:	4b0c      	ldr	r3, [pc, #48]	; (800f328 <prvHeapInit+0xb4>)
 800f2f6:	681a      	ldr	r2, [r3, #0]
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	685b      	ldr	r3, [r3, #4]
 800f300:	4a0a      	ldr	r2, [pc, #40]	; (800f32c <prvHeapInit+0xb8>)
 800f302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	4a09      	ldr	r2, [pc, #36]	; (800f330 <prvHeapInit+0xbc>)
 800f30a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f30c:	4b09      	ldr	r3, [pc, #36]	; (800f334 <prvHeapInit+0xc0>)
 800f30e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f312:	601a      	str	r2, [r3, #0]
}
 800f314:	bf00      	nop
 800f316:	3714      	adds	r7, #20
 800f318:	46bd      	mov	sp, r7
 800f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31e:	4770      	bx	lr
 800f320:	20002e24 	.word	0x20002e24
 800f324:	200068bc 	.word	0x200068bc
 800f328:	200068c4 	.word	0x200068c4
 800f32c:	200068cc 	.word	0x200068cc
 800f330:	200068c8 	.word	0x200068c8
 800f334:	200068d0 	.word	0x200068d0

0800f338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f338:	b480      	push	{r7}
 800f33a:	b085      	sub	sp, #20
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f340:	4b28      	ldr	r3, [pc, #160]	; (800f3e4 <prvInsertBlockIntoFreeList+0xac>)
 800f342:	60fb      	str	r3, [r7, #12]
 800f344:	e002      	b.n	800f34c <prvInsertBlockIntoFreeList+0x14>
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	60fb      	str	r3, [r7, #12]
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	687a      	ldr	r2, [r7, #4]
 800f352:	429a      	cmp	r2, r3
 800f354:	d8f7      	bhi.n	800f346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	685b      	ldr	r3, [r3, #4]
 800f35e:	68ba      	ldr	r2, [r7, #8]
 800f360:	4413      	add	r3, r2
 800f362:	687a      	ldr	r2, [r7, #4]
 800f364:	429a      	cmp	r2, r3
 800f366:	d108      	bne.n	800f37a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	685a      	ldr	r2, [r3, #4]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	441a      	add	r2, r3
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	68ba      	ldr	r2, [r7, #8]
 800f384:	441a      	add	r2, r3
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d118      	bne.n	800f3c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681a      	ldr	r2, [r3, #0]
 800f392:	4b15      	ldr	r3, [pc, #84]	; (800f3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	429a      	cmp	r2, r3
 800f398:	d00d      	beq.n	800f3b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	685a      	ldr	r2, [r3, #4]
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	685b      	ldr	r3, [r3, #4]
 800f3a4:	441a      	add	r2, r3
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	681a      	ldr	r2, [r3, #0]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	601a      	str	r2, [r3, #0]
 800f3b4:	e008      	b.n	800f3c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f3b6:	4b0c      	ldr	r3, [pc, #48]	; (800f3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800f3b8:	681a      	ldr	r2, [r3, #0]
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	601a      	str	r2, [r3, #0]
 800f3be:	e003      	b.n	800f3c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	681a      	ldr	r2, [r3, #0]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f3c8:	68fa      	ldr	r2, [r7, #12]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d002      	beq.n	800f3d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	687a      	ldr	r2, [r7, #4]
 800f3d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f3d6:	bf00      	nop
 800f3d8:	3714      	adds	r7, #20
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr
 800f3e2:	bf00      	nop
 800f3e4:	200068bc 	.word	0x200068bc
 800f3e8:	200068c4 	.word	0x200068c4

0800f3ec <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800f3f0:	4b03      	ldr	r3, [pc, #12]	; (800f400 <LL_FLASH_GetUDN+0x14>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fc:	4770      	bx	lr
 800f3fe:	bf00      	nop
 800f400:	1fff7580 	.word	0x1fff7580

0800f404 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800f404:	b480      	push	{r7}
 800f406:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800f408:	4b03      	ldr	r3, [pc, #12]	; (800f418 <LL_FLASH_GetDeviceID+0x14>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	b2db      	uxtb	r3, r3
}
 800f40e:	4618      	mov	r0, r3
 800f410:	46bd      	mov	sp, r7
 800f412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f416:	4770      	bx	lr
 800f418:	1fff7584 	.word	0x1fff7584

0800f41c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800f41c:	b480      	push	{r7}
 800f41e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800f420:	4b03      	ldr	r3, [pc, #12]	; (800f430 <LL_FLASH_GetSTCompanyID+0x14>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	0a1b      	lsrs	r3, r3, #8
}
 800f426:	4618      	mov	r0, r3
 800f428:	46bd      	mov	sp, r7
 800f42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42e:	4770      	bx	lr
 800f430:	1fff7584 	.word	0x1fff7584

0800f434 <APP_BLE_Init_Dyn_1>:
void LinkConfiguration(void * argument);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init_Dyn_1( void )
{
 800f434:	b5b0      	push	{r4, r5, r7, lr}
 800f436:	b08c      	sub	sp, #48	; 0x30
 800f438:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN APP_BLE_Init_1 */

	/* USER CODE END APP_BLE_Init_1 */

	SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800f43a:	4b28      	ldr	r3, [pc, #160]	; (800f4dc <APP_BLE_Init_Dyn_1+0xa8>)
 800f43c:	463c      	mov	r4, r7
 800f43e:	461d      	mov	r5, r3
 800f440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f448:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f44c:	c407      	stmia	r4!, {r0, r1, r2}
 800f44e:	7023      	strb	r3, [r4, #0]
	};

	/**
	 * Initialize Ble Transport Layer
	 */
	Ble_Tl_Init( );
 800f450:	f000 fab4 	bl	800f9bc <Ble_Tl_Init>

	/**
	 * Do not allow standby in the application
	 */
	UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800f454:	2101      	movs	r1, #1
 800f456:	2004      	movs	r0, #4
 800f458:	f002 fa54 	bl	8011904 <UTIL_LPM_SetOffMode>
	//  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);

	/**
	 * Register the hci transport layer to handle BLE User Asynchronous Events
	 */
	HciUserEvtProcessId = osThreadNew(HciUserEvtProcess, NULL, &HciUserEvtProcess_attr);
 800f45c:	4a20      	ldr	r2, [pc, #128]	; (800f4e0 <APP_BLE_Init_Dyn_1+0xac>)
 800f45e:	2100      	movs	r1, #0
 800f460:	4820      	ldr	r0, [pc, #128]	; (800f4e4 <APP_BLE_Init_Dyn_1+0xb0>)
 800f462:	f7fc f837 	bl	800b4d4 <osThreadNew>
 800f466:	4602      	mov	r2, r0
 800f468:	4b1f      	ldr	r3, [pc, #124]	; (800f4e8 <APP_BLE_Init_Dyn_1+0xb4>)
 800f46a:	601a      	str	r2, [r3, #0]
	//  SHCI_C2_BLE_Init( &ble_init_cmd_packet );

	/**
	 * Starts the BLE Stack on CPU2
	 */
	if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800f46c:	463b      	mov	r3, r7
 800f46e:	4618      	mov	r0, r3
 800f470:	f7fa f81c 	bl	80094ac <SHCI_C2_BLE_Init>
 800f474:	4603      	mov	r3, r0
 800f476:	2b00      	cmp	r3, #0
 800f478:	d001      	beq.n	800f47e <APP_BLE_Init_Dyn_1+0x4a>
	{
		Error_Handler();
 800f47a:	f7f3 f98b 	bl	8002794 <Error_Handler>
	}

	/**
	 * Initialization of HCI & GATT & GAP layer
	 */
	Ble_Hci_Gap_Gatt_Init();
 800f47e:	f000 fab3 	bl	800f9e8 <Ble_Hci_Gap_Gatt_Init>

	/**
	 * Initialization of the BLE Services
	 */
	SVCCTL_Init();
 800f482:	f7f9 ff0b 	bl	800929c <SVCCTL_Init>

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
	index_con_int = 0;
 800f486:	4b19      	ldr	r3, [pc, #100]	; (800f4ec <APP_BLE_Init_Dyn_1+0xb8>)
 800f488:	2200      	movs	r2, #0
 800f48a:	701a      	strb	r2, [r3, #0]
	mutex = 1;
 800f48c:	4b18      	ldr	r3, [pc, #96]	; (800f4f0 <APP_BLE_Init_Dyn_1+0xbc>)
 800f48e:	2201      	movs	r2, #1
 800f490:	701a      	strb	r2, [r3, #0]


	/**
	 * From here, all initialization are BLE application specific
	 */
	AdvUpdateProcessId = osThreadNew(AdvUpdateProcess, NULL, &AdvUpdateProcess_attr);
 800f492:	4a18      	ldr	r2, [pc, #96]	; (800f4f4 <APP_BLE_Init_Dyn_1+0xc0>)
 800f494:	2100      	movs	r1, #0
 800f496:	4818      	ldr	r0, [pc, #96]	; (800f4f8 <APP_BLE_Init_Dyn_1+0xc4>)
 800f498:	f7fc f81c 	bl	800b4d4 <osThreadNew>
 800f49c:	4602      	mov	r2, r0
 800f49e:	4b17      	ldr	r3, [pc, #92]	; (800f4fc <APP_BLE_Init_Dyn_1+0xc8>)
 800f4a0:	601a      	str	r2, [r3, #0]
	//ST SW Engineers converted the below statement to a FreeRTOS-friendly function: Adv_Request()
	//  UTIL_SEQ_RegTask( 1<<CFG_TASK_START_ADV_ID, UTIL_SEQ_RFU, Adv_Request);
	/**
	 * Create timer for Data Throughput process (write data)
	 */
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(TimerDataThroughputWrite_Id), hw_ts_SingleShot, DataThroughput_proc);
 800f4a2:	4b17      	ldr	r3, [pc, #92]	; (800f500 <APP_BLE_Init_Dyn_1+0xcc>)
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	4917      	ldr	r1, [pc, #92]	; (800f504 <APP_BLE_Init_Dyn_1+0xd0>)
 800f4a8:	2000      	movs	r0, #0
 800f4aa:	f7f2 fbe3 	bl	8001c74 <HW_TS_Create>
	//  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
	//  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_UPDATE_ID, UTIL_SEQ_RFU, Connection_Update);
#endif


	LinkConfigProcessId= osThreadNew(LinkConfiguration, NULL, &LinkConfigProcess_attr);
 800f4ae:	4a16      	ldr	r2, [pc, #88]	; (800f508 <APP_BLE_Init_Dyn_1+0xd4>)
 800f4b0:	2100      	movs	r1, #0
 800f4b2:	4816      	ldr	r0, [pc, #88]	; (800f50c <APP_BLE_Init_Dyn_1+0xd8>)
 800f4b4:	f7fc f80e 	bl	800b4d4 <osThreadNew>
 800f4b8:	4602      	mov	r2, r0
 800f4ba:	4b15      	ldr	r3, [pc, #84]	; (800f510 <APP_BLE_Init_Dyn_1+0xdc>)
 800f4bc:	601a      	str	r2, [r3, #0]

	BleApplicationContext.DeviceServerFound = NO_DEVICE_FOUND;
 800f4be:	4b15      	ldr	r3, [pc, #84]	; (800f514 <APP_BLE_Init_Dyn_1+0xe0>)
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	/**
	 * Clear DataBase
	 */
	aci_gap_clear_security_db();
 800f4c6:	f7f8 fe51 	bl	800816c <aci_gap_clear_security_db>
	 * Initialize Data Client (this shouldn''t ideally happen but some of ST's example code for server
	 * relies on functions within this function)
	 * todo: rip out what's needed and fold it into DTS_App_Init()
	 */

	DTC_App_Init();
 800f4ca:	f001 f899 	bl	8010600 <DTC_App_Init>

	/**
	 * Initialize Data Server (GATT SERVER)
	 */

	DTS_App_Init();
 800f4ce:	f001 fb95 	bl	8010bfc <DTS_App_Init>
#endif
	/**
	 * Create timer to handle the Led Switch OFF
	 */
	//  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
	return;
 800f4d2:	bf00      	nop
}
 800f4d4:	3730      	adds	r7, #48	; 0x30
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bdb0      	pop	{r4, r5, r7, pc}
 800f4da:	bf00      	nop
 800f4dc:	080131b8 	.word	0x080131b8
 800f4e0:	080140f4 	.word	0x080140f4
 800f4e4:	0800fd9b 	.word	0x0800fd9b
 800f4e8:	20006f88 	.word	0x20006f88
 800f4ec:	20006fa1 	.word	0x20006fa1
 800f4f0:	20006fa0 	.word	0x20006fa0
 800f4f4:	080140d0 	.word	0x080140d0
 800f4f8:	0800fd73 	.word	0x0800fd73
 800f4fc:	20006fc4 	.word	0x20006fc4
 800f500:	0800fdb5 	.word	0x0800fdb5
 800f504:	20006fb0 	.word	0x20006fb0
 800f508:	08014118 	.word	0x08014118
 800f50c:	0800fdcd 	.word	0x0800fdcd
 800f510:	20006f94 	.word	0x20006f94
 800f514:	20000190 	.word	0x20000190

0800f518 <APP_BLE_Init_Dyn_2>:

void APP_BLE_Init_Dyn_2( void ) {
 800f518:	b580      	push	{r7, lr}
 800f51a:	af00      	add	r7, sp, #0
	//   * Make device discoverable
	//   */
	//  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL; //TODO: the heartbeat example uses: AD_TYPE_16_BIT_SERV_UUID
	//  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
	//  /* Initialize intervals for reconnexion without intervals update */
	AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800f51c:	4b06      	ldr	r3, [pc, #24]	; (800f538 <APP_BLE_Init_Dyn_2+0x20>)
 800f51e:	2280      	movs	r2, #128	; 0x80
 800f520:	801a      	strh	r2, [r3, #0]
	AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800f522:	4b06      	ldr	r3, [pc, #24]	; (800f53c <APP_BLE_Init_Dyn_2+0x24>)
 800f524:	22a0      	movs	r2, #160	; 0xa0
 800f526:	801a      	strh	r2, [r3, #0]
	 * Start to Advertise to be connected by P2P Client
	 */
#ifndef DYNAMIC_MODE
	Adv_Request(APP_BLE_FAST_ADV);
#else
	osThreadFlagsSet(AdvUpdateProcessId, 1);
 800f528:	4b05      	ldr	r3, [pc, #20]	; (800f540 <APP_BLE_Init_Dyn_2+0x28>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	2101      	movs	r1, #1
 800f52e:	4618      	mov	r0, r3
 800f530:	f7fc f876 	bl	800b620 <osThreadFlagsSet>
//	Adv_Request(APP_BLE_LP_ADV);
#endif
	/* USER CODE BEGIN APP_BLE_Init_2 */

	/* USER CODE END APP_BLE_Init_2 */
	return;
 800f534:	bf00      	nop
}
 800f536:	bd80      	pop	{r7, pc}
 800f538:	20000224 	.word	0x20000224
 800f53c:	20000226 	.word	0x20000226
 800f540:	20006fc4 	.word	0x20006fc4

0800f544 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800f544:	b590      	push	{r4, r7, lr}
 800f546:	b093      	sub	sp, #76	; 0x4c
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
	hci_le_connection_complete_event_rp0 * connection_complete_event;
	hci_le_advertising_report_event_rp0 * le_advertising_event;
	hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
	hci_le_connection_update_complete_event_rp0 *connection_update_complete;
	uint8_t event_type, event_data_size;
	int k = 0;
 800f54c:	2300      	movs	r3, #0
 800f54e:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t adtype, adlength;
	uint8_t *adv_report_data;
	float Connection_Interval;
	float Supervision_Timeout;

	event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	3301      	adds	r3, #1
 800f554:	643b      	str	r3, [r7, #64]	; 0x40

	switch (event_pckt->evt)
 800f556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	2b3e      	cmp	r3, #62	; 0x3e
 800f55c:	d021      	beq.n	800f5a2 <SVCCTL_App_Notification+0x5e>
 800f55e:	2bff      	cmp	r3, #255	; 0xff
 800f560:	f000 818c 	beq.w	800f87c <SVCCTL_App_Notification+0x338>
 800f564:	2b05      	cmp	r3, #5
 800f566:	d000      	beq.n	800f56a <SVCCTL_App_Notification+0x26>

		default:
			/* USER CODE BEGIN ECODE_DEFAULT*/

			/* USER CODE END ECODE_DEFAULT*/
			break;
 800f568:	e20c      	b.n	800f984 <SVCCTL_App_Notification+0x440>
		disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800f56a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f56c:	3302      	adds	r3, #2
 800f56e:	60fb      	str	r3, [r7, #12]
		if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f576:	b29a      	uxth	r2, r3
 800f578:	4bb0      	ldr	r3, [pc, #704]	; (800f83c <SVCCTL_App_Notification+0x2f8>)
 800f57a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d109      	bne.n	800f594 <SVCCTL_App_Notification+0x50>
			BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800f580:	4bae      	ldr	r3, [pc, #696]	; (800f83c <SVCCTL_App_Notification+0x2f8>)
 800f582:	2200      	movs	r2, #0
 800f584:	84da      	strh	r2, [r3, #38]	; 0x26
			BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f586:	4bad      	ldr	r3, [pc, #692]	; (800f83c <SVCCTL_App_Notification+0x2f8>)
 800f588:	2200      	movs	r2, #0
 800f58a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 800f58e:	48ac      	ldr	r0, [pc, #688]	; (800f840 <SVCCTL_App_Notification+0x2fc>)
 800f590:	f002 fbc8 	bl	8011d24 <puts>
		osThreadFlagsSet(AdvUpdateProcessId, 1);
 800f594:	4bab      	ldr	r3, [pc, #684]	; (800f844 <SVCCTL_App_Notification+0x300>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	2101      	movs	r1, #1
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7fc f840 	bl	800b620 <osThreadFlagsSet>
	break; /* EVT_DISCONN_COMPLETE */
 800f5a0:	e1f0      	b.n	800f984 <SVCCTL_App_Notification+0x440>
		meta_evt = (evt_le_meta_event*) event_pckt->data;
 800f5a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5a4:	3302      	adds	r3, #2
 800f5a6:	637b      	str	r3, [r7, #52]	; 0x34
		switch (meta_evt->subevent)
 800f5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5aa:	781b      	ldrb	r3, [r3, #0]
 800f5ac:	3b01      	subs	r3, #1
 800f5ae:	2b0b      	cmp	r3, #11
 800f5b0:	f200 8140 	bhi.w	800f834 <SVCCTL_App_Notification+0x2f0>
 800f5b4:	a201      	add	r2, pc, #4	; (adr r2, 800f5bc <SVCCTL_App_Notification+0x78>)
 800f5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5ba:	bf00      	nop
 800f5bc:	0800f6a3 	.word	0x0800f6a3
 800f5c0:	0800f74d 	.word	0x0800f74d
 800f5c4:	0800f611 	.word	0x0800f611
 800f5c8:	0800f835 	.word	0x0800f835
 800f5cc:	0800f835 	.word	0x0800f835
 800f5d0:	0800f835 	.word	0x0800f835
 800f5d4:	0800f835 	.word	0x0800f835
 800f5d8:	0800f835 	.word	0x0800f835
 800f5dc:	0800f835 	.word	0x0800f835
 800f5e0:	0800f835 	.word	0x0800f835
 800f5e4:	0800f835 	.word	0x0800f835
 800f5e8:	0800f5ed 	.word	0x0800f5ed
			evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800f5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	633b      	str	r3, [r7, #48]	; 0x30
			if (evt_le_phy_update_complete->Status == 0)
 800f5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d103      	bne.n	800f602 <SVCCTL_App_Notification+0xbe>
				APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, success \n");
 800f5fa:	4893      	ldr	r0, [pc, #588]	; (800f848 <SVCCTL_App_Notification+0x304>)
 800f5fc:	f002 fb92 	bl	8011d24 <puts>
			break;
 800f600:	e11b      	b.n	800f83a <SVCCTL_App_Notification+0x2f6>
				APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, failure %d \n", evt_le_phy_update_complete->Status);
 800f602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f604:	781b      	ldrb	r3, [r3, #0]
 800f606:	4619      	mov	r1, r3
 800f608:	4890      	ldr	r0, [pc, #576]	; (800f84c <SVCCTL_App_Notification+0x308>)
 800f60a:	f002 fb17 	bl	8011c3c <iprintf>
			break;
 800f60e:	e114      	b.n	800f83a <SVCCTL_App_Notification+0x2f6>
			mutex = 1;
 800f610:	4b8f      	ldr	r3, [pc, #572]	; (800f850 <SVCCTL_App_Notification+0x30c>)
 800f612:	2201      	movs	r2, #1
 800f614:	701a      	strb	r2, [r3, #0]
			connection_update_complete = (hci_le_connection_update_complete_event_rp0*)meta_evt->data;
 800f616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f618:	3301      	adds	r3, #1
 800f61a:	62fb      	str	r3, [r7, #44]	; 0x2c
			APP_DBG_MSG("EVT_LE_CONN_UPDATE_COMPLETE \n");
 800f61c:	488d      	ldr	r0, [pc, #564]	; (800f854 <SVCCTL_App_Notification+0x310>)
 800f61e:	f002 fb81 	bl	8011d24 <puts>
			Connection_Interval = connection_update_complete->Conn_Interval * 1.25;
 800f622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f624:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f628:	b29b      	uxth	r3, r3
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7f0 ff62 	bl	80004f4 <__aeabi_i2d>
 800f630:	f04f 0200 	mov.w	r2, #0
 800f634:	4b88      	ldr	r3, [pc, #544]	; (800f858 <SVCCTL_App_Notification+0x314>)
 800f636:	f7f0 ffc7 	bl	80005c8 <__aeabi_dmul>
 800f63a:	4603      	mov	r3, r0
 800f63c:	460c      	mov	r4, r1
 800f63e:	4618      	mov	r0, r3
 800f640:	4621      	mov	r1, r4
 800f642:	f7f1 f9d3 	bl	80009ec <__aeabi_d2f>
 800f646:	4603      	mov	r3, r0
 800f648:	62bb      	str	r3, [r7, #40]	; 0x28
			APP_DBG_MSG("interval= %.2f ms \n",Connection_Interval);
 800f64a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f64c:	f7f0 ff64 	bl	8000518 <__aeabi_f2d>
 800f650:	4603      	mov	r3, r0
 800f652:	460c      	mov	r4, r1
 800f654:	461a      	mov	r2, r3
 800f656:	4623      	mov	r3, r4
 800f658:	4880      	ldr	r0, [pc, #512]	; (800f85c <SVCCTL_App_Notification+0x318>)
 800f65a:	f002 faef 	bl	8011c3c <iprintf>
			APP_DBG_MSG("latency= 0x%x \n",connection_update_complete->Conn_Latency);
 800f65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f660:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800f664:	b29b      	uxth	r3, r3
 800f666:	4619      	mov	r1, r3
 800f668:	487d      	ldr	r0, [pc, #500]	; (800f860 <SVCCTL_App_Notification+0x31c>)
 800f66a:	f002 fae7 	bl	8011c3c <iprintf>
			Supervision_Timeout = connection_update_complete->Supervision_Timeout * 10;
 800f66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f670:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f674:	b29b      	uxth	r3, r3
 800f676:	461a      	mov	r2, r3
 800f678:	4613      	mov	r3, r2
 800f67a:	009b      	lsls	r3, r3, #2
 800f67c:	4413      	add	r3, r2
 800f67e:	005b      	lsls	r3, r3, #1
 800f680:	ee07 3a90 	vmov	s15, r3
 800f684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f688:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			APP_DBG_MSG("supervision_timeout= %.2f ms \n",Supervision_Timeout);
 800f68c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f68e:	f7f0 ff43 	bl	8000518 <__aeabi_f2d>
 800f692:	4603      	mov	r3, r0
 800f694:	460c      	mov	r4, r1
 800f696:	461a      	mov	r2, r3
 800f698:	4623      	mov	r3, r4
 800f69a:	4872      	ldr	r0, [pc, #456]	; (800f864 <SVCCTL_App_Notification+0x320>)
 800f69c:	f002 face 	bl	8011c3c <iprintf>
			break;
 800f6a0:	e0cb      	b.n	800f83a <SVCCTL_App_Notification+0x2f6>
			connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800f6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	613b      	str	r3, [r7, #16]
			BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f6ae:	b29a      	uxth	r2, r3
 800f6b0:	4b62      	ldr	r3, [pc, #392]	; (800f83c <SVCCTL_App_Notification+0x2f8>)
 800f6b2:	84da      	strh	r2, [r3, #38]	; 0x26
			APP_DBG_MSG("EVT_LE_CONN_COMPLETE connection as slave\n");
 800f6b4:	486c      	ldr	r0, [pc, #432]	; (800f868 <SVCCTL_App_Notification+0x324>)
 800f6b6:	f002 fb35 	bl	8011d24 <puts>
			Connection_Interval = connection_complete_event->Conn_Interval * 1.25;
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f7f0 ff16 	bl	80004f4 <__aeabi_i2d>
 800f6c8:	f04f 0200 	mov.w	r2, #0
 800f6cc:	4b62      	ldr	r3, [pc, #392]	; (800f858 <SVCCTL_App_Notification+0x314>)
 800f6ce:	f7f0 ff7b 	bl	80005c8 <__aeabi_dmul>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	460c      	mov	r4, r1
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	4621      	mov	r1, r4
 800f6da:	f7f1 f987 	bl	80009ec <__aeabi_d2f>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	62bb      	str	r3, [r7, #40]	; 0x28
			APP_DBG_MSG("EVT_LE_CONN_COMPLETE connection as slave\n");
 800f6e2:	4861      	ldr	r0, [pc, #388]	; (800f868 <SVCCTL_App_Notification+0x324>)
 800f6e4:	f002 fb1e 	bl	8011d24 <puts>
			APP_DBG_MSG("interval= %.2f ms \n",Connection_Interval);
 800f6e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6ea:	f7f0 ff15 	bl	8000518 <__aeabi_f2d>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	460c      	mov	r4, r1
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	4623      	mov	r3, r4
 800f6f6:	4859      	ldr	r0, [pc, #356]	; (800f85c <SVCCTL_App_Notification+0x318>)
 800f6f8:	f002 faa0 	bl	8011c3c <iprintf>
			APP_DBG_MSG("latency= 0x%x \n",connection_complete_event->Conn_Latency);
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800f702:	b29b      	uxth	r3, r3
 800f704:	4619      	mov	r1, r3
 800f706:	4856      	ldr	r0, [pc, #344]	; (800f860 <SVCCTL_App_Notification+0x31c>)
 800f708:	f002 fa98 	bl	8011c3c <iprintf>
			Supervision_Timeout = connection_complete_event->Supervision_Timeout * 10;
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800f712:	b29b      	uxth	r3, r3
 800f714:	461a      	mov	r2, r3
 800f716:	4613      	mov	r3, r2
 800f718:	009b      	lsls	r3, r3, #2
 800f71a:	4413      	add	r3, r2
 800f71c:	005b      	lsls	r3, r3, #1
 800f71e:	ee07 3a90 	vmov	s15, r3
 800f722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f726:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			APP_DBG_MSG("supervision_timeout= %.2f ms \n",Supervision_Timeout);
 800f72a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f72c:	f7f0 fef4 	bl	8000518 <__aeabi_f2d>
 800f730:	4603      	mov	r3, r0
 800f732:	460c      	mov	r4, r1
 800f734:	461a      	mov	r2, r3
 800f736:	4623      	mov	r3, r4
 800f738:	484a      	ldr	r0, [pc, #296]	; (800f864 <SVCCTL_App_Notification+0x320>)
 800f73a:	f002 fa7f 	bl	8011c3c <iprintf>
			osThreadFlagsSet( LinkConfigProcessId, 1 );
 800f73e:	4b4b      	ldr	r3, [pc, #300]	; (800f86c <SVCCTL_App_Notification+0x328>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	2101      	movs	r1, #1
 800f744:	4618      	mov	r0, r3
 800f746:	f7fb ff6b 	bl	800b620 <osThreadFlagsSet>
		break; /* HCI_EVT_LE_CONN_COMPLETE */
 800f74a:	e076      	b.n	800f83a <SVCCTL_App_Notification+0x2f6>
			le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 800f74c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f74e:	3301      	adds	r3, #1
 800f750:	623b      	str	r3, [r7, #32]
			event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 800f752:	6a3b      	ldr	r3, [r7, #32]
 800f754:	785b      	ldrb	r3, [r3, #1]
 800f756:	77fb      	strb	r3, [r7, #31]
			event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 800f758:	6a3b      	ldr	r3, [r7, #32]
 800f75a:	7a5b      	ldrb	r3, [r3, #9]
 800f75c:	77bb      	strb	r3, [r7, #30]
			adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 800f75e:	6a3b      	ldr	r3, [r7, #32]
 800f760:	3309      	adds	r3, #9
 800f762:	3301      	adds	r3, #1
 800f764:	61bb      	str	r3, [r7, #24]
			k = 0;
 800f766:	2300      	movs	r3, #0
 800f768:	647b      	str	r3, [r7, #68]	; 0x44
			if (event_type == ADV_IND)
 800f76a:	7ffb      	ldrb	r3, [r7, #31]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d163      	bne.n	800f838 <SVCCTL_App_Notification+0x2f4>
				while(k < event_data_size)
 800f770:	e05b      	b.n	800f82a <SVCCTL_App_Notification+0x2e6>
					adlength = adv_report_data[k];
 800f772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f774:	69ba      	ldr	r2, [r7, #24]
 800f776:	4413      	add	r3, r2
 800f778:	781b      	ldrb	r3, [r3, #0]
 800f77a:	75fb      	strb	r3, [r7, #23]
					adtype = adv_report_data[k + 1];
 800f77c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f77e:	3301      	adds	r3, #1
 800f780:	69ba      	ldr	r2, [r7, #24]
 800f782:	4413      	add	r3, r2
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	75bb      	strb	r3, [r7, #22]
					switch (adtype)
 800f788:	7dbb      	ldrb	r3, [r7, #22]
 800f78a:	2b0a      	cmp	r3, #10
 800f78c:	d043      	beq.n	800f816 <SVCCTL_App_Notification+0x2d2>
 800f78e:	2b0a      	cmp	r3, #10
 800f790:	dc02      	bgt.n	800f798 <SVCCTL_App_Notification+0x254>
 800f792:	2b01      	cmp	r3, #1
 800f794:	d041      	beq.n	800f81a <SVCCTL_App_Notification+0x2d6>
						break;
 800f796:	e043      	b.n	800f820 <SVCCTL_App_Notification+0x2dc>
					switch (adtype)
 800f798:	2b16      	cmp	r3, #22
 800f79a:	d040      	beq.n	800f81e <SVCCTL_App_Notification+0x2da>
 800f79c:	2bff      	cmp	r3, #255	; 0xff
 800f79e:	d000      	beq.n	800f7a2 <SVCCTL_App_Notification+0x25e>
						break;
 800f7a0:	e03e      	b.n	800f820 <SVCCTL_App_Notification+0x2dc>
						if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 800f7a2:	7dfb      	ldrb	r3, [r7, #23]
 800f7a4:	2b06      	cmp	r3, #6
 800f7a6:	d934      	bls.n	800f812 <SVCCTL_App_Notification+0x2ce>
 800f7a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7aa:	3302      	adds	r3, #2
 800f7ac:	69ba      	ldr	r2, [r7, #24]
 800f7ae:	4413      	add	r3, r2
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	2b01      	cmp	r3, #1
 800f7b4:	d12d      	bne.n	800f812 <SVCCTL_App_Notification+0x2ce>
							APP_DBG_MSG("--- ST MANUFACTURER ID --- \n");
 800f7b6:	482e      	ldr	r0, [pc, #184]	; (800f870 <SVCCTL_App_Notification+0x32c>)
 800f7b8:	f002 fab4 	bl	8011d24 <puts>
							switch (adv_report_data[k + 3])
 800f7bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7be:	3303      	adds	r3, #3
 800f7c0:	69ba      	ldr	r2, [r7, #24]
 800f7c2:	4413      	add	r3, r2
 800f7c4:	781b      	ldrb	r3, [r3, #0]
 800f7c6:	2b88      	cmp	r3, #136	; 0x88
 800f7c8:	d000      	beq.n	800f7cc <SVCCTL_App_Notification+0x288>
								break;
 800f7ca:	e023      	b.n	800f814 <SVCCTL_App_Notification+0x2d0>
								APP_DBG_MSG("-- SERVER DETECTED -- VIA MAN ID\n");
 800f7cc:	4829      	ldr	r0, [pc, #164]	; (800f874 <SVCCTL_App_Notification+0x330>)
 800f7ce:	f002 faa9 	bl	8011d24 <puts>
								BleApplicationContext.DeviceServerFound = AT_LEAST_ONE_DEVICE_FOUND;
 800f7d2:	4b1a      	ldr	r3, [pc, #104]	; (800f83c <SVCCTL_App_Notification+0x2f8>)
 800f7d4:	2201      	movs	r2, #1
 800f7d6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
								SERVER_REMOTE_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 800f7da:	6a3b      	ldr	r3, [r7, #32]
 800f7dc:	78da      	ldrb	r2, [r3, #3]
 800f7de:	4b26      	ldr	r3, [pc, #152]	; (800f878 <SVCCTL_App_Notification+0x334>)
 800f7e0:	701a      	strb	r2, [r3, #0]
								SERVER_REMOTE_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800f7e2:	6a3b      	ldr	r3, [r7, #32]
 800f7e4:	791a      	ldrb	r2, [r3, #4]
 800f7e6:	4b24      	ldr	r3, [pc, #144]	; (800f878 <SVCCTL_App_Notification+0x334>)
 800f7e8:	705a      	strb	r2, [r3, #1]
								SERVER_REMOTE_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 800f7ea:	6a3b      	ldr	r3, [r7, #32]
 800f7ec:	795a      	ldrb	r2, [r3, #5]
 800f7ee:	4b22      	ldr	r3, [pc, #136]	; (800f878 <SVCCTL_App_Notification+0x334>)
 800f7f0:	709a      	strb	r2, [r3, #2]
								SERVER_REMOTE_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 800f7f2:	6a3b      	ldr	r3, [r7, #32]
 800f7f4:	799a      	ldrb	r2, [r3, #6]
 800f7f6:	4b20      	ldr	r3, [pc, #128]	; (800f878 <SVCCTL_App_Notification+0x334>)
 800f7f8:	70da      	strb	r2, [r3, #3]
								SERVER_REMOTE_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 800f7fa:	6a3b      	ldr	r3, [r7, #32]
 800f7fc:	79da      	ldrb	r2, [r3, #7]
 800f7fe:	4b1e      	ldr	r3, [pc, #120]	; (800f878 <SVCCTL_App_Notification+0x334>)
 800f800:	711a      	strb	r2, [r3, #4]
								SERVER_REMOTE_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 800f802:	6a3b      	ldr	r3, [r7, #32]
 800f804:	7a1a      	ldrb	r2, [r3, #8]
 800f806:	4b1c      	ldr	r3, [pc, #112]	; (800f878 <SVCCTL_App_Notification+0x334>)
 800f808:	715a      	strb	r2, [r3, #5]
								aci_gap_terminate_gap_proc(GAP_GENERAL_DISCOVERY_PROC);
 800f80a:	2002      	movs	r0, #2
 800f80c:	f7f8 fcd2 	bl	80081b4 <aci_gap_terminate_gap_proc>
								break;
 800f810:	e000      	b.n	800f814 <SVCCTL_App_Notification+0x2d0>
						}
 800f812:	bf00      	nop
						break;
 800f814:	e004      	b.n	800f820 <SVCCTL_App_Notification+0x2dc>
						break;
 800f816:	bf00      	nop
 800f818:	e002      	b.n	800f820 <SVCCTL_App_Notification+0x2dc>
					break;
 800f81a:	bf00      	nop
 800f81c:	e000      	b.n	800f820 <SVCCTL_App_Notification+0x2dc>
						break;
 800f81e:	bf00      	nop
					k += adlength + 1;
 800f820:	7dfb      	ldrb	r3, [r7, #23]
 800f822:	3301      	adds	r3, #1
 800f824:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f826:	4413      	add	r3, r2
 800f828:	647b      	str	r3, [r7, #68]	; 0x44
				while(k < event_data_size)
 800f82a:	7fbb      	ldrb	r3, [r7, #30]
 800f82c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f82e:	429a      	cmp	r2, r3
 800f830:	db9f      	blt.n	800f772 <SVCCTL_App_Notification+0x22e>
			break;
 800f832:	e001      	b.n	800f838 <SVCCTL_App_Notification+0x2f4>
			break;
 800f834:	bf00      	nop
 800f836:	e0a5      	b.n	800f984 <SVCCTL_App_Notification+0x440>
			break;
 800f838:	bf00      	nop
	break; /* HCI_EVT_LE_META_EVENT */
 800f83a:	e0a3      	b.n	800f984 <SVCCTL_App_Notification+0x440>
 800f83c:	20000190 	.word	0x20000190
 800f840:	080131e8 	.word	0x080131e8
 800f844:	20006fc4 	.word	0x20006fc4
 800f848:	08013210 	.word	0x08013210
 800f84c:	08013234 	.word	0x08013234
 800f850:	20006fa0 	.word	0x20006fa0
 800f854:	0801325c 	.word	0x0801325c
 800f858:	3ff40000 	.word	0x3ff40000
 800f85c:	0801327c 	.word	0x0801327c
 800f860:	08013290 	.word	0x08013290
 800f864:	080132a0 	.word	0x080132a0
 800f868:	080132c0 	.word	0x080132c0
 800f86c:	20006f94 	.word	0x20006f94
 800f870:	080132ec 	.word	0x080132ec
 800f874:	08013308 	.word	0x08013308
 800f878:	20006fa4 	.word	0x20006fa4
		blue_evt = (evt_blue_aci*) event_pckt->data;
 800f87c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f87e:	3302      	adds	r3, #2
 800f880:	63fb      	str	r3, [r7, #60]	; 0x3c
		switch (blue_evt->ecode)
 800f882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f884:	881b      	ldrh	r3, [r3, #0]
 800f886:	b29b      	uxth	r3, r3
 800f888:	f240 4207 	movw	r2, #1031	; 0x407
 800f88c:	4293      	cmp	r3, r2
 800f88e:	d056      	beq.n	800f93e <SVCCTL_App_Notification+0x3fa>
 800f890:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800f894:	da08      	bge.n	800f8a8 <SVCCTL_App_Notification+0x364>
 800f896:	f240 4201 	movw	r2, #1025	; 0x401
 800f89a:	4293      	cmp	r3, r2
 800f89c:	d010      	beq.n	800f8c0 <SVCCTL_App_Notification+0x37c>
 800f89e:	f240 4202 	movw	r2, #1026	; 0x402
 800f8a2:	4293      	cmp	r3, r2
 800f8a4:	d016      	beq.n	800f8d4 <SVCCTL_App_Notification+0x390>
		break; /* EVT_VENDOR */
 800f8a6:	e06c      	b.n	800f982 <SVCCTL_App_Notification+0x43e>
		switch (blue_evt->ecode)
 800f8a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f8ac:	d043      	beq.n	800f936 <SVCCTL_App_Notification+0x3f2>
 800f8ae:	f640 4216 	movw	r2, #3094	; 0xc16
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d039      	beq.n	800f92a <SVCCTL_App_Notification+0x3e6>
 800f8b6:	f240 4209 	movw	r2, #1033	; 0x409
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d01a      	beq.n	800f8f4 <SVCCTL_App_Notification+0x3b0>
		break; /* EVT_VENDOR */
 800f8be:	e060      	b.n	800f982 <SVCCTL_App_Notification+0x43e>
			APP_DBG_MSG("Pairing complete \n");
 800f8c0:	4833      	ldr	r0, [pc, #204]	; (800f990 <SVCCTL_App_Notification+0x44c>)
 800f8c2:	f002 fa2f 	bl	8011d24 <puts>
			BSP_LED_On(LED_RED);
 800f8c6:	2002      	movs	r0, #2
 800f8c8:	f7f2 ff1e 	bl	8002708 <BSP_LED_On>
			BSP_LED_On(LED_BLUE);
 800f8cc:	2000      	movs	r0, #0
 800f8ce:	f7f2 ff1b 	bl	8002708 <BSP_LED_On>
			break;
 800f8d2:	e056      	b.n	800f982 <SVCCTL_App_Notification+0x43e>
			APP_DBG_MSG("respond to the passkey request\n");
 800f8d4:	482f      	ldr	r0, [pc, #188]	; (800f994 <SVCCTL_App_Notification+0x450>)
 800f8d6:	f002 fa25 	bl	8011d24 <puts>
			BSP_LED_On(LED_BLUE);
 800f8da:	2000      	movs	r0, #0
 800f8dc:	f7f2 ff14 	bl	8002708 <BSP_LED_On>
			BSP_LED_On(LED_GREEN);
 800f8e0:	2001      	movs	r0, #1
 800f8e2:	f7f2 ff11 	bl	8002708 <BSP_LED_On>
			aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 111111);
 800f8e6:	4b2c      	ldr	r3, [pc, #176]	; (800f998 <SVCCTL_App_Notification+0x454>)
 800f8e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f8ea:	492c      	ldr	r1, [pc, #176]	; (800f99c <SVCCTL_App_Notification+0x458>)
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f7f8 fadb 	bl	8007ea8 <aci_gap_pass_key_resp>
			break;
 800f8f2:	e046      	b.n	800f982 <SVCCTL_App_Notification+0x43e>
					   ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 800f8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8f6:	3302      	adds	r3, #2
			   APP_DBG_MSG("Hex_value = %ld\n",
 800f8f8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800f8fc:	4619      	mov	r1, r3
 800f8fe:	4828      	ldr	r0, [pc, #160]	; (800f9a0 <SVCCTL_App_Notification+0x45c>)
 800f900:	f002 f99c 	bl	8011c3c <iprintf>
		BSP_LED_On(LED_RED);
 800f904:	2002      	movs	r0, #2
 800f906:	f7f2 feff 	bl	8002708 <BSP_LED_On>
		BSP_LED_On(LED_BLUE);
 800f90a:	2000      	movs	r0, #0
 800f90c:	f7f2 fefc 	bl	8002708 <BSP_LED_On>
		BSP_LED_On(LED_GREEN);
 800f910:	2001      	movs	r0, #1
 800f912:	f7f2 fef9 	bl	8002708 <BSP_LED_On>
		aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 800f916:	4b20      	ldr	r3, [pc, #128]	; (800f998 <SVCCTL_App_Notification+0x454>)
 800f918:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f91a:	2101      	movs	r1, #1
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7f8 fc93 	bl	8008248 <aci_gap_numeric_comparison_value_confirm_yesno>
		APP_DBG_MSG("\r\n\r** aci_gap_numeric_comparison_value_confirm_yesno-->YES \n");
 800f922:	4820      	ldr	r0, [pc, #128]	; (800f9a4 <SVCCTL_App_Notification+0x460>)
 800f924:	f002 f9fe 	bl	8011d24 <puts>
		break;
 800f928:	e02b      	b.n	800f982 <SVCCTL_App_Notification+0x43e>
			BSP_LED_On(LED_RED);
 800f92a:	2002      	movs	r0, #2
 800f92c:	f7f2 feec 	bl	8002708 <BSP_LED_On>
			DTS_App_TxPoolAvailableNotification();
 800f930:	f001 f9a2 	bl	8010c78 <DTS_App_TxPoolAvailableNotification>
			break;
 800f934:	e025      	b.n	800f982 <SVCCTL_App_Notification+0x43e>
			mutex = 1;
 800f936:	4b1c      	ldr	r3, [pc, #112]	; (800f9a8 <SVCCTL_App_Notification+0x464>)
 800f938:	2201      	movs	r2, #1
 800f93a:	701a      	strb	r2, [r3, #0]
			break;
 800f93c:	e021      	b.n	800f982 <SVCCTL_App_Notification+0x43e>
			APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PROCEDURE_COMPLETE \n");
 800f93e:	481b      	ldr	r0, [pc, #108]	; (800f9ac <SVCCTL_App_Notification+0x468>)
 800f940:	f002 f9f0 	bl	8011d24 <puts>
			aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blue_evt->data;
 800f944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f946:	3302      	adds	r3, #2
 800f948:	63bb      	str	r3, [r7, #56]	; 0x38
			if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC)
 800f94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94c:	781b      	ldrb	r3, [r3, #0]
 800f94e:	2b02      	cmp	r3, #2
 800f950:	d116      	bne.n	800f980 <SVCCTL_App_Notification+0x43c>
				if( gap_evt_proc_complete->Status != BLE_STATUS_SUCCESS )
 800f952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f954:	785b      	ldrb	r3, [r3, #1]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d003      	beq.n	800f962 <SVCCTL_App_Notification+0x41e>
					APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE FAILED\n");
 800f95a:	4815      	ldr	r0, [pc, #84]	; (800f9b0 <SVCCTL_App_Notification+0x46c>)
 800f95c:	f002 f9e2 	bl	8011d24 <puts>
			break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800f960:	e00e      	b.n	800f980 <SVCCTL_App_Notification+0x43c>
					BSP_LED_On(LED_RED);
 800f962:	2002      	movs	r0, #2
 800f964:	f7f2 fed0 	bl	8002708 <BSP_LED_On>
					if (BleApplicationContext.DeviceServerFound != NO_DEVICE_FOUND)
 800f968:	4b0b      	ldr	r3, [pc, #44]	; (800f998 <SVCCTL_App_Notification+0x454>)
 800f96a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d003      	beq.n	800f97a <SVCCTL_App_Notification+0x436>
						APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE COMPLETED\n");
 800f972:	4810      	ldr	r0, [pc, #64]	; (800f9b4 <SVCCTL_App_Notification+0x470>)
 800f974:	f002 f9d6 	bl	8011d24 <puts>
			break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800f978:	e002      	b.n	800f980 <SVCCTL_App_Notification+0x43c>
						APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE COMPLETED WITH NO DEVICE FOUND\n");
 800f97a:	480f      	ldr	r0, [pc, #60]	; (800f9b8 <SVCCTL_App_Notification+0x474>)
 800f97c:	f002 f9d2 	bl	8011d24 <puts>
			break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800f980:	bf00      	nop
		break; /* EVT_VENDOR */
 800f982:	bf00      	nop
	}

	return (SVCCTL_UserEvtFlowEnable);
 800f984:	2301      	movs	r3, #1
}
 800f986:	4618      	mov	r0, r3
 800f988:	374c      	adds	r7, #76	; 0x4c
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd90      	pop	{r4, r7, pc}
 800f98e:	bf00      	nop
 800f990:	0801332c 	.word	0x0801332c
 800f994:	08013340 	.word	0x08013340
 800f998:	20000190 	.word	0x20000190
 800f99c:	0001b207 	.word	0x0001b207
 800f9a0:	08013360 	.word	0x08013360
 800f9a4:	08013374 	.word	0x08013374
 800f9a8:	20006fa0 	.word	0x20006fa0
 800f9ac:	080133b0 	.word	0x080133b0
 800f9b0:	080133d8 	.word	0x080133d8
 800f9b4:	08013404 	.word	0x08013404
 800f9b8:	08013434 	.word	0x08013434

0800f9bc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b082      	sub	sp, #8
 800f9c0:	af00      	add	r7, sp, #0
	HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

	Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800f9c2:	4b06      	ldr	r3, [pc, #24]	; (800f9dc <Ble_Tl_Init+0x20>)
 800f9c4:	603b      	str	r3, [r7, #0]
	Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800f9c6:	4b06      	ldr	r3, [pc, #24]	; (800f9e0 <Ble_Tl_Init+0x24>)
 800f9c8:	607b      	str	r3, [r7, #4]
	hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800f9ca:	463b      	mov	r3, r7
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	4805      	ldr	r0, [pc, #20]	; (800f9e4 <Ble_Tl_Init+0x28>)
 800f9d0:	f7f9 fe5e 	bl	8009690 <hci_init>

	return;
 800f9d4:	bf00      	nop
}
 800f9d6:	3708      	adds	r7, #8
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}
 800f9dc:	200300d4 	.word	0x200300d4
 800f9e0:	0800febd 	.word	0x0800febd
 800f9e4:	0800fe85 	.word	0x0800fe85

0800f9e8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800f9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9ea:	b08f      	sub	sp, #60	; 0x3c
 800f9ec:	af06      	add	r7, sp, #24
	uint8_t role;
//	uint8_t index;
	uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
	const uint8_t *bd_addr;
	uint32_t srd_bd_addr[2];
	uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800f9ee:	f44f 7350 	mov.w	r3, #832	; 0x340
 800f9f2:	803b      	strh	r3, [r7, #0]

	/**
	 * Initialize HCI layer
	 */
	/*HCI Reset to synchronise BLE Stack*/
	hci_reset();
 800f9f4:	f7f9 f987 	bl	8008d06 <hci_reset>

	/**
	 * Write the BD Address
	 */

	bd_addr = BleGetBdAddress();
 800f9f8:	f000 f93c 	bl	800fc74 <BleGetBdAddress>
 800f9fc:	61f8      	str	r0, [r7, #28]
	aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800f9fe:	69fa      	ldr	r2, [r7, #28]
 800fa00:	2106      	movs	r1, #6
 800fa02:	2000      	movs	r0, #0
 800fa04:	f7f9 f8bf 	bl	8008b86 <aci_hal_write_config_data>
	 * Static random Address
	 * The two upper bits shall be set to 1
	 * The lowest 32bits is read from the UDN to differentiate between devices
	 * The RNG may be used to provide a random number on each power on
	 */
	srd_bd_addr[1] =  0x0000ED6E;
 800fa08:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800fa0c:	60bb      	str	r3, [r7, #8]
	srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800fa0e:	f7ff fced 	bl	800f3ec <LL_FLASH_GetUDN>
 800fa12:	4603      	mov	r3, r0
 800fa14:	607b      	str	r3, [r7, #4]
	aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800fa16:	1d3b      	adds	r3, r7, #4
 800fa18:	461a      	mov	r2, r3
 800fa1a:	2106      	movs	r1, #6
 800fa1c:	202e      	movs	r0, #46	; 0x2e
 800fa1e:	f7f9 f8b2 	bl	8008b86 <aci_hal_write_config_data>

	/**
	 * Write Identity root key used to derive LTK and CSRK
	 */
	aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800fa22:	4a3e      	ldr	r2, [pc, #248]	; (800fb1c <Ble_Hci_Gap_Gatt_Init+0x134>)
 800fa24:	2110      	movs	r1, #16
 800fa26:	2018      	movs	r0, #24
 800fa28:	f7f9 f8ad 	bl	8008b86 <aci_hal_write_config_data>

	/**
	 * Write Encryption root key used to derive LTK and CSRK
	 */
	aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800fa2c:	4a3c      	ldr	r2, [pc, #240]	; (800fb20 <Ble_Hci_Gap_Gatt_Init+0x138>)
 800fa2e:	2110      	movs	r1, #16
 800fa30:	2008      	movs	r0, #8
 800fa32:	f7f9 f8a8 	bl	8008b86 <aci_hal_write_config_data>

	/**
	 * Set TX Power to 0dBm.
	 */
	aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800fa36:	2118      	movs	r1, #24
 800fa38:	2001      	movs	r0, #1
 800fa3a:	f7f9 f90d 	bl	8008c58 <aci_hal_set_tx_power_level>

	/**
	 * Initialize GATT interface
	 */
	aci_gatt_init();
 800fa3e:	f7f8 fc5a 	bl	80082f6 <aci_gatt_init>

	/**
	 * Initialize GAP interface
	 */
	role = 0;
 800fa42:	2300      	movs	r3, #0
 800fa44:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
	role |= GAP_PERIPHERAL_ROLE;
 800fa46:	7efb      	ldrb	r3, [r7, #27]
 800fa48:	f043 0301 	orr.w	r3, r3, #1
 800fa4c:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
	role |= GAP_CENTRAL_ROLE;
#endif

	if (role > 0)
 800fa4e:	7efb      	ldrb	r3, [r7, #27]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d01e      	beq.n	800fa92 <Ble_Hci_Gap_Gatt_Init+0xaa>
	{
		const char *name = "BLEcore";
 800fa54:	4b33      	ldr	r3, [pc, #204]	; (800fb24 <Ble_Hci_Gap_Gatt_Init+0x13c>)
 800fa56:	617b      	str	r3, [r7, #20]
		aci_gap_init(role, 0,
 800fa58:	f107 0212 	add.w	r2, r7, #18
 800fa5c:	7ef8      	ldrb	r0, [r7, #27]
 800fa5e:	f107 030e 	add.w	r3, r7, #14
 800fa62:	9301      	str	r3, [sp, #4]
 800fa64:	f107 0310 	add.w	r3, r7, #16
 800fa68:	9300      	str	r3, [sp, #0]
 800fa6a:	4613      	mov	r3, r2
 800fa6c:	2207      	movs	r2, #7
 800fa6e:	2100      	movs	r1, #0
 800fa70:	f7f8 fa71 	bl	8007f56 <aci_gap_init>
				APPBLE_GAP_DEVICE_NAME_LENGTH,
				&gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

		if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800fa74:	8a7c      	ldrh	r4, [r7, #18]
 800fa76:	8a3d      	ldrh	r5, [r7, #16]
 800fa78:	6978      	ldr	r0, [r7, #20]
 800fa7a:	f7f0 fb8b 	bl	8000194 <strlen>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	b2da      	uxtb	r2, r3
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	9300      	str	r3, [sp, #0]
 800fa86:	4613      	mov	r3, r2
 800fa88:	2200      	movs	r2, #0
 800fa8a:	4629      	mov	r1, r5
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	f7f8 fdf0 	bl	8008672 <aci_gatt_update_char_value>
		{
			BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
		}
	}

	if(aci_gatt_update_char_value(gap_service_handle,
 800fa92:	8a78      	ldrh	r0, [r7, #18]
 800fa94:	89f9      	ldrh	r1, [r7, #14]
 800fa96:	463b      	mov	r3, r7
 800fa98:	9300      	str	r3, [sp, #0]
 800fa9a:	2302      	movs	r3, #2
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	f7f8 fde8 	bl	8008672 <aci_gatt_update_char_value>
	//  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);

	/**
	 * Initialize IO capability
	 */
	BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800faa2:	4b21      	ldr	r3, [pc, #132]	; (800fb28 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800faa4:	2201      	movs	r2, #1
 800faa6:	701a      	strb	r2, [r3, #0]
	aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800faa8:	4b1f      	ldr	r3, [pc, #124]	; (800fb28 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	4618      	mov	r0, r3
 800faae:	f7f8 f909 	bl	8007cc4 <aci_gap_set_io_capability>
	//                                         BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
	//                                         BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
	//                                         BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
	//                                         0
	//  );
	BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800fab2:	4b1d      	ldr	r3, [pc, #116]	; (800fb28 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800fab4:	2201      	movs	r2, #1
 800fab6:	705a      	strb	r2, [r3, #1]
	BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800fab8:	4b1b      	ldr	r3, [pc, #108]	; (800fb28 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800faba:	2208      	movs	r2, #8
 800fabc:	755a      	strb	r2, [r3, #21]
	BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800fabe:	4b1a      	ldr	r3, [pc, #104]	; (800fb28 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800fac0:	2210      	movs	r2, #16
 800fac2:	759a      	strb	r2, [r3, #22]
	BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800fac4:	4b18      	ldr	r3, [pc, #96]	; (800fb28 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800fac6:	2200      	movs	r2, #0
 800fac8:	751a      	strb	r2, [r3, #20]
	BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800faca:	4b17      	ldr	r3, [pc, #92]	; (800fb28 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800facc:	4a17      	ldr	r2, [pc, #92]	; (800fb2c <Ble_Hci_Gap_Gatt_Init+0x144>)
 800face:	619a      	str	r2, [r3, #24]
	BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800fad0:	4b15      	ldr	r3, [pc, #84]	; (800fb28 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800fad2:	2201      	movs	r2, #1
 800fad4:	709a      	strb	r2, [r3, #2]

	aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800fad6:	4b14      	ldr	r3, [pc, #80]	; (800fb28 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800fad8:	789d      	ldrb	r5, [r3, #2]
 800fada:	4b13      	ldr	r3, [pc, #76]	; (800fb28 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800fadc:	785e      	ldrb	r6, [r3, #1]
 800fade:	4b12      	ldr	r3, [pc, #72]	; (800fb28 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800fae0:	7d5b      	ldrb	r3, [r3, #21]
 800fae2:	4a11      	ldr	r2, [pc, #68]	; (800fb28 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800fae4:	7d92      	ldrb	r2, [r2, #22]
 800fae6:	4910      	ldr	r1, [pc, #64]	; (800fb28 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800fae8:	7d09      	ldrb	r1, [r1, #20]
 800faea:	480f      	ldr	r0, [pc, #60]	; (800fb28 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800faec:	6980      	ldr	r0, [r0, #24]
 800faee:	2400      	movs	r4, #0
 800faf0:	9404      	str	r4, [sp, #16]
 800faf2:	9003      	str	r0, [sp, #12]
 800faf4:	9102      	str	r1, [sp, #8]
 800faf6:	9201      	str	r2, [sp, #4]
 800faf8:	9300      	str	r3, [sp, #0]
 800fafa:	2300      	movs	r3, #0
 800fafc:	2201      	movs	r2, #1
 800fafe:	4631      	mov	r1, r6
 800fb00:	4628      	mov	r0, r5
 800fb02:	f7f8 f929 	bl	8007d58 <aci_gap_set_authentication_requirement>
	);

	/**
	 * Initialize whitelist
	 */
	 if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800fb06:	4b08      	ldr	r3, [pc, #32]	; (800fb28 <Ble_Hci_Gap_Gatt_Init+0x140>)
 800fb08:	789b      	ldrb	r3, [r3, #2]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d001      	beq.n	800fb12 <Ble_Hci_Gap_Gatt_Init+0x12a>
	 {
		 aci_gap_configure_whitelist();
 800fb0e:	f7f8 fb09 	bl	8008124 <aci_gap_configure_whitelist>
	 }
}
 800fb12:	bf00      	nop
 800fb14:	3724      	adds	r7, #36	; 0x24
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	0801408c 	.word	0x0801408c
 800fb20:	0801409c 	.word	0x0801409c
 800fb24:	0801348c 	.word	0x0801348c
 800fb28:	20000190 	.word	0x20000190
 800fb2c:	0001b207 	.word	0x0001b207

0800fb30 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b08c      	sub	sp, #48	; 0x30
 800fb34:	af08      	add	r7, sp, #32
 800fb36:	4603      	mov	r3, r0
 800fb38:	71fb      	strb	r3, [r7, #7]
	tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800fb3a:	2342      	movs	r3, #66	; 0x42
 800fb3c:	73fb      	strb	r3, [r7, #15]
	uint16_t Min_Inter, Max_Inter;

	if (New_Status == APP_BLE_FAST_ADV)
 800fb3e:	79fb      	ldrb	r3, [r7, #7]
 800fb40:	2b01      	cmp	r3, #1
 800fb42:	d106      	bne.n	800fb52 <Adv_Request+0x22>
	{
		Min_Inter = AdvIntervalMin;
 800fb44:	4b3e      	ldr	r3, [pc, #248]	; (800fc40 <Adv_Request+0x110>)
 800fb46:	881b      	ldrh	r3, [r3, #0]
 800fb48:	81bb      	strh	r3, [r7, #12]
		Max_Inter = AdvIntervalMax;
 800fb4a:	4b3e      	ldr	r3, [pc, #248]	; (800fc44 <Adv_Request+0x114>)
 800fb4c:	881b      	ldrh	r3, [r3, #0]
 800fb4e:	817b      	strh	r3, [r7, #10]
 800fb50:	e005      	b.n	800fb5e <Adv_Request+0x2e>
	}
	else
	{
		Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800fb52:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800fb56:	81bb      	strh	r3, [r7, #12]
		Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800fb58:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800fb5c:	817b      	strh	r3, [r7, #10]

	/**
	 * Stop the timer, it will be restarted for a new shot
	 * It does not hurt if the timer was not running
	 */
	HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800fb5e:	4b3a      	ldr	r3, [pc, #232]	; (800fc48 <Adv_Request+0x118>)
 800fb60:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7f2 f8fb 	bl	8001d60 <HW_TS_Stop>

	APP_DBG_MSG("First index in %d state \n",
			BleApplicationContext.Device_Connection_Status);
 800fb6a:	4b37      	ldr	r3, [pc, #220]	; (800fc48 <Adv_Request+0x118>)
 800fb6c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
	APP_DBG_MSG("First index in %d state \n",
 800fb70:	4619      	mov	r1, r3
 800fb72:	4836      	ldr	r0, [pc, #216]	; (800fc4c <Adv_Request+0x11c>)
 800fb74:	f002 f862 	bl	8011c3c <iprintf>

	if ((New_Status == APP_BLE_LP_ADV)
 800fb78:	79fb      	ldrb	r3, [r7, #7]
 800fb7a:	2b02      	cmp	r3, #2
 800fb7c:	d119      	bne.n	800fbb2 <Adv_Request+0x82>
			&& ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800fb7e:	4b32      	ldr	r3, [pc, #200]	; (800fc48 <Adv_Request+0x118>)
 800fb80:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800fb84:	2b01      	cmp	r3, #1
 800fb86:	d004      	beq.n	800fb92 <Adv_Request+0x62>
					|| (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800fb88:	4b2f      	ldr	r3, [pc, #188]	; (800fc48 <Adv_Request+0x118>)
 800fb8a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800fb8e:	2b02      	cmp	r3, #2
 800fb90:	d10f      	bne.n	800fbb2 <Adv_Request+0x82>
	{
		/* Connection in ADVERTISE mode have to stop the current advertising */
		ret = aci_gap_set_non_discoverable();
 800fb92:	f7f7 ff95 	bl	8007ac0 <aci_gap_set_non_discoverable>
 800fb96:	4603      	mov	r3, r0
 800fb98:	73fb      	strb	r3, [r7, #15]
		if (ret == BLE_STATUS_SUCCESS)
 800fb9a:	7bfb      	ldrb	r3, [r7, #15]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d103      	bne.n	800fba8 <Adv_Request+0x78>
		{
			APP_DBG_MSG("Successfully Stopped Advertising");
 800fba0:	482b      	ldr	r0, [pc, #172]	; (800fc50 <Adv_Request+0x120>)
 800fba2:	f002 f84b 	bl	8011c3c <iprintf>
 800fba6:	e004      	b.n	800fbb2 <Adv_Request+0x82>
		}
		else
		{
			APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 800fba8:	7bfb      	ldrb	r3, [r7, #15]
 800fbaa:	4619      	mov	r1, r3
 800fbac:	4829      	ldr	r0, [pc, #164]	; (800fc54 <Adv_Request+0x124>)
 800fbae:	f002 f845 	bl	8011c3c <iprintf>
		}
	}

	BleApplicationContext.Device_Connection_Status = New_Status;
 800fbb2:	4a25      	ldr	r2, [pc, #148]	; (800fc48 <Adv_Request+0x118>)
 800fbb4:	79fb      	ldrb	r3, [r7, #7]
 800fbb6:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
	//        (uint8_t*) local_name,
	//        BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
	//        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
	//        6,
	//        8);
	ret = aci_gap_set_discoverable(ADV_IND,
 800fbba:	2308      	movs	r3, #8
 800fbbc:	9306      	str	r3, [sp, #24]
 800fbbe:	2306      	movs	r3, #6
 800fbc0:	9305      	str	r3, [sp, #20]
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	9304      	str	r3, [sp, #16]
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	9303      	str	r3, [sp, #12]
 800fbca:	4b23      	ldr	r3, [pc, #140]	; (800fc58 <Adv_Request+0x128>)
 800fbcc:	9302      	str	r3, [sp, #8]
 800fbce:	230a      	movs	r3, #10
 800fbd0:	9301      	str	r3, [sp, #4]
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	9300      	str	r3, [sp, #0]
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	2230      	movs	r2, #48	; 0x30
 800fbda:	2120      	movs	r1, #32
 800fbdc:	2000      	movs	r0, #0
 800fbde:	f7f7 ff93 	bl	8007b08 <aci_gap_set_discoverable>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	73fb      	strb	r3, [r7, #15]
			NO_WHITE_LIST_USE, /* use white list */
			sizeof(local_name), (uint8_t*) local_name, 0,
			NULL,
			6, 8);
	/* Update Advertising data */
	ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800fbe6:	491d      	ldr	r1, [pc, #116]	; (800fc5c <Adv_Request+0x12c>)
 800fbe8:	2016      	movs	r0, #22
 800fbea:	f7f8 fa3f 	bl	800806c <aci_gap_update_adv_data>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	73fb      	strb	r3, [r7, #15]
	//    ret = aci_gap_update_adv_data(22, (uint8_t*) manuf_data);

	if (ret == BLE_STATUS_SUCCESS)
 800fbf2:	7bfb      	ldrb	r3, [r7, #15]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d111      	bne.n	800fc1c <Adv_Request+0xec>
	{
		if (New_Status == APP_BLE_FAST_ADV)
 800fbf8:	79fb      	ldrb	r3, [r7, #7]
 800fbfa:	2b01      	cmp	r3, #1
 800fbfc:	d10a      	bne.n	800fc14 <Adv_Request+0xe4>
		{
			APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 800fbfe:	4818      	ldr	r0, [pc, #96]	; (800fc60 <Adv_Request+0x130>)
 800fc00:	f002 f890 	bl	8011d24 <puts>
			/* Start Timer to STOP ADV - TIMEOUT */
			HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800fc04:	4b10      	ldr	r3, [pc, #64]	; (800fc48 <Adv_Request+0x118>)
 800fc06:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fc0a:	4916      	ldr	r1, [pc, #88]	; (800fc64 <Adv_Request+0x134>)
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f7f2 f931 	bl	8001e74 <HW_TS_Start>
		{
			APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
		}
	}

	return;
 800fc12:	e012      	b.n	800fc3a <Adv_Request+0x10a>
			APP_DBG_MSG("\n\rSuccessfully Start Low Power Advertising \n\r");
 800fc14:	4814      	ldr	r0, [pc, #80]	; (800fc68 <Adv_Request+0x138>)
 800fc16:	f002 f811 	bl	8011c3c <iprintf>
	return;
 800fc1a:	e00e      	b.n	800fc3a <Adv_Request+0x10a>
		if (New_Status == APP_BLE_FAST_ADV)
 800fc1c:	79fb      	ldrb	r3, [r7, #7]
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d105      	bne.n	800fc2e <Adv_Request+0xfe>
			APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n\r", ret);
 800fc22:	7bfb      	ldrb	r3, [r7, #15]
 800fc24:	4619      	mov	r1, r3
 800fc26:	4811      	ldr	r0, [pc, #68]	; (800fc6c <Adv_Request+0x13c>)
 800fc28:	f002 f808 	bl	8011c3c <iprintf>
	return;
 800fc2c:	e005      	b.n	800fc3a <Adv_Request+0x10a>
			APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 800fc2e:	7bfb      	ldrb	r3, [r7, #15]
 800fc30:	4619      	mov	r1, r3
 800fc32:	480f      	ldr	r0, [pc, #60]	; (800fc70 <Adv_Request+0x140>)
 800fc34:	f002 f802 	bl	8011c3c <iprintf>
	return;
 800fc38:	bf00      	nop
}
 800fc3a:	3710      	adds	r7, #16
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}
 800fc40:	20000224 	.word	0x20000224
 800fc44:	20000226 	.word	0x20000226
 800fc48:	20000190 	.word	0x20000190
 800fc4c:	08013494 	.word	0x08013494
 800fc50:	080134b0 	.word	0x080134b0
 800fc54:	080134d4 	.word	0x080134d4
 800fc58:	080140ac 	.word	0x080140ac
 800fc5c:	080140b8 	.word	0x080140b8
 800fc60:	080134fc 	.word	0x080134fc
 800fc64:	0003c08d 	.word	0x0003c08d
 800fc68:	08013524 	.word	0x08013524
 800fc6c:	08013554 	.word	0x08013554
 800fc70:	08013584 	.word	0x08013584

0800fc74 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b086      	sub	sp, #24
 800fc78:	af00      	add	r7, sp, #0
	const uint8_t *bd_addr;
	uint32_t udn;
	uint32_t company_id;
	uint32_t device_id;

	udn = LL_FLASH_GetUDN();
 800fc7a:	f7ff fbb7 	bl	800f3ec <LL_FLASH_GetUDN>
 800fc7e:	6138      	str	r0, [r7, #16]

	if(udn != 0xFFFFFFFF)
 800fc80:	693b      	ldr	r3, [r7, #16]
 800fc82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc86:	d023      	beq.n	800fcd0 <BleGetBdAddress+0x5c>
	{
		company_id = LL_FLASH_GetSTCompanyID();
 800fc88:	f7ff fbc8 	bl	800f41c <LL_FLASH_GetSTCompanyID>
 800fc8c:	60b8      	str	r0, [r7, #8]
		device_id = LL_FLASH_GetDeviceID();
 800fc8e:	f7ff fbb9 	bl	800f404 <LL_FLASH_GetDeviceID>
 800fc92:	6078      	str	r0, [r7, #4]

		bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	b2da      	uxtb	r2, r3
 800fc98:	4b16      	ldr	r3, [pc, #88]	; (800fcf4 <BleGetBdAddress+0x80>)
 800fc9a:	701a      	strb	r2, [r3, #0]
		bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	0a1b      	lsrs	r3, r3, #8
 800fca0:	b2da      	uxtb	r2, r3
 800fca2:	4b14      	ldr	r3, [pc, #80]	; (800fcf4 <BleGetBdAddress+0x80>)
 800fca4:	705a      	strb	r2, [r3, #1]
		bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800fca6:	693b      	ldr	r3, [r7, #16]
 800fca8:	0c1b      	lsrs	r3, r3, #16
 800fcaa:	b2da      	uxtb	r2, r3
 800fcac:	4b11      	ldr	r3, [pc, #68]	; (800fcf4 <BleGetBdAddress+0x80>)
 800fcae:	709a      	strb	r2, [r3, #2]
		bd_addr_udn[3] = (uint8_t)device_id;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	b2da      	uxtb	r2, r3
 800fcb4:	4b0f      	ldr	r3, [pc, #60]	; (800fcf4 <BleGetBdAddress+0x80>)
 800fcb6:	70da      	strb	r2, [r3, #3]
		bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	b2da      	uxtb	r2, r3
 800fcbc:	4b0d      	ldr	r3, [pc, #52]	; (800fcf4 <BleGetBdAddress+0x80>)
 800fcbe:	711a      	strb	r2, [r3, #4]
		bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	0a1b      	lsrs	r3, r3, #8
 800fcc4:	b2da      	uxtb	r2, r3
 800fcc6:	4b0b      	ldr	r3, [pc, #44]	; (800fcf4 <BleGetBdAddress+0x80>)
 800fcc8:	715a      	strb	r2, [r3, #5]

		bd_addr = (const uint8_t *)bd_addr_udn;
 800fcca:	4b0a      	ldr	r3, [pc, #40]	; (800fcf4 <BleGetBdAddress+0x80>)
 800fccc:	617b      	str	r3, [r7, #20]
 800fcce:	e00b      	b.n	800fce8 <BleGetBdAddress+0x74>
	}
	else
	{
		otp_addr = OTP_Read(0);
 800fcd0:	2000      	movs	r0, #0
 800fcd2:	f7fa feaf 	bl	800aa34 <OTP_Read>
 800fcd6:	60f8      	str	r0, [r7, #12]
		if(otp_addr)
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d002      	beq.n	800fce4 <BleGetBdAddress+0x70>
		{
			bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	617b      	str	r3, [r7, #20]
 800fce2:	e001      	b.n	800fce8 <BleGetBdAddress+0x74>
		}
		else
		{
			bd_addr = M_bd_addr;
 800fce4:	4b04      	ldr	r3, [pc, #16]	; (800fcf8 <BleGetBdAddress+0x84>)
 800fce6:	617b      	str	r3, [r7, #20]
		}

	}

	return bd_addr;
 800fce8:	697b      	ldr	r3, [r7, #20]
}
 800fcea:	4618      	mov	r0, r3
 800fcec:	3718      	adds	r7, #24
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}
 800fcf2:	bf00      	nop
 800fcf4:	200068d4 	.word	0x200068d4
 800fcf8:	08014084 	.word	0x08014084

0800fcfc <APP_BLE_ComputeCRC8>:

/* USER CODE BEGIN FD_LOCAL_FUNCTION */
uint8_t APP_BLE_ComputeCRC8( uint8_t *DataPtr , uint8_t Datalen )
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	b085      	sub	sp, #20
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
 800fd04:	460b      	mov	r3, r1
 800fd06:	70fb      	strb	r3, [r7, #3]
	uint8_t i, j;
	const uint8_t PolynomeCRC = 0x97;
 800fd08:	2397      	movs	r3, #151	; 0x97
 800fd0a:	733b      	strb	r3, [r7, #12]
	uint8_t CRC8 = 0x00;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	737b      	strb	r3, [r7, #13]

	for (i = 0; i < Datalen; i++)
 800fd10:	2300      	movs	r3, #0
 800fd12:	73fb      	strb	r3, [r7, #15]
 800fd14:	e022      	b.n	800fd5c <APP_BLE_ComputeCRC8+0x60>
	{
		CRC8 ^= DataPtr[i];
 800fd16:	7bfb      	ldrb	r3, [r7, #15]
 800fd18:	687a      	ldr	r2, [r7, #4]
 800fd1a:	4413      	add	r3, r2
 800fd1c:	781a      	ldrb	r2, [r3, #0]
 800fd1e:	7b7b      	ldrb	r3, [r7, #13]
 800fd20:	4053      	eors	r3, r2
 800fd22:	737b      	strb	r3, [r7, #13]
		for (j = 0; j < 8; j++)
 800fd24:	2300      	movs	r3, #0
 800fd26:	73bb      	strb	r3, [r7, #14]
 800fd28:	e012      	b.n	800fd50 <APP_BLE_ComputeCRC8+0x54>
		{
			if ((CRC8 & 0x80) != 0)
 800fd2a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	da08      	bge.n	800fd44 <APP_BLE_ComputeCRC8+0x48>
			{
				CRC8 = (uint8_t) ((CRC8 << 1) ^ PolynomeCRC);
 800fd32:	7b7b      	ldrb	r3, [r7, #13]
 800fd34:	005b      	lsls	r3, r3, #1
 800fd36:	b25a      	sxtb	r2, r3
 800fd38:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800fd3c:	4053      	eors	r3, r2
 800fd3e:	b25b      	sxtb	r3, r3
 800fd40:	737b      	strb	r3, [r7, #13]
 800fd42:	e002      	b.n	800fd4a <APP_BLE_ComputeCRC8+0x4e>
			}
			else
			{
				CRC8 <<= 1;
 800fd44:	7b7b      	ldrb	r3, [r7, #13]
 800fd46:	005b      	lsls	r3, r3, #1
 800fd48:	737b      	strb	r3, [r7, #13]
		for (j = 0; j < 8; j++)
 800fd4a:	7bbb      	ldrb	r3, [r7, #14]
 800fd4c:	3301      	adds	r3, #1
 800fd4e:	73bb      	strb	r3, [r7, #14]
 800fd50:	7bbb      	ldrb	r3, [r7, #14]
 800fd52:	2b07      	cmp	r3, #7
 800fd54:	d9e9      	bls.n	800fd2a <APP_BLE_ComputeCRC8+0x2e>
	for (i = 0; i < Datalen; i++)
 800fd56:	7bfb      	ldrb	r3, [r7, #15]
 800fd58:	3301      	adds	r3, #1
 800fd5a:	73fb      	strb	r3, [r7, #15]
 800fd5c:	7bfa      	ldrb	r2, [r7, #15]
 800fd5e:	78fb      	ldrb	r3, [r7, #3]
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d3d8      	bcc.n	800fd16 <APP_BLE_ComputeCRC8+0x1a>
			}
		}
	}
	return (CRC8);
 800fd64:	7b7b      	ldrb	r3, [r7, #13]
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	3714      	adds	r7, #20
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd70:	4770      	bx	lr

0800fd72 <AdvUpdateProcess>:

	return;
}

static void AdvUpdateProcess(void *argument)
{
 800fd72:	b580      	push	{r7, lr}
 800fd74:	b082      	sub	sp, #8
 800fd76:	af00      	add	r7, sp, #0
 800fd78:	6078      	str	r0, [r7, #4]
	UNUSED(argument);

	for(;;)
	{
		osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800fd7a:	f04f 32ff 	mov.w	r2, #4294967295
 800fd7e:	2100      	movs	r1, #0
 800fd80:	2001      	movs	r0, #1
 800fd82:	f7fb fcaf 	bl	800b6e4 <osThreadFlagsWait>
		Adv_Update( );
 800fd86:	f000 f801 	bl	800fd8c <Adv_Update>
		osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800fd8a:	e7f6      	b.n	800fd7a <AdvUpdateProcess+0x8>

0800fd8c <Adv_Update>:
//	}
//	return;
//}

static void Adv_Update( void )
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	af00      	add	r7, sp, #0
	Adv_Request(APP_BLE_LP_ADV);
 800fd90:	2002      	movs	r0, #2
 800fd92:	f7ff fecd 	bl	800fb30 <Adv_Request>

	return;
 800fd96:	bf00      	nop
}
 800fd98:	bd80      	pop	{r7, pc}

0800fd9a <HciUserEvtProcess>:

static void HciUserEvtProcess(void *argument)
{
 800fd9a:	b580      	push	{r7, lr}
 800fd9c:	b082      	sub	sp, #8
 800fd9e:	af00      	add	r7, sp, #0
 800fda0:	6078      	str	r0, [r7, #4]
	UNUSED(argument);

	for(;;)
	{
		osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800fda2:	f04f 32ff 	mov.w	r2, #4294967295
 800fda6:	2100      	movs	r1, #0
 800fda8:	2001      	movs	r0, #1
 800fdaa:	f7fb fc9b 	bl	800b6e4 <osThreadFlagsWait>
		hci_user_evt_proc( );
 800fdae:	f7f9 fc8b 	bl	80096c8 <hci_user_evt_proc>
		osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800fdb2:	e7f6      	b.n	800fda2 <HciUserEvtProcess+0x8>

0800fdb4 <DataThroughput_proc>:
//    APP_DBG_MSG("** add ADV data **  Failed \r\n\r");
//  }
//  return;
//}

void DataThroughput_proc(void){
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	af00      	add	r7, sp, #0

	//  UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_WRITE_ID, CFG_SCH_PRIO_0);

	osThreadFlagsSet( DataWriteProcessId, 1 );
 800fdb8:	4b03      	ldr	r3, [pc, #12]	; (800fdc8 <DataThroughput_proc+0x14>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	2101      	movs	r1, #1
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7fb fc2e 	bl	800b620 <osThreadFlagsSet>
}
 800fdc4:	bf00      	nop
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	20006f9c 	.word	0x20006f9c

0800fdcc <LinkConfiguration>:
#endif

void LinkConfiguration(void * argument)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b084      	sub	sp, #16
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	tBleStatus status;

	while(1)
	{
		osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800fdd4:	f04f 32ff 	mov.w	r2, #4294967295
 800fdd8:	2100      	movs	r1, #0
 800fdda:	2001      	movs	r0, #1
 800fddc:	f7fb fc82 	bl	800b6e4 <osThreadFlagsWait>
			APP_DBG_MSG("TX PHY = %d\n", tx_phy);
			APP_DBG_MSG("RX PHY = %d\n", rx_phy);
		}
#endif

		  APP_DBG_MSG("set data length \n");
 800fde0:	480c      	ldr	r0, [pc, #48]	; (800fe14 <LinkConfiguration+0x48>)
 800fde2:	f001 ff9f 	bl	8011d24 <puts>
//		  BSP_LED_On(LED_BLUE);
		status = hci_le_set_data_length(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,251,2120);
 800fde6:	4b0c      	ldr	r3, [pc, #48]	; (800fe18 <LinkConfiguration+0x4c>)
 800fde8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fdea:	f640 0248 	movw	r2, #2120	; 0x848
 800fdee:	21fb      	movs	r1, #251	; 0xfb
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7f8 ffac 	bl	8008d4e <hci_le_set_data_length>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	73fb      	strb	r3, [r7, #15]
		if (status != BLE_STATUS_SUCCESS)
 800fdfa:	7bfb      	ldrb	r3, [r7, #15]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d002      	beq.n	800fe06 <LinkConfiguration+0x3a>
		{
//				  BSP_LED_On(LED_RED);
			    APP_DBG_MSG("set data length command error \n");
 800fe00:	4806      	ldr	r0, [pc, #24]	; (800fe1c <LinkConfiguration+0x50>)
 800fe02:	f001 ff8f 	bl	8011d24 <puts>

#if ((CFG_ENCRYPTION_ENABLE != 0) && (CFG_BLE_CENTRAL != 0))
		GapProcReq(GAP_PROC_PAIRING);
#endif

		DTC_App_LinkReadyNotification(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800fe06:	4b04      	ldr	r3, [pc, #16]	; (800fe18 <LinkConfiguration+0x4c>)
 800fe08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f000 fc16 	bl	801063c <DTC_App_LinkReadyNotification>
		osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 800fe10:	e7e0      	b.n	800fdd4 <LinkConfiguration+0x8>
 800fe12:	bf00      	nop
 800fe14:	080135b8 	.word	0x080135b8
 800fe18:	20000190 	.word	0x20000190
 800fe1c:	080135cc 	.word	0x080135cc

0800fe20 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b082      	sub	sp, #8
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
	UNUSED(pdata);
	osThreadFlagsSet( HciUserEvtProcessId, 1 );
 800fe28:	4b04      	ldr	r3, [pc, #16]	; (800fe3c <hci_notify_asynch_evt+0x1c>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	2101      	movs	r1, #1
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f7fb fbf6 	bl	800b620 <osThreadFlagsSet>
	return;
 800fe34:	bf00      	nop
}
 800fe36:	3708      	adds	r7, #8
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	20006f88 	.word	0x20006f88

0800fe40 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
	UNUSED(flag);
	osSemaphoreRelease( SemHciId );
 800fe48:	4b04      	ldr	r3, [pc, #16]	; (800fe5c <hci_cmd_resp_release+0x1c>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7fb ff57 	bl	800bd00 <osSemaphoreRelease>
	return;
 800fe52:	bf00      	nop
}
 800fe54:	3708      	adds	r7, #8
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
 800fe5a:	bf00      	nop
 800fe5c:	20006f84 	.word	0x20006f84

0800fe60 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
	UNUSED(timeout);
	osSemaphoreAcquire( SemHciId, osWaitForever );
 800fe68:	4b05      	ldr	r3, [pc, #20]	; (800fe80 <hci_cmd_resp_wait+0x20>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	f04f 31ff 	mov.w	r1, #4294967295
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7fb fedf 	bl	800bc34 <osSemaphoreAcquire>
	return;
 800fe76:	bf00      	nop
}
 800fe78:	3708      	adds	r7, #8
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}
 800fe7e:	bf00      	nop
 800fe80:	20006f84 	.word	0x20006f84

0800fe84 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b084      	sub	sp, #16
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
	SVCCTL_UserEvtFlowStatus_t svctl_return_status;
	tHCI_UserEvtRxParam *pParam;

	pParam = (tHCI_UserEvtRxParam *)pPayload;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	60fb      	str	r3, [r7, #12]

	svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	685b      	ldr	r3, [r3, #4]
 800fe94:	3308      	adds	r3, #8
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7f9 fa68 	bl	800936c <SVCCTL_UserEvtRx>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	72fb      	strb	r3, [r7, #11]
	if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800fea0:	7afb      	ldrb	r3, [r7, #11]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d003      	beq.n	800feae <BLE_UserEvtRx+0x2a>
	{
		pParam->status = HCI_TL_UserEventFlow_Enable;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	2201      	movs	r2, #1
 800feaa:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		pParam->status = HCI_TL_UserEventFlow_Disable;
	}
}
 800feac:	e002      	b.n	800feb4 <BLE_UserEvtRx+0x30>
		pParam->status = HCI_TL_UserEventFlow_Disable;
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	2200      	movs	r2, #0
 800feb2:	701a      	strb	r2, [r3, #0]
}
 800feb4:	bf00      	nop
 800feb6:	3710      	adds	r7, #16
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}

0800febc <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b082      	sub	sp, #8
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	4603      	mov	r3, r0
 800fec4:	71fb      	strb	r3, [r7, #7]
	switch (status)
 800fec6:	79fb      	ldrb	r3, [r7, #7]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d002      	beq.n	800fed2 <BLE_StatusNot+0x16>
 800fecc:	2b01      	cmp	r3, #1
 800fece:	d008      	beq.n	800fee2 <BLE_StatusNot+0x26>
	case HCI_TL_CmdAvailable:
		osMutexRelease( MtxHciId );
		break;

	default:
		break;
 800fed0:	e00d      	b.n	800feee <BLE_StatusNot+0x32>
		osMutexAcquire( MtxHciId, osWaitForever );
 800fed2:	4b09      	ldr	r3, [pc, #36]	; (800fef8 <BLE_StatusNot+0x3c>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	f04f 31ff 	mov.w	r1, #4294967295
 800feda:	4618      	mov	r0, r3
 800fedc:	f7fb fd5e 	bl	800b99c <osMutexAcquire>
		break;
 800fee0:	e005      	b.n	800feee <BLE_StatusNot+0x32>
		osMutexRelease( MtxHciId );
 800fee2:	4b05      	ldr	r3, [pc, #20]	; (800fef8 <BLE_StatusNot+0x3c>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7fb fdb6 	bl	800ba58 <osMutexRelease>
		break;
 800feec:	bf00      	nop
	}
	return;
 800feee:	bf00      	nop
}
 800fef0:	3708      	adds	r7, #8
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}
 800fef6:	bf00      	nop
 800fef8:	20006fac 	.word	0x20006fac

0800fefc <SVCCTL_InitCustomSvc>:
	return;
}

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void SVCCTL_InitCustomSvc( void )
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	af00      	add	r7, sp, #0
	DTS_STM_Init();
 800ff00:	f001 f8c2 	bl	8011088 <DTS_STM_Init>
}
 800ff04:	bf00      	nop
 800ff06:	bd80      	pop	{r7, pc}

0800ff08 <BLE_SVC_L2CAP_Conn_Update_7_5>:

void BLE_SVC_L2CAP_Conn_Update_7_5(void)
{
 800ff08:	b590      	push	{r4, r7, lr}
 800ff0a:	b087      	sub	sp, #28
 800ff0c:	af02      	add	r7, sp, #8
/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

/* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */
  if(mutex == 1) {
 800ff0e:	4b15      	ldr	r3, [pc, #84]	; (800ff64 <BLE_SVC_L2CAP_Conn_Update_7_5+0x5c>)
 800ff10:	781b      	ldrb	r3, [r3, #0]
 800ff12:	2b01      	cmp	r3, #1
 800ff14:	d122      	bne.n	800ff5c <BLE_SVC_L2CAP_Conn_Update_7_5+0x54>
    mutex = 0;
 800ff16:	4b13      	ldr	r3, [pc, #76]	; (800ff64 <BLE_SVC_L2CAP_Conn_Update_7_5+0x5c>)
 800ff18:	2200      	movs	r2, #0
 800ff1a:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(7.5);
 800ff1c:	2306      	movs	r3, #6
 800ff1e:	81fb      	strh	r3, [r7, #14]
    uint16_t interval_max = CONN_P(7.5);
 800ff20:	2306      	movs	r3, #6
 800ff22:	81bb      	strh	r3, [r7, #12]
    uint16_t slave_latency = L2CAP_SLAVE_LATENCY;
 800ff24:	2300      	movs	r3, #0
 800ff26:	817b      	strh	r3, [r7, #10]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 800ff28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800ff2c:	813b      	strh	r3, [r7, #8]
    tBleStatus result;

    result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800ff2e:	4b0e      	ldr	r3, [pc, #56]	; (800ff68 <BLE_SVC_L2CAP_Conn_Update_7_5+0x60>)
 800ff30:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 800ff32:	897c      	ldrh	r4, [r7, #10]
 800ff34:	89ba      	ldrh	r2, [r7, #12]
 800ff36:	89f9      	ldrh	r1, [r7, #14]
 800ff38:	893b      	ldrh	r3, [r7, #8]
 800ff3a:	9300      	str	r3, [sp, #0]
 800ff3c:	4623      	mov	r3, r4
 800ff3e:	f7f8 ff77 	bl	8008e30 <aci_l2cap_connection_parameter_update_req>
 800ff42:	4603      	mov	r3, r0
 800ff44:	71fb      	strb	r3, [r7, #7]
                                                       interval_min, interval_max,
                                                       slave_latency, timeout_multiplier);
    if( result == BLE_STATUS_SUCCESS )
 800ff46:	79fb      	ldrb	r3, [r7, #7]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d103      	bne.n	800ff54 <BLE_SVC_L2CAP_Conn_Update_7_5+0x4c>
    {
#if(CFG_DEBUG_APP_TRACE != 0)
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 800ff4c:	4807      	ldr	r0, [pc, #28]	; (800ff6c <BLE_SVC_L2CAP_Conn_Update_7_5+0x64>)
 800ff4e:	f001 fe75 	bl	8011c3c <iprintf>
    }
  }
/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

/* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */
  return;
 800ff52:	e003      	b.n	800ff5c <BLE_SVC_L2CAP_Conn_Update_7_5+0x54>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 800ff54:	4806      	ldr	r0, [pc, #24]	; (800ff70 <BLE_SVC_L2CAP_Conn_Update_7_5+0x68>)
 800ff56:	f001 fe71 	bl	8011c3c <iprintf>
  return;
 800ff5a:	bf00      	nop
 800ff5c:	bf00      	nop
}
 800ff5e:	3714      	adds	r7, #20
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd90      	pop	{r4, r7, pc}
 800ff64:	20006fa0 	.word	0x20006fa0
 800ff68:	20000190 	.word	0x20000190
 800ff6c:	080136c8 	.word	0x080136c8
 800ff70:	080136f8 	.word	0x080136f8

0800ff74 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b082      	sub	sp, #8
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	3b0c      	subs	r3, #12
 800ff82:	2b12      	cmp	r3, #18
 800ff84:	d850      	bhi.n	8010028 <APP_THREAD_Error+0xb4>
 800ff86:	a201      	add	r2, pc, #4	; (adr r2, 800ff8c <APP_THREAD_Error+0x18>)
 800ff88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff8c:	0800ffd9 	.word	0x0800ffd9
 800ff90:	0800ffe3 	.word	0x0800ffe3
 800ff94:	0800ffed 	.word	0x0800ffed
 800ff98:	0800fff7 	.word	0x0800fff7
 800ff9c:	08010001 	.word	0x08010001
 800ffa0:	0801000b 	.word	0x0801000b
 800ffa4:	08010029 	.word	0x08010029
 800ffa8:	08010029 	.word	0x08010029
 800ffac:	08010029 	.word	0x08010029
 800ffb0:	08010029 	.word	0x08010029
 800ffb4:	08010029 	.word	0x08010029
 800ffb8:	08010029 	.word	0x08010029
 800ffbc:	08010029 	.word	0x08010029
 800ffc0:	08010029 	.word	0x08010029
 800ffc4:	08010029 	.word	0x08010029
 800ffc8:	08010029 	.word	0x08010029
 800ffcc:	08010015 	.word	0x08010015
 800ffd0:	08010029 	.word	0x08010029
 800ffd4:	0801001f 	.word	0x0801001f
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 800ffd8:	6839      	ldr	r1, [r7, #0]
 800ffda:	4818      	ldr	r0, [pc, #96]	; (801003c <APP_THREAD_Error+0xc8>)
 800ffdc:	f000 f8ca 	bl	8010174 <APP_THREAD_TraceError>
    break;
 800ffe0:	e027      	b.n	8010032 <APP_THREAD_Error+0xbe>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 800ffe2:	6839      	ldr	r1, [r7, #0]
 800ffe4:	4816      	ldr	r0, [pc, #88]	; (8010040 <APP_THREAD_Error+0xcc>)
 800ffe6:	f000 f8c5 	bl	8010174 <APP_THREAD_TraceError>
    break;
 800ffea:	e022      	b.n	8010032 <APP_THREAD_Error+0xbe>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 800ffec:	6839      	ldr	r1, [r7, #0]
 800ffee:	4815      	ldr	r0, [pc, #84]	; (8010044 <APP_THREAD_Error+0xd0>)
 800fff0:	f000 f8c0 	bl	8010174 <APP_THREAD_TraceError>
    break;
 800fff4:	e01d      	b.n	8010032 <APP_THREAD_Error+0xbe>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 800fff6:	6839      	ldr	r1, [r7, #0]
 800fff8:	4813      	ldr	r0, [pc, #76]	; (8010048 <APP_THREAD_Error+0xd4>)
 800fffa:	f000 f8bb 	bl	8010174 <APP_THREAD_TraceError>
    break;
 800fffe:	e018      	b.n	8010032 <APP_THREAD_Error+0xbe>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8010000:	6839      	ldr	r1, [r7, #0]
 8010002:	4812      	ldr	r0, [pc, #72]	; (801004c <APP_THREAD_Error+0xd8>)
 8010004:	f000 f8b6 	bl	8010174 <APP_THREAD_TraceError>
    break;
 8010008:	e013      	b.n	8010032 <APP_THREAD_Error+0xbe>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 801000a:	6839      	ldr	r1, [r7, #0]
 801000c:	4810      	ldr	r0, [pc, #64]	; (8010050 <APP_THREAD_Error+0xdc>)
 801000e:	f000 f8b1 	bl	8010174 <APP_THREAD_TraceError>
    break;
 8010012:	e00e      	b.n	8010032 <APP_THREAD_Error+0xbe>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8010014:	6839      	ldr	r1, [r7, #0]
 8010016:	480f      	ldr	r0, [pc, #60]	; (8010054 <APP_THREAD_Error+0xe0>)
 8010018:	f000 f8ac 	bl	8010174 <APP_THREAD_TraceError>
    break;
 801001c:	e009      	b.n	8010032 <APP_THREAD_Error+0xbe>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 801001e:	6839      	ldr	r1, [r7, #0]
 8010020:	480d      	ldr	r0, [pc, #52]	; (8010058 <APP_THREAD_Error+0xe4>)
 8010022:	f000 f8a7 	bl	8010174 <APP_THREAD_TraceError>
    break;
 8010026:	e004      	b.n	8010032 <APP_THREAD_Error+0xbe>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8010028:	2100      	movs	r1, #0
 801002a:	480c      	ldr	r0, [pc, #48]	; (801005c <APP_THREAD_Error+0xe8>)
 801002c:	f000 f8a2 	bl	8010174 <APP_THREAD_TraceError>
    break;
 8010030:	bf00      	nop
  }
}
 8010032:	bf00      	nop
 8010034:	3708      	adds	r7, #8
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}
 801003a:	bf00      	nop
 801003c:	08013760 	.word	0x08013760
 8010040:	08013784 	.word	0x08013784
 8010044:	080137a8 	.word	0x080137a8
 8010048:	080137c8 	.word	0x080137c8
 801004c:	080137e8 	.word	0x080137e8
 8010050:	08013808 	.word	0x08013808
 8010054:	08013824 	.word	0x08013824
 8010058:	08013850 	.word	0x08013850
 801005c:	08013874 	.word	0x08013874

08010060 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b082      	sub	sp, #8
 8010064:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 8010066:	2000      	movs	r0, #0
 8010068:	f7fa f91a 	bl	800a2a0 <otInstanceErasePersistentInfo>
 801006c:	4603      	mov	r3, r0
 801006e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8010070:	79fb      	ldrb	r3, [r7, #7]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d004      	beq.n	8010080 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8010076:	79fb      	ldrb	r3, [r7, #7]
 8010078:	4619      	mov	r1, r3
 801007a:	201c      	movs	r0, #28
 801007c:	f7ff ff7a 	bl	800ff74 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8010080:	2000      	movs	r0, #0
 8010082:	f7fa f8b0 	bl	800a1e6 <otInstanceFinalize>
  otInstanceInitSingle();
 8010086:	f7fa f887 	bl	800a198 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 801008a:	2200      	movs	r2, #0
 801008c:	4925      	ldr	r1, [pc, #148]	; (8010124 <APP_THREAD_DeviceConfig+0xc4>)
 801008e:	2000      	movs	r0, #0
 8010090:	f7fa f8d0 	bl	800a234 <otSetStateChangedCallback>
 8010094:	4603      	mov	r3, r0
 8010096:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8010098:	79fb      	ldrb	r3, [r7, #7]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d004      	beq.n	80100a8 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 801009e:	79fb      	ldrb	r3, [r7, #7]
 80100a0:	4619      	mov	r1, r3
 80100a2:	200d      	movs	r0, #13
 80100a4:	f7ff ff66 	bl	800ff74 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 80100a8:	2117      	movs	r1, #23
 80100aa:	2000      	movs	r0, #0
 80100ac:	f7fa f951 	bl	800a352 <otLinkSetChannel>
 80100b0:	4603      	mov	r3, r0
 80100b2:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80100b4:	79fb      	ldrb	r3, [r7, #7]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d004      	beq.n	80100c4 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 80100ba:	79fb      	ldrb	r3, [r7, #7]
 80100bc:	4619      	mov	r1, r3
 80100be:	200e      	movs	r0, #14
 80100c0:	f7ff ff58 	bl	800ff74 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 80100c4:	f241 2134 	movw	r1, #4660	; 0x1234
 80100c8:	2000      	movs	r0, #0
 80100ca:	f7fa f972 	bl	800a3b2 <otLinkSetPanId>
 80100ce:	4603      	mov	r3, r0
 80100d0:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80100d2:	79fb      	ldrb	r3, [r7, #7]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d004      	beq.n	80100e2 <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 80100d8:	79fb      	ldrb	r3, [r7, #7]
 80100da:	4619      	mov	r1, r3
 80100dc:	200f      	movs	r0, #15
 80100de:	f7ff ff49 	bl	800ff74 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 80100e2:	2101      	movs	r1, #1
 80100e4:	2000      	movs	r0, #0
 80100e6:	f7fa f904 	bl	800a2f2 <otIp6SetEnabled>
 80100ea:	4603      	mov	r3, r0
 80100ec:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80100ee:	79fb      	ldrb	r3, [r7, #7]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d004      	beq.n	80100fe <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 80100f4:	79fb      	ldrb	r3, [r7, #7]
 80100f6:	4619      	mov	r1, r3
 80100f8:	2010      	movs	r0, #16
 80100fa:	f7ff ff3b 	bl	800ff74 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 80100fe:	2101      	movs	r1, #1
 8010100:	2000      	movs	r0, #0
 8010102:	f7fa fb8d 	bl	800a820 <otThreadSetEnabled>
 8010106:	4603      	mov	r3, r0
 8010108:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 801010a:	79fb      	ldrb	r3, [r7, #7]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d004      	beq.n	801011a <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8010110:	79fb      	ldrb	r3, [r7, #7]
 8010112:	4619      	mov	r1, r3
 8010114:	2011      	movs	r0, #17
 8010116:	f7ff ff2d 	bl	800ff74 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */

  /* USER CODE END DEVICECONFIG */
}
 801011a:	bf00      	nop
 801011c:	3708      	adds	r7, #8
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}
 8010122:	bf00      	nop
 8010124:	08010129 	.word	0x08010129

08010128 <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b082      	sub	sp, #8
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
 8010130:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f003 0304 	and.w	r3, r3, #4
 8010138:	2b00      	cmp	r3, #0
 801013a:	d013      	beq.n	8010164 <APP_THREAD_StateNotif+0x3c>
  {
    switch (otThreadGetDeviceRole(NULL))
 801013c:	2000      	movs	r0, #0
 801013e:	f7fa fb9f 	bl	800a880 <otThreadGetDeviceRole>
 8010142:	4603      	mov	r3, r0
 8010144:	2b04      	cmp	r3, #4
 8010146:	d80f      	bhi.n	8010168 <APP_THREAD_StateNotif+0x40>
 8010148:	a201      	add	r2, pc, #4	; (adr r2, 8010150 <APP_THREAD_StateNotif+0x28>)
 801014a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801014e:	bf00      	nop
 8010150:	08010169 	.word	0x08010169
 8010154:	08010169 	.word	0x08010169
 8010158:	08010169 	.word	0x08010169
 801015c:	08010169 	.word	0x08010169
 8010160:	08010169 	.word	0x08010169
      /* USER CODE BEGIN DEFAULT */

      /* USER CODE END DEFAULT */
      break;
    }
  }
 8010164:	bf00      	nop
 8010166:	e000      	b.n	801016a <APP_THREAD_StateNotif+0x42>
      break;
 8010168:	bf00      	nop
}
 801016a:	bf00      	nop
 801016c:	3708      	adds	r7, #8
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}
 8010172:	bf00      	nop

08010174 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8010174:	b480      	push	{r7}
 8010176:	b083      	sub	sp, #12
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 801017e:	bf00      	nop
 8010180:	370c      	adds	r7, #12
 8010182:	46bd      	mov	sp, r7
 8010184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010188:	4770      	bx	lr
	...

0801018c <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b088      	sub	sp, #32
 8010190:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8010192:	1d3b      	adds	r3, r7, #4
 8010194:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8010196:	6978      	ldr	r0, [r7, #20]
 8010198:	f7f9 f9cc 	bl	8009534 <SHCI_GetWirelessFwInfo>
 801019c:	4603      	mov	r3, r0
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d004      	beq.n	80101ac <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80101a2:	2101      	movs	r1, #1
 80101a4:	201e      	movs	r0, #30
 80101a6:	f7ff fee5 	bl	800ff74 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 80101aa:	e03d      	b.n	8010228 <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 80101ac:	4a20      	ldr	r2, [pc, #128]	; (8010230 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 80101ae:	2101      	movs	r1, #1
 80101b0:	2000      	movs	r0, #0
 80101b2:	f7f2 fd11 	bl	8002bd8 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 80101b6:	4a1f      	ldr	r2, [pc, #124]	; (8010234 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 80101b8:	2101      	movs	r1, #1
 80101ba:	2000      	movs	r0, #0
 80101bc:	f7f2 fd0c 	bl	8002bd8 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	4619      	mov	r1, r3
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	785b      	ldrb	r3, [r3, #1]
 80101ca:	461a      	mov	r2, r3
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	789b      	ldrb	r3, [r3, #2]
 80101d0:	9301      	str	r3, [sp, #4]
 80101d2:	9200      	str	r2, [sp, #0]
 80101d4:	460b      	mov	r3, r1
 80101d6:	4a18      	ldr	r2, [pc, #96]	; (8010238 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 80101d8:	2101      	movs	r1, #1
 80101da:	2000      	movs	r0, #0
 80101dc:	f7f2 fcfc 	bl	8002bd8 <logApplication>
    switch(p_wireless_info->StackType)
 80101e0:	697b      	ldr	r3, [r7, #20]
 80101e2:	7a5b      	ldrb	r3, [r3, #9]
 80101e4:	2b11      	cmp	r3, #17
 80101e6:	d009      	beq.n	80101fc <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 80101e8:	2b50      	cmp	r3, #80	; 0x50
 80101ea:	d00d      	beq.n	8010208 <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 80101ec:	2b10      	cmp	r3, #16
 80101ee:	d111      	bne.n	8010214 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 80101f0:	4a12      	ldr	r2, [pc, #72]	; (801023c <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 80101f2:	2101      	movs	r1, #1
 80101f4:	2000      	movs	r0, #0
 80101f6:	f7f2 fcef 	bl	8002bd8 <logApplication>
      break;
 80101fa:	e010      	b.n	801021e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 80101fc:	4a10      	ldr	r2, [pc, #64]	; (8010240 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 80101fe:	2101      	movs	r1, #1
 8010200:	2000      	movs	r0, #0
 8010202:	f7f2 fce9 	bl	8002bd8 <logApplication>
      break;
 8010206:	e00a      	b.n	801021e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8010208:	4a0e      	ldr	r2, [pc, #56]	; (8010244 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 801020a:	2101      	movs	r1, #1
 801020c:	2000      	movs	r0, #0
 801020e:	f7f2 fce3 	bl	8002bd8 <logApplication>
      break;
 8010212:	e004      	b.n	801021e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8010214:	2101      	movs	r1, #1
 8010216:	201e      	movs	r0, #30
 8010218:	f7ff feac 	bl	800ff74 <APP_THREAD_Error>
      break;
 801021c:	bf00      	nop
    APP_DBG("**********************************************************");
 801021e:	4a04      	ldr	r2, [pc, #16]	; (8010230 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8010220:	2101      	movs	r1, #1
 8010222:	2000      	movs	r0, #0
 8010224:	f7f2 fcd8 	bl	8002bd8 <logApplication>
}
 8010228:	bf00      	nop
 801022a:	3718      	adds	r7, #24
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}
 8010230:	08013884 	.word	0x08013884
 8010234:	080138c0 	.word	0x080138c0
 8010238:	080138dc 	.word	0x080138dc
 801023c:	080138f4 	.word	0x080138f4
 8010240:	0801390c 	.word	0x0801390c
 8010244:	08013924 	.word	0x08013924

08010248 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8010250:	f04f 32ff 	mov.w	r2, #4294967295
 8010254:	2101      	movs	r1, #1
 8010256:	2001      	movs	r0, #1
 8010258:	f7fb fa44 	bl	800b6e4 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 801025c:	f000 f9b8 	bl	80105d0 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8010260:	e7f6      	b.n	8010250 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

08010262 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 8010262:	b580      	push	{r7, lr}
 8010264:	b082      	sub	sp, #8
 8010266:	af00      	add	r7, sp, #0
 8010268:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801026a:	f04f 32ff 	mov.w	r2, #4294967295
 801026e:	2101      	movs	r1, #1
 8010270:	2001      	movs	r0, #1
 8010272:	f7fb fa37 	bl	800b6e4 <osThreadFlagsWait>
    Send_CLI_To_M0();
 8010276:	f000 f90f 	bl	8010498 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801027a:	e7f6      	b.n	801026a <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

0801027c <APP_THREAD_Init_Dyn_1>:
 * @brief Main entry point for the Thread Application
 * @param  none
 * @retval None
 */
void APP_THREAD_Init_Dyn_1( void )
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b082      	sub	sp, #8
 8010280:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8010282:	f7ff ff83 	bl	801018c <APP_THREAD_CheckWirelessFirmwareInfo>

#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8010286:	480d      	ldr	r0, [pc, #52]	; (80102bc <APP_THREAD_Init_Dyn_1+0x40>)
 8010288:	f000 f826 	bl	80102d8 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 801028c:	2101      	movs	r1, #1
 801028e:	2002      	movs	r0, #2
 8010290:	f001 fb38 	bl	8011904 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8010294:	f000 f958 	bl	8010548 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8010298:	f000 f938 	bl	801050c <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 801029c:	f7f9 f91d 	bl	80094da <SHCI_C2_THREAD_Init>
 80102a0:	4603      	mov	r3, r0
 80102a2:	71fb      	strb	r3, [r7, #7]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ThreadInitStatus);

  // TODO: added this call and remove the lines after since (I think) they are unnecessary
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 80102a4:	4a06      	ldr	r2, [pc, #24]	; (80102c0 <APP_THREAD_Init_Dyn_1+0x44>)
 80102a6:	2100      	movs	r1, #0
 80102a8:	4806      	ldr	r0, [pc, #24]	; (80102c4 <APP_THREAD_Init_Dyn_1+0x48>)
 80102aa:	f7fb f913 	bl	800b4d4 <osThreadNew>
 80102ae:	4602      	mov	r2, r0
 80102b0:	4b05      	ldr	r3, [pc, #20]	; (80102c8 <APP_THREAD_Init_Dyn_1+0x4c>)
 80102b2:	601a      	str	r2, [r3, #0]
//  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_MSG_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_THREAD_ProcessMsgM0ToM4);
//  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_COAP_MSG_BUTTON, UTIL_SEQ_RFU, APP_THREAD_SendCoapMsg);
//
//  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_COAP_SEND_MSG, UTIL_SEQ_RFU,APP_THREAD_SendCoapMsg);
//  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_SET_THREAD_MODE, UTIL_SEQ_RFU,APP_THREAD_SetSleepyEndDeviceMode);
}
 80102b4:	bf00      	nop
 80102b6:	3708      	adds	r7, #8
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	20030a5c 	.word	0x20030a5c
 80102c0:	0801413c 	.word	0x0801413c
 80102c4:	08010249 	.word	0x08010249
 80102c8:	20006af0 	.word	0x20006af0

080102cc <APP_THREAD_Init_Dyn_2>:

void APP_THREAD_Init_Dyn_2(void) {
 80102cc:	b580      	push	{r7, lr}
 80102ce:	af00      	add	r7, sp, #0
  /* Initialize and configure the Thread device*/
  APP_THREAD_DeviceConfig();
 80102d0:	f7ff fec6 	bl	8010060 <APP_THREAD_DeviceConfig>
  /**
   * Create timer to handle COAP request sending
   */
//  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &sedCoapTimerID, hw_ts_Repeated, APP_THREAD_CoapTimingElapsed);
  /* Allow the 800_15_4 IP to enter in low power mode */
}
 80102d4:	bf00      	nop
 80102d6:	bd80      	pop	{r7, pc}

080102d8 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 80102d8:	b480      	push	{r7}
 80102da:	b083      	sub	sp, #12
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 80102e0:	4a04      	ldr	r2, [pc, #16]	; (80102f4 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6013      	str	r3, [r2, #0]
}
 80102e6:	bf00      	nop
 80102e8:	370c      	adds	r7, #12
 80102ea:	46bd      	mov	sp, r7
 80102ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f0:	4770      	bx	lr
 80102f2:	bf00      	nop
 80102f4:	20006ae0 	.word	0x20006ae0

080102f8 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 80102f8:	b480      	push	{r7}
 80102fa:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 80102fc:	4b03      	ldr	r3, [pc, #12]	; (801030c <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	330c      	adds	r3, #12
}
 8010302:	4618      	mov	r0, r3
 8010304:	46bd      	mov	sp, r7
 8010306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030a:	4770      	bx	lr
 801030c:	20006ae0 	.word	0x20006ae0

08010310 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8010310:	b480      	push	{r7}
 8010312:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 8010314:	4b03      	ldr	r3, [pc, #12]	; (8010324 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	330b      	adds	r3, #11
}
 801031a:	4618      	mov	r0, r3
 801031c:	46bd      	mov	sp, r7
 801031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010322:	4770      	bx	lr
 8010324:	20006ae0 	.word	0x20006ae0

08010328 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8010328:	b480      	push	{r7}
 801032a:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 801032c:	4b03      	ldr	r3, [pc, #12]	; (801033c <THREAD_Get_NotificationPayloadBuffer+0x14>)
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	330b      	adds	r3, #11
}
 8010332:	4618      	mov	r0, r3
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr
 801033c:	20006ae4 	.word	0x20006ae4

08010340 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b082      	sub	sp, #8
 8010344:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 8010346:	4b0f      	ldr	r3, [pc, #60]	; (8010384 <Ot_Cmd_Transfer+0x44>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	2200      	movs	r2, #0
 801034c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010350:	725a      	strb	r2, [r3, #9]
 8010352:	2200      	movs	r2, #0
 8010354:	f042 0202 	orr.w	r2, r2, #2
 8010358:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 801035a:	4b0a      	ldr	r3, [pc, #40]	; (8010384 <Ot_Cmd_Transfer+0x44>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	330c      	adds	r3, #12
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	3302      	adds	r3, #2
 8010364:	009b      	lsls	r3, r3, #2
 8010366:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8010368:	4b06      	ldr	r3, [pc, #24]	; (8010384 <Ot_Cmd_Transfer+0x44>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	687a      	ldr	r2, [r7, #4]
 801036e:	b2d2      	uxtb	r2, r2
 8010370:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 8010372:	f7f9 fdbb 	bl	8009eec <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 8010376:	f000 f829 	bl	80103cc <Wait_Getting_Ack_From_M0>
}
 801037a:	bf00      	nop
 801037c:	3708      	adds	r7, #8
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}
 8010382:	bf00      	nop
 8010384:	20006ae0 	.word	0x20006ae0

08010388 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8010390:	f000 f82e 	bl	80103f0 <Receive_Ack_From_M0>
}
 8010394:	bf00      	nop
 8010396:	3708      	adds	r7, #8
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}

0801039c <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b082      	sub	sp, #8
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 80103a4:	4a04      	ldr	r2, [pc, #16]	; (80103b8 <TL_THREAD_NotReceived+0x1c>)
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 80103aa:	f000 f82d 	bl	8010408 <Receive_Notification_From_M0>
}
 80103ae:	bf00      	nop
 80103b0:	3708      	adds	r7, #8
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
 80103b6:	bf00      	nop
 80103b8:	20006ae4 	.word	0x20006ae4

080103bc <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 80103bc:	b480      	push	{r7}
 80103be:	af00      	add	r7, sp, #0

}
 80103c0:	bf00      	nop
 80103c2:	46bd      	mov	sp, r7
 80103c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c8:	4770      	bx	lr
	...

080103cc <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 80103cc:	b480      	push	{r7}
 80103ce:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 80103d0:	bf00      	nop
 80103d2:	4b06      	ldr	r3, [pc, #24]	; (80103ec <Wait_Getting_Ack_From_M0+0x20>)
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d0fb      	beq.n	80103d2 <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 80103da:	4b04      	ldr	r3, [pc, #16]	; (80103ec <Wait_Getting_Ack_From_M0+0x20>)
 80103dc:	2200      	movs	r2, #0
 80103de:	601a      	str	r2, [r3, #0]
}
 80103e0:	bf00      	nop
 80103e2:	46bd      	mov	sp, r7
 80103e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e8:	4770      	bx	lr
 80103ea:	bf00      	nop
 80103ec:	20006aec 	.word	0x20006aec

080103f0 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 80103f0:	b480      	push	{r7}
 80103f2:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 80103f4:	4b03      	ldr	r3, [pc, #12]	; (8010404 <Receive_Ack_From_M0+0x14>)
 80103f6:	2201      	movs	r2, #1
 80103f8:	601a      	str	r2, [r3, #0]
}
 80103fa:	bf00      	nop
 80103fc:	46bd      	mov	sp, r7
 80103fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010402:	4770      	bx	lr
 8010404:	20006aec 	.word	0x20006aec

08010408 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 801040c:	4b06      	ldr	r3, [pc, #24]	; (8010428 <Receive_Notification_From_M0+0x20>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	3301      	adds	r3, #1
 8010412:	4a05      	ldr	r2, [pc, #20]	; (8010428 <Receive_Notification_From_M0+0x20>)
 8010414:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 8010416:	4b05      	ldr	r3, [pc, #20]	; (801042c <Receive_Notification_From_M0+0x24>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	2101      	movs	r1, #1
 801041c:	4618      	mov	r0, r3
 801041e:	f7fb f8ff 	bl	800b620 <osThreadFlagsSet>
}
 8010422:	bf00      	nop
 8010424:	bd80      	pop	{r7, pc}
 8010426:	bf00      	nop
 8010428:	20006ae8 	.word	0x20006ae8
 801042c:	20006af0 	.word	0x20006af0

08010430 <RxCpltCallback>:

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
static void RxCpltCallback(void)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8010434:	4b12      	ldr	r3, [pc, #72]	; (8010480 <RxCpltCallback+0x50>)
 8010436:	881b      	ldrh	r3, [r3, #0]
 8010438:	b29b      	uxth	r3, r3
 801043a:	2bff      	cmp	r3, #255	; 0xff
 801043c:	d818      	bhi.n	8010470 <RxCpltCallback+0x40>
  {
    CommandString[indexReceiveChar++] = aRxBuffer[0];
 801043e:	4b10      	ldr	r3, [pc, #64]	; (8010480 <RxCpltCallback+0x50>)
 8010440:	881b      	ldrh	r3, [r3, #0]
 8010442:	b29b      	uxth	r3, r3
 8010444:	1c5a      	adds	r2, r3, #1
 8010446:	b291      	uxth	r1, r2
 8010448:	4a0d      	ldr	r2, [pc, #52]	; (8010480 <RxCpltCallback+0x50>)
 801044a:	8011      	strh	r1, [r2, #0]
 801044c:	461a      	mov	r2, r3
 801044e:	4b0d      	ldr	r3, [pc, #52]	; (8010484 <RxCpltCallback+0x54>)
 8010450:	7819      	ldrb	r1, [r3, #0]
 8010452:	4b0d      	ldr	r3, [pc, #52]	; (8010488 <RxCpltCallback+0x58>)
 8010454:	5499      	strb	r1, [r3, r2]
    if (aRxBuffer[0] == '\r')
 8010456:	4b0b      	ldr	r3, [pc, #44]	; (8010484 <RxCpltCallback+0x54>)
 8010458:	781b      	ldrb	r3, [r3, #0]
 801045a:	2b0d      	cmp	r3, #13
 801045c:	d108      	bne.n	8010470 <RxCpltCallback+0x40>
    {
      CptReceiveCmdFromUser = 1U;
 801045e:	4b0b      	ldr	r3, [pc, #44]	; (801048c <RxCpltCallback+0x5c>)
 8010460:	2201      	movs	r2, #1
 8010462:	801a      	strh	r2, [r3, #0]

      /* UART task scheduling*/
      osThreadFlagsSet(OsTaskCliId,1);
 8010464:	4b0a      	ldr	r3, [pc, #40]	; (8010490 <RxCpltCallback+0x60>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	2101      	movs	r1, #1
 801046a:	4618      	mov	r0, r3
 801046c:	f7fb f8d8 	bl	800b620 <osThreadFlagsSet>
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1U, RxCpltCallback);
 8010470:	4b08      	ldr	r3, [pc, #32]	; (8010494 <RxCpltCallback+0x64>)
 8010472:	2201      	movs	r2, #1
 8010474:	4903      	ldr	r1, [pc, #12]	; (8010484 <RxCpltCallback+0x54>)
 8010476:	2000      	movs	r0, #0
 8010478:	f7f1 fd90 	bl	8001f9c <HW_UART_Receive_IT>
}
 801047c:	bf00      	nop
 801047e:	bd80      	pop	{r7, pc}
 8010480:	20006adc 	.word	0x20006adc
 8010484:	200068dc 	.word	0x200068dc
 8010488:	200069dc 	.word	0x200069dc
 801048c:	20006ade 	.word	0x20006ade
 8010490:	20006af4 	.word	0x20006af4
 8010494:	08010431 	.word	0x08010431

08010498 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 801049c:	22ff      	movs	r2, #255	; 0xff
 801049e:	2100      	movs	r1, #0
 80104a0:	4812      	ldr	r0, [pc, #72]	; (80104ec <Send_CLI_To_M0+0x54>)
 80104a2:	f001 fbc2 	bl	8011c2a <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 80104a6:	4b12      	ldr	r3, [pc, #72]	; (80104f0 <Send_CLI_To_M0+0x58>)
 80104a8:	881b      	ldrh	r3, [r3, #0]
 80104aa:	b29b      	uxth	r3, r3
 80104ac:	461a      	mov	r2, r3
 80104ae:	4911      	ldr	r1, [pc, #68]	; (80104f4 <Send_CLI_To_M0+0x5c>)
 80104b0:	480e      	ldr	r0, [pc, #56]	; (80104ec <Send_CLI_To_M0+0x54>)
 80104b2:	f001 fbaf 	bl	8011c14 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 80104b6:	4b0e      	ldr	r3, [pc, #56]	; (80104f0 <Send_CLI_To_M0+0x58>)
 80104b8:	881b      	ldrh	r3, [r3, #0]
 80104ba:	b29b      	uxth	r3, r3
 80104bc:	b2da      	uxtb	r2, r3
 80104be:	4b0e      	ldr	r3, [pc, #56]	; (80104f8 <Send_CLI_To_M0+0x60>)
 80104c0:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 80104c2:	4b0d      	ldr	r3, [pc, #52]	; (80104f8 <Send_CLI_To_M0+0x60>)
 80104c4:	2200      	movs	r2, #0
 80104c6:	725a      	strb	r2, [r3, #9]
 80104c8:	2200      	movs	r2, #0
 80104ca:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 80104cc:	4b0b      	ldr	r3, [pc, #44]	; (80104fc <Send_CLI_To_M0+0x64>)
 80104ce:	2200      	movs	r2, #0
 80104d0:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 80104d2:	4b07      	ldr	r3, [pc, #28]	; (80104f0 <Send_CLI_To_M0+0x58>)
 80104d4:	2200      	movs	r2, #0
 80104d6:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 80104d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80104dc:	2100      	movs	r1, #0
 80104de:	4805      	ldr	r0, [pc, #20]	; (80104f4 <Send_CLI_To_M0+0x5c>)
 80104e0:	f001 fba3 	bl	8011c2a <memset>

  TL_CLI_SendCmd();
 80104e4:	f7f9 fd10 	bl	8009f08 <TL_CLI_SendCmd>
}
 80104e8:	bf00      	nop
 80104ea:	bd80      	pop	{r7, pc}
 80104ec:	20030c80 	.word	0x20030c80
 80104f0:	20006adc 	.word	0x20006adc
 80104f4:	200069dc 	.word	0x200069dc
 80104f8:	20030c74 	.word	0x20030c74
 80104fc:	20006ade 	.word	0x20006ade

08010500 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8010504:	f7f9 fd1c 	bl	8009f40 <TL_THREAD_CliSendAck>
}
 8010508:	bf00      	nop
 801050a:	bd80      	pop	{r7, pc}

0801050c <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 8010510:	4a08      	ldr	r2, [pc, #32]	; (8010534 <APP_THREAD_Init_UART_CLI+0x28>)
 8010512:	2100      	movs	r1, #0
 8010514:	4808      	ldr	r0, [pc, #32]	; (8010538 <APP_THREAD_Init_UART_CLI+0x2c>)
 8010516:	f7fa ffdd 	bl	800b4d4 <osThreadNew>
 801051a:	4602      	mov	r2, r0
 801051c:	4b07      	ldr	r3, [pc, #28]	; (801053c <APP_THREAD_Init_UART_CLI+0x30>)
 801051e:	601a      	str	r2, [r3, #0]
#endif /* (CFG_FULL_LOW_POWER == 0) */

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
  MX_USART1_UART_Init();
 8010520:	f7f2 fd58 	bl	8002fd4 <MX_USART1_UART_Init>
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
 8010524:	4b06      	ldr	r3, [pc, #24]	; (8010540 <APP_THREAD_Init_UART_CLI+0x34>)
 8010526:	2201      	movs	r2, #1
 8010528:	4906      	ldr	r1, [pc, #24]	; (8010544 <APP_THREAD_Init_UART_CLI+0x38>)
 801052a:	2000      	movs	r0, #0
 801052c:	f7f1 fd36 	bl	8001f9c <HW_UART_Receive_IT>
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8010530:	bf00      	nop
 8010532:	bd80      	pop	{r7, pc}
 8010534:	08014160 	.word	0x08014160
 8010538:	08010263 	.word	0x08010263
 801053c:	20006af4 	.word	0x20006af4
 8010540:	08010431 	.word	0x08010431
 8010544:	200068dc 	.word	0x200068dc

08010548 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 801054c:	4b06      	ldr	r3, [pc, #24]	; (8010568 <APP_THREAD_TL_THREAD_INIT+0x20>)
 801054e:	4a07      	ldr	r2, [pc, #28]	; (801056c <APP_THREAD_TL_THREAD_INIT+0x24>)
 8010550:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 8010552:	4b05      	ldr	r3, [pc, #20]	; (8010568 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8010554:	4a06      	ldr	r2, [pc, #24]	; (8010570 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8010556:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8010558:	4b03      	ldr	r3, [pc, #12]	; (8010568 <APP_THREAD_TL_THREAD_INIT+0x20>)
 801055a:	4a06      	ldr	r2, [pc, #24]	; (8010574 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 801055c:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 801055e:	4802      	ldr	r0, [pc, #8]	; (8010568 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8010560:	f7f9 fca8 	bl	8009eb4 <TL_THREAD_Init>
}
 8010564:	bf00      	nop
 8010566:	bd80      	pop	{r7, pc}
 8010568:	200301e0 	.word	0x200301e0
 801056c:	20030a5c 	.word	0x20030a5c
 8010570:	20030b68 	.word	0x20030b68
 8010574:	20030c74 	.word	0x20030c74

08010578 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b084      	sub	sp, #16
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	7adb      	ldrb	r3, [r3, #11]
 8010588:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	330c      	adds	r3, #12
 801058e:	490b      	ldr	r1, [pc, #44]	; (80105bc <TL_THREAD_CliNotReceived+0x44>)
 8010590:	4618      	mov	r0, r3
 8010592:	f7ef fdf5 	bl	8000180 <strcmp>
 8010596:	4603      	mov	r3, r0
 8010598:	2b00      	cmp	r3, #0
 801059a:	d009      	beq.n	80105b0 <TL_THREAD_CliNotReceived+0x38>
  {
    /* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	f103 010c 	add.w	r1, r3, #12
 80105a2:	7afb      	ldrb	r3, [r7, #11]
 80105a4:	b29a      	uxth	r2, r3
 80105a6:	4b06      	ldr	r3, [pc, #24]	; (80105c0 <TL_THREAD_CliNotReceived+0x48>)
 80105a8:	2000      	movs	r0, #0
 80105aa:	f7f1 fd31 	bl	8002010 <HW_UART_Transmit_IT>
  }
  else
  {
    Send_CLI_Ack_For_OT();
  }
}
 80105ae:	e001      	b.n	80105b4 <TL_THREAD_CliNotReceived+0x3c>
    Send_CLI_Ack_For_OT();
 80105b0:	f7ff ffa6 	bl	8010500 <Send_CLI_Ack_For_OT>
}
 80105b4:	bf00      	nop
 80105b6:	3710      	adds	r7, #16
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}
 80105bc:	08013950 	.word	0x08013950
 80105c0:	080105c5 	.word	0x080105c5

080105c4 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	af00      	add	r7, sp, #0
  Send_CLI_Ack_For_OT();
 80105c8:	f7ff ff9a 	bl	8010500 <Send_CLI_Ack_For_OT>
}
 80105cc:	bf00      	nop
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 80105d4:	4b09      	ldr	r3, [pc, #36]	; (80105fc <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d00d      	beq.n	80105f8 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 80105dc:	4b07      	ldr	r3, [pc, #28]	; (80105fc <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	2b01      	cmp	r3, #1
 80105e2:	d904      	bls.n	80105ee <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 80105e4:	2100      	movs	r1, #0
 80105e6:	200c      	movs	r0, #12
 80105e8:	f7ff fcc4 	bl	800ff74 <APP_THREAD_Error>
 80105ec:	e001      	b.n	80105f2 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 80105ee:	f7f9 ff11 	bl	800a414 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 80105f2:	4b02      	ldr	r3, [pc, #8]	; (80105fc <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80105f4:	2200      	movs	r2, #0
 80105f6:	601a      	str	r2, [r3, #0]
  }
}
 80105f8:	bf00      	nop
 80105fa:	bd80      	pop	{r7, pc}
 80105fc:	20006ae8 	.word	0x20006ae8

08010600 <DTC_App_Init>:
 *
 * PUBLIC FUNCTIONS
 *
 *************************************************************/
void DTC_App_Init( void )
{
 8010600:	b580      	push	{r7, lr}
 8010602:	af00      	add	r7, sp, #0
  SVCCTL_RegisterCltHandler(DTC_Event_Handler);
 8010604:	4808      	ldr	r0, [pc, #32]	; (8010628 <DTC_App_Init+0x28>)
 8010606:	f7f8 fe97 	bl	8009338 <SVCCTL_RegisterCltHandler>

//  UTIL_SEQ_RegTask( 1<< CFG_TASK_APP_DATA_THROUGHPUT_ID, UTIL_SEQ_RFU, DataThroughput_Calculation);

  DataTransferClientContext.connHandle = 0xFFFF;
 801060a:	4b08      	ldr	r3, [pc, #32]	; (801062c <DTC_App_Init+0x2c>)
 801060c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010610:	801a      	strh	r2, [r3, #0]
  /* Create timer for Data Throughput */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(TimerDataThroughput_Id), hw_ts_SingleShot, DataThroughputTimer);
 8010612:	4b07      	ldr	r3, [pc, #28]	; (8010630 <DTC_App_Init+0x30>)
 8010614:	2200      	movs	r2, #0
 8010616:	4907      	ldr	r1, [pc, #28]	; (8010634 <DTC_App_Init+0x34>)
 8010618:	2000      	movs	r0, #0
 801061a:	f7f1 fb2b 	bl	8001c74 <HW_TS_Create>

  APP_DBG_MSG("-- DT CLIENT INITIALIZED \n");
 801061e:	4806      	ldr	r0, [pc, #24]	; (8010638 <DTC_App_Init+0x38>)
 8010620:	f001 fb80 	bl	8011d24 <puts>

  return;
 8010624:	bf00      	nop
}
 8010626:	bd80      	pop	{r7, pc}
 8010628:	08010661 	.word	0x08010661
 801062c:	20006fcc 	.word	0x20006fcc
 8010630:	08010a55 	.word	0x08010a55
 8010634:	20006b18 	.word	0x20006b18
 8010638:	08013954 	.word	0x08013954

0801063c <DTC_App_LinkReadyNotification>:

void DTC_App_LinkReadyNotification(uint16_t ConnectionHandle)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	4603      	mov	r3, r0
 8010644:	80fb      	strh	r3, [r7, #6]
#if(CFG_SERVER_ONLY != 1)
  tBleStatus status;
  uint16_t enable_notification = 0x0001;
#endif  

  DataTransferClientContext.connHandle = ConnectionHandle;
 8010646:	4a05      	ldr	r2, [pc, #20]	; (801065c <DTC_App_LinkReadyNotification+0x20>)
 8010648:	88fb      	ldrh	r3, [r7, #6]
 801064a:	8013      	strh	r3, [r2, #0]

#if(CFG_BLE_CENTRAL != 1)
  GattProcReq(GATT_PROC_MTU_UPDATE);
 801064c:	2000      	movs	r0, #0
 801064e:	f000 fa1f 	bl	8010a90 <GattProcReq>
#endif
  
#if(CFG_BLE_CENTRAL != 0)
    UTIL_SEQ_SetTask(1<<CFG_TASK_CONN_UPDATE_ID, CFG_SCH_PRIO_0); 
#endif
  return;
 8010652:	bf00      	nop
}
 8010654:	3708      	adds	r7, #8
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}
 801065a:	bf00      	nop
 801065c:	20006fcc 	.word	0x20006fcc

08010660 <DTC_Event_Handler>:
 *
 * CALLBACK FUNCTIONS
 *
 *************************************************************/
static SVCCTL_EvtAckStatus_t DTC_Event_Handler( void *Event )
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b090      	sub	sp, #64	; 0x40
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
  hci_event_pckt * event_pckt;
  evt_blue_aci * blue_evt;
  uint8_t CRC_Result;
  uint8_t CRC_Received;

  return_value = SVCCTL_EvtNotAck;
 8010668:	2300      	movs	r3, #0
 801066a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  event_pckt = (hci_event_pckt *) (((hci_uart_pckt*) Event)->data);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	3301      	adds	r3, #1
 8010672:	637b      	str	r3, [r7, #52]	; 0x34

  switch (event_pckt->evt)
 8010674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010676:	781b      	ldrb	r3, [r3, #0]
 8010678:	2bff      	cmp	r3, #255	; 0xff
 801067a:	d000      	beq.n	801067e <DTC_Event_Handler+0x1e>

        default:
          break;
        }
        default:
          break;
 801067c:	e1d3      	b.n	8010a26 <DTC_Event_Handler+0x3c6>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 801067e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010680:	3302      	adds	r3, #2
 8010682:	633b      	str	r3, [r7, #48]	; 0x30
      switch (blue_evt->ecode)
 8010684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010686:	881b      	ldrh	r3, [r3, #0]
 8010688:	b29b      	uxth	r3, r3
 801068a:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 801068e:	2b0c      	cmp	r3, #12
 8010690:	f200 81c0 	bhi.w	8010a14 <DTC_Event_Handler+0x3b4>
 8010694:	a201      	add	r2, pc, #4	; (adr r2, 801069c <DTC_Event_Handler+0x3c>)
 8010696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801069a:	bf00      	nop
 801069c:	0801086b 	.word	0x0801086b
 80106a0:	08010a15 	.word	0x08010a15
 80106a4:	080107c5 	.word	0x080107c5
 80106a8:	08010a15 	.word	0x08010a15
 80106ac:	08010a15 	.word	0x08010a15
 80106b0:	08010a15 	.word	0x08010a15
 80106b4:	080106d1 	.word	0x080106d1
 80106b8:	08010a15 	.word	0x08010a15
 80106bc:	08010a15 	.word	0x08010a15
 80106c0:	08010a15 	.word	0x08010a15
 80106c4:	08010a15 	.word	0x08010a15
 80106c8:	08010929 	.word	0x08010929
 80106cc:	08010a07 	.word	0x08010a07
          aci_att_read_by_group_type_resp_event_rp0 *pr = (void*) blue_evt->data;
 80106d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106d2:	3302      	adds	r3, #2
 80106d4:	627b      	str	r3, [r7, #36]	; 0x24
          handle = pr->Connection_Handle;
 80106d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d8:	781a      	ldrb	r2, [r3, #0]
 80106da:	785b      	ldrb	r3, [r3, #1]
 80106dc:	021b      	lsls	r3, r3, #8
 80106de:	4313      	orrs	r3, r2
 80106e0:	847b      	strh	r3, [r7, #34]	; 0x22
          APP_DBG_MSG("DTC_Event_Handler: EVT_BLUE_ATT_READ_BY_GROUP_TYPE_RESP\n");
 80106e2:	488c      	ldr	r0, [pc, #560]	; (8010914 <DTC_Event_Handler+0x2b4>)
 80106e4:	f001 fb1e 	bl	8011d24 <puts>
          DataTransferClientContext.connHandle = handle;
 80106e8:	4a8b      	ldr	r2, [pc, #556]	; (8010918 <DTC_Event_Handler+0x2b8>)
 80106ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80106ec:	8013      	strh	r3, [r2, #0]
          numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 80106ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106f0:	78da      	ldrb	r2, [r3, #3]
 80106f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106f4:	789b      	ldrb	r3, [r3, #2]
 80106f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80106fa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
          if (pr->Attribute_Data_Length == 20)
 80106fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010700:	789b      	ldrb	r3, [r3, #2]
 8010702:	2b14      	cmp	r3, #20
 8010704:	f040 8188 	bne.w	8010a18 <DTC_Event_Handler+0x3b8>
            idx = 16;
 8010708:	2310      	movs	r3, #16
 801070a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
              for (i = 0; i < numServ; i++)
 801070e:	2300      	movs	r3, #0
 8010710:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010714:	e04f      	b.n	80107b6 <DTC_Event_Handler+0x156>
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 8010716:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801071a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801071c:	4413      	add	r3, r2
 801071e:	791b      	ldrb	r3, [r3, #4]
 8010720:	b29a      	uxth	r2, r3
 8010722:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010726:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010728:	440b      	add	r3, r1
 801072a:	3304      	adds	r3, #4
 801072c:	3301      	adds	r3, #1
 801072e:	781b      	ldrb	r3, [r3, #0]
 8010730:	b29b      	uxth	r3, r3
 8010732:	021b      	lsls	r3, r3, #8
 8010734:	b29b      	uxth	r3, r3
 8010736:	4313      	orrs	r3, r2
 8010738:	83fb      	strh	r3, [r7, #30]
                if (uuid == DATA_TRANSFER_SERVICE_UUID)
 801073a:	8bfb      	ldrh	r3, [r7, #30]
 801073c:	f64f 6280 	movw	r2, #65152	; 0xfe80
 8010740:	4293      	cmp	r3, r2
 8010742:	d12e      	bne.n	80107a2 <DTC_Event_Handler+0x142>
                  DataTransferClientContext.DataTransferServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 8010744:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010748:	3b10      	subs	r3, #16
 801074a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801074c:	4413      	add	r3, r2
 801074e:	791b      	ldrb	r3, [r3, #4]
 8010750:	b29a      	uxth	r2, r3
 8010752:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010756:	3b10      	subs	r3, #16
 8010758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801075a:	440b      	add	r3, r1
 801075c:	3304      	adds	r3, #4
 801075e:	3301      	adds	r3, #1
 8010760:	781b      	ldrb	r3, [r3, #0]
 8010762:	b29b      	uxth	r3, r3
 8010764:	021b      	lsls	r3, r3, #8
 8010766:	b29b      	uxth	r3, r3
 8010768:	4313      	orrs	r3, r2
 801076a:	b29a      	uxth	r2, r3
 801076c:	4b6a      	ldr	r3, [pc, #424]	; (8010918 <DTC_Event_Handler+0x2b8>)
 801076e:	805a      	strh	r2, [r3, #2]
                  DataTransferClientContext.DataTransferServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 8010770:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010774:	3b0e      	subs	r3, #14
 8010776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010778:	4413      	add	r3, r2
 801077a:	791b      	ldrb	r3, [r3, #4]
 801077c:	b29a      	uxth	r2, r3
 801077e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010782:	3b0e      	subs	r3, #14
 8010784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010786:	440b      	add	r3, r1
 8010788:	3304      	adds	r3, #4
 801078a:	3301      	adds	r3, #1
 801078c:	781b      	ldrb	r3, [r3, #0]
 801078e:	b29b      	uxth	r3, r3
 8010790:	021b      	lsls	r3, r3, #8
 8010792:	b29b      	uxth	r3, r3
 8010794:	4313      	orrs	r3, r2
 8010796:	b29a      	uxth	r2, r3
 8010798:	4b5f      	ldr	r3, [pc, #380]	; (8010918 <DTC_Event_Handler+0x2b8>)
 801079a:	809a      	strh	r2, [r3, #4]
                  APP_DBG_MSG("DTC_Event_Handler: DATA_TRANSFER_SERVICE_UUID found !\n");
 801079c:	485f      	ldr	r0, [pc, #380]	; (801091c <DTC_Event_Handler+0x2bc>)
 801079e:	f001 fac1 	bl	8011d24 <puts>
                idx += 6;
 80107a2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80107a6:	3306      	adds	r3, #6
 80107a8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
              for (i = 0; i < numServ; i++)
 80107ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80107b0:	3301      	adds	r3, #1
 80107b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80107b6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80107ba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80107be:	429a      	cmp	r2, r3
 80107c0:	d3a9      	bcc.n	8010716 <DTC_Event_Handler+0xb6>
          break;
 80107c2:	e129      	b.n	8010a18 <DTC_Event_Handler+0x3b8>
          aci_att_read_by_type_resp_event_rp0 *pr = (void*) blue_evt->data;
 80107c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c6:	3302      	adds	r3, #2
 80107c8:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG("DTC_Event_Handler: EVT_BLUE_ATT_READ_BY_TYPE_RESP\n");
 80107ca:	4855      	ldr	r0, [pc, #340]	; (8010920 <DTC_Event_Handler+0x2c0>)
 80107cc:	f001 faaa 	bl	8011d24 <puts>
          idx = 17;
 80107d0:	2311      	movs	r3, #17
 80107d2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
          if (pr->Handle_Value_Pair_Length == 21)
 80107d6:	69bb      	ldr	r3, [r7, #24]
 80107d8:	789b      	ldrb	r3, [r3, #2]
 80107da:	2b15      	cmp	r3, #21
 80107dc:	f040 811e 	bne.w	8010a1c <DTC_Event_Handler+0x3bc>
            pr->Data_Length -= 1;
 80107e0:	69bb      	ldr	r3, [r7, #24]
 80107e2:	78db      	ldrb	r3, [r3, #3]
 80107e4:	3b01      	subs	r3, #1
 80107e6:	b2da      	uxtb	r2, r3
 80107e8:	69bb      	ldr	r3, [r7, #24]
 80107ea:	70da      	strb	r2, [r3, #3]
            while(pr->Data_Length > 0)
 80107ec:	e038      	b.n	8010860 <DTC_Event_Handler+0x200>
              uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 80107ee:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80107f2:	69ba      	ldr	r2, [r7, #24]
 80107f4:	4413      	add	r3, r2
 80107f6:	791b      	ldrb	r3, [r3, #4]
 80107f8:	b29a      	uxth	r2, r3
 80107fa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80107fe:	69b9      	ldr	r1, [r7, #24]
 8010800:	440b      	add	r3, r1
 8010802:	3304      	adds	r3, #4
 8010804:	3301      	adds	r3, #1
 8010806:	781b      	ldrb	r3, [r3, #0]
 8010808:	b29b      	uxth	r3, r3
 801080a:	021b      	lsls	r3, r3, #8
 801080c:	b29b      	uxth	r3, r3
 801080e:	4313      	orrs	r3, r2
 8010810:	82fb      	strh	r3, [r7, #22]
              handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 8010812:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010816:	3b0e      	subs	r3, #14
 8010818:	69ba      	ldr	r2, [r7, #24]
 801081a:	4413      	add	r3, r2
 801081c:	791b      	ldrb	r3, [r3, #4]
 801081e:	b29a      	uxth	r2, r3
 8010820:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010824:	3b0e      	subs	r3, #14
 8010826:	69b9      	ldr	r1, [r7, #24]
 8010828:	440b      	add	r3, r1
 801082a:	3304      	adds	r3, #4
 801082c:	3301      	adds	r3, #1
 801082e:	781b      	ldrb	r3, [r3, #0]
 8010830:	b29b      	uxth	r3, r3
 8010832:	021b      	lsls	r3, r3, #8
 8010834:	b29b      	uxth	r3, r3
 8010836:	4313      	orrs	r3, r2
 8010838:	82bb      	strh	r3, [r7, #20]
              if (uuid == DATA_TRANSFER_TX_CHAR_UUID)
 801083a:	8afb      	ldrh	r3, [r7, #22]
 801083c:	f64f 6281 	movw	r2, #65153	; 0xfe81
 8010840:	4293      	cmp	r3, r2
 8010842:	d102      	bne.n	801084a <DTC_Event_Handler+0x1ea>
                DataTransferClientContext.DataTransferTxCharHdle = handle;
 8010844:	4a34      	ldr	r2, [pc, #208]	; (8010918 <DTC_Event_Handler+0x2b8>)
 8010846:	8abb      	ldrh	r3, [r7, #20]
 8010848:	80d3      	strh	r3, [r2, #6]
              pr->Data_Length -= 21;
 801084a:	69bb      	ldr	r3, [r7, #24]
 801084c:	78db      	ldrb	r3, [r3, #3]
 801084e:	3b15      	subs	r3, #21
 8010850:	b2da      	uxtb	r2, r3
 8010852:	69bb      	ldr	r3, [r7, #24]
 8010854:	70da      	strb	r2, [r3, #3]
              idx += 21;
 8010856:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801085a:	3315      	adds	r3, #21
 801085c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
            while(pr->Data_Length > 0)
 8010860:	69bb      	ldr	r3, [r7, #24]
 8010862:	78db      	ldrb	r3, [r3, #3]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d1c2      	bne.n	80107ee <DTC_Event_Handler+0x18e>
        break;
 8010868:	e0d8      	b.n	8010a1c <DTC_Event_Handler+0x3bc>
          aci_att_find_info_resp_event_rp0 *pr = (void*) blue_evt->data;
 801086a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801086c:	3302      	adds	r3, #2
 801086e:	613b      	str	r3, [r7, #16]
          numDesc = (pr->Event_Data_Length) / 4;
 8010870:	693b      	ldr	r3, [r7, #16]
 8010872:	78db      	ldrb	r3, [r3, #3]
 8010874:	089b      	lsrs	r3, r3, #2
 8010876:	73fb      	strb	r3, [r7, #15]
          idx = 0;
 8010878:	2300      	movs	r3, #0
 801087a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
          if (pr->Format == UUID_TYPE_16)
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	789b      	ldrb	r3, [r3, #2]
 8010882:	2b01      	cmp	r3, #1
 8010884:	f040 80cc 	bne.w	8010a20 <DTC_Event_Handler+0x3c0>
            for (i = 0; i < numDesc; i++)
 8010888:	2300      	movs	r3, #0
 801088a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801088e:	e03a      	b.n	8010906 <DTC_Event_Handler+0x2a6>
              handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 8010890:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010894:	693a      	ldr	r2, [r7, #16]
 8010896:	4413      	add	r3, r2
 8010898:	791b      	ldrb	r3, [r3, #4]
 801089a:	b29a      	uxth	r2, r3
 801089c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80108a0:	6939      	ldr	r1, [r7, #16]
 80108a2:	440b      	add	r3, r1
 80108a4:	3304      	adds	r3, #4
 80108a6:	3301      	adds	r3, #1
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	b29b      	uxth	r3, r3
 80108ac:	021b      	lsls	r3, r3, #8
 80108ae:	b29b      	uxth	r3, r3
 80108b0:	4313      	orrs	r3, r2
 80108b2:	81bb      	strh	r3, [r7, #12]
              uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx + 2]);
 80108b4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80108b8:	3302      	adds	r3, #2
 80108ba:	693a      	ldr	r2, [r7, #16]
 80108bc:	4413      	add	r3, r2
 80108be:	791b      	ldrb	r3, [r3, #4]
 80108c0:	b29a      	uxth	r2, r3
 80108c2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80108c6:	3302      	adds	r3, #2
 80108c8:	6939      	ldr	r1, [r7, #16]
 80108ca:	440b      	add	r3, r1
 80108cc:	3304      	adds	r3, #4
 80108ce:	3301      	adds	r3, #1
 80108d0:	781b      	ldrb	r3, [r3, #0]
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	021b      	lsls	r3, r3, #8
 80108d6:	b29b      	uxth	r3, r3
 80108d8:	4313      	orrs	r3, r2
 80108da:	817b      	strh	r3, [r7, #10]
              if (uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 80108dc:	897b      	ldrh	r3, [r7, #10]
 80108de:	f642 1202 	movw	r2, #10498	; 0x2902
 80108e2:	4293      	cmp	r3, r2
 80108e4:	d105      	bne.n	80108f2 <DTC_Event_Handler+0x292>
                APP_DBG_MSG("DTC_Event_Handler: DTC_DISCOVER_TX_CHAR_DESC ready to enable notification\n");
 80108e6:	480f      	ldr	r0, [pc, #60]	; (8010924 <DTC_Event_Handler+0x2c4>)
 80108e8:	f001 fa1c 	bl	8011d24 <puts>
                DataTransferClientContext.DataTransferTxDescHandle = handle;
 80108ec:	4a0a      	ldr	r2, [pc, #40]	; (8010918 <DTC_Event_Handler+0x2b8>)
 80108ee:	89bb      	ldrh	r3, [r7, #12]
 80108f0:	8113      	strh	r3, [r2, #8]
              idx += 4;
 80108f2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80108f6:	3304      	adds	r3, #4
 80108f8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
            for (i = 0; i < numDesc; i++)
 80108fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010900:	3301      	adds	r3, #1
 8010902:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8010906:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801090a:	7bfb      	ldrb	r3, [r7, #15]
 801090c:	429a      	cmp	r2, r3
 801090e:	d3bf      	bcc.n	8010890 <DTC_Event_Handler+0x230>
        break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 8010910:	e086      	b.n	8010a20 <DTC_Event_Handler+0x3c0>
 8010912:	bf00      	nop
 8010914:	08013970 	.word	0x08013970
 8010918:	20006fcc 	.word	0x20006fcc
 801091c:	080139a8 	.word	0x080139a8
 8010920:	080139e0 	.word	0x080139e0
 8010924:	08013a14 	.word	0x08013a14
          aci_gatt_notification_event_rp0 *pr = (void*) blue_evt->data;
 8010928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801092a:	3302      	adds	r3, #2
 801092c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if ((pr->Attribute_Handle == DataTransferClientContext.DataTransferTxCharHdle)
 801092e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010930:	885b      	ldrh	r3, [r3, #2]
 8010932:	b29a      	uxth	r2, r3
 8010934:	4b3f      	ldr	r3, [pc, #252]	; (8010a34 <DTC_Event_Handler+0x3d4>)
 8010936:	88db      	ldrh	r3, [r3, #6]
 8010938:	429a      	cmp	r2, r3
 801093a:	d173      	bne.n	8010a24 <DTC_Event_Handler+0x3c4>
              && (pr->Attribute_Value_Length > (2)))
 801093c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801093e:	791b      	ldrb	r3, [r3, #4]
 8010940:	2b02      	cmp	r3, #2
 8010942:	d96f      	bls.n	8010a24 <DTC_Event_Handler+0x3c4>
            NotificationData.DataTransfered.Length = pr->Attribute_Value_Length;
 8010944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010946:	791b      	ldrb	r3, [r3, #4]
 8010948:	461a      	mov	r2, r3
 801094a:	4b3b      	ldr	r3, [pc, #236]	; (8010a38 <DTC_Event_Handler+0x3d8>)
 801094c:	611a      	str	r2, [r3, #16]
            NotificationData.DataTransfered.pPayload = (pr->Attribute_Value);
 801094e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010950:	3305      	adds	r3, #5
 8010952:	4a39      	ldr	r2, [pc, #228]	; (8010a38 <DTC_Event_Handler+0x3d8>)
 8010954:	6053      	str	r3, [r2, #4]
            NotificationData.DataTransfered.pPayload_n = *((uint32_t*) &(pr->Attribute_Value[0]));
 8010956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010958:	3305      	adds	r3, #5
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	4a36      	ldr	r2, [pc, #216]	; (8010a38 <DTC_Event_Handler+0x3d8>)
 801095e:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010960:	b672      	cpsid	i
            if (NotificationData.DataTransfered.pPayload_n >= (NotificationData.DataTransfered.pPayload_n_1 + 2))
 8010962:	4b35      	ldr	r3, [pc, #212]	; (8010a38 <DTC_Event_Handler+0x3d8>)
 8010964:	68da      	ldr	r2, [r3, #12]
 8010966:	4b34      	ldr	r3, [pc, #208]	; (8010a38 <DTC_Event_Handler+0x3d8>)
 8010968:	689b      	ldr	r3, [r3, #8]
 801096a:	3302      	adds	r3, #2
 801096c:	429a      	cmp	r2, r3
 801096e:	d30f      	bcc.n	8010990 <DTC_Event_Handler+0x330>
                  ((NotificationData.DataTransfered.pPayload_n - NotificationData.DataTransfered.pPayload_n_1) - 1);
 8010970:	4b31      	ldr	r3, [pc, #196]	; (8010a38 <DTC_Event_Handler+0x3d8>)
 8010972:	68db      	ldr	r3, [r3, #12]
 8010974:	b29a      	uxth	r2, r3
 8010976:	4b30      	ldr	r3, [pc, #192]	; (8010a38 <DTC_Event_Handler+0x3d8>)
 8010978:	689b      	ldr	r3, [r3, #8]
 801097a:	b29b      	uxth	r3, r3
 801097c:	1ad3      	subs	r3, r2, r3
 801097e:	b29a      	uxth	r2, r3
              packet_lost +=
 8010980:	4b2e      	ldr	r3, [pc, #184]	; (8010a3c <DTC_Event_Handler+0x3dc>)
 8010982:	881b      	ldrh	r3, [r3, #0]
 8010984:	4413      	add	r3, r2
 8010986:	b29b      	uxth	r3, r3
 8010988:	3b01      	subs	r3, #1
 801098a:	b29a      	uxth	r2, r3
 801098c:	4b2b      	ldr	r3, [pc, #172]	; (8010a3c <DTC_Event_Handler+0x3dc>)
 801098e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8010990:	b662      	cpsie	i
            CRC_Result = APP_BLE_ComputeCRC8((uint8_t*) (pr->Attribute_Value), (pr->Attribute_Value_Length) - 1);
 8010992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010994:	1d5a      	adds	r2, r3, #5
 8010996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010998:	791b      	ldrb	r3, [r3, #4]
 801099a:	3b01      	subs	r3, #1
 801099c:	b2db      	uxtb	r3, r3
 801099e:	4619      	mov	r1, r3
 80109a0:	4610      	mov	r0, r2
 80109a2:	f7ff f9ab 	bl	800fcfc <APP_BLE_ComputeCRC8>
 80109a6:	4603      	mov	r3, r0
 80109a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            CRC_Received = (uint8_t) (pr->Attribute_Value[DATA_NOTIFICATION_MAX_PACKET_SIZE-1]);
 80109ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ae:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80109b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if (CRC_Received != CRC_Result)
 80109b6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80109ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80109be:	429a      	cmp	r2, r3
 80109c0:	d00a      	beq.n	80109d8 <DTC_Event_Handler+0x378>
              N+=1;
 80109c2:	4b1f      	ldr	r3, [pc, #124]	; (8010a40 <DTC_Event_Handler+0x3e0>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	3301      	adds	r3, #1
 80109c8:	4a1d      	ldr	r2, [pc, #116]	; (8010a40 <DTC_Event_Handler+0x3e0>)
 80109ca:	6013      	str	r3, [r2, #0]
              APP_DBG_MSG("** data error **  N= %d \r\n",(int)N);
 80109cc:	4b1c      	ldr	r3, [pc, #112]	; (8010a40 <DTC_Event_Handler+0x3e0>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	4619      	mov	r1, r3
 80109d2:	481c      	ldr	r0, [pc, #112]	; (8010a44 <DTC_Event_Handler+0x3e4>)
 80109d4:	f001 f932 	bl	8011c3c <iprintf>
            NotificationData.DataTransfered.pPayload_n_1 = NotificationData.DataTransfered.pPayload_n;
 80109d8:	4b17      	ldr	r3, [pc, #92]	; (8010a38 <DTC_Event_Handler+0x3d8>)
 80109da:	68db      	ldr	r3, [r3, #12]
 80109dc:	4a16      	ldr	r2, [pc, #88]	; (8010a38 <DTC_Event_Handler+0x3d8>)
 80109de:	6093      	str	r3, [r2, #8]
            if (DataTransfered == 0)
 80109e0:	4b19      	ldr	r3, [pc, #100]	; (8010a48 <DTC_Event_Handler+0x3e8>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d106      	bne.n	80109f6 <DTC_Event_Handler+0x396>
              HW_TS_Start(TimerDataThroughput_Id, DATA_THROUGHPUT_MEASUREMENT);
 80109e8:	4b18      	ldr	r3, [pc, #96]	; (8010a4c <DTC_Event_Handler+0x3ec>)
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	f640 0101 	movw	r1, #2049	; 0x801
 80109f0:	4618      	mov	r0, r3
 80109f2:	f7f1 fa3f 	bl	8001e74 <HW_TS_Start>
            DataTransfered += NotificationData.DataTransfered.Length;
 80109f6:	4b10      	ldr	r3, [pc, #64]	; (8010a38 <DTC_Event_Handler+0x3d8>)
 80109f8:	691a      	ldr	r2, [r3, #16]
 80109fa:	4b13      	ldr	r3, [pc, #76]	; (8010a48 <DTC_Event_Handler+0x3e8>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	4413      	add	r3, r2
 8010a00:	4a11      	ldr	r2, [pc, #68]	; (8010a48 <DTC_Event_Handler+0x3e8>)
 8010a02:	6013      	str	r3, [r2, #0]
        break;/* end EVT_BLUE_GATT_NOTIFICATION */
 8010a04:	e00e      	b.n	8010a24 <DTC_Event_Handler+0x3c4>
          osThreadFlagsSet( LinkConfigProcessId, 2 );
 8010a06:	4b12      	ldr	r3, [pc, #72]	; (8010a50 <DTC_Event_Handler+0x3f0>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	2102      	movs	r1, #2
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7fa fe07 	bl	800b620 <osThreadFlagsSet>
          break; /*EVT_BLUE_GATT_PROCEDURE_COMPLETE*/
 8010a12:	e008      	b.n	8010a26 <DTC_Event_Handler+0x3c6>
          break;
 8010a14:	bf00      	nop
 8010a16:	e006      	b.n	8010a26 <DTC_Event_Handler+0x3c6>
          break;
 8010a18:	bf00      	nop
 8010a1a:	e004      	b.n	8010a26 <DTC_Event_Handler+0x3c6>
        break;
 8010a1c:	bf00      	nop
 8010a1e:	e002      	b.n	8010a26 <DTC_Event_Handler+0x3c6>
        break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 8010a20:	bf00      	nop
 8010a22:	e000      	b.n	8010a26 <DTC_Event_Handler+0x3c6>
        break;/* end EVT_BLUE_GATT_NOTIFICATION */
 8010a24:	bf00      	nop
          break;
 8010a26:	bf00      	nop
      }
    }

    return (return_value);
 8010a28:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
  }
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3740      	adds	r7, #64	; 0x40
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}
 8010a34:	20006fcc 	.word	0x20006fcc
 8010a38:	20006b04 	.word	0x20006b04
 8010a3c:	20006af8 	.word	0x20006af8
 8010a40:	20006b1c 	.word	0x20006b1c
 8010a44:	08013a60 	.word	0x08013a60
 8010a48:	20006b20 	.word	0x20006b20
 8010a4c:	20006b18 	.word	0x20006b18
 8010a50:	20006f94 	.word	0x20006f94

08010a54 <DataThroughputTimer>:

    APP_DBG_MSG("DT = %ld bytes/s lost = %ld \n",DataThroughputValue, packet_lost_local);
  }

  static void DataThroughputTimer( void )
  {
 8010a54:	b480      	push	{r7}
 8010a56:	af00      	add	r7, sp, #0
    DataThroughputValue = (uint32_t)(DataTransfered / TIMEUNIT);
 8010a58:	4b09      	ldr	r3, [pc, #36]	; (8010a80 <DataThroughputTimer+0x2c>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	4a09      	ldr	r2, [pc, #36]	; (8010a84 <DataThroughputTimer+0x30>)
 8010a5e:	6013      	str	r3, [r2, #0]
    packet_lost_local = (uint32_t)(packet_lost / TIMEUNIT);
 8010a60:	4b09      	ldr	r3, [pc, #36]	; (8010a88 <DataThroughputTimer+0x34>)
 8010a62:	881b      	ldrh	r3, [r3, #0]
 8010a64:	461a      	mov	r2, r3
 8010a66:	4b09      	ldr	r3, [pc, #36]	; (8010a8c <DataThroughputTimer+0x38>)
 8010a68:	601a      	str	r2, [r3, #0]
    DataTransfered = 0;
 8010a6a:	4b05      	ldr	r3, [pc, #20]	; (8010a80 <DataThroughputTimer+0x2c>)
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	601a      	str	r2, [r3, #0]
    packet_lost = 0;
 8010a70:	4b05      	ldr	r3, [pc, #20]	; (8010a88 <DataThroughputTimer+0x34>)
 8010a72:	2200      	movs	r2, #0
 8010a74:	801a      	strh	r2, [r3, #0]

//    UTIL_SEQ_SetTask(1 << CFG_TASK_APP_DATA_THROUGHPUT_ID, CFG_SCH_PRIO_0);
    return;
 8010a76:	bf00      	nop
  }
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7e:	4770      	bx	lr
 8010a80:	20006b20 	.word	0x20006b20
 8010a84:	20006afc 	.word	0x20006afc
 8010a88:	20006af8 	.word	0x20006af8
 8010a8c:	20006b00 	.word	0x20006b00

08010a90 <GattProcReq>:

  static void GattProcReq(GattProcId_t GattProcId)
  {
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b084      	sub	sp, #16
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	4603      	mov	r3, r0
 8010a98:	71fb      	strb	r3, [r7, #7]
    tBleStatus status;

    switch(GattProcId)
 8010a9a:	79fb      	ldrb	r3, [r7, #7]
 8010a9c:	2b03      	cmp	r3, #3
 8010a9e:	f200 808e 	bhi.w	8010bbe <GattProcReq+0x12e>
 8010aa2:	a201      	add	r2, pc, #4	; (adr r2, 8010aa8 <GattProcReq+0x18>)
 8010aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aa8:	08010ab9 	.word	0x08010ab9
 8010aac:	08010b03 	.word	0x08010b03
 8010ab0:	08010b3b 	.word	0x08010b3b
 8010ab4:	08010b7b 	.word	0x08010b7b
    {
      case GATT_PROC_MTU_UPDATE:
        APP_DBG_MSG("change ATT MTU size \n");
 8010ab8:	4843      	ldr	r0, [pc, #268]	; (8010bc8 <GattProcReq+0x138>)
 8010aba:	f001 f933 	bl	8011d24 <puts>
        status = aci_gatt_exchange_config(DataTransferClientContext.connHandle);
 8010abe:	4b43      	ldr	r3, [pc, #268]	; (8010bcc <GattProcReq+0x13c>)
 8010ac0:	881b      	ldrh	r3, [r3, #0]
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7f7 fe5c 	bl	8008780 <aci_gatt_exchange_config>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	73fb      	strb	r3, [r7, #15]
        if (status != BLE_STATUS_SUCCESS)
 8010acc:	7bfb      	ldrb	r3, [r7, #15]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d007      	beq.n	8010ae2 <GattProcReq+0x52>
        {
          APP_DBG_MSG("change MTU cmd failure: 0x%x\n", status);
 8010ad2:	7bfb      	ldrb	r3, [r7, #15]
 8010ad4:	4619      	mov	r1, r3
 8010ad6:	483e      	ldr	r0, [pc, #248]	; (8010bd0 <GattProcReq+0x140>)
 8010ad8:	f001 f8b0 	bl	8011c3c <iprintf>
          BSP_LED_On(LED_RED);
 8010adc:	2002      	movs	r0, #2
 8010ade:	f7f1 fe13 	bl	8002708 <BSP_LED_On>

        }
        BSP_LED_On(LED_GREEN);
 8010ae2:	2001      	movs	r0, #1
 8010ae4:	f7f1 fe10 	bl	8002708 <BSP_LED_On>
//        UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_GATT_PROC_COMPLETE);
        osThreadFlagsWait( 2, osFlagsWaitAny, osWaitForever);
 8010ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8010aec:	2100      	movs	r1, #0
 8010aee:	2002      	movs	r0, #2
 8010af0:	f7fa fdf8 	bl	800b6e4 <osThreadFlagsWait>
        BSP_LED_Off(LED_GREEN);
 8010af4:	2001      	movs	r0, #1
 8010af6:	f7f1 fe21 	bl	800273c <BSP_LED_Off>
        APP_DBG_MSG("GATT_PROC_MTU_UPDATE complete event received \n");
 8010afa:	4836      	ldr	r0, [pc, #216]	; (8010bd4 <GattProcReq+0x144>)
 8010afc:	f001 f912 	bl	8011d24 <puts>
        break;
 8010b00:	e05e      	b.n	8010bc0 <GattProcReq+0x130>

      case GATT_PROC_DISC_ALL_PRIMARY_SERVICES:
//    	  BSP_LED_On(LED_BLUE);
        APP_DBG_MSG("Discover all primary services \n");
 8010b02:	4835      	ldr	r0, [pc, #212]	; (8010bd8 <GattProcReq+0x148>)
 8010b04:	f001 f90e 	bl	8011d24 <puts>

        status = aci_gatt_disc_all_primary_services(DataTransferClientContext.connHandle);
 8010b08:	4b30      	ldr	r3, [pc, #192]	; (8010bcc <GattProcReq+0x13c>)
 8010b0a:	881b      	ldrh	r3, [r3, #0]
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7f7 fe85 	bl	800881c <aci_gatt_disc_all_primary_services>
 8010b12:	4603      	mov	r3, r0
 8010b14:	73fb      	strb	r3, [r7, #15]
        if (status != BLE_STATUS_SUCCESS)
 8010b16:	7bfb      	ldrb	r3, [r7, #15]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d004      	beq.n	8010b26 <GattProcReq+0x96>
        {
          APP_DBG_MSG("Discover all primary services cmd failure: 0x%x\n", status);
 8010b1c:	7bfb      	ldrb	r3, [r7, #15]
 8010b1e:	4619      	mov	r1, r3
 8010b20:	482e      	ldr	r0, [pc, #184]	; (8010bdc <GattProcReq+0x14c>)
 8010b22:	f001 f88b 	bl	8011c3c <iprintf>
//          BSP_LED_On(LED_RED);
        }
//        UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_GATT_PROC_COMPLETE);
        osThreadFlagsWait( 2, osFlagsWaitAny, osWaitForever);
 8010b26:	f04f 32ff 	mov.w	r2, #4294967295
 8010b2a:	2100      	movs	r1, #0
 8010b2c:	2002      	movs	r0, #2
 8010b2e:	f7fa fdd9 	bl	800b6e4 <osThreadFlagsWait>
//        BSP_LED_On(LED_GREEN);
        APP_DBG_MSG("GATT_PROC_DISC_ALL_PRIMARY_SERVICES complete event received \n");
 8010b32:	482b      	ldr	r0, [pc, #172]	; (8010be0 <GattProcReq+0x150>)
 8010b34:	f001 f8f6 	bl	8011d24 <puts>
        break;
 8010b38:	e042      	b.n	8010bc0 <GattProcReq+0x130>

      case GATT_PROC_DISC_ALL_CHAR_OF_DT_SERVICE:
        APP_DBG_MSG("Discover all char of service \n");
 8010b3a:	482a      	ldr	r0, [pc, #168]	; (8010be4 <GattProcReq+0x154>)
 8010b3c:	f001 f8f2 	bl	8011d24 <puts>

        status = aci_gatt_disc_all_char_of_service(
 8010b40:	4b22      	ldr	r3, [pc, #136]	; (8010bcc <GattProcReq+0x13c>)
 8010b42:	8818      	ldrh	r0, [r3, #0]
 8010b44:	4b21      	ldr	r3, [pc, #132]	; (8010bcc <GattProcReq+0x13c>)
 8010b46:	8859      	ldrh	r1, [r3, #2]
 8010b48:	4b20      	ldr	r3, [pc, #128]	; (8010bcc <GattProcReq+0x13c>)
 8010b4a:	889b      	ldrh	r3, [r3, #4]
 8010b4c:	461a      	mov	r2, r3
 8010b4e:	f7f7 feb3 	bl	80088b8 <aci_gatt_disc_all_char_of_service>
 8010b52:	4603      	mov	r3, r0
 8010b54:	73fb      	strb	r3, [r7, #15]
            DataTransferClientContext.connHandle,
            DataTransferClientContext.DataTransferServiceHandle,
            DataTransferClientContext.DataTransferServiceEndHandle);
        if (status != BLE_STATUS_SUCCESS)
 8010b56:	7bfb      	ldrb	r3, [r7, #15]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d004      	beq.n	8010b66 <GattProcReq+0xd6>
        {
          APP_DBG_MSG("Discover all char of service cmd failure: 0x%x\n", status);
 8010b5c:	7bfb      	ldrb	r3, [r7, #15]
 8010b5e:	4619      	mov	r1, r3
 8010b60:	4821      	ldr	r0, [pc, #132]	; (8010be8 <GattProcReq+0x158>)
 8010b62:	f001 f86b 	bl	8011c3c <iprintf>
//          BSP_LED_On(LED_RED);
        }
//        UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_GATT_PROC_COMPLETE);
        osThreadFlagsWait( 2, osFlagsWaitAny, osWaitForever);
 8010b66:	f04f 32ff 	mov.w	r2, #4294967295
 8010b6a:	2100      	movs	r1, #0
 8010b6c:	2002      	movs	r0, #2
 8010b6e:	f7fa fdb9 	bl	800b6e4 <osThreadFlagsWait>

        APP_DBG_MSG("GATT_PROC_DISC_ALL_CHAR_OF_DT_SERVICE complete event received \n");
 8010b72:	481e      	ldr	r0, [pc, #120]	; (8010bec <GattProcReq+0x15c>)
 8010b74:	f001 f8d6 	bl	8011d24 <puts>
        break;
 8010b78:	e022      	b.n	8010bc0 <GattProcReq+0x130>

      case GATT_PROC_DISC_TX_CHAR_DESC:
        APP_DBG_MSG("Discover Tx char descriptors \n");
 8010b7a:	481d      	ldr	r0, [pc, #116]	; (8010bf0 <GattProcReq+0x160>)
 8010b7c:	f001 f8d2 	bl	8011d24 <puts>

        status = aci_gatt_disc_all_char_desc(
 8010b80:	4b12      	ldr	r3, [pc, #72]	; (8010bcc <GattProcReq+0x13c>)
 8010b82:	8818      	ldrh	r0, [r3, #0]
 8010b84:	4b11      	ldr	r3, [pc, #68]	; (8010bcc <GattProcReq+0x13c>)
 8010b86:	88d9      	ldrh	r1, [r3, #6]
            DataTransferClientContext.connHandle,
            DataTransferClientContext.DataTransferTxCharHdle,
            DataTransferClientContext.DataTransferTxCharHdle + 2);
 8010b88:	4b10      	ldr	r3, [pc, #64]	; (8010bcc <GattProcReq+0x13c>)
 8010b8a:	88db      	ldrh	r3, [r3, #6]
        status = aci_gatt_disc_all_char_desc(
 8010b8c:	3302      	adds	r3, #2
 8010b8e:	b29b      	uxth	r3, r3
 8010b90:	461a      	mov	r2, r3
 8010b92:	f7f7 fefc 	bl	800898e <aci_gatt_disc_all_char_desc>
 8010b96:	4603      	mov	r3, r0
 8010b98:	73fb      	strb	r3, [r7, #15]
        if (status != BLE_STATUS_SUCCESS)
 8010b9a:	7bfb      	ldrb	r3, [r7, #15]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d004      	beq.n	8010baa <GattProcReq+0x11a>
        {
          APP_DBG_MSG("Discover Tx char descriptors cmd failure: 0x%x\n", status);
 8010ba0:	7bfb      	ldrb	r3, [r7, #15]
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	4813      	ldr	r0, [pc, #76]	; (8010bf4 <GattProcReq+0x164>)
 8010ba6:	f001 f849 	bl	8011c3c <iprintf>
//          BSP_LED_On(LED_RED);
        }
//        UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_GATT_PROC_COMPLETE);
        osThreadFlagsWait( 2, osFlagsWaitAny, osWaitForever);
 8010baa:	f04f 32ff 	mov.w	r2, #4294967295
 8010bae:	2100      	movs	r1, #0
 8010bb0:	2002      	movs	r0, #2
 8010bb2:	f7fa fd97 	bl	800b6e4 <osThreadFlagsWait>

        APP_DBG_MSG("GATT_PROC_DISC_TX_CHAR_DESC complete event received \n");
 8010bb6:	4810      	ldr	r0, [pc, #64]	; (8010bf8 <GattProcReq+0x168>)
 8010bb8:	f001 f8b4 	bl	8011d24 <puts>
        break;
 8010bbc:	e000      	b.n	8010bc0 <GattProcReq+0x130>

      default:
        break;
 8010bbe:	bf00      	nop
    }
    return;
 8010bc0:	bf00      	nop
  }
 8010bc2:	3710      	adds	r7, #16
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}
 8010bc8:	08013ab0 	.word	0x08013ab0
 8010bcc:	20006fcc 	.word	0x20006fcc
 8010bd0:	08013ac8 	.word	0x08013ac8
 8010bd4:	08013ae8 	.word	0x08013ae8
 8010bd8:	08013b18 	.word	0x08013b18
 8010bdc:	08013b38 	.word	0x08013b38
 8010be0:	08013b6c 	.word	0x08013b6c
 8010be4:	08013bac 	.word	0x08013bac
 8010be8:	08013bcc 	.word	0x08013bcc
 8010bec:	08013bfc 	.word	0x08013bfc
 8010bf0:	08013c3c 	.word	0x08013c3c
 8010bf4:	08013c5c 	.word	0x08013c5c
 8010bf8:	08013c8c 	.word	0x08013c8c

08010bfc <DTS_App_Init>:
 *
 * PUBLIC FUNCTIONS
 *
 *************************************************************/
void DTS_App_Init(void)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b082      	sub	sp, #8
 8010c00:	af00      	add	r7, sp, #0
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_SW2_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, DT_App_Button2_Trigger_Received);
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_SW3_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, DT_App_Button3_Trigger_Received);
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_DATA_TRANSFER_UPDATE_ID, UTIL_SEQ_RFU, SendData);
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_DATA_WRITE_ID, UTIL_SEQ_RFU, BLE_App_Delay_DataThroughput);

  DataWriteProcessId= osThreadNew(BLE_App_Delay_DataThroughput, NULL, &DataWriteProcess_attr);
 8010c02:	4a15      	ldr	r2, [pc, #84]	; (8010c58 <DTS_App_Init+0x5c>)
 8010c04:	2100      	movs	r1, #0
 8010c06:	4815      	ldr	r0, [pc, #84]	; (8010c5c <DTS_App_Init+0x60>)
 8010c08:	f7fa fc64 	bl	800b4d4 <osThreadNew>
 8010c0c:	4602      	mov	r2, r0
 8010c0e:	4b14      	ldr	r3, [pc, #80]	; (8010c60 <DTS_App_Init+0x64>)
 8010c10:	601a      	str	r2, [r3, #0]
  DataTransferProcessId= osThreadNew(SendData, NULL, &DataTransferProcess_attr);
 8010c12:	4a14      	ldr	r2, [pc, #80]	; (8010c64 <DTS_App_Init+0x68>)
 8010c14:	2100      	movs	r1, #0
 8010c16:	4814      	ldr	r0, [pc, #80]	; (8010c68 <DTS_App_Init+0x6c>)
 8010c18:	f7fa fc5c 	bl	800b4d4 <osThreadNew>
 8010c1c:	4602      	mov	r2, r0
 8010c1e:	4b13      	ldr	r3, [pc, #76]	; (8010c6c <DTS_App_Init+0x70>)
 8010c20:	601a      	str	r2, [r3, #0]


  /**
   * Initialize data buffer
   */
  for (i=0 ; i<(DATA_NOTIFICATION_MAX_PACKET_SIZE-1) ; i++)
 8010c22:	2300      	movs	r3, #0
 8010c24:	71fb      	strb	r3, [r7, #7]
 8010c26:	e006      	b.n	8010c36 <DTS_App_Init+0x3a>
  {
    Notification_Data_Buffer[i] = i;
 8010c28:	79fb      	ldrb	r3, [r7, #7]
 8010c2a:	4911      	ldr	r1, [pc, #68]	; (8010c70 <DTS_App_Init+0x74>)
 8010c2c:	79fa      	ldrb	r2, [r7, #7]
 8010c2e:	54ca      	strb	r2, [r1, r3]
  for (i=0 ; i<(DATA_NOTIFICATION_MAX_PACKET_SIZE-1) ; i++)
 8010c30:	79fb      	ldrb	r3, [r7, #7]
 8010c32:	3301      	adds	r3, #1
 8010c34:	71fb      	strb	r3, [r7, #7]
 8010c36:	79fb      	ldrb	r3, [r7, #7]
 8010c38:	2bee      	cmp	r3, #238	; 0xee
 8010c3a:	d9f5      	bls.n	8010c28 <DTS_App_Init+0x2c>
  }

  DataTransferServerContext.NotificationTransferReq = DTS_APP_TRANSFER_REQ_OFF;
 8010c3c:	4b0d      	ldr	r3, [pc, #52]	; (8010c74 <DTS_App_Init+0x78>)
 8010c3e:	2200      	movs	r2, #0
 8010c40:	741a      	strb	r2, [r3, #16]
  DataTransferServerContext.ButtonTransferReq = DTS_APP_TRANSFER_REQ_OFF;
 8010c42:	4b0c      	ldr	r3, [pc, #48]	; (8010c74 <DTS_App_Init+0x78>)
 8010c44:	2200      	movs	r2, #0
 8010c46:	745a      	strb	r2, [r3, #17]
  DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_ON;
 8010c48:	4b0a      	ldr	r3, [pc, #40]	; (8010c74 <DTS_App_Init+0x78>)
 8010c4a:	2201      	movs	r2, #1
 8010c4c:	749a      	strb	r2, [r3, #18]
}
 8010c4e:	bf00      	nop
 8010c50:	3708      	adds	r7, #8
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	08014184 	.word	0x08014184
 8010c5c:	08010e19 	.word	0x08010e19
 8010c60:	20006f9c 	.word	0x20006f9c
 8010c64:	080141a8 	.word	0x080141a8
 8010c68:	08010d61 	.word	0x08010d61
 8010c6c:	20006fc0 	.word	0x20006fc0
 8010c70:	20006b24 	.word	0x20006b24
 8010c74:	20006fdc 	.word	0x20006fdc

08010c78 <DTS_App_TxPoolAvailableNotification>:
//    UTIL_SEQ_SetTask(1 << CFG_TASK_SW3_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
	  osThreadFlagsSet( Button_SW2_ProcessId, 1 );
}

void DTS_App_TxPoolAvailableNotification(void)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	af00      	add	r7, sp, #0
  DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_ON;
 8010c7c:	4b05      	ldr	r3, [pc, #20]	; (8010c94 <DTS_App_TxPoolAvailableNotification+0x1c>)
 8010c7e:	2201      	movs	r2, #1
 8010c80:	749a      	strb	r2, [r3, #18]
//  UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_TRANSFER_UPDATE_ID, CFG_SCH_PRIO_0);
  osThreadFlagsSet( DataTransferProcessId, 1 );
 8010c82:	4b05      	ldr	r3, [pc, #20]	; (8010c98 <DTS_App_TxPoolAvailableNotification+0x20>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	2101      	movs	r1, #1
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7fa fcc9 	bl	800b620 <osThreadFlagsSet>

  return;
 8010c8e:	bf00      	nop
}
 8010c90:	bd80      	pop	{r7, pc}
 8010c92:	bf00      	nop
 8010c94:	20006fdc 	.word	0x20006fdc
 8010c98:	20006fc0 	.word	0x20006fc0

08010c9c <DTS_Notification>:
 *
 * CALLBACK FUNCTIONS
 *
 *************************************************************/
void DTS_Notification( DTS_STM_App_Notification_evt_t *pNotification )
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b082      	sub	sp, #8
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
  switch (pNotification->Evt_Opcode)
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	785b      	ldrb	r3, [r3, #1]
 8010ca8:	2b05      	cmp	r3, #5
 8010caa:	d849      	bhi.n	8010d40 <DTS_Notification+0xa4>
 8010cac:	a201      	add	r2, pc, #4	; (adr r2, 8010cb4 <DTS_Notification+0x18>)
 8010cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cb2:	bf00      	nop
 8010cb4:	08010ccd 	.word	0x08010ccd
 8010cb8:	08010ce1 	.word	0x08010ce1
 8010cbc:	08010d2d 	.word	0x08010d2d
 8010cc0:	08010ce9 	.word	0x08010ce9
 8010cc4:	08010cef 	.word	0x08010cef
 8010cc8:	08010cf7 	.word	0x08010cf7
  {
    case DTS_STM__NOTIFICATION_ENABLED:
      DataTransferServerContext.NotificationTransferReq = DTS_APP_TRANSFER_REQ_ON;
 8010ccc:	4b1f      	ldr	r3, [pc, #124]	; (8010d4c <DTS_Notification+0xb0>)
 8010cce:	2201      	movs	r2, #1
 8010cd0:	741a      	strb	r2, [r3, #16]
//      UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_TRANSFER_UPDATE_ID, CFG_SCH_PRIO_0);
      osThreadFlagsSet( DataTransferProcessId, 1 );
 8010cd2:	4b1f      	ldr	r3, [pc, #124]	; (8010d50 <DTS_Notification+0xb4>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	2101      	movs	r1, #1
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f7fa fca1 	bl	800b620 <osThreadFlagsSet>
      break;
 8010cde:	e030      	b.n	8010d42 <DTS_Notification+0xa6>

    case DTS_STM_NOTIFICATION_DISABLED:
      DataTransferServerContext.NotificationTransferReq = DTS_APP_TRANSFER_REQ_OFF;
 8010ce0:	4b1a      	ldr	r3, [pc, #104]	; (8010d4c <DTS_Notification+0xb0>)
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	741a      	strb	r2, [r3, #16]
      break;
 8010ce6:	e02c      	b.n	8010d42 <DTS_Notification+0xa6>
      
    case DTC_NOTIFICATION_ENABLED:
      BLE_SVC_L2CAP_Conn_Update_7_5();
 8010ce8:	f7ff f90e 	bl	800ff08 <BLE_SVC_L2CAP_Conn_Update_7_5>
//      BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);

      //DataTransferServerContext.NotificationClientTransferFlag = 0x01;
      break;
 8010cec:	e029      	b.n	8010d42 <DTS_Notification+0xa6>
      
    case DTC_NOTIFICATION_DISABLED:
      //DataTransferServerContext.NotificationClientTransferFlag = 0x00;
      APP_DBG_MSG("write data notification disabled \n");
 8010cee:	4819      	ldr	r0, [pc, #100]	; (8010d54 <DTS_Notification+0xb8>)
 8010cf0:	f001 f818 	bl	8011d24 <puts>
      break;
 8010cf4:	e025      	b.n	8010d42 <DTS_Notification+0xa6>
      
    case DTS_STM_DATA_RECEIVED:
      if (DataReceived == 0)
 8010cf6:	4b18      	ldr	r3, [pc, #96]	; (8010d58 <DTS_Notification+0xbc>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d10e      	bne.n	8010d1c <DTS_Notification+0x80>
      {
        /* start timer */
        DataReceived += pNotification->DataTransfered.Length;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	691a      	ldr	r2, [r3, #16]
 8010d02:	4b15      	ldr	r3, [pc, #84]	; (8010d58 <DTS_Notification+0xbc>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	4413      	add	r3, r2
 8010d08:	4a13      	ldr	r2, [pc, #76]	; (8010d58 <DTS_Notification+0xbc>)
 8010d0a:	6013      	str	r3, [r2, #0]
        HW_TS_Start(TimerDataThroughputWrite_Id, DELAY_1s);
 8010d0c:	4b13      	ldr	r3, [pc, #76]	; (8010d5c <DTS_Notification+0xc0>)
 8010d0e:	781b      	ldrb	r3, [r3, #0]
 8010d10:	f640 0101 	movw	r1, #2049	; 0x801
 8010d14:	4618      	mov	r0, r3
 8010d16:	f7f1 f8ad 	bl	8001e74 <HW_TS_Start>
      }
      else
      {
        DataReceived += pNotification->DataTransfered.Length;
      }
      break;
 8010d1a:	e012      	b.n	8010d42 <DTS_Notification+0xa6>
        DataReceived += pNotification->DataTransfered.Length;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	691a      	ldr	r2, [r3, #16]
 8010d20:	4b0d      	ldr	r3, [pc, #52]	; (8010d58 <DTS_Notification+0xbc>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	4413      	add	r3, r2
 8010d26:	4a0c      	ldr	r2, [pc, #48]	; (8010d58 <DTS_Notification+0xbc>)
 8010d28:	6013      	str	r3, [r2, #0]
      break;
 8010d2a:	e00a      	b.n	8010d42 <DTS_Notification+0xa6>

    case DTS_STM_GATT_TX_POOL_AVAILABLE:
      DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_ON;
 8010d2c:	4b07      	ldr	r3, [pc, #28]	; (8010d4c <DTS_Notification+0xb0>)
 8010d2e:	2201      	movs	r2, #1
 8010d30:	749a      	strb	r2, [r3, #18]
//      UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_TRANSFER_UPDATE_ID, CFG_SCH_PRIO_0);
      osThreadFlagsSet( DataTransferProcessId, 1 );
 8010d32:	4b07      	ldr	r3, [pc, #28]	; (8010d50 <DTS_Notification+0xb4>)
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	2101      	movs	r1, #1
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f7fa fc71 	bl	800b620 <osThreadFlagsSet>
      break;
 8010d3e:	e000      	b.n	8010d42 <DTS_Notification+0xa6>

    default:
      break;
 8010d40:	bf00      	nop
  }

  return;
 8010d42:	bf00      	nop
}
 8010d44:	3708      	adds	r7, #8
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	20006fdc 	.word	0x20006fdc
 8010d50:	20006fc0 	.word	0x20006fc0
 8010d54:	08013d04 	.word	0x08013d04
 8010d58:	20006fd8 	.word	0x20006fd8
 8010d5c:	20006fb0 	.word	0x20006fb0

08010d60 <SendData>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
void SendData( void * argument )
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b084      	sub	sp, #16
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	  for(;;)
	  {
	    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8010d68:	f04f 32ff 	mov.w	r2, #4294967295
 8010d6c:	2100      	movs	r1, #0
 8010d6e:	2001      	movs	r0, #1
 8010d70:	f7fa fcb8 	bl	800b6e4 <osThreadFlagsWait>

  tBleStatus status = BLE_STATUS_INVALID_PARAMS;
 8010d74:	2342      	movs	r3, #66	; 0x42
 8010d76:	73fb      	strb	r3, [r7, #15]
  uint8_t crc_result;

  if( (DataTransferServerContext.ButtonTransferReq != DTS_APP_TRANSFER_REQ_OFF)
 8010d78:	4b1e      	ldr	r3, [pc, #120]	; (8010df4 <SendData+0x94>)
 8010d7a:	7c5b      	ldrb	r3, [r3, #17]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d0f3      	beq.n	8010d68 <SendData+0x8>
      && (DataTransferServerContext.NotificationTransferReq != DTS_APP_TRANSFER_REQ_OFF)
 8010d80:	4b1c      	ldr	r3, [pc, #112]	; (8010df4 <SendData+0x94>)
 8010d82:	7c1b      	ldrb	r3, [r3, #16]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d0ef      	beq.n	8010d68 <SendData+0x8>
      && (DataTransferServerContext.DtFlowStatus != DTS_APP_FLOW_OFF) )
 8010d88:	4b1a      	ldr	r3, [pc, #104]	; (8010df4 <SendData+0x94>)
 8010d8a:	7c9b      	ldrb	r3, [r3, #18]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d0eb      	beq.n	8010d68 <SendData+0x8>
  {   
    /*Data Packet to send to remote*/
    Notification_Data_Buffer[0] += 1;
 8010d90:	4b19      	ldr	r3, [pc, #100]	; (8010df8 <SendData+0x98>)
 8010d92:	781b      	ldrb	r3, [r3, #0]
 8010d94:	3301      	adds	r3, #1
 8010d96:	b2da      	uxtb	r2, r3
 8010d98:	4b17      	ldr	r3, [pc, #92]	; (8010df8 <SendData+0x98>)
 8010d9a:	701a      	strb	r2, [r3, #0]
    /* compute CRC */
    crc_result = APP_BLE_ComputeCRC8((uint8_t*) Notification_Data_Buffer, (DATA_NOTIFICATION_MAX_PACKET_SIZE - 1));
 8010d9c:	21ef      	movs	r1, #239	; 0xef
 8010d9e:	4816      	ldr	r0, [pc, #88]	; (8010df8 <SendData+0x98>)
 8010da0:	f7fe ffac 	bl	800fcfc <APP_BLE_ComputeCRC8>
 8010da4:	4603      	mov	r3, r0
 8010da6:	73bb      	strb	r3, [r7, #14]
    Notification_Data_Buffer[DATA_NOTIFICATION_MAX_PACKET_SIZE - 1] = crc_result;
 8010da8:	4a13      	ldr	r2, [pc, #76]	; (8010df8 <SendData+0x98>)
 8010daa:	7bbb      	ldrb	r3, [r7, #14]
 8010dac:	f882 30ef 	strb.w	r3, [r2, #239]	; 0xef

    DataTransferServerContext.TxData.pPayload = Notification_Data_Buffer;
 8010db0:	4b10      	ldr	r3, [pc, #64]	; (8010df4 <SendData+0x94>)
 8010db2:	4a11      	ldr	r2, [pc, #68]	; (8010df8 <SendData+0x98>)
 8010db4:	601a      	str	r2, [r3, #0]
    //DataTransferServerContext.TxData.Length = DATA_NOTIFICATION_MAX_PACKET_SIZE; /* DATA_NOTIFICATION_MAX_PACKET_SIZE */
    DataTransferServerContext.TxData.Length =  DATA_NOTIFICATION_MAX_PACKET_SIZE; //Att_Mtu_Exchanged-10;
 8010db6:	4b0f      	ldr	r3, [pc, #60]	; (8010df4 <SendData+0x94>)
 8010db8:	22f0      	movs	r2, #240	; 0xf0
 8010dba:	60da      	str	r2, [r3, #12]

    status = DTS_STM_UpdateChar(DATA_TRANSFER_TX_CHAR_UUID, (uint8_t *) &DataTransferServerContext.TxData);
 8010dbc:	490d      	ldr	r1, [pc, #52]	; (8010df4 <SendData+0x94>)
 8010dbe:	f64f 6081 	movw	r0, #65153	; 0xfe81
 8010dc2:	f000 f9f7 	bl	80111b4 <DTS_STM_UpdateChar>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	73fb      	strb	r3, [r7, #15]
    if (status == BLE_STATUS_INSUFFICIENT_RESOURCES)
 8010dca:	7bfb      	ldrb	r3, [r7, #15]
 8010dcc:	2b64      	cmp	r3, #100	; 0x64
 8010dce:	d109      	bne.n	8010de4 <SendData+0x84>
    {
      DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_OFF;
 8010dd0:	4b08      	ldr	r3, [pc, #32]	; (8010df4 <SendData+0x94>)
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	749a      	strb	r2, [r3, #18]
      (Notification_Data_Buffer[0])-=1;
 8010dd6:	4b08      	ldr	r3, [pc, #32]	; (8010df8 <SendData+0x98>)
 8010dd8:	781b      	ldrb	r3, [r3, #0]
 8010dda:	3b01      	subs	r3, #1
 8010ddc:	b2da      	uxtb	r2, r3
 8010dde:	4b06      	ldr	r3, [pc, #24]	; (8010df8 <SendData+0x98>)
 8010de0:	701a      	strb	r2, [r3, #0]
 8010de2:	e7c1      	b.n	8010d68 <SendData+0x8>
    }
    else
    {
//      UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_TRANSFER_UPDATE_ID, CFG_SCH_PRIO_0);
    	osThreadFlagsSet( DataTransferProcessId, 1 );
 8010de4:	4b05      	ldr	r3, [pc, #20]	; (8010dfc <SendData+0x9c>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	2101      	movs	r1, #1
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7fa fc18 	bl	800b620 <osThreadFlagsSet>
	  {
 8010df0:	e7ba      	b.n	8010d68 <SendData+0x8>
 8010df2:	bf00      	nop
 8010df4:	20006fdc 	.word	0x20006fdc
 8010df8:	20006b24 	.word	0x20006b24
 8010dfc:	20006fc0 	.word	0x20006fc0

08010e00 <Resume_Notification>:
  }
	  }
//  return;
}
void Resume_Notification(void)
{
 8010e00:	b480      	push	{r7}
 8010e02:	af00      	add	r7, sp, #0
  DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_ON;
 8010e04:	4b03      	ldr	r3, [pc, #12]	; (8010e14 <Resume_Notification+0x14>)
 8010e06:	2201      	movs	r2, #1
 8010e08:	749a      	strb	r2, [r3, #18]
}
 8010e0a:	bf00      	nop
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr
 8010e14:	20006fdc 	.word	0x20006fdc

08010e18 <BLE_App_Delay_DataThroughput>:
//  Appli_UpdateButtonState(BSP_PB_GetState(BUTTON_SW3) == BUTTON_PRESSED);
	  }
}

void BLE_App_Delay_DataThroughput(void * argument)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b088      	sub	sp, #32
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	  for(;;)
	  {
	    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8010e20:	f04f 32ff 	mov.w	r2, #4294967295
 8010e24:	2100      	movs	r1, #0
 8010e26:	2001      	movs	r0, #1
 8010e28:	f7fa fc5c 	bl	800b6e4 <osThreadFlagsWait>
  uint32_t DataThroughput;
  DTS_STM_Payload_t ThroughputToSend; 
  
  DataThroughput = (uint32_t)(DataReceived/TIMEUNIT);
 8010e2c:	4b0a      	ldr	r3, [pc, #40]	; (8010e58 <BLE_App_Delay_DataThroughput+0x40>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	61fb      	str	r3, [r7, #28]
  APP_DBG_MSG("DataThroughput = %ld  bytes/s\n", DataThroughput);
 8010e32:	69fb      	ldr	r3, [r7, #28]
 8010e34:	4619      	mov	r1, r3
 8010e36:	4809      	ldr	r0, [pc, #36]	; (8010e5c <BLE_App_Delay_DataThroughput+0x44>)
 8010e38:	f000 ff00 	bl	8011c3c <iprintf>
  
  ThroughputToSend.Length = 4;
 8010e3c:	2304      	movs	r3, #4
 8010e3e:	61bb      	str	r3, [r7, #24]
  ThroughputToSend.pPayload = (uint8_t*)&DataThroughput;
 8010e40:	f107 031c 	add.w	r3, r7, #28
 8010e44:	60fb      	str	r3, [r7, #12]
  
  DTS_STM_UpdateCharThroughput( (DTS_STM_Payload_t*) &ThroughputToSend);  
 8010e46:	f107 030c 	add.w	r3, r7, #12
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f000 f9cc 	bl	80111e8 <DTS_STM_UpdateCharThroughput>
  DataReceived = 0;
 8010e50:	4b01      	ldr	r3, [pc, #4]	; (8010e58 <BLE_App_Delay_DataThroughput+0x40>)
 8010e52:	2200      	movs	r2, #0
 8010e54:	601a      	str	r2, [r3, #0]
	  {
 8010e56:	e7e3      	b.n	8010e20 <BLE_App_Delay_DataThroughput+0x8>
 8010e58:	20006fd8 	.word	0x20006fd8
 8010e5c:	08013d5c 	.word	0x08013d5c

08010e60 <DTS_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t DTS_Event_Handler( void *Event )
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b090      	sub	sp, #64	; 0x40
 8010e64:	af02      	add	r7, sp, #8
 8010e66:	6078      	str	r0, [r7, #4]
  aci_att_exchange_mtu_resp_event_rp0 * exchange_mtu_resp;
  aci_gatt_write_permit_req_event_rp0 * write_permit_req ;

  DTS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8010e68:	2300      	movs	r3, #0
 8010e6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  event_pckt = (hci_event_pckt *) (((hci_uart_pckt*) Event)->data);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	3301      	adds	r3, #1
 8010e72:	633b      	str	r3, [r7, #48]	; 0x30

  switch (event_pckt->evt)
 8010e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e76:	781b      	ldrb	r3, [r3, #0]
 8010e78:	2bff      	cmp	r3, #255	; 0xff
 8010e7a:	d000      	beq.n	8010e7e <DTS_Event_Handler+0x1e>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8010e7c:	e0d4      	b.n	8011028 <DTS_Event_Handler+0x1c8>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8010e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e80:	3302      	adds	r3, #2
 8010e82:	62fb      	str	r3, [r7, #44]	; 0x2c
      switch (blue_evt->ecode)
 8010e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e86:	881b      	ldrh	r3, [r3, #0]
 8010e88:	b29b      	uxth	r3, r3
 8010e8a:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 8010e8e:	2b15      	cmp	r3, #21
 8010e90:	f200 80c6 	bhi.w	8011020 <DTS_Event_Handler+0x1c0>
 8010e94:	a201      	add	r2, pc, #4	; (adr r2, 8010e9c <DTS_Event_Handler+0x3c>)
 8010e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e9a:	bf00      	nop
 8010e9c:	08010f27 	.word	0x08010f27
 8010ea0:	08011021 	.word	0x08011021
 8010ea4:	08010ef5 	.word	0x08010ef5
 8010ea8:	08011021 	.word	0x08011021
 8010eac:	08011021 	.word	0x08011021
 8010eb0:	08011021 	.word	0x08011021
 8010eb4:	08011021 	.word	0x08011021
 8010eb8:	08011021 	.word	0x08011021
 8010ebc:	08011021 	.word	0x08011021
 8010ec0:	08011021 	.word	0x08011021
 8010ec4:	08011021 	.word	0x08011021
 8010ec8:	08011021 	.word	0x08011021
 8010ecc:	08011021 	.word	0x08011021
 8010ed0:	08011021 	.word	0x08011021
 8010ed4:	08011021 	.word	0x08011021
 8010ed8:	08011021 	.word	0x08011021
 8010edc:	08011021 	.word	0x08011021
 8010ee0:	08011021 	.word	0x08011021
 8010ee4:	08010ff3 	.word	0x08010ff3
 8010ee8:	08011021 	.word	0x08011021
 8010eec:	08011021 	.word	0x08011021
 8010ef0:	08010fed 	.word	0x08010fed
        	 BSP_LED_On(LED_BLUE);
 8010ef4:	2000      	movs	r0, #0
 8010ef6:	f7f1 fc07 	bl	8002708 <BSP_LED_On>
          APP_DBG_MSG("EVT_BLUE_ATT_EXCHANGE_MTU_RESP \n");
 8010efa:	484e      	ldr	r0, [pc, #312]	; (8011034 <DTS_Event_Handler+0x1d4>)
 8010efc:	f000 ff12 	bl	8011d24 <puts>
          exchange_mtu_resp = (aci_att_exchange_mtu_resp_event_rp0 *)blue_evt->data;
 8010f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f02:	3302      	adds	r3, #2
 8010f04:	627b      	str	r3, [r7, #36]	; 0x24
          APP_DBG_MSG("MTU_size = %d \n",exchange_mtu_resp->Server_RX_MTU );
 8010f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f08:	885b      	ldrh	r3, [r3, #2]
 8010f0a:	b29b      	uxth	r3, r3
 8010f0c:	4619      	mov	r1, r3
 8010f0e:	484a      	ldr	r0, [pc, #296]	; (8011038 <DTS_Event_Handler+0x1d8>)
 8010f10:	f000 fe94 	bl	8011c3c <iprintf>
          Att_Mtu_Exchanged = exchange_mtu_resp->Server_RX_MTU;
 8010f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f16:	885b      	ldrh	r3, [r3, #2]
 8010f18:	b29a      	uxth	r2, r3
 8010f1a:	4b48      	ldr	r3, [pc, #288]	; (801103c <DTS_Event_Handler+0x1dc>)
 8010f1c:	801a      	strh	r2, [r3, #0]
     	 BSP_LED_On(LED_GREEN);
 8010f1e:	2001      	movs	r0, #1
 8010f20:	f7f1 fbf2 	bl	8002708 <BSP_LED_On>
          break;
 8010f24:	e07f      	b.n	8011026 <DTS_Event_Handler+0x1c6>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*) blue_evt->data;
 8010f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f28:	3302      	adds	r3, #2
 8010f2a:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (aDataTransferContext.DataTransferTxCharHdle + 2))
 8010f2c:	6a3b      	ldr	r3, [r7, #32]
 8010f2e:	885b      	ldrh	r3, [r3, #2]
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	461a      	mov	r2, r3
 8010f34:	4b42      	ldr	r3, [pc, #264]	; (8011040 <DTS_Event_Handler+0x1e0>)
 8010f36:	885b      	ldrh	r3, [r3, #2]
 8010f38:	3302      	adds	r3, #2
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	d11a      	bne.n	8010f74 <DTS_Event_Handler+0x114>
            if (attribute_modified->Attr_Data[0] & DTS_STM_NOTIFICATION_MASK)
 8010f3e:	6a3b      	ldr	r3, [r7, #32]
 8010f40:	7a1b      	ldrb	r3, [r3, #8]
 8010f42:	f003 0301 	and.w	r3, r3, #1
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d00a      	beq.n	8010f60 <DTS_Event_Handler+0x100>
              APP_DBG_MSG("notification enabled\n");
 8010f4a:	483e      	ldr	r0, [pc, #248]	; (8011044 <DTS_Event_Handler+0x1e4>)
 8010f4c:	f000 feea 	bl	8011d24 <puts>
              Notification.Evt_Opcode = DTS_STM__NOTIFICATION_ENABLED;
 8010f50:	2300      	movs	r3, #0
 8010f52:	737b      	strb	r3, [r7, #13]
              DTS_Notification(&Notification);
 8010f54:	f107 030c 	add.w	r3, r7, #12
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f7ff fe9f 	bl	8010c9c <DTS_Notification>
 8010f5e:	e009      	b.n	8010f74 <DTS_Event_Handler+0x114>
              APP_DBG_MSG("notification disabled\n");
 8010f60:	4839      	ldr	r0, [pc, #228]	; (8011048 <DTS_Event_Handler+0x1e8>)
 8010f62:	f000 fedf 	bl	8011d24 <puts>
              Notification.Evt_Opcode = DTS_STM_NOTIFICATION_DISABLED;
 8010f66:	2301      	movs	r3, #1
 8010f68:	737b      	strb	r3, [r7, #13]
              DTS_Notification(&Notification);
 8010f6a:	f107 030c 	add.w	r3, r7, #12
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f7ff fe94 	bl	8010c9c <DTS_Notification>
          if (attribute_modified->Attr_Handle == (aDataTransferContext.DataTransferTxChar3Hdle + 5))
 8010f74:	6a3b      	ldr	r3, [r7, #32]
 8010f76:	885b      	ldrh	r3, [r3, #2]
 8010f78:	b29b      	uxth	r3, r3
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	4b30      	ldr	r3, [pc, #192]	; (8011040 <DTS_Event_Handler+0x1e0>)
 8010f7e:	88db      	ldrh	r3, [r3, #6]
 8010f80:	3305      	adds	r3, #5
 8010f82:	429a      	cmp	r2, r3
 8010f84:	d11a      	bne.n	8010fbc <DTS_Event_Handler+0x15c>
            if (attribute_modified->Attr_Data[0] & DTS_STM_NOTIFICATION_MASK)
 8010f86:	6a3b      	ldr	r3, [r7, #32]
 8010f88:	7a1b      	ldrb	r3, [r3, #8]
 8010f8a:	f003 0301 	and.w	r3, r3, #1
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d00a      	beq.n	8010fa8 <DTS_Event_Handler+0x148>
              APP_DBG_MSG("notification enabled\n");
 8010f92:	482c      	ldr	r0, [pc, #176]	; (8011044 <DTS_Event_Handler+0x1e4>)
 8010f94:	f000 fec6 	bl	8011d24 <puts>
              Notification.Evt_Opcode = DTC_NOTIFICATION_ENABLED;
 8010f98:	2303      	movs	r3, #3
 8010f9a:	737b      	strb	r3, [r7, #13]
              DTS_Notification(&Notification);
 8010f9c:	f107 030c 	add.w	r3, r7, #12
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f7ff fe7b 	bl	8010c9c <DTS_Notification>
 8010fa6:	e009      	b.n	8010fbc <DTS_Event_Handler+0x15c>
              APP_DBG_MSG("notification disabled\n");
 8010fa8:	4827      	ldr	r0, [pc, #156]	; (8011048 <DTS_Event_Handler+0x1e8>)
 8010faa:	f000 febb 	bl	8011d24 <puts>
              Notification.Evt_Opcode = DTC_NOTIFICATION_DISABLED;
 8010fae:	2304      	movs	r3, #4
 8010fb0:	737b      	strb	r3, [r7, #13]
              DTS_Notification(&Notification);
 8010fb2:	f107 030c 	add.w	r3, r7, #12
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7ff fe70 	bl	8010c9c <DTS_Notification>
          if(attribute_modified->Attr_Handle == (aDataTransferContext.DataTransferRxCharHdle + 1))
 8010fbc:	6a3b      	ldr	r3, [r7, #32]
 8010fbe:	885b      	ldrh	r3, [r3, #2]
 8010fc0:	b29b      	uxth	r3, r3
 8010fc2:	461a      	mov	r2, r3
 8010fc4:	4b1e      	ldr	r3, [pc, #120]	; (8011040 <DTS_Event_Handler+0x1e0>)
 8010fc6:	889b      	ldrh	r3, [r3, #4]
 8010fc8:	3301      	adds	r3, #1
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d12a      	bne.n	8011024 <DTS_Event_Handler+0x1c4>
            return_value = SVCCTL_EvtAckFlowEnable;
 8010fce:	2301      	movs	r3, #1
 8010fd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            Notification.Evt_Opcode = DTS_STM_DATA_RECEIVED;
 8010fd4:	2305      	movs	r3, #5
 8010fd6:	737b      	strb	r3, [r7, #13]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8010fd8:	6a3b      	ldr	r3, [r7, #32]
 8010fda:	88db      	ldrh	r3, [r3, #6]
 8010fdc:	b29b      	uxth	r3, r3
 8010fde:	61fb      	str	r3, [r7, #28]
            DTS_Notification(&Notification); 
 8010fe0:	f107 030c 	add.w	r3, r7, #12
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f7ff fe59 	bl	8010c9c <DTS_Notification>
          break;
 8010fea:	e01b      	b.n	8011024 <DTS_Event_Handler+0x1c4>
          Resume_Notification();
 8010fec:	f7ff ff08 	bl	8010e00 <Resume_Notification>
          break; 
 8010ff0:	e019      	b.n	8011026 <DTS_Event_Handler+0x1c6>
        APP_DBG_MSG("write permit req\r\n");
 8010ff2:	4816      	ldr	r0, [pc, #88]	; (801104c <DTS_Event_Handler+0x1ec>)
 8010ff4:	f000 fe96 	bl	8011d24 <puts>
        write_permit_req = (aci_gatt_write_permit_req_event_rp0 *) blue_evt->data;
 8010ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffa:	3302      	adds	r3, #2
 8010ffc:	62bb      	str	r3, [r7, #40]	; 0x28
        aci_gatt_write_resp( write_permit_req->Connection_Handle, write_permit_req->Attribute_Handle, 0, 0, write_permit_req->Data_Length, write_permit_req->Data);        
 8010ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011000:	881b      	ldrh	r3, [r3, #0]
 8011002:	b298      	uxth	r0, r3
 8011004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011006:	885b      	ldrh	r3, [r3, #2]
 8011008:	b299      	uxth	r1, r3
 801100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801100c:	791b      	ldrb	r3, [r3, #4]
 801100e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011010:	3205      	adds	r2, #5
 8011012:	9201      	str	r2, [sp, #4]
 8011014:	9300      	str	r3, [sp, #0]
 8011016:	2300      	movs	r3, #0
 8011018:	2200      	movs	r2, #0
 801101a:	f7f7 fd23 	bl	8008a64 <aci_gatt_write_resp>
        break;
 801101e:	e002      	b.n	8011026 <DTS_Event_Handler+0x1c6>
          break;
 8011020:	bf00      	nop
 8011022:	e000      	b.n	8011026 <DTS_Event_Handler+0x1c6>
          break;
 8011024:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 8011026:	bf00      	nop
  }

  return (return_value);
 8011028:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}/* end SVCCTL_EvtAckStatus_t */
 801102c:	4618      	mov	r0, r3
 801102e:	3738      	adds	r7, #56	; 0x38
 8011030:	46bd      	mov	sp, r7
 8011032:	bd80      	pop	{r7, pc}
 8011034:	08013d7c 	.word	0x08013d7c
 8011038:	08013d9c 	.word	0x08013d9c
 801103c:	20006fc8 	.word	0x20006fc8
 8011040:	20006c14 	.word	0x20006c14
 8011044:	08013dac 	.word	0x08013dac
 8011048:	08013dc4 	.word	0x08013dc4
 801104c:	08013ddc 	.word	0x08013ddc

08011050 <TX_Update_Char>:
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * @param  pFeatureValue: The address of the new value to be written
 * @retval None
 */
static tBleStatus TX_Update_Char( DTS_STM_Payload_t *pDataValue )
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b086      	sub	sp, #24
 8011054:	af02      	add	r7, sp, #8
 8011056:	6078      	str	r0, [r7, #4]
  tBleStatus ret;

  /**
   *  Notification Data Transfer Packet
   */
  ret = aci_gatt_update_char_value(
 8011058:	4b0a      	ldr	r3, [pc, #40]	; (8011084 <TX_Update_Char+0x34>)
 801105a:	8818      	ldrh	r0, [r3, #0]
 801105c:	4b09      	ldr	r3, [pc, #36]	; (8011084 <TX_Update_Char+0x34>)
 801105e:	8859      	ldrh	r1, [r3, #2]
                                   aDataTransferContext.DataTransferSvcHdle,
                                   aDataTransferContext.DataTransferTxCharHdle,
                                   0, /* charValOffset */
                                   pDataValue->Length, /* charValueLen */
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	68db      	ldr	r3, [r3, #12]
  ret = aci_gatt_update_char_value(
 8011064:	b2da      	uxtb	r2, r3
                                   (uint8_t *) pDataValue->pPayload);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
  ret = aci_gatt_update_char_value(
 801106a:	9300      	str	r3, [sp, #0]
 801106c:	4613      	mov	r3, r2
 801106e:	2200      	movs	r2, #0
 8011070:	f7f7 faff 	bl	8008672 <aci_gatt_update_char_value>
 8011074:	4603      	mov	r3, r0
 8011076:	73fb      	strb	r3, [r7, #15]

  return ret;
 8011078:	7bfb      	ldrb	r3, [r7, #15]
}/* end TX_Update_Char() */
 801107a:	4618      	mov	r0, r3
 801107c:	3710      	adds	r7, #16
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}
 8011082:	bf00      	nop
 8011084:	20006c14 	.word	0x20006c14

08011088 <DTS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DTS_STM_Init( void )
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b088      	sub	sp, #32
 801108c:	af06      	add	r7, sp, #24
  tBleStatus hciCmdResult = BLE_STATUS_FAILED;
 801108e:	2341      	movs	r3, #65	; 0x41
 8011090:	71fb      	strb	r3, [r7, #7]

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(DTS_Event_Handler);
 8011092:	483c      	ldr	r0, [pc, #240]	; (8011184 <DTS_STM_Init+0xfc>)
 8011094:	f7f8 f936 	bl	8009304 <SVCCTL_RegisterSvcHandler>

  /* DT service and characteristics */
  hciCmdResult = aci_gatt_add_service(DT_UUID_LENGTH, (Service_UUID_t *) DT_REQ_SERV_UUID,
 8011098:	4b3b      	ldr	r3, [pc, #236]	; (8011188 <DTS_STM_Init+0x100>)
 801109a:	9300      	str	r3, [sp, #0]
 801109c:	230a      	movs	r3, #10
 801109e:	2201      	movs	r2, #1
 80110a0:	493a      	ldr	r1, [pc, #232]	; (801118c <DTS_STM_Init+0x104>)
 80110a2:	2002      	movs	r0, #2
 80110a4:	f7f7 f94c 	bl	8008340 <aci_gatt_add_service>
 80110a8:	4603      	mov	r3, r0
 80110aa:	71fb      	strb	r3, [r7, #7]
  PRIMARY_SERVICE,
                                      10, &(aDataTransferContext.DataTransferSvcHdle));
  if (hciCmdResult != 0)
 80110ac:	79fb      	ldrb	r3, [r7, #7]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d007      	beq.n	80110c2 <DTS_STM_Init+0x3a>
  {
    APP_DBG_MSG("error add service 0x%x\n", hciCmdResult);
 80110b2:	79fb      	ldrb	r3, [r7, #7]
 80110b4:	4619      	mov	r1, r3
 80110b6:	4836      	ldr	r0, [pc, #216]	; (8011190 <DTS_STM_Init+0x108>)
 80110b8:	f000 fdc0 	bl	8011c3c <iprintf>
    BSP_LED_On(LED_RED);
 80110bc:	2002      	movs	r0, #2
 80110be:	f7f1 fb23 	bl	8002708 <BSP_LED_On>
  }

  /**
   *  Add Data Transfer TX Characteristic
   */
  hciCmdResult = aci_gatt_add_char(aDataTransferContext.DataTransferSvcHdle,
 80110c2:	4b31      	ldr	r3, [pc, #196]	; (8011188 <DTS_STM_Init+0x100>)
 80110c4:	8818      	ldrh	r0, [r3, #0]
 80110c6:	4b33      	ldr	r3, [pc, #204]	; (8011194 <DTS_STM_Init+0x10c>)
 80110c8:	9305      	str	r3, [sp, #20]
 80110ca:	2301      	movs	r3, #1
 80110cc:	9304      	str	r3, [sp, #16]
 80110ce:	230a      	movs	r3, #10
 80110d0:	9303      	str	r3, [sp, #12]
 80110d2:	2300      	movs	r3, #0
 80110d4:	9302      	str	r3, [sp, #8]
 80110d6:	2300      	movs	r3, #0
 80110d8:	9301      	str	r3, [sp, #4]
 80110da:	2310      	movs	r3, #16
 80110dc:	9300      	str	r3, [sp, #0]
 80110de:	23ff      	movs	r3, #255	; 0xff
 80110e0:	4a2d      	ldr	r2, [pc, #180]	; (8011198 <DTS_STM_Init+0x110>)
 80110e2:	2102      	movs	r1, #2
 80110e4:	f7f7 f9db 	bl	800849e <aci_gatt_add_char>
 80110e8:	4603      	mov	r3, r0
 80110ea:	71fb      	strb	r3, [r7, #7]
                    ATTR_PERMISSION_NONE,
                    GATT_DONT_NOTIFY_EVENTS, /* gattEvtMask */
                    10, /* encryKeySize */
                    1, /* isVariable */
                    &(aDataTransferContext.DataTransferTxCharHdle));
  if (hciCmdResult != 0)
 80110ec:	79fb      	ldrb	r3, [r7, #7]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d007      	beq.n	8011102 <DTS_STM_Init+0x7a>
  {
    APP_DBG_MSG("error add char Tx 0x%x\n", hciCmdResult);
 80110f2:	79fb      	ldrb	r3, [r7, #7]
 80110f4:	4619      	mov	r1, r3
 80110f6:	4829      	ldr	r0, [pc, #164]	; (801119c <DTS_STM_Init+0x114>)
 80110f8:	f000 fda0 	bl	8011c3c <iprintf>
    BSP_LED_On(LED_RED);
 80110fc:	2002      	movs	r0, #2
 80110fe:	f7f1 fb03 	bl	8002708 <BSP_LED_On>
  }

  /**
   *  Add Data Transfer RX Characteristic
   */
  hciCmdResult = aci_gatt_add_char(aDataTransferContext.DataTransferSvcHdle,
 8011102:	4b21      	ldr	r3, [pc, #132]	; (8011188 <DTS_STM_Init+0x100>)
 8011104:	8818      	ldrh	r0, [r3, #0]
 8011106:	4b26      	ldr	r3, [pc, #152]	; (80111a0 <DTS_STM_Init+0x118>)
 8011108:	9305      	str	r3, [sp, #20]
 801110a:	2301      	movs	r3, #1
 801110c:	9304      	str	r3, [sp, #16]
 801110e:	230a      	movs	r3, #10
 8011110:	9303      	str	r3, [sp, #12]
 8011112:	2301      	movs	r3, #1
 8011114:	9302      	str	r3, [sp, #8]
 8011116:	2300      	movs	r3, #0
 8011118:	9301      	str	r3, [sp, #4]
 801111a:	2304      	movs	r3, #4
 801111c:	9300      	str	r3, [sp, #0]
 801111e:	23ff      	movs	r3, #255	; 0xff
 8011120:	4a20      	ldr	r2, [pc, #128]	; (80111a4 <DTS_STM_Init+0x11c>)
 8011122:	2102      	movs	r1, #2
 8011124:	f7f7 f9bb 	bl	800849e <aci_gatt_add_char>
 8011128:	4603      	mov	r3, r0
 801112a:	71fb      	strb	r3, [r7, #7]
                    ATTR_PERMISSION_NONE,
                    GATT_NOTIFY_ATTRIBUTE_WRITE, //GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP, /* gattEvtMask */
                    10, /* encryKeySize */
                    1, /* isVariable */
                    &(aDataTransferContext.DataTransferRxCharHdle));
  if (hciCmdResult != 0)
 801112c:	79fb      	ldrb	r3, [r7, #7]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d005      	beq.n	801113e <DTS_STM_Init+0xb6>
  {
    APP_DBG_MSG("error add char Tx\n");
 8011132:	481d      	ldr	r0, [pc, #116]	; (80111a8 <DTS_STM_Init+0x120>)
 8011134:	f000 fdf6 	bl	8011d24 <puts>
    BSP_LED_On(LED_RED);
 8011138:	2002      	movs	r0, #2
 801113a:	f7f1 fae5 	bl	8002708 <BSP_LED_On>
  }
  
  /**
   *  Add Data Transfer TX Characteristic
   */
  hciCmdResult = aci_gatt_add_char(aDataTransferContext.DataTransferSvcHdle,
 801113e:	4b12      	ldr	r3, [pc, #72]	; (8011188 <DTS_STM_Init+0x100>)
 8011140:	8818      	ldrh	r0, [r3, #0]
 8011142:	4b1a      	ldr	r3, [pc, #104]	; (80111ac <DTS_STM_Init+0x124>)
 8011144:	9305      	str	r3, [sp, #20]
 8011146:	2301      	movs	r3, #1
 8011148:	9304      	str	r3, [sp, #16]
 801114a:	230a      	movs	r3, #10
 801114c:	9303      	str	r3, [sp, #12]
 801114e:	2300      	movs	r3, #0
 8011150:	9302      	str	r3, [sp, #8]
 8011152:	2300      	movs	r3, #0
 8011154:	9301      	str	r3, [sp, #4]
 8011156:	2310      	movs	r3, #16
 8011158:	9300      	str	r3, [sp, #0]
 801115a:	23ff      	movs	r3, #255	; 0xff
 801115c:	4a14      	ldr	r2, [pc, #80]	; (80111b0 <DTS_STM_Init+0x128>)
 801115e:	2102      	movs	r1, #2
 8011160:	f7f7 f99d 	bl	800849e <aci_gatt_add_char>
 8011164:	4603      	mov	r3, r0
 8011166:	71fb      	strb	r3, [r7, #7]
                    ATTR_PERMISSION_NONE,
                    GATT_DONT_NOTIFY_EVENTS, /* gattEvtMask */
                    10, /* encryKeySize */
                    1, /* isVariable */
                    &(aDataTransferContext.DataTransferTxChar3Hdle));
  if (hciCmdResult != 0)
 8011168:	79fb      	ldrb	r3, [r7, #7]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d006      	beq.n	801117c <DTS_STM_Init+0xf4>
  {
    APP_DBG_MSG("error add char Tx\n");
 801116e:	480e      	ldr	r0, [pc, #56]	; (80111a8 <DTS_STM_Init+0x120>)
 8011170:	f000 fdd8 	bl	8011d24 <puts>
    BSP_LED_On(LED_RED);
 8011174:	2002      	movs	r0, #2
 8011176:	f7f1 fac7 	bl	8002708 <BSP_LED_On>
  }
  
  return;
 801117a:	bf00      	nop
 801117c:	bf00      	nop
}
 801117e:	3708      	adds	r7, #8
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}
 8011184:	08010e61 	.word	0x08010e61
 8011188:	20006c14 	.word	0x20006c14
 801118c:	080141fc 	.word	0x080141fc
 8011190:	08013df0 	.word	0x08013df0
 8011194:	20006c16 	.word	0x20006c16
 8011198:	080141cc 	.word	0x080141cc
 801119c:	08013e08 	.word	0x08013e08
 80111a0:	20006c18 	.word	0x20006c18
 80111a4:	080141dc 	.word	0x080141dc
 80111a8:	08013e20 	.word	0x08013e20
 80111ac:	20006c1a 	.word	0x20006c1a
 80111b0:	080141ec 	.word	0x080141ec

080111b4 <DTS_STM_UpdateChar>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus DTS_STM_UpdateChar( uint16_t UUID , uint8_t *pPayload )
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b084      	sub	sp, #16
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	4603      	mov	r3, r0
 80111bc:	6039      	str	r1, [r7, #0]
 80111be:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 80111c0:	2342      	movs	r3, #66	; 0x42
 80111c2:	73fb      	strb	r3, [r7, #15]
  switch (UUID)
 80111c4:	88fb      	ldrh	r3, [r7, #6]
 80111c6:	f64f 6281 	movw	r2, #65153	; 0xfe81
 80111ca:	4293      	cmp	r3, r2
 80111cc:	d000      	beq.n	80111d0 <DTS_STM_UpdateChar+0x1c>
    case DATA_TRANSFER_TX_CHAR_UUID:
      result = TX_Update_Char((DTS_STM_Payload_t*) pPayload);
      break;

    default:
      break;
 80111ce:	e005      	b.n	80111dc <DTS_STM_UpdateChar+0x28>
      result = TX_Update_Char((DTS_STM_Payload_t*) pPayload);
 80111d0:	6838      	ldr	r0, [r7, #0]
 80111d2:	f7ff ff3d 	bl	8011050 <TX_Update_Char>
 80111d6:	4603      	mov	r3, r0
 80111d8:	73fb      	strb	r3, [r7, #15]
      break;
 80111da:	bf00      	nop
  }
  return result;
 80111dc:	7bfb      	ldrb	r3, [r7, #15]
}/* end DTS_STM_UpdateChar() */
 80111de:	4618      	mov	r0, r3
 80111e0:	3710      	adds	r7, #16
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bd80      	pop	{r7, pc}
	...

080111e8 <DTS_STM_UpdateCharThroughput>:

tBleStatus DTS_STM_UpdateCharThroughput(DTS_STM_Payload_t *pDataValue )
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b086      	sub	sp, #24
 80111ec:	af02      	add	r7, sp, #8
 80111ee:	6078      	str	r0, [r7, #4]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 80111f0:	2342      	movs	r3, #66	; 0x42
 80111f2:	73fb      	strb	r3, [r7, #15]
  /**
   *  Notification Data Transfer Packet
   */
  result = aci_gatt_update_char_value(
 80111f4:	4b0a      	ldr	r3, [pc, #40]	; (8011220 <DTS_STM_UpdateCharThroughput+0x38>)
 80111f6:	8818      	ldrh	r0, [r3, #0]
 80111f8:	4b09      	ldr	r3, [pc, #36]	; (8011220 <DTS_STM_UpdateCharThroughput+0x38>)
 80111fa:	88d9      	ldrh	r1, [r3, #6]
                                   aDataTransferContext.DataTransferSvcHdle,
                                   aDataTransferContext.DataTransferTxChar3Hdle,
                                   0, /* charValOffset */
                                   pDataValue->Length, /* charValueLen */
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	68db      	ldr	r3, [r3, #12]
  result = aci_gatt_update_char_value(
 8011200:	b2da      	uxtb	r2, r3
                                   (uint8_t *) pDataValue->pPayload);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	681b      	ldr	r3, [r3, #0]
  result = aci_gatt_update_char_value(
 8011206:	9300      	str	r3, [sp, #0]
 8011208:	4613      	mov	r3, r2
 801120a:	2200      	movs	r2, #0
 801120c:	f7f7 fa31 	bl	8008672 <aci_gatt_update_char_value>
 8011210:	4603      	mov	r3, r0
 8011212:	73fb      	strb	r3, [r7, #15]
  return result;
 8011214:	7bfb      	ldrb	r3, [r7, #15]
}/* end DTS_STM_UpdateChar() */
 8011216:	4618      	mov	r0, r3
 8011218:	3710      	adds	r7, #16
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}
 801121e:	bf00      	nop
 8011220:	20006c14 	.word	0x20006c14

08011224 <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	781b      	ldrb	r3, [r3, #0]
 8011230:	2b01      	cmp	r3, #1
 8011232:	d00e      	beq.n	8011252 <P2PS_STM_App_Notification+0x2e>
 8011234:	2b03      	cmp	r3, #3
 8011236:	d016      	beq.n	8011266 <P2PS_STM_App_Notification+0x42>
 8011238:	2b00      	cmp	r3, #0
 801123a:	d000      	beq.n	801123e <P2PS_STM_App_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 801123c:	e037      	b.n	80112ae <P2PS_STM_App_Notification+0x8a>
      P2P_Server_App_Context.Notification_Status = 1;
 801123e:	4b1e      	ldr	r3, [pc, #120]	; (80112b8 <P2PS_STM_App_Notification+0x94>)
 8011240:	2201      	movs	r2, #1
 8011242:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 8011244:	481d      	ldr	r0, [pc, #116]	; (80112bc <P2PS_STM_App_Notification+0x98>)
 8011246:	f000 fd6d 	bl	8011d24 <puts>
      APP_DBG_MSG(" \n\r");
 801124a:	481d      	ldr	r0, [pc, #116]	; (80112c0 <P2PS_STM_App_Notification+0x9c>)
 801124c:	f000 fcf6 	bl	8011c3c <iprintf>
      break;
 8011250:	e02d      	b.n	80112ae <P2PS_STM_App_Notification+0x8a>
      P2P_Server_App_Context.Notification_Status = 0;
 8011252:	4b19      	ldr	r3, [pc, #100]	; (80112b8 <P2PS_STM_App_Notification+0x94>)
 8011254:	2200      	movs	r2, #0
 8011256:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 8011258:	481a      	ldr	r0, [pc, #104]	; (80112c4 <P2PS_STM_App_Notification+0xa0>)
 801125a:	f000 fd63 	bl	8011d24 <puts>
      APP_DBG_MSG(" \n\r");
 801125e:	4818      	ldr	r0, [pc, #96]	; (80112c0 <P2PS_STM_App_Notification+0x9c>)
 8011260:	f000 fcec 	bl	8011c3c <iprintf>
      break;
 8011264:	e023      	b.n	80112ae <P2PS_STM_App_Notification+0x8a>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	685b      	ldr	r3, [r3, #4]
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d11d      	bne.n	80112ac <P2PS_STM_App_Notification+0x88>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	685b      	ldr	r3, [r3, #4]
 8011274:	3301      	adds	r3, #1
 8011276:	781b      	ldrb	r3, [r3, #0]
 8011278:	2b01      	cmp	r3, #1
 801127a:	d108      	bne.n	801128e <P2PS_STM_App_Notification+0x6a>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n"); 
 801127c:	4812      	ldr	r0, [pc, #72]	; (80112c8 <P2PS_STM_App_Notification+0xa4>)
 801127e:	f000 fd51 	bl	8011d24 <puts>
          APP_DBG_MSG(" \n\r");
 8011282:	480f      	ldr	r0, [pc, #60]	; (80112c0 <P2PS_STM_App_Notification+0x9c>)
 8011284:	f000 fcda 	bl	8011c3c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8011288:	4b0b      	ldr	r3, [pc, #44]	; (80112b8 <P2PS_STM_App_Notification+0x94>)
 801128a:	2201      	movs	r2, #1
 801128c:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	685b      	ldr	r3, [r3, #4]
 8011292:	3301      	adds	r3, #1
 8011294:	781b      	ldrb	r3, [r3, #0]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d108      	bne.n	80112ac <P2PS_STM_App_Notification+0x88>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n"); 
 801129a:	480c      	ldr	r0, [pc, #48]	; (80112cc <P2PS_STM_App_Notification+0xa8>)
 801129c:	f000 fd42 	bl	8011d24 <puts>
          APP_DBG_MSG(" \n\r");
 80112a0:	4807      	ldr	r0, [pc, #28]	; (80112c0 <P2PS_STM_App_Notification+0x9c>)
 80112a2:	f000 fccb 	bl	8011c3c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 80112a6:	4b04      	ldr	r3, [pc, #16]	; (80112b8 <P2PS_STM_App_Notification+0x94>)
 80112a8:	2200      	movs	r2, #0
 80112aa:	709a      	strb	r2, [r3, #2]
      break;
 80112ac:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 80112ae:	bf00      	nop
}
 80112b0:	3708      	adds	r7, #8
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}
 80112b6:	bf00      	nop
 80112b8:	20000228 	.word	0x20000228
 80112bc:	08013e34 	.word	0x08013e34
 80112c0:	08013e68 	.word	0x08013e68
 80112c4:	08013e6c 	.word	0x08013e6c
 80112c8:	08013ea0 	.word	0x08013ea0
 80112cc:	08013ec8 	.word	0x08013ec8

080112d0 <LL_PWR_EnableBootC2>:
{
 80112d0:	b480      	push	{r7}
 80112d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80112d4:	4b05      	ldr	r3, [pc, #20]	; (80112ec <LL_PWR_EnableBootC2+0x1c>)
 80112d6:	68db      	ldr	r3, [r3, #12]
 80112d8:	4a04      	ldr	r2, [pc, #16]	; (80112ec <LL_PWR_EnableBootC2+0x1c>)
 80112da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80112de:	60d3      	str	r3, [r2, #12]
}
 80112e0:	bf00      	nop
 80112e2:	46bd      	mov	sp, r7
 80112e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e8:	4770      	bx	lr
 80112ea:	bf00      	nop
 80112ec:	58000400 	.word	0x58000400

080112f0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80112f0:	b480      	push	{r7}
 80112f2:	b083      	sub	sp, #12
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80112f8:	4b06      	ldr	r3, [pc, #24]	; (8011314 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80112fa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80112fe:	4905      	ldr	r1, [pc, #20]	; (8011314 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	4313      	orrs	r3, r2
 8011304:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8011308:	bf00      	nop
 801130a:	370c      	adds	r7, #12
 801130c:	46bd      	mov	sp, r7
 801130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011312:	4770      	bx	lr
 8011314:	58000800 	.word	0x58000800

08011318 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8011318:	b480      	push	{r7}
 801131a:	b083      	sub	sp, #12
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8011320:	4b05      	ldr	r3, [pc, #20]	; (8011338 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8011322:	6a1a      	ldr	r2, [r3, #32]
 8011324:	4904      	ldr	r1, [pc, #16]	; (8011338 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	4313      	orrs	r3, r2
 801132a:	620b      	str	r3, [r1, #32]
}
 801132c:	bf00      	nop
 801132e:	370c      	adds	r7, #12
 8011330:	46bd      	mov	sp, r7
 8011332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011336:	4770      	bx	lr
 8011338:	58000800 	.word	0x58000800

0801133c <LL_AHB3_GRP1_EnableClock>:
{
 801133c:	b480      	push	{r7}
 801133e:	b085      	sub	sp, #20
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8011344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011348:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801134a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	4313      	orrs	r3, r2
 8011352:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8011354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011358:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	4013      	ands	r3, r2
 801135e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011360:	68fb      	ldr	r3, [r7, #12]
}
 8011362:	bf00      	nop
 8011364:	3714      	adds	r7, #20
 8011366:	46bd      	mov	sp, r7
 8011368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136c:	4770      	bx	lr

0801136e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 801136e:	b480      	push	{r7}
 8011370:	b085      	sub	sp, #20
 8011372:	af00      	add	r7, sp, #0
 8011374:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8011376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801137a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 801137e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	4313      	orrs	r3, r2
 8011386:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 801138a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801138e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	4013      	ands	r3, r2
 8011396:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011398:	68fb      	ldr	r3, [r7, #12]
}
 801139a:	bf00      	nop
 801139c:	3714      	adds	r7, #20
 801139e:	46bd      	mov	sp, r7
 80113a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a4:	4770      	bx	lr

080113a6 <LL_C1_IPCC_EnableIT_TXF>:
{
 80113a6:	b480      	push	{r7}
 80113a8:	b083      	sub	sp, #12
 80113aa:	af00      	add	r7, sp, #0
 80113ac:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	601a      	str	r2, [r3, #0]
}
 80113ba:	bf00      	nop
 80113bc:	370c      	adds	r7, #12
 80113be:	46bd      	mov	sp, r7
 80113c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c4:	4770      	bx	lr

080113c6 <LL_C1_IPCC_EnableIT_RXO>:
{
 80113c6:	b480      	push	{r7}
 80113c8:	b083      	sub	sp, #12
 80113ca:	af00      	add	r7, sp, #0
 80113cc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	f043 0201 	orr.w	r2, r3, #1
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	601a      	str	r2, [r3, #0]
}
 80113da:	bf00      	nop
 80113dc:	370c      	adds	r7, #12
 80113de:	46bd      	mov	sp, r7
 80113e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e4:	4770      	bx	lr

080113e6 <LL_C1_IPCC_EnableTransmitChannel>:
{
 80113e6:	b480      	push	{r7}
 80113e8:	b083      	sub	sp, #12
 80113ea:	af00      	add	r7, sp, #0
 80113ec:	6078      	str	r0, [r7, #4]
 80113ee:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	685a      	ldr	r2, [r3, #4]
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	041b      	lsls	r3, r3, #16
 80113f8:	43db      	mvns	r3, r3
 80113fa:	401a      	ands	r2, r3
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	605a      	str	r2, [r3, #4]
}
 8011400:	bf00      	nop
 8011402:	370c      	adds	r7, #12
 8011404:	46bd      	mov	sp, r7
 8011406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140a:	4770      	bx	lr

0801140c <LL_C1_IPCC_DisableTransmitChannel>:
{
 801140c:	b480      	push	{r7}
 801140e:	b083      	sub	sp, #12
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
 8011414:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	685a      	ldr	r2, [r3, #4]
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	041b      	lsls	r3, r3, #16
 801141e:	431a      	orrs	r2, r3
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	605a      	str	r2, [r3, #4]
}
 8011424:	bf00      	nop
 8011426:	370c      	adds	r7, #12
 8011428:	46bd      	mov	sp, r7
 801142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142e:	4770      	bx	lr

08011430 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8011430:	b480      	push	{r7}
 8011432:	b083      	sub	sp, #12
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	685a      	ldr	r2, [r3, #4]
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	43db      	mvns	r3, r3
 8011442:	401a      	ands	r2, r3
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	605a      	str	r2, [r3, #4]
}
 8011448:	bf00      	nop
 801144a:	370c      	adds	r7, #12
 801144c:	46bd      	mov	sp, r7
 801144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011452:	4770      	bx	lr

08011454 <LL_C1_IPCC_DisableReceiveChannel>:
{
 8011454:	b480      	push	{r7}
 8011456:	b083      	sub	sp, #12
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
 801145c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	685a      	ldr	r2, [r3, #4]
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	431a      	orrs	r2, r3
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	605a      	str	r2, [r3, #4]
}
 801146a:	bf00      	nop
 801146c:	370c      	adds	r7, #12
 801146e:	46bd      	mov	sp, r7
 8011470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011474:	4770      	bx	lr

08011476 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8011476:	b480      	push	{r7}
 8011478:	b083      	sub	sp, #12
 801147a:	af00      	add	r7, sp, #0
 801147c:	6078      	str	r0, [r7, #4]
 801147e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	683a      	ldr	r2, [r7, #0]
 8011484:	609a      	str	r2, [r3, #8]
}
 8011486:	bf00      	nop
 8011488:	370c      	adds	r7, #12
 801148a:	46bd      	mov	sp, r7
 801148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011490:	4770      	bx	lr

08011492 <LL_C1_IPCC_SetFlag_CHx>:
{
 8011492:	b480      	push	{r7}
 8011494:	b083      	sub	sp, #12
 8011496:	af00      	add	r7, sp, #0
 8011498:	6078      	str	r0, [r7, #4]
 801149a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	041a      	lsls	r2, r3, #16
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	609a      	str	r2, [r3, #8]
}
 80114a4:	bf00      	nop
 80114a6:	370c      	adds	r7, #12
 80114a8:	46bd      	mov	sp, r7
 80114aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ae:	4770      	bx	lr

080114b0 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80114b0:	b480      	push	{r7}
 80114b2:	b083      	sub	sp, #12
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
 80114b8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	68da      	ldr	r2, [r3, #12]
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	4013      	ands	r3, r2
 80114c2:	683a      	ldr	r2, [r7, #0]
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d101      	bne.n	80114cc <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80114c8:	2301      	movs	r3, #1
 80114ca:	e000      	b.n	80114ce <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80114cc:	2300      	movs	r3, #0
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	370c      	adds	r7, #12
 80114d2:	46bd      	mov	sp, r7
 80114d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d8:	4770      	bx	lr

080114da <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80114da:	b480      	push	{r7}
 80114dc:	b083      	sub	sp, #12
 80114de:	af00      	add	r7, sp, #0
 80114e0:	6078      	str	r0, [r7, #4]
 80114e2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	69da      	ldr	r2, [r3, #28]
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	4013      	ands	r3, r2
 80114ec:	683a      	ldr	r2, [r7, #0]
 80114ee:	429a      	cmp	r2, r3
 80114f0:	d101      	bne.n	80114f6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80114f2:	2301      	movs	r3, #1
 80114f4:	e000      	b.n	80114f8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80114f6:	2300      	movs	r3, #0
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	370c      	adds	r7, #12
 80114fc:	46bd      	mov	sp, r7
 80114fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011502:	4770      	bx	lr

08011504 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8011504:	b580      	push	{r7, lr}
 8011506:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8011508:	2102      	movs	r1, #2
 801150a:	482a      	ldr	r0, [pc, #168]	; (80115b4 <HW_IPCC_Rx_Handler+0xb0>)
 801150c:	f7ff ffe5 	bl	80114da <LL_C2_IPCC_IsActiveFlag_CHx>
 8011510:	4603      	mov	r3, r0
 8011512:	2b00      	cmp	r3, #0
 8011514:	d009      	beq.n	801152a <HW_IPCC_Rx_Handler+0x26>
 8011516:	4b27      	ldr	r3, [pc, #156]	; (80115b4 <HW_IPCC_Rx_Handler+0xb0>)
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	43db      	mvns	r3, r3
 801151c:	f003 0302 	and.w	r3, r3, #2
 8011520:	2b00      	cmp	r3, #0
 8011522:	d002      	beq.n	801152a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8011524:	f000 f91e 	bl	8011764 <HW_IPCC_SYS_EvtHandler>
 8011528:	e041      	b.n	80115ae <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 801152a:	2104      	movs	r1, #4
 801152c:	4821      	ldr	r0, [pc, #132]	; (80115b4 <HW_IPCC_Rx_Handler+0xb0>)
 801152e:	f7ff ffd4 	bl	80114da <LL_C2_IPCC_IsActiveFlag_CHx>
 8011532:	4603      	mov	r3, r0
 8011534:	2b00      	cmp	r3, #0
 8011536:	d009      	beq.n	801154c <HW_IPCC_Rx_Handler+0x48>
 8011538:	4b1e      	ldr	r3, [pc, #120]	; (80115b4 <HW_IPCC_Rx_Handler+0xb0>)
 801153a:	685b      	ldr	r3, [r3, #4]
 801153c:	43db      	mvns	r3, r3
 801153e:	f003 0304 	and.w	r3, r3, #4
 8011542:	2b00      	cmp	r3, #0
 8011544:	d002      	beq.n	801154c <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8011546:	f000 f967 	bl	8011818 <HW_IPCC_THREAD_NotEvtHandler>
 801154a:	e030      	b.n	80115ae <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 801154c:	2110      	movs	r1, #16
 801154e:	4819      	ldr	r0, [pc, #100]	; (80115b4 <HW_IPCC_Rx_Handler+0xb0>)
 8011550:	f7ff ffc3 	bl	80114da <LL_C2_IPCC_IsActiveFlag_CHx>
 8011554:	4603      	mov	r3, r0
 8011556:	2b00      	cmp	r3, #0
 8011558:	d009      	beq.n	801156e <HW_IPCC_Rx_Handler+0x6a>
 801155a:	4b16      	ldr	r3, [pc, #88]	; (80115b4 <HW_IPCC_Rx_Handler+0xb0>)
 801155c:	685b      	ldr	r3, [r3, #4]
 801155e:	43db      	mvns	r3, r3
 8011560:	f003 0310 	and.w	r3, r3, #16
 8011564:	2b00      	cmp	r3, #0
 8011566:	d002      	beq.n	801156e <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8011568:	f000 f962 	bl	8011830 <HW_IPCC_THREAD_CliNotEvtHandler>
 801156c:	e01f      	b.n	80115ae <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 801156e:	2101      	movs	r1, #1
 8011570:	4810      	ldr	r0, [pc, #64]	; (80115b4 <HW_IPCC_Rx_Handler+0xb0>)
 8011572:	f7ff ffb2 	bl	80114da <LL_C2_IPCC_IsActiveFlag_CHx>
 8011576:	4603      	mov	r3, r0
 8011578:	2b00      	cmp	r3, #0
 801157a:	d008      	beq.n	801158e <HW_IPCC_Rx_Handler+0x8a>
 801157c:	4b0d      	ldr	r3, [pc, #52]	; (80115b4 <HW_IPCC_Rx_Handler+0xb0>)
 801157e:	685b      	ldr	r3, [r3, #4]
 8011580:	f003 0301 	and.w	r3, r3, #1
 8011584:	2b00      	cmp	r3, #0
 8011586:	d102      	bne.n	801158e <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8011588:	f000 f8b0 	bl	80116ec <HW_IPCC_BLE_EvtHandler>
 801158c:	e00f      	b.n	80115ae <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 801158e:	2108      	movs	r1, #8
 8011590:	4808      	ldr	r0, [pc, #32]	; (80115b4 <HW_IPCC_Rx_Handler+0xb0>)
 8011592:	f7ff ffa2 	bl	80114da <LL_C2_IPCC_IsActiveFlag_CHx>
 8011596:	4603      	mov	r3, r0
 8011598:	2b00      	cmp	r3, #0
 801159a:	d009      	beq.n	80115b0 <HW_IPCC_Rx_Handler+0xac>
 801159c:	4b05      	ldr	r3, [pc, #20]	; (80115b4 <HW_IPCC_Rx_Handler+0xb0>)
 801159e:	685b      	ldr	r3, [r3, #4]
 80115a0:	43db      	mvns	r3, r3
 80115a2:	f003 0308 	and.w	r3, r3, #8
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d002      	beq.n	80115b0 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 80115aa:	f000 f98d 	bl	80118c8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80115ae:	bf00      	nop
 80115b0:	bf00      	nop
}
 80115b2:	bd80      	pop	{r7, pc}
 80115b4:	58000c00 	.word	0x58000c00

080115b8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80115bc:	2102      	movs	r1, #2
 80115be:	482b      	ldr	r0, [pc, #172]	; (801166c <HW_IPCC_Tx_Handler+0xb4>)
 80115c0:	f7ff ff76 	bl	80114b0 <LL_C1_IPCC_IsActiveFlag_CHx>
 80115c4:	4603      	mov	r3, r0
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d109      	bne.n	80115de <HW_IPCC_Tx_Handler+0x26>
 80115ca:	4b28      	ldr	r3, [pc, #160]	; (801166c <HW_IPCC_Tx_Handler+0xb4>)
 80115cc:	685b      	ldr	r3, [r3, #4]
 80115ce:	43db      	mvns	r3, r3
 80115d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d002      	beq.n	80115de <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80115d8:	f000 f8b8 	bl	801174c <HW_IPCC_SYS_CmdEvtHandler>
 80115dc:	e042      	b.n	8011664 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 80115de:	2104      	movs	r1, #4
 80115e0:	4822      	ldr	r0, [pc, #136]	; (801166c <HW_IPCC_Tx_Handler+0xb4>)
 80115e2:	f7ff ff65 	bl	80114b0 <LL_C1_IPCC_IsActiveFlag_CHx>
 80115e6:	4603      	mov	r3, r0
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d109      	bne.n	8011600 <HW_IPCC_Tx_Handler+0x48>
 80115ec:	4b1f      	ldr	r3, [pc, #124]	; (801166c <HW_IPCC_Tx_Handler+0xb4>)
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	43db      	mvns	r3, r3
 80115f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d002      	beq.n	8011600 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 80115fa:	f000 f901 	bl	8011800 <HW_IPCC_OT_CmdEvtHandler>
 80115fe:	e031      	b.n	8011664 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8011600:	2102      	movs	r1, #2
 8011602:	481a      	ldr	r0, [pc, #104]	; (801166c <HW_IPCC_Tx_Handler+0xb4>)
 8011604:	f7ff ff54 	bl	80114b0 <LL_C1_IPCC_IsActiveFlag_CHx>
 8011608:	4603      	mov	r3, r0
 801160a:	2b00      	cmp	r3, #0
 801160c:	d109      	bne.n	8011622 <HW_IPCC_Tx_Handler+0x6a>
 801160e:	4b17      	ldr	r3, [pc, #92]	; (801166c <HW_IPCC_Tx_Handler+0xb4>)
 8011610:	685b      	ldr	r3, [r3, #4]
 8011612:	43db      	mvns	r3, r3
 8011614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011618:	2b00      	cmp	r3, #0
 801161a:	d002      	beq.n	8011622 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 801161c:	f000 f896 	bl	801174c <HW_IPCC_SYS_CmdEvtHandler>
 8011620:	e020      	b.n	8011664 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8011622:	2108      	movs	r1, #8
 8011624:	4811      	ldr	r0, [pc, #68]	; (801166c <HW_IPCC_Tx_Handler+0xb4>)
 8011626:	f7ff ff43 	bl	80114b0 <LL_C1_IPCC_IsActiveFlag_CHx>
 801162a:	4603      	mov	r3, r0
 801162c:	2b00      	cmp	r3, #0
 801162e:	d109      	bne.n	8011644 <HW_IPCC_Tx_Handler+0x8c>
 8011630:	4b0e      	ldr	r3, [pc, #56]	; (801166c <HW_IPCC_Tx_Handler+0xb4>)
 8011632:	685b      	ldr	r3, [r3, #4]
 8011634:	43db      	mvns	r3, r3
 8011636:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801163a:	2b00      	cmp	r3, #0
 801163c:	d002      	beq.n	8011644 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 801163e:	f000 f925 	bl	801188c <HW_IPCC_MM_FreeBufHandler>
 8011642:	e00f      	b.n	8011664 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8011644:	2120      	movs	r1, #32
 8011646:	4809      	ldr	r0, [pc, #36]	; (801166c <HW_IPCC_Tx_Handler+0xb4>)
 8011648:	f7ff ff32 	bl	80114b0 <LL_C1_IPCC_IsActiveFlag_CHx>
 801164c:	4603      	mov	r3, r0
 801164e:	2b00      	cmp	r3, #0
 8011650:	d109      	bne.n	8011666 <HW_IPCC_Tx_Handler+0xae>
 8011652:	4b06      	ldr	r3, [pc, #24]	; (801166c <HW_IPCC_Tx_Handler+0xb4>)
 8011654:	685b      	ldr	r3, [r3, #4]
 8011656:	43db      	mvns	r3, r3
 8011658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801165c:	2b00      	cmp	r3, #0
 801165e:	d002      	beq.n	8011666 <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8011660:	f000 f850 	bl	8011704 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8011664:	bf00      	nop
 8011666:	bf00      	nop
}
 8011668:	bd80      	pop	{r7, pc}
 801166a:	bf00      	nop
 801166c:	58000c00 	.word	0x58000c00

08011670 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8011670:	b580      	push	{r7, lr}
 8011672:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8011674:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8011678:	f7ff fe79 	bl	801136e <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 801167c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011680:	f7ff fe36 	bl	80112f0 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8011684:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011688:	f7ff fe46 	bl	8011318 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 801168c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801168e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8011690:	f7ff fe1e 	bl	80112d0 <LL_PWR_EnableBootC2>

  return;
 8011694:	bf00      	nop
}
 8011696:	bd80      	pop	{r7, pc}

08011698 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8011698:	b580      	push	{r7, lr}
 801169a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 801169c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80116a0:	f7ff fe4c 	bl	801133c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80116a4:	4806      	ldr	r0, [pc, #24]	; (80116c0 <HW_IPCC_Init+0x28>)
 80116a6:	f7ff fe8e 	bl	80113c6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80116aa:	4805      	ldr	r0, [pc, #20]	; (80116c0 <HW_IPCC_Init+0x28>)
 80116ac:	f7ff fe7b 	bl	80113a6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80116b0:	202c      	movs	r0, #44	; 0x2c
 80116b2:	f7f1 ff76 	bl	80035a2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80116b6:	202d      	movs	r0, #45	; 0x2d
 80116b8:	f7f1 ff73 	bl	80035a2 <HAL_NVIC_EnableIRQ>

  return;
 80116bc:	bf00      	nop
}
 80116be:	bd80      	pop	{r7, pc}
 80116c0:	58000c00 	.word	0x58000c00

080116c4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80116c8:	2101      	movs	r1, #1
 80116ca:	4802      	ldr	r0, [pc, #8]	; (80116d4 <HW_IPCC_BLE_Init+0x10>)
 80116cc:	f7ff feb0 	bl	8011430 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80116d0:	bf00      	nop
}
 80116d2:	bd80      	pop	{r7, pc}
 80116d4:	58000c00 	.word	0x58000c00

080116d8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80116dc:	2101      	movs	r1, #1
 80116de:	4802      	ldr	r0, [pc, #8]	; (80116e8 <HW_IPCC_BLE_SendCmd+0x10>)
 80116e0:	f7ff fed7 	bl	8011492 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80116e4:	bf00      	nop
}
 80116e6:	bd80      	pop	{r7, pc}
 80116e8:	58000c00 	.word	0x58000c00

080116ec <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80116f0:	f7f8 fb28 	bl	8009d44 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80116f4:	2101      	movs	r1, #1
 80116f6:	4802      	ldr	r0, [pc, #8]	; (8011700 <HW_IPCC_BLE_EvtHandler+0x14>)
 80116f8:	f7ff febd 	bl	8011476 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80116fc:	bf00      	nop
}
 80116fe:	bd80      	pop	{r7, pc}
 8011700:	58000c00 	.word	0x58000c00

08011704 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8011704:	b580      	push	{r7, lr}
 8011706:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8011708:	2120      	movs	r1, #32
 801170a:	4803      	ldr	r0, [pc, #12]	; (8011718 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 801170c:	f7ff fe7e 	bl	801140c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8011710:	f7f8 fb48 	bl	8009da4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8011714:	bf00      	nop
}
 8011716:	bd80      	pop	{r7, pc}
 8011718:	58000c00 	.word	0x58000c00

0801171c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 801171c:	b580      	push	{r7, lr}
 801171e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8011720:	2102      	movs	r1, #2
 8011722:	4802      	ldr	r0, [pc, #8]	; (801172c <HW_IPCC_SYS_Init+0x10>)
 8011724:	f7ff fe84 	bl	8011430 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011728:	bf00      	nop
}
 801172a:	bd80      	pop	{r7, pc}
 801172c:	58000c00 	.word	0x58000c00

08011730 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8011730:	b580      	push	{r7, lr}
 8011732:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011734:	2102      	movs	r1, #2
 8011736:	4804      	ldr	r0, [pc, #16]	; (8011748 <HW_IPCC_SYS_SendCmd+0x18>)
 8011738:	f7ff feab 	bl	8011492 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801173c:	2102      	movs	r1, #2
 801173e:	4802      	ldr	r0, [pc, #8]	; (8011748 <HW_IPCC_SYS_SendCmd+0x18>)
 8011740:	f7ff fe51 	bl	80113e6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8011744:	bf00      	nop
}
 8011746:	bd80      	pop	{r7, pc}
 8011748:	58000c00 	.word	0x58000c00

0801174c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 801174c:	b580      	push	{r7, lr}
 801174e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011750:	2102      	movs	r1, #2
 8011752:	4803      	ldr	r0, [pc, #12]	; (8011760 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8011754:	f7ff fe5a 	bl	801140c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8011758:	f7f8 fb74 	bl	8009e44 <HW_IPCC_SYS_CmdEvtNot>

  return;
 801175c:	bf00      	nop
}
 801175e:	bd80      	pop	{r7, pc}
 8011760:	58000c00 	.word	0x58000c00

08011764 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8011764:	b580      	push	{r7, lr}
 8011766:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8011768:	f7f8 fb82 	bl	8009e70 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 801176c:	2102      	movs	r1, #2
 801176e:	4802      	ldr	r0, [pc, #8]	; (8011778 <HW_IPCC_SYS_EvtHandler+0x14>)
 8011770:	f7ff fe81 	bl	8011476 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8011774:	bf00      	nop
}
 8011776:	bd80      	pop	{r7, pc}
 8011778:	58000c00 	.word	0x58000c00

0801177c <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 801177c:	b580      	push	{r7, lr}
 801177e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8011780:	2104      	movs	r1, #4
 8011782:	4804      	ldr	r0, [pc, #16]	; (8011794 <HW_IPCC_THREAD_Init+0x18>)
 8011784:	f7ff fe54 	bl	8011430 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8011788:	2110      	movs	r1, #16
 801178a:	4802      	ldr	r0, [pc, #8]	; (8011794 <HW_IPCC_THREAD_Init+0x18>)
 801178c:	f7ff fe50 	bl	8011430 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011790:	bf00      	nop
}
 8011792:	bd80      	pop	{r7, pc}
 8011794:	58000c00 	.word	0x58000c00

08011798 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8011798:	b580      	push	{r7, lr}
 801179a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 801179c:	2104      	movs	r1, #4
 801179e:	4804      	ldr	r0, [pc, #16]	; (80117b0 <HW_IPCC_OT_SendCmd+0x18>)
 80117a0:	f7ff fe77 	bl	8011492 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 80117a4:	2104      	movs	r1, #4
 80117a6:	4802      	ldr	r0, [pc, #8]	; (80117b0 <HW_IPCC_OT_SendCmd+0x18>)
 80117a8:	f7ff fe1d 	bl	80113e6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80117ac:	bf00      	nop
}
 80117ae:	bd80      	pop	{r7, pc}
 80117b0:	58000c00 	.word	0x58000c00

080117b4 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 80117b8:	2110      	movs	r1, #16
 80117ba:	4802      	ldr	r0, [pc, #8]	; (80117c4 <HW_IPCC_CLI_SendCmd+0x10>)
 80117bc:	f7ff fe69 	bl	8011492 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80117c0:	bf00      	nop
}
 80117c2:	bd80      	pop	{r7, pc}
 80117c4:	58000c00 	.word	0x58000c00

080117c8 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80117cc:	2104      	movs	r1, #4
 80117ce:	4804      	ldr	r0, [pc, #16]	; (80117e0 <HW_IPCC_THREAD_SendAck+0x18>)
 80117d0:	f7ff fe51 	bl	8011476 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80117d4:	2104      	movs	r1, #4
 80117d6:	4802      	ldr	r0, [pc, #8]	; (80117e0 <HW_IPCC_THREAD_SendAck+0x18>)
 80117d8:	f7ff fe2a 	bl	8011430 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80117dc:	bf00      	nop
}
 80117de:	bd80      	pop	{r7, pc}
 80117e0:	58000c00 	.word	0x58000c00

080117e4 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80117e8:	2110      	movs	r1, #16
 80117ea:	4804      	ldr	r0, [pc, #16]	; (80117fc <HW_IPCC_THREAD_CliSendAck+0x18>)
 80117ec:	f7ff fe43 	bl	8011476 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80117f0:	2110      	movs	r1, #16
 80117f2:	4802      	ldr	r0, [pc, #8]	; (80117fc <HW_IPCC_THREAD_CliSendAck+0x18>)
 80117f4:	f7ff fe1c 	bl	8011430 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80117f8:	bf00      	nop
}
 80117fa:	bd80      	pop	{r7, pc}
 80117fc:	58000c00 	.word	0x58000c00

08011800 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8011800:	b580      	push	{r7, lr}
 8011802:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8011804:	2104      	movs	r1, #4
 8011806:	4803      	ldr	r0, [pc, #12]	; (8011814 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8011808:	f7ff fe00 	bl	801140c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 801180c:	f7f8 fba6 	bl	8009f5c <HW_IPCC_OT_CmdEvtNot>

  return;
 8011810:	bf00      	nop
}
 8011812:	bd80      	pop	{r7, pc}
 8011814:	58000c00 	.word	0x58000c00

08011818 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8011818:	b580      	push	{r7, lr}
 801181a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 801181c:	2104      	movs	r1, #4
 801181e:	4803      	ldr	r0, [pc, #12]	; (801182c <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8011820:	f7ff fe18 	bl	8011454 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8011824:	f7f8 fba6 	bl	8009f74 <HW_IPCC_THREAD_EvtNot>

  return;
 8011828:	bf00      	nop
}
 801182a:	bd80      	pop	{r7, pc}
 801182c:	58000c00 	.word	0x58000c00

08011830 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8011830:	b580      	push	{r7, lr}
 8011832:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8011834:	2110      	movs	r1, #16
 8011836:	4803      	ldr	r0, [pc, #12]	; (8011844 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8011838:	f7ff fe0c 	bl	8011454 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 801183c:	f7f8 fba6 	bl	8009f8c <HW_IPCC_THREAD_CliEvtNot>

  return;
 8011840:	bf00      	nop
}
 8011842:	bd80      	pop	{r7, pc}
 8011844:	58000c00 	.word	0x58000c00

08011848 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b082      	sub	sp, #8
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8011850:	2108      	movs	r1, #8
 8011852:	480c      	ldr	r0, [pc, #48]	; (8011884 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8011854:	f7ff fe2c 	bl	80114b0 <LL_C1_IPCC_IsActiveFlag_CHx>
 8011858:	4603      	mov	r3, r0
 801185a:	2b00      	cmp	r3, #0
 801185c:	d007      	beq.n	801186e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801185e:	4a0a      	ldr	r2, [pc, #40]	; (8011888 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011864:	2108      	movs	r1, #8
 8011866:	4807      	ldr	r0, [pc, #28]	; (8011884 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8011868:	f7ff fdbd 	bl	80113e6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 801186c:	e006      	b.n	801187c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011872:	2108      	movs	r1, #8
 8011874:	4803      	ldr	r0, [pc, #12]	; (8011884 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8011876:	f7ff fe0c 	bl	8011492 <LL_C1_IPCC_SetFlag_CHx>
  return;
 801187a:	bf00      	nop
}
 801187c:	3708      	adds	r7, #8
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}
 8011882:	bf00      	nop
 8011884:	58000c00 	.word	0x58000c00
 8011888:	20006c1c 	.word	0x20006c1c

0801188c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 801188c:	b580      	push	{r7, lr}
 801188e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011890:	2108      	movs	r1, #8
 8011892:	4806      	ldr	r0, [pc, #24]	; (80118ac <HW_IPCC_MM_FreeBufHandler+0x20>)
 8011894:	f7ff fdba 	bl	801140c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8011898:	4b05      	ldr	r3, [pc, #20]	; (80118b0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801189e:	2108      	movs	r1, #8
 80118a0:	4802      	ldr	r0, [pc, #8]	; (80118ac <HW_IPCC_MM_FreeBufHandler+0x20>)
 80118a2:	f7ff fdf6 	bl	8011492 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80118a6:	bf00      	nop
}
 80118a8:	bd80      	pop	{r7, pc}
 80118aa:	bf00      	nop
 80118ac:	58000c00 	.word	0x58000c00
 80118b0:	20006c1c 	.word	0x20006c1c

080118b4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80118b8:	2108      	movs	r1, #8
 80118ba:	4802      	ldr	r0, [pc, #8]	; (80118c4 <HW_IPCC_TRACES_Init+0x10>)
 80118bc:	f7ff fdb8 	bl	8011430 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80118c0:	bf00      	nop
}
 80118c2:	bd80      	pop	{r7, pc}
 80118c4:	58000c00 	.word	0x58000c00

080118c8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80118cc:	f7f8 fbf0 	bl	800a0b0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80118d0:	2108      	movs	r1, #8
 80118d2:	4802      	ldr	r0, [pc, #8]	; (80118dc <HW_IPCC_TRACES_EvtHandler+0x14>)
 80118d4:	f7ff fdcf 	bl	8011476 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80118d8:	bf00      	nop
}
 80118da:	bd80      	pop	{r7, pc}
 80118dc:	58000c00 	.word	0x58000c00

080118e0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80118e0:	b480      	push	{r7}
 80118e2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80118e4:	4b05      	ldr	r3, [pc, #20]	; (80118fc <UTIL_LPM_Init+0x1c>)
 80118e6:	2200      	movs	r2, #0
 80118e8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80118ea:	4b05      	ldr	r3, [pc, #20]	; (8011900 <UTIL_LPM_Init+0x20>)
 80118ec:	2200      	movs	r2, #0
 80118ee:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80118f0:	bf00      	nop
 80118f2:	46bd      	mov	sp, r7
 80118f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f8:	4770      	bx	lr
 80118fa:	bf00      	nop
 80118fc:	20006c20 	.word	0x20006c20
 8011900:	20006c24 	.word	0x20006c24

08011904 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8011904:	b480      	push	{r7}
 8011906:	b087      	sub	sp, #28
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
 801190c:	460b      	mov	r3, r1
 801190e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011910:	f3ef 8310 	mrs	r3, PRIMASK
 8011914:	613b      	str	r3, [r7, #16]
  return(result);
 8011916:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8011918:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801191a:	b672      	cpsid	i
  
  switch(state)
 801191c:	78fb      	ldrb	r3, [r7, #3]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d009      	beq.n	8011936 <UTIL_LPM_SetOffMode+0x32>
 8011922:	2b01      	cmp	r3, #1
 8011924:	d000      	beq.n	8011928 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 8011926:	e00e      	b.n	8011946 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8011928:	4b0c      	ldr	r3, [pc, #48]	; (801195c <UTIL_LPM_SetOffMode+0x58>)
 801192a:	681a      	ldr	r2, [r3, #0]
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	4313      	orrs	r3, r2
 8011930:	4a0a      	ldr	r2, [pc, #40]	; (801195c <UTIL_LPM_SetOffMode+0x58>)
 8011932:	6013      	str	r3, [r2, #0]
      break;
 8011934:	e007      	b.n	8011946 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	43da      	mvns	r2, r3
 801193a:	4b08      	ldr	r3, [pc, #32]	; (801195c <UTIL_LPM_SetOffMode+0x58>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	4013      	ands	r3, r2
 8011940:	4a06      	ldr	r2, [pc, #24]	; (801195c <UTIL_LPM_SetOffMode+0x58>)
 8011942:	6013      	str	r3, [r2, #0]
      break;
 8011944:	bf00      	nop
 8011946:	697b      	ldr	r3, [r7, #20]
 8011948:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011950:	bf00      	nop
 8011952:	371c      	adds	r7, #28
 8011954:	46bd      	mov	sp, r7
 8011956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195a:	4770      	bx	lr
 801195c:	20006c24 	.word	0x20006c24

08011960 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8011960:	b580      	push	{r7, lr}
 8011962:	b08c      	sub	sp, #48	; 0x30
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8011968:	4b65      	ldr	r3, [pc, #404]	; (8011b00 <UTIL_SEQ_Run+0x1a0>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801196e:	4b64      	ldr	r3, [pc, #400]	; (8011b00 <UTIL_SEQ_Run+0x1a0>)
 8011970:	681a      	ldr	r2, [r3, #0]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	4013      	ands	r3, r2
 8011976:	4a62      	ldr	r2, [pc, #392]	; (8011b00 <UTIL_SEQ_Run+0x1a0>)
 8011978:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801197a:	e081      	b.n	8011a80 <UTIL_SEQ_Run+0x120>
  {
    counter = 0U;
 801197c:	2300      	movs	r3, #0
 801197e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8011980:	e002      	b.n	8011988 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 8011982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011984:	3301      	adds	r3, #1
 8011986:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8011988:	4a5e      	ldr	r2, [pc, #376]	; (8011b04 <UTIL_SEQ_Run+0x1a4>)
 801198a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801198c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011990:	4b5d      	ldr	r3, [pc, #372]	; (8011b08 <UTIL_SEQ_Run+0x1a8>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	401a      	ands	r2, r3
 8011996:	4b5a      	ldr	r3, [pc, #360]	; (8011b00 <UTIL_SEQ_Run+0x1a0>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	4013      	ands	r3, r2
 801199c:	2b00      	cmp	r3, #0
 801199e:	d0f0      	beq.n	8011982 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80119a0:	4a58      	ldr	r2, [pc, #352]	; (8011b04 <UTIL_SEQ_Run+0x1a4>)
 80119a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80119a8:	4b57      	ldr	r3, [pc, #348]	; (8011b08 <UTIL_SEQ_Run+0x1a8>)
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	401a      	ands	r2, r3
 80119ae:	4b54      	ldr	r3, [pc, #336]	; (8011b00 <UTIL_SEQ_Run+0x1a0>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	4013      	ands	r3, r2
 80119b4:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80119b6:	4a53      	ldr	r2, [pc, #332]	; (8011b04 <UTIL_SEQ_Run+0x1a4>)
 80119b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ba:	00db      	lsls	r3, r3, #3
 80119bc:	4413      	add	r3, r2
 80119be:	685a      	ldr	r2, [r3, #4]
 80119c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c2:	4013      	ands	r3, r2
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d106      	bne.n	80119d6 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80119c8:	4a4e      	ldr	r2, [pc, #312]	; (8011b04 <UTIL_SEQ_Run+0x1a4>)
 80119ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119cc:	00db      	lsls	r3, r3, #3
 80119ce:	4413      	add	r3, r2
 80119d0:	f04f 32ff 	mov.w	r2, #4294967295
 80119d4:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80119d6:	4a4b      	ldr	r2, [pc, #300]	; (8011b04 <UTIL_SEQ_Run+0x1a4>)
 80119d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119da:	00db      	lsls	r3, r3, #3
 80119dc:	4413      	add	r3, r2
 80119de:	685a      	ldr	r2, [r3, #4]
 80119e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e2:	4013      	ands	r3, r2
 80119e4:	4618      	mov	r0, r3
 80119e6:	f000 f8b1 	bl	8011b4c <SEQ_BitPosition>
 80119ea:	4603      	mov	r3, r0
 80119ec:	461a      	mov	r2, r3
 80119ee:	4b47      	ldr	r3, [pc, #284]	; (8011b0c <UTIL_SEQ_Run+0x1ac>)
 80119f0:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80119f2:	4a44      	ldr	r2, [pc, #272]	; (8011b04 <UTIL_SEQ_Run+0x1a4>)
 80119f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f6:	00db      	lsls	r3, r3, #3
 80119f8:	4413      	add	r3, r2
 80119fa:	685a      	ldr	r2, [r3, #4]
 80119fc:	4b43      	ldr	r3, [pc, #268]	; (8011b0c <UTIL_SEQ_Run+0x1ac>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	2101      	movs	r1, #1
 8011a02:	fa01 f303 	lsl.w	r3, r1, r3
 8011a06:	43db      	mvns	r3, r3
 8011a08:	401a      	ands	r2, r3
 8011a0a:	493e      	ldr	r1, [pc, #248]	; (8011b04 <UTIL_SEQ_Run+0x1a4>)
 8011a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a0e:	00db      	lsls	r3, r3, #3
 8011a10:	440b      	add	r3, r1
 8011a12:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a14:	f3ef 8310 	mrs	r3, PRIMASK
 8011a18:	61bb      	str	r3, [r7, #24]
  return(result);
 8011a1a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011a1c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8011a1e:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8011a20:	4b3a      	ldr	r3, [pc, #232]	; (8011b0c <UTIL_SEQ_Run+0x1ac>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	2201      	movs	r2, #1
 8011a26:	fa02 f303 	lsl.w	r3, r2, r3
 8011a2a:	43da      	mvns	r2, r3
 8011a2c:	4b38      	ldr	r3, [pc, #224]	; (8011b10 <UTIL_SEQ_Run+0x1b0>)
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	4013      	ands	r3, r2
 8011a32:	4a37      	ldr	r2, [pc, #220]	; (8011b10 <UTIL_SEQ_Run+0x1b0>)
 8011a34:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011a36:	2302      	movs	r3, #2
 8011a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a3a:	e013      	b.n	8011a64 <UTIL_SEQ_Run+0x104>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8011a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a3e:	3b01      	subs	r3, #1
 8011a40:	4a30      	ldr	r2, [pc, #192]	; (8011b04 <UTIL_SEQ_Run+0x1a4>)
 8011a42:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8011a46:	4b31      	ldr	r3, [pc, #196]	; (8011b0c <UTIL_SEQ_Run+0x1ac>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	2201      	movs	r2, #1
 8011a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8011a50:	43da      	mvns	r2, r3
 8011a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a54:	3b01      	subs	r3, #1
 8011a56:	400a      	ands	r2, r1
 8011a58:	492a      	ldr	r1, [pc, #168]	; (8011b04 <UTIL_SEQ_Run+0x1a4>)
 8011a5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a60:	3b01      	subs	r3, #1
 8011a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d1e8      	bne.n	8011a3c <UTIL_SEQ_Run+0xdc>
 8011a6a:	6a3b      	ldr	r3, [r7, #32]
 8011a6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a6e:	697b      	ldr	r3, [r7, #20]
 8011a70:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8011a74:	4b25      	ldr	r3, [pc, #148]	; (8011b0c <UTIL_SEQ_Run+0x1ac>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	4a26      	ldr	r2, [pc, #152]	; (8011b14 <UTIL_SEQ_Run+0x1b4>)
 8011a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a7e:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8011a80:	4b23      	ldr	r3, [pc, #140]	; (8011b10 <UTIL_SEQ_Run+0x1b0>)
 8011a82:	681a      	ldr	r2, [r3, #0]
 8011a84:	4b20      	ldr	r3, [pc, #128]	; (8011b08 <UTIL_SEQ_Run+0x1a8>)
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	401a      	ands	r2, r3
 8011a8a:	4b1d      	ldr	r3, [pc, #116]	; (8011b00 <UTIL_SEQ_Run+0x1a0>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	4013      	ands	r3, r2
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d007      	beq.n	8011aa4 <UTIL_SEQ_Run+0x144>
 8011a94:	4b20      	ldr	r3, [pc, #128]	; (8011b18 <UTIL_SEQ_Run+0x1b8>)
 8011a96:	681a      	ldr	r2, [r3, #0]
 8011a98:	4b20      	ldr	r3, [pc, #128]	; (8011b1c <UTIL_SEQ_Run+0x1bc>)
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	4013      	ands	r3, r2
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	f43f af6c 	beq.w	801197c <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8011aa4:	4b19      	ldr	r3, [pc, #100]	; (8011b0c <UTIL_SEQ_Run+0x1ac>)
 8011aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8011aaa:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8011aac:	f000 f83f 	bl	8011b2e <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8011ab4:	613b      	str	r3, [r7, #16]
  return(result);
 8011ab6:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8011ab8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8011aba:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8011abc:	4b14      	ldr	r3, [pc, #80]	; (8011b10 <UTIL_SEQ_Run+0x1b0>)
 8011abe:	681a      	ldr	r2, [r3, #0]
 8011ac0:	4b11      	ldr	r3, [pc, #68]	; (8011b08 <UTIL_SEQ_Run+0x1a8>)
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	401a      	ands	r2, r3
 8011ac6:	4b0e      	ldr	r3, [pc, #56]	; (8011b00 <UTIL_SEQ_Run+0x1a0>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	4013      	ands	r3, r2
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d108      	bne.n	8011ae2 <UTIL_SEQ_Run+0x182>
 8011ad0:	4b11      	ldr	r3, [pc, #68]	; (8011b18 <UTIL_SEQ_Run+0x1b8>)
 8011ad2:	681a      	ldr	r2, [r3, #0]
 8011ad4:	4b11      	ldr	r3, [pc, #68]	; (8011b1c <UTIL_SEQ_Run+0x1bc>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	4013      	ands	r3, r2
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d101      	bne.n	8011ae2 <UTIL_SEQ_Run+0x182>
  {
	UTIL_SEQ_Idle( );
 8011ade:	f000 f81f 	bl	8011b20 <UTIL_SEQ_Idle>
 8011ae2:	69fb      	ldr	r3, [r7, #28]
 8011ae4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 8011aec:	f000 f826 	bl	8011b3c <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8011af0:	4a03      	ldr	r2, [pc, #12]	; (8011b00 <UTIL_SEQ_Run+0x1a0>)
 8011af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011af4:	6013      	str	r3, [r2, #0]

  return;
 8011af6:	bf00      	nop
}
 8011af8:	3730      	adds	r7, #48	; 0x30
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}
 8011afe:	bf00      	nop
 8011b00:	20000024 	.word	0x20000024
 8011b04:	20006cb8 	.word	0x20006cb8
 8011b08:	20000020 	.word	0x20000020
 8011b0c:	20006c34 	.word	0x20006c34
 8011b10:	20006c28 	.word	0x20006c28
 8011b14:	20006c38 	.word	0x20006c38
 8011b18:	20006c2c 	.word	0x20006c2c
 8011b1c:	20006c30 	.word	0x20006c30

08011b20 <UTIL_SEQ_Idle>:
  UTIL_SEQ_Run(~TaskId_bm);
  return;
}

__WEAK void UTIL_SEQ_Idle( void )
{
 8011b20:	b480      	push	{r7}
 8011b22:	af00      	add	r7, sp, #0
  return;
 8011b24:	bf00      	nop
}
 8011b26:	46bd      	mov	sp, r7
 8011b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2c:	4770      	bx	lr

08011b2e <UTIL_SEQ_PreIdle>:

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8011b2e:	b480      	push	{r7}
 8011b30:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8011b32:	bf00      	nop
}
 8011b34:	46bd      	mov	sp, r7
 8011b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3a:	4770      	bx	lr

08011b3c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8011b3c:	b480      	push	{r7}
 8011b3e:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8011b40:	bf00      	nop
}
 8011b42:	46bd      	mov	sp, r7
 8011b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b48:	4770      	bx	lr
	...

08011b4c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8011b4c:	b480      	push	{r7}
 8011b4e:	b085      	sub	sp, #20
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8011b54:	2300      	movs	r3, #0
 8011b56:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	0c1b      	lsrs	r3, r3, #16
 8011b5c:	041b      	lsls	r3, r3, #16
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d104      	bne.n	8011b6c <SEQ_BitPosition+0x20>
 8011b62:	2310      	movs	r3, #16
 8011b64:	73fb      	strb	r3, [r7, #15]
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	041b      	lsls	r3, r3, #16
 8011b6a:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d105      	bne.n	8011b82 <SEQ_BitPosition+0x36>
 8011b76:	7bfb      	ldrb	r3, [r7, #15]
 8011b78:	3308      	adds	r3, #8
 8011b7a:	73fb      	strb	r3, [r7, #15]
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	021b      	lsls	r3, r3, #8
 8011b80:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d105      	bne.n	8011b98 <SEQ_BitPosition+0x4c>
 8011b8c:	7bfb      	ldrb	r3, [r7, #15]
 8011b8e:	3304      	adds	r3, #4
 8011b90:	73fb      	strb	r3, [r7, #15]
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	011b      	lsls	r3, r3, #4
 8011b96:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	0f1b      	lsrs	r3, r3, #28
 8011b9c:	4a07      	ldr	r2, [pc, #28]	; (8011bbc <SEQ_BitPosition+0x70>)
 8011b9e:	5cd2      	ldrb	r2, [r2, r3]
 8011ba0:	7bfb      	ldrb	r3, [r7, #15]
 8011ba2:	4413      	add	r3, r2
 8011ba4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8011ba6:	7bfb      	ldrb	r3, [r7, #15]
 8011ba8:	f1c3 031f 	rsb	r3, r3, #31
 8011bac:	b2db      	uxtb	r3, r3
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3714      	adds	r7, #20
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb8:	4770      	bx	lr
 8011bba:	bf00      	nop
 8011bbc:	0801420c 	.word	0x0801420c

08011bc0 <__errno>:
 8011bc0:	4b01      	ldr	r3, [pc, #4]	; (8011bc8 <__errno+0x8>)
 8011bc2:	6818      	ldr	r0, [r3, #0]
 8011bc4:	4770      	bx	lr
 8011bc6:	bf00      	nop
 8011bc8:	20000028 	.word	0x20000028

08011bcc <__libc_init_array>:
 8011bcc:	b570      	push	{r4, r5, r6, lr}
 8011bce:	4e0d      	ldr	r6, [pc, #52]	; (8011c04 <__libc_init_array+0x38>)
 8011bd0:	4c0d      	ldr	r4, [pc, #52]	; (8011c08 <__libc_init_array+0x3c>)
 8011bd2:	1ba4      	subs	r4, r4, r6
 8011bd4:	10a4      	asrs	r4, r4, #2
 8011bd6:	2500      	movs	r5, #0
 8011bd8:	42a5      	cmp	r5, r4
 8011bda:	d109      	bne.n	8011bf0 <__libc_init_array+0x24>
 8011bdc:	4e0b      	ldr	r6, [pc, #44]	; (8011c0c <__libc_init_array+0x40>)
 8011bde:	4c0c      	ldr	r4, [pc, #48]	; (8011c10 <__libc_init_array+0x44>)
 8011be0:	f001 f97c 	bl	8012edc <_init>
 8011be4:	1ba4      	subs	r4, r4, r6
 8011be6:	10a4      	asrs	r4, r4, #2
 8011be8:	2500      	movs	r5, #0
 8011bea:	42a5      	cmp	r5, r4
 8011bec:	d105      	bne.n	8011bfa <__libc_init_array+0x2e>
 8011bee:	bd70      	pop	{r4, r5, r6, pc}
 8011bf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011bf4:	4798      	blx	r3
 8011bf6:	3501      	adds	r5, #1
 8011bf8:	e7ee      	b.n	8011bd8 <__libc_init_array+0xc>
 8011bfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011bfe:	4798      	blx	r3
 8011c00:	3501      	adds	r5, #1
 8011c02:	e7f2      	b.n	8011bea <__libc_init_array+0x1e>
 8011c04:	080142bc 	.word	0x080142bc
 8011c08:	080142bc 	.word	0x080142bc
 8011c0c:	080142bc 	.word	0x080142bc
 8011c10:	080142c0 	.word	0x080142c0

08011c14 <memcpy>:
 8011c14:	b510      	push	{r4, lr}
 8011c16:	1e43      	subs	r3, r0, #1
 8011c18:	440a      	add	r2, r1
 8011c1a:	4291      	cmp	r1, r2
 8011c1c:	d100      	bne.n	8011c20 <memcpy+0xc>
 8011c1e:	bd10      	pop	{r4, pc}
 8011c20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c28:	e7f7      	b.n	8011c1a <memcpy+0x6>

08011c2a <memset>:
 8011c2a:	4402      	add	r2, r0
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	4293      	cmp	r3, r2
 8011c30:	d100      	bne.n	8011c34 <memset+0xa>
 8011c32:	4770      	bx	lr
 8011c34:	f803 1b01 	strb.w	r1, [r3], #1
 8011c38:	e7f9      	b.n	8011c2e <memset+0x4>
	...

08011c3c <iprintf>:
 8011c3c:	b40f      	push	{r0, r1, r2, r3}
 8011c3e:	4b0a      	ldr	r3, [pc, #40]	; (8011c68 <iprintf+0x2c>)
 8011c40:	b513      	push	{r0, r1, r4, lr}
 8011c42:	681c      	ldr	r4, [r3, #0]
 8011c44:	b124      	cbz	r4, 8011c50 <iprintf+0x14>
 8011c46:	69a3      	ldr	r3, [r4, #24]
 8011c48:	b913      	cbnz	r3, 8011c50 <iprintf+0x14>
 8011c4a:	4620      	mov	r0, r4
 8011c4c:	f000 fa90 	bl	8012170 <__sinit>
 8011c50:	ab05      	add	r3, sp, #20
 8011c52:	9a04      	ldr	r2, [sp, #16]
 8011c54:	68a1      	ldr	r1, [r4, #8]
 8011c56:	9301      	str	r3, [sp, #4]
 8011c58:	4620      	mov	r0, r4
 8011c5a:	f000 fd9b 	bl	8012794 <_vfiprintf_r>
 8011c5e:	b002      	add	sp, #8
 8011c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c64:	b004      	add	sp, #16
 8011c66:	4770      	bx	lr
 8011c68:	20000028 	.word	0x20000028

08011c6c <_puts_r>:
 8011c6c:	b570      	push	{r4, r5, r6, lr}
 8011c6e:	460e      	mov	r6, r1
 8011c70:	4605      	mov	r5, r0
 8011c72:	b118      	cbz	r0, 8011c7c <_puts_r+0x10>
 8011c74:	6983      	ldr	r3, [r0, #24]
 8011c76:	b90b      	cbnz	r3, 8011c7c <_puts_r+0x10>
 8011c78:	f000 fa7a 	bl	8012170 <__sinit>
 8011c7c:	69ab      	ldr	r3, [r5, #24]
 8011c7e:	68ac      	ldr	r4, [r5, #8]
 8011c80:	b913      	cbnz	r3, 8011c88 <_puts_r+0x1c>
 8011c82:	4628      	mov	r0, r5
 8011c84:	f000 fa74 	bl	8012170 <__sinit>
 8011c88:	4b23      	ldr	r3, [pc, #140]	; (8011d18 <_puts_r+0xac>)
 8011c8a:	429c      	cmp	r4, r3
 8011c8c:	d117      	bne.n	8011cbe <_puts_r+0x52>
 8011c8e:	686c      	ldr	r4, [r5, #4]
 8011c90:	89a3      	ldrh	r3, [r4, #12]
 8011c92:	071b      	lsls	r3, r3, #28
 8011c94:	d51d      	bpl.n	8011cd2 <_puts_r+0x66>
 8011c96:	6923      	ldr	r3, [r4, #16]
 8011c98:	b1db      	cbz	r3, 8011cd2 <_puts_r+0x66>
 8011c9a:	3e01      	subs	r6, #1
 8011c9c:	68a3      	ldr	r3, [r4, #8]
 8011c9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011ca2:	3b01      	subs	r3, #1
 8011ca4:	60a3      	str	r3, [r4, #8]
 8011ca6:	b9e9      	cbnz	r1, 8011ce4 <_puts_r+0x78>
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	da2e      	bge.n	8011d0a <_puts_r+0x9e>
 8011cac:	4622      	mov	r2, r4
 8011cae:	210a      	movs	r1, #10
 8011cb0:	4628      	mov	r0, r5
 8011cb2:	f000 f8ad 	bl	8011e10 <__swbuf_r>
 8011cb6:	3001      	adds	r0, #1
 8011cb8:	d011      	beq.n	8011cde <_puts_r+0x72>
 8011cba:	200a      	movs	r0, #10
 8011cbc:	e011      	b.n	8011ce2 <_puts_r+0x76>
 8011cbe:	4b17      	ldr	r3, [pc, #92]	; (8011d1c <_puts_r+0xb0>)
 8011cc0:	429c      	cmp	r4, r3
 8011cc2:	d101      	bne.n	8011cc8 <_puts_r+0x5c>
 8011cc4:	68ac      	ldr	r4, [r5, #8]
 8011cc6:	e7e3      	b.n	8011c90 <_puts_r+0x24>
 8011cc8:	4b15      	ldr	r3, [pc, #84]	; (8011d20 <_puts_r+0xb4>)
 8011cca:	429c      	cmp	r4, r3
 8011ccc:	bf08      	it	eq
 8011cce:	68ec      	ldreq	r4, [r5, #12]
 8011cd0:	e7de      	b.n	8011c90 <_puts_r+0x24>
 8011cd2:	4621      	mov	r1, r4
 8011cd4:	4628      	mov	r0, r5
 8011cd6:	f000 f8ed 	bl	8011eb4 <__swsetup_r>
 8011cda:	2800      	cmp	r0, #0
 8011cdc:	d0dd      	beq.n	8011c9a <_puts_r+0x2e>
 8011cde:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce2:	bd70      	pop	{r4, r5, r6, pc}
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	da04      	bge.n	8011cf2 <_puts_r+0x86>
 8011ce8:	69a2      	ldr	r2, [r4, #24]
 8011cea:	429a      	cmp	r2, r3
 8011cec:	dc06      	bgt.n	8011cfc <_puts_r+0x90>
 8011cee:	290a      	cmp	r1, #10
 8011cf0:	d004      	beq.n	8011cfc <_puts_r+0x90>
 8011cf2:	6823      	ldr	r3, [r4, #0]
 8011cf4:	1c5a      	adds	r2, r3, #1
 8011cf6:	6022      	str	r2, [r4, #0]
 8011cf8:	7019      	strb	r1, [r3, #0]
 8011cfa:	e7cf      	b.n	8011c9c <_puts_r+0x30>
 8011cfc:	4622      	mov	r2, r4
 8011cfe:	4628      	mov	r0, r5
 8011d00:	f000 f886 	bl	8011e10 <__swbuf_r>
 8011d04:	3001      	adds	r0, #1
 8011d06:	d1c9      	bne.n	8011c9c <_puts_r+0x30>
 8011d08:	e7e9      	b.n	8011cde <_puts_r+0x72>
 8011d0a:	6823      	ldr	r3, [r4, #0]
 8011d0c:	200a      	movs	r0, #10
 8011d0e:	1c5a      	adds	r2, r3, #1
 8011d10:	6022      	str	r2, [r4, #0]
 8011d12:	7018      	strb	r0, [r3, #0]
 8011d14:	e7e5      	b.n	8011ce2 <_puts_r+0x76>
 8011d16:	bf00      	nop
 8011d18:	08014240 	.word	0x08014240
 8011d1c:	08014260 	.word	0x08014260
 8011d20:	08014220 	.word	0x08014220

08011d24 <puts>:
 8011d24:	4b02      	ldr	r3, [pc, #8]	; (8011d30 <puts+0xc>)
 8011d26:	4601      	mov	r1, r0
 8011d28:	6818      	ldr	r0, [r3, #0]
 8011d2a:	f7ff bf9f 	b.w	8011c6c <_puts_r>
 8011d2e:	bf00      	nop
 8011d30:	20000028 	.word	0x20000028

08011d34 <sniprintf>:
 8011d34:	b40c      	push	{r2, r3}
 8011d36:	b530      	push	{r4, r5, lr}
 8011d38:	4b17      	ldr	r3, [pc, #92]	; (8011d98 <sniprintf+0x64>)
 8011d3a:	1e0c      	subs	r4, r1, #0
 8011d3c:	b09d      	sub	sp, #116	; 0x74
 8011d3e:	681d      	ldr	r5, [r3, #0]
 8011d40:	da08      	bge.n	8011d54 <sniprintf+0x20>
 8011d42:	238b      	movs	r3, #139	; 0x8b
 8011d44:	602b      	str	r3, [r5, #0]
 8011d46:	f04f 30ff 	mov.w	r0, #4294967295
 8011d4a:	b01d      	add	sp, #116	; 0x74
 8011d4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d50:	b002      	add	sp, #8
 8011d52:	4770      	bx	lr
 8011d54:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011d58:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011d5c:	bf14      	ite	ne
 8011d5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011d62:	4623      	moveq	r3, r4
 8011d64:	9304      	str	r3, [sp, #16]
 8011d66:	9307      	str	r3, [sp, #28]
 8011d68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011d6c:	9002      	str	r0, [sp, #8]
 8011d6e:	9006      	str	r0, [sp, #24]
 8011d70:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011d74:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011d76:	ab21      	add	r3, sp, #132	; 0x84
 8011d78:	a902      	add	r1, sp, #8
 8011d7a:	4628      	mov	r0, r5
 8011d7c:	9301      	str	r3, [sp, #4]
 8011d7e:	f000 fbe7 	bl	8012550 <_svfiprintf_r>
 8011d82:	1c43      	adds	r3, r0, #1
 8011d84:	bfbc      	itt	lt
 8011d86:	238b      	movlt	r3, #139	; 0x8b
 8011d88:	602b      	strlt	r3, [r5, #0]
 8011d8a:	2c00      	cmp	r4, #0
 8011d8c:	d0dd      	beq.n	8011d4a <sniprintf+0x16>
 8011d8e:	9b02      	ldr	r3, [sp, #8]
 8011d90:	2200      	movs	r2, #0
 8011d92:	701a      	strb	r2, [r3, #0]
 8011d94:	e7d9      	b.n	8011d4a <sniprintf+0x16>
 8011d96:	bf00      	nop
 8011d98:	20000028 	.word	0x20000028

08011d9c <_vsniprintf_r>:
 8011d9c:	b530      	push	{r4, r5, lr}
 8011d9e:	1e14      	subs	r4, r2, #0
 8011da0:	4605      	mov	r5, r0
 8011da2:	b09b      	sub	sp, #108	; 0x6c
 8011da4:	4618      	mov	r0, r3
 8011da6:	da05      	bge.n	8011db4 <_vsniprintf_r+0x18>
 8011da8:	238b      	movs	r3, #139	; 0x8b
 8011daa:	602b      	str	r3, [r5, #0]
 8011dac:	f04f 30ff 	mov.w	r0, #4294967295
 8011db0:	b01b      	add	sp, #108	; 0x6c
 8011db2:	bd30      	pop	{r4, r5, pc}
 8011db4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011db8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011dbc:	bf14      	ite	ne
 8011dbe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011dc2:	4623      	moveq	r3, r4
 8011dc4:	9302      	str	r3, [sp, #8]
 8011dc6:	9305      	str	r3, [sp, #20]
 8011dc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011dcc:	9100      	str	r1, [sp, #0]
 8011dce:	9104      	str	r1, [sp, #16]
 8011dd0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011dd4:	4602      	mov	r2, r0
 8011dd6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011dd8:	4669      	mov	r1, sp
 8011dda:	4628      	mov	r0, r5
 8011ddc:	f000 fbb8 	bl	8012550 <_svfiprintf_r>
 8011de0:	1c43      	adds	r3, r0, #1
 8011de2:	bfbc      	itt	lt
 8011de4:	238b      	movlt	r3, #139	; 0x8b
 8011de6:	602b      	strlt	r3, [r5, #0]
 8011de8:	2c00      	cmp	r4, #0
 8011dea:	d0e1      	beq.n	8011db0 <_vsniprintf_r+0x14>
 8011dec:	9b00      	ldr	r3, [sp, #0]
 8011dee:	2200      	movs	r2, #0
 8011df0:	701a      	strb	r2, [r3, #0]
 8011df2:	e7dd      	b.n	8011db0 <_vsniprintf_r+0x14>

08011df4 <vsniprintf>:
 8011df4:	b507      	push	{r0, r1, r2, lr}
 8011df6:	9300      	str	r3, [sp, #0]
 8011df8:	4613      	mov	r3, r2
 8011dfa:	460a      	mov	r2, r1
 8011dfc:	4601      	mov	r1, r0
 8011dfe:	4803      	ldr	r0, [pc, #12]	; (8011e0c <vsniprintf+0x18>)
 8011e00:	6800      	ldr	r0, [r0, #0]
 8011e02:	f7ff ffcb 	bl	8011d9c <_vsniprintf_r>
 8011e06:	b003      	add	sp, #12
 8011e08:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e0c:	20000028 	.word	0x20000028

08011e10 <__swbuf_r>:
 8011e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e12:	460e      	mov	r6, r1
 8011e14:	4614      	mov	r4, r2
 8011e16:	4605      	mov	r5, r0
 8011e18:	b118      	cbz	r0, 8011e22 <__swbuf_r+0x12>
 8011e1a:	6983      	ldr	r3, [r0, #24]
 8011e1c:	b90b      	cbnz	r3, 8011e22 <__swbuf_r+0x12>
 8011e1e:	f000 f9a7 	bl	8012170 <__sinit>
 8011e22:	4b21      	ldr	r3, [pc, #132]	; (8011ea8 <__swbuf_r+0x98>)
 8011e24:	429c      	cmp	r4, r3
 8011e26:	d12a      	bne.n	8011e7e <__swbuf_r+0x6e>
 8011e28:	686c      	ldr	r4, [r5, #4]
 8011e2a:	69a3      	ldr	r3, [r4, #24]
 8011e2c:	60a3      	str	r3, [r4, #8]
 8011e2e:	89a3      	ldrh	r3, [r4, #12]
 8011e30:	071a      	lsls	r2, r3, #28
 8011e32:	d52e      	bpl.n	8011e92 <__swbuf_r+0x82>
 8011e34:	6923      	ldr	r3, [r4, #16]
 8011e36:	b363      	cbz	r3, 8011e92 <__swbuf_r+0x82>
 8011e38:	6923      	ldr	r3, [r4, #16]
 8011e3a:	6820      	ldr	r0, [r4, #0]
 8011e3c:	1ac0      	subs	r0, r0, r3
 8011e3e:	6963      	ldr	r3, [r4, #20]
 8011e40:	b2f6      	uxtb	r6, r6
 8011e42:	4283      	cmp	r3, r0
 8011e44:	4637      	mov	r7, r6
 8011e46:	dc04      	bgt.n	8011e52 <__swbuf_r+0x42>
 8011e48:	4621      	mov	r1, r4
 8011e4a:	4628      	mov	r0, r5
 8011e4c:	f000 f926 	bl	801209c <_fflush_r>
 8011e50:	bb28      	cbnz	r0, 8011e9e <__swbuf_r+0x8e>
 8011e52:	68a3      	ldr	r3, [r4, #8]
 8011e54:	3b01      	subs	r3, #1
 8011e56:	60a3      	str	r3, [r4, #8]
 8011e58:	6823      	ldr	r3, [r4, #0]
 8011e5a:	1c5a      	adds	r2, r3, #1
 8011e5c:	6022      	str	r2, [r4, #0]
 8011e5e:	701e      	strb	r6, [r3, #0]
 8011e60:	6963      	ldr	r3, [r4, #20]
 8011e62:	3001      	adds	r0, #1
 8011e64:	4283      	cmp	r3, r0
 8011e66:	d004      	beq.n	8011e72 <__swbuf_r+0x62>
 8011e68:	89a3      	ldrh	r3, [r4, #12]
 8011e6a:	07db      	lsls	r3, r3, #31
 8011e6c:	d519      	bpl.n	8011ea2 <__swbuf_r+0x92>
 8011e6e:	2e0a      	cmp	r6, #10
 8011e70:	d117      	bne.n	8011ea2 <__swbuf_r+0x92>
 8011e72:	4621      	mov	r1, r4
 8011e74:	4628      	mov	r0, r5
 8011e76:	f000 f911 	bl	801209c <_fflush_r>
 8011e7a:	b190      	cbz	r0, 8011ea2 <__swbuf_r+0x92>
 8011e7c:	e00f      	b.n	8011e9e <__swbuf_r+0x8e>
 8011e7e:	4b0b      	ldr	r3, [pc, #44]	; (8011eac <__swbuf_r+0x9c>)
 8011e80:	429c      	cmp	r4, r3
 8011e82:	d101      	bne.n	8011e88 <__swbuf_r+0x78>
 8011e84:	68ac      	ldr	r4, [r5, #8]
 8011e86:	e7d0      	b.n	8011e2a <__swbuf_r+0x1a>
 8011e88:	4b09      	ldr	r3, [pc, #36]	; (8011eb0 <__swbuf_r+0xa0>)
 8011e8a:	429c      	cmp	r4, r3
 8011e8c:	bf08      	it	eq
 8011e8e:	68ec      	ldreq	r4, [r5, #12]
 8011e90:	e7cb      	b.n	8011e2a <__swbuf_r+0x1a>
 8011e92:	4621      	mov	r1, r4
 8011e94:	4628      	mov	r0, r5
 8011e96:	f000 f80d 	bl	8011eb4 <__swsetup_r>
 8011e9a:	2800      	cmp	r0, #0
 8011e9c:	d0cc      	beq.n	8011e38 <__swbuf_r+0x28>
 8011e9e:	f04f 37ff 	mov.w	r7, #4294967295
 8011ea2:	4638      	mov	r0, r7
 8011ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ea6:	bf00      	nop
 8011ea8:	08014240 	.word	0x08014240
 8011eac:	08014260 	.word	0x08014260
 8011eb0:	08014220 	.word	0x08014220

08011eb4 <__swsetup_r>:
 8011eb4:	4b32      	ldr	r3, [pc, #200]	; (8011f80 <__swsetup_r+0xcc>)
 8011eb6:	b570      	push	{r4, r5, r6, lr}
 8011eb8:	681d      	ldr	r5, [r3, #0]
 8011eba:	4606      	mov	r6, r0
 8011ebc:	460c      	mov	r4, r1
 8011ebe:	b125      	cbz	r5, 8011eca <__swsetup_r+0x16>
 8011ec0:	69ab      	ldr	r3, [r5, #24]
 8011ec2:	b913      	cbnz	r3, 8011eca <__swsetup_r+0x16>
 8011ec4:	4628      	mov	r0, r5
 8011ec6:	f000 f953 	bl	8012170 <__sinit>
 8011eca:	4b2e      	ldr	r3, [pc, #184]	; (8011f84 <__swsetup_r+0xd0>)
 8011ecc:	429c      	cmp	r4, r3
 8011ece:	d10f      	bne.n	8011ef0 <__swsetup_r+0x3c>
 8011ed0:	686c      	ldr	r4, [r5, #4]
 8011ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ed6:	b29a      	uxth	r2, r3
 8011ed8:	0715      	lsls	r5, r2, #28
 8011eda:	d42c      	bmi.n	8011f36 <__swsetup_r+0x82>
 8011edc:	06d0      	lsls	r0, r2, #27
 8011ede:	d411      	bmi.n	8011f04 <__swsetup_r+0x50>
 8011ee0:	2209      	movs	r2, #9
 8011ee2:	6032      	str	r2, [r6, #0]
 8011ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ee8:	81a3      	strh	r3, [r4, #12]
 8011eea:	f04f 30ff 	mov.w	r0, #4294967295
 8011eee:	e03e      	b.n	8011f6e <__swsetup_r+0xba>
 8011ef0:	4b25      	ldr	r3, [pc, #148]	; (8011f88 <__swsetup_r+0xd4>)
 8011ef2:	429c      	cmp	r4, r3
 8011ef4:	d101      	bne.n	8011efa <__swsetup_r+0x46>
 8011ef6:	68ac      	ldr	r4, [r5, #8]
 8011ef8:	e7eb      	b.n	8011ed2 <__swsetup_r+0x1e>
 8011efa:	4b24      	ldr	r3, [pc, #144]	; (8011f8c <__swsetup_r+0xd8>)
 8011efc:	429c      	cmp	r4, r3
 8011efe:	bf08      	it	eq
 8011f00:	68ec      	ldreq	r4, [r5, #12]
 8011f02:	e7e6      	b.n	8011ed2 <__swsetup_r+0x1e>
 8011f04:	0751      	lsls	r1, r2, #29
 8011f06:	d512      	bpl.n	8011f2e <__swsetup_r+0x7a>
 8011f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f0a:	b141      	cbz	r1, 8011f1e <__swsetup_r+0x6a>
 8011f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f10:	4299      	cmp	r1, r3
 8011f12:	d002      	beq.n	8011f1a <__swsetup_r+0x66>
 8011f14:	4630      	mov	r0, r6
 8011f16:	f000 fa19 	bl	801234c <_free_r>
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	6363      	str	r3, [r4, #52]	; 0x34
 8011f1e:	89a3      	ldrh	r3, [r4, #12]
 8011f20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011f24:	81a3      	strh	r3, [r4, #12]
 8011f26:	2300      	movs	r3, #0
 8011f28:	6063      	str	r3, [r4, #4]
 8011f2a:	6923      	ldr	r3, [r4, #16]
 8011f2c:	6023      	str	r3, [r4, #0]
 8011f2e:	89a3      	ldrh	r3, [r4, #12]
 8011f30:	f043 0308 	orr.w	r3, r3, #8
 8011f34:	81a3      	strh	r3, [r4, #12]
 8011f36:	6923      	ldr	r3, [r4, #16]
 8011f38:	b94b      	cbnz	r3, 8011f4e <__swsetup_r+0x9a>
 8011f3a:	89a3      	ldrh	r3, [r4, #12]
 8011f3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011f44:	d003      	beq.n	8011f4e <__swsetup_r+0x9a>
 8011f46:	4621      	mov	r1, r4
 8011f48:	4630      	mov	r0, r6
 8011f4a:	f000 f9bf 	bl	80122cc <__smakebuf_r>
 8011f4e:	89a2      	ldrh	r2, [r4, #12]
 8011f50:	f012 0301 	ands.w	r3, r2, #1
 8011f54:	d00c      	beq.n	8011f70 <__swsetup_r+0xbc>
 8011f56:	2300      	movs	r3, #0
 8011f58:	60a3      	str	r3, [r4, #8]
 8011f5a:	6963      	ldr	r3, [r4, #20]
 8011f5c:	425b      	negs	r3, r3
 8011f5e:	61a3      	str	r3, [r4, #24]
 8011f60:	6923      	ldr	r3, [r4, #16]
 8011f62:	b953      	cbnz	r3, 8011f7a <__swsetup_r+0xc6>
 8011f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f68:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011f6c:	d1ba      	bne.n	8011ee4 <__swsetup_r+0x30>
 8011f6e:	bd70      	pop	{r4, r5, r6, pc}
 8011f70:	0792      	lsls	r2, r2, #30
 8011f72:	bf58      	it	pl
 8011f74:	6963      	ldrpl	r3, [r4, #20]
 8011f76:	60a3      	str	r3, [r4, #8]
 8011f78:	e7f2      	b.n	8011f60 <__swsetup_r+0xac>
 8011f7a:	2000      	movs	r0, #0
 8011f7c:	e7f7      	b.n	8011f6e <__swsetup_r+0xba>
 8011f7e:	bf00      	nop
 8011f80:	20000028 	.word	0x20000028
 8011f84:	08014240 	.word	0x08014240
 8011f88:	08014260 	.word	0x08014260
 8011f8c:	08014220 	.word	0x08014220

08011f90 <__sflush_r>:
 8011f90:	898a      	ldrh	r2, [r1, #12]
 8011f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f96:	4605      	mov	r5, r0
 8011f98:	0710      	lsls	r0, r2, #28
 8011f9a:	460c      	mov	r4, r1
 8011f9c:	d458      	bmi.n	8012050 <__sflush_r+0xc0>
 8011f9e:	684b      	ldr	r3, [r1, #4]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	dc05      	bgt.n	8011fb0 <__sflush_r+0x20>
 8011fa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	dc02      	bgt.n	8011fb0 <__sflush_r+0x20>
 8011faa:	2000      	movs	r0, #0
 8011fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011fb2:	2e00      	cmp	r6, #0
 8011fb4:	d0f9      	beq.n	8011faa <__sflush_r+0x1a>
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011fbc:	682f      	ldr	r7, [r5, #0]
 8011fbe:	6a21      	ldr	r1, [r4, #32]
 8011fc0:	602b      	str	r3, [r5, #0]
 8011fc2:	d032      	beq.n	801202a <__sflush_r+0x9a>
 8011fc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011fc6:	89a3      	ldrh	r3, [r4, #12]
 8011fc8:	075a      	lsls	r2, r3, #29
 8011fca:	d505      	bpl.n	8011fd8 <__sflush_r+0x48>
 8011fcc:	6863      	ldr	r3, [r4, #4]
 8011fce:	1ac0      	subs	r0, r0, r3
 8011fd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011fd2:	b10b      	cbz	r3, 8011fd8 <__sflush_r+0x48>
 8011fd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011fd6:	1ac0      	subs	r0, r0, r3
 8011fd8:	2300      	movs	r3, #0
 8011fda:	4602      	mov	r2, r0
 8011fdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011fde:	6a21      	ldr	r1, [r4, #32]
 8011fe0:	4628      	mov	r0, r5
 8011fe2:	47b0      	blx	r6
 8011fe4:	1c43      	adds	r3, r0, #1
 8011fe6:	89a3      	ldrh	r3, [r4, #12]
 8011fe8:	d106      	bne.n	8011ff8 <__sflush_r+0x68>
 8011fea:	6829      	ldr	r1, [r5, #0]
 8011fec:	291d      	cmp	r1, #29
 8011fee:	d848      	bhi.n	8012082 <__sflush_r+0xf2>
 8011ff0:	4a29      	ldr	r2, [pc, #164]	; (8012098 <__sflush_r+0x108>)
 8011ff2:	40ca      	lsrs	r2, r1
 8011ff4:	07d6      	lsls	r6, r2, #31
 8011ff6:	d544      	bpl.n	8012082 <__sflush_r+0xf2>
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	6062      	str	r2, [r4, #4]
 8011ffc:	04d9      	lsls	r1, r3, #19
 8011ffe:	6922      	ldr	r2, [r4, #16]
 8012000:	6022      	str	r2, [r4, #0]
 8012002:	d504      	bpl.n	801200e <__sflush_r+0x7e>
 8012004:	1c42      	adds	r2, r0, #1
 8012006:	d101      	bne.n	801200c <__sflush_r+0x7c>
 8012008:	682b      	ldr	r3, [r5, #0]
 801200a:	b903      	cbnz	r3, 801200e <__sflush_r+0x7e>
 801200c:	6560      	str	r0, [r4, #84]	; 0x54
 801200e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012010:	602f      	str	r7, [r5, #0]
 8012012:	2900      	cmp	r1, #0
 8012014:	d0c9      	beq.n	8011faa <__sflush_r+0x1a>
 8012016:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801201a:	4299      	cmp	r1, r3
 801201c:	d002      	beq.n	8012024 <__sflush_r+0x94>
 801201e:	4628      	mov	r0, r5
 8012020:	f000 f994 	bl	801234c <_free_r>
 8012024:	2000      	movs	r0, #0
 8012026:	6360      	str	r0, [r4, #52]	; 0x34
 8012028:	e7c0      	b.n	8011fac <__sflush_r+0x1c>
 801202a:	2301      	movs	r3, #1
 801202c:	4628      	mov	r0, r5
 801202e:	47b0      	blx	r6
 8012030:	1c41      	adds	r1, r0, #1
 8012032:	d1c8      	bne.n	8011fc6 <__sflush_r+0x36>
 8012034:	682b      	ldr	r3, [r5, #0]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d0c5      	beq.n	8011fc6 <__sflush_r+0x36>
 801203a:	2b1d      	cmp	r3, #29
 801203c:	d001      	beq.n	8012042 <__sflush_r+0xb2>
 801203e:	2b16      	cmp	r3, #22
 8012040:	d101      	bne.n	8012046 <__sflush_r+0xb6>
 8012042:	602f      	str	r7, [r5, #0]
 8012044:	e7b1      	b.n	8011faa <__sflush_r+0x1a>
 8012046:	89a3      	ldrh	r3, [r4, #12]
 8012048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801204c:	81a3      	strh	r3, [r4, #12]
 801204e:	e7ad      	b.n	8011fac <__sflush_r+0x1c>
 8012050:	690f      	ldr	r7, [r1, #16]
 8012052:	2f00      	cmp	r7, #0
 8012054:	d0a9      	beq.n	8011faa <__sflush_r+0x1a>
 8012056:	0793      	lsls	r3, r2, #30
 8012058:	680e      	ldr	r6, [r1, #0]
 801205a:	bf08      	it	eq
 801205c:	694b      	ldreq	r3, [r1, #20]
 801205e:	600f      	str	r7, [r1, #0]
 8012060:	bf18      	it	ne
 8012062:	2300      	movne	r3, #0
 8012064:	eba6 0807 	sub.w	r8, r6, r7
 8012068:	608b      	str	r3, [r1, #8]
 801206a:	f1b8 0f00 	cmp.w	r8, #0
 801206e:	dd9c      	ble.n	8011faa <__sflush_r+0x1a>
 8012070:	4643      	mov	r3, r8
 8012072:	463a      	mov	r2, r7
 8012074:	6a21      	ldr	r1, [r4, #32]
 8012076:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012078:	4628      	mov	r0, r5
 801207a:	47b0      	blx	r6
 801207c:	2800      	cmp	r0, #0
 801207e:	dc06      	bgt.n	801208e <__sflush_r+0xfe>
 8012080:	89a3      	ldrh	r3, [r4, #12]
 8012082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012086:	81a3      	strh	r3, [r4, #12]
 8012088:	f04f 30ff 	mov.w	r0, #4294967295
 801208c:	e78e      	b.n	8011fac <__sflush_r+0x1c>
 801208e:	4407      	add	r7, r0
 8012090:	eba8 0800 	sub.w	r8, r8, r0
 8012094:	e7e9      	b.n	801206a <__sflush_r+0xda>
 8012096:	bf00      	nop
 8012098:	20400001 	.word	0x20400001

0801209c <_fflush_r>:
 801209c:	b538      	push	{r3, r4, r5, lr}
 801209e:	690b      	ldr	r3, [r1, #16]
 80120a0:	4605      	mov	r5, r0
 80120a2:	460c      	mov	r4, r1
 80120a4:	b1db      	cbz	r3, 80120de <_fflush_r+0x42>
 80120a6:	b118      	cbz	r0, 80120b0 <_fflush_r+0x14>
 80120a8:	6983      	ldr	r3, [r0, #24]
 80120aa:	b90b      	cbnz	r3, 80120b0 <_fflush_r+0x14>
 80120ac:	f000 f860 	bl	8012170 <__sinit>
 80120b0:	4b0c      	ldr	r3, [pc, #48]	; (80120e4 <_fflush_r+0x48>)
 80120b2:	429c      	cmp	r4, r3
 80120b4:	d109      	bne.n	80120ca <_fflush_r+0x2e>
 80120b6:	686c      	ldr	r4, [r5, #4]
 80120b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120bc:	b17b      	cbz	r3, 80120de <_fflush_r+0x42>
 80120be:	4621      	mov	r1, r4
 80120c0:	4628      	mov	r0, r5
 80120c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80120c6:	f7ff bf63 	b.w	8011f90 <__sflush_r>
 80120ca:	4b07      	ldr	r3, [pc, #28]	; (80120e8 <_fflush_r+0x4c>)
 80120cc:	429c      	cmp	r4, r3
 80120ce:	d101      	bne.n	80120d4 <_fflush_r+0x38>
 80120d0:	68ac      	ldr	r4, [r5, #8]
 80120d2:	e7f1      	b.n	80120b8 <_fflush_r+0x1c>
 80120d4:	4b05      	ldr	r3, [pc, #20]	; (80120ec <_fflush_r+0x50>)
 80120d6:	429c      	cmp	r4, r3
 80120d8:	bf08      	it	eq
 80120da:	68ec      	ldreq	r4, [r5, #12]
 80120dc:	e7ec      	b.n	80120b8 <_fflush_r+0x1c>
 80120de:	2000      	movs	r0, #0
 80120e0:	bd38      	pop	{r3, r4, r5, pc}
 80120e2:	bf00      	nop
 80120e4:	08014240 	.word	0x08014240
 80120e8:	08014260 	.word	0x08014260
 80120ec:	08014220 	.word	0x08014220

080120f0 <std>:
 80120f0:	2300      	movs	r3, #0
 80120f2:	b510      	push	{r4, lr}
 80120f4:	4604      	mov	r4, r0
 80120f6:	e9c0 3300 	strd	r3, r3, [r0]
 80120fa:	6083      	str	r3, [r0, #8]
 80120fc:	8181      	strh	r1, [r0, #12]
 80120fe:	6643      	str	r3, [r0, #100]	; 0x64
 8012100:	81c2      	strh	r2, [r0, #14]
 8012102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012106:	6183      	str	r3, [r0, #24]
 8012108:	4619      	mov	r1, r3
 801210a:	2208      	movs	r2, #8
 801210c:	305c      	adds	r0, #92	; 0x5c
 801210e:	f7ff fd8c 	bl	8011c2a <memset>
 8012112:	4b05      	ldr	r3, [pc, #20]	; (8012128 <std+0x38>)
 8012114:	6263      	str	r3, [r4, #36]	; 0x24
 8012116:	4b05      	ldr	r3, [pc, #20]	; (801212c <std+0x3c>)
 8012118:	62a3      	str	r3, [r4, #40]	; 0x28
 801211a:	4b05      	ldr	r3, [pc, #20]	; (8012130 <std+0x40>)
 801211c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801211e:	4b05      	ldr	r3, [pc, #20]	; (8012134 <std+0x44>)
 8012120:	6224      	str	r4, [r4, #32]
 8012122:	6323      	str	r3, [r4, #48]	; 0x30
 8012124:	bd10      	pop	{r4, pc}
 8012126:	bf00      	nop
 8012128:	08012cf1 	.word	0x08012cf1
 801212c:	08012d13 	.word	0x08012d13
 8012130:	08012d4b 	.word	0x08012d4b
 8012134:	08012d6f 	.word	0x08012d6f

08012138 <_cleanup_r>:
 8012138:	4901      	ldr	r1, [pc, #4]	; (8012140 <_cleanup_r+0x8>)
 801213a:	f000 b885 	b.w	8012248 <_fwalk_reent>
 801213e:	bf00      	nop
 8012140:	0801209d 	.word	0x0801209d

08012144 <__sfmoreglue>:
 8012144:	b570      	push	{r4, r5, r6, lr}
 8012146:	1e4a      	subs	r2, r1, #1
 8012148:	2568      	movs	r5, #104	; 0x68
 801214a:	4355      	muls	r5, r2
 801214c:	460e      	mov	r6, r1
 801214e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012152:	f000 f949 	bl	80123e8 <_malloc_r>
 8012156:	4604      	mov	r4, r0
 8012158:	b140      	cbz	r0, 801216c <__sfmoreglue+0x28>
 801215a:	2100      	movs	r1, #0
 801215c:	e9c0 1600 	strd	r1, r6, [r0]
 8012160:	300c      	adds	r0, #12
 8012162:	60a0      	str	r0, [r4, #8]
 8012164:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012168:	f7ff fd5f 	bl	8011c2a <memset>
 801216c:	4620      	mov	r0, r4
 801216e:	bd70      	pop	{r4, r5, r6, pc}

08012170 <__sinit>:
 8012170:	6983      	ldr	r3, [r0, #24]
 8012172:	b510      	push	{r4, lr}
 8012174:	4604      	mov	r4, r0
 8012176:	bb33      	cbnz	r3, 80121c6 <__sinit+0x56>
 8012178:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801217c:	6503      	str	r3, [r0, #80]	; 0x50
 801217e:	4b12      	ldr	r3, [pc, #72]	; (80121c8 <__sinit+0x58>)
 8012180:	4a12      	ldr	r2, [pc, #72]	; (80121cc <__sinit+0x5c>)
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	6282      	str	r2, [r0, #40]	; 0x28
 8012186:	4298      	cmp	r0, r3
 8012188:	bf04      	itt	eq
 801218a:	2301      	moveq	r3, #1
 801218c:	6183      	streq	r3, [r0, #24]
 801218e:	f000 f81f 	bl	80121d0 <__sfp>
 8012192:	6060      	str	r0, [r4, #4]
 8012194:	4620      	mov	r0, r4
 8012196:	f000 f81b 	bl	80121d0 <__sfp>
 801219a:	60a0      	str	r0, [r4, #8]
 801219c:	4620      	mov	r0, r4
 801219e:	f000 f817 	bl	80121d0 <__sfp>
 80121a2:	2200      	movs	r2, #0
 80121a4:	60e0      	str	r0, [r4, #12]
 80121a6:	2104      	movs	r1, #4
 80121a8:	6860      	ldr	r0, [r4, #4]
 80121aa:	f7ff ffa1 	bl	80120f0 <std>
 80121ae:	2201      	movs	r2, #1
 80121b0:	2109      	movs	r1, #9
 80121b2:	68a0      	ldr	r0, [r4, #8]
 80121b4:	f7ff ff9c 	bl	80120f0 <std>
 80121b8:	2202      	movs	r2, #2
 80121ba:	2112      	movs	r1, #18
 80121bc:	68e0      	ldr	r0, [r4, #12]
 80121be:	f7ff ff97 	bl	80120f0 <std>
 80121c2:	2301      	movs	r3, #1
 80121c4:	61a3      	str	r3, [r4, #24]
 80121c6:	bd10      	pop	{r4, pc}
 80121c8:	0801421c 	.word	0x0801421c
 80121cc:	08012139 	.word	0x08012139

080121d0 <__sfp>:
 80121d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121d2:	4b1b      	ldr	r3, [pc, #108]	; (8012240 <__sfp+0x70>)
 80121d4:	681e      	ldr	r6, [r3, #0]
 80121d6:	69b3      	ldr	r3, [r6, #24]
 80121d8:	4607      	mov	r7, r0
 80121da:	b913      	cbnz	r3, 80121e2 <__sfp+0x12>
 80121dc:	4630      	mov	r0, r6
 80121de:	f7ff ffc7 	bl	8012170 <__sinit>
 80121e2:	3648      	adds	r6, #72	; 0x48
 80121e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80121e8:	3b01      	subs	r3, #1
 80121ea:	d503      	bpl.n	80121f4 <__sfp+0x24>
 80121ec:	6833      	ldr	r3, [r6, #0]
 80121ee:	b133      	cbz	r3, 80121fe <__sfp+0x2e>
 80121f0:	6836      	ldr	r6, [r6, #0]
 80121f2:	e7f7      	b.n	80121e4 <__sfp+0x14>
 80121f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80121f8:	b16d      	cbz	r5, 8012216 <__sfp+0x46>
 80121fa:	3468      	adds	r4, #104	; 0x68
 80121fc:	e7f4      	b.n	80121e8 <__sfp+0x18>
 80121fe:	2104      	movs	r1, #4
 8012200:	4638      	mov	r0, r7
 8012202:	f7ff ff9f 	bl	8012144 <__sfmoreglue>
 8012206:	6030      	str	r0, [r6, #0]
 8012208:	2800      	cmp	r0, #0
 801220a:	d1f1      	bne.n	80121f0 <__sfp+0x20>
 801220c:	230c      	movs	r3, #12
 801220e:	603b      	str	r3, [r7, #0]
 8012210:	4604      	mov	r4, r0
 8012212:	4620      	mov	r0, r4
 8012214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012216:	4b0b      	ldr	r3, [pc, #44]	; (8012244 <__sfp+0x74>)
 8012218:	6665      	str	r5, [r4, #100]	; 0x64
 801221a:	e9c4 5500 	strd	r5, r5, [r4]
 801221e:	60a5      	str	r5, [r4, #8]
 8012220:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012224:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012228:	2208      	movs	r2, #8
 801222a:	4629      	mov	r1, r5
 801222c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012230:	f7ff fcfb 	bl	8011c2a <memset>
 8012234:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012238:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801223c:	e7e9      	b.n	8012212 <__sfp+0x42>
 801223e:	bf00      	nop
 8012240:	0801421c 	.word	0x0801421c
 8012244:	ffff0001 	.word	0xffff0001

08012248 <_fwalk_reent>:
 8012248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801224c:	4680      	mov	r8, r0
 801224e:	4689      	mov	r9, r1
 8012250:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012254:	2600      	movs	r6, #0
 8012256:	b914      	cbnz	r4, 801225e <_fwalk_reent+0x16>
 8012258:	4630      	mov	r0, r6
 801225a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801225e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012262:	3f01      	subs	r7, #1
 8012264:	d501      	bpl.n	801226a <_fwalk_reent+0x22>
 8012266:	6824      	ldr	r4, [r4, #0]
 8012268:	e7f5      	b.n	8012256 <_fwalk_reent+0xe>
 801226a:	89ab      	ldrh	r3, [r5, #12]
 801226c:	2b01      	cmp	r3, #1
 801226e:	d907      	bls.n	8012280 <_fwalk_reent+0x38>
 8012270:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012274:	3301      	adds	r3, #1
 8012276:	d003      	beq.n	8012280 <_fwalk_reent+0x38>
 8012278:	4629      	mov	r1, r5
 801227a:	4640      	mov	r0, r8
 801227c:	47c8      	blx	r9
 801227e:	4306      	orrs	r6, r0
 8012280:	3568      	adds	r5, #104	; 0x68
 8012282:	e7ee      	b.n	8012262 <_fwalk_reent+0x1a>

08012284 <__swhatbuf_r>:
 8012284:	b570      	push	{r4, r5, r6, lr}
 8012286:	460e      	mov	r6, r1
 8012288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801228c:	2900      	cmp	r1, #0
 801228e:	b096      	sub	sp, #88	; 0x58
 8012290:	4614      	mov	r4, r2
 8012292:	461d      	mov	r5, r3
 8012294:	da07      	bge.n	80122a6 <__swhatbuf_r+0x22>
 8012296:	2300      	movs	r3, #0
 8012298:	602b      	str	r3, [r5, #0]
 801229a:	89b3      	ldrh	r3, [r6, #12]
 801229c:	061a      	lsls	r2, r3, #24
 801229e:	d410      	bmi.n	80122c2 <__swhatbuf_r+0x3e>
 80122a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80122a4:	e00e      	b.n	80122c4 <__swhatbuf_r+0x40>
 80122a6:	466a      	mov	r2, sp
 80122a8:	f000 fd88 	bl	8012dbc <_fstat_r>
 80122ac:	2800      	cmp	r0, #0
 80122ae:	dbf2      	blt.n	8012296 <__swhatbuf_r+0x12>
 80122b0:	9a01      	ldr	r2, [sp, #4]
 80122b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80122b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80122ba:	425a      	negs	r2, r3
 80122bc:	415a      	adcs	r2, r3
 80122be:	602a      	str	r2, [r5, #0]
 80122c0:	e7ee      	b.n	80122a0 <__swhatbuf_r+0x1c>
 80122c2:	2340      	movs	r3, #64	; 0x40
 80122c4:	2000      	movs	r0, #0
 80122c6:	6023      	str	r3, [r4, #0]
 80122c8:	b016      	add	sp, #88	; 0x58
 80122ca:	bd70      	pop	{r4, r5, r6, pc}

080122cc <__smakebuf_r>:
 80122cc:	898b      	ldrh	r3, [r1, #12]
 80122ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80122d0:	079d      	lsls	r5, r3, #30
 80122d2:	4606      	mov	r6, r0
 80122d4:	460c      	mov	r4, r1
 80122d6:	d507      	bpl.n	80122e8 <__smakebuf_r+0x1c>
 80122d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80122dc:	6023      	str	r3, [r4, #0]
 80122de:	6123      	str	r3, [r4, #16]
 80122e0:	2301      	movs	r3, #1
 80122e2:	6163      	str	r3, [r4, #20]
 80122e4:	b002      	add	sp, #8
 80122e6:	bd70      	pop	{r4, r5, r6, pc}
 80122e8:	ab01      	add	r3, sp, #4
 80122ea:	466a      	mov	r2, sp
 80122ec:	f7ff ffca 	bl	8012284 <__swhatbuf_r>
 80122f0:	9900      	ldr	r1, [sp, #0]
 80122f2:	4605      	mov	r5, r0
 80122f4:	4630      	mov	r0, r6
 80122f6:	f000 f877 	bl	80123e8 <_malloc_r>
 80122fa:	b948      	cbnz	r0, 8012310 <__smakebuf_r+0x44>
 80122fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012300:	059a      	lsls	r2, r3, #22
 8012302:	d4ef      	bmi.n	80122e4 <__smakebuf_r+0x18>
 8012304:	f023 0303 	bic.w	r3, r3, #3
 8012308:	f043 0302 	orr.w	r3, r3, #2
 801230c:	81a3      	strh	r3, [r4, #12]
 801230e:	e7e3      	b.n	80122d8 <__smakebuf_r+0xc>
 8012310:	4b0d      	ldr	r3, [pc, #52]	; (8012348 <__smakebuf_r+0x7c>)
 8012312:	62b3      	str	r3, [r6, #40]	; 0x28
 8012314:	89a3      	ldrh	r3, [r4, #12]
 8012316:	6020      	str	r0, [r4, #0]
 8012318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801231c:	81a3      	strh	r3, [r4, #12]
 801231e:	9b00      	ldr	r3, [sp, #0]
 8012320:	6163      	str	r3, [r4, #20]
 8012322:	9b01      	ldr	r3, [sp, #4]
 8012324:	6120      	str	r0, [r4, #16]
 8012326:	b15b      	cbz	r3, 8012340 <__smakebuf_r+0x74>
 8012328:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801232c:	4630      	mov	r0, r6
 801232e:	f000 fd57 	bl	8012de0 <_isatty_r>
 8012332:	b128      	cbz	r0, 8012340 <__smakebuf_r+0x74>
 8012334:	89a3      	ldrh	r3, [r4, #12]
 8012336:	f023 0303 	bic.w	r3, r3, #3
 801233a:	f043 0301 	orr.w	r3, r3, #1
 801233e:	81a3      	strh	r3, [r4, #12]
 8012340:	89a3      	ldrh	r3, [r4, #12]
 8012342:	431d      	orrs	r5, r3
 8012344:	81a5      	strh	r5, [r4, #12]
 8012346:	e7cd      	b.n	80122e4 <__smakebuf_r+0x18>
 8012348:	08012139 	.word	0x08012139

0801234c <_free_r>:
 801234c:	b538      	push	{r3, r4, r5, lr}
 801234e:	4605      	mov	r5, r0
 8012350:	2900      	cmp	r1, #0
 8012352:	d045      	beq.n	80123e0 <_free_r+0x94>
 8012354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012358:	1f0c      	subs	r4, r1, #4
 801235a:	2b00      	cmp	r3, #0
 801235c:	bfb8      	it	lt
 801235e:	18e4      	addlt	r4, r4, r3
 8012360:	f000 fd79 	bl	8012e56 <__malloc_lock>
 8012364:	4a1f      	ldr	r2, [pc, #124]	; (80123e4 <_free_r+0x98>)
 8012366:	6813      	ldr	r3, [r2, #0]
 8012368:	4610      	mov	r0, r2
 801236a:	b933      	cbnz	r3, 801237a <_free_r+0x2e>
 801236c:	6063      	str	r3, [r4, #4]
 801236e:	6014      	str	r4, [r2, #0]
 8012370:	4628      	mov	r0, r5
 8012372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012376:	f000 bd6f 	b.w	8012e58 <__malloc_unlock>
 801237a:	42a3      	cmp	r3, r4
 801237c:	d90c      	bls.n	8012398 <_free_r+0x4c>
 801237e:	6821      	ldr	r1, [r4, #0]
 8012380:	1862      	adds	r2, r4, r1
 8012382:	4293      	cmp	r3, r2
 8012384:	bf04      	itt	eq
 8012386:	681a      	ldreq	r2, [r3, #0]
 8012388:	685b      	ldreq	r3, [r3, #4]
 801238a:	6063      	str	r3, [r4, #4]
 801238c:	bf04      	itt	eq
 801238e:	1852      	addeq	r2, r2, r1
 8012390:	6022      	streq	r2, [r4, #0]
 8012392:	6004      	str	r4, [r0, #0]
 8012394:	e7ec      	b.n	8012370 <_free_r+0x24>
 8012396:	4613      	mov	r3, r2
 8012398:	685a      	ldr	r2, [r3, #4]
 801239a:	b10a      	cbz	r2, 80123a0 <_free_r+0x54>
 801239c:	42a2      	cmp	r2, r4
 801239e:	d9fa      	bls.n	8012396 <_free_r+0x4a>
 80123a0:	6819      	ldr	r1, [r3, #0]
 80123a2:	1858      	adds	r0, r3, r1
 80123a4:	42a0      	cmp	r0, r4
 80123a6:	d10b      	bne.n	80123c0 <_free_r+0x74>
 80123a8:	6820      	ldr	r0, [r4, #0]
 80123aa:	4401      	add	r1, r0
 80123ac:	1858      	adds	r0, r3, r1
 80123ae:	4282      	cmp	r2, r0
 80123b0:	6019      	str	r1, [r3, #0]
 80123b2:	d1dd      	bne.n	8012370 <_free_r+0x24>
 80123b4:	6810      	ldr	r0, [r2, #0]
 80123b6:	6852      	ldr	r2, [r2, #4]
 80123b8:	605a      	str	r2, [r3, #4]
 80123ba:	4401      	add	r1, r0
 80123bc:	6019      	str	r1, [r3, #0]
 80123be:	e7d7      	b.n	8012370 <_free_r+0x24>
 80123c0:	d902      	bls.n	80123c8 <_free_r+0x7c>
 80123c2:	230c      	movs	r3, #12
 80123c4:	602b      	str	r3, [r5, #0]
 80123c6:	e7d3      	b.n	8012370 <_free_r+0x24>
 80123c8:	6820      	ldr	r0, [r4, #0]
 80123ca:	1821      	adds	r1, r4, r0
 80123cc:	428a      	cmp	r2, r1
 80123ce:	bf04      	itt	eq
 80123d0:	6811      	ldreq	r1, [r2, #0]
 80123d2:	6852      	ldreq	r2, [r2, #4]
 80123d4:	6062      	str	r2, [r4, #4]
 80123d6:	bf04      	itt	eq
 80123d8:	1809      	addeq	r1, r1, r0
 80123da:	6021      	streq	r1, [r4, #0]
 80123dc:	605c      	str	r4, [r3, #4]
 80123de:	e7c7      	b.n	8012370 <_free_r+0x24>
 80123e0:	bd38      	pop	{r3, r4, r5, pc}
 80123e2:	bf00      	nop
 80123e4:	20006cc8 	.word	0x20006cc8

080123e8 <_malloc_r>:
 80123e8:	b570      	push	{r4, r5, r6, lr}
 80123ea:	1ccd      	adds	r5, r1, #3
 80123ec:	f025 0503 	bic.w	r5, r5, #3
 80123f0:	3508      	adds	r5, #8
 80123f2:	2d0c      	cmp	r5, #12
 80123f4:	bf38      	it	cc
 80123f6:	250c      	movcc	r5, #12
 80123f8:	2d00      	cmp	r5, #0
 80123fa:	4606      	mov	r6, r0
 80123fc:	db01      	blt.n	8012402 <_malloc_r+0x1a>
 80123fe:	42a9      	cmp	r1, r5
 8012400:	d903      	bls.n	801240a <_malloc_r+0x22>
 8012402:	230c      	movs	r3, #12
 8012404:	6033      	str	r3, [r6, #0]
 8012406:	2000      	movs	r0, #0
 8012408:	bd70      	pop	{r4, r5, r6, pc}
 801240a:	f000 fd24 	bl	8012e56 <__malloc_lock>
 801240e:	4a21      	ldr	r2, [pc, #132]	; (8012494 <_malloc_r+0xac>)
 8012410:	6814      	ldr	r4, [r2, #0]
 8012412:	4621      	mov	r1, r4
 8012414:	b991      	cbnz	r1, 801243c <_malloc_r+0x54>
 8012416:	4c20      	ldr	r4, [pc, #128]	; (8012498 <_malloc_r+0xb0>)
 8012418:	6823      	ldr	r3, [r4, #0]
 801241a:	b91b      	cbnz	r3, 8012424 <_malloc_r+0x3c>
 801241c:	4630      	mov	r0, r6
 801241e:	f000 fc57 	bl	8012cd0 <_sbrk_r>
 8012422:	6020      	str	r0, [r4, #0]
 8012424:	4629      	mov	r1, r5
 8012426:	4630      	mov	r0, r6
 8012428:	f000 fc52 	bl	8012cd0 <_sbrk_r>
 801242c:	1c43      	adds	r3, r0, #1
 801242e:	d124      	bne.n	801247a <_malloc_r+0x92>
 8012430:	230c      	movs	r3, #12
 8012432:	6033      	str	r3, [r6, #0]
 8012434:	4630      	mov	r0, r6
 8012436:	f000 fd0f 	bl	8012e58 <__malloc_unlock>
 801243a:	e7e4      	b.n	8012406 <_malloc_r+0x1e>
 801243c:	680b      	ldr	r3, [r1, #0]
 801243e:	1b5b      	subs	r3, r3, r5
 8012440:	d418      	bmi.n	8012474 <_malloc_r+0x8c>
 8012442:	2b0b      	cmp	r3, #11
 8012444:	d90f      	bls.n	8012466 <_malloc_r+0x7e>
 8012446:	600b      	str	r3, [r1, #0]
 8012448:	50cd      	str	r5, [r1, r3]
 801244a:	18cc      	adds	r4, r1, r3
 801244c:	4630      	mov	r0, r6
 801244e:	f000 fd03 	bl	8012e58 <__malloc_unlock>
 8012452:	f104 000b 	add.w	r0, r4, #11
 8012456:	1d23      	adds	r3, r4, #4
 8012458:	f020 0007 	bic.w	r0, r0, #7
 801245c:	1ac3      	subs	r3, r0, r3
 801245e:	d0d3      	beq.n	8012408 <_malloc_r+0x20>
 8012460:	425a      	negs	r2, r3
 8012462:	50e2      	str	r2, [r4, r3]
 8012464:	e7d0      	b.n	8012408 <_malloc_r+0x20>
 8012466:	428c      	cmp	r4, r1
 8012468:	684b      	ldr	r3, [r1, #4]
 801246a:	bf16      	itet	ne
 801246c:	6063      	strne	r3, [r4, #4]
 801246e:	6013      	streq	r3, [r2, #0]
 8012470:	460c      	movne	r4, r1
 8012472:	e7eb      	b.n	801244c <_malloc_r+0x64>
 8012474:	460c      	mov	r4, r1
 8012476:	6849      	ldr	r1, [r1, #4]
 8012478:	e7cc      	b.n	8012414 <_malloc_r+0x2c>
 801247a:	1cc4      	adds	r4, r0, #3
 801247c:	f024 0403 	bic.w	r4, r4, #3
 8012480:	42a0      	cmp	r0, r4
 8012482:	d005      	beq.n	8012490 <_malloc_r+0xa8>
 8012484:	1a21      	subs	r1, r4, r0
 8012486:	4630      	mov	r0, r6
 8012488:	f000 fc22 	bl	8012cd0 <_sbrk_r>
 801248c:	3001      	adds	r0, #1
 801248e:	d0cf      	beq.n	8012430 <_malloc_r+0x48>
 8012490:	6025      	str	r5, [r4, #0]
 8012492:	e7db      	b.n	801244c <_malloc_r+0x64>
 8012494:	20006cc8 	.word	0x20006cc8
 8012498:	20006ccc 	.word	0x20006ccc

0801249c <__ssputs_r>:
 801249c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124a0:	688e      	ldr	r6, [r1, #8]
 80124a2:	429e      	cmp	r6, r3
 80124a4:	4682      	mov	sl, r0
 80124a6:	460c      	mov	r4, r1
 80124a8:	4690      	mov	r8, r2
 80124aa:	4699      	mov	r9, r3
 80124ac:	d837      	bhi.n	801251e <__ssputs_r+0x82>
 80124ae:	898a      	ldrh	r2, [r1, #12]
 80124b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80124b4:	d031      	beq.n	801251a <__ssputs_r+0x7e>
 80124b6:	6825      	ldr	r5, [r4, #0]
 80124b8:	6909      	ldr	r1, [r1, #16]
 80124ba:	1a6f      	subs	r7, r5, r1
 80124bc:	6965      	ldr	r5, [r4, #20]
 80124be:	2302      	movs	r3, #2
 80124c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80124c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80124c8:	f109 0301 	add.w	r3, r9, #1
 80124cc:	443b      	add	r3, r7
 80124ce:	429d      	cmp	r5, r3
 80124d0:	bf38      	it	cc
 80124d2:	461d      	movcc	r5, r3
 80124d4:	0553      	lsls	r3, r2, #21
 80124d6:	d530      	bpl.n	801253a <__ssputs_r+0x9e>
 80124d8:	4629      	mov	r1, r5
 80124da:	f7ff ff85 	bl	80123e8 <_malloc_r>
 80124de:	4606      	mov	r6, r0
 80124e0:	b950      	cbnz	r0, 80124f8 <__ssputs_r+0x5c>
 80124e2:	230c      	movs	r3, #12
 80124e4:	f8ca 3000 	str.w	r3, [sl]
 80124e8:	89a3      	ldrh	r3, [r4, #12]
 80124ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124ee:	81a3      	strh	r3, [r4, #12]
 80124f0:	f04f 30ff 	mov.w	r0, #4294967295
 80124f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124f8:	463a      	mov	r2, r7
 80124fa:	6921      	ldr	r1, [r4, #16]
 80124fc:	f7ff fb8a 	bl	8011c14 <memcpy>
 8012500:	89a3      	ldrh	r3, [r4, #12]
 8012502:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801250a:	81a3      	strh	r3, [r4, #12]
 801250c:	6126      	str	r6, [r4, #16]
 801250e:	6165      	str	r5, [r4, #20]
 8012510:	443e      	add	r6, r7
 8012512:	1bed      	subs	r5, r5, r7
 8012514:	6026      	str	r6, [r4, #0]
 8012516:	60a5      	str	r5, [r4, #8]
 8012518:	464e      	mov	r6, r9
 801251a:	454e      	cmp	r6, r9
 801251c:	d900      	bls.n	8012520 <__ssputs_r+0x84>
 801251e:	464e      	mov	r6, r9
 8012520:	4632      	mov	r2, r6
 8012522:	4641      	mov	r1, r8
 8012524:	6820      	ldr	r0, [r4, #0]
 8012526:	f000 fc7d 	bl	8012e24 <memmove>
 801252a:	68a3      	ldr	r3, [r4, #8]
 801252c:	1b9b      	subs	r3, r3, r6
 801252e:	60a3      	str	r3, [r4, #8]
 8012530:	6823      	ldr	r3, [r4, #0]
 8012532:	441e      	add	r6, r3
 8012534:	6026      	str	r6, [r4, #0]
 8012536:	2000      	movs	r0, #0
 8012538:	e7dc      	b.n	80124f4 <__ssputs_r+0x58>
 801253a:	462a      	mov	r2, r5
 801253c:	f000 fc8d 	bl	8012e5a <_realloc_r>
 8012540:	4606      	mov	r6, r0
 8012542:	2800      	cmp	r0, #0
 8012544:	d1e2      	bne.n	801250c <__ssputs_r+0x70>
 8012546:	6921      	ldr	r1, [r4, #16]
 8012548:	4650      	mov	r0, sl
 801254a:	f7ff feff 	bl	801234c <_free_r>
 801254e:	e7c8      	b.n	80124e2 <__ssputs_r+0x46>

08012550 <_svfiprintf_r>:
 8012550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012554:	461d      	mov	r5, r3
 8012556:	898b      	ldrh	r3, [r1, #12]
 8012558:	061f      	lsls	r7, r3, #24
 801255a:	b09d      	sub	sp, #116	; 0x74
 801255c:	4680      	mov	r8, r0
 801255e:	460c      	mov	r4, r1
 8012560:	4616      	mov	r6, r2
 8012562:	d50f      	bpl.n	8012584 <_svfiprintf_r+0x34>
 8012564:	690b      	ldr	r3, [r1, #16]
 8012566:	b96b      	cbnz	r3, 8012584 <_svfiprintf_r+0x34>
 8012568:	2140      	movs	r1, #64	; 0x40
 801256a:	f7ff ff3d 	bl	80123e8 <_malloc_r>
 801256e:	6020      	str	r0, [r4, #0]
 8012570:	6120      	str	r0, [r4, #16]
 8012572:	b928      	cbnz	r0, 8012580 <_svfiprintf_r+0x30>
 8012574:	230c      	movs	r3, #12
 8012576:	f8c8 3000 	str.w	r3, [r8]
 801257a:	f04f 30ff 	mov.w	r0, #4294967295
 801257e:	e0c8      	b.n	8012712 <_svfiprintf_r+0x1c2>
 8012580:	2340      	movs	r3, #64	; 0x40
 8012582:	6163      	str	r3, [r4, #20]
 8012584:	2300      	movs	r3, #0
 8012586:	9309      	str	r3, [sp, #36]	; 0x24
 8012588:	2320      	movs	r3, #32
 801258a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801258e:	2330      	movs	r3, #48	; 0x30
 8012590:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012594:	9503      	str	r5, [sp, #12]
 8012596:	f04f 0b01 	mov.w	fp, #1
 801259a:	4637      	mov	r7, r6
 801259c:	463d      	mov	r5, r7
 801259e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80125a2:	b10b      	cbz	r3, 80125a8 <_svfiprintf_r+0x58>
 80125a4:	2b25      	cmp	r3, #37	; 0x25
 80125a6:	d13e      	bne.n	8012626 <_svfiprintf_r+0xd6>
 80125a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80125ac:	d00b      	beq.n	80125c6 <_svfiprintf_r+0x76>
 80125ae:	4653      	mov	r3, sl
 80125b0:	4632      	mov	r2, r6
 80125b2:	4621      	mov	r1, r4
 80125b4:	4640      	mov	r0, r8
 80125b6:	f7ff ff71 	bl	801249c <__ssputs_r>
 80125ba:	3001      	adds	r0, #1
 80125bc:	f000 80a4 	beq.w	8012708 <_svfiprintf_r+0x1b8>
 80125c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125c2:	4453      	add	r3, sl
 80125c4:	9309      	str	r3, [sp, #36]	; 0x24
 80125c6:	783b      	ldrb	r3, [r7, #0]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	f000 809d 	beq.w	8012708 <_svfiprintf_r+0x1b8>
 80125ce:	2300      	movs	r3, #0
 80125d0:	f04f 32ff 	mov.w	r2, #4294967295
 80125d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80125d8:	9304      	str	r3, [sp, #16]
 80125da:	9307      	str	r3, [sp, #28]
 80125dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80125e0:	931a      	str	r3, [sp, #104]	; 0x68
 80125e2:	462f      	mov	r7, r5
 80125e4:	2205      	movs	r2, #5
 80125e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80125ea:	4850      	ldr	r0, [pc, #320]	; (801272c <_svfiprintf_r+0x1dc>)
 80125ec:	f7ed fde0 	bl	80001b0 <memchr>
 80125f0:	9b04      	ldr	r3, [sp, #16]
 80125f2:	b9d0      	cbnz	r0, 801262a <_svfiprintf_r+0xda>
 80125f4:	06d9      	lsls	r1, r3, #27
 80125f6:	bf44      	itt	mi
 80125f8:	2220      	movmi	r2, #32
 80125fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80125fe:	071a      	lsls	r2, r3, #28
 8012600:	bf44      	itt	mi
 8012602:	222b      	movmi	r2, #43	; 0x2b
 8012604:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012608:	782a      	ldrb	r2, [r5, #0]
 801260a:	2a2a      	cmp	r2, #42	; 0x2a
 801260c:	d015      	beq.n	801263a <_svfiprintf_r+0xea>
 801260e:	9a07      	ldr	r2, [sp, #28]
 8012610:	462f      	mov	r7, r5
 8012612:	2000      	movs	r0, #0
 8012614:	250a      	movs	r5, #10
 8012616:	4639      	mov	r1, r7
 8012618:	f811 3b01 	ldrb.w	r3, [r1], #1
 801261c:	3b30      	subs	r3, #48	; 0x30
 801261e:	2b09      	cmp	r3, #9
 8012620:	d94d      	bls.n	80126be <_svfiprintf_r+0x16e>
 8012622:	b1b8      	cbz	r0, 8012654 <_svfiprintf_r+0x104>
 8012624:	e00f      	b.n	8012646 <_svfiprintf_r+0xf6>
 8012626:	462f      	mov	r7, r5
 8012628:	e7b8      	b.n	801259c <_svfiprintf_r+0x4c>
 801262a:	4a40      	ldr	r2, [pc, #256]	; (801272c <_svfiprintf_r+0x1dc>)
 801262c:	1a80      	subs	r0, r0, r2
 801262e:	fa0b f000 	lsl.w	r0, fp, r0
 8012632:	4318      	orrs	r0, r3
 8012634:	9004      	str	r0, [sp, #16]
 8012636:	463d      	mov	r5, r7
 8012638:	e7d3      	b.n	80125e2 <_svfiprintf_r+0x92>
 801263a:	9a03      	ldr	r2, [sp, #12]
 801263c:	1d11      	adds	r1, r2, #4
 801263e:	6812      	ldr	r2, [r2, #0]
 8012640:	9103      	str	r1, [sp, #12]
 8012642:	2a00      	cmp	r2, #0
 8012644:	db01      	blt.n	801264a <_svfiprintf_r+0xfa>
 8012646:	9207      	str	r2, [sp, #28]
 8012648:	e004      	b.n	8012654 <_svfiprintf_r+0x104>
 801264a:	4252      	negs	r2, r2
 801264c:	f043 0302 	orr.w	r3, r3, #2
 8012650:	9207      	str	r2, [sp, #28]
 8012652:	9304      	str	r3, [sp, #16]
 8012654:	783b      	ldrb	r3, [r7, #0]
 8012656:	2b2e      	cmp	r3, #46	; 0x2e
 8012658:	d10c      	bne.n	8012674 <_svfiprintf_r+0x124>
 801265a:	787b      	ldrb	r3, [r7, #1]
 801265c:	2b2a      	cmp	r3, #42	; 0x2a
 801265e:	d133      	bne.n	80126c8 <_svfiprintf_r+0x178>
 8012660:	9b03      	ldr	r3, [sp, #12]
 8012662:	1d1a      	adds	r2, r3, #4
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	9203      	str	r2, [sp, #12]
 8012668:	2b00      	cmp	r3, #0
 801266a:	bfb8      	it	lt
 801266c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012670:	3702      	adds	r7, #2
 8012672:	9305      	str	r3, [sp, #20]
 8012674:	4d2e      	ldr	r5, [pc, #184]	; (8012730 <_svfiprintf_r+0x1e0>)
 8012676:	7839      	ldrb	r1, [r7, #0]
 8012678:	2203      	movs	r2, #3
 801267a:	4628      	mov	r0, r5
 801267c:	f7ed fd98 	bl	80001b0 <memchr>
 8012680:	b138      	cbz	r0, 8012692 <_svfiprintf_r+0x142>
 8012682:	2340      	movs	r3, #64	; 0x40
 8012684:	1b40      	subs	r0, r0, r5
 8012686:	fa03 f000 	lsl.w	r0, r3, r0
 801268a:	9b04      	ldr	r3, [sp, #16]
 801268c:	4303      	orrs	r3, r0
 801268e:	3701      	adds	r7, #1
 8012690:	9304      	str	r3, [sp, #16]
 8012692:	7839      	ldrb	r1, [r7, #0]
 8012694:	4827      	ldr	r0, [pc, #156]	; (8012734 <_svfiprintf_r+0x1e4>)
 8012696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801269a:	2206      	movs	r2, #6
 801269c:	1c7e      	adds	r6, r7, #1
 801269e:	f7ed fd87 	bl	80001b0 <memchr>
 80126a2:	2800      	cmp	r0, #0
 80126a4:	d038      	beq.n	8012718 <_svfiprintf_r+0x1c8>
 80126a6:	4b24      	ldr	r3, [pc, #144]	; (8012738 <_svfiprintf_r+0x1e8>)
 80126a8:	bb13      	cbnz	r3, 80126f0 <_svfiprintf_r+0x1a0>
 80126aa:	9b03      	ldr	r3, [sp, #12]
 80126ac:	3307      	adds	r3, #7
 80126ae:	f023 0307 	bic.w	r3, r3, #7
 80126b2:	3308      	adds	r3, #8
 80126b4:	9303      	str	r3, [sp, #12]
 80126b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126b8:	444b      	add	r3, r9
 80126ba:	9309      	str	r3, [sp, #36]	; 0x24
 80126bc:	e76d      	b.n	801259a <_svfiprintf_r+0x4a>
 80126be:	fb05 3202 	mla	r2, r5, r2, r3
 80126c2:	2001      	movs	r0, #1
 80126c4:	460f      	mov	r7, r1
 80126c6:	e7a6      	b.n	8012616 <_svfiprintf_r+0xc6>
 80126c8:	2300      	movs	r3, #0
 80126ca:	3701      	adds	r7, #1
 80126cc:	9305      	str	r3, [sp, #20]
 80126ce:	4619      	mov	r1, r3
 80126d0:	250a      	movs	r5, #10
 80126d2:	4638      	mov	r0, r7
 80126d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126d8:	3a30      	subs	r2, #48	; 0x30
 80126da:	2a09      	cmp	r2, #9
 80126dc:	d903      	bls.n	80126e6 <_svfiprintf_r+0x196>
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d0c8      	beq.n	8012674 <_svfiprintf_r+0x124>
 80126e2:	9105      	str	r1, [sp, #20]
 80126e4:	e7c6      	b.n	8012674 <_svfiprintf_r+0x124>
 80126e6:	fb05 2101 	mla	r1, r5, r1, r2
 80126ea:	2301      	movs	r3, #1
 80126ec:	4607      	mov	r7, r0
 80126ee:	e7f0      	b.n	80126d2 <_svfiprintf_r+0x182>
 80126f0:	ab03      	add	r3, sp, #12
 80126f2:	9300      	str	r3, [sp, #0]
 80126f4:	4622      	mov	r2, r4
 80126f6:	4b11      	ldr	r3, [pc, #68]	; (801273c <_svfiprintf_r+0x1ec>)
 80126f8:	a904      	add	r1, sp, #16
 80126fa:	4640      	mov	r0, r8
 80126fc:	f3af 8000 	nop.w
 8012700:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012704:	4681      	mov	r9, r0
 8012706:	d1d6      	bne.n	80126b6 <_svfiprintf_r+0x166>
 8012708:	89a3      	ldrh	r3, [r4, #12]
 801270a:	065b      	lsls	r3, r3, #25
 801270c:	f53f af35 	bmi.w	801257a <_svfiprintf_r+0x2a>
 8012710:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012712:	b01d      	add	sp, #116	; 0x74
 8012714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012718:	ab03      	add	r3, sp, #12
 801271a:	9300      	str	r3, [sp, #0]
 801271c:	4622      	mov	r2, r4
 801271e:	4b07      	ldr	r3, [pc, #28]	; (801273c <_svfiprintf_r+0x1ec>)
 8012720:	a904      	add	r1, sp, #16
 8012722:	4640      	mov	r0, r8
 8012724:	f000 f9c2 	bl	8012aac <_printf_i>
 8012728:	e7ea      	b.n	8012700 <_svfiprintf_r+0x1b0>
 801272a:	bf00      	nop
 801272c:	08014280 	.word	0x08014280
 8012730:	08014286 	.word	0x08014286
 8012734:	0801428a 	.word	0x0801428a
 8012738:	00000000 	.word	0x00000000
 801273c:	0801249d 	.word	0x0801249d

08012740 <__sfputc_r>:
 8012740:	6893      	ldr	r3, [r2, #8]
 8012742:	3b01      	subs	r3, #1
 8012744:	2b00      	cmp	r3, #0
 8012746:	b410      	push	{r4}
 8012748:	6093      	str	r3, [r2, #8]
 801274a:	da08      	bge.n	801275e <__sfputc_r+0x1e>
 801274c:	6994      	ldr	r4, [r2, #24]
 801274e:	42a3      	cmp	r3, r4
 8012750:	db01      	blt.n	8012756 <__sfputc_r+0x16>
 8012752:	290a      	cmp	r1, #10
 8012754:	d103      	bne.n	801275e <__sfputc_r+0x1e>
 8012756:	f85d 4b04 	ldr.w	r4, [sp], #4
 801275a:	f7ff bb59 	b.w	8011e10 <__swbuf_r>
 801275e:	6813      	ldr	r3, [r2, #0]
 8012760:	1c58      	adds	r0, r3, #1
 8012762:	6010      	str	r0, [r2, #0]
 8012764:	7019      	strb	r1, [r3, #0]
 8012766:	4608      	mov	r0, r1
 8012768:	f85d 4b04 	ldr.w	r4, [sp], #4
 801276c:	4770      	bx	lr

0801276e <__sfputs_r>:
 801276e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012770:	4606      	mov	r6, r0
 8012772:	460f      	mov	r7, r1
 8012774:	4614      	mov	r4, r2
 8012776:	18d5      	adds	r5, r2, r3
 8012778:	42ac      	cmp	r4, r5
 801277a:	d101      	bne.n	8012780 <__sfputs_r+0x12>
 801277c:	2000      	movs	r0, #0
 801277e:	e007      	b.n	8012790 <__sfputs_r+0x22>
 8012780:	463a      	mov	r2, r7
 8012782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012786:	4630      	mov	r0, r6
 8012788:	f7ff ffda 	bl	8012740 <__sfputc_r>
 801278c:	1c43      	adds	r3, r0, #1
 801278e:	d1f3      	bne.n	8012778 <__sfputs_r+0xa>
 8012790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012794 <_vfiprintf_r>:
 8012794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012798:	460c      	mov	r4, r1
 801279a:	b09d      	sub	sp, #116	; 0x74
 801279c:	4617      	mov	r7, r2
 801279e:	461d      	mov	r5, r3
 80127a0:	4606      	mov	r6, r0
 80127a2:	b118      	cbz	r0, 80127ac <_vfiprintf_r+0x18>
 80127a4:	6983      	ldr	r3, [r0, #24]
 80127a6:	b90b      	cbnz	r3, 80127ac <_vfiprintf_r+0x18>
 80127a8:	f7ff fce2 	bl	8012170 <__sinit>
 80127ac:	4b7c      	ldr	r3, [pc, #496]	; (80129a0 <_vfiprintf_r+0x20c>)
 80127ae:	429c      	cmp	r4, r3
 80127b0:	d158      	bne.n	8012864 <_vfiprintf_r+0xd0>
 80127b2:	6874      	ldr	r4, [r6, #4]
 80127b4:	89a3      	ldrh	r3, [r4, #12]
 80127b6:	0718      	lsls	r0, r3, #28
 80127b8:	d55e      	bpl.n	8012878 <_vfiprintf_r+0xe4>
 80127ba:	6923      	ldr	r3, [r4, #16]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d05b      	beq.n	8012878 <_vfiprintf_r+0xe4>
 80127c0:	2300      	movs	r3, #0
 80127c2:	9309      	str	r3, [sp, #36]	; 0x24
 80127c4:	2320      	movs	r3, #32
 80127c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80127ca:	2330      	movs	r3, #48	; 0x30
 80127cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80127d0:	9503      	str	r5, [sp, #12]
 80127d2:	f04f 0b01 	mov.w	fp, #1
 80127d6:	46b8      	mov	r8, r7
 80127d8:	4645      	mov	r5, r8
 80127da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80127de:	b10b      	cbz	r3, 80127e4 <_vfiprintf_r+0x50>
 80127e0:	2b25      	cmp	r3, #37	; 0x25
 80127e2:	d154      	bne.n	801288e <_vfiprintf_r+0xfa>
 80127e4:	ebb8 0a07 	subs.w	sl, r8, r7
 80127e8:	d00b      	beq.n	8012802 <_vfiprintf_r+0x6e>
 80127ea:	4653      	mov	r3, sl
 80127ec:	463a      	mov	r2, r7
 80127ee:	4621      	mov	r1, r4
 80127f0:	4630      	mov	r0, r6
 80127f2:	f7ff ffbc 	bl	801276e <__sfputs_r>
 80127f6:	3001      	adds	r0, #1
 80127f8:	f000 80c2 	beq.w	8012980 <_vfiprintf_r+0x1ec>
 80127fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127fe:	4453      	add	r3, sl
 8012800:	9309      	str	r3, [sp, #36]	; 0x24
 8012802:	f898 3000 	ldrb.w	r3, [r8]
 8012806:	2b00      	cmp	r3, #0
 8012808:	f000 80ba 	beq.w	8012980 <_vfiprintf_r+0x1ec>
 801280c:	2300      	movs	r3, #0
 801280e:	f04f 32ff 	mov.w	r2, #4294967295
 8012812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012816:	9304      	str	r3, [sp, #16]
 8012818:	9307      	str	r3, [sp, #28]
 801281a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801281e:	931a      	str	r3, [sp, #104]	; 0x68
 8012820:	46a8      	mov	r8, r5
 8012822:	2205      	movs	r2, #5
 8012824:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012828:	485e      	ldr	r0, [pc, #376]	; (80129a4 <_vfiprintf_r+0x210>)
 801282a:	f7ed fcc1 	bl	80001b0 <memchr>
 801282e:	9b04      	ldr	r3, [sp, #16]
 8012830:	bb78      	cbnz	r0, 8012892 <_vfiprintf_r+0xfe>
 8012832:	06d9      	lsls	r1, r3, #27
 8012834:	bf44      	itt	mi
 8012836:	2220      	movmi	r2, #32
 8012838:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801283c:	071a      	lsls	r2, r3, #28
 801283e:	bf44      	itt	mi
 8012840:	222b      	movmi	r2, #43	; 0x2b
 8012842:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012846:	782a      	ldrb	r2, [r5, #0]
 8012848:	2a2a      	cmp	r2, #42	; 0x2a
 801284a:	d02a      	beq.n	80128a2 <_vfiprintf_r+0x10e>
 801284c:	9a07      	ldr	r2, [sp, #28]
 801284e:	46a8      	mov	r8, r5
 8012850:	2000      	movs	r0, #0
 8012852:	250a      	movs	r5, #10
 8012854:	4641      	mov	r1, r8
 8012856:	f811 3b01 	ldrb.w	r3, [r1], #1
 801285a:	3b30      	subs	r3, #48	; 0x30
 801285c:	2b09      	cmp	r3, #9
 801285e:	d969      	bls.n	8012934 <_vfiprintf_r+0x1a0>
 8012860:	b360      	cbz	r0, 80128bc <_vfiprintf_r+0x128>
 8012862:	e024      	b.n	80128ae <_vfiprintf_r+0x11a>
 8012864:	4b50      	ldr	r3, [pc, #320]	; (80129a8 <_vfiprintf_r+0x214>)
 8012866:	429c      	cmp	r4, r3
 8012868:	d101      	bne.n	801286e <_vfiprintf_r+0xda>
 801286a:	68b4      	ldr	r4, [r6, #8]
 801286c:	e7a2      	b.n	80127b4 <_vfiprintf_r+0x20>
 801286e:	4b4f      	ldr	r3, [pc, #316]	; (80129ac <_vfiprintf_r+0x218>)
 8012870:	429c      	cmp	r4, r3
 8012872:	bf08      	it	eq
 8012874:	68f4      	ldreq	r4, [r6, #12]
 8012876:	e79d      	b.n	80127b4 <_vfiprintf_r+0x20>
 8012878:	4621      	mov	r1, r4
 801287a:	4630      	mov	r0, r6
 801287c:	f7ff fb1a 	bl	8011eb4 <__swsetup_r>
 8012880:	2800      	cmp	r0, #0
 8012882:	d09d      	beq.n	80127c0 <_vfiprintf_r+0x2c>
 8012884:	f04f 30ff 	mov.w	r0, #4294967295
 8012888:	b01d      	add	sp, #116	; 0x74
 801288a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801288e:	46a8      	mov	r8, r5
 8012890:	e7a2      	b.n	80127d8 <_vfiprintf_r+0x44>
 8012892:	4a44      	ldr	r2, [pc, #272]	; (80129a4 <_vfiprintf_r+0x210>)
 8012894:	1a80      	subs	r0, r0, r2
 8012896:	fa0b f000 	lsl.w	r0, fp, r0
 801289a:	4318      	orrs	r0, r3
 801289c:	9004      	str	r0, [sp, #16]
 801289e:	4645      	mov	r5, r8
 80128a0:	e7be      	b.n	8012820 <_vfiprintf_r+0x8c>
 80128a2:	9a03      	ldr	r2, [sp, #12]
 80128a4:	1d11      	adds	r1, r2, #4
 80128a6:	6812      	ldr	r2, [r2, #0]
 80128a8:	9103      	str	r1, [sp, #12]
 80128aa:	2a00      	cmp	r2, #0
 80128ac:	db01      	blt.n	80128b2 <_vfiprintf_r+0x11e>
 80128ae:	9207      	str	r2, [sp, #28]
 80128b0:	e004      	b.n	80128bc <_vfiprintf_r+0x128>
 80128b2:	4252      	negs	r2, r2
 80128b4:	f043 0302 	orr.w	r3, r3, #2
 80128b8:	9207      	str	r2, [sp, #28]
 80128ba:	9304      	str	r3, [sp, #16]
 80128bc:	f898 3000 	ldrb.w	r3, [r8]
 80128c0:	2b2e      	cmp	r3, #46	; 0x2e
 80128c2:	d10e      	bne.n	80128e2 <_vfiprintf_r+0x14e>
 80128c4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80128c8:	2b2a      	cmp	r3, #42	; 0x2a
 80128ca:	d138      	bne.n	801293e <_vfiprintf_r+0x1aa>
 80128cc:	9b03      	ldr	r3, [sp, #12]
 80128ce:	1d1a      	adds	r2, r3, #4
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	9203      	str	r2, [sp, #12]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	bfb8      	it	lt
 80128d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80128dc:	f108 0802 	add.w	r8, r8, #2
 80128e0:	9305      	str	r3, [sp, #20]
 80128e2:	4d33      	ldr	r5, [pc, #204]	; (80129b0 <_vfiprintf_r+0x21c>)
 80128e4:	f898 1000 	ldrb.w	r1, [r8]
 80128e8:	2203      	movs	r2, #3
 80128ea:	4628      	mov	r0, r5
 80128ec:	f7ed fc60 	bl	80001b0 <memchr>
 80128f0:	b140      	cbz	r0, 8012904 <_vfiprintf_r+0x170>
 80128f2:	2340      	movs	r3, #64	; 0x40
 80128f4:	1b40      	subs	r0, r0, r5
 80128f6:	fa03 f000 	lsl.w	r0, r3, r0
 80128fa:	9b04      	ldr	r3, [sp, #16]
 80128fc:	4303      	orrs	r3, r0
 80128fe:	f108 0801 	add.w	r8, r8, #1
 8012902:	9304      	str	r3, [sp, #16]
 8012904:	f898 1000 	ldrb.w	r1, [r8]
 8012908:	482a      	ldr	r0, [pc, #168]	; (80129b4 <_vfiprintf_r+0x220>)
 801290a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801290e:	2206      	movs	r2, #6
 8012910:	f108 0701 	add.w	r7, r8, #1
 8012914:	f7ed fc4c 	bl	80001b0 <memchr>
 8012918:	2800      	cmp	r0, #0
 801291a:	d037      	beq.n	801298c <_vfiprintf_r+0x1f8>
 801291c:	4b26      	ldr	r3, [pc, #152]	; (80129b8 <_vfiprintf_r+0x224>)
 801291e:	bb1b      	cbnz	r3, 8012968 <_vfiprintf_r+0x1d4>
 8012920:	9b03      	ldr	r3, [sp, #12]
 8012922:	3307      	adds	r3, #7
 8012924:	f023 0307 	bic.w	r3, r3, #7
 8012928:	3308      	adds	r3, #8
 801292a:	9303      	str	r3, [sp, #12]
 801292c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801292e:	444b      	add	r3, r9
 8012930:	9309      	str	r3, [sp, #36]	; 0x24
 8012932:	e750      	b.n	80127d6 <_vfiprintf_r+0x42>
 8012934:	fb05 3202 	mla	r2, r5, r2, r3
 8012938:	2001      	movs	r0, #1
 801293a:	4688      	mov	r8, r1
 801293c:	e78a      	b.n	8012854 <_vfiprintf_r+0xc0>
 801293e:	2300      	movs	r3, #0
 8012940:	f108 0801 	add.w	r8, r8, #1
 8012944:	9305      	str	r3, [sp, #20]
 8012946:	4619      	mov	r1, r3
 8012948:	250a      	movs	r5, #10
 801294a:	4640      	mov	r0, r8
 801294c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012950:	3a30      	subs	r2, #48	; 0x30
 8012952:	2a09      	cmp	r2, #9
 8012954:	d903      	bls.n	801295e <_vfiprintf_r+0x1ca>
 8012956:	2b00      	cmp	r3, #0
 8012958:	d0c3      	beq.n	80128e2 <_vfiprintf_r+0x14e>
 801295a:	9105      	str	r1, [sp, #20]
 801295c:	e7c1      	b.n	80128e2 <_vfiprintf_r+0x14e>
 801295e:	fb05 2101 	mla	r1, r5, r1, r2
 8012962:	2301      	movs	r3, #1
 8012964:	4680      	mov	r8, r0
 8012966:	e7f0      	b.n	801294a <_vfiprintf_r+0x1b6>
 8012968:	ab03      	add	r3, sp, #12
 801296a:	9300      	str	r3, [sp, #0]
 801296c:	4622      	mov	r2, r4
 801296e:	4b13      	ldr	r3, [pc, #76]	; (80129bc <_vfiprintf_r+0x228>)
 8012970:	a904      	add	r1, sp, #16
 8012972:	4630      	mov	r0, r6
 8012974:	f3af 8000 	nop.w
 8012978:	f1b0 3fff 	cmp.w	r0, #4294967295
 801297c:	4681      	mov	r9, r0
 801297e:	d1d5      	bne.n	801292c <_vfiprintf_r+0x198>
 8012980:	89a3      	ldrh	r3, [r4, #12]
 8012982:	065b      	lsls	r3, r3, #25
 8012984:	f53f af7e 	bmi.w	8012884 <_vfiprintf_r+0xf0>
 8012988:	9809      	ldr	r0, [sp, #36]	; 0x24
 801298a:	e77d      	b.n	8012888 <_vfiprintf_r+0xf4>
 801298c:	ab03      	add	r3, sp, #12
 801298e:	9300      	str	r3, [sp, #0]
 8012990:	4622      	mov	r2, r4
 8012992:	4b0a      	ldr	r3, [pc, #40]	; (80129bc <_vfiprintf_r+0x228>)
 8012994:	a904      	add	r1, sp, #16
 8012996:	4630      	mov	r0, r6
 8012998:	f000 f888 	bl	8012aac <_printf_i>
 801299c:	e7ec      	b.n	8012978 <_vfiprintf_r+0x1e4>
 801299e:	bf00      	nop
 80129a0:	08014240 	.word	0x08014240
 80129a4:	08014280 	.word	0x08014280
 80129a8:	08014260 	.word	0x08014260
 80129ac:	08014220 	.word	0x08014220
 80129b0:	08014286 	.word	0x08014286
 80129b4:	0801428a 	.word	0x0801428a
 80129b8:	00000000 	.word	0x00000000
 80129bc:	0801276f 	.word	0x0801276f

080129c0 <_printf_common>:
 80129c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129c4:	4691      	mov	r9, r2
 80129c6:	461f      	mov	r7, r3
 80129c8:	688a      	ldr	r2, [r1, #8]
 80129ca:	690b      	ldr	r3, [r1, #16]
 80129cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80129d0:	4293      	cmp	r3, r2
 80129d2:	bfb8      	it	lt
 80129d4:	4613      	movlt	r3, r2
 80129d6:	f8c9 3000 	str.w	r3, [r9]
 80129da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80129de:	4606      	mov	r6, r0
 80129e0:	460c      	mov	r4, r1
 80129e2:	b112      	cbz	r2, 80129ea <_printf_common+0x2a>
 80129e4:	3301      	adds	r3, #1
 80129e6:	f8c9 3000 	str.w	r3, [r9]
 80129ea:	6823      	ldr	r3, [r4, #0]
 80129ec:	0699      	lsls	r1, r3, #26
 80129ee:	bf42      	ittt	mi
 80129f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80129f4:	3302      	addmi	r3, #2
 80129f6:	f8c9 3000 	strmi.w	r3, [r9]
 80129fa:	6825      	ldr	r5, [r4, #0]
 80129fc:	f015 0506 	ands.w	r5, r5, #6
 8012a00:	d107      	bne.n	8012a12 <_printf_common+0x52>
 8012a02:	f104 0a19 	add.w	sl, r4, #25
 8012a06:	68e3      	ldr	r3, [r4, #12]
 8012a08:	f8d9 2000 	ldr.w	r2, [r9]
 8012a0c:	1a9b      	subs	r3, r3, r2
 8012a0e:	42ab      	cmp	r3, r5
 8012a10:	dc28      	bgt.n	8012a64 <_printf_common+0xa4>
 8012a12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012a16:	6822      	ldr	r2, [r4, #0]
 8012a18:	3300      	adds	r3, #0
 8012a1a:	bf18      	it	ne
 8012a1c:	2301      	movne	r3, #1
 8012a1e:	0692      	lsls	r2, r2, #26
 8012a20:	d42d      	bmi.n	8012a7e <_printf_common+0xbe>
 8012a22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012a26:	4639      	mov	r1, r7
 8012a28:	4630      	mov	r0, r6
 8012a2a:	47c0      	blx	r8
 8012a2c:	3001      	adds	r0, #1
 8012a2e:	d020      	beq.n	8012a72 <_printf_common+0xb2>
 8012a30:	6823      	ldr	r3, [r4, #0]
 8012a32:	68e5      	ldr	r5, [r4, #12]
 8012a34:	f8d9 2000 	ldr.w	r2, [r9]
 8012a38:	f003 0306 	and.w	r3, r3, #6
 8012a3c:	2b04      	cmp	r3, #4
 8012a3e:	bf08      	it	eq
 8012a40:	1aad      	subeq	r5, r5, r2
 8012a42:	68a3      	ldr	r3, [r4, #8]
 8012a44:	6922      	ldr	r2, [r4, #16]
 8012a46:	bf0c      	ite	eq
 8012a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012a4c:	2500      	movne	r5, #0
 8012a4e:	4293      	cmp	r3, r2
 8012a50:	bfc4      	itt	gt
 8012a52:	1a9b      	subgt	r3, r3, r2
 8012a54:	18ed      	addgt	r5, r5, r3
 8012a56:	f04f 0900 	mov.w	r9, #0
 8012a5a:	341a      	adds	r4, #26
 8012a5c:	454d      	cmp	r5, r9
 8012a5e:	d11a      	bne.n	8012a96 <_printf_common+0xd6>
 8012a60:	2000      	movs	r0, #0
 8012a62:	e008      	b.n	8012a76 <_printf_common+0xb6>
 8012a64:	2301      	movs	r3, #1
 8012a66:	4652      	mov	r2, sl
 8012a68:	4639      	mov	r1, r7
 8012a6a:	4630      	mov	r0, r6
 8012a6c:	47c0      	blx	r8
 8012a6e:	3001      	adds	r0, #1
 8012a70:	d103      	bne.n	8012a7a <_printf_common+0xba>
 8012a72:	f04f 30ff 	mov.w	r0, #4294967295
 8012a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a7a:	3501      	adds	r5, #1
 8012a7c:	e7c3      	b.n	8012a06 <_printf_common+0x46>
 8012a7e:	18e1      	adds	r1, r4, r3
 8012a80:	1c5a      	adds	r2, r3, #1
 8012a82:	2030      	movs	r0, #48	; 0x30
 8012a84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012a88:	4422      	add	r2, r4
 8012a8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012a8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012a92:	3302      	adds	r3, #2
 8012a94:	e7c5      	b.n	8012a22 <_printf_common+0x62>
 8012a96:	2301      	movs	r3, #1
 8012a98:	4622      	mov	r2, r4
 8012a9a:	4639      	mov	r1, r7
 8012a9c:	4630      	mov	r0, r6
 8012a9e:	47c0      	blx	r8
 8012aa0:	3001      	adds	r0, #1
 8012aa2:	d0e6      	beq.n	8012a72 <_printf_common+0xb2>
 8012aa4:	f109 0901 	add.w	r9, r9, #1
 8012aa8:	e7d8      	b.n	8012a5c <_printf_common+0x9c>
	...

08012aac <_printf_i>:
 8012aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ab0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012ab4:	460c      	mov	r4, r1
 8012ab6:	7e09      	ldrb	r1, [r1, #24]
 8012ab8:	b085      	sub	sp, #20
 8012aba:	296e      	cmp	r1, #110	; 0x6e
 8012abc:	4617      	mov	r7, r2
 8012abe:	4606      	mov	r6, r0
 8012ac0:	4698      	mov	r8, r3
 8012ac2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012ac4:	f000 80b3 	beq.w	8012c2e <_printf_i+0x182>
 8012ac8:	d822      	bhi.n	8012b10 <_printf_i+0x64>
 8012aca:	2963      	cmp	r1, #99	; 0x63
 8012acc:	d036      	beq.n	8012b3c <_printf_i+0x90>
 8012ace:	d80a      	bhi.n	8012ae6 <_printf_i+0x3a>
 8012ad0:	2900      	cmp	r1, #0
 8012ad2:	f000 80b9 	beq.w	8012c48 <_printf_i+0x19c>
 8012ad6:	2958      	cmp	r1, #88	; 0x58
 8012ad8:	f000 8083 	beq.w	8012be2 <_printf_i+0x136>
 8012adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ae0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012ae4:	e032      	b.n	8012b4c <_printf_i+0xa0>
 8012ae6:	2964      	cmp	r1, #100	; 0x64
 8012ae8:	d001      	beq.n	8012aee <_printf_i+0x42>
 8012aea:	2969      	cmp	r1, #105	; 0x69
 8012aec:	d1f6      	bne.n	8012adc <_printf_i+0x30>
 8012aee:	6820      	ldr	r0, [r4, #0]
 8012af0:	6813      	ldr	r3, [r2, #0]
 8012af2:	0605      	lsls	r5, r0, #24
 8012af4:	f103 0104 	add.w	r1, r3, #4
 8012af8:	d52a      	bpl.n	8012b50 <_printf_i+0xa4>
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	6011      	str	r1, [r2, #0]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	da03      	bge.n	8012b0a <_printf_i+0x5e>
 8012b02:	222d      	movs	r2, #45	; 0x2d
 8012b04:	425b      	negs	r3, r3
 8012b06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012b0a:	486f      	ldr	r0, [pc, #444]	; (8012cc8 <_printf_i+0x21c>)
 8012b0c:	220a      	movs	r2, #10
 8012b0e:	e039      	b.n	8012b84 <_printf_i+0xd8>
 8012b10:	2973      	cmp	r1, #115	; 0x73
 8012b12:	f000 809d 	beq.w	8012c50 <_printf_i+0x1a4>
 8012b16:	d808      	bhi.n	8012b2a <_printf_i+0x7e>
 8012b18:	296f      	cmp	r1, #111	; 0x6f
 8012b1a:	d020      	beq.n	8012b5e <_printf_i+0xb2>
 8012b1c:	2970      	cmp	r1, #112	; 0x70
 8012b1e:	d1dd      	bne.n	8012adc <_printf_i+0x30>
 8012b20:	6823      	ldr	r3, [r4, #0]
 8012b22:	f043 0320 	orr.w	r3, r3, #32
 8012b26:	6023      	str	r3, [r4, #0]
 8012b28:	e003      	b.n	8012b32 <_printf_i+0x86>
 8012b2a:	2975      	cmp	r1, #117	; 0x75
 8012b2c:	d017      	beq.n	8012b5e <_printf_i+0xb2>
 8012b2e:	2978      	cmp	r1, #120	; 0x78
 8012b30:	d1d4      	bne.n	8012adc <_printf_i+0x30>
 8012b32:	2378      	movs	r3, #120	; 0x78
 8012b34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012b38:	4864      	ldr	r0, [pc, #400]	; (8012ccc <_printf_i+0x220>)
 8012b3a:	e055      	b.n	8012be8 <_printf_i+0x13c>
 8012b3c:	6813      	ldr	r3, [r2, #0]
 8012b3e:	1d19      	adds	r1, r3, #4
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	6011      	str	r1, [r2, #0]
 8012b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012b48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012b4c:	2301      	movs	r3, #1
 8012b4e:	e08c      	b.n	8012c6a <_printf_i+0x1be>
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	6011      	str	r1, [r2, #0]
 8012b54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012b58:	bf18      	it	ne
 8012b5a:	b21b      	sxthne	r3, r3
 8012b5c:	e7cf      	b.n	8012afe <_printf_i+0x52>
 8012b5e:	6813      	ldr	r3, [r2, #0]
 8012b60:	6825      	ldr	r5, [r4, #0]
 8012b62:	1d18      	adds	r0, r3, #4
 8012b64:	6010      	str	r0, [r2, #0]
 8012b66:	0628      	lsls	r0, r5, #24
 8012b68:	d501      	bpl.n	8012b6e <_printf_i+0xc2>
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	e002      	b.n	8012b74 <_printf_i+0xc8>
 8012b6e:	0668      	lsls	r0, r5, #25
 8012b70:	d5fb      	bpl.n	8012b6a <_printf_i+0xbe>
 8012b72:	881b      	ldrh	r3, [r3, #0]
 8012b74:	4854      	ldr	r0, [pc, #336]	; (8012cc8 <_printf_i+0x21c>)
 8012b76:	296f      	cmp	r1, #111	; 0x6f
 8012b78:	bf14      	ite	ne
 8012b7a:	220a      	movne	r2, #10
 8012b7c:	2208      	moveq	r2, #8
 8012b7e:	2100      	movs	r1, #0
 8012b80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012b84:	6865      	ldr	r5, [r4, #4]
 8012b86:	60a5      	str	r5, [r4, #8]
 8012b88:	2d00      	cmp	r5, #0
 8012b8a:	f2c0 8095 	blt.w	8012cb8 <_printf_i+0x20c>
 8012b8e:	6821      	ldr	r1, [r4, #0]
 8012b90:	f021 0104 	bic.w	r1, r1, #4
 8012b94:	6021      	str	r1, [r4, #0]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d13d      	bne.n	8012c16 <_printf_i+0x16a>
 8012b9a:	2d00      	cmp	r5, #0
 8012b9c:	f040 808e 	bne.w	8012cbc <_printf_i+0x210>
 8012ba0:	4665      	mov	r5, ip
 8012ba2:	2a08      	cmp	r2, #8
 8012ba4:	d10b      	bne.n	8012bbe <_printf_i+0x112>
 8012ba6:	6823      	ldr	r3, [r4, #0]
 8012ba8:	07db      	lsls	r3, r3, #31
 8012baa:	d508      	bpl.n	8012bbe <_printf_i+0x112>
 8012bac:	6923      	ldr	r3, [r4, #16]
 8012bae:	6862      	ldr	r2, [r4, #4]
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	bfde      	ittt	le
 8012bb4:	2330      	movle	r3, #48	; 0x30
 8012bb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012bba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012bbe:	ebac 0305 	sub.w	r3, ip, r5
 8012bc2:	6123      	str	r3, [r4, #16]
 8012bc4:	f8cd 8000 	str.w	r8, [sp]
 8012bc8:	463b      	mov	r3, r7
 8012bca:	aa03      	add	r2, sp, #12
 8012bcc:	4621      	mov	r1, r4
 8012bce:	4630      	mov	r0, r6
 8012bd0:	f7ff fef6 	bl	80129c0 <_printf_common>
 8012bd4:	3001      	adds	r0, #1
 8012bd6:	d14d      	bne.n	8012c74 <_printf_i+0x1c8>
 8012bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8012bdc:	b005      	add	sp, #20
 8012bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012be2:	4839      	ldr	r0, [pc, #228]	; (8012cc8 <_printf_i+0x21c>)
 8012be4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012be8:	6813      	ldr	r3, [r2, #0]
 8012bea:	6821      	ldr	r1, [r4, #0]
 8012bec:	1d1d      	adds	r5, r3, #4
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	6015      	str	r5, [r2, #0]
 8012bf2:	060a      	lsls	r2, r1, #24
 8012bf4:	d50b      	bpl.n	8012c0e <_printf_i+0x162>
 8012bf6:	07ca      	lsls	r2, r1, #31
 8012bf8:	bf44      	itt	mi
 8012bfa:	f041 0120 	orrmi.w	r1, r1, #32
 8012bfe:	6021      	strmi	r1, [r4, #0]
 8012c00:	b91b      	cbnz	r3, 8012c0a <_printf_i+0x15e>
 8012c02:	6822      	ldr	r2, [r4, #0]
 8012c04:	f022 0220 	bic.w	r2, r2, #32
 8012c08:	6022      	str	r2, [r4, #0]
 8012c0a:	2210      	movs	r2, #16
 8012c0c:	e7b7      	b.n	8012b7e <_printf_i+0xd2>
 8012c0e:	064d      	lsls	r5, r1, #25
 8012c10:	bf48      	it	mi
 8012c12:	b29b      	uxthmi	r3, r3
 8012c14:	e7ef      	b.n	8012bf6 <_printf_i+0x14a>
 8012c16:	4665      	mov	r5, ip
 8012c18:	fbb3 f1f2 	udiv	r1, r3, r2
 8012c1c:	fb02 3311 	mls	r3, r2, r1, r3
 8012c20:	5cc3      	ldrb	r3, [r0, r3]
 8012c22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012c26:	460b      	mov	r3, r1
 8012c28:	2900      	cmp	r1, #0
 8012c2a:	d1f5      	bne.n	8012c18 <_printf_i+0x16c>
 8012c2c:	e7b9      	b.n	8012ba2 <_printf_i+0xf6>
 8012c2e:	6813      	ldr	r3, [r2, #0]
 8012c30:	6825      	ldr	r5, [r4, #0]
 8012c32:	6961      	ldr	r1, [r4, #20]
 8012c34:	1d18      	adds	r0, r3, #4
 8012c36:	6010      	str	r0, [r2, #0]
 8012c38:	0628      	lsls	r0, r5, #24
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	d501      	bpl.n	8012c42 <_printf_i+0x196>
 8012c3e:	6019      	str	r1, [r3, #0]
 8012c40:	e002      	b.n	8012c48 <_printf_i+0x19c>
 8012c42:	066a      	lsls	r2, r5, #25
 8012c44:	d5fb      	bpl.n	8012c3e <_printf_i+0x192>
 8012c46:	8019      	strh	r1, [r3, #0]
 8012c48:	2300      	movs	r3, #0
 8012c4a:	6123      	str	r3, [r4, #16]
 8012c4c:	4665      	mov	r5, ip
 8012c4e:	e7b9      	b.n	8012bc4 <_printf_i+0x118>
 8012c50:	6813      	ldr	r3, [r2, #0]
 8012c52:	1d19      	adds	r1, r3, #4
 8012c54:	6011      	str	r1, [r2, #0]
 8012c56:	681d      	ldr	r5, [r3, #0]
 8012c58:	6862      	ldr	r2, [r4, #4]
 8012c5a:	2100      	movs	r1, #0
 8012c5c:	4628      	mov	r0, r5
 8012c5e:	f7ed faa7 	bl	80001b0 <memchr>
 8012c62:	b108      	cbz	r0, 8012c68 <_printf_i+0x1bc>
 8012c64:	1b40      	subs	r0, r0, r5
 8012c66:	6060      	str	r0, [r4, #4]
 8012c68:	6863      	ldr	r3, [r4, #4]
 8012c6a:	6123      	str	r3, [r4, #16]
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c72:	e7a7      	b.n	8012bc4 <_printf_i+0x118>
 8012c74:	6923      	ldr	r3, [r4, #16]
 8012c76:	462a      	mov	r2, r5
 8012c78:	4639      	mov	r1, r7
 8012c7a:	4630      	mov	r0, r6
 8012c7c:	47c0      	blx	r8
 8012c7e:	3001      	adds	r0, #1
 8012c80:	d0aa      	beq.n	8012bd8 <_printf_i+0x12c>
 8012c82:	6823      	ldr	r3, [r4, #0]
 8012c84:	079b      	lsls	r3, r3, #30
 8012c86:	d413      	bmi.n	8012cb0 <_printf_i+0x204>
 8012c88:	68e0      	ldr	r0, [r4, #12]
 8012c8a:	9b03      	ldr	r3, [sp, #12]
 8012c8c:	4298      	cmp	r0, r3
 8012c8e:	bfb8      	it	lt
 8012c90:	4618      	movlt	r0, r3
 8012c92:	e7a3      	b.n	8012bdc <_printf_i+0x130>
 8012c94:	2301      	movs	r3, #1
 8012c96:	464a      	mov	r2, r9
 8012c98:	4639      	mov	r1, r7
 8012c9a:	4630      	mov	r0, r6
 8012c9c:	47c0      	blx	r8
 8012c9e:	3001      	adds	r0, #1
 8012ca0:	d09a      	beq.n	8012bd8 <_printf_i+0x12c>
 8012ca2:	3501      	adds	r5, #1
 8012ca4:	68e3      	ldr	r3, [r4, #12]
 8012ca6:	9a03      	ldr	r2, [sp, #12]
 8012ca8:	1a9b      	subs	r3, r3, r2
 8012caa:	42ab      	cmp	r3, r5
 8012cac:	dcf2      	bgt.n	8012c94 <_printf_i+0x1e8>
 8012cae:	e7eb      	b.n	8012c88 <_printf_i+0x1dc>
 8012cb0:	2500      	movs	r5, #0
 8012cb2:	f104 0919 	add.w	r9, r4, #25
 8012cb6:	e7f5      	b.n	8012ca4 <_printf_i+0x1f8>
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d1ac      	bne.n	8012c16 <_printf_i+0x16a>
 8012cbc:	7803      	ldrb	r3, [r0, #0]
 8012cbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012cc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012cc6:	e76c      	b.n	8012ba2 <_printf_i+0xf6>
 8012cc8:	08014291 	.word	0x08014291
 8012ccc:	080142a2 	.word	0x080142a2

08012cd0 <_sbrk_r>:
 8012cd0:	b538      	push	{r3, r4, r5, lr}
 8012cd2:	4c06      	ldr	r4, [pc, #24]	; (8012cec <_sbrk_r+0x1c>)
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	4605      	mov	r5, r0
 8012cd8:	4608      	mov	r0, r1
 8012cda:	6023      	str	r3, [r4, #0]
 8012cdc:	f7f0 f856 	bl	8002d8c <_sbrk>
 8012ce0:	1c43      	adds	r3, r0, #1
 8012ce2:	d102      	bne.n	8012cea <_sbrk_r+0x1a>
 8012ce4:	6823      	ldr	r3, [r4, #0]
 8012ce6:	b103      	cbz	r3, 8012cea <_sbrk_r+0x1a>
 8012ce8:	602b      	str	r3, [r5, #0]
 8012cea:	bd38      	pop	{r3, r4, r5, pc}
 8012cec:	20006ff0 	.word	0x20006ff0

08012cf0 <__sread>:
 8012cf0:	b510      	push	{r4, lr}
 8012cf2:	460c      	mov	r4, r1
 8012cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cf8:	f000 f8d6 	bl	8012ea8 <_read_r>
 8012cfc:	2800      	cmp	r0, #0
 8012cfe:	bfab      	itete	ge
 8012d00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012d02:	89a3      	ldrhlt	r3, [r4, #12]
 8012d04:	181b      	addge	r3, r3, r0
 8012d06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012d0a:	bfac      	ite	ge
 8012d0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8012d0e:	81a3      	strhlt	r3, [r4, #12]
 8012d10:	bd10      	pop	{r4, pc}

08012d12 <__swrite>:
 8012d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d16:	461f      	mov	r7, r3
 8012d18:	898b      	ldrh	r3, [r1, #12]
 8012d1a:	05db      	lsls	r3, r3, #23
 8012d1c:	4605      	mov	r5, r0
 8012d1e:	460c      	mov	r4, r1
 8012d20:	4616      	mov	r6, r2
 8012d22:	d505      	bpl.n	8012d30 <__swrite+0x1e>
 8012d24:	2302      	movs	r3, #2
 8012d26:	2200      	movs	r2, #0
 8012d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d2c:	f000 f868 	bl	8012e00 <_lseek_r>
 8012d30:	89a3      	ldrh	r3, [r4, #12]
 8012d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012d3a:	81a3      	strh	r3, [r4, #12]
 8012d3c:	4632      	mov	r2, r6
 8012d3e:	463b      	mov	r3, r7
 8012d40:	4628      	mov	r0, r5
 8012d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d46:	f000 b817 	b.w	8012d78 <_write_r>

08012d4a <__sseek>:
 8012d4a:	b510      	push	{r4, lr}
 8012d4c:	460c      	mov	r4, r1
 8012d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d52:	f000 f855 	bl	8012e00 <_lseek_r>
 8012d56:	1c43      	adds	r3, r0, #1
 8012d58:	89a3      	ldrh	r3, [r4, #12]
 8012d5a:	bf15      	itete	ne
 8012d5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8012d5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012d62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012d66:	81a3      	strheq	r3, [r4, #12]
 8012d68:	bf18      	it	ne
 8012d6a:	81a3      	strhne	r3, [r4, #12]
 8012d6c:	bd10      	pop	{r4, pc}

08012d6e <__sclose>:
 8012d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d72:	f000 b813 	b.w	8012d9c <_close_r>
	...

08012d78 <_write_r>:
 8012d78:	b538      	push	{r3, r4, r5, lr}
 8012d7a:	4c07      	ldr	r4, [pc, #28]	; (8012d98 <_write_r+0x20>)
 8012d7c:	4605      	mov	r5, r0
 8012d7e:	4608      	mov	r0, r1
 8012d80:	4611      	mov	r1, r2
 8012d82:	2200      	movs	r2, #0
 8012d84:	6022      	str	r2, [r4, #0]
 8012d86:	461a      	mov	r2, r3
 8012d88:	f7f7 fdf0 	bl	800a96c <_write>
 8012d8c:	1c43      	adds	r3, r0, #1
 8012d8e:	d102      	bne.n	8012d96 <_write_r+0x1e>
 8012d90:	6823      	ldr	r3, [r4, #0]
 8012d92:	b103      	cbz	r3, 8012d96 <_write_r+0x1e>
 8012d94:	602b      	str	r3, [r5, #0]
 8012d96:	bd38      	pop	{r3, r4, r5, pc}
 8012d98:	20006ff0 	.word	0x20006ff0

08012d9c <_close_r>:
 8012d9c:	b538      	push	{r3, r4, r5, lr}
 8012d9e:	4c06      	ldr	r4, [pc, #24]	; (8012db8 <_close_r+0x1c>)
 8012da0:	2300      	movs	r3, #0
 8012da2:	4605      	mov	r5, r0
 8012da4:	4608      	mov	r0, r1
 8012da6:	6023      	str	r3, [r4, #0]
 8012da8:	f7ef ffbb 	bl	8002d22 <_close>
 8012dac:	1c43      	adds	r3, r0, #1
 8012dae:	d102      	bne.n	8012db6 <_close_r+0x1a>
 8012db0:	6823      	ldr	r3, [r4, #0]
 8012db2:	b103      	cbz	r3, 8012db6 <_close_r+0x1a>
 8012db4:	602b      	str	r3, [r5, #0]
 8012db6:	bd38      	pop	{r3, r4, r5, pc}
 8012db8:	20006ff0 	.word	0x20006ff0

08012dbc <_fstat_r>:
 8012dbc:	b538      	push	{r3, r4, r5, lr}
 8012dbe:	4c07      	ldr	r4, [pc, #28]	; (8012ddc <_fstat_r+0x20>)
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	4605      	mov	r5, r0
 8012dc4:	4608      	mov	r0, r1
 8012dc6:	4611      	mov	r1, r2
 8012dc8:	6023      	str	r3, [r4, #0]
 8012dca:	f7ef ffb6 	bl	8002d3a <_fstat>
 8012dce:	1c43      	adds	r3, r0, #1
 8012dd0:	d102      	bne.n	8012dd8 <_fstat_r+0x1c>
 8012dd2:	6823      	ldr	r3, [r4, #0]
 8012dd4:	b103      	cbz	r3, 8012dd8 <_fstat_r+0x1c>
 8012dd6:	602b      	str	r3, [r5, #0]
 8012dd8:	bd38      	pop	{r3, r4, r5, pc}
 8012dda:	bf00      	nop
 8012ddc:	20006ff0 	.word	0x20006ff0

08012de0 <_isatty_r>:
 8012de0:	b538      	push	{r3, r4, r5, lr}
 8012de2:	4c06      	ldr	r4, [pc, #24]	; (8012dfc <_isatty_r+0x1c>)
 8012de4:	2300      	movs	r3, #0
 8012de6:	4605      	mov	r5, r0
 8012de8:	4608      	mov	r0, r1
 8012dea:	6023      	str	r3, [r4, #0]
 8012dec:	f7ef ffb5 	bl	8002d5a <_isatty>
 8012df0:	1c43      	adds	r3, r0, #1
 8012df2:	d102      	bne.n	8012dfa <_isatty_r+0x1a>
 8012df4:	6823      	ldr	r3, [r4, #0]
 8012df6:	b103      	cbz	r3, 8012dfa <_isatty_r+0x1a>
 8012df8:	602b      	str	r3, [r5, #0]
 8012dfa:	bd38      	pop	{r3, r4, r5, pc}
 8012dfc:	20006ff0 	.word	0x20006ff0

08012e00 <_lseek_r>:
 8012e00:	b538      	push	{r3, r4, r5, lr}
 8012e02:	4c07      	ldr	r4, [pc, #28]	; (8012e20 <_lseek_r+0x20>)
 8012e04:	4605      	mov	r5, r0
 8012e06:	4608      	mov	r0, r1
 8012e08:	4611      	mov	r1, r2
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	6022      	str	r2, [r4, #0]
 8012e0e:	461a      	mov	r2, r3
 8012e10:	f7ef ffae 	bl	8002d70 <_lseek>
 8012e14:	1c43      	adds	r3, r0, #1
 8012e16:	d102      	bne.n	8012e1e <_lseek_r+0x1e>
 8012e18:	6823      	ldr	r3, [r4, #0]
 8012e1a:	b103      	cbz	r3, 8012e1e <_lseek_r+0x1e>
 8012e1c:	602b      	str	r3, [r5, #0]
 8012e1e:	bd38      	pop	{r3, r4, r5, pc}
 8012e20:	20006ff0 	.word	0x20006ff0

08012e24 <memmove>:
 8012e24:	4288      	cmp	r0, r1
 8012e26:	b510      	push	{r4, lr}
 8012e28:	eb01 0302 	add.w	r3, r1, r2
 8012e2c:	d807      	bhi.n	8012e3e <memmove+0x1a>
 8012e2e:	1e42      	subs	r2, r0, #1
 8012e30:	4299      	cmp	r1, r3
 8012e32:	d00a      	beq.n	8012e4a <memmove+0x26>
 8012e34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e38:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012e3c:	e7f8      	b.n	8012e30 <memmove+0xc>
 8012e3e:	4283      	cmp	r3, r0
 8012e40:	d9f5      	bls.n	8012e2e <memmove+0xa>
 8012e42:	1881      	adds	r1, r0, r2
 8012e44:	1ad2      	subs	r2, r2, r3
 8012e46:	42d3      	cmn	r3, r2
 8012e48:	d100      	bne.n	8012e4c <memmove+0x28>
 8012e4a:	bd10      	pop	{r4, pc}
 8012e4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012e50:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012e54:	e7f7      	b.n	8012e46 <memmove+0x22>

08012e56 <__malloc_lock>:
 8012e56:	4770      	bx	lr

08012e58 <__malloc_unlock>:
 8012e58:	4770      	bx	lr

08012e5a <_realloc_r>:
 8012e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e5c:	4607      	mov	r7, r0
 8012e5e:	4614      	mov	r4, r2
 8012e60:	460e      	mov	r6, r1
 8012e62:	b921      	cbnz	r1, 8012e6e <_realloc_r+0x14>
 8012e64:	4611      	mov	r1, r2
 8012e66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012e6a:	f7ff babd 	b.w	80123e8 <_malloc_r>
 8012e6e:	b922      	cbnz	r2, 8012e7a <_realloc_r+0x20>
 8012e70:	f7ff fa6c 	bl	801234c <_free_r>
 8012e74:	4625      	mov	r5, r4
 8012e76:	4628      	mov	r0, r5
 8012e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e7a:	f000 f827 	bl	8012ecc <_malloc_usable_size_r>
 8012e7e:	42a0      	cmp	r0, r4
 8012e80:	d20f      	bcs.n	8012ea2 <_realloc_r+0x48>
 8012e82:	4621      	mov	r1, r4
 8012e84:	4638      	mov	r0, r7
 8012e86:	f7ff faaf 	bl	80123e8 <_malloc_r>
 8012e8a:	4605      	mov	r5, r0
 8012e8c:	2800      	cmp	r0, #0
 8012e8e:	d0f2      	beq.n	8012e76 <_realloc_r+0x1c>
 8012e90:	4631      	mov	r1, r6
 8012e92:	4622      	mov	r2, r4
 8012e94:	f7fe febe 	bl	8011c14 <memcpy>
 8012e98:	4631      	mov	r1, r6
 8012e9a:	4638      	mov	r0, r7
 8012e9c:	f7ff fa56 	bl	801234c <_free_r>
 8012ea0:	e7e9      	b.n	8012e76 <_realloc_r+0x1c>
 8012ea2:	4635      	mov	r5, r6
 8012ea4:	e7e7      	b.n	8012e76 <_realloc_r+0x1c>
	...

08012ea8 <_read_r>:
 8012ea8:	b538      	push	{r3, r4, r5, lr}
 8012eaa:	4c07      	ldr	r4, [pc, #28]	; (8012ec8 <_read_r+0x20>)
 8012eac:	4605      	mov	r5, r0
 8012eae:	4608      	mov	r0, r1
 8012eb0:	4611      	mov	r1, r2
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	6022      	str	r2, [r4, #0]
 8012eb6:	461a      	mov	r2, r3
 8012eb8:	f7ef ff16 	bl	8002ce8 <_read>
 8012ebc:	1c43      	adds	r3, r0, #1
 8012ebe:	d102      	bne.n	8012ec6 <_read_r+0x1e>
 8012ec0:	6823      	ldr	r3, [r4, #0]
 8012ec2:	b103      	cbz	r3, 8012ec6 <_read_r+0x1e>
 8012ec4:	602b      	str	r3, [r5, #0]
 8012ec6:	bd38      	pop	{r3, r4, r5, pc}
 8012ec8:	20006ff0 	.word	0x20006ff0

08012ecc <_malloc_usable_size_r>:
 8012ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ed0:	1f18      	subs	r0, r3, #4
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	bfbc      	itt	lt
 8012ed6:	580b      	ldrlt	r3, [r1, r0]
 8012ed8:	18c0      	addlt	r0, r0, r3
 8012eda:	4770      	bx	lr

08012edc <_init>:
 8012edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ede:	bf00      	nop
 8012ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ee2:	bc08      	pop	{r3}
 8012ee4:	469e      	mov	lr, r3
 8012ee6:	4770      	bx	lr

08012ee8 <_fini>:
 8012ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eea:	bf00      	nop
 8012eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012eee:	bc08      	pop	{r3}
 8012ef0:	469e      	mov	lr, r3
 8012ef2:	4770      	bx	lr
